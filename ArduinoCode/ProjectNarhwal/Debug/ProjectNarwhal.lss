
ProjectNarwhal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000046e  00800200  00007a28  00007abc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007a28  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000006d8  0080066e  0080066e  00007f2a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00007f2a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007f5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000011f0  00000000  00000000  00007f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00053508  00000000  00000000  0000918c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00008dcc  00000000  00000000  0005c694  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000c1bf  00000000  00000000  00065460  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003ff0  00000000  00000000  00071620  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005891  00000000  00000000  00075610  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00014877  00000000  00000000  0007aea1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001020  00000000  00000000  0008f718  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	06 c2       	rjmp	.+1036   	; 0x40e <__dtors_end>
       2:	00 00       	nop
       4:	0c 94 70 33 	jmp	0x66e0	; 0x66e0 <__vector_1>
       8:	0c 94 a1 33 	jmp	0x6742	; 0x6742 <__vector_2>
       c:	0c 94 d2 33 	jmp	0x67a4	; 0x67a4 <__vector_3>
      10:	0c 94 03 34 	jmp	0x6806	; 0x6806 <__vector_4>
      14:	0c 94 34 34 	jmp	0x6868	; 0x6868 <__vector_5>
      18:	0c 94 65 34 	jmp	0x68ca	; 0x68ca <__vector_6>
      1c:	0c 94 96 34 	jmp	0x692c	; 0x692c <__vector_7>
      20:	0c 94 c7 34 	jmp	0x698e	; 0x698e <__vector_8>
      24:	25 c2       	rjmp	.+1098   	; 0x470 <__bad_interrupt>
      26:	00 00       	nop
      28:	23 c2       	rjmp	.+1094   	; 0x470 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	21 c2       	rjmp	.+1090   	; 0x470 <__bad_interrupt>
      2e:	00 00       	nop
      30:	1f c2       	rjmp	.+1086   	; 0x470 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 11 33 	jmp	0x6622	; 0x6622 <__vector_13>
      38:	1b c2       	rjmp	.+1078   	; 0x470 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	19 c2       	rjmp	.+1074   	; 0x470 <__bad_interrupt>
      3e:	00 00       	nop
      40:	17 c2       	rjmp	.+1070   	; 0x470 <__bad_interrupt>
      42:	00 00       	nop
      44:	15 c2       	rjmp	.+1066   	; 0x470 <__bad_interrupt>
      46:	00 00       	nop
      48:	13 c2       	rjmp	.+1062   	; 0x470 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	11 c2       	rjmp	.+1058   	; 0x470 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 4c 28 	jmp	0x5098	; 0x5098 <__vector_20>
      54:	0d c2       	rjmp	.+1050   	; 0x470 <__bad_interrupt>
      56:	00 00       	nop
      58:	0b c2       	rjmp	.+1046   	; 0x470 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 f8 34 	jmp	0x69f0	; 0x69f0 <__vector_23>
      60:	07 c2       	rjmp	.+1038   	; 0x470 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 8c 2d 	jmp	0x5b18	; 0x5b18 <__vector_25>
      68:	0c 94 c8 2d 	jmp	0x5b90	; 0x5b90 <__vector_26>
      6c:	01 c2       	rjmp	.+1026   	; 0x470 <__bad_interrupt>
      6e:	00 00       	nop
      70:	ff c1       	rjmp	.+1022   	; 0x470 <__bad_interrupt>
      72:	00 00       	nop
      74:	fd c1       	rjmp	.+1018   	; 0x470 <__bad_interrupt>
      76:	00 00       	nop
      78:	fb c1       	rjmp	.+1014   	; 0x470 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f9 c1       	rjmp	.+1010   	; 0x470 <__bad_interrupt>
      7e:	00 00       	nop
      80:	f7 c1       	rjmp	.+1006   	; 0x470 <__bad_interrupt>
      82:	00 00       	nop
      84:	f5 c1       	rjmp	.+1002   	; 0x470 <__bad_interrupt>
      86:	00 00       	nop
      88:	f3 c1       	rjmp	.+998    	; 0x470 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f1 c1       	rjmp	.+994    	; 0x470 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 27 2e 	jmp	0x5c4e	; 0x5c4e <__vector_36>
      94:	0c 94 63 2e 	jmp	0x5cc6	; 0x5cc6 <__vector_37>
      98:	eb c1       	rjmp	.+982    	; 0x470 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__vector_39>
      a0:	e7 c1       	rjmp	.+974    	; 0x470 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	e5 c1       	rjmp	.+970    	; 0x470 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	e3 c1       	rjmp	.+966    	; 0x470 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	e1 c1       	rjmp	.+962    	; 0x470 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	df c1       	rjmp	.+958    	; 0x470 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	dd c1       	rjmp	.+954    	; 0x470 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	db c1       	rjmp	.+950    	; 0x470 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	d9 c1       	rjmp	.+946    	; 0x470 <__bad_interrupt>
      be:	00 00       	nop
      c0:	d7 c1       	rjmp	.+942    	; 0x470 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	d5 c1       	rjmp	.+938    	; 0x470 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	d3 c1       	rjmp	.+934    	; 0x470 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 c2 2e 	jmp	0x5d84	; 0x5d84 <__vector_51>
      d0:	0c 94 fe 2e 	jmp	0x5dfc	; 0x5dfc <__vector_52>
      d4:	cd c1       	rjmp	.+922    	; 0x470 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 5d 2f 	jmp	0x5eba	; 0x5eba <__vector_54>
      dc:	0c 94 99 2f 	jmp	0x5f32	; 0x5f32 <__vector_55>
      e0:	c7 c1       	rjmp	.+910    	; 0x470 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	12 1f       	adc	r17, r18
      e6:	da 1e       	adc	r13, r26
      e8:	e9 1e       	adc	r14, r25
      ea:	a2 1e       	adc	r10, r18
      ec:	af 1e       	adc	r10, r31
      ee:	bc 1e       	adc	r11, r28
      f0:	cb 1e       	adc	r12, r27
      f2:	f8 1e       	adc	r15, r24
      f4:	05 1f       	adc	r16, r21
      f6:	89 1f       	adc	r24, r25
      f8:	51 1f       	adc	r21, r17
      fa:	60 1f       	adc	r22, r16
      fc:	19 1f       	adc	r17, r25
      fe:	26 1f       	adc	r18, r22
     100:	33 1f       	adc	r19, r19
     102:	42 1f       	adc	r20, r18
     104:	6f 1f       	adc	r22, r31
     106:	7c 1f       	adc	r23, r28
     108:	90 1f       	adc	r25, r16
     10a:	d1 1f       	adc	r29, r17
     10c:	78 2a       	or	r7, r24
     10e:	7b 2a       	or	r7, r27
     110:	7b 2a       	or	r7, r27
     112:	7b 2a       	or	r7, r27
     114:	7b 2a       	or	r7, r27
     116:	7b 2a       	or	r7, r27
     118:	7b 2a       	or	r7, r27
     11a:	7b 2a       	or	r7, r27
     11c:	92 29       	or	r25, r2
     11e:	7b 2a       	or	r7, r27
     120:	7b 2a       	or	r7, r27
     122:	7b 2a       	or	r7, r27
     124:	7b 2a       	or	r7, r27
     126:	7b 2a       	or	r7, r27
     128:	7b 2a       	or	r7, r27
     12a:	7b 2a       	or	r7, r27
     12c:	92 29       	or	r25, r2
     12e:	7b 2a       	or	r7, r27
     130:	7b 2a       	or	r7, r27
     132:	7b 2a       	or	r7, r27
     134:	7b 2a       	or	r7, r27
     136:	7b 2a       	or	r7, r27
     138:	7b 2a       	or	r7, r27
     13a:	7b 2a       	or	r7, r27
     13c:	9a 29       	or	r25, r10
     13e:	7b 2a       	or	r7, r27
     140:	7b 2a       	or	r7, r27
     142:	7b 2a       	or	r7, r27
     144:	7b 2a       	or	r7, r27
     146:	7b 2a       	or	r7, r27
     148:	7b 2a       	or	r7, r27
     14a:	7b 2a       	or	r7, r27
     14c:	bf 29       	or	r27, r15
     14e:	7b 2a       	or	r7, r27
     150:	7b 2a       	or	r7, r27
     152:	7b 2a       	or	r7, r27
     154:	7b 2a       	or	r7, r27
     156:	7b 2a       	or	r7, r27
     158:	7b 2a       	or	r7, r27
     15a:	7b 2a       	or	r7, r27
     15c:	9a 29       	or	r25, r10
     15e:	7b 2a       	or	r7, r27
     160:	7b 2a       	or	r7, r27
     162:	7b 2a       	or	r7, r27
     164:	7b 2a       	or	r7, r27
     166:	7b 2a       	or	r7, r27
     168:	7b 2a       	or	r7, r27
     16a:	7b 2a       	or	r7, r27
     16c:	c4 29       	or	r28, r4
     16e:	7b 2a       	or	r7, r27
     170:	7b 2a       	or	r7, r27
     172:	7b 2a       	or	r7, r27
     174:	7b 2a       	or	r7, r27
     176:	7b 2a       	or	r7, r27
     178:	7b 2a       	or	r7, r27
     17a:	7b 2a       	or	r7, r27
     17c:	c9 29       	or	r28, r9
     17e:	7b 2a       	or	r7, r27
     180:	7b 2a       	or	r7, r27
     182:	7b 2a       	or	r7, r27
     184:	7b 2a       	or	r7, r27
     186:	7b 2a       	or	r7, r27
     188:	7b 2a       	or	r7, r27
     18a:	7b 2a       	or	r7, r27
     18c:	da 29       	or	r29, r10
     18e:	7b 2a       	or	r7, r27
     190:	7b 2a       	or	r7, r27
     192:	7b 2a       	or	r7, r27
     194:	7b 2a       	or	r7, r27
     196:	7b 2a       	or	r7, r27
     198:	7b 2a       	or	r7, r27
     19a:	7b 2a       	or	r7, r27
     19c:	03 2a       	or	r0, r19
     19e:	7b 2a       	or	r7, r27
     1a0:	7b 2a       	or	r7, r27
     1a2:	7b 2a       	or	r7, r27
     1a4:	7b 2a       	or	r7, r27
     1a6:	7b 2a       	or	r7, r27
     1a8:	7b 2a       	or	r7, r27
     1aa:	7b 2a       	or	r7, r27
     1ac:	ce 29       	or	r28, r14
     1ae:	7b 2a       	or	r7, r27
     1b0:	7b 2a       	or	r7, r27
     1b2:	7b 2a       	or	r7, r27
     1b4:	7b 2a       	or	r7, r27
     1b6:	7b 2a       	or	r7, r27
     1b8:	7b 2a       	or	r7, r27
     1ba:	7b 2a       	or	r7, r27
     1bc:	e8 29       	or	r30, r8
     1be:	7b 2a       	or	r7, r27
     1c0:	7b 2a       	or	r7, r27
     1c2:	7b 2a       	or	r7, r27
     1c4:	7b 2a       	or	r7, r27
     1c6:	7b 2a       	or	r7, r27
     1c8:	7b 2a       	or	r7, r27
     1ca:	7b 2a       	or	r7, r27
     1cc:	05 2a       	or	r0, r21
     1ce:	7b 2a       	or	r7, r27
     1d0:	7b 2a       	or	r7, r27
     1d2:	7b 2a       	or	r7, r27
     1d4:	7b 2a       	or	r7, r27
     1d6:	7b 2a       	or	r7, r27
     1d8:	7b 2a       	or	r7, r27
     1da:	7b 2a       	or	r7, r27
     1dc:	05 2a       	or	r0, r21
     1de:	7b 2a       	or	r7, r27
     1e0:	7b 2a       	or	r7, r27
     1e2:	7b 2a       	or	r7, r27
     1e4:	7b 2a       	or	r7, r27
     1e6:	7b 2a       	or	r7, r27
     1e8:	7b 2a       	or	r7, r27
     1ea:	7b 2a       	or	r7, r27
     1ec:	05 2a       	or	r0, r21
     1ee:	7b 2a       	or	r7, r27
     1f0:	7b 2a       	or	r7, r27
     1f2:	7b 2a       	or	r7, r27
     1f4:	7b 2a       	or	r7, r27
     1f6:	7b 2a       	or	r7, r27
     1f8:	7b 2a       	or	r7, r27
     1fa:	7b 2a       	or	r7, r27
     1fc:	05 2a       	or	r0, r21
     1fe:	7b 2a       	or	r7, r27
     200:	7b 2a       	or	r7, r27
     202:	7b 2a       	or	r7, r27
     204:	7b 2a       	or	r7, r27
     206:	7b 2a       	or	r7, r27
     208:	7b 2a       	or	r7, r27
     20a:	7b 2a       	or	r7, r27
     20c:	0e 2a       	or	r0, r30
     20e:	7b 2a       	or	r7, r27
     210:	7b 2a       	or	r7, r27
     212:	7b 2a       	or	r7, r27
     214:	7b 2a       	or	r7, r27
     216:	7b 2a       	or	r7, r27
     218:	7b 2a       	or	r7, r27
     21a:	7b 2a       	or	r7, r27
     21c:	3f 2a       	or	r3, r31
     21e:	7b 2a       	or	r7, r27
     220:	7b 2a       	or	r7, r27
     222:	7b 2a       	or	r7, r27
     224:	7b 2a       	or	r7, r27
     226:	7b 2a       	or	r7, r27
     228:	7b 2a       	or	r7, r27
     22a:	7b 2a       	or	r7, r27
     22c:	0e 2a       	or	r0, r30
     22e:	7b 2a       	or	r7, r27
     230:	7b 2a       	or	r7, r27
     232:	7b 2a       	or	r7, r27
     234:	7b 2a       	or	r7, r27
     236:	7b 2a       	or	r7, r27
     238:	7b 2a       	or	r7, r27
     23a:	7b 2a       	or	r7, r27
     23c:	3f 2a       	or	r3, r31
     23e:	7b 2a       	or	r7, r27
     240:	7b 2a       	or	r7, r27
     242:	7b 2a       	or	r7, r27
     244:	7b 2a       	or	r7, r27
     246:	7b 2a       	or	r7, r27
     248:	7b 2a       	or	r7, r27
     24a:	7b 2a       	or	r7, r27
     24c:	26 2a       	or	r2, r22
     24e:	7b 2a       	or	r7, r27
     250:	7b 2a       	or	r7, r27
     252:	7b 2a       	or	r7, r27
     254:	7b 2a       	or	r7, r27
     256:	7b 2a       	or	r7, r27
     258:	7b 2a       	or	r7, r27
     25a:	7b 2a       	or	r7, r27
     25c:	43 2a       	or	r4, r19
     25e:	7b 2a       	or	r7, r27
     260:	7b 2a       	or	r7, r27
     262:	7b 2a       	or	r7, r27
     264:	7b 2a       	or	r7, r27
     266:	7b 2a       	or	r7, r27
     268:	7b 2a       	or	r7, r27
     26a:	7b 2a       	or	r7, r27
     26c:	43 2a       	or	r4, r19
     26e:	7b 2a       	or	r7, r27
     270:	7b 2a       	or	r7, r27
     272:	7b 2a       	or	r7, r27
     274:	7b 2a       	or	r7, r27
     276:	7b 2a       	or	r7, r27
     278:	7b 2a       	or	r7, r27
     27a:	7b 2a       	or	r7, r27
     27c:	58 2a       	or	r5, r24
     27e:	7b 2a       	or	r7, r27
     280:	7b 2a       	or	r7, r27
     282:	7b 2a       	or	r7, r27
     284:	7b 2a       	or	r7, r27
     286:	7b 2a       	or	r7, r27
     288:	7b 2a       	or	r7, r27
     28a:	7b 2a       	or	r7, r27
     28c:	72 2a       	or	r7, r18
     28e:	7b 2a       	or	r7, r27
     290:	7b 2a       	or	r7, r27
     292:	7b 2a       	or	r7, r27
     294:	7b 2a       	or	r7, r27
     296:	7b 2a       	or	r7, r27
     298:	7b 2a       	or	r7, r27
     29a:	7b 2a       	or	r7, r27
     29c:	72 2a       	or	r7, r18
     29e:	4c 36       	cpi	r20, 0x6C	; 108
     2a0:	50 36       	cpi	r21, 0x60	; 96
     2a2:	3a 36       	cpi	r19, 0x6A	; 106
     2a4:	40 36       	cpi	r20, 0x60	; 96
     2a6:	46 36       	cpi	r20, 0x66	; 102
     2a8:	95 36       	cpi	r25, 0x65	; 101
     2aa:	54 36       	cpi	r21, 0x64	; 100
     2ac:	5a 36       	cpi	r21, 0x6A	; 106
     2ae:	60 36       	cpi	r22, 0x60	; 96
     2b0:	66 36       	cpi	r22, 0x66	; 102
     2b2:	6c 36       	cpi	r22, 0x6C	; 108
     2b4:	72 36       	cpi	r23, 0x62	; 98
     2b6:	78 36       	cpi	r23, 0x68	; 104
     2b8:	7e 36       	cpi	r23, 0x6E	; 110
     2ba:	95 36       	cpi	r25, 0x65	; 101
     2bc:	84 36       	cpi	r24, 0x64	; 100
     2be:	8a 36       	cpi	r24, 0x6A	; 106
     2c0:	90 36       	cpi	r25, 0x60	; 96

000002c2 <__trampolines_end>:
     2c2:	42 61       	ori	r20, 0x12	; 18
     2c4:	63 6b       	ori	r22, 0xB3	; 179
	...

000002c7 <_ZZ12MAIN_UI_initvE3__c>:
     2c7:	41 6c 61 72 6d 20 54 65 73 74 00                    Alarm Test.

000002d2 <_ZL21tone_pin_to_timer_PGM>:
     2d2:	02                                                  .

000002d3 <digital_pin_to_timer_PGM>:
     2d3:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
     2ff:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000319 <digital_pin_to_bit_mask_PGM>:
     319:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     329:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     339:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     349:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     359:	04 08 10 20 40 80                                   ... @.

0000035f <digital_pin_to_port_PGM>:
     35f:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     36f:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     37f:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     38f:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     39f:	0b 0b 0b 0b 0b 0b                                   ......

000003a5 <port_to_input_PGM>:
     3a5:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     3b5:	00 01 00 00 03 01 06 01 09 01                       ..........

000003bf <port_to_output_PGM>:
     3bf:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     3cf:	02 01 00 00 05 01 08 01 0b 01                       ..........

000003d9 <port_to_mode_PGM>:
     3d9:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     3e9:	01 01 00 00 04 01 07 01 0a 01 00                    ...........

000003f4 <__ctors_start>:
     3f4:	ed 02       	muls	r30, r29
     3f6:	51 08       	sbc	r5, r1
     3f8:	24 0e       	add	r2, r20
     3fa:	e9 10       	cpse	r14, r9
     3fc:	e2 11       	cpse	r30, r2
     3fe:	61 2b       	or	r22, r17
     400:	1c 2c       	mov	r1, r12
     402:	fa 2d       	mov	r31, r10
     404:	95 2e       	mov	r9, r21
     406:	30 2f       	mov	r19, r16
     408:	cb 2f       	mov	r28, r27
     40a:	38 30       	cpi	r19, 0x08	; 8

0000040c <__ctors_end>:
     40c:	00 0c       	add	r0, r0

0000040e <__dtors_end>:
     40e:	11 24       	eor	r1, r1
     410:	1f be       	out	0x3f, r1	; 63
     412:	cf ef       	ldi	r28, 0xFF	; 255
     414:	d1 e2       	ldi	r29, 0x21	; 33
     416:	de bf       	out	0x3e, r29	; 62
     418:	cd bf       	out	0x3d, r28	; 61
     41a:	00 e0       	ldi	r16, 0x00	; 0
     41c:	0c bf       	out	0x3c, r16	; 60

0000041e <__do_copy_data>:
     41e:	16 e0       	ldi	r17, 0x06	; 6
     420:	a0 e0       	ldi	r26, 0x00	; 0
     422:	b2 e0       	ldi	r27, 0x02	; 2
     424:	e8 e2       	ldi	r30, 0x28	; 40
     426:	fa e7       	ldi	r31, 0x7A	; 122
     428:	00 e0       	ldi	r16, 0x00	; 0
     42a:	0b bf       	out	0x3b, r16	; 59
     42c:	02 c0       	rjmp	.+4      	; 0x432 <__do_copy_data+0x14>
     42e:	07 90       	elpm	r0, Z+
     430:	0d 92       	st	X+, r0
     432:	ae 36       	cpi	r26, 0x6E	; 110
     434:	b1 07       	cpc	r27, r17
     436:	d9 f7       	brne	.-10     	; 0x42e <__do_copy_data+0x10>

00000438 <__do_clear_bss>:
     438:	2d e0       	ldi	r18, 0x0D	; 13
     43a:	ae e6       	ldi	r26, 0x6E	; 110
     43c:	b6 e0       	ldi	r27, 0x06	; 6
     43e:	01 c0       	rjmp	.+2      	; 0x442 <.do_clear_bss_start>

00000440 <.do_clear_bss_loop>:
     440:	1d 92       	st	X+, r1

00000442 <.do_clear_bss_start>:
     442:	a6 34       	cpi	r26, 0x46	; 70
     444:	b2 07       	cpc	r27, r18
     446:	e1 f7       	brne	.-8      	; 0x440 <.do_clear_bss_loop>

00000448 <__do_global_ctors>:
     448:	11 e0       	ldi	r17, 0x01	; 1
     44a:	c6 e0       	ldi	r28, 0x06	; 6
     44c:	d2 e0       	ldi	r29, 0x02	; 2
     44e:	00 e0       	ldi	r16, 0x00	; 0
     450:	06 c0       	rjmp	.+12     	; 0x45e <__do_global_ctors+0x16>
     452:	21 97       	sbiw	r28, 0x01	; 1
     454:	01 09       	sbc	r16, r1
     456:	80 2f       	mov	r24, r16
     458:	fe 01       	movw	r30, r28
     45a:	0e 94 b2 3a 	call	0x7564	; 0x7564 <__tablejump2__>
     45e:	ca 3f       	cpi	r28, 0xFA	; 250
     460:	d1 07       	cpc	r29, r17
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	08 07       	cpc	r16, r24
     466:	a9 f7       	brne	.-22     	; 0x452 <__do_global_ctors+0xa>
     468:	0e 94 44 30 	call	0x6088	; 0x6088 <main>
     46c:	0c 94 03 3d 	jmp	0x7a06	; 0x7a06 <__do_global_dtors>

00000470 <__bad_interrupt>:
     470:	c7 cd       	rjmp	.-1138   	; 0x0 <__vectors>

00000472 <_Z10BK_UI_initv>:

#include "BK_UI.h"

EZUI *BK_UI = new EZUI("BK");

void BK_UI_init(){
     472:	cf 92       	push	r12
     474:	df 92       	push	r13
     476:	ef 92       	push	r14
     478:	ff 92       	push	r15
     47a:	0f 93       	push	r16
     47c:	1f 93       	push	r17
     47e:	cf 93       	push	r28
     480:	df 93       	push	r29
     482:	cd b7       	in	r28, 0x3d	; 61
     484:	de b7       	in	r29, 0x3e	; 62
     486:	6e 97       	sbiw	r28, 0x1e	; 30
     488:	0f b6       	in	r0, 0x3f	; 63
     48a:	f8 94       	cli
     48c:	de bf       	out	0x3e, r29	; 62
     48e:	0f be       	out	0x3f, r0	; 63
     490:	cd bf       	out	0x3d, r28	; 61
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.print("Initializing UI - " + BK_UI->Name + "...");
     492:	00 91 6e 06 	lds	r16, 0x066E
     496:	10 91 6f 06 	lds	r17, 0x066F
     49a:	0c 5f       	subi	r16, 0xFC	; 252
     49c:	1f 4f       	sbci	r17, 0xFF	; 255

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
     49e:	69 e0       	ldi	r22, 0x09	; 9
     4a0:	72 e0       	ldi	r23, 0x02	; 2
     4a2:	ce 01       	movw	r24, r28
     4a4:	49 96       	adiw	r24, 0x19	; 25
     4a6:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
     4aa:	b8 01       	movw	r22, r16
     4ac:	ce 01       	movw	r24, r28
     4ae:	49 96       	adiw	r24, 0x19	; 25
     4b0:	0e 94 36 38 	call	0x706c	; 0x706c <_ZplRK15StringSumHelperRK6String>
     4b4:	61 e0       	ldi	r22, 0x01	; 1
     4b6:	75 e0       	ldi	r23, 0x05	; 5
     4b8:	0e 94 47 38 	call	0x708e	; 0x708e <_ZplRK15StringSumHelperPKc>
     4bc:	bc 01       	movw	r22, r24
     4be:	88 ea       	ldi	r24, 0xA8	; 168
     4c0:	9a e0       	ldi	r25, 0x0A	; 10
     4c2:	0e 94 81 30 	call	0x6102	; 0x6102 <_ZN5Print5printERK6String>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
     4c6:	ce 01       	movw	r24, r28
     4c8:	49 96       	adiw	r24, 0x19	; 25
     4ca:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
	#endif
	
	/***************************************
	  Setup + Initialization
	***************************************/
	BK_UI->attatchEncoder(BK_ENC);
     4ce:	60 91 70 06 	lds	r22, 0x0670
     4d2:	70 91 71 06 	lds	r23, 0x0671
     4d6:	80 91 6e 06 	lds	r24, 0x066E
     4da:	90 91 6f 06 	lds	r25, 0x066F
     4de:	0e 94 73 20 	call	0x40e6	; 0x40e6 <_ZN4EZUI14attatchEncoderEP22ClickEncoderWithEvents>
	BK_UI->attatchLCD(&BK_LCD);
     4e2:	62 e7       	ldi	r22, 0x72	; 114
     4e4:	76 e0       	ldi	r23, 0x06	; 6
     4e6:	80 91 6e 06 	lds	r24, 0x066E
     4ea:	90 91 6f 06 	lds	r25, 0x066F
     4ee:	0e 94 a9 20 	call	0x4152	; 0x4152 <_ZN4EZUI10attatchLCDEP17LiquidCrystal_I2C>
	
	EZUI_Menu * MainMenu = new EZUI_Menu("BK-Main-Menu");
     4f2:	6c e1       	ldi	r22, 0x1C	; 28
     4f4:	72 e0       	ldi	r23, 0x02	; 2
     4f6:	ce 01       	movw	r24, r28
     4f8:	43 96       	adiw	r24, 0x13	; 19
     4fa:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
     4fe:	8d e1       	ldi	r24, 0x1D	; 29
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
     506:	8c 01       	movw	r16, r24
     508:	be 01       	movw	r22, r28
     50a:	6d 5e       	subi	r22, 0xED	; 237
     50c:	7f 4f       	sbci	r23, 0xFF	; 255
     50e:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <_ZN9EZUI_MenuC1E6String>
     512:	ce 01       	movw	r24, r28
     514:	43 96       	adiw	r24, 0x13	; 19
     516:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
	
	EZUI_Page * TestPage = new EZUI_Page((String)("TestPage"));
     51a:	69 e2       	ldi	r22, 0x29	; 41
     51c:	72 e0       	ldi	r23, 0x02	; 2
     51e:	ce 01       	movw	r24, r28
     520:	0d 96       	adiw	r24, 0x0d	; 13
     522:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
     526:	8e e2       	ldi	r24, 0x2E	; 46
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
     52e:	6c 01       	movw	r12, r24
     530:	be 01       	movw	r22, r28
     532:	63 5f       	subi	r22, 0xF3	; 243
     534:	7f 4f       	sbci	r23, 0xFF	; 255
     536:	0e 94 4b 1a 	call	0x3496	; 0x3496 <_ZN9EZUI_PageC1E6String>
     53a:	ce 01       	movw	r24, r28
     53c:	0d 96       	adiw	r24, 0x0d	; 13
     53e:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
	//TestPage->addItem(new EZUI_PageItem(0,3,new EZUI_Control_Link("Back",MainMenu)));
	
	MainMenu->addItem(new EZUI_Control_Link("TestPage",TestPage));
     542:	69 e2       	ldi	r22, 0x29	; 41
     544:	72 e0       	ldi	r23, 0x02	; 2
     546:	ce 01       	movw	r24, r28
     548:	07 96       	adiw	r24, 0x07	; 7
     54a:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
     54e:	89 e0       	ldi	r24, 0x09	; 9
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
     556:	7c 01       	movw	r14, r24
     558:	a6 01       	movw	r20, r12
     55a:	be 01       	movw	r22, r28
     55c:	69 5f       	subi	r22, 0xF9	; 249
     55e:	7f 4f       	sbci	r23, 0xFF	; 255
     560:	59 d4       	rcall	.+2226   	; 0xe14 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Page>
     562:	b7 01       	movw	r22, r14
     564:	c8 01       	movw	r24, r16
     566:	0e 94 21 14 	call	0x2842	; 0x2842 <_ZN9EZUI_Menu7addItemEP17EZUI_Control_Link>
     56a:	ce 01       	movw	r24, r28
     56c:	07 96       	adiw	r24, 0x07	; 7
     56e:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
	MainMenu->addItem(new EZUI_Control_Link("Test2",MainMenu));
     572:	62 e3       	ldi	r22, 0x32	; 50
     574:	72 e0       	ldi	r23, 0x02	; 2
     576:	ce 01       	movw	r24, r28
     578:	01 96       	adiw	r24, 0x01	; 1
     57a:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
     57e:	89 e0       	ldi	r24, 0x09	; 9
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
     586:	7c 01       	movw	r14, r24
     588:	a8 01       	movw	r20, r16
     58a:	be 01       	movw	r22, r28
     58c:	6f 5f       	subi	r22, 0xFF	; 255
     58e:	7f 4f       	sbci	r23, 0xFF	; 255
     590:	23 d4       	rcall	.+2118   	; 0xdd8 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Menu>
     592:	b7 01       	movw	r22, r14
     594:	c8 01       	movw	r24, r16
     596:	0e 94 21 14 	call	0x2842	; 0x2842 <_ZN9EZUI_Menu7addItemEP17EZUI_Control_Link>
     59a:	ce 01       	movw	r24, r28
     59c:	01 96       	adiw	r24, 0x01	; 1
     59e:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
	***************************************/
	
	/***************************************
	  BK Menu
	***************************************/
	BK_UI->setDisplay(MainMenu);
     5a2:	b8 01       	movw	r22, r16
     5a4:	80 91 6e 06 	lds	r24, 0x066E
     5a8:	90 91 6f 06 	lds	r25, 0x066F
     5ac:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <_ZN4EZUI10setDisplayEP9EZUI_Menu>
	
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.println("Done.");
     5b0:	68 e3       	ldi	r22, 0x38	; 56
     5b2:	72 e0       	ldi	r23, 0x02	; 2
     5b4:	88 ea       	ldi	r24, 0xA8	; 168
     5b6:	9a e0       	ldi	r25, 0x0A	; 10
     5b8:	0e 94 ca 30 	call	0x6194	; 0x6194 <_ZN5Print7printlnEPKc>
	#endif
}
     5bc:	6e 96       	adiw	r28, 0x1e	; 30
     5be:	0f b6       	in	r0, 0x3f	; 63
     5c0:	f8 94       	cli
     5c2:	de bf       	out	0x3e, r29	; 62
     5c4:	0f be       	out	0x3f, r0	; 63
     5c6:	cd bf       	out	0x3d, r28	; 61
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
     5cc:	1f 91       	pop	r17
     5ce:	0f 91       	pop	r16
     5d0:	ff 90       	pop	r15
     5d2:	ef 90       	pop	r14
     5d4:	df 90       	pop	r13
     5d6:	cf 90       	pop	r12
     5d8:	08 95       	ret

000005da <_GLOBAL__sub_I_BK_UI>:
     5da:	0f 93       	push	r16
     5dc:	1f 93       	push	r17
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	00 d0       	rcall	.+0      	; 0x5e4 <_GLOBAL__sub_I_BK_UI+0xa>
     5e4:	00 d0       	rcall	.+0      	; 0x5e6 <_GLOBAL__sub_I_BK_UI+0xc>
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
 * ----------------------------------------------------------------
 */

#include "BK_UI.h"

EZUI *BK_UI = new EZUI("BK");
     5ea:	6e e3       	ldi	r22, 0x3E	; 62
     5ec:	72 e0       	ldi	r23, 0x02	; 2
     5ee:	ce 01       	movw	r24, r28
     5f0:	01 96       	adiw	r24, 0x01	; 1
     5f2:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
     5f6:	86 e1       	ldi	r24, 0x16	; 22
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
     5fe:	8c 01       	movw	r16, r24
     600:	be 01       	movw	r22, r28
     602:	6f 5f       	subi	r22, 0xFF	; 255
     604:	7f 4f       	sbci	r23, 0xFF	; 255
     606:	0e 94 50 20 	call	0x40a0	; 0x40a0 <_ZN4EZUIC1E6String>
     60a:	10 93 6f 06 	sts	0x066F, r17
     60e:	00 93 6e 06 	sts	0x066E, r16
     612:	ce 01       	movw	r24, r28
     614:	01 96       	adiw	r24, 0x01	; 1
     616:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
	BK_UI->setDisplay(MainMenu);
	
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.println("Done.");
	#endif
}
     61a:	26 96       	adiw	r28, 0x06	; 6
     61c:	0f b6       	in	r0, 0x3f	; 63
     61e:	f8 94       	cli
     620:	de bf       	out	0x3e, r29	; 62
     622:	0f be       	out	0x3f, r0	; 63
     624:	cd bf       	out	0x3d, r28	; 61
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	1f 91       	pop	r17
     62c:	0f 91       	pop	r16
     62e:	08 95       	ret

00000630 <_ZN10LinkedListIiE4sizeEv>:
}

template<typename T>
int LinkedList<T>::size(){
	return _size;
}
     630:	fc 01       	movw	r30, r24
     632:	82 81       	ldd	r24, Z+2	; 0x02
     634:	93 81       	ldd	r25, Z+3	; 0x03
     636:	08 95       	ret

00000638 <_ZN10LinkedListIiE5clearEv>:

	return (tmp ? tmp->data : T());
}

template<typename T>
void LinkedList<T>::clear(){
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
     63c:	ec 01       	movw	r28, r24
	while(size() > 0)
     63e:	07 c0       	rjmp	.+14     	; 0x64e <_ZN10LinkedListIiE5clearEv+0x16>
		shift();
     640:	e8 81       	ld	r30, Y
     642:	f9 81       	ldd	r31, Y+1	; 0x01
     644:	06 84       	ldd	r0, Z+14	; 0x0e
     646:	f7 85       	ldd	r31, Z+15	; 0x0f
     648:	e0 2d       	mov	r30, r0
     64a:	ce 01       	movw	r24, r28
     64c:	19 95       	eicall
	return (tmp ? tmp->data : T());
}

template<typename T>
void LinkedList<T>::clear(){
	while(size() > 0)
     64e:	e8 81       	ld	r30, Y
     650:	f9 81       	ldd	r31, Y+1	; 0x01
     652:	01 90       	ld	r0, Z+
     654:	f0 81       	ld	r31, Z
     656:	e0 2d       	mov	r30, r0
     658:	ce 01       	movw	r24, r28
     65a:	19 95       	eicall
     65c:	18 16       	cp	r1, r24
     65e:	19 06       	cpc	r1, r25
     660:	7c f3       	brlt	.-34     	; 0x640 <_ZN10LinkedListIiE5clearEv+0x8>
		shift();
}
     662:	df 91       	pop	r29
     664:	cf 91       	pop	r28
     666:	08 95       	ret

00000668 <_ZN10LinkedListIiE5shiftEv>:
		return ret;
	}
}

template<typename T>
T LinkedList<T>::shift(){
     668:	ef 92       	push	r14
     66a:	ff 92       	push	r15
     66c:	0f 93       	push	r16
     66e:	1f 93       	push	r17
     670:	cf 93       	push	r28
     672:	df 93       	push	r29
	if(_size <= 0)
     674:	fc 01       	movw	r30, r24
     676:	22 81       	ldd	r18, Z+2	; 0x02
     678:	33 81       	ldd	r19, Z+3	; 0x03
     67a:	12 16       	cp	r1, r18
     67c:	13 06       	cpc	r1, r19
     67e:	0c f5       	brge	.+66     	; 0x6c2 <_ZN10LinkedListIiE5shiftEv+0x5a>
     680:	ec 01       	movw	r28, r24
		return T();

	if(_size > 1){
     682:	22 30       	cpi	r18, 0x02	; 2
     684:	31 05       	cpc	r19, r1
     686:	ac f0       	brlt	.+42     	; 0x6b2 <_ZN10LinkedListIiE5shiftEv+0x4a>
		ListNode<T> *_next = root->next;
     688:	04 80       	ldd	r0, Z+4	; 0x04
     68a:	f5 81       	ldd	r31, Z+5	; 0x05
     68c:	e0 2d       	mov	r30, r0
     68e:	e2 80       	ldd	r14, Z+2	; 0x02
     690:	f3 80       	ldd	r15, Z+3	; 0x03
		T ret = root->data;
     692:	00 81       	ld	r16, Z
     694:	11 81       	ldd	r17, Z+1	; 0x01
		delete(root);
     696:	cf 01       	movw	r24, r30
     698:	0e 94 51 30 	call	0x60a2	; 0x60a2 <_ZdlPv>
		root = _next;
     69c:	fd 82       	std	Y+5, r15	; 0x05
     69e:	ec 82       	std	Y+4, r14	; 0x04
		_size --;
     6a0:	8a 81       	ldd	r24, Y+2	; 0x02
     6a2:	9b 81       	ldd	r25, Y+3	; 0x03
     6a4:	01 97       	sbiw	r24, 0x01	; 1
     6a6:	9b 83       	std	Y+3, r25	; 0x03
     6a8:	8a 83       	std	Y+2, r24	; 0x02
		isCached = false;
     6aa:	1c 86       	std	Y+12, r1	; 0x0c

		return ret;
     6ac:	80 2f       	mov	r24, r16
     6ae:	91 2f       	mov	r25, r17
     6b0:	0a c0       	rjmp	.+20     	; 0x6c6 <_ZN10LinkedListIiE5shiftEv+0x5e>
	}else{
		// Only one left, then pop()
		return pop();
     6b2:	01 90       	ld	r0, Z+
     6b4:	f0 81       	ld	r31, Z
     6b6:	e0 2d       	mov	r30, r0
     6b8:	04 84       	ldd	r0, Z+12	; 0x0c
     6ba:	f5 85       	ldd	r31, Z+13	; 0x0d
     6bc:	e0 2d       	mov	r30, r0
     6be:	19 95       	eicall
     6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <_ZN10LinkedListIiE5shiftEv+0x5e>
}

template<typename T>
T LinkedList<T>::shift(){
	if(_size <= 0)
		return T();
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	90 e0       	ldi	r25, 0x00	; 0
	}else{
		// Only one left, then pop()
		return pop();
	}

}
     6c6:	df 91       	pop	r29
     6c8:	cf 91       	pop	r28
     6ca:	1f 91       	pop	r17
     6cc:	0f 91       	pop	r16
     6ce:	ff 90       	pop	r15
     6d0:	ef 90       	pop	r14
     6d2:	08 95       	ret

000006d4 <_ZN10LinkedListIiE7unshiftEi>:

	return true;
}

template<typename T>
bool LinkedList<T>::unshift(T _t){
     6d4:	0f 93       	push	r16
     6d6:	1f 93       	push	r17
     6d8:	cf 93       	push	r28
     6da:	df 93       	push	r29
     6dc:	ec 01       	movw	r28, r24
     6de:	8b 01       	movw	r16, r22

	if(_size == 0)
     6e0:	8a 81       	ldd	r24, Y+2	; 0x02
     6e2:	9b 81       	ldd	r25, Y+3	; 0x03
     6e4:	89 2b       	or	r24, r25
     6e6:	41 f4       	brne	.+16     	; 0x6f8 <_ZN10LinkedListIiE7unshiftEi+0x24>
		return add(_t);
     6e8:	e8 81       	ld	r30, Y
     6ea:	f9 81       	ldd	r31, Y+1	; 0x01
     6ec:	04 80       	ldd	r0, Z+4	; 0x04
     6ee:	f5 81       	ldd	r31, Z+5	; 0x05
     6f0:	e0 2d       	mov	r30, r0
     6f2:	ce 01       	movw	r24, r28
     6f4:	19 95       	eicall
     6f6:	18 c0       	rjmp	.+48     	; 0x728 <_ZN10LinkedListIiE7unshiftEi+0x54>

	ListNode<T> *tmp = new ListNode<T>();
     6f8:	84 e0       	ldi	r24, 0x04	; 4
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
     700:	fc 01       	movw	r30, r24
     702:	11 82       	std	Z+1, r1	; 0x01
     704:	10 82       	st	Z, r1
     706:	13 82       	std	Z+3, r1	; 0x03
     708:	12 82       	std	Z+2, r1	; 0x02
	tmp->next = root;
     70a:	8c 81       	ldd	r24, Y+4	; 0x04
     70c:	9d 81       	ldd	r25, Y+5	; 0x05
     70e:	93 83       	std	Z+3, r25	; 0x03
     710:	82 83       	std	Z+2, r24	; 0x02
	tmp->data = _t;
     712:	11 83       	std	Z+1, r17	; 0x01
     714:	00 83       	st	Z, r16
	root = tmp;
     716:	fd 83       	std	Y+5, r31	; 0x05
     718:	ec 83       	std	Y+4, r30	; 0x04
	
	_size++;
     71a:	8a 81       	ldd	r24, Y+2	; 0x02
     71c:	9b 81       	ldd	r25, Y+3	; 0x03
     71e:	01 96       	adiw	r24, 0x01	; 1
     720:	9b 83       	std	Y+3, r25	; 0x03
     722:	8a 83       	std	Y+2, r24	; 0x02
	isCached = false;
     724:	1c 86       	std	Y+12, r1	; 0x0c
	
	return true;
     726:	81 e0       	ldi	r24, 0x01	; 1
}
     728:	df 91       	pop	r29
     72a:	cf 91       	pop	r28
     72c:	1f 91       	pop	r17
     72e:	0f 91       	pop	r16
     730:	08 95       	ret

00000732 <_ZN10LinkedListIiE3addEi>:

	return true;
}

template<typename T>
bool LinkedList<T>::add(T _t){
     732:	0f 93       	push	r16
     734:	1f 93       	push	r17
     736:	cf 93       	push	r28
     738:	df 93       	push	r29
     73a:	ec 01       	movw	r28, r24
     73c:	8b 01       	movw	r16, r22

	ListNode<T> *tmp = new ListNode<T>();
     73e:	84 e0       	ldi	r24, 0x04	; 4
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
     746:	fc 01       	movw	r30, r24
     748:	13 82       	std	Z+3, r1	; 0x03
     74a:	12 82       	std	Z+2, r1	; 0x02
	tmp->data = _t;
     74c:	11 83       	std	Z+1, r17	; 0x01
     74e:	00 83       	st	Z, r16
	tmp->next = false;
	
	if(root){
     750:	2c 81       	ldd	r18, Y+4	; 0x04
     752:	3d 81       	ldd	r19, Y+5	; 0x05
     754:	23 2b       	or	r18, r19
     756:	39 f0       	breq	.+14     	; 0x766 <_ZN10LinkedListIiE3addEi+0x34>
		// Already have elements inserted
		last->next = tmp;
     758:	ee 81       	ldd	r30, Y+6	; 0x06
     75a:	ff 81       	ldd	r31, Y+7	; 0x07
     75c:	93 83       	std	Z+3, r25	; 0x03
     75e:	82 83       	std	Z+2, r24	; 0x02
		last = tmp;
     760:	9f 83       	std	Y+7, r25	; 0x07
     762:	8e 83       	std	Y+6, r24	; 0x06
     764:	04 c0       	rjmp	.+8      	; 0x76e <_ZN10LinkedListIiE3addEi+0x3c>
	}else{
		// First element being inserted
		root = tmp;
     766:	9d 83       	std	Y+5, r25	; 0x05
     768:	8c 83       	std	Y+4, r24	; 0x04
		last = tmp;
     76a:	9f 83       	std	Y+7, r25	; 0x07
     76c:	8e 83       	std	Y+6, r24	; 0x06
	}

	_size++;
     76e:	8a 81       	ldd	r24, Y+2	; 0x02
     770:	9b 81       	ldd	r25, Y+3	; 0x03
     772:	01 96       	adiw	r24, 0x01	; 1
     774:	9b 83       	std	Y+3, r25	; 0x03
     776:	8a 83       	std	Y+2, r24	; 0x02
	isCached = false;
     778:	1c 86       	std	Y+12, r1	; 0x0c

	return true;
}
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	0f 91       	pop	r16
     784:	08 95       	ret

00000786 <_ZN8AnalogInC1EifmNS_10filterTypeE>:
 */

#include "AnalogIn.h"

// default constructor
AnalogIn::AnalogIn(int pin, float vref, unsigned long period, filterType filter )
     786:	cf 92       	push	r12
     788:	ef 92       	push	r14
     78a:	ff 92       	push	r15
     78c:	0f 93       	push	r16
     78e:	1f 93       	push	r17
     790:	fc 01       	movw	r30, r24
     792:	11 86       	std	Z+9, r1	; 0x09
     794:	12 86       	std	Z+10, r1	; 0x0a
     796:	13 86       	std	Z+11, r1	; 0x0b
     798:	14 86       	std	Z+12, r1	; 0x0c

};

// Initialize LinkedList with false values
template<typename T>
LinkedList<T>::LinkedList()
     79a:	85 e4       	ldi	r24, 0x45	; 69
     79c:	92 e0       	ldi	r25, 0x02	; 2
     79e:	94 8b       	std	Z+20, r25	; 0x14
     7a0:	83 8b       	std	Z+19, r24	; 0x13
{
	root=false;
     7a2:	10 8e       	std	Z+24, r1	; 0x18
     7a4:	17 8a       	std	Z+23, r1	; 0x17
	last=false;
     7a6:	12 8e       	std	Z+26, r1	; 0x1a
     7a8:	11 8e       	std	Z+25, r1	; 0x19
	_size=0;
     7aa:	16 8a       	std	Z+22, r1	; 0x16
     7ac:	15 8a       	std	Z+21, r1	; 0x15

	lastNodeGot = root;
     7ae:	14 8e       	std	Z+28, r1	; 0x1c
     7b0:	13 8e       	std	Z+27, r1	; 0x1b
	lastIndexGot = 0;
     7b2:	16 8e       	std	Z+30, r1	; 0x1e
     7b4:	15 8e       	std	Z+29, r1	; 0x1d
	isCached = false;
     7b6:	17 8e       	std	Z+31, r1	; 0x1f
{
	this->pin = pin;
     7b8:	76 87       	std	Z+14, r23	; 0x0e
     7ba:	65 87       	std	Z+13, r22	; 0x0d
	this->vref = vref;
     7bc:	27 87       	std	Z+15, r18	; 0x0f
     7be:	30 8b       	std	Z+16, r19	; 0x10
     7c0:	41 8b       	std	Z+17, r20	; 0x11
     7c2:	52 8b       	std	Z+18, r21	; 0x12
	this->period = period;
     7c4:	e0 82       	st	Z, r14
     7c6:	f1 82       	std	Z+1, r15	; 0x01
     7c8:	02 83       	std	Z+2, r16	; 0x02
     7ca:	13 83       	std	Z+3, r17	; 0x03
	this->filter = filter;
     7cc:	c4 82       	std	Z+4, r12	; 0x04
} //AnalogIn
     7ce:	1f 91       	pop	r17
     7d0:	0f 91       	pop	r16
     7d2:	ff 90       	pop	r15
     7d4:	ef 90       	pop	r14
     7d6:	cf 90       	pop	r12
     7d8:	08 95       	ret

000007da <_ZN8AnalogInD1Ev>:
		}
	}
}

// default destructor
AnalogIn::~AnalogIn()
     7da:	cf 93       	push	r28
     7dc:	df 93       	push	r29
     7de:	ec 01       	movw	r28, r24
		delete tmp;
	}
	last = false;
	_size=0;
	isCached = false;
}
     7e0:	85 e4       	ldi	r24, 0x45	; 69
     7e2:	92 e0       	ldi	r25, 0x02	; 2
     7e4:	9c 8b       	std	Y+20, r25	; 0x14
     7e6:	8b 8b       	std	Y+19, r24	; 0x13
// Clear Nodes and free Memory
template<typename T>
LinkedList<T>::~LinkedList()
{
	ListNode<T>* tmp;
	while(root!=false)
     7e8:	8f 89       	ldd	r24, Y+23	; 0x17
     7ea:	98 8d       	ldd	r25, Y+24	; 0x18
     7ec:	00 97       	sbiw	r24, 0x00	; 0
     7ee:	59 f0       	breq	.+22     	; 0x806 <_ZN8AnalogInD1Ev+0x2c>
	{
		tmp=root;
		root=root->next;
     7f0:	fc 01       	movw	r30, r24
     7f2:	22 81       	ldd	r18, Z+2	; 0x02
     7f4:	33 81       	ldd	r19, Z+3	; 0x03
     7f6:	38 8f       	std	Y+24, r19	; 0x18
     7f8:	2f 8b       	std	Y+23, r18	; 0x17
		delete tmp;
     7fa:	0e 94 51 30 	call	0x60a2	; 0x60a2 <_ZdlPv>
// Clear Nodes and free Memory
template<typename T>
LinkedList<T>::~LinkedList()
{
	ListNode<T>* tmp;
	while(root!=false)
     7fe:	8f 89       	ldd	r24, Y+23	; 0x17
     800:	98 8d       	ldd	r25, Y+24	; 0x18
     802:	00 97       	sbiw	r24, 0x00	; 0
     804:	a9 f7       	brne	.-22     	; 0x7f0 <_ZN8AnalogInD1Ev+0x16>
{
} //~AnalogIn
     806:	df 91       	pop	r29
     808:	cf 91       	pop	r28
     80a:	08 95       	ret

0000080c <_ZN10LinkedListIiE7getNodeEi>:
/*
	Actualy "logic" coding
*/

template<typename T>
ListNode<T>* LinkedList<T>::getNode(int index){
     80c:	dc 01       	movw	r26, r24

	int _pos = 0;
	ListNode<T>* current = root;
     80e:	14 96       	adiw	r26, 0x04	; 4
     810:	ed 91       	ld	r30, X+
     812:	fc 91       	ld	r31, X
     814:	15 97       	sbiw	r26, 0x05	; 5

	// Check if the node trying to get is
	// immediatly AFTER the previous got one
	if(isCached && lastIndexGot <= index){
     816:	1c 96       	adiw	r26, 0x0c	; 12
     818:	8c 91       	ld	r24, X
     81a:	1c 97       	sbiw	r26, 0x0c	; 12
     81c:	88 23       	and	r24, r24
     81e:	61 f0       	breq	.+24     	; 0x838 <_ZN10LinkedListIiE7getNodeEi+0x2c>
     820:	1a 96       	adiw	r26, 0x0a	; 10
     822:	2d 91       	ld	r18, X+
     824:	3c 91       	ld	r19, X
     826:	1b 97       	sbiw	r26, 0x0b	; 11
     828:	62 17       	cp	r22, r18
     82a:	73 07       	cpc	r23, r19
     82c:	44 f0       	brlt	.+16     	; 0x83e <_ZN10LinkedListIiE7getNodeEi+0x32>
		_pos = lastIndexGot;
		current = lastNodeGot;
     82e:	18 96       	adiw	r26, 0x08	; 8
     830:	ed 91       	ld	r30, X+
     832:	fc 91       	ld	r31, X
     834:	19 97       	sbiw	r26, 0x09	; 9
     836:	05 c0       	rjmp	.+10     	; 0x842 <_ZN10LinkedListIiE7getNodeEi+0x36>
*/

template<typename T>
ListNode<T>* LinkedList<T>::getNode(int index){

	int _pos = 0;
     838:	20 e0       	ldi	r18, 0x00	; 0
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	02 c0       	rjmp	.+4      	; 0x842 <_ZN10LinkedListIiE7getNodeEi+0x36>
     83e:	20 e0       	ldi	r18, 0x00	; 0
     840:	30 e0       	ldi	r19, 0x00	; 0
	if(isCached && lastIndexGot <= index){
		_pos = lastIndexGot;
		current = lastNodeGot;
	}

	while(_pos < index && current){
     842:	26 17       	cp	r18, r22
     844:	37 07       	cpc	r19, r23
     846:	64 f4       	brge	.+24     	; 0x860 <_ZN10LinkedListIiE7getNodeEi+0x54>
     848:	30 97       	sbiw	r30, 0x00	; 0
     84a:	51 f0       	breq	.+20     	; 0x860 <_ZN10LinkedListIiE7getNodeEi+0x54>
		current = current->next;
     84c:	02 80       	ldd	r0, Z+2	; 0x02
     84e:	f3 81       	ldd	r31, Z+3	; 0x03
     850:	e0 2d       	mov	r30, r0

		_pos++;
     852:	2f 5f       	subi	r18, 0xFF	; 255
     854:	3f 4f       	sbci	r19, 0xFF	; 255
	if(isCached && lastIndexGot <= index){
		_pos = lastIndexGot;
		current = lastNodeGot;
	}

	while(_pos < index && current){
     856:	26 17       	cp	r18, r22
     858:	37 07       	cpc	r19, r23
     85a:	14 f4       	brge	.+4      	; 0x860 <_ZN10LinkedListIiE7getNodeEi+0x54>
     85c:	30 97       	sbiw	r30, 0x00	; 0
     85e:	b1 f7       	brne	.-20     	; 0x84c <_ZN10LinkedListIiE7getNodeEi+0x40>

		_pos++;
	}

	// Check if the object index got is the same as the required
	if(_pos == index){
     860:	26 17       	cp	r18, r22
     862:	37 07       	cpc	r19, r23
     864:	79 f4       	brne	.+30     	; 0x884 <_ZN10LinkedListIiE7getNodeEi+0x78>
		isCached = true;
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	1c 96       	adiw	r26, 0x0c	; 12
     86a:	8c 93       	st	X, r24
     86c:	1c 97       	sbiw	r26, 0x0c	; 12
		lastIndexGot = index;
     86e:	1b 96       	adiw	r26, 0x0b	; 11
     870:	3c 93       	st	X, r19
     872:	2e 93       	st	-X, r18
     874:	1a 97       	sbiw	r26, 0x0a	; 10
		lastNodeGot = current;
     876:	19 96       	adiw	r26, 0x09	; 9
     878:	fc 93       	st	X, r31
     87a:	ee 93       	st	-X, r30
     87c:	18 97       	sbiw	r26, 0x08	; 8

		return current;
     87e:	8e 2f       	mov	r24, r30
     880:	9f 2f       	mov	r25, r31
     882:	08 95       	ret
	}

	return false;
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	90 e0       	ldi	r25, 0x00	; 0
}
     888:	08 95       	ret

0000088a <_ZN10LinkedListIiE3getEi>:
}


template<typename T>
T LinkedList<T>::get(int index){
	ListNode<T> *tmp = getNode(index);
     88a:	c0 df       	rcall	.-128    	; 0x80c <_ZN10LinkedListIiE7getNodeEi>

	return (tmp ? tmp->data : T());
     88c:	00 97       	sbiw	r24, 0x00	; 0
     88e:	21 f0       	breq	.+8      	; 0x898 <_ZN10LinkedListIiE3getEi+0xe>
     890:	fc 01       	movw	r30, r24
     892:	80 81       	ld	r24, Z
     894:	91 81       	ldd	r25, Z+1	; 0x01
     896:	08 95       	ret
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	90 e0       	ldi	r25, 0x00	; 0
}
     89c:	08 95       	ret

0000089e <_ZN8AnalogIn6updateEv>:
	this->period = period;
	this->filter = filter;
} //AnalogIn


void AnalogIn::update(){
     89e:	4f 92       	push	r4
     8a0:	5f 92       	push	r5
     8a2:	6f 92       	push	r6
     8a4:	7f 92       	push	r7
     8a6:	8f 92       	push	r8
     8a8:	9f 92       	push	r9
     8aa:	af 92       	push	r10
     8ac:	bf 92       	push	r11
     8ae:	ef 92       	push	r14
     8b0:	ff 92       	push	r15
     8b2:	0f 93       	push	r16
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	ec 01       	movw	r28, r24
	if(this->filter == None){
     8bc:	8c 81       	ldd	r24, Y+4	; 0x04
     8be:	81 11       	cpse	r24, r1
     8c0:	20 c0       	rjmp	.+64     	; 0x902 <_ZN8AnalogIn6updateEv+0x64>
		value = analogRead(pin)*(vref/1023.0);
     8c2:	8d 85       	ldd	r24, Y+13	; 0x0d
     8c4:	0e 94 0a 36 	call	0x6c14	; 0x6c14 <analogRead>
     8c8:	bc 01       	movw	r22, r24
     8ca:	99 0f       	add	r25, r25
     8cc:	88 0b       	sbc	r24, r24
     8ce:	99 0b       	sbc	r25, r25
     8d0:	0e 94 62 39 	call	0x72c4	; 0x72c4 <__floatsisf>
     8d4:	4b 01       	movw	r8, r22
     8d6:	5c 01       	movw	r10, r24
     8d8:	20 e0       	ldi	r18, 0x00	; 0
     8da:	30 ec       	ldi	r19, 0xC0	; 192
     8dc:	4f e7       	ldi	r20, 0x7F	; 127
     8de:	54 e4       	ldi	r21, 0x44	; 68
     8e0:	6f 85       	ldd	r22, Y+15	; 0x0f
     8e2:	78 89       	ldd	r23, Y+16	; 0x10
     8e4:	89 89       	ldd	r24, Y+17	; 0x11
     8e6:	9a 89       	ldd	r25, Y+18	; 0x12
     8e8:	0e 94 c7 38 	call	0x718e	; 0x718e <__divsf3>
     8ec:	9b 01       	movw	r18, r22
     8ee:	ac 01       	movw	r20, r24
     8f0:	c5 01       	movw	r24, r10
     8f2:	b4 01       	movw	r22, r8
     8f4:	0e 94 16 3a 	call	0x742c	; 0x742c <__mulsf3>
     8f8:	6d 83       	std	Y+5, r22	; 0x05
     8fa:	7e 83       	std	Y+6, r23	; 0x06
     8fc:	8f 83       	std	Y+7, r24	; 0x07
     8fe:	98 87       	std	Y+8, r25	; 0x08
     900:	a3 c0       	rjmp	.+326    	; 0xa48 <_ZN8AnalogIn6updateEv+0x1aa>
	}else{
		samples.add(analogRead(pin));
     902:	8d 85       	ldd	r24, Y+13	; 0x0d
     904:	0e 94 0a 36 	call	0x6c14	; 0x6c14 <analogRead>
     908:	7e 01       	movw	r14, r28
     90a:	23 e1       	ldi	r18, 0x13	; 19
     90c:	e2 0e       	add	r14, r18
     90e:	f1 1c       	adc	r15, r1
     910:	bc 01       	movw	r22, r24
     912:	c7 01       	movw	r24, r14
     914:	0e df       	rcall	.-484    	; 0x732 <_ZN10LinkedListIiE3addEi>
		
		//If Filtering, see if filter period passed and then calculate filtered value;
		if((millis() - lastUpdate) > period){
     916:	0e 94 42 35 	call	0x6a84	; 0x6a84 <millis>
     91a:	09 85       	ldd	r16, Y+9	; 0x09
     91c:	1a 85       	ldd	r17, Y+10	; 0x0a
     91e:	2b 85       	ldd	r18, Y+11	; 0x0b
     920:	3c 85       	ldd	r19, Y+12	; 0x0c
     922:	dc 01       	movw	r26, r24
     924:	cb 01       	movw	r24, r22
     926:	80 1b       	sub	r24, r16
     928:	91 0b       	sbc	r25, r17
     92a:	a2 0b       	sbc	r26, r18
     92c:	b3 0b       	sbc	r27, r19
     92e:	08 81       	ld	r16, Y
     930:	19 81       	ldd	r17, Y+1	; 0x01
     932:	2a 81       	ldd	r18, Y+2	; 0x02
     934:	3b 81       	ldd	r19, Y+3	; 0x03
     936:	08 17       	cp	r16, r24
     938:	19 07       	cpc	r17, r25
     93a:	2a 07       	cpc	r18, r26
     93c:	3b 07       	cpc	r19, r27
     93e:	08 f0       	brcs	.+2      	; 0x942 <_ZN8AnalogIn6updateEv+0xa4>
     940:	83 c0       	rjmp	.+262    	; 0xa48 <_ZN8AnalogIn6updateEv+0x1aa>
			if( this->filter == TimeAverage){
     942:	8c 81       	ldd	r24, Y+4	; 0x04
     944:	81 30       	cpi	r24, 0x01	; 1
     946:	09 f0       	breq	.+2      	; 0x94a <_ZN8AnalogIn6updateEv+0xac>
     948:	55 c0       	rjmp	.+170    	; 0x9f4 <_ZN8AnalogIn6updateEv+0x156>
				float temp_val = 0;
				for( int i=0; i<samples.size(); i++){
     94a:	8d 89       	ldd	r24, Y+21	; 0x15
     94c:	9e 89       	ldd	r25, Y+22	; 0x16
     94e:	18 16       	cp	r1, r24
     950:	19 06       	cpc	r1, r25
     952:	0c f0       	brlt	.+2      	; 0x956 <_ZN8AnalogIn6updateEv+0xb8>
     954:	47 c0       	rjmp	.+142    	; 0x9e4 <_ZN8AnalogIn6updateEv+0x146>
     956:	00 e0       	ldi	r16, 0x00	; 0
     958:	10 e0       	ldi	r17, 0x00	; 0
     95a:	81 2c       	mov	r8, r1
     95c:	91 2c       	mov	r9, r1
     95e:	54 01       	movw	r10, r8
					temp_val += samples.get(i)*(vref/1023.0)*(1/period);
     960:	b8 01       	movw	r22, r16
     962:	c7 01       	movw	r24, r14
     964:	92 df       	rcall	.-220    	; 0x88a <_ZN10LinkedListIiE3getEi>
     966:	bc 01       	movw	r22, r24
     968:	99 0f       	add	r25, r25
     96a:	88 0b       	sbc	r24, r24
     96c:	99 0b       	sbc	r25, r25
     96e:	0e 94 62 39 	call	0x72c4	; 0x72c4 <__floatsisf>
     972:	2b 01       	movw	r4, r22
     974:	3c 01       	movw	r6, r24
     976:	20 e0       	ldi	r18, 0x00	; 0
     978:	30 ec       	ldi	r19, 0xC0	; 192
     97a:	4f e7       	ldi	r20, 0x7F	; 127
     97c:	54 e4       	ldi	r21, 0x44	; 68
     97e:	6f 85       	ldd	r22, Y+15	; 0x0f
     980:	78 89       	ldd	r23, Y+16	; 0x10
     982:	89 89       	ldd	r24, Y+17	; 0x11
     984:	9a 89       	ldd	r25, Y+18	; 0x12
     986:	0e 94 c7 38 	call	0x718e	; 0x718e <__divsf3>
     98a:	9b 01       	movw	r18, r22
     98c:	ac 01       	movw	r20, r24
     98e:	c3 01       	movw	r24, r6
     990:	b2 01       	movw	r22, r4
     992:	0e 94 16 3a 	call	0x742c	; 0x742c <__mulsf3>
     996:	2b 01       	movw	r4, r22
     998:	3c 01       	movw	r6, r24
     99a:	28 81       	ld	r18, Y
     99c:	39 81       	ldd	r19, Y+1	; 0x01
     99e:	4a 81       	ldd	r20, Y+2	; 0x02
     9a0:	5b 81       	ldd	r21, Y+3	; 0x03
     9a2:	61 e0       	ldi	r22, 0x01	; 1
     9a4:	70 e0       	ldi	r23, 0x00	; 0
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	0e 94 90 3a 	call	0x7520	; 0x7520 <__udivmodsi4>
     9ae:	ca 01       	movw	r24, r20
     9b0:	b9 01       	movw	r22, r18
     9b2:	0e 94 60 39 	call	0x72c0	; 0x72c0 <__floatunsisf>
     9b6:	9b 01       	movw	r18, r22
     9b8:	ac 01       	movw	r20, r24
     9ba:	c3 01       	movw	r24, r6
     9bc:	b2 01       	movw	r22, r4
     9be:	0e 94 16 3a 	call	0x742c	; 0x742c <__mulsf3>
     9c2:	9b 01       	movw	r18, r22
     9c4:	ac 01       	movw	r20, r24
     9c6:	c5 01       	movw	r24, r10
     9c8:	b4 01       	movw	r22, r8
     9ca:	0e 94 5f 38 	call	0x70be	; 0x70be <__addsf3>
     9ce:	4b 01       	movw	r8, r22
     9d0:	5c 01       	movw	r10, r24
		
		//If Filtering, see if filter period passed and then calculate filtered value;
		if((millis() - lastUpdate) > period){
			if( this->filter == TimeAverage){
				float temp_val = 0;
				for( int i=0; i<samples.size(); i++){
     9d2:	0f 5f       	subi	r16, 0xFF	; 255
     9d4:	1f 4f       	sbci	r17, 0xFF	; 255
     9d6:	8d 89       	ldd	r24, Y+21	; 0x15
     9d8:	9e 89       	ldd	r25, Y+22	; 0x16
     9da:	08 17       	cp	r16, r24
     9dc:	19 07       	cpc	r17, r25
     9de:	0c f4       	brge	.+2      	; 0x9e2 <_ZN8AnalogIn6updateEv+0x144>
     9e0:	bf cf       	rjmp	.-130    	; 0x960 <_ZN8AnalogIn6updateEv+0xc2>
     9e2:	03 c0       	rjmp	.+6      	; 0x9ea <_ZN8AnalogIn6updateEv+0x14c>
     9e4:	81 2c       	mov	r8, r1
     9e6:	91 2c       	mov	r9, r1
     9e8:	54 01       	movw	r10, r8
					temp_val += samples.get(i)*(vref/1023.0)*(1/period);
				}
				value=temp_val;
     9ea:	8d 82       	std	Y+5, r8	; 0x05
     9ec:	9e 82       	std	Y+6, r9	; 0x06
     9ee:	af 82       	std	Y+7, r10	; 0x07
     9f0:	b8 86       	std	Y+8, r11	; 0x08
     9f2:	28 c0       	rjmp	.+80     	; 0xa44 <_ZN8AnalogIn6updateEv+0x1a6>
			}else if( this->filter == TimeMedian ){
     9f4:	82 30       	cpi	r24, 0x02	; 2
     9f6:	31 f5       	brne	.+76     	; 0xa44 <_ZN8AnalogIn6updateEv+0x1a6>
				value = samples.get((int)(samples.size()/2))*(vref/1023.0);
     9f8:	6d 89       	ldd	r22, Y+21	; 0x15
     9fa:	7e 89       	ldd	r23, Y+22	; 0x16
     9fc:	77 23       	and	r23, r23
     9fe:	14 f4       	brge	.+4      	; 0xa04 <_ZN8AnalogIn6updateEv+0x166>
     a00:	6f 5f       	subi	r22, 0xFF	; 255
     a02:	7f 4f       	sbci	r23, 0xFF	; 255
     a04:	75 95       	asr	r23
     a06:	67 95       	ror	r22
     a08:	c7 01       	movw	r24, r14
     a0a:	3f df       	rcall	.-386    	; 0x88a <_ZN10LinkedListIiE3getEi>
     a0c:	bc 01       	movw	r22, r24
     a0e:	99 0f       	add	r25, r25
     a10:	88 0b       	sbc	r24, r24
     a12:	99 0b       	sbc	r25, r25
     a14:	0e 94 62 39 	call	0x72c4	; 0x72c4 <__floatsisf>
     a18:	4b 01       	movw	r8, r22
     a1a:	5c 01       	movw	r10, r24
     a1c:	20 e0       	ldi	r18, 0x00	; 0
     a1e:	30 ec       	ldi	r19, 0xC0	; 192
     a20:	4f e7       	ldi	r20, 0x7F	; 127
     a22:	54 e4       	ldi	r21, 0x44	; 68
     a24:	6f 85       	ldd	r22, Y+15	; 0x0f
     a26:	78 89       	ldd	r23, Y+16	; 0x10
     a28:	89 89       	ldd	r24, Y+17	; 0x11
     a2a:	9a 89       	ldd	r25, Y+18	; 0x12
     a2c:	0e 94 c7 38 	call	0x718e	; 0x718e <__divsf3>
     a30:	9b 01       	movw	r18, r22
     a32:	ac 01       	movw	r20, r24
     a34:	c5 01       	movw	r24, r10
     a36:	b4 01       	movw	r22, r8
     a38:	0e 94 16 3a 	call	0x742c	; 0x742c <__mulsf3>
     a3c:	6d 83       	std	Y+5, r22	; 0x05
     a3e:	7e 83       	std	Y+6, r23	; 0x06
     a40:	8f 83       	std	Y+7, r24	; 0x07
     a42:	98 87       	std	Y+8, r25	; 0x08
			}
			
			samples.clear();
     a44:	c7 01       	movw	r24, r14
     a46:	f8 dd       	rcall	.-1040   	; 0x638 <_ZN10LinkedListIiE5clearEv>
		}
	}
}
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	1f 91       	pop	r17
     a4e:	0f 91       	pop	r16
     a50:	ff 90       	pop	r15
     a52:	ef 90       	pop	r14
     a54:	bf 90       	pop	r11
     a56:	af 90       	pop	r10
     a58:	9f 90       	pop	r9
     a5a:	8f 90       	pop	r8
     a5c:	7f 90       	pop	r7
     a5e:	6f 90       	pop	r6
     a60:	5f 90       	pop	r5
     a62:	4f 90       	pop	r4
     a64:	08 95       	ret

00000a66 <_ZN10LinkedListIiE3popEv>:
	getNode(index)->data = _t;
	return true;
}

template<typename T>
T LinkedList<T>::pop(){
     a66:	ef 92       	push	r14
     a68:	ff 92       	push	r15
     a6a:	0f 93       	push	r16
     a6c:	1f 93       	push	r17
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
	if(_size <= 0)
     a72:	fc 01       	movw	r30, r24
     a74:	62 81       	ldd	r22, Z+2	; 0x02
     a76:	73 81       	ldd	r23, Z+3	; 0x03
     a78:	16 16       	cp	r1, r22
     a7a:	17 06       	cpc	r1, r23
     a7c:	74 f5       	brge	.+92     	; 0xada <_ZN10LinkedListIiE3popEv+0x74>
     a7e:	ec 01       	movw	r28, r24
		return T();
	
	isCached = false;
     a80:	14 86       	std	Z+12, r1	; 0x0c

	if(_size >= 2){
     a82:	62 30       	cpi	r22, 0x02	; 2
     a84:	71 05       	cpc	r23, r1
     a86:	cc f0       	brlt	.+50     	; 0xaba <_ZN10LinkedListIiE3popEv+0x54>
		ListNode<T> *tmp = getNode(_size - 2);
     a88:	62 50       	subi	r22, 0x02	; 2
     a8a:	71 09       	sbc	r23, r1
     a8c:	bf de       	rcall	.-642    	; 0x80c <_ZN10LinkedListIiE7getNodeEi>
     a8e:	7c 01       	movw	r14, r24
		T ret = tmp->next->data;
     a90:	fc 01       	movw	r30, r24
     a92:	82 81       	ldd	r24, Z+2	; 0x02
     a94:	93 81       	ldd	r25, Z+3	; 0x03
     a96:	fc 01       	movw	r30, r24
     a98:	00 81       	ld	r16, Z
     a9a:	11 81       	ldd	r17, Z+1	; 0x01
		delete(tmp->next);
     a9c:	0e 94 51 30 	call	0x60a2	; 0x60a2 <_ZdlPv>
		tmp->next = false;
     aa0:	f7 01       	movw	r30, r14
     aa2:	13 82       	std	Z+3, r1	; 0x03
     aa4:	12 82       	std	Z+2, r1	; 0x02
		last = tmp;
     aa6:	ff 82       	std	Y+7, r15	; 0x07
     aa8:	ee 82       	std	Y+6, r14	; 0x06
		_size--;
     aaa:	8a 81       	ldd	r24, Y+2	; 0x02
     aac:	9b 81       	ldd	r25, Y+3	; 0x03
     aae:	01 97       	sbiw	r24, 0x01	; 1
     ab0:	9b 83       	std	Y+3, r25	; 0x03
     ab2:	8a 83       	std	Y+2, r24	; 0x02
		return ret;
     ab4:	80 2f       	mov	r24, r16
     ab6:	91 2f       	mov	r25, r17
     ab8:	12 c0       	rjmp	.+36     	; 0xade <_ZN10LinkedListIiE3popEv+0x78>
	}else{
		// Only one element left on the list
		T ret = root->data;
     aba:	84 81       	ldd	r24, Z+4	; 0x04
     abc:	95 81       	ldd	r25, Z+5	; 0x05
     abe:	fc 01       	movw	r30, r24
     ac0:	00 81       	ld	r16, Z
     ac2:	11 81       	ldd	r17, Z+1	; 0x01
		delete(root);
     ac4:	0e 94 51 30 	call	0x60a2	; 0x60a2 <_ZdlPv>
		root = false;
     ac8:	1d 82       	std	Y+5, r1	; 0x05
     aca:	1c 82       	std	Y+4, r1	; 0x04
		last = false;
     acc:	1f 82       	std	Y+7, r1	; 0x07
     ace:	1e 82       	std	Y+6, r1	; 0x06
		_size = 0;
     ad0:	1b 82       	std	Y+3, r1	; 0x03
     ad2:	1a 82       	std	Y+2, r1	; 0x02
		return ret;
     ad4:	80 2f       	mov	r24, r16
     ad6:	91 2f       	mov	r25, r17
     ad8:	02 c0       	rjmp	.+4      	; 0xade <_ZN10LinkedListIiE3popEv+0x78>
}

template<typename T>
T LinkedList<T>::pop(){
	if(_size <= 0)
		return T();
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
		root = false;
		last = false;
		_size = 0;
		return ret;
	}
}
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	ff 90       	pop	r15
     ae8:	ef 90       	pop	r14
     aea:	08 95       	ret

00000aec <_ZN10LinkedListIiE6removeEi>:
	}

}

template<typename T>
T LinkedList<T>::remove(int index){
     aec:	0f 93       	push	r16
     aee:	1f 93       	push	r17
     af0:	cf 93       	push	r28
     af2:	df 93       	push	r29
	if (index < 0 || index >= _size)
     af4:	77 23       	and	r23, r23
     af6:	dc f1       	brlt	.+118    	; 0xb6e <_ZN10LinkedListIiE6removeEi+0x82>
     af8:	dc 01       	movw	r26, r24
     afa:	12 96       	adiw	r26, 0x02	; 2
     afc:	2d 91       	ld	r18, X+
     afe:	3c 91       	ld	r19, X
     b00:	13 97       	sbiw	r26, 0x03	; 3
     b02:	62 17       	cp	r22, r18
     b04:	73 07       	cpc	r23, r19
     b06:	b4 f5       	brge	.+108    	; 0xb74 <_ZN10LinkedListIiE6removeEi+0x88>
     b08:	ec 01       	movw	r28, r24
	{
		return T();
	}

	if(index == 0)
     b0a:	61 15       	cp	r22, r1
     b0c:	71 05       	cpc	r23, r1
     b0e:	39 f4       	brne	.+14     	; 0xb1e <_ZN10LinkedListIiE6removeEi+0x32>
		return shift();
     b10:	e8 81       	ld	r30, Y
     b12:	f9 81       	ldd	r31, Y+1	; 0x01
     b14:	06 84       	ldd	r0, Z+14	; 0x0e
     b16:	f7 85       	ldd	r31, Z+15	; 0x0f
     b18:	e0 2d       	mov	r30, r0
     b1a:	19 95       	eicall
     b1c:	2d c0       	rjmp	.+90     	; 0xb78 <_ZN10LinkedListIiE6removeEi+0x8c>
	
	if (index == _size-1)
     b1e:	21 50       	subi	r18, 0x01	; 1
     b20:	31 09       	sbc	r19, r1
     b22:	26 17       	cp	r18, r22
     b24:	37 07       	cpc	r19, r23
     b26:	39 f4       	brne	.+14     	; 0xb36 <_ZN10LinkedListIiE6removeEi+0x4a>
	{
		return pop();
     b28:	e8 81       	ld	r30, Y
     b2a:	f9 81       	ldd	r31, Y+1	; 0x01
     b2c:	04 84       	ldd	r0, Z+12	; 0x0c
     b2e:	f5 85       	ldd	r31, Z+13	; 0x0d
     b30:	e0 2d       	mov	r30, r0
     b32:	19 95       	eicall
     b34:	21 c0       	rjmp	.+66     	; 0xb78 <_ZN10LinkedListIiE6removeEi+0x8c>
	}

	ListNode<T> *tmp = getNode(index - 1);
     b36:	61 50       	subi	r22, 0x01	; 1
     b38:	71 09       	sbc	r23, r1
     b3a:	68 de       	rcall	.-816    	; 0x80c <_ZN10LinkedListIiE7getNodeEi>
	ListNode<T> *toDelete = tmp->next;
     b3c:	dc 01       	movw	r26, r24
     b3e:	12 96       	adiw	r26, 0x02	; 2
     b40:	ed 91       	ld	r30, X+
     b42:	fc 91       	ld	r31, X
     b44:	13 97       	sbiw	r26, 0x03	; 3
	T ret = toDelete->data;
     b46:	00 81       	ld	r16, Z
     b48:	11 81       	ldd	r17, Z+1	; 0x01
	tmp->next = tmp->next->next;
     b4a:	22 81       	ldd	r18, Z+2	; 0x02
     b4c:	33 81       	ldd	r19, Z+3	; 0x03
     b4e:	13 96       	adiw	r26, 0x03	; 3
     b50:	3c 93       	st	X, r19
     b52:	2e 93       	st	-X, r18
     b54:	12 97       	sbiw	r26, 0x02	; 2
	delete(toDelete);
     b56:	cf 01       	movw	r24, r30
     b58:	0e 94 51 30 	call	0x60a2	; 0x60a2 <_ZdlPv>
	_size--;
     b5c:	8a 81       	ldd	r24, Y+2	; 0x02
     b5e:	9b 81       	ldd	r25, Y+3	; 0x03
     b60:	01 97       	sbiw	r24, 0x01	; 1
     b62:	9b 83       	std	Y+3, r25	; 0x03
     b64:	8a 83       	std	Y+2, r24	; 0x02
	isCached = false;
     b66:	1c 86       	std	Y+12, r1	; 0x0c
	return ret;
     b68:	80 2f       	mov	r24, r16
     b6a:	91 2f       	mov	r25, r17
     b6c:	05 c0       	rjmp	.+10     	; 0xb78 <_ZN10LinkedListIiE6removeEi+0x8c>

template<typename T>
T LinkedList<T>::remove(int index){
	if (index < 0 || index >= _size)
	{
		return T();
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	02 c0       	rjmp	.+4      	; 0xb78 <_ZN10LinkedListIiE6removeEi+0x8c>
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	90 e0       	ldi	r25, 0x00	; 0
	tmp->next = tmp->next->next;
	delete(toDelete);
	_size--;
	isCached = false;
	return ret;
}
     b78:	df 91       	pop	r29
     b7a:	cf 91       	pop	r28
     b7c:	1f 91       	pop	r17
     b7e:	0f 91       	pop	r16
     b80:	08 95       	ret

00000b82 <_ZN10LinkedListIiE3setEii>:
	
	return true;
}

template<typename T>
bool LinkedList<T>::set(int index, T _t){
     b82:	cf 93       	push	r28
     b84:	df 93       	push	r29
	// Check if index position is in bounds
	if(index < 0 || index >= _size)
     b86:	77 23       	and	r23, r23
     b88:	6c f0       	brlt	.+26     	; 0xba4 <_ZN10LinkedListIiE3setEii+0x22>
     b8a:	fc 01       	movw	r30, r24
     b8c:	22 81       	ldd	r18, Z+2	; 0x02
     b8e:	33 81       	ldd	r19, Z+3	; 0x03
     b90:	62 17       	cp	r22, r18
     b92:	73 07       	cpc	r23, r19
     b94:	4c f4       	brge	.+18     	; 0xba8 <_ZN10LinkedListIiE3setEii+0x26>
     b96:	ea 01       	movw	r28, r20
		return false;

	getNode(index)->data = _t;
     b98:	39 de       	rcall	.-910    	; 0x80c <_ZN10LinkedListIiE7getNodeEi>
     b9a:	fc 01       	movw	r30, r24
     b9c:	d1 83       	std	Z+1, r29	; 0x01
     b9e:	c0 83       	st	Z, r28
	return true;
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <_ZN10LinkedListIiE3setEii+0x28>

template<typename T>
bool LinkedList<T>::set(int index, T _t){
	// Check if index position is in bounds
	if(index < 0 || index >= _size)
		return false;
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	01 c0       	rjmp	.+2      	; 0xbaa <_ZN10LinkedListIiE3setEii+0x28>
     ba8:	80 e0       	ldi	r24, 0x00	; 0

	getNode(index)->data = _t;
	return true;
}
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	08 95       	ret

00000bb0 <_ZN10LinkedListIiE3addEii>:
int LinkedList<T>::size(){
	return _size;
}

template<typename T>
bool LinkedList<T>::add(int index, T _t){
     bb0:	cf 92       	push	r12
     bb2:	df 92       	push	r13
     bb4:	ef 92       	push	r14
     bb6:	ff 92       	push	r15
     bb8:	0f 93       	push	r16
     bba:	1f 93       	push	r17
     bbc:	cf 93       	push	r28
     bbe:	df 93       	push	r29
     bc0:	ec 01       	movw	r28, r24
     bc2:	8b 01       	movw	r16, r22
     bc4:	6a 01       	movw	r12, r20

	if(index >= _size)
     bc6:	8a 81       	ldd	r24, Y+2	; 0x02
     bc8:	9b 81       	ldd	r25, Y+3	; 0x03
     bca:	68 17       	cp	r22, r24
     bcc:	79 07       	cpc	r23, r25
     bce:	4c f0       	brlt	.+18     	; 0xbe2 <_ZN10LinkedListIiE3addEii+0x32>
		return add(_t);
     bd0:	e8 81       	ld	r30, Y
     bd2:	f9 81       	ldd	r31, Y+1	; 0x01
     bd4:	04 80       	ldd	r0, Z+4	; 0x04
     bd6:	f5 81       	ldd	r31, Z+5	; 0x05
     bd8:	e0 2d       	mov	r30, r0
     bda:	ba 01       	movw	r22, r20
     bdc:	ce 01       	movw	r24, r28
     bde:	19 95       	eicall
     be0:	2d c0       	rjmp	.+90     	; 0xc3c <_ZN10LinkedListIiE3addEii+0x8c>

	if(index == 0)
     be2:	67 2b       	or	r22, r23
     be4:	49 f4       	brne	.+18     	; 0xbf8 <_ZN10LinkedListIiE3addEii+0x48>
		return unshift(_t);
     be6:	e8 81       	ld	r30, Y
     be8:	f9 81       	ldd	r31, Y+1	; 0x01
     bea:	06 80       	ldd	r0, Z+6	; 0x06
     bec:	f7 81       	ldd	r31, Z+7	; 0x07
     bee:	e0 2d       	mov	r30, r0
     bf0:	ba 01       	movw	r22, r20
     bf2:	ce 01       	movw	r24, r28
     bf4:	19 95       	eicall
     bf6:	22 c0       	rjmp	.+68     	; 0xc3c <_ZN10LinkedListIiE3addEii+0x8c>

	ListNode<T> *tmp = new ListNode<T>(),
     bf8:	84 e0       	ldi	r24, 0x04	; 4
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
     c00:	7c 01       	movw	r14, r24
     c02:	fc 01       	movw	r30, r24
     c04:	11 82       	std	Z+1, r1	; 0x01
     c06:	10 82       	st	Z, r1
     c08:	13 82       	std	Z+3, r1	; 0x03
     c0a:	12 82       	std	Z+2, r1	; 0x02
				 *_prev = getNode(index-1);
     c0c:	b8 01       	movw	r22, r16
     c0e:	61 50       	subi	r22, 0x01	; 1
     c10:	71 09       	sbc	r23, r1
     c12:	ce 01       	movw	r24, r28
     c14:	fb dd       	rcall	.-1034   	; 0x80c <_ZN10LinkedListIiE7getNodeEi>
	tmp->data = _t;
     c16:	f7 01       	movw	r30, r14
     c18:	d1 82       	std	Z+1, r13	; 0x01
     c1a:	c0 82       	st	Z, r12
	tmp->next = _prev->next;
     c1c:	fc 01       	movw	r30, r24
     c1e:	22 81       	ldd	r18, Z+2	; 0x02
     c20:	33 81       	ldd	r19, Z+3	; 0x03
     c22:	f7 01       	movw	r30, r14
     c24:	33 83       	std	Z+3, r19	; 0x03
     c26:	22 83       	std	Z+2, r18	; 0x02
	_prev->next = tmp;
     c28:	fc 01       	movw	r30, r24
     c2a:	f3 82       	std	Z+3, r15	; 0x03
     c2c:	e2 82       	std	Z+2, r14	; 0x02

	_size++;
     c2e:	8a 81       	ldd	r24, Y+2	; 0x02
     c30:	9b 81       	ldd	r25, Y+3	; 0x03
     c32:	01 96       	adiw	r24, 0x01	; 1
     c34:	9b 83       	std	Y+3, r25	; 0x03
     c36:	8a 83       	std	Y+2, r24	; 0x02
	isCached = false;
     c38:	1c 86       	std	Y+12, r1	; 0x0c

	return true;
     c3a:	81 e0       	ldi	r24, 0x01	; 1
}
     c3c:	df 91       	pop	r29
     c3e:	cf 91       	pop	r28
     c40:	1f 91       	pop	r17
     c42:	0f 91       	pop	r16
     c44:	ff 90       	pop	r15
     c46:	ef 90       	pop	r14
     c48:	df 90       	pop	r13
     c4a:	cf 90       	pop	r12
     c4c:	08 95       	ret

00000c4e <_ZN9DigitalIOD1Ev>:
}
	
DigitalIO::DigitalIO(int _Pin, DigitalIO::PinModes _Mode){
	Pin = _Pin;
	Mode = _Mode;
}
     c4e:	cf 93       	push	r28
     c50:	df 93       	push	r29
     c52:	ec 01       	movw	r28, r24
     c54:	09 96       	adiw	r24, 0x09	; 9
     c56:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
     c5a:	ce 01       	movw	r24, r28
     c5c:	03 96       	adiw	r24, 0x03	; 3
     c5e:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
     c62:	df 91       	pop	r29
     c64:	cf 91       	pop	r28
     c66:	08 95       	ret

00000c68 <_ZN9DigitalIO5ValueEv>:
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	ec 01       	movw	r28, r24
     c6e:	8a 81       	ldd	r24, Y+2	; 0x02
     c70:	88 23       	and	r24, r24
     c72:	19 f0       	breq	.+6      	; 0xc7a <_ZN9DigitalIO5ValueEv+0x12>
     c74:	82 30       	cpi	r24, 0x02	; 2
     c76:	39 f0       	breq	.+14     	; 0xc86 <_ZN9DigitalIO5ValueEv+0x1e>
     c78:	0b c0       	rjmp	.+22     	; 0xc90 <_ZN9DigitalIO5ValueEv+0x28>
     c7a:	88 81       	ld	r24, Y
     c7c:	0e 94 05 37 	call	0x6e0a	; 0x6e0a <digitalRead>
     c80:	98 8b       	std	Y+16, r25	; 0x10
     c82:	8f 87       	std	Y+15, r24	; 0x0f
     c84:	05 c0       	rjmp	.+10     	; 0xc90 <_ZN9DigitalIO5ValueEv+0x28>
     c86:	88 81       	ld	r24, Y
     c88:	0e 94 05 37 	call	0x6e0a	; 0x6e0a <digitalRead>
     c8c:	98 8b       	std	Y+16, r25	; 0x10
     c8e:	8f 87       	std	Y+15, r24	; 0x0f
     c90:	8f 85       	ldd	r24, Y+15	; 0x0f
     c92:	98 89       	ldd	r25, Y+16	; 0x10
     c94:	df 91       	pop	r29
     c96:	cf 91       	pop	r28
     c98:	08 95       	ret

00000c9a <_ZN9DigitalIO5WriteEi>:
     c9a:	0f 93       	push	r16
     c9c:	1f 93       	push	r17
     c9e:	cf 93       	push	r28
     ca0:	df 93       	push	r29
     ca2:	ec 01       	movw	r28, r24
     ca4:	8b 01       	movw	r16, r22
     ca6:	8a 81       	ldd	r24, Y+2	; 0x02
     ca8:	81 30       	cpi	r24, 0x01	; 1
     caa:	21 f0       	breq	.+8      	; 0xcb4 <_ZN9DigitalIO5WriteEi+0x1a>
     cac:	61 e0       	ldi	r22, 0x01	; 1
     cae:	88 81       	ld	r24, Y
     cb0:	0e 94 96 36 	call	0x6d2c	; 0x6d2c <pinMode>
     cb4:	18 8b       	std	Y+16, r17	; 0x10
     cb6:	0f 87       	std	Y+15, r16	; 0x0f
     cb8:	61 e0       	ldi	r22, 0x01	; 1
     cba:	88 81       	ld	r24, Y
     cbc:	0e 94 96 36 	call	0x6d2c	; 0x6d2c <pinMode>
     cc0:	6f 85       	ldd	r22, Y+15	; 0x0f
     cc2:	88 81       	ld	r24, Y
     cc4:	0e 94 d5 36 	call	0x6daa	; 0x6daa <digitalWrite>
     cc8:	df 91       	pop	r29
     cca:	cf 91       	pop	r28
     ccc:	1f 91       	pop	r17
     cce:	0f 91       	pop	r16
     cd0:	08 95       	ret

00000cd2 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>:

DigitalIO::DigitalIO(int _Pin, DigitalIO::PinModes _Mode, String _TrueLabel, String _FalseLabel){
     cd2:	7f 92       	push	r7
     cd4:	8f 92       	push	r8
     cd6:	9f 92       	push	r9
     cd8:	af 92       	push	r10
     cda:	bf 92       	push	r11
     cdc:	cf 92       	push	r12
     cde:	df 92       	push	r13
     ce0:	ef 92       	push	r14
     ce2:	ff 92       	push	r15
     ce4:	0f 93       	push	r16
     ce6:	1f 93       	push	r17
     ce8:	cf 93       	push	r28
     cea:	df 93       	push	r29
     cec:	ec 01       	movw	r28, r24
     cee:	5b 01       	movw	r10, r22
     cf0:	74 2e       	mov	r7, r20
     cf2:	69 01       	movw	r12, r18
     cf4:	48 01       	movw	r8, r16
     cf6:	8f ef       	ldi	r24, 0xFF	; 255
     cf8:	9f ef       	ldi	r25, 0xFF	; 255
     cfa:	99 83       	std	Y+1, r25	; 0x01
     cfc:	88 83       	st	Y, r24
     cfe:	1a 82       	std	Y+2, r1	; 0x02
     d00:	7e 01       	movw	r14, r28
     d02:	83 e0       	ldi	r24, 0x03	; 3
     d04:	e8 0e       	add	r14, r24
     d06:	f1 1c       	adc	r15, r1
     d08:	69 e5       	ldi	r22, 0x59	; 89
     d0a:	72 e0       	ldi	r23, 0x02	; 2
     d0c:	c7 01       	movw	r24, r14
     d0e:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
     d12:	8e 01       	movw	r16, r28
     d14:	07 5f       	subi	r16, 0xF7	; 247
     d16:	1f 4f       	sbci	r17, 0xFF	; 255
     d18:	6e e5       	ldi	r22, 0x5E	; 94
     d1a:	72 e0       	ldi	r23, 0x02	; 2
     d1c:	c8 01       	movw	r24, r16
     d1e:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
	Pin = _Pin;
     d22:	b9 82       	std	Y+1, r11	; 0x01
     d24:	a8 82       	st	Y, r10
	Mode = _Mode;
     d26:	7a 82       	std	Y+2, r7	; 0x02
	TrueLabel = _TrueLabel;
     d28:	b6 01       	movw	r22, r12
     d2a:	c7 01       	movw	r24, r14
     d2c:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <_ZN6StringaSERKS_>
	FalseLabel = _FalseLabel;
     d30:	b4 01       	movw	r22, r8
     d32:	c8 01       	movw	r24, r16
     d34:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <_ZN6StringaSERKS_>
}
     d38:	df 91       	pop	r29
     d3a:	cf 91       	pop	r28
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	cf 90       	pop	r12
     d48:	bf 90       	pop	r11
     d4a:	af 90       	pop	r10
     d4c:	9f 90       	pop	r9
     d4e:	8f 90       	pop	r8
     d50:	7f 90       	pop	r7
     d52:	08 95       	ret

00000d54 <_ZN18EZUI_Control_LabelC1Eb>:
*****************************************************************************/

EZUI_Control_Label::EZUI_Control_Label(String *val){
	Type = DynamicString;
	this->ItemRef = val;
}
     d54:	1f 93       	push	r17
     d56:	cf 93       	push	r28
     d58:	df 93       	push	r29
     d5a:	ec 01       	movw	r28, r24
     d5c:	16 2f       	mov	r17, r22
     d5e:	18 82       	st	Y, r1
     d60:	8f ef       	ldi	r24, 0xFF	; 255
     d62:	9f ef       	ldi	r25, 0xFF	; 255
     d64:	dc 01       	movw	r26, r24
     d66:	89 83       	std	Y+1, r24	; 0x01
     d68:	9a 83       	std	Y+2, r25	; 0x02
     d6a:	ab 83       	std	Y+3, r26	; 0x03
     d6c:	bc 83       	std	Y+4, r27	; 0x04
     d6e:	1e 82       	std	Y+6, r1	; 0x06
     d70:	1d 82       	std	Y+5, r1	; 0x05
     d72:	61 e6       	ldi	r22, 0x61	; 97
     d74:	76 e0       	ldi	r23, 0x06	; 6
     d76:	ce 01       	movw	r24, r28
     d78:	07 96       	adiw	r24, 0x07	; 7
     d7a:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
     d7e:	88 e0       	ldi	r24, 0x08	; 8
     d80:	88 83       	st	Y, r24
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
     d8a:	9e 83       	std	Y+6, r25	; 0x06
     d8c:	8d 83       	std	Y+5, r24	; 0x05
     d8e:	fc 01       	movw	r30, r24
     d90:	10 83       	st	Z, r17
     d92:	df 91       	pop	r29
     d94:	cf 91       	pop	r28
     d96:	1f 91       	pop	r17
     d98:	08 95       	ret

00000d9a <_ZN18EZUI_Control_LabelC1EPf>:

EZUI_Control_Label::EZUI_Control_Label(float *val){
     d9a:	0f 93       	push	r16
     d9c:	1f 93       	push	r17
     d9e:	cf 93       	push	r28
     da0:	df 93       	push	r29
     da2:	ec 01       	movw	r28, r24
     da4:	8b 01       	movw	r16, r22
     da6:	18 82       	st	Y, r1
     da8:	8f ef       	ldi	r24, 0xFF	; 255
     daa:	9f ef       	ldi	r25, 0xFF	; 255
     dac:	dc 01       	movw	r26, r24
     dae:	89 83       	std	Y+1, r24	; 0x01
     db0:	9a 83       	std	Y+2, r25	; 0x02
     db2:	ab 83       	std	Y+3, r26	; 0x03
     db4:	bc 83       	std	Y+4, r27	; 0x04
     db6:	1e 82       	std	Y+6, r1	; 0x06
     db8:	1d 82       	std	Y+5, r1	; 0x05
     dba:	61 e6       	ldi	r22, 0x61	; 97
     dbc:	76 e0       	ldi	r23, 0x06	; 6
     dbe:	ce 01       	movw	r24, r28
     dc0:	07 96       	adiw	r24, 0x07	; 7
     dc2:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
	Type = DynamicFloat;
     dc6:	8a e0       	ldi	r24, 0x0A	; 10
     dc8:	88 83       	st	Y, r24
	this->ItemRef = val;
     dca:	1e 83       	std	Y+6, r17	; 0x06
     dcc:	0d 83       	std	Y+5, r16	; 0x05
}
     dce:	df 91       	pop	r29
     dd0:	cf 91       	pop	r28
     dd2:	1f 91       	pop	r17
     dd4:	0f 91       	pop	r16
     dd6:	08 95       	ret

00000dd8 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Menu>:
	type = PageLink;
	LinkRef = Lnk;
} //EZUI_Control_Link

// default destructor
EZUI_Control_Link::~EZUI_Control_Link()
     dd8:	ef 92       	push	r14
     dda:	ff 92       	push	r15
     ddc:	0f 93       	push	r16
     dde:	1f 93       	push	r17
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
     de4:	ec 01       	movw	r28, r24
     de6:	7b 01       	movw	r14, r22
     de8:	8a 01       	movw	r16, r20
     dea:	61 e6       	ldi	r22, 0x61	; 97
     dec:	76 e0       	ldi	r23, 0x06	; 6
     dee:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
     df2:	1e 82       	std	Y+6, r1	; 0x06
     df4:	18 86       	std	Y+8, r1	; 0x08
     df6:	1f 82       	std	Y+7, r1	; 0x07
     df8:	b7 01       	movw	r22, r14
     dfa:	ce 01       	movw	r24, r28
     dfc:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <_ZN6StringaSERKS_>
     e00:	1e 82       	std	Y+6, r1	; 0x06
     e02:	18 87       	std	Y+8, r17	; 0x08
     e04:	0f 83       	std	Y+7, r16	; 0x07
     e06:	df 91       	pop	r29
     e08:	cf 91       	pop	r28
     e0a:	1f 91       	pop	r17
     e0c:	0f 91       	pop	r16
     e0e:	ff 90       	pop	r15
     e10:	ef 90       	pop	r14
     e12:	08 95       	ret

00000e14 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Page>:
     e14:	ef 92       	push	r14
     e16:	ff 92       	push	r15
     e18:	0f 93       	push	r16
     e1a:	1f 93       	push	r17
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
     e20:	ec 01       	movw	r28, r24
     e22:	7b 01       	movw	r14, r22
     e24:	8a 01       	movw	r16, r20
     e26:	61 e6       	ldi	r22, 0x61	; 97
     e28:	76 e0       	ldi	r23, 0x06	; 6
     e2a:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
     e2e:	1e 82       	std	Y+6, r1	; 0x06
     e30:	18 86       	std	Y+8, r1	; 0x08
     e32:	1f 82       	std	Y+7, r1	; 0x07
     e34:	b7 01       	movw	r22, r14
     e36:	ce 01       	movw	r24, r28
     e38:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <_ZN6StringaSERKS_>
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	8e 83       	std	Y+6, r24	; 0x06
     e40:	18 87       	std	Y+8, r17	; 0x08
     e42:	0f 83       	std	Y+7, r16	; 0x07
     e44:	df 91       	pop	r29
     e46:	cf 91       	pop	r28
     e48:	1f 91       	pop	r17
     e4a:	0f 91       	pop	r16
     e4c:	ff 90       	pop	r15
     e4e:	ef 90       	pop	r14
     e50:	08 95       	ret

00000e52 <_ZN17EZUI_Control_Link10FollowLinkEP4EZUI>:
{
} //~EZUI_Control_Link


void EZUI_Control_Link::FollowLink(EZUI *UI){
     e52:	fc 01       	movw	r30, r24
     e54:	9b 01       	movw	r18, r22
	if (type == MenuLink){
     e56:	96 81       	ldd	r25, Z+6	; 0x06
     e58:	91 11       	cpse	r25, r1
     e5a:	06 c0       	rjmp	.+12     	; 0xe68 <_ZN17EZUI_Control_Link10FollowLinkEP4EZUI+0x16>
		UI->setDisplay((EZUI_Menu*)LinkRef);
     e5c:	67 81       	ldd	r22, Z+7	; 0x07
     e5e:	70 85       	ldd	r23, Z+8	; 0x08
     e60:	c9 01       	movw	r24, r18
     e62:	0c 94 fc 20 	jmp	0x41f8	; 0x41f8 <_ZN4EZUI10setDisplayEP9EZUI_Menu>
     e66:	08 95       	ret
	}else if ( type == PageLink){
     e68:	91 30       	cpi	r25, 0x01	; 1
     e6a:	29 f4       	brne	.+10     	; 0xe76 <_ZN17EZUI_Control_Link10FollowLinkEP4EZUI+0x24>
		UI->setDisplay((EZUI_Page*)LinkRef);
     e6c:	67 81       	ldd	r22, Z+7	; 0x07
     e6e:	70 85       	ldd	r23, Z+8	; 0x08
     e70:	c9 01       	movw	r24, r18
     e72:	0c 94 02 21 	jmp	0x4204	; 0x4204 <_ZN4EZUI10setDisplayEP9EZUI_Page>
     e76:	08 95       	ret

00000e78 <_ZN25EZUI_Control_ToggleOptionD1Ev>:
		case(StaticBool):
			BlnVal=_value;
			break;
		case(VarBool):
			*BlnRef = _value;
			BlnVal = *BlnRef;
     e78:	cf 93       	push	r28
     e7a:	df 93       	push	r29
     e7c:	ec 01       	movw	r28, r24
     e7e:	0d 96       	adiw	r24, 0x0d	; 13
     e80:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
     e84:	ce 01       	movw	r24, r28
     e86:	07 96       	adiw	r24, 0x07	; 7
     e88:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
     e8c:	ce 01       	movw	r24, r28
     e8e:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
     e92:	df 91       	pop	r29
     e94:	cf 91       	pop	r28
     e96:	08 95       	ret

00000e98 <_ZN25EZUI_Control_ToggleOption9TrueLabelEv>:
     e98:	cf 93       	push	r28
     e9a:	df 93       	push	r29
     e9c:	ec 01       	movw	r28, r24
     e9e:	fb 01       	movw	r30, r22
     ea0:	86 81       	ldd	r24, Z+6	; 0x06
     ea2:	81 30       	cpi	r24, 0x01	; 1
     ea4:	69 f0       	breq	.+26     	; 0xec0 <_ZN25EZUI_Control_ToggleOption9TrueLabelEv+0x28>
     ea6:	18 f0       	brcs	.+6      	; 0xeae <_ZN25EZUI_Control_ToggleOption9TrueLabelEv+0x16>
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	81 f0       	breq	.+32     	; 0xecc <_ZN25EZUI_Control_ToggleOption9TrueLabelEv+0x34>
     eac:	15 c0       	rjmp	.+42     	; 0xed8 <_ZN25EZUI_Control_ToggleOption9TrueLabelEv+0x40>
     eae:	fb 01       	movw	r30, r22
     eb0:	66 89       	ldd	r22, Z+22	; 0x16
     eb2:	77 89       	ldd	r23, Z+23	; 0x17
     eb4:	6d 5f       	subi	r22, 0xFD	; 253
     eb6:	7f 4f       	sbci	r23, 0xFF	; 255
     eb8:	ce 01       	movw	r24, r28
     eba:	0e 94 e0 37 	call	0x6fc0	; 0x6fc0 <_ZN6StringC1ERKS_>
     ebe:	0c c0       	rjmp	.+24     	; 0xed8 <_ZN25EZUI_Control_ToggleOption9TrueLabelEv+0x40>
     ec0:	69 5f       	subi	r22, 0xF9	; 249
     ec2:	7f 4f       	sbci	r23, 0xFF	; 255
     ec4:	ce 01       	movw	r24, r28
     ec6:	0e 94 e0 37 	call	0x6fc0	; 0x6fc0 <_ZN6StringC1ERKS_>
     eca:	06 c0       	rjmp	.+12     	; 0xed8 <_ZN25EZUI_Control_ToggleOption9TrueLabelEv+0x40>
     ecc:	69 5f       	subi	r22, 0xF9	; 249
     ece:	7f 4f       	sbci	r23, 0xFF	; 255
     ed0:	ce 01       	movw	r24, r28
     ed2:	0e 94 e0 37 	call	0x6fc0	; 0x6fc0 <_ZN6StringC1ERKS_>
     ed6:	00 c0       	rjmp	.+0      	; 0xed8 <_ZN25EZUI_Control_ToggleOption9TrueLabelEv+0x40>
     ed8:	ce 01       	movw	r24, r28
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
     ede:	08 95       	ret

00000ee0 <_ZN25EZUI_Control_ToggleOption10FalseLabelEv>:
     ee0:	cf 93       	push	r28
     ee2:	df 93       	push	r29
     ee4:	ec 01       	movw	r28, r24
     ee6:	fb 01       	movw	r30, r22
     ee8:	86 81       	ldd	r24, Z+6	; 0x06
     eea:	81 30       	cpi	r24, 0x01	; 1
     eec:	69 f0       	breq	.+26     	; 0xf08 <_ZN25EZUI_Control_ToggleOption10FalseLabelEv+0x28>
     eee:	18 f0       	brcs	.+6      	; 0xef6 <_ZN25EZUI_Control_ToggleOption10FalseLabelEv+0x16>
     ef0:	82 30       	cpi	r24, 0x02	; 2
     ef2:	81 f0       	breq	.+32     	; 0xf14 <_ZN25EZUI_Control_ToggleOption10FalseLabelEv+0x34>
     ef4:	15 c0       	rjmp	.+42     	; 0xf20 <_ZN25EZUI_Control_ToggleOption10FalseLabelEv+0x40>
     ef6:	fb 01       	movw	r30, r22
     ef8:	66 89       	ldd	r22, Z+22	; 0x16
     efa:	77 89       	ldd	r23, Z+23	; 0x17
     efc:	67 5f       	subi	r22, 0xF7	; 247
     efe:	7f 4f       	sbci	r23, 0xFF	; 255
     f00:	ce 01       	movw	r24, r28
     f02:	0e 94 e0 37 	call	0x6fc0	; 0x6fc0 <_ZN6StringC1ERKS_>
     f06:	0c c0       	rjmp	.+24     	; 0xf20 <_ZN25EZUI_Control_ToggleOption10FalseLabelEv+0x40>
     f08:	63 5f       	subi	r22, 0xF3	; 243
     f0a:	7f 4f       	sbci	r23, 0xFF	; 255
     f0c:	ce 01       	movw	r24, r28
     f0e:	0e 94 e0 37 	call	0x6fc0	; 0x6fc0 <_ZN6StringC1ERKS_>
     f12:	06 c0       	rjmp	.+12     	; 0xf20 <_ZN25EZUI_Control_ToggleOption10FalseLabelEv+0x40>
     f14:	63 5f       	subi	r22, 0xF3	; 243
     f16:	7f 4f       	sbci	r23, 0xFF	; 255
     f18:	ce 01       	movw	r24, r28
     f1a:	0e 94 e0 37 	call	0x6fc0	; 0x6fc0 <_ZN6StringC1ERKS_>
     f1e:	00 c0       	rjmp	.+0      	; 0xf20 <_ZN25EZUI_Control_ToggleOption10FalseLabelEv+0x40>
     f20:	ce 01       	movw	r24, r28
     f22:	df 91       	pop	r29
     f24:	cf 91       	pop	r28
     f26:	08 95       	ret

00000f28 <_ZN25EZUI_Control_ToggleOption5ValueEv>:
     f28:	dc 01       	movw	r26, r24
     f2a:	16 96       	adiw	r26, 0x06	; 6
     f2c:	2c 91       	ld	r18, X
     f2e:	21 30       	cpi	r18, 0x01	; 1
     f30:	51 f0       	breq	.+20     	; 0xf46 <_ZN25EZUI_Control_ToggleOption5ValueEv+0x1e>
     f32:	18 f0       	brcs	.+6      	; 0xf3a <_ZN25EZUI_Control_ToggleOption5ValueEv+0x12>
     f34:	22 30       	cpi	r18, 0x02	; 2
     f36:	59 f0       	breq	.+22     	; 0xf4e <_ZN25EZUI_Control_ToggleOption5ValueEv+0x26>
     f38:	14 c0       	rjmp	.+40     	; 0xf62 <_ZN25EZUI_Control_ToggleOption5ValueEv+0x3a>
     f3a:	fc 01       	movw	r30, r24
     f3c:	86 89       	ldd	r24, Z+22	; 0x16
     f3e:	97 89       	ldd	r25, Z+23	; 0x17
     f40:	93 de       	rcall	.-730    	; 0xc68 <_ZN9DigitalIO5ValueEv>
     f42:	9c 01       	movw	r18, r24
     f44:	0f c0       	rjmp	.+30     	; 0xf64 <_ZN25EZUI_Control_ToggleOption5ValueEv+0x3c>
     f46:	fc 01       	movw	r30, r24
     f48:	23 89       	ldd	r18, Z+19	; 0x13
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	0b c0       	rjmp	.+22     	; 0xf64 <_ZN25EZUI_Control_ToggleOption5ValueEv+0x3c>
     f4e:	dc 01       	movw	r26, r24
     f50:	54 96       	adiw	r26, 0x14	; 20
     f52:	ed 91       	ld	r30, X+
     f54:	fc 91       	ld	r31, X
     f56:	55 97       	sbiw	r26, 0x15	; 21
     f58:	20 81       	ld	r18, Z
     f5a:	53 96       	adiw	r26, 0x13	; 19
     f5c:	2c 93       	st	X, r18
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	01 c0       	rjmp	.+2      	; 0xf64 <_ZN25EZUI_Control_ToggleOption5ValueEv+0x3c>
     f62:	08 95       	ret
     f64:	82 2f       	mov	r24, r18
     f66:	93 2f       	mov	r25, r19
     f68:	08 95       	ret

00000f6a <_ZN25EZUI_Control_ToggleOption6ToggleEv>:
			break;
	}
}

void EZUI_Control_ToggleOption::Toggle(void){
     f6a:	cf 93       	push	r28
     f6c:	df 93       	push	r29
     f6e:	fc 01       	movw	r30, r24
	switch(Type){
     f70:	86 81       	ldd	r24, Z+6	; 0x06
     f72:	81 30       	cpi	r24, 0x01	; 1
     f74:	a1 f0       	breq	.+40     	; 0xf9e <_ZN25EZUI_Control_ToggleOption6ToggleEv+0x34>
     f76:	18 f0       	brcs	.+6      	; 0xf7e <_ZN25EZUI_Control_ToggleOption6ToggleEv+0x14>
     f78:	82 30       	cpi	r24, 0x02	; 2
     f7a:	b1 f0       	breq	.+44     	; 0xfa8 <_ZN25EZUI_Control_ToggleOption6ToggleEv+0x3e>
     f7c:	1f c0       	rjmp	.+62     	; 0xfbc <_ZN25EZUI_Control_ToggleOption6ToggleEv+0x52>
		case(VarDigIO):
			DigitalIO *DIO;
			DIO = DIORef;
     f7e:	c6 89       	ldd	r28, Z+22	; 0x16
     f80:	d7 89       	ldd	r29, Z+23	; 0x17
			if ((*DIO).Value()){
     f82:	ce 01       	movw	r24, r28
     f84:	71 de       	rcall	.-798    	; 0xc68 <_ZN9DigitalIO5ValueEv>
     f86:	89 2b       	or	r24, r25
     f88:	29 f0       	breq	.+10     	; 0xf94 <_ZN25EZUI_Control_ToggleOption6ToggleEv+0x2a>
				(*DIO).Write(0);
     f8a:	60 e0       	ldi	r22, 0x00	; 0
     f8c:	70 e0       	ldi	r23, 0x00	; 0
     f8e:	ce 01       	movw	r24, r28
     f90:	84 de       	rcall	.-760    	; 0xc9a <_ZN9DigitalIO5WriteEi>
     f92:	14 c0       	rjmp	.+40     	; 0xfbc <_ZN25EZUI_Control_ToggleOption6ToggleEv+0x52>
			}else{
				(*DIO).Write(1);
     f94:	61 e0       	ldi	r22, 0x01	; 1
     f96:	70 e0       	ldi	r23, 0x00	; 0
     f98:	ce 01       	movw	r24, r28
     f9a:	7f de       	rcall	.-770    	; 0xc9a <_ZN9DigitalIO5WriteEi>
     f9c:	0f c0       	rjmp	.+30     	; 0xfbc <_ZN25EZUI_Control_ToggleOption6ToggleEv+0x52>
			}
			break;
		case(StaticBool):
			BlnVal=!BlnVal;
     f9e:	93 89       	ldd	r25, Z+19	; 0x13
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	89 27       	eor	r24, r25
     fa4:	83 8b       	std	Z+19, r24	; 0x13
			break;
     fa6:	0a c0       	rjmp	.+20     	; 0xfbc <_ZN25EZUI_Control_ToggleOption6ToggleEv+0x52>
		case(VarBool):
			*BlnRef = !BlnVal;
     fa8:	a4 89       	ldd	r26, Z+20	; 0x14
     faa:	b5 89       	ldd	r27, Z+21	; 0x15
     fac:	93 89       	ldd	r25, Z+19	; 0x13
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	89 27       	eor	r24, r25
     fb2:	8c 93       	st	X, r24
			BlnVal = *BlnRef;
     fb4:	a4 89       	ldd	r26, Z+20	; 0x14
     fb6:	b5 89       	ldd	r27, Z+21	; 0x15
     fb8:	8c 91       	ld	r24, X
     fba:	83 8b       	std	Z+19, r24	; 0x13
			break;
	}
}
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	08 95       	ret

00000fc2 <_ZN25EZUI_Control_ToggleOptionC1E6StringP9DigitalIO>:

EZUI_Control_ToggleOption::EZUI_Control_ToggleOption(String _Label, DigitalIO * DigitalIOObject)
     fc2:	ef 92       	push	r14
     fc4:	ff 92       	push	r15
     fc6:	0f 93       	push	r16
     fc8:	1f 93       	push	r17
     fca:	cf 93       	push	r28
     fcc:	df 93       	push	r29
     fce:	ec 01       	movw	r28, r24
     fd0:	7b 01       	movw	r14, r22
     fd2:	8a 01       	movw	r16, r20
     fd4:	61 e6       	ldi	r22, 0x61	; 97
     fd6:	76 e0       	ldi	r23, 0x06	; 6
     fd8:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	8e 83       	std	Y+6, r24	; 0x06
     fe0:	69 e5       	ldi	r22, 0x59	; 89
     fe2:	72 e0       	ldi	r23, 0x02	; 2
     fe4:	ce 01       	movw	r24, r28
     fe6:	07 96       	adiw	r24, 0x07	; 7
     fe8:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
     fec:	6e e5       	ldi	r22, 0x5E	; 94
     fee:	72 e0       	ldi	r23, 0x02	; 2
     ff0:	ce 01       	movw	r24, r28
     ff2:	0d 96       	adiw	r24, 0x0d	; 13
     ff4:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
     ff8:	1b 8a       	std	Y+19, r1	; 0x13
     ffa:	1d 8a       	std	Y+21, r1	; 0x15
     ffc:	1c 8a       	std	Y+20, r1	; 0x14
     ffe:	1f 8a       	std	Y+23, r1	; 0x17
    1000:	1e 8a       	std	Y+22, r1	; 0x16
{
	Label = _Label;
    1002:	b7 01       	movw	r22, r14
    1004:	ce 01       	movw	r24, r28
    1006:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <_ZN6StringaSERKS_>
	Type = VarDigIO;
    100a:	1e 82       	std	Y+6, r1	; 0x06
	DIORef = DigitalIOObject;	
    100c:	1f 8b       	std	Y+23, r17	; 0x17
    100e:	0e 8b       	std	Y+22, r16	; 0x16
}
    1010:	df 91       	pop	r29
    1012:	cf 91       	pop	r28
    1014:	1f 91       	pop	r17
    1016:	0f 91       	pop	r16
    1018:	ff 90       	pop	r15
    101a:	ef 90       	pop	r14
    101c:	08 95       	ret

0000101e <_Z15serviceEncodersv>:

/**************************
*	Functions
**************************/
void serviceEncoders(){
	MAIN_ENC->service();
    101e:	80 91 c0 06 	lds	r24, 0x06C0
    1022:	90 91 c1 06 	lds	r25, 0x06C1
    1026:	0e 94 fd 24 	call	0x49fa	; 0x49fa <_ZN12ClickEncoder7serviceEv>
	HLT_ENC->service();
    102a:	80 91 a6 06 	lds	r24, 0x06A6
    102e:	90 91 a7 06 	lds	r25, 0x06A7
    1032:	0e 94 fd 24 	call	0x49fa	; 0x49fa <_ZN12ClickEncoder7serviceEv>
	MLT_ENC->service();
    1036:	80 91 8a 06 	lds	r24, 0x068A
    103a:	90 91 8b 06 	lds	r25, 0x068B
    103e:	0e 94 fd 24 	call	0x49fa	; 0x49fa <_ZN12ClickEncoder7serviceEv>
	BK_ENC->service();
    1042:	80 91 70 06 	lds	r24, 0x0670
    1046:	90 91 71 06 	lds	r25, 0x0671
    104a:	0c 94 fd 24 	jmp	0x49fa	; 0x49fa <_ZN12ClickEncoder7serviceEv>
    104e:	08 95       	ret

00001050 <_ZN22ClickEncoderWithEventsC1Ehhhh>:
		int16_t t_value = 0;

	//functions
	public:
		ClickEncoderWithEvents(uint8_t A, uint8_t B, uint8_t SW) : ClickEncoder(A, B, SW ) {};
		ClickEncoderWithEvents(uint8_t A, uint8_t B, uint8_t SW, uint8_t DEGPERNOTCH) : ClickEncoder(A, B, SW, DEGPERNOTCH) {};
    1050:	ef 92       	push	r14
    1052:	0f 93       	push	r16
    1054:	cf 93       	push	r28
    1056:	df 93       	push	r29
    1058:	ec 01       	movw	r28, r24
    105a:	e1 2c       	mov	r14, r1
    105c:	0e 94 b7 24 	call	0x496e	; 0x496e <_ZN12ClickEncoderC1Ehhhhb>
    1060:	19 8a       	std	Y+17, r1	; 0x11
    1062:	18 8a       	std	Y+16, r1	; 0x10
    1064:	1b 8a       	std	Y+19, r1	; 0x13
    1066:	1a 8a       	std	Y+18, r1	; 0x12
    1068:	1d 8a       	std	Y+21, r1	; 0x15
    106a:	1c 8a       	std	Y+20, r1	; 0x14
    106c:	1f 8a       	std	Y+23, r1	; 0x17
    106e:	1e 8a       	std	Y+22, r1	; 0x16
    1070:	19 8e       	std	Y+25, r1	; 0x19
    1072:	18 8e       	std	Y+24, r1	; 0x18
    1074:	1b 8e       	std	Y+27, r1	; 0x1b
    1076:	1a 8e       	std	Y+26, r1	; 0x1a
    1078:	1d 8e       	std	Y+29, r1	; 0x1d
    107a:	1c 8e       	std	Y+28, r1	; 0x1c
    107c:	1f 8e       	std	Y+31, r1	; 0x1f
    107e:	1e 8e       	std	Y+30, r1	; 0x1e
    1080:	18 a2       	std	Y+32, r1	; 0x20
    1082:	19 a2       	std	Y+33, r1	; 0x21
    1084:	1a a2       	std	Y+34, r1	; 0x22
    1086:	1b a2       	std	Y+35, r1	; 0x23
    1088:	1c a2       	std	Y+36, r1	; 0x24
    108a:	1d a2       	std	Y+37, r1	; 0x25
    108c:	1e a2       	std	Y+38, r1	; 0x26
    108e:	1f a2       	std	Y+39, r1	; 0x27
    1090:	19 a6       	std	Y+41, r1	; 0x29
    1092:	18 a6       	std	Y+40, r1	; 0x28
    1094:	1b a6       	std	Y+43, r1	; 0x2b
    1096:	1a a6       	std	Y+42, r1	; 0x2a
    1098:	df 91       	pop	r29
    109a:	cf 91       	pop	r28
    109c:	0f 91       	pop	r16
    109e:	ef 90       	pop	r14
    10a0:	08 95       	ret

000010a2 <_GLOBAL__sub_I__Z15serviceEncodersv>:

/**************************
*	Boil Kettle
**************************/
LiquidCrystal_I2C BK_LCD( BK_LCD_I2C_ADDR, En_pin, Rw_pin, Rs_pin, D4_pin, D5_pin, D6_pin, D7_pin);
ClickEncoderWithEvents *BK_ENC = new ClickEncoderWithEvents( BK_ENC_A, BK_ENC_B, BK_ENC_SW, BK_ENC_DEG_PER_NOTCH );
    10a2:	6f 92       	push	r6
    10a4:	7f 92       	push	r7
    10a6:	8f 92       	push	r8
    10a8:	9f 92       	push	r9
    10aa:	af 92       	push	r10
    10ac:	bf 92       	push	r11
    10ae:	cf 92       	push	r12
    10b0:	df 92       	push	r13
    10b2:	ef 92       	push	r14
    10b4:	ff 92       	push	r15
    10b6:	0f 93       	push	r16
    10b8:	1f 93       	push	r17
    10ba:	cf 93       	push	r28
    10bc:	df 93       	push	r29
    10be:	cd b7       	in	r28, 0x3d	; 61
    10c0:	de b7       	in	r29, 0x3e	; 62
    10c2:	cc 5c       	subi	r28, 0xCC	; 204
    10c4:	d1 09       	sbc	r29, r1
    10c6:	0f b6       	in	r0, 0x3f	; 63
    10c8:	f8 94       	cli
    10ca:	de bf       	out	0x3e, r29	; 62
    10cc:	0f be       	out	0x3f, r0	; 63
    10ce:	cd bf       	out	0x3d, r28	; 61
}

/**************************
*	Digital IO
**************************/
DigitalIO RC1_OUT1 = DigitalIO(49, DigitalIO::OUT, "OFF", "ON");
    10d0:	64 e6       	ldi	r22, 0x64	; 100
    10d2:	72 e0       	ldi	r23, 0x02	; 2
    10d4:	ce 01       	movw	r24, r28
    10d6:	01 96       	adiw	r24, 0x01	; 1
    10d8:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    10dc:	67 e6       	ldi	r22, 0x67	; 103
    10de:	72 e0       	ldi	r23, 0x02	; 2
    10e0:	ce 01       	movw	r24, r28
    10e2:	07 96       	adiw	r24, 0x07	; 7
    10e4:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    10e8:	8e 01       	movw	r16, r28
    10ea:	0f 5f       	subi	r16, 0xFF	; 255
    10ec:	1f 4f       	sbci	r17, 0xFF	; 255
    10ee:	9e 01       	movw	r18, r28
    10f0:	29 5f       	subi	r18, 0xF9	; 249
    10f2:	3f 4f       	sbci	r19, 0xFF	; 255
    10f4:	41 e0       	ldi	r20, 0x01	; 1
    10f6:	61 e3       	ldi	r22, 0x31	; 49
    10f8:	70 e0       	ldi	r23, 0x00	; 0
    10fa:	8f eb       	ldi	r24, 0xBF	; 191
    10fc:	99 e0       	ldi	r25, 0x09	; 9
    10fe:	e9 dd       	rcall	.-1070   	; 0xcd2 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
    1100:	ce 01       	movw	r24, r28
    1102:	07 96       	adiw	r24, 0x07	; 7
    1104:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
    1108:	c8 01       	movw	r24, r16
    110a:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
DigitalIO RC1_OUT2 = DigitalIO(48 , DigitalIO::OUT, "OFF", "ON");
    110e:	64 e6       	ldi	r22, 0x64	; 100
    1110:	72 e0       	ldi	r23, 0x02	; 2
    1112:	ce 01       	movw	r24, r28
    1114:	0d 96       	adiw	r24, 0x0d	; 13
    1116:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    111a:	67 e6       	ldi	r22, 0x67	; 103
    111c:	72 e0       	ldi	r23, 0x02	; 2
    111e:	ce 01       	movw	r24, r28
    1120:	43 96       	adiw	r24, 0x13	; 19
    1122:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    1126:	04 5f       	subi	r16, 0xF4	; 244
    1128:	1f 4f       	sbci	r17, 0xFF	; 255
    112a:	9e 01       	movw	r18, r28
    112c:	2d 5e       	subi	r18, 0xED	; 237
    112e:	3f 4f       	sbci	r19, 0xFF	; 255
    1130:	41 e0       	ldi	r20, 0x01	; 1
    1132:	60 e3       	ldi	r22, 0x30	; 48
    1134:	70 e0       	ldi	r23, 0x00	; 0
    1136:	8e ea       	ldi	r24, 0xAE	; 174
    1138:	99 e0       	ldi	r25, 0x09	; 9
    113a:	cb dd       	rcall	.-1130   	; 0xcd2 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
    113c:	ce 01       	movw	r24, r28
    113e:	43 96       	adiw	r24, 0x13	; 19
    1140:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
    1144:	c8 01       	movw	r24, r16
    1146:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
DigitalIO RC1_OUT3 = DigitalIO(47 , DigitalIO::OUT, "OFF", "ON");
    114a:	64 e6       	ldi	r22, 0x64	; 100
    114c:	72 e0       	ldi	r23, 0x02	; 2
    114e:	ce 01       	movw	r24, r28
    1150:	49 96       	adiw	r24, 0x19	; 25
    1152:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    1156:	67 e6       	ldi	r22, 0x67	; 103
    1158:	72 e0       	ldi	r23, 0x02	; 2
    115a:	ce 01       	movw	r24, r28
    115c:	4f 96       	adiw	r24, 0x1f	; 31
    115e:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    1162:	04 5f       	subi	r16, 0xF4	; 244
    1164:	1f 4f       	sbci	r17, 0xFF	; 255
    1166:	9e 01       	movw	r18, r28
    1168:	21 5e       	subi	r18, 0xE1	; 225
    116a:	3f 4f       	sbci	r19, 0xFF	; 255
    116c:	41 e0       	ldi	r20, 0x01	; 1
    116e:	6f e2       	ldi	r22, 0x2F	; 47
    1170:	70 e0       	ldi	r23, 0x00	; 0
    1172:	8d e9       	ldi	r24, 0x9D	; 157
    1174:	99 e0       	ldi	r25, 0x09	; 9
    1176:	ad dd       	rcall	.-1190   	; 0xcd2 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
    1178:	ce 01       	movw	r24, r28
    117a:	4f 96       	adiw	r24, 0x1f	; 31
    117c:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
    1180:	c8 01       	movw	r24, r16
    1182:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
DigitalIO RC1_OUT4 = DigitalIO(46 , DigitalIO::OUT, "OFF", "ON");
    1186:	64 e6       	ldi	r22, 0x64	; 100
    1188:	72 e0       	ldi	r23, 0x02	; 2
    118a:	ce 01       	movw	r24, r28
    118c:	85 96       	adiw	r24, 0x25	; 37
    118e:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    1192:	67 e6       	ldi	r22, 0x67	; 103
    1194:	72 e0       	ldi	r23, 0x02	; 2
    1196:	ce 01       	movw	r24, r28
    1198:	8b 96       	adiw	r24, 0x2b	; 43
    119a:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    119e:	04 5f       	subi	r16, 0xF4	; 244
    11a0:	1f 4f       	sbci	r17, 0xFF	; 255
    11a2:	9e 01       	movw	r18, r28
    11a4:	25 5d       	subi	r18, 0xD5	; 213
    11a6:	3f 4f       	sbci	r19, 0xFF	; 255
    11a8:	41 e0       	ldi	r20, 0x01	; 1
    11aa:	6e e2       	ldi	r22, 0x2E	; 46
    11ac:	70 e0       	ldi	r23, 0x00	; 0
    11ae:	8c e8       	ldi	r24, 0x8C	; 140
    11b0:	99 e0       	ldi	r25, 0x09	; 9
    11b2:	8f dd       	rcall	.-1250   	; 0xcd2 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
    11b4:	ce 01       	movw	r24, r28
    11b6:	8b 96       	adiw	r24, 0x2b	; 43
    11b8:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
    11bc:	c8 01       	movw	r24, r16
    11be:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
DigitalIO RC1_OUT5 = DigitalIO(45 , DigitalIO::OUT, "OFF", "ON");
    11c2:	64 e6       	ldi	r22, 0x64	; 100
    11c4:	72 e0       	ldi	r23, 0x02	; 2
    11c6:	ce 01       	movw	r24, r28
    11c8:	c1 96       	adiw	r24, 0x31	; 49
    11ca:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    11ce:	67 e6       	ldi	r22, 0x67	; 103
    11d0:	72 e0       	ldi	r23, 0x02	; 2
    11d2:	ce 01       	movw	r24, r28
    11d4:	c7 96       	adiw	r24, 0x37	; 55
    11d6:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    11da:	04 5f       	subi	r16, 0xF4	; 244
    11dc:	1f 4f       	sbci	r17, 0xFF	; 255
    11de:	9e 01       	movw	r18, r28
    11e0:	29 5c       	subi	r18, 0xC9	; 201
    11e2:	3f 4f       	sbci	r19, 0xFF	; 255
    11e4:	41 e0       	ldi	r20, 0x01	; 1
    11e6:	6d e2       	ldi	r22, 0x2D	; 45
    11e8:	70 e0       	ldi	r23, 0x00	; 0
    11ea:	8b e7       	ldi	r24, 0x7B	; 123
    11ec:	99 e0       	ldi	r25, 0x09	; 9
    11ee:	71 dd       	rcall	.-1310   	; 0xcd2 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
    11f0:	ce 01       	movw	r24, r28
    11f2:	c7 96       	adiw	r24, 0x37	; 55
    11f4:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
    11f8:	c8 01       	movw	r24, r16
    11fa:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
DigitalIO RC1_OUT6 = DigitalIO(44 , DigitalIO::OUT, "OFF", "ON");
    11fe:	64 e6       	ldi	r22, 0x64	; 100
    1200:	72 e0       	ldi	r23, 0x02	; 2
    1202:	ce 01       	movw	r24, r28
    1204:	cd 96       	adiw	r24, 0x3d	; 61
    1206:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    120a:	67 e6       	ldi	r22, 0x67	; 103
    120c:	72 e0       	ldi	r23, 0x02	; 2
    120e:	ce 01       	movw	r24, r28
    1210:	8d 5b       	subi	r24, 0xBD	; 189
    1212:	9f 4f       	sbci	r25, 0xFF	; 255
    1214:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    1218:	04 5f       	subi	r16, 0xF4	; 244
    121a:	1f 4f       	sbci	r17, 0xFF	; 255
    121c:	9e 01       	movw	r18, r28
    121e:	2d 5b       	subi	r18, 0xBD	; 189
    1220:	3f 4f       	sbci	r19, 0xFF	; 255
    1222:	41 e0       	ldi	r20, 0x01	; 1
    1224:	6c e2       	ldi	r22, 0x2C	; 44
    1226:	70 e0       	ldi	r23, 0x00	; 0
    1228:	8a e6       	ldi	r24, 0x6A	; 106
    122a:	99 e0       	ldi	r25, 0x09	; 9
    122c:	52 dd       	rcall	.-1372   	; 0xcd2 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
    122e:	ce 01       	movw	r24, r28
    1230:	8d 5b       	subi	r24, 0xBD	; 189
    1232:	9f 4f       	sbci	r25, 0xFF	; 255
    1234:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
    1238:	c8 01       	movw	r24, r16
    123a:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
DigitalIO RC1_OUT7 = DigitalIO(43 , DigitalIO::OUT, "OFF", "ON");
    123e:	64 e6       	ldi	r22, 0x64	; 100
    1240:	72 e0       	ldi	r23, 0x02	; 2
    1242:	ce 01       	movw	r24, r28
    1244:	87 5b       	subi	r24, 0xB7	; 183
    1246:	9f 4f       	sbci	r25, 0xFF	; 255
    1248:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    124c:	67 e6       	ldi	r22, 0x67	; 103
    124e:	72 e0       	ldi	r23, 0x02	; 2
    1250:	ce 01       	movw	r24, r28
    1252:	81 5b       	subi	r24, 0xB1	; 177
    1254:	9f 4f       	sbci	r25, 0xFF	; 255
    1256:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    125a:	04 5f       	subi	r16, 0xF4	; 244
    125c:	1f 4f       	sbci	r17, 0xFF	; 255
    125e:	9e 01       	movw	r18, r28
    1260:	21 5b       	subi	r18, 0xB1	; 177
    1262:	3f 4f       	sbci	r19, 0xFF	; 255
    1264:	41 e0       	ldi	r20, 0x01	; 1
    1266:	6b e2       	ldi	r22, 0x2B	; 43
    1268:	70 e0       	ldi	r23, 0x00	; 0
    126a:	89 e5       	ldi	r24, 0x59	; 89
    126c:	99 e0       	ldi	r25, 0x09	; 9
    126e:	31 dd       	rcall	.-1438   	; 0xcd2 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
    1270:	ce 01       	movw	r24, r28
    1272:	81 5b       	subi	r24, 0xB1	; 177
    1274:	9f 4f       	sbci	r25, 0xFF	; 255
    1276:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
    127a:	c8 01       	movw	r24, r16
    127c:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
DigitalIO RC1_OUT8 = DigitalIO(42 , DigitalIO::OUT, "OFF", "ON");
    1280:	64 e6       	ldi	r22, 0x64	; 100
    1282:	72 e0       	ldi	r23, 0x02	; 2
    1284:	ce 01       	movw	r24, r28
    1286:	8b 5a       	subi	r24, 0xAB	; 171
    1288:	9f 4f       	sbci	r25, 0xFF	; 255
    128a:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    128e:	67 e6       	ldi	r22, 0x67	; 103
    1290:	72 e0       	ldi	r23, 0x02	; 2
    1292:	ce 01       	movw	r24, r28
    1294:	85 5a       	subi	r24, 0xA5	; 165
    1296:	9f 4f       	sbci	r25, 0xFF	; 255
    1298:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    129c:	04 5f       	subi	r16, 0xF4	; 244
    129e:	1f 4f       	sbci	r17, 0xFF	; 255
    12a0:	9e 01       	movw	r18, r28
    12a2:	25 5a       	subi	r18, 0xA5	; 165
    12a4:	3f 4f       	sbci	r19, 0xFF	; 255
    12a6:	41 e0       	ldi	r20, 0x01	; 1
    12a8:	6a e2       	ldi	r22, 0x2A	; 42
    12aa:	70 e0       	ldi	r23, 0x00	; 0
    12ac:	88 e4       	ldi	r24, 0x48	; 72
    12ae:	99 e0       	ldi	r25, 0x09	; 9
    12b0:	10 dd       	rcall	.-1504   	; 0xcd2 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
    12b2:	ce 01       	movw	r24, r28
    12b4:	85 5a       	subi	r24, 0xA5	; 165
    12b6:	9f 4f       	sbci	r25, 0xFF	; 255
    12b8:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
    12bc:	c8 01       	movw	r24, r16
    12be:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>

DigitalIO RC2_OUT1 = DigitalIO(41, DigitalIO::OUT, "OFF", "ON");
    12c2:	64 e6       	ldi	r22, 0x64	; 100
    12c4:	72 e0       	ldi	r23, 0x02	; 2
    12c6:	ce 01       	movw	r24, r28
    12c8:	8f 59       	subi	r24, 0x9F	; 159
    12ca:	9f 4f       	sbci	r25, 0xFF	; 255
    12cc:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    12d0:	67 e6       	ldi	r22, 0x67	; 103
    12d2:	72 e0       	ldi	r23, 0x02	; 2
    12d4:	ce 01       	movw	r24, r28
    12d6:	89 59       	subi	r24, 0x99	; 153
    12d8:	9f 4f       	sbci	r25, 0xFF	; 255
    12da:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    12de:	04 5f       	subi	r16, 0xF4	; 244
    12e0:	1f 4f       	sbci	r17, 0xFF	; 255
    12e2:	9e 01       	movw	r18, r28
    12e4:	29 59       	subi	r18, 0x99	; 153
    12e6:	3f 4f       	sbci	r19, 0xFF	; 255
    12e8:	41 e0       	ldi	r20, 0x01	; 1
    12ea:	69 e2       	ldi	r22, 0x29	; 41
    12ec:	70 e0       	ldi	r23, 0x00	; 0
    12ee:	87 e3       	ldi	r24, 0x37	; 55
    12f0:	99 e0       	ldi	r25, 0x09	; 9
    12f2:	ef dc       	rcall	.-1570   	; 0xcd2 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
    12f4:	ce 01       	movw	r24, r28
    12f6:	89 59       	subi	r24, 0x99	; 153
    12f8:	9f 4f       	sbci	r25, 0xFF	; 255
    12fa:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
    12fe:	c8 01       	movw	r24, r16
    1300:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
DigitalIO RC2_OUT2 = DigitalIO(40 , DigitalIO::OUT, "OFF", "ON");
    1304:	64 e6       	ldi	r22, 0x64	; 100
    1306:	72 e0       	ldi	r23, 0x02	; 2
    1308:	ce 01       	movw	r24, r28
    130a:	83 59       	subi	r24, 0x93	; 147
    130c:	9f 4f       	sbci	r25, 0xFF	; 255
    130e:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    1312:	67 e6       	ldi	r22, 0x67	; 103
    1314:	72 e0       	ldi	r23, 0x02	; 2
    1316:	ce 01       	movw	r24, r28
    1318:	8d 58       	subi	r24, 0x8D	; 141
    131a:	9f 4f       	sbci	r25, 0xFF	; 255
    131c:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    1320:	04 5f       	subi	r16, 0xF4	; 244
    1322:	1f 4f       	sbci	r17, 0xFF	; 255
    1324:	9e 01       	movw	r18, r28
    1326:	2d 58       	subi	r18, 0x8D	; 141
    1328:	3f 4f       	sbci	r19, 0xFF	; 255
    132a:	41 e0       	ldi	r20, 0x01	; 1
    132c:	68 e2       	ldi	r22, 0x28	; 40
    132e:	70 e0       	ldi	r23, 0x00	; 0
    1330:	86 e2       	ldi	r24, 0x26	; 38
    1332:	99 e0       	ldi	r25, 0x09	; 9
    1334:	ce dc       	rcall	.-1636   	; 0xcd2 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
    1336:	ce 01       	movw	r24, r28
    1338:	8d 58       	subi	r24, 0x8D	; 141
    133a:	9f 4f       	sbci	r25, 0xFF	; 255
    133c:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
    1340:	c8 01       	movw	r24, r16
    1342:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
DigitalIO RC2_OUT3 = DigitalIO(39 , DigitalIO::OUT, "OFF", "ON");
    1346:	64 e6       	ldi	r22, 0x64	; 100
    1348:	72 e0       	ldi	r23, 0x02	; 2
    134a:	ce 01       	movw	r24, r28
    134c:	87 58       	subi	r24, 0x87	; 135
    134e:	9f 4f       	sbci	r25, 0xFF	; 255
    1350:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    1354:	67 e6       	ldi	r22, 0x67	; 103
    1356:	72 e0       	ldi	r23, 0x02	; 2
    1358:	ce 01       	movw	r24, r28
    135a:	81 58       	subi	r24, 0x81	; 129
    135c:	9f 4f       	sbci	r25, 0xFF	; 255
    135e:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    1362:	04 5f       	subi	r16, 0xF4	; 244
    1364:	1f 4f       	sbci	r17, 0xFF	; 255
    1366:	9e 01       	movw	r18, r28
    1368:	21 58       	subi	r18, 0x81	; 129
    136a:	3f 4f       	sbci	r19, 0xFF	; 255
    136c:	41 e0       	ldi	r20, 0x01	; 1
    136e:	67 e2       	ldi	r22, 0x27	; 39
    1370:	70 e0       	ldi	r23, 0x00	; 0
    1372:	85 e1       	ldi	r24, 0x15	; 21
    1374:	99 e0       	ldi	r25, 0x09	; 9
    1376:	ad dc       	rcall	.-1702   	; 0xcd2 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
    1378:	ce 01       	movw	r24, r28
    137a:	81 58       	subi	r24, 0x81	; 129
    137c:	9f 4f       	sbci	r25, 0xFF	; 255
    137e:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
    1382:	c8 01       	movw	r24, r16
    1384:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
DigitalIO RC2_OUT4 = DigitalIO(38 , DigitalIO::OUT, "OFF", "ON");
    1388:	64 e6       	ldi	r22, 0x64	; 100
    138a:	72 e0       	ldi	r23, 0x02	; 2
    138c:	ce 01       	movw	r24, r28
    138e:	8b 57       	subi	r24, 0x7B	; 123
    1390:	9f 4f       	sbci	r25, 0xFF	; 255
    1392:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    1396:	67 e6       	ldi	r22, 0x67	; 103
    1398:	72 e0       	ldi	r23, 0x02	; 2
    139a:	ce 01       	movw	r24, r28
    139c:	85 57       	subi	r24, 0x75	; 117
    139e:	9f 4f       	sbci	r25, 0xFF	; 255
    13a0:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    13a4:	04 5f       	subi	r16, 0xF4	; 244
    13a6:	1f 4f       	sbci	r17, 0xFF	; 255
    13a8:	9e 01       	movw	r18, r28
    13aa:	25 57       	subi	r18, 0x75	; 117
    13ac:	3f 4f       	sbci	r19, 0xFF	; 255
    13ae:	41 e0       	ldi	r20, 0x01	; 1
    13b0:	66 e2       	ldi	r22, 0x26	; 38
    13b2:	70 e0       	ldi	r23, 0x00	; 0
    13b4:	84 e0       	ldi	r24, 0x04	; 4
    13b6:	99 e0       	ldi	r25, 0x09	; 9
    13b8:	8c dc       	rcall	.-1768   	; 0xcd2 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
    13ba:	ce 01       	movw	r24, r28
    13bc:	85 57       	subi	r24, 0x75	; 117
    13be:	9f 4f       	sbci	r25, 0xFF	; 255
    13c0:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
    13c4:	c8 01       	movw	r24, r16
    13c6:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
DigitalIO RC2_OUT5 = DigitalIO(37 , DigitalIO::OUT, "OFF", "ON");
    13ca:	64 e6       	ldi	r22, 0x64	; 100
    13cc:	72 e0       	ldi	r23, 0x02	; 2
    13ce:	ce 01       	movw	r24, r28
    13d0:	8f 56       	subi	r24, 0x6F	; 111
    13d2:	9f 4f       	sbci	r25, 0xFF	; 255
    13d4:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    13d8:	67 e6       	ldi	r22, 0x67	; 103
    13da:	72 e0       	ldi	r23, 0x02	; 2
    13dc:	ce 01       	movw	r24, r28
    13de:	89 56       	subi	r24, 0x69	; 105
    13e0:	9f 4f       	sbci	r25, 0xFF	; 255
    13e2:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    13e6:	04 5f       	subi	r16, 0xF4	; 244
    13e8:	1f 4f       	sbci	r17, 0xFF	; 255
    13ea:	9e 01       	movw	r18, r28
    13ec:	29 56       	subi	r18, 0x69	; 105
    13ee:	3f 4f       	sbci	r19, 0xFF	; 255
    13f0:	41 e0       	ldi	r20, 0x01	; 1
    13f2:	65 e2       	ldi	r22, 0x25	; 37
    13f4:	70 e0       	ldi	r23, 0x00	; 0
    13f6:	83 ef       	ldi	r24, 0xF3	; 243
    13f8:	98 e0       	ldi	r25, 0x08	; 8
    13fa:	6b dc       	rcall	.-1834   	; 0xcd2 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
    13fc:	ce 01       	movw	r24, r28
    13fe:	89 56       	subi	r24, 0x69	; 105
    1400:	9f 4f       	sbci	r25, 0xFF	; 255
    1402:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
    1406:	c8 01       	movw	r24, r16
    1408:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
DigitalIO RC2_OUT6 = DigitalIO(36 , DigitalIO::OUT, "OFF", "ON");
    140c:	64 e6       	ldi	r22, 0x64	; 100
    140e:	72 e0       	ldi	r23, 0x02	; 2
    1410:	ce 01       	movw	r24, r28
    1412:	83 56       	subi	r24, 0x63	; 99
    1414:	9f 4f       	sbci	r25, 0xFF	; 255
    1416:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    141a:	67 e6       	ldi	r22, 0x67	; 103
    141c:	72 e0       	ldi	r23, 0x02	; 2
    141e:	ce 01       	movw	r24, r28
    1420:	8d 55       	subi	r24, 0x5D	; 93
    1422:	9f 4f       	sbci	r25, 0xFF	; 255
    1424:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    1428:	04 5f       	subi	r16, 0xF4	; 244
    142a:	1f 4f       	sbci	r17, 0xFF	; 255
    142c:	9e 01       	movw	r18, r28
    142e:	2d 55       	subi	r18, 0x5D	; 93
    1430:	3f 4f       	sbci	r19, 0xFF	; 255
    1432:	41 e0       	ldi	r20, 0x01	; 1
    1434:	64 e2       	ldi	r22, 0x24	; 36
    1436:	70 e0       	ldi	r23, 0x00	; 0
    1438:	82 ee       	ldi	r24, 0xE2	; 226
    143a:	98 e0       	ldi	r25, 0x08	; 8
    143c:	4a dc       	rcall	.-1900   	; 0xcd2 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
    143e:	ce 01       	movw	r24, r28
    1440:	8d 55       	subi	r24, 0x5D	; 93
    1442:	9f 4f       	sbci	r25, 0xFF	; 255
    1444:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
    1448:	c8 01       	movw	r24, r16
    144a:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
DigitalIO RC2_OUT7 = DigitalIO(35 , DigitalIO::OUT, "OFF", "ON");
    144e:	64 e6       	ldi	r22, 0x64	; 100
    1450:	72 e0       	ldi	r23, 0x02	; 2
    1452:	ce 01       	movw	r24, r28
    1454:	87 55       	subi	r24, 0x57	; 87
    1456:	9f 4f       	sbci	r25, 0xFF	; 255
    1458:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    145c:	67 e6       	ldi	r22, 0x67	; 103
    145e:	72 e0       	ldi	r23, 0x02	; 2
    1460:	ce 01       	movw	r24, r28
    1462:	81 55       	subi	r24, 0x51	; 81
    1464:	9f 4f       	sbci	r25, 0xFF	; 255
    1466:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    146a:	04 5f       	subi	r16, 0xF4	; 244
    146c:	1f 4f       	sbci	r17, 0xFF	; 255
    146e:	9e 01       	movw	r18, r28
    1470:	21 55       	subi	r18, 0x51	; 81
    1472:	3f 4f       	sbci	r19, 0xFF	; 255
    1474:	41 e0       	ldi	r20, 0x01	; 1
    1476:	63 e2       	ldi	r22, 0x23	; 35
    1478:	70 e0       	ldi	r23, 0x00	; 0
    147a:	81 ed       	ldi	r24, 0xD1	; 209
    147c:	98 e0       	ldi	r25, 0x08	; 8
    147e:	29 dc       	rcall	.-1966   	; 0xcd2 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
    1480:	ce 01       	movw	r24, r28
    1482:	81 55       	subi	r24, 0x51	; 81
    1484:	9f 4f       	sbci	r25, 0xFF	; 255
    1486:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
    148a:	c8 01       	movw	r24, r16
    148c:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
DigitalIO RC2_OUT8 = DigitalIO(35 , DigitalIO::OUT, "OFF", "ON");
    1490:	64 e6       	ldi	r22, 0x64	; 100
    1492:	72 e0       	ldi	r23, 0x02	; 2
    1494:	ce 01       	movw	r24, r28
    1496:	8b 54       	subi	r24, 0x4B	; 75
    1498:	9f 4f       	sbci	r25, 0xFF	; 255
    149a:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    149e:	67 e6       	ldi	r22, 0x67	; 103
    14a0:	72 e0       	ldi	r23, 0x02	; 2
    14a2:	ce 01       	movw	r24, r28
    14a4:	85 54       	subi	r24, 0x45	; 69
    14a6:	9f 4f       	sbci	r25, 0xFF	; 255
    14a8:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    14ac:	04 5f       	subi	r16, 0xF4	; 244
    14ae:	1f 4f       	sbci	r17, 0xFF	; 255
    14b0:	9e 01       	movw	r18, r28
    14b2:	25 54       	subi	r18, 0x45	; 69
    14b4:	3f 4f       	sbci	r19, 0xFF	; 255
    14b6:	41 e0       	ldi	r20, 0x01	; 1
    14b8:	63 e2       	ldi	r22, 0x23	; 35
    14ba:	70 e0       	ldi	r23, 0x00	; 0
    14bc:	80 ec       	ldi	r24, 0xC0	; 192
    14be:	98 e0       	ldi	r25, 0x08	; 8
    14c0:	08 dc       	rcall	.-2032   	; 0xcd2 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
    14c2:	ce 01       	movw	r24, r28
    14c4:	85 54       	subi	r24, 0x45	; 69
    14c6:	9f 4f       	sbci	r25, 0xFF	; 255
    14c8:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
    14cc:	c8 01       	movw	r24, r16
    14ce:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>

/**************************
*	Analogs In
**************************/
AnalogIn ANIN_A0 = AnalogIn(A0, 5.0, 500, AnalogIn::TimeMedian);
    14d2:	68 94       	set
    14d4:	cc 24       	eor	r12, r12
    14d6:	c1 f8       	bld	r12, 1
    14d8:	14 ef       	ldi	r17, 0xF4	; 244
    14da:	e1 2e       	mov	r14, r17
    14dc:	ff 24       	eor	r15, r15
    14de:	f3 94       	inc	r15
    14e0:	00 e0       	ldi	r16, 0x00	; 0
    14e2:	10 e0       	ldi	r17, 0x00	; 0
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	40 ea       	ldi	r20, 0xA0	; 160
    14ea:	50 e4       	ldi	r21, 0x40	; 64
    14ec:	66 e3       	ldi	r22, 0x36	; 54
    14ee:	70 e0       	ldi	r23, 0x00	; 0
    14f0:	80 ea       	ldi	r24, 0xA0	; 160
    14f2:	98 e0       	ldi	r25, 0x08	; 8
    14f4:	48 d9       	rcall	.-3440   	; 0x786 <_ZN8AnalogInC1EifmNS_10filterTypeE>
AnalogIn ANIN_A1 = AnalogIn(A1, 5.0, 500, AnalogIn::TimeMedian);
    14f6:	20 e0       	ldi	r18, 0x00	; 0
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	40 ea       	ldi	r20, 0xA0	; 160
    14fc:	50 e4       	ldi	r21, 0x40	; 64
    14fe:	67 e3       	ldi	r22, 0x37	; 55
    1500:	70 e0       	ldi	r23, 0x00	; 0
    1502:	80 e8       	ldi	r24, 0x80	; 128
    1504:	98 e0       	ldi	r25, 0x08	; 8
    1506:	3f d9       	rcall	.-3458   	; 0x786 <_ZN8AnalogInC1EifmNS_10filterTypeE>
AnalogIn ANIN_A2 = AnalogIn(A2, 5.0, 500, AnalogIn::TimeMedian);
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	40 ea       	ldi	r20, 0xA0	; 160
    150e:	50 e4       	ldi	r21, 0x40	; 64
    1510:	68 e3       	ldi	r22, 0x38	; 56
    1512:	70 e0       	ldi	r23, 0x00	; 0
    1514:	80 e6       	ldi	r24, 0x60	; 96
    1516:	98 e0       	ldi	r25, 0x08	; 8
    1518:	36 d9       	rcall	.-3476   	; 0x786 <_ZN8AnalogInC1EifmNS_10filterTypeE>
AnalogIn ANIN_A3 = AnalogIn(A3, 5.0, 500, AnalogIn::TimeMedian);
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	40 ea       	ldi	r20, 0xA0	; 160
    1520:	50 e4       	ldi	r21, 0x40	; 64
    1522:	69 e3       	ldi	r22, 0x39	; 57
    1524:	70 e0       	ldi	r23, 0x00	; 0
    1526:	80 e4       	ldi	r24, 0x40	; 64
    1528:	98 e0       	ldi	r25, 0x08	; 8
    152a:	2d d9       	rcall	.-3494   	; 0x786 <_ZN8AnalogInC1EifmNS_10filterTypeE>
AnalogIn ANIN_A4 = AnalogIn(A4, 5.0, 500, AnalogIn::TimeMedian);
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	40 ea       	ldi	r20, 0xA0	; 160
    1532:	50 e4       	ldi	r21, 0x40	; 64
    1534:	6a e3       	ldi	r22, 0x3A	; 58
    1536:	70 e0       	ldi	r23, 0x00	; 0
    1538:	80 e2       	ldi	r24, 0x20	; 32
    153a:	98 e0       	ldi	r25, 0x08	; 8
    153c:	24 d9       	rcall	.-3512   	; 0x786 <_ZN8AnalogInC1EifmNS_10filterTypeE>
AnalogIn ANIN_A5 = AnalogIn(A5, 5.0, 500, AnalogIn::TimeMedian);
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	40 ea       	ldi	r20, 0xA0	; 160
    1544:	50 e4       	ldi	r21, 0x40	; 64
    1546:	6b e3       	ldi	r22, 0x3B	; 59
    1548:	70 e0       	ldi	r23, 0x00	; 0
    154a:	80 e0       	ldi	r24, 0x00	; 0
    154c:	98 e0       	ldi	r25, 0x08	; 8
    154e:	1b d9       	rcall	.-3530   	; 0x786 <_ZN8AnalogInC1EifmNS_10filterTypeE>
AnalogIn ANIN_A6 = AnalogIn(A6, 5.0, 500, AnalogIn::TimeMedian);
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	40 ea       	ldi	r20, 0xA0	; 160
    1556:	50 e4       	ldi	r21, 0x40	; 64
    1558:	6c e3       	ldi	r22, 0x3C	; 60
    155a:	70 e0       	ldi	r23, 0x00	; 0
    155c:	80 ee       	ldi	r24, 0xE0	; 224
    155e:	97 e0       	ldi	r25, 0x07	; 7
    1560:	12 d9       	rcall	.-3548   	; 0x786 <_ZN8AnalogInC1EifmNS_10filterTypeE>
AnalogIn ANIN_A7 = AnalogIn(A7, 5.0, 500, AnalogIn::TimeMedian);
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	40 ea       	ldi	r20, 0xA0	; 160
    1568:	50 e4       	ldi	r21, 0x40	; 64
    156a:	6d e3       	ldi	r22, 0x3D	; 61
    156c:	70 e0       	ldi	r23, 0x00	; 0
    156e:	80 ec       	ldi	r24, 0xC0	; 192
    1570:	97 e0       	ldi	r25, 0x07	; 7
    1572:	09 d9       	rcall	.-3566   	; 0x786 <_ZN8AnalogInC1EifmNS_10filterTypeE>
AnalogIn ANIN_A8 = AnalogIn(A8, 5.0, 500, AnalogIn::TimeMedian);
    1574:	20 e0       	ldi	r18, 0x00	; 0
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	40 ea       	ldi	r20, 0xA0	; 160
    157a:	50 e4       	ldi	r21, 0x40	; 64
    157c:	6e e3       	ldi	r22, 0x3E	; 62
    157e:	70 e0       	ldi	r23, 0x00	; 0
    1580:	80 ea       	ldi	r24, 0xA0	; 160
    1582:	97 e0       	ldi	r25, 0x07	; 7
    1584:	00 d9       	rcall	.-3584   	; 0x786 <_ZN8AnalogInC1EifmNS_10filterTypeE>
AnalogIn ANIN_A9 = AnalogIn(A9, 5.0, 500, AnalogIn::TimeMedian);
    1586:	20 e0       	ldi	r18, 0x00	; 0
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	40 ea       	ldi	r20, 0xA0	; 160
    158c:	50 e4       	ldi	r21, 0x40	; 64
    158e:	6f e3       	ldi	r22, 0x3F	; 63
    1590:	70 e0       	ldi	r23, 0x00	; 0
    1592:	80 e8       	ldi	r24, 0x80	; 128
    1594:	97 e0       	ldi	r25, 0x07	; 7
    1596:	f7 d8       	rcall	.-3602   	; 0x786 <_ZN8AnalogInC1EifmNS_10filterTypeE>
AnalogIn ANIN_A10 = AnalogIn(A10, 5.0, 500, AnalogIn::TimeMedian);
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	40 ea       	ldi	r20, 0xA0	; 160
    159e:	50 e4       	ldi	r21, 0x40	; 64
    15a0:	60 e4       	ldi	r22, 0x40	; 64
    15a2:	70 e0       	ldi	r23, 0x00	; 0
    15a4:	80 e6       	ldi	r24, 0x60	; 96
    15a6:	97 e0       	ldi	r25, 0x07	; 7
    15a8:	ee d8       	rcall	.-3620   	; 0x786 <_ZN8AnalogInC1EifmNS_10filterTypeE>
AnalogIn ANIN_A11 = AnalogIn(A11, 5.0, 500, AnalogIn::TimeMedian);
    15aa:	20 e0       	ldi	r18, 0x00	; 0
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	40 ea       	ldi	r20, 0xA0	; 160
    15b0:	50 e4       	ldi	r21, 0x40	; 64
    15b2:	61 e4       	ldi	r22, 0x41	; 65
    15b4:	70 e0       	ldi	r23, 0x00	; 0
    15b6:	80 e4       	ldi	r24, 0x40	; 64
    15b8:	97 e0       	ldi	r25, 0x07	; 7
    15ba:	e5 d8       	rcall	.-3638   	; 0x786 <_ZN8AnalogInC1EifmNS_10filterTypeE>
AnalogIn ANIN_A12 = AnalogIn(A12, 5.0, 500, AnalogIn::TimeMedian);
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	40 ea       	ldi	r20, 0xA0	; 160
    15c2:	50 e4       	ldi	r21, 0x40	; 64
    15c4:	62 e4       	ldi	r22, 0x42	; 66
    15c6:	70 e0       	ldi	r23, 0x00	; 0
    15c8:	80 e2       	ldi	r24, 0x20	; 32
    15ca:	97 e0       	ldi	r25, 0x07	; 7
    15cc:	dc d8       	rcall	.-3656   	; 0x786 <_ZN8AnalogInC1EifmNS_10filterTypeE>
AnalogIn ANIN_A13 = AnalogIn(A13, 5.0, 500, AnalogIn::TimeMedian);
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	40 ea       	ldi	r20, 0xA0	; 160
    15d4:	50 e4       	ldi	r21, 0x40	; 64
    15d6:	63 e4       	ldi	r22, 0x43	; 67
    15d8:	70 e0       	ldi	r23, 0x00	; 0
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	97 e0       	ldi	r25, 0x07	; 7
    15de:	d3 d8       	rcall	.-3674   	; 0x786 <_ZN8AnalogInC1EifmNS_10filterTypeE>
AnalogIn ANIN_A14 = AnalogIn(A14, 5.0, 500, AnalogIn::TimeMedian);
    15e0:	20 e0       	ldi	r18, 0x00	; 0
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	40 ea       	ldi	r20, 0xA0	; 160
    15e6:	50 e4       	ldi	r21, 0x40	; 64
    15e8:	64 e4       	ldi	r22, 0x44	; 68
    15ea:	70 e0       	ldi	r23, 0x00	; 0
    15ec:	80 ee       	ldi	r24, 0xE0	; 224
    15ee:	96 e0       	ldi	r25, 0x06	; 6
    15f0:	ca d8       	rcall	.-3692   	; 0x786 <_ZN8AnalogInC1EifmNS_10filterTypeE>
/**************************
*	Wheatstone Bridge
**************************/
const float WB_R2C_X[36] = {80.31, 84.27, 88.22, 92.16, 96.09, 100, 103.9, 107.79, 111.67, 115.54, 119.4, 123.24, 127.08, 130.9, 134.71, 138.51, 142.29, 146.07, 149.83, 153.58, 157.33, 161.05, 164.77, 168.48, 172.17, 175.86, 179.53, 183.19, 186.84, 190.47, 194.1, 197.71, 201.31, 204.9, 208.48, 212.05};
const float WB_R2C_Z[36] = {-50, -40, -30, -20, -10, 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300};
const LUT1D RTDLUT = LUT1D(36, WB_R2C_X, WB_R2C_Z);
    15f2:	24 ea       	ldi	r18, 0xA4	; 164
    15f4:	32 e0       	ldi	r19, 0x02	; 2
    15f6:	44 e3       	ldi	r20, 0x34	; 52
    15f8:	53 e0       	ldi	r21, 0x03	; 3
    15fa:	64 e2       	ldi	r22, 0x24	; 36
    15fc:	70 e0       	ldi	r23, 0x00	; 0
    15fe:	8a ed       	ldi	r24, 0xDA	; 218
    1600:	96 e0       	ldi	r25, 0x06	; 6
    1602:	0e 94 23 22 	call	0x4446	; 0x4446 <_ZN5LUT1DC1EiPKfS1_>

/**************************
*	Main Screen
**************************/
LiquidCrystal_I2C MAIN_LCD( MAIN_LCD_I2C_ADDR, En_pin, Rw_pin, Rs_pin, D4_pin, D5_pin, D6_pin, D7_pin);
    1606:	0f 2e       	mov	r0, r31
    1608:	f7 e0       	ldi	r31, 0x07	; 7
    160a:	8f 2e       	mov	r8, r31
    160c:	f0 2d       	mov	r31, r0
    160e:	0f 2e       	mov	r0, r31
    1610:	f6 e0       	ldi	r31, 0x06	; 6
    1612:	af 2e       	mov	r10, r31
    1614:	f0 2d       	mov	r31, r0
    1616:	0f 2e       	mov	r0, r31
    1618:	f5 e0       	ldi	r31, 0x05	; 5
    161a:	cf 2e       	mov	r12, r31
    161c:	f0 2d       	mov	r31, r0
    161e:	68 94       	set
    1620:	ee 24       	eor	r14, r14
    1622:	e2 f8       	bld	r14, 2
    1624:	00 e0       	ldi	r16, 0x00	; 0
    1626:	21 e0       	ldi	r18, 0x01	; 1
    1628:	42 e0       	ldi	r20, 0x02	; 2
    162a:	67 e2       	ldi	r22, 0x27	; 39
    162c:	82 ec       	ldi	r24, 0xC2	; 194
    162e:	96 e0       	ldi	r25, 0x06	; 6
    1630:	0e 94 6a 27 	call	0x4ed4	; 0x4ed4 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh>
ClickEncoderWithEvents *MAIN_ENC = new ClickEncoderWithEvents( MAIN_ENC_A, MAIN_ENC_B, MAIN_ENC_SW, MAIN_ENC_DEG_PER_NOTCH );
    1634:	8c e2       	ldi	r24, 0x2C	; 44
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    163c:	7c 01       	movw	r14, r24
    163e:	04 e0       	ldi	r16, 0x04	; 4
    1640:	28 e1       	ldi	r18, 0x18	; 24
    1642:	46 e1       	ldi	r20, 0x16	; 22
    1644:	67 e1       	ldi	r22, 0x17	; 23
    1646:	04 dd       	rcall	.-1528   	; 0x1050 <_ZN22ClickEncoderWithEventsC1Ehhhh>
    1648:	f0 92 c1 06 	sts	0x06C1, r15
    164c:	e0 92 c0 06 	sts	0x06C0, r14

/**************************
*	Hot Liquor Tank
**************************/
LiquidCrystal_I2C HLT_LCD( HLT_LCD_I2C_ADDR, En_pin, Rw_pin, Rs_pin, D4_pin, D5_pin, D6_pin, D7_pin);
    1650:	68 94       	set
    1652:	ee 24       	eor	r14, r14
    1654:	e2 f8       	bld	r14, 2
    1656:	00 e0       	ldi	r16, 0x00	; 0
    1658:	21 e0       	ldi	r18, 0x01	; 1
    165a:	42 e0       	ldi	r20, 0x02	; 2
    165c:	66 e2       	ldi	r22, 0x26	; 38
    165e:	88 ea       	ldi	r24, 0xA8	; 168
    1660:	96 e0       	ldi	r25, 0x06	; 6
    1662:	0e 94 6a 27 	call	0x4ed4	; 0x4ed4 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh>
ClickEncoderWithEvents *HLT_ENC = new ClickEncoderWithEvents( HLT_ENC_A, HLT_ENC_B, HLT_ENC_SW, HLT_ENC_DEG_PER_NOTCH );
    1666:	8c e2       	ldi	r24, 0x2C	; 44
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    166e:	7c 01       	movw	r14, r24
    1670:	04 e0       	ldi	r16, 0x04	; 4
    1672:	2b e1       	ldi	r18, 0x1B	; 27
    1674:	49 e1       	ldi	r20, 0x19	; 25
    1676:	6a e1       	ldi	r22, 0x1A	; 26
    1678:	eb dc       	rcall	.-1578   	; 0x1050 <_ZN22ClickEncoderWithEventsC1Ehhhh>
    167a:	f0 92 a7 06 	sts	0x06A7, r15
    167e:	e0 92 a6 06 	sts	0x06A6, r14
//DigitalIO * HLT_SOL1 = new DigitalIO( HLT_SOLENOID_1, DigitalIO::OUT, "OFF","ON" );
//DigitalIO * HLT_SOL2 = new DigitalIO( HLT_SOLENOID_2, DigitalIO::OUT, "OFF","ON" );
WheatstoneBridge *HLT_RTD_BP = new WheatstoneBridge("HLT_RTD_BP", HLT_RTD_Vs_AN, HLT_RTD_BP_AN, RTDLUT, WB_R2, WB_R3, WB_R4, WB_OpAmpGn, WB_Rs);
    1682:	6b e6       	ldi	r22, 0x6B	; 107
    1684:	72 e0       	ldi	r23, 0x02	; 2
    1686:	ce 01       	movw	r24, r28
    1688:	8f 53       	subi	r24, 0x3F	; 63
    168a:	9f 4f       	sbci	r25, 0xFF	; 255
    168c:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    1690:	86 e0       	ldi	r24, 0x06	; 6
    1692:	ea ed       	ldi	r30, 0xDA	; 218
    1694:	f6 e0       	ldi	r31, 0x06	; 6
    1696:	de 01       	movw	r26, r28
    1698:	a9 53       	subi	r26, 0x39	; 57
    169a:	bf 4f       	sbci	r27, 0xFF	; 255
    169c:	01 90       	ld	r0, Z+
    169e:	0d 92       	st	X+, r0
    16a0:	8a 95       	dec	r24
    16a2:	e1 f7       	brne	.-8      	; 0x169c <_GLOBAL__sub_I__Z15serviceEncodersv+0x5fa>
    16a4:	88 e3       	ldi	r24, 0x38	; 56
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    16ac:	3c 01       	movw	r6, r24
    16ae:	80 e4       	ldi	r24, 0x40	; 64
    16b0:	8f 93       	push	r24
    16b2:	80 ea       	ldi	r24, 0xA0	; 160
    16b4:	8f 93       	push	r24
    16b6:	1f 92       	push	r1
    16b8:	1f 92       	push	r1
    16ba:	82 e4       	ldi	r24, 0x42	; 66
    16bc:	8f 93       	push	r24
    16be:	9c e4       	ldi	r25, 0x4C	; 76
    16c0:	9f 93       	push	r25
    16c2:	1f 92       	push	r1
    16c4:	1f 92       	push	r1
    16c6:	8f 93       	push	r24
    16c8:	88 ec       	ldi	r24, 0xC8	; 200
    16ca:	8f 93       	push	r24
    16cc:	1f 92       	push	r1
    16ce:	1f 92       	push	r1
    16d0:	84 e4       	ldi	r24, 0x44	; 68
    16d2:	8f 93       	push	r24
    16d4:	8a ef       	ldi	r24, 0xFA	; 250
    16d6:	8f 93       	push	r24
    16d8:	1f 92       	push	r1
    16da:	1f 92       	push	r1
    16dc:	0f 2e       	mov	r0, r31
    16de:	81 2c       	mov	r8, r1
    16e0:	91 2c       	mov	r9, r1
    16e2:	fa ef       	ldi	r31, 0xFA	; 250
    16e4:	af 2e       	mov	r10, r31
    16e6:	f4 e4       	ldi	r31, 0x44	; 68
    16e8:	bf 2e       	mov	r11, r31
    16ea:	f0 2d       	mov	r31, r0
    16ec:	c9 53       	subi	r28, 0x39	; 57
    16ee:	df 4f       	sbci	r29, 0xFF	; 255
    16f0:	c8 80       	ld	r12, Y
    16f2:	c7 5c       	subi	r28, 0xC7	; 199
    16f4:	d0 40       	sbci	r29, 0x00	; 0
    16f6:	c8 53       	subi	r28, 0x38	; 56
    16f8:	df 4f       	sbci	r29, 0xFF	; 255
    16fa:	d8 80       	ld	r13, Y
    16fc:	c8 5c       	subi	r28, 0xC8	; 200
    16fe:	d0 40       	sbci	r29, 0x00	; 0
    1700:	c7 53       	subi	r28, 0x37	; 55
    1702:	df 4f       	sbci	r29, 0xFF	; 255
    1704:	e8 80       	ld	r14, Y
    1706:	c9 5c       	subi	r28, 0xC9	; 201
    1708:	d0 40       	sbci	r29, 0x00	; 0
    170a:	c6 53       	subi	r28, 0x36	; 54
    170c:	df 4f       	sbci	r29, 0xFF	; 255
    170e:	f8 80       	ld	r15, Y
    1710:	ca 5c       	subi	r28, 0xCA	; 202
    1712:	d0 40       	sbci	r29, 0x00	; 0
    1714:	c5 53       	subi	r28, 0x35	; 53
    1716:	df 4f       	sbci	r29, 0xFF	; 255
    1718:	08 81       	ld	r16, Y
    171a:	cb 5c       	subi	r28, 0xCB	; 203
    171c:	d0 40       	sbci	r29, 0x00	; 0
    171e:	c4 53       	subi	r28, 0x34	; 52
    1720:	df 4f       	sbci	r29, 0xFF	; 255
    1722:	18 81       	ld	r17, Y
    1724:	cc 5c       	subi	r28, 0xCC	; 204
    1726:	d0 40       	sbci	r29, 0x00	; 0
    1728:	2a e3       	ldi	r18, 0x3A	; 58
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	46 e3       	ldi	r20, 0x36	; 54
    172e:	50 e0       	ldi	r21, 0x00	; 0
    1730:	be 01       	movw	r22, r28
    1732:	6f 53       	subi	r22, 0x3F	; 63
    1734:	7f 4f       	sbci	r23, 0xFF	; 255
    1736:	c3 01       	movw	r24, r6
    1738:	0e 94 18 23 	call	0x4630	; 0x4630 <_ZN16WheatstoneBridgeC1E6Stringii5LUT1Dfffff>
    173c:	70 92 a5 06 	sts	0x06A5, r7
    1740:	60 92 a4 06 	sts	0x06A4, r6
    1744:	ce 01       	movw	r24, r28
    1746:	8f 53       	subi	r24, 0x3F	; 63
    1748:	9f 4f       	sbci	r25, 0xFF	; 255
    174a:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>


/**************************
*	Mash Lauter Tun
**************************/
LiquidCrystal_I2C MLT_LCD( MLT_LCD_I2C_ADDR, En_pin, Rw_pin, Rs_pin, D4_pin, D5_pin, D6_pin, D7_pin);
    174e:	0f 2e       	mov	r0, r31
    1750:	f7 e0       	ldi	r31, 0x07	; 7
    1752:	8f 2e       	mov	r8, r31
    1754:	f0 2d       	mov	r31, r0
    1756:	0f 2e       	mov	r0, r31
    1758:	f6 e0       	ldi	r31, 0x06	; 6
    175a:	af 2e       	mov	r10, r31
    175c:	f0 2d       	mov	r31, r0
    175e:	0f 2e       	mov	r0, r31
    1760:	f5 e0       	ldi	r31, 0x05	; 5
    1762:	cf 2e       	mov	r12, r31
    1764:	f0 2d       	mov	r31, r0
    1766:	68 94       	set
    1768:	ee 24       	eor	r14, r14
    176a:	e2 f8       	bld	r14, 2
    176c:	00 e0       	ldi	r16, 0x00	; 0
    176e:	21 e0       	ldi	r18, 0x01	; 1
    1770:	42 e0       	ldi	r20, 0x02	; 2
    1772:	65 e2       	ldi	r22, 0x25	; 37
    1774:	8c e8       	ldi	r24, 0x8C	; 140
    1776:	96 e0       	ldi	r25, 0x06	; 6
    1778:	0e 94 6a 27 	call	0x4ed4	; 0x4ed4 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh>
ClickEncoderWithEvents *MLT_ENC = new ClickEncoderWithEvents( MLT_ENC_A, MLT_ENC_B, MLT_ENC_SW, MLT_ENC_DEG_PER_NOTCH );
    177c:	8c e2       	ldi	r24, 0x2C	; 44
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    1784:	7c 01       	movw	r14, r24
    1786:	04 e0       	ldi	r16, 0x04	; 4
    1788:	2e e1       	ldi	r18, 0x1E	; 30
    178a:	4c e1       	ldi	r20, 0x1C	; 28
    178c:	6d e1       	ldi	r22, 0x1D	; 29
    178e:	60 dc       	rcall	.-1856   	; 0x1050 <_ZN22ClickEncoderWithEventsC1Ehhhh>
    1790:	f0 92 8b 06 	sts	0x068B, r15
    1794:	e0 92 8a 06 	sts	0x068A, r14


/**************************
*	Boil Kettle
**************************/
LiquidCrystal_I2C BK_LCD( BK_LCD_I2C_ADDR, En_pin, Rw_pin, Rs_pin, D4_pin, D5_pin, D6_pin, D7_pin);
    1798:	68 94       	set
    179a:	ee 24       	eor	r14, r14
    179c:	e2 f8       	bld	r14, 2
    179e:	00 e0       	ldi	r16, 0x00	; 0
    17a0:	21 e0       	ldi	r18, 0x01	; 1
    17a2:	42 e0       	ldi	r20, 0x02	; 2
    17a4:	63 e2       	ldi	r22, 0x23	; 35
    17a6:	82 e7       	ldi	r24, 0x72	; 114
    17a8:	96 e0       	ldi	r25, 0x06	; 6
    17aa:	0e 94 6a 27 	call	0x4ed4	; 0x4ed4 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh>
ClickEncoderWithEvents *BK_ENC = new ClickEncoderWithEvents( BK_ENC_A, BK_ENC_B, BK_ENC_SW, BK_ENC_DEG_PER_NOTCH );
    17ae:	8c e2       	ldi	r24, 0x2C	; 44
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    17b6:	7c 01       	movw	r14, r24
    17b8:	04 e0       	ldi	r16, 0x04	; 4
    17ba:	21 e2       	ldi	r18, 0x21	; 33
    17bc:	4f e1       	ldi	r20, 0x1F	; 31
    17be:	60 e2       	ldi	r22, 0x20	; 32
    17c0:	47 dc       	rcall	.-1906   	; 0x1050 <_ZN22ClickEncoderWithEventsC1Ehhhh>
    17c2:	f0 92 71 06 	sts	0x0671, r15
    17c6:	e0 92 70 06 	sts	0x0670, r14
    17ca:	0f b6       	in	r0, 0x3f	; 63
    17cc:	f8 94       	cli
    17ce:	de bf       	out	0x3e, r29	; 62
    17d0:	0f be       	out	0x3f, r0	; 63
    17d2:	cd bf       	out	0x3d, r28	; 61
    17d4:	c4 53       	subi	r28, 0x34	; 52
    17d6:	df 4f       	sbci	r29, 0xFF	; 255
    17d8:	0f b6       	in	r0, 0x3f	; 63
    17da:	f8 94       	cli
    17dc:	de bf       	out	0x3e, r29	; 62
    17de:	0f be       	out	0x3f, r0	; 63
    17e0:	cd bf       	out	0x3d, r28	; 61
    17e2:	df 91       	pop	r29
    17e4:	cf 91       	pop	r28
    17e6:	1f 91       	pop	r17
    17e8:	0f 91       	pop	r16
    17ea:	ff 90       	pop	r15
    17ec:	ef 90       	pop	r14
    17ee:	df 90       	pop	r13
    17f0:	cf 90       	pop	r12
    17f2:	bf 90       	pop	r11
    17f4:	af 90       	pop	r10
    17f6:	9f 90       	pop	r9
    17f8:	8f 90       	pop	r8
    17fa:	7f 90       	pop	r7
    17fc:	6f 90       	pop	r6
    17fe:	08 95       	ret

00001800 <_GLOBAL__sub_D__Z15serviceEncodersv>:
AnalogIn ANIN_A9 = AnalogIn(A9, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A10 = AnalogIn(A10, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A11 = AnalogIn(A11, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A12 = AnalogIn(A12, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A13 = AnalogIn(A13, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A14 = AnalogIn(A14, 5.0, 500, AnalogIn::TimeMedian);
    1800:	80 ee       	ldi	r24, 0xE0	; 224
    1802:	96 e0       	ldi	r25, 0x06	; 6
    1804:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN8AnalogInD1Ev>
AnalogIn ANIN_A8 = AnalogIn(A8, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A9 = AnalogIn(A9, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A10 = AnalogIn(A10, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A11 = AnalogIn(A11, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A12 = AnalogIn(A12, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A13 = AnalogIn(A13, 5.0, 500, AnalogIn::TimeMedian);
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	97 e0       	ldi	r25, 0x07	; 7
    180c:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN8AnalogInD1Ev>
AnalogIn ANIN_A7 = AnalogIn(A7, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A8 = AnalogIn(A8, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A9 = AnalogIn(A9, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A10 = AnalogIn(A10, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A11 = AnalogIn(A11, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A12 = AnalogIn(A12, 5.0, 500, AnalogIn::TimeMedian);
    1810:	80 e2       	ldi	r24, 0x20	; 32
    1812:	97 e0       	ldi	r25, 0x07	; 7
    1814:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN8AnalogInD1Ev>
AnalogIn ANIN_A6 = AnalogIn(A6, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A7 = AnalogIn(A7, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A8 = AnalogIn(A8, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A9 = AnalogIn(A9, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A10 = AnalogIn(A10, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A11 = AnalogIn(A11, 5.0, 500, AnalogIn::TimeMedian);
    1818:	80 e4       	ldi	r24, 0x40	; 64
    181a:	97 e0       	ldi	r25, 0x07	; 7
    181c:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN8AnalogInD1Ev>
AnalogIn ANIN_A5 = AnalogIn(A5, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A6 = AnalogIn(A6, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A7 = AnalogIn(A7, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A8 = AnalogIn(A8, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A9 = AnalogIn(A9, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A10 = AnalogIn(A10, 5.0, 500, AnalogIn::TimeMedian);
    1820:	80 e6       	ldi	r24, 0x60	; 96
    1822:	97 e0       	ldi	r25, 0x07	; 7
    1824:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN8AnalogInD1Ev>
AnalogIn ANIN_A4 = AnalogIn(A4, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A5 = AnalogIn(A5, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A6 = AnalogIn(A6, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A7 = AnalogIn(A7, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A8 = AnalogIn(A8, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A9 = AnalogIn(A9, 5.0, 500, AnalogIn::TimeMedian);
    1828:	80 e8       	ldi	r24, 0x80	; 128
    182a:	97 e0       	ldi	r25, 0x07	; 7
    182c:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN8AnalogInD1Ev>
AnalogIn ANIN_A3 = AnalogIn(A3, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A4 = AnalogIn(A4, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A5 = AnalogIn(A5, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A6 = AnalogIn(A6, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A7 = AnalogIn(A7, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A8 = AnalogIn(A8, 5.0, 500, AnalogIn::TimeMedian);
    1830:	80 ea       	ldi	r24, 0xA0	; 160
    1832:	97 e0       	ldi	r25, 0x07	; 7
    1834:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN8AnalogInD1Ev>
AnalogIn ANIN_A2 = AnalogIn(A2, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A3 = AnalogIn(A3, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A4 = AnalogIn(A4, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A5 = AnalogIn(A5, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A6 = AnalogIn(A6, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A7 = AnalogIn(A7, 5.0, 500, AnalogIn::TimeMedian);
    1838:	80 ec       	ldi	r24, 0xC0	; 192
    183a:	97 e0       	ldi	r25, 0x07	; 7
    183c:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN8AnalogInD1Ev>
AnalogIn ANIN_A1 = AnalogIn(A1, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A2 = AnalogIn(A2, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A3 = AnalogIn(A3, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A4 = AnalogIn(A4, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A5 = AnalogIn(A5, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A6 = AnalogIn(A6, 5.0, 500, AnalogIn::TimeMedian);
    1840:	80 ee       	ldi	r24, 0xE0	; 224
    1842:	97 e0       	ldi	r25, 0x07	; 7
    1844:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN8AnalogInD1Ev>
AnalogIn ANIN_A0 = AnalogIn(A0, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A1 = AnalogIn(A1, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A2 = AnalogIn(A2, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A3 = AnalogIn(A3, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A4 = AnalogIn(A4, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A5 = AnalogIn(A5, 5.0, 500, AnalogIn::TimeMedian);
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	98 e0       	ldi	r25, 0x08	; 8
    184c:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN8AnalogInD1Ev>
**************************/
AnalogIn ANIN_A0 = AnalogIn(A0, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A1 = AnalogIn(A1, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A2 = AnalogIn(A2, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A3 = AnalogIn(A3, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A4 = AnalogIn(A4, 5.0, 500, AnalogIn::TimeMedian);
    1850:	80 e2       	ldi	r24, 0x20	; 32
    1852:	98 e0       	ldi	r25, 0x08	; 8
    1854:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN8AnalogInD1Ev>
*	Analogs In
**************************/
AnalogIn ANIN_A0 = AnalogIn(A0, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A1 = AnalogIn(A1, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A2 = AnalogIn(A2, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A3 = AnalogIn(A3, 5.0, 500, AnalogIn::TimeMedian);
    1858:	80 e4       	ldi	r24, 0x40	; 64
    185a:	98 e0       	ldi	r25, 0x08	; 8
    185c:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN8AnalogInD1Ev>
/**************************
*	Analogs In
**************************/
AnalogIn ANIN_A0 = AnalogIn(A0, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A1 = AnalogIn(A1, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A2 = AnalogIn(A2, 5.0, 500, AnalogIn::TimeMedian);
    1860:	80 e6       	ldi	r24, 0x60	; 96
    1862:	98 e0       	ldi	r25, 0x08	; 8
    1864:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN8AnalogInD1Ev>

/**************************
*	Analogs In
**************************/
AnalogIn ANIN_A0 = AnalogIn(A0, 5.0, 500, AnalogIn::TimeMedian);
AnalogIn ANIN_A1 = AnalogIn(A1, 5.0, 500, AnalogIn::TimeMedian);
    1868:	80 e8       	ldi	r24, 0x80	; 128
    186a:	98 e0       	ldi	r25, 0x08	; 8
    186c:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN8AnalogInD1Ev>
DigitalIO RC2_OUT8 = DigitalIO(35 , DigitalIO::OUT, "OFF", "ON");

/**************************
*	Analogs In
**************************/
AnalogIn ANIN_A0 = AnalogIn(A0, 5.0, 500, AnalogIn::TimeMedian);
    1870:	80 ea       	ldi	r24, 0xA0	; 160
    1872:	98 e0       	ldi	r25, 0x08	; 8
    1874:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN8AnalogInD1Ev>
DigitalIO RC2_OUT3 = DigitalIO(39 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT4 = DigitalIO(38 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT5 = DigitalIO(37 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT6 = DigitalIO(36 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT7 = DigitalIO(35 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT8 = DigitalIO(35 , DigitalIO::OUT, "OFF", "ON");
    1878:	80 ec       	ldi	r24, 0xC0	; 192
    187a:	98 e0       	ldi	r25, 0x08	; 8
    187c:	e8 d9       	rcall	.-3120   	; 0xc4e <_ZN9DigitalIOD1Ev>
DigitalIO RC2_OUT2 = DigitalIO(40 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT3 = DigitalIO(39 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT4 = DigitalIO(38 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT5 = DigitalIO(37 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT6 = DigitalIO(36 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT7 = DigitalIO(35 , DigitalIO::OUT, "OFF", "ON");
    187e:	81 ed       	ldi	r24, 0xD1	; 209
    1880:	98 e0       	ldi	r25, 0x08	; 8
    1882:	e5 d9       	rcall	.-3126   	; 0xc4e <_ZN9DigitalIOD1Ev>
DigitalIO RC2_OUT1 = DigitalIO(41, DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT2 = DigitalIO(40 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT3 = DigitalIO(39 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT4 = DigitalIO(38 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT5 = DigitalIO(37 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT6 = DigitalIO(36 , DigitalIO::OUT, "OFF", "ON");
    1884:	82 ee       	ldi	r24, 0xE2	; 226
    1886:	98 e0       	ldi	r25, 0x08	; 8
    1888:	e2 d9       	rcall	.-3132   	; 0xc4e <_ZN9DigitalIOD1Ev>

DigitalIO RC2_OUT1 = DigitalIO(41, DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT2 = DigitalIO(40 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT3 = DigitalIO(39 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT4 = DigitalIO(38 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT5 = DigitalIO(37 , DigitalIO::OUT, "OFF", "ON");
    188a:	83 ef       	ldi	r24, 0xF3	; 243
    188c:	98 e0       	ldi	r25, 0x08	; 8
    188e:	df d9       	rcall	.-3138   	; 0xc4e <_ZN9DigitalIOD1Ev>
DigitalIO RC1_OUT8 = DigitalIO(42 , DigitalIO::OUT, "OFF", "ON");

DigitalIO RC2_OUT1 = DigitalIO(41, DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT2 = DigitalIO(40 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT3 = DigitalIO(39 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT4 = DigitalIO(38 , DigitalIO::OUT, "OFF", "ON");
    1890:	84 e0       	ldi	r24, 0x04	; 4
    1892:	99 e0       	ldi	r25, 0x09	; 9
    1894:	dc d9       	rcall	.-3144   	; 0xc4e <_ZN9DigitalIOD1Ev>
DigitalIO RC1_OUT7 = DigitalIO(43 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT8 = DigitalIO(42 , DigitalIO::OUT, "OFF", "ON");

DigitalIO RC2_OUT1 = DigitalIO(41, DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT2 = DigitalIO(40 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT3 = DigitalIO(39 , DigitalIO::OUT, "OFF", "ON");
    1896:	85 e1       	ldi	r24, 0x15	; 21
    1898:	99 e0       	ldi	r25, 0x09	; 9
    189a:	d9 d9       	rcall	.-3150   	; 0xc4e <_ZN9DigitalIOD1Ev>
DigitalIO RC1_OUT6 = DigitalIO(44 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT7 = DigitalIO(43 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT8 = DigitalIO(42 , DigitalIO::OUT, "OFF", "ON");

DigitalIO RC2_OUT1 = DigitalIO(41, DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT2 = DigitalIO(40 , DigitalIO::OUT, "OFF", "ON");
    189c:	86 e2       	ldi	r24, 0x26	; 38
    189e:	99 e0       	ldi	r25, 0x09	; 9
    18a0:	d6 d9       	rcall	.-3156   	; 0xc4e <_ZN9DigitalIOD1Ev>
DigitalIO RC1_OUT5 = DigitalIO(45 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT6 = DigitalIO(44 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT7 = DigitalIO(43 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT8 = DigitalIO(42 , DigitalIO::OUT, "OFF", "ON");

DigitalIO RC2_OUT1 = DigitalIO(41, DigitalIO::OUT, "OFF", "ON");
    18a2:	87 e3       	ldi	r24, 0x37	; 55
    18a4:	99 e0       	ldi	r25, 0x09	; 9
    18a6:	d3 d9       	rcall	.-3162   	; 0xc4e <_ZN9DigitalIOD1Ev>
DigitalIO RC1_OUT3 = DigitalIO(47 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT4 = DigitalIO(46 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT5 = DigitalIO(45 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT6 = DigitalIO(44 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT7 = DigitalIO(43 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT8 = DigitalIO(42 , DigitalIO::OUT, "OFF", "ON");
    18a8:	88 e4       	ldi	r24, 0x48	; 72
    18aa:	99 e0       	ldi	r25, 0x09	; 9
    18ac:	d0 d9       	rcall	.-3168   	; 0xc4e <_ZN9DigitalIOD1Ev>
DigitalIO RC1_OUT2 = DigitalIO(48 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT3 = DigitalIO(47 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT4 = DigitalIO(46 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT5 = DigitalIO(45 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT6 = DigitalIO(44 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT7 = DigitalIO(43 , DigitalIO::OUT, "OFF", "ON");
    18ae:	89 e5       	ldi	r24, 0x59	; 89
    18b0:	99 e0       	ldi	r25, 0x09	; 9
    18b2:	cd d9       	rcall	.-3174   	; 0xc4e <_ZN9DigitalIOD1Ev>
DigitalIO RC1_OUT1 = DigitalIO(49, DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT2 = DigitalIO(48 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT3 = DigitalIO(47 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT4 = DigitalIO(46 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT5 = DigitalIO(45 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT6 = DigitalIO(44 , DigitalIO::OUT, "OFF", "ON");
    18b4:	8a e6       	ldi	r24, 0x6A	; 106
    18b6:	99 e0       	ldi	r25, 0x09	; 9
    18b8:	ca d9       	rcall	.-3180   	; 0xc4e <_ZN9DigitalIOD1Ev>
**************************/
DigitalIO RC1_OUT1 = DigitalIO(49, DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT2 = DigitalIO(48 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT3 = DigitalIO(47 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT4 = DigitalIO(46 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT5 = DigitalIO(45 , DigitalIO::OUT, "OFF", "ON");
    18ba:	8b e7       	ldi	r24, 0x7B	; 123
    18bc:	99 e0       	ldi	r25, 0x09	; 9
    18be:	c7 d9       	rcall	.-3186   	; 0xc4e <_ZN9DigitalIOD1Ev>
*	Digital IO
**************************/
DigitalIO RC1_OUT1 = DigitalIO(49, DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT2 = DigitalIO(48 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT3 = DigitalIO(47 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT4 = DigitalIO(46 , DigitalIO::OUT, "OFF", "ON");
    18c0:	8c e8       	ldi	r24, 0x8C	; 140
    18c2:	99 e0       	ldi	r25, 0x09	; 9
    18c4:	c4 d9       	rcall	.-3192   	; 0xc4e <_ZN9DigitalIOD1Ev>
/**************************
*	Digital IO
**************************/
DigitalIO RC1_OUT1 = DigitalIO(49, DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT2 = DigitalIO(48 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT3 = DigitalIO(47 , DigitalIO::OUT, "OFF", "ON");
    18c6:	8d e9       	ldi	r24, 0x9D	; 157
    18c8:	99 e0       	ldi	r25, 0x09	; 9
    18ca:	c1 d9       	rcall	.-3198   	; 0xc4e <_ZN9DigitalIOD1Ev>

/**************************
*	Digital IO
**************************/
DigitalIO RC1_OUT1 = DigitalIO(49, DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT2 = DigitalIO(48 , DigitalIO::OUT, "OFF", "ON");
    18cc:	8e ea       	ldi	r24, 0xAE	; 174
    18ce:	99 e0       	ldi	r25, 0x09	; 9
    18d0:	be d9       	rcall	.-3204   	; 0xc4e <_ZN9DigitalIOD1Ev>
}

/**************************
*	Digital IO
**************************/
DigitalIO RC1_OUT1 = DigitalIO(49, DigitalIO::OUT, "OFF", "ON");
    18d2:	8f eb       	ldi	r24, 0xBF	; 191
    18d4:	99 e0       	ldi	r25, 0x09	; 9
    18d6:	bb c9       	rjmp	.-3210   	; 0xc4e <_ZN9DigitalIOD1Ev>
    18d8:	08 95       	ret

000018da <_Z13hardware_initv>:
void hardware_init(){
	
	//--Setup the LCDs-------
	
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.print("Initializing LCDs...");
    18da:	66 e7       	ldi	r22, 0x76	; 118
    18dc:	72 e0       	ldi	r23, 0x02	; 2
    18de:	88 ea       	ldi	r24, 0xA8	; 168
    18e0:	9a e0       	ldi	r25, 0x0A	; 10
    18e2:	0e 94 90 30 	call	0x6120	; 0x6120 <_ZN5Print5printEPKc>
	#endif
	
	MAIN_LCD.setBacklightPin(LCD_BACKLIGHT_PIN,POSITIVE);
    18e6:	40 e0       	ldi	r20, 0x00	; 0
    18e8:	63 e0       	ldi	r22, 0x03	; 3
    18ea:	82 ec       	ldi	r24, 0xC2	; 194
    18ec:	96 e0       	ldi	r25, 0x06	; 6
    18ee:	0e 94 40 27 	call	0x4e80	; 0x4e80 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>
	MAIN_LCD.setBacklight(HIGH);
    18f2:	61 e0       	ldi	r22, 0x01	; 1
    18f4:	82 ec       	ldi	r24, 0xC2	; 194
    18f6:	96 e0       	ldi	r25, 0x06	; 6
    18f8:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <_ZN17LiquidCrystal_I2C12setBacklightEh>
	MAIN_LCD.begin (20,4);
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	44 e0       	ldi	r20, 0x04	; 4
    1900:	64 e1       	ldi	r22, 0x14	; 20
    1902:	82 ec       	ldi	r24, 0xC2	; 194
    1904:	96 e0       	ldi	r25, 0x06	; 6
    1906:	0e 94 37 28 	call	0x506e	; 0x506e <_ZN17LiquidCrystal_I2C5beginEhhh>
	
	HLT_LCD.setBacklightPin(LCD_BACKLIGHT_PIN,POSITIVE);
    190a:	40 e0       	ldi	r20, 0x00	; 0
    190c:	63 e0       	ldi	r22, 0x03	; 3
    190e:	88 ea       	ldi	r24, 0xA8	; 168
    1910:	96 e0       	ldi	r25, 0x06	; 6
    1912:	0e 94 40 27 	call	0x4e80	; 0x4e80 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>
	HLT_LCD.setBacklight(HIGH);
    1916:	61 e0       	ldi	r22, 0x01	; 1
    1918:	88 ea       	ldi	r24, 0xA8	; 168
    191a:	96 e0       	ldi	r25, 0x06	; 6
    191c:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <_ZN17LiquidCrystal_I2C12setBacklightEh>
	HLT_LCD.begin (20,4);
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	44 e0       	ldi	r20, 0x04	; 4
    1924:	64 e1       	ldi	r22, 0x14	; 20
    1926:	88 ea       	ldi	r24, 0xA8	; 168
    1928:	96 e0       	ldi	r25, 0x06	; 6
    192a:	0e 94 37 28 	call	0x506e	; 0x506e <_ZN17LiquidCrystal_I2C5beginEhhh>
	
	MLT_LCD.setBacklightPin(LCD_BACKLIGHT_PIN,POSITIVE);
    192e:	40 e0       	ldi	r20, 0x00	; 0
    1930:	63 e0       	ldi	r22, 0x03	; 3
    1932:	8c e8       	ldi	r24, 0x8C	; 140
    1934:	96 e0       	ldi	r25, 0x06	; 6
    1936:	0e 94 40 27 	call	0x4e80	; 0x4e80 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>
	MLT_LCD.setBacklight(HIGH);
    193a:	61 e0       	ldi	r22, 0x01	; 1
    193c:	8c e8       	ldi	r24, 0x8C	; 140
    193e:	96 e0       	ldi	r25, 0x06	; 6
    1940:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <_ZN17LiquidCrystal_I2C12setBacklightEh>
	MLT_LCD.begin (20,4);
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	44 e0       	ldi	r20, 0x04	; 4
    1948:	64 e1       	ldi	r22, 0x14	; 20
    194a:	8c e8       	ldi	r24, 0x8C	; 140
    194c:	96 e0       	ldi	r25, 0x06	; 6
    194e:	0e 94 37 28 	call	0x506e	; 0x506e <_ZN17LiquidCrystal_I2C5beginEhhh>
	
	BK_LCD.setBacklightPin(LCD_BACKLIGHT_PIN,POSITIVE);
    1952:	40 e0       	ldi	r20, 0x00	; 0
    1954:	63 e0       	ldi	r22, 0x03	; 3
    1956:	82 e7       	ldi	r24, 0x72	; 114
    1958:	96 e0       	ldi	r25, 0x06	; 6
    195a:	0e 94 40 27 	call	0x4e80	; 0x4e80 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>
	BK_LCD.setBacklight(HIGH);
    195e:	61 e0       	ldi	r22, 0x01	; 1
    1960:	82 e7       	ldi	r24, 0x72	; 114
    1962:	96 e0       	ldi	r25, 0x06	; 6
    1964:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <_ZN17LiquidCrystal_I2C12setBacklightEh>
	BK_LCD.begin (20,4);
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	44 e0       	ldi	r20, 0x04	; 4
    196c:	64 e1       	ldi	r22, 0x14	; 20
    196e:	82 e7       	ldi	r24, 0x72	; 114
    1970:	96 e0       	ldi	r25, 0x06	; 6
    1972:	0e 94 37 28 	call	0x506e	; 0x506e <_ZN17LiquidCrystal_I2C5beginEhhh>
	
	//--Initialize the Encoders-------
	
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.println("Done.");
    1976:	68 e3       	ldi	r22, 0x38	; 56
    1978:	72 e0       	ldi	r23, 0x02	; 2
    197a:	88 ea       	ldi	r24, 0xA8	; 168
    197c:	9a e0       	ldi	r25, 0x0A	; 10
    197e:	0e 94 ca 30 	call	0x6194	; 0x6194 <_ZN5Print7printlnEPKc>
		Serial.print("Initializing Encoders...");
    1982:	6b e8       	ldi	r22, 0x8B	; 139
    1984:	72 e0       	ldi	r23, 0x02	; 2
    1986:	88 ea       	ldi	r24, 0xA8	; 168
    1988:	9a e0       	ldi	r25, 0x0A	; 10
    198a:	0e 94 90 30 	call	0x6120	; 0x6120 <_ZN5Print5printEPKc>
  public:
    //****************************
    //  Configuration
    //****************************
    void initialize(unsigned long microseconds=1000000) __attribute__((always_inline)) {
	TCCR1B = _BV(WGM13);        // set mode as phase and frequency correct pwm, stop the timer
    198e:	e1 e8       	ldi	r30, 0x81	; 129
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 e1       	ldi	r24, 0x10	; 16
    1994:	80 83       	st	Z, r24
	TCCR1A = 0;                 // clear control register A 
    1996:	10 92 80 00 	sts	0x0080, r1
	setPeriod(microseconds);
    }
    void setPeriod(unsigned long microseconds) __attribute__((always_inline)) {
	const unsigned long cycles = (F_CPU / 2000000) * microseconds;
	if (cycles < TIMER1_RESOLUTION) {
		clockSelectBits = _BV(CS10);
    199a:	91 e0       	ldi	r25, 0x01	; 1
    199c:	90 93 df 09 	sts	0x09DF, r25
		pwmPeriod = cycles;
    19a0:	20 e4       	ldi	r18, 0x40	; 64
    19a2:	3f e1       	ldi	r19, 0x1F	; 31
    19a4:	30 93 e1 09 	sts	0x09E1, r19
    19a8:	20 93 e0 09 	sts	0x09E0, r18
		pwmPeriod = cycles / 1024;
	} else {
		clockSelectBits = _BV(CS12) | _BV(CS10);
		pwmPeriod = TIMER1_RESOLUTION - 1;
	}
	ICR1 = pwmPeriod;
    19ac:	30 93 87 00 	sts	0x0087, r19
    19b0:	20 93 86 00 	sts	0x0086, r18
	TCCR1B = _BV(WGM13) | clockSelectBits;
    19b4:	80 91 df 09 	lds	r24, 0x09DF
    19b8:	80 61       	ori	r24, 0x10	; 16
    19ba:	80 83       	st	Z, r24

    //****************************
    //  Interrupt Function
    //****************************
    void attachInterrupt(void (*isr)()) __attribute__((always_inline)) {
	isrCallback = isr;
    19bc:	2f e0       	ldi	r18, 0x0F	; 15
    19be:	38 e0       	ldi	r19, 0x08	; 8
    19c0:	30 93 de 09 	sts	0x09DE, r19
    19c4:	20 93 dd 09 	sts	0x09DD, r18
	TIMSK1 = _BV(TOIE1);
    19c8:	90 93 6f 00 	sts	0x006F, r25
	//Attach the Timer
	Timer1.initialize(1000);
	Timer1.attachInterrupt(serviceEncoders);
	
	//--Attach Hardware-------
	HLT_UI->attatchEncoder(HLT_ENC);
    19cc:	60 91 a6 06 	lds	r22, 0x06A6
    19d0:	70 91 a7 06 	lds	r23, 0x06A7
    19d4:	80 91 d0 09 	lds	r24, 0x09D0
    19d8:	90 91 d1 09 	lds	r25, 0x09D1
    19dc:	0e 94 73 20 	call	0x40e6	; 0x40e6 <_ZN4EZUI14attatchEncoderEP22ClickEncoderWithEvents>
	HLT_UI->attatchLCD(&HLT_LCD);
    19e0:	68 ea       	ldi	r22, 0xA8	; 168
    19e2:	76 e0       	ldi	r23, 0x06	; 6
    19e4:	80 91 d0 09 	lds	r24, 0x09D0
    19e8:	90 91 d1 09 	lds	r25, 0x09D1
    19ec:	0e 94 a9 20 	call	0x4152	; 0x4152 <_ZN4EZUI10attatchLCDEP17LiquidCrystal_I2C>
	
	MLT_UI->attatchEncoder(MLT_ENC);
    19f0:	60 91 8a 06 	lds	r22, 0x068A
    19f4:	70 91 8b 06 	lds	r23, 0x068B
    19f8:	80 91 d4 09 	lds	r24, 0x09D4
    19fc:	90 91 d5 09 	lds	r25, 0x09D5
    1a00:	0e 94 73 20 	call	0x40e6	; 0x40e6 <_ZN4EZUI14attatchEncoderEP22ClickEncoderWithEvents>
	MLT_UI->attatchLCD(&MLT_LCD);
    1a04:	6c e8       	ldi	r22, 0x8C	; 140
    1a06:	76 e0       	ldi	r23, 0x06	; 6
    1a08:	80 91 d4 09 	lds	r24, 0x09D4
    1a0c:	90 91 d5 09 	lds	r25, 0x09D5
    1a10:	0e 94 a9 20 	call	0x4152	; 0x4152 <_ZN4EZUI10attatchLCDEP17LiquidCrystal_I2C>
	
	BK_UI->attatchEncoder(BK_ENC);
    1a14:	60 91 70 06 	lds	r22, 0x0670
    1a18:	70 91 71 06 	lds	r23, 0x0671
    1a1c:	80 91 6e 06 	lds	r24, 0x066E
    1a20:	90 91 6f 06 	lds	r25, 0x066F
    1a24:	0e 94 73 20 	call	0x40e6	; 0x40e6 <_ZN4EZUI14attatchEncoderEP22ClickEncoderWithEvents>
	BK_UI->attatchLCD(&BK_LCD);
    1a28:	62 e7       	ldi	r22, 0x72	; 114
    1a2a:	76 e0       	ldi	r23, 0x06	; 6
    1a2c:	80 91 6e 06 	lds	r24, 0x066E
    1a30:	90 91 6f 06 	lds	r25, 0x066F
    1a34:	0e 94 a9 20 	call	0x4152	; 0x4152 <_ZN4EZUI10attatchLCDEP17LiquidCrystal_I2C>
	
	//Set all Solenoids to output high which is "off" mode
	RC1_OUT1.Write(1);
    1a38:	61 e0       	ldi	r22, 0x01	; 1
    1a3a:	70 e0       	ldi	r23, 0x00	; 0
    1a3c:	8f eb       	ldi	r24, 0xBF	; 191
    1a3e:	99 e0       	ldi	r25, 0x09	; 9
    1a40:	2c d9       	rcall	.-3496   	; 0xc9a <_ZN9DigitalIO5WriteEi>
	RC1_OUT2.Write(1);
    1a42:	61 e0       	ldi	r22, 0x01	; 1
    1a44:	70 e0       	ldi	r23, 0x00	; 0
    1a46:	8e ea       	ldi	r24, 0xAE	; 174
    1a48:	99 e0       	ldi	r25, 0x09	; 9
    1a4a:	27 d9       	rcall	.-3506   	; 0xc9a <_ZN9DigitalIO5WriteEi>
	RC1_OUT3.Write(1);
    1a4c:	61 e0       	ldi	r22, 0x01	; 1
    1a4e:	70 e0       	ldi	r23, 0x00	; 0
    1a50:	8d e9       	ldi	r24, 0x9D	; 157
    1a52:	99 e0       	ldi	r25, 0x09	; 9
    1a54:	22 d9       	rcall	.-3516   	; 0xc9a <_ZN9DigitalIO5WriteEi>
	RC1_OUT4.Write(1);
    1a56:	61 e0       	ldi	r22, 0x01	; 1
    1a58:	70 e0       	ldi	r23, 0x00	; 0
    1a5a:	8c e8       	ldi	r24, 0x8C	; 140
    1a5c:	99 e0       	ldi	r25, 0x09	; 9
    1a5e:	1d d9       	rcall	.-3526   	; 0xc9a <_ZN9DigitalIO5WriteEi>
	RC1_OUT5.Write(1);
    1a60:	61 e0       	ldi	r22, 0x01	; 1
    1a62:	70 e0       	ldi	r23, 0x00	; 0
    1a64:	8b e7       	ldi	r24, 0x7B	; 123
    1a66:	99 e0       	ldi	r25, 0x09	; 9
    1a68:	18 d9       	rcall	.-3536   	; 0xc9a <_ZN9DigitalIO5WriteEi>
	RC1_OUT6.Write(1);
    1a6a:	61 e0       	ldi	r22, 0x01	; 1
    1a6c:	70 e0       	ldi	r23, 0x00	; 0
    1a6e:	8a e6       	ldi	r24, 0x6A	; 106
    1a70:	99 e0       	ldi	r25, 0x09	; 9
    1a72:	13 d9       	rcall	.-3546   	; 0xc9a <_ZN9DigitalIO5WriteEi>
	RC1_OUT7.Write(1);
    1a74:	61 e0       	ldi	r22, 0x01	; 1
    1a76:	70 e0       	ldi	r23, 0x00	; 0
    1a78:	89 e5       	ldi	r24, 0x59	; 89
    1a7a:	99 e0       	ldi	r25, 0x09	; 9
    1a7c:	0e d9       	rcall	.-3556   	; 0xc9a <_ZN9DigitalIO5WriteEi>
	RC1_OUT8.Write(1);
    1a7e:	61 e0       	ldi	r22, 0x01	; 1
    1a80:	70 e0       	ldi	r23, 0x00	; 0
    1a82:	88 e4       	ldi	r24, 0x48	; 72
    1a84:	99 e0       	ldi	r25, 0x09	; 9
    1a86:	09 d9       	rcall	.-3566   	; 0xc9a <_ZN9DigitalIO5WriteEi>
	RC2_OUT1.Write(1);
    1a88:	61 e0       	ldi	r22, 0x01	; 1
    1a8a:	70 e0       	ldi	r23, 0x00	; 0
    1a8c:	87 e3       	ldi	r24, 0x37	; 55
    1a8e:	99 e0       	ldi	r25, 0x09	; 9
    1a90:	04 d9       	rcall	.-3576   	; 0xc9a <_ZN9DigitalIO5WriteEi>
	RC2_OUT2.Write(1);
    1a92:	61 e0       	ldi	r22, 0x01	; 1
    1a94:	70 e0       	ldi	r23, 0x00	; 0
    1a96:	86 e2       	ldi	r24, 0x26	; 38
    1a98:	99 e0       	ldi	r25, 0x09	; 9
    1a9a:	ff d8       	rcall	.-3586   	; 0xc9a <_ZN9DigitalIO5WriteEi>
	RC2_OUT3.Write(1);
    1a9c:	61 e0       	ldi	r22, 0x01	; 1
    1a9e:	70 e0       	ldi	r23, 0x00	; 0
    1aa0:	85 e1       	ldi	r24, 0x15	; 21
    1aa2:	99 e0       	ldi	r25, 0x09	; 9
    1aa4:	fa d8       	rcall	.-3596   	; 0xc9a <_ZN9DigitalIO5WriteEi>
	RC2_OUT4.Write(1);
    1aa6:	61 e0       	ldi	r22, 0x01	; 1
    1aa8:	70 e0       	ldi	r23, 0x00	; 0
    1aaa:	84 e0       	ldi	r24, 0x04	; 4
    1aac:	99 e0       	ldi	r25, 0x09	; 9
    1aae:	f5 d8       	rcall	.-3606   	; 0xc9a <_ZN9DigitalIO5WriteEi>
	RC2_OUT5.Write(1);
    1ab0:	61 e0       	ldi	r22, 0x01	; 1
    1ab2:	70 e0       	ldi	r23, 0x00	; 0
    1ab4:	83 ef       	ldi	r24, 0xF3	; 243
    1ab6:	98 e0       	ldi	r25, 0x08	; 8
    1ab8:	f0 d8       	rcall	.-3616   	; 0xc9a <_ZN9DigitalIO5WriteEi>
	RC2_OUT6.Write(1);
    1aba:	61 e0       	ldi	r22, 0x01	; 1
    1abc:	70 e0       	ldi	r23, 0x00	; 0
    1abe:	82 ee       	ldi	r24, 0xE2	; 226
    1ac0:	98 e0       	ldi	r25, 0x08	; 8
    1ac2:	eb d8       	rcall	.-3626   	; 0xc9a <_ZN9DigitalIO5WriteEi>
	RC2_OUT7.Write(1);
    1ac4:	61 e0       	ldi	r22, 0x01	; 1
    1ac6:	70 e0       	ldi	r23, 0x00	; 0
    1ac8:	81 ed       	ldi	r24, 0xD1	; 209
    1aca:	98 e0       	ldi	r25, 0x08	; 8
    1acc:	e6 d8       	rcall	.-3636   	; 0xc9a <_ZN9DigitalIO5WriteEi>
	RC2_OUT8.Write(1);
    1ace:	61 e0       	ldi	r22, 0x01	; 1
    1ad0:	70 e0       	ldi	r23, 0x00	; 0
    1ad2:	80 ec       	ldi	r24, 0xC0	; 192
    1ad4:	98 e0       	ldi	r25, 0x08	; 8
    1ad6:	e1 d8       	rcall	.-3646   	; 0xc9a <_ZN9DigitalIO5WriteEi>
	
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.println("Done.");
    1ad8:	68 e3       	ldi	r22, 0x38	; 56
    1ada:	72 e0       	ldi	r23, 0x02	; 2
    1adc:	88 ea       	ldi	r24, 0xA8	; 168
    1ade:	9a e0       	ldi	r25, 0x0A	; 10
    1ae0:	0c 94 ca 30 	jmp	0x6194	; 0x6194 <_ZN5Print7printlnEPKc>
    1ae4:	08 95       	ret

00001ae6 <_Z11HLT_UI_initv>:

#include "HLT_UI.h"

EZUI *HLT_UI = new EZUI("HLT");

void HLT_UI_init(){
    1ae6:	cf 92       	push	r12
    1ae8:	df 92       	push	r13
    1aea:	ef 92       	push	r14
    1aec:	ff 92       	push	r15
    1aee:	0f 93       	push	r16
    1af0:	1f 93       	push	r17
    1af2:	cf 93       	push	r28
    1af4:	df 93       	push	r29
    1af6:	cd b7       	in	r28, 0x3d	; 61
    1af8:	de b7       	in	r29, 0x3e	; 62
    1afa:	6e 97       	sbiw	r28, 0x1e	; 30
    1afc:	0f b6       	in	r0, 0x3f	; 63
    1afe:	f8 94       	cli
    1b00:	de bf       	out	0x3e, r29	; 62
    1b02:	0f be       	out	0x3f, r0	; 63
    1b04:	cd bf       	out	0x3d, r28	; 61
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.print("Initializing UI - " + HLT_UI->Name + "...");
    1b06:	00 91 d0 09 	lds	r16, 0x09D0
    1b0a:	10 91 d1 09 	lds	r17, 0x09D1
    1b0e:	0c 5f       	subi	r16, 0xFC	; 252
    1b10:	1f 4f       	sbci	r17, 0xFF	; 255
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1b12:	69 e0       	ldi	r22, 0x09	; 9
    1b14:	72 e0       	ldi	r23, 0x02	; 2
    1b16:	ce 01       	movw	r24, r28
    1b18:	49 96       	adiw	r24, 0x19	; 25
    1b1a:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    1b1e:	b8 01       	movw	r22, r16
    1b20:	ce 01       	movw	r24, r28
    1b22:	49 96       	adiw	r24, 0x19	; 25
    1b24:	0e 94 36 38 	call	0x706c	; 0x706c <_ZplRK15StringSumHelperRK6String>
    1b28:	61 e0       	ldi	r22, 0x01	; 1
    1b2a:	75 e0       	ldi	r23, 0x05	; 5
    1b2c:	0e 94 47 38 	call	0x708e	; 0x708e <_ZplRK15StringSumHelperPKc>
    1b30:	bc 01       	movw	r22, r24
    1b32:	88 ea       	ldi	r24, 0xA8	; 168
    1b34:	9a e0       	ldi	r25, 0x0A	; 10
    1b36:	0e 94 81 30 	call	0x6102	; 0x6102 <_ZN5Print5printERK6String>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1b3a:	ce 01       	movw	r24, r28
    1b3c:	49 96       	adiw	r24, 0x19	; 25
    1b3e:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
	#endif
	
	/***************************************
	  Setup + Initialization
	***************************************/
	HLT_UI->attatchEncoder(HLT_ENC);
    1b42:	60 91 a6 06 	lds	r22, 0x06A6
    1b46:	70 91 a7 06 	lds	r23, 0x06A7
    1b4a:	80 91 d0 09 	lds	r24, 0x09D0
    1b4e:	90 91 d1 09 	lds	r25, 0x09D1
    1b52:	0e 94 73 20 	call	0x40e6	; 0x40e6 <_ZN4EZUI14attatchEncoderEP22ClickEncoderWithEvents>
	HLT_UI->attatchLCD(&HLT_LCD);
    1b56:	68 ea       	ldi	r22, 0xA8	; 168
    1b58:	76 e0       	ldi	r23, 0x06	; 6
    1b5a:	80 91 d0 09 	lds	r24, 0x09D0
    1b5e:	90 91 d1 09 	lds	r25, 0x09D1
    1b62:	0e 94 a9 20 	call	0x4152	; 0x4152 <_ZN4EZUI10attatchLCDEP17LiquidCrystal_I2C>
	
	EZUI_Menu * MainMenu = new EZUI_Menu("HLT-Main-Menu");
    1b66:	64 ec       	ldi	r22, 0xC4	; 196
    1b68:	73 e0       	ldi	r23, 0x03	; 3
    1b6a:	ce 01       	movw	r24, r28
    1b6c:	43 96       	adiw	r24, 0x13	; 19
    1b6e:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    1b72:	8d e1       	ldi	r24, 0x1D	; 29
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    1b7a:	8c 01       	movw	r16, r24
    1b7c:	be 01       	movw	r22, r28
    1b7e:	6d 5e       	subi	r22, 0xED	; 237
    1b80:	7f 4f       	sbci	r23, 0xFF	; 255
    1b82:	31 d6       	rcall	.+3170   	; 0x27e6 <_ZN9EZUI_MenuC1E6String>
    1b84:	ce 01       	movw	r24, r28
    1b86:	43 96       	adiw	r24, 0x13	; 19
    1b88:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
	
	EZUI_Page * TestPage = new EZUI_Page((String)("TestPage"));
    1b8c:	69 e2       	ldi	r22, 0x29	; 41
    1b8e:	72 e0       	ldi	r23, 0x02	; 2
    1b90:	ce 01       	movw	r24, r28
    1b92:	0d 96       	adiw	r24, 0x0d	; 13
    1b94:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    1b98:	8e e2       	ldi	r24, 0x2E	; 46
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    1ba0:	6c 01       	movw	r12, r24
    1ba2:	be 01       	movw	r22, r28
    1ba4:	63 5f       	subi	r22, 0xF3	; 243
    1ba6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba8:	0e 94 4b 1a 	call	0x3496	; 0x3496 <_ZN9EZUI_PageC1E6String>
    1bac:	ce 01       	movw	r24, r28
    1bae:	0d 96       	adiw	r24, 0x0d	; 13
    1bb0:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
	//TestPage->addItem(0,3,new EZUI_Control_Link("Back",MainMenu));
	
	MainMenu->addItem(new EZUI_Control_Link("TestPage",TestPage));
    1bb4:	69 e2       	ldi	r22, 0x29	; 41
    1bb6:	72 e0       	ldi	r23, 0x02	; 2
    1bb8:	ce 01       	movw	r24, r28
    1bba:	07 96       	adiw	r24, 0x07	; 7
    1bbc:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    1bc0:	89 e0       	ldi	r24, 0x09	; 9
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    1bc8:	7c 01       	movw	r14, r24
    1bca:	a6 01       	movw	r20, r12
    1bcc:	be 01       	movw	r22, r28
    1bce:	69 5f       	subi	r22, 0xF9	; 249
    1bd0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd2:	20 d9       	rcall	.-3520   	; 0xe14 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Page>
    1bd4:	b7 01       	movw	r22, r14
    1bd6:	c8 01       	movw	r24, r16
    1bd8:	34 d6       	rcall	.+3176   	; 0x2842 <_ZN9EZUI_Menu7addItemEP17EZUI_Control_Link>
    1bda:	ce 01       	movw	r24, r28
    1bdc:	07 96       	adiw	r24, 0x07	; 7
    1bde:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
	MainMenu->addItem(new EZUI_Control_Link("Test2",MainMenu));
    1be2:	62 e3       	ldi	r22, 0x32	; 50
    1be4:	72 e0       	ldi	r23, 0x02	; 2
    1be6:	ce 01       	movw	r24, r28
    1be8:	01 96       	adiw	r24, 0x01	; 1
    1bea:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    1bee:	89 e0       	ldi	r24, 0x09	; 9
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    1bf6:	7c 01       	movw	r14, r24
    1bf8:	a8 01       	movw	r20, r16
    1bfa:	be 01       	movw	r22, r28
    1bfc:	6f 5f       	subi	r22, 0xFF	; 255
    1bfe:	7f 4f       	sbci	r23, 0xFF	; 255
    1c00:	eb d8       	rcall	.-3626   	; 0xdd8 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Menu>
    1c02:	b7 01       	movw	r22, r14
    1c04:	c8 01       	movw	r24, r16
    1c06:	1d d6       	rcall	.+3130   	; 0x2842 <_ZN9EZUI_Menu7addItemEP17EZUI_Control_Link>
    1c08:	ce 01       	movw	r24, r28
    1c0a:	01 96       	adiw	r24, 0x01	; 1
    1c0c:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
	***************************************/
	//MainMenu->addItem(new EZUI_Control_Link("Monitor",MonitorPage));
	//MainMenu->addItem(new EZUI_Control_Link("Monitor",SettingsPage));
	//MainMenu->addItem(new EZUI_Control_Link("Diagnostics",DiagPage));

	HLT_UI->setDisplay(MainMenu);
    1c10:	b8 01       	movw	r22, r16
    1c12:	80 91 d0 09 	lds	r24, 0x09D0
    1c16:	90 91 d1 09 	lds	r25, 0x09D1
    1c1a:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <_ZN4EZUI10setDisplayEP9EZUI_Menu>
	
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.println("Done.");
    1c1e:	68 e3       	ldi	r22, 0x38	; 56
    1c20:	72 e0       	ldi	r23, 0x02	; 2
    1c22:	88 ea       	ldi	r24, 0xA8	; 168
    1c24:	9a e0       	ldi	r25, 0x0A	; 10
    1c26:	0e 94 ca 30 	call	0x6194	; 0x6194 <_ZN5Print7printlnEPKc>
	#endif
}
    1c2a:	6e 96       	adiw	r28, 0x1e	; 30
    1c2c:	0f b6       	in	r0, 0x3f	; 63
    1c2e:	f8 94       	cli
    1c30:	de bf       	out	0x3e, r29	; 62
    1c32:	0f be       	out	0x3f, r0	; 63
    1c34:	cd bf       	out	0x3d, r28	; 61
    1c36:	df 91       	pop	r29
    1c38:	cf 91       	pop	r28
    1c3a:	1f 91       	pop	r17
    1c3c:	0f 91       	pop	r16
    1c3e:	ff 90       	pop	r15
    1c40:	ef 90       	pop	r14
    1c42:	df 90       	pop	r13
    1c44:	cf 90       	pop	r12
    1c46:	08 95       	ret

00001c48 <_GLOBAL__sub_I_HLT_UI>:
    1c48:	0f 93       	push	r16
    1c4a:	1f 93       	push	r17
    1c4c:	cf 93       	push	r28
    1c4e:	df 93       	push	r29
    1c50:	00 d0       	rcall	.+0      	; 0x1c52 <_GLOBAL__sub_I_HLT_UI+0xa>
    1c52:	00 d0       	rcall	.+0      	; 0x1c54 <_GLOBAL__sub_I_HLT_UI+0xc>
    1c54:	cd b7       	in	r28, 0x3d	; 61
    1c56:	de b7       	in	r29, 0x3e	; 62
 * ----------------------------------------------------------------
 */

#include "HLT_UI.h"

EZUI *HLT_UI = new EZUI("HLT");
    1c58:	62 ed       	ldi	r22, 0xD2	; 210
    1c5a:	73 e0       	ldi	r23, 0x03	; 3
    1c5c:	ce 01       	movw	r24, r28
    1c5e:	01 96       	adiw	r24, 0x01	; 1
    1c60:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    1c64:	86 e1       	ldi	r24, 0x16	; 22
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    1c6c:	8c 01       	movw	r16, r24
    1c6e:	be 01       	movw	r22, r28
    1c70:	6f 5f       	subi	r22, 0xFF	; 255
    1c72:	7f 4f       	sbci	r23, 0xFF	; 255
    1c74:	0e 94 50 20 	call	0x40a0	; 0x40a0 <_ZN4EZUIC1E6String>
    1c78:	10 93 d1 09 	sts	0x09D1, r17
    1c7c:	00 93 d0 09 	sts	0x09D0, r16
    1c80:	ce 01       	movw	r24, r28
    1c82:	01 96       	adiw	r24, 0x01	; 1
    1c84:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
	HLT_UI->setDisplay(MainMenu);
	
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.println("Done.");
	#endif
}
    1c88:	26 96       	adiw	r28, 0x06	; 6
    1c8a:	0f b6       	in	r0, 0x3f	; 63
    1c8c:	f8 94       	cli
    1c8e:	de bf       	out	0x3e, r29	; 62
    1c90:	0f be       	out	0x3f, r0	; 63
    1c92:	cd bf       	out	0x3d, r28	; 61
    1c94:	df 91       	pop	r29
    1c96:	cf 91       	pop	r28
    1c98:	1f 91       	pop	r17
    1c9a:	0f 91       	pop	r16
    1c9c:	08 95       	ret

00001c9e <_Z12MAIN_UI_initv>:

#include "MAIN_UI.h"

EZUI *MAIN_UI = new EZUI("MAIN");

void MAIN_UI_init(){
    1c9e:	6f 92       	push	r6
    1ca0:	7f 92       	push	r7
    1ca2:	8f 92       	push	r8
    1ca4:	9f 92       	push	r9
    1ca6:	af 92       	push	r10
    1ca8:	bf 92       	push	r11
    1caa:	cf 92       	push	r12
    1cac:	df 92       	push	r13
    1cae:	ef 92       	push	r14
    1cb0:	ff 92       	push	r15
    1cb2:	0f 93       	push	r16
    1cb4:	1f 93       	push	r17
    1cb6:	cf 93       	push	r28
    1cb8:	df 93       	push	r29
    1cba:	cd b7       	in	r28, 0x3d	; 61
    1cbc:	de b7       	in	r29, 0x3e	; 62
    1cbe:	ce 57       	subi	r28, 0x7E	; 126
    1cc0:	d1 09       	sbc	r29, r1
    1cc2:	0f b6       	in	r0, 0x3f	; 63
    1cc4:	f8 94       	cli
    1cc6:	de bf       	out	0x3e, r29	; 62
    1cc8:	0f be       	out	0x3f, r0	; 63
    1cca:	cd bf       	out	0x3d, r28	; 61
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.print("Initializing UI - " + MAIN_UI->Name + "...");
    1ccc:	00 91 d2 09 	lds	r16, 0x09D2
    1cd0:	10 91 d3 09 	lds	r17, 0x09D3
    1cd4:	0c 5f       	subi	r16, 0xFC	; 252
    1cd6:	1f 4f       	sbci	r17, 0xFF	; 255
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1cd8:	69 e0       	ldi	r22, 0x09	; 9
    1cda:	72 e0       	ldi	r23, 0x02	; 2
    1cdc:	ce 01       	movw	r24, r28
    1cde:	87 58       	subi	r24, 0x87	; 135
    1ce0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce2:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    1ce6:	b8 01       	movw	r22, r16
    1ce8:	ce 01       	movw	r24, r28
    1cea:	87 58       	subi	r24, 0x87	; 135
    1cec:	9f 4f       	sbci	r25, 0xFF	; 255
    1cee:	0e 94 36 38 	call	0x706c	; 0x706c <_ZplRK15StringSumHelperRK6String>
    1cf2:	61 e0       	ldi	r22, 0x01	; 1
    1cf4:	75 e0       	ldi	r23, 0x05	; 5
    1cf6:	0e 94 47 38 	call	0x708e	; 0x708e <_ZplRK15StringSumHelperPKc>
    1cfa:	bc 01       	movw	r22, r24
    1cfc:	88 ea       	ldi	r24, 0xA8	; 168
    1cfe:	9a e0       	ldi	r25, 0x0A	; 10
    1d00:	0e 94 81 30 	call	0x6102	; 0x6102 <_ZN5Print5printERK6String>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1d04:	ce 01       	movw	r24, r28
    1d06:	87 58       	subi	r24, 0x87	; 135
    1d08:	9f 4f       	sbci	r25, 0xFF	; 255
    1d0a:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
	#endif
	
	EZUI_Menu * MainMenu = new EZUI_Menu("Main");
    1d0e:	66 ed       	ldi	r22, 0xD6	; 214
    1d10:	73 e0       	ldi	r23, 0x03	; 3
    1d12:	ce 01       	movw	r24, r28
    1d14:	8d 58       	subi	r24, 0x8D	; 141
    1d16:	9f 4f       	sbci	r25, 0xFF	; 255
    1d18:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    1d1c:	8d e1       	ldi	r24, 0x1D	; 29
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    1d24:	8c 01       	movw	r16, r24
    1d26:	be 01       	movw	r22, r28
    1d28:	6d 58       	subi	r22, 0x8D	; 141
    1d2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d2c:	5c d5       	rcall	.+2744   	; 0x27e6 <_ZN9EZUI_MenuC1E6String>
    1d2e:	ce 01       	movw	r24, r28
    1d30:	8d 58       	subi	r24, 0x8D	; 141
    1d32:	9f 4f       	sbci	r25, 0xFF	; 255
    1d34:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
	
	/***************************************
	  Setup + Initialization
	***************************************/
	MAIN_UI->attatchEncoder(MAIN_ENC);
    1d38:	60 91 c0 06 	lds	r22, 0x06C0
    1d3c:	70 91 c1 06 	lds	r23, 0x06C1
    1d40:	80 91 d2 09 	lds	r24, 0x09D2
    1d44:	90 91 d3 09 	lds	r25, 0x09D3
    1d48:	0e 94 73 20 	call	0x40e6	; 0x40e6 <_ZN4EZUI14attatchEncoderEP22ClickEncoderWithEvents>
	MAIN_UI->attatchLCD(&MAIN_LCD);
    1d4c:	62 ec       	ldi	r22, 0xC2	; 194
    1d4e:	76 e0       	ldi	r23, 0x06	; 6
    1d50:	80 91 d2 09 	lds	r24, 0x09D2
    1d54:	90 91 d3 09 	lds	r25, 0x09D3
    1d58:	0e 94 a9 20 	call	0x4152	; 0x4152 <_ZN4EZUI10attatchLCDEP17LiquidCrystal_I2C>
	MAIN_UI->setDisplay(MainMenu);
    1d5c:	b8 01       	movw	r22, r16
    1d5e:	80 91 d2 09 	lds	r24, 0x09D2
    1d62:	90 91 d3 09 	lds	r25, 0x09D3
    1d66:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <_ZN4EZUI10setDisplayEP9EZUI_Menu>
	
	/***************************************
	  Alarm Test Menu
	***************************************/
	
	EZUI_Menu * MenuAlarmTest = new EZUI_Menu(F("Alarm Test"));	
    1d6a:	67 ec       	ldi	r22, 0xC7	; 199
    1d6c:	72 e0       	ldi	r23, 0x02	; 2
    1d6e:	ce 01       	movw	r24, r28
    1d70:	83 59       	subi	r24, 0x93	; 147
    1d72:	9f 4f       	sbci	r25, 0xFF	; 255
    1d74:	0e 94 ff 37 	call	0x6ffe	; 0x6ffe <_ZN6StringC1EPK19__FlashStringHelper>
    1d78:	8d e1       	ldi	r24, 0x1D	; 29
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    1d80:	7c 01       	movw	r14, r24
    1d82:	be 01       	movw	r22, r28
    1d84:	63 59       	subi	r22, 0x93	; 147
    1d86:	7f 4f       	sbci	r23, 0xFF	; 255
    1d88:	2e d5       	rcall	.+2652   	; 0x27e6 <_ZN9EZUI_MenuC1E6String>
    1d8a:	ce 01       	movw	r24, r28
    1d8c:	83 59       	subi	r24, 0x93	; 147
    1d8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d90:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
	//MenuAlarmTest->addItem(new EZUI_Control_ToggleOption("Timer Alarm",TimerAlarmDIO));
	//MenuAlarmTest->addItem(new EZUI_Control_ToggleOption("Temp Alarm",TempAlarmDIO));
	MenuAlarmTest->addItem(new EZUI_Control_Link(F("Back"),MainMenu));
    1d94:	62 ec       	ldi	r22, 0xC2	; 194
    1d96:	72 e0       	ldi	r23, 0x02	; 2
    1d98:	ce 01       	movw	r24, r28
    1d9a:	89 59       	subi	r24, 0x99	; 153
    1d9c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d9e:	0e 94 ff 37 	call	0x6ffe	; 0x6ffe <_ZN6StringC1EPK19__FlashStringHelper>
    1da2:	89 e0       	ldi	r24, 0x09	; 9
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    1daa:	6c 01       	movw	r12, r24
    1dac:	a8 01       	movw	r20, r16
    1dae:	be 01       	movw	r22, r28
    1db0:	69 59       	subi	r22, 0x99	; 153
    1db2:	7f 4f       	sbci	r23, 0xFF	; 255
    1db4:	11 d8       	rcall	.-4062   	; 0xdd8 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Menu>
    1db6:	b6 01       	movw	r22, r12
    1db8:	c7 01       	movw	r24, r14
    1dba:	43 d5       	rcall	.+2694   	; 0x2842 <_ZN9EZUI_Menu7addItemEP17EZUI_Control_Link>
    1dbc:	ce 01       	movw	r24, r28
    1dbe:	89 59       	subi	r24, 0x99	; 153
    1dc0:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc2:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
	
	/***************************************
	  Analogs
	***************************************/
	
	EZUI_Page * Analogs_0_to_5 = new EZUI_Page((String)("Analogs 0-5"));
    1dc6:	6b ed       	ldi	r22, 0xDB	; 219
    1dc8:	73 e0       	ldi	r23, 0x03	; 3
    1dca:	ce 01       	movw	r24, r28
    1dcc:	8f 59       	subi	r24, 0x9F	; 159
    1dce:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd0:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    1dd4:	8e e2       	ldi	r24, 0x2E	; 46
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    1ddc:	6c 01       	movw	r12, r24
    1dde:	be 01       	movw	r22, r28
    1de0:	6f 59       	subi	r22, 0x9F	; 159
    1de2:	7f 4f       	sbci	r23, 0xFF	; 255
    1de4:	0e 94 4b 1a 	call	0x3496	; 0x3496 <_ZN9EZUI_PageC1E6String>
    1de8:	ce 01       	movw	r24, r28
    1dea:	8f 59       	subi	r24, 0x9F	; 159
    1dec:	9f 4f       	sbci	r25, 0xFF	; 255
    1dee:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
	Analogs_0_to_5->addItem(0,0,new EZUI_Control_Label(F(" A0:")));
    1df2:	8d e0       	ldi	r24, 0x0D	; 13
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    1dfa:	7c 01       	movw	r14, r24
    1dfc:	61 e0       	ldi	r22, 0x01	; 1
    1dfe:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN18EZUI_Control_LabelC1Eb>
    1e02:	97 01       	movw	r18, r14
    1e04:	40 e0       	ldi	r20, 0x00	; 0
    1e06:	60 e0       	ldi	r22, 0x00	; 0
    1e08:	c6 01       	movw	r24, r12
    1e0a:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <_ZN9EZUI_Page7addItemEhhP18EZUI_Control_Label>
	Analogs_0_to_5->addItem(4,0,new EZUI_Control_Label(&(ANIN_A0.value)));
    1e0e:	8d e0       	ldi	r24, 0x0D	; 13
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    1e16:	7c 01       	movw	r14, r24
    1e18:	65 ea       	ldi	r22, 0xA5	; 165
    1e1a:	78 e0       	ldi	r23, 0x08	; 8
    1e1c:	0e 94 cd 06 	call	0xd9a	; 0xd9a <_ZN18EZUI_Control_LabelC1EPf>
    1e20:	97 01       	movw	r18, r14
    1e22:	40 e0       	ldi	r20, 0x00	; 0
    1e24:	64 e0       	ldi	r22, 0x04	; 4
    1e26:	c6 01       	movw	r24, r12
    1e28:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <_ZN9EZUI_Page7addItemEhhP18EZUI_Control_Label>
	Analogs_0_to_5->addItem(0,1,new EZUI_Control_Label(F(" A1:")));
    1e2c:	8d e0       	ldi	r24, 0x0D	; 13
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    1e34:	7c 01       	movw	r14, r24
    1e36:	61 e0       	ldi	r22, 0x01	; 1
    1e38:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN18EZUI_Control_LabelC1Eb>
    1e3c:	97 01       	movw	r18, r14
    1e3e:	41 e0       	ldi	r20, 0x01	; 1
    1e40:	60 e0       	ldi	r22, 0x00	; 0
    1e42:	c6 01       	movw	r24, r12
    1e44:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <_ZN9EZUI_Page7addItemEhhP18EZUI_Control_Label>
	Analogs_0_to_5->addItem(4,1,new EZUI_Control_Label(&(ANIN_A1.value)));
    1e48:	8d e0       	ldi	r24, 0x0D	; 13
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    1e50:	7c 01       	movw	r14, r24
    1e52:	65 e8       	ldi	r22, 0x85	; 133
    1e54:	78 e0       	ldi	r23, 0x08	; 8
    1e56:	0e 94 cd 06 	call	0xd9a	; 0xd9a <_ZN18EZUI_Control_LabelC1EPf>
    1e5a:	97 01       	movw	r18, r14
    1e5c:	41 e0       	ldi	r20, 0x01	; 1
    1e5e:	64 e0       	ldi	r22, 0x04	; 4
    1e60:	c6 01       	movw	r24, r12
    1e62:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <_ZN9EZUI_Page7addItemEhhP18EZUI_Control_Label>
	Analogs_0_to_5->addItem(0,2,new EZUI_Control_Label(F(" A2:")));
    1e66:	8d e0       	ldi	r24, 0x0D	; 13
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    1e6e:	7c 01       	movw	r14, r24
    1e70:	61 e0       	ldi	r22, 0x01	; 1
    1e72:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN18EZUI_Control_LabelC1Eb>
    1e76:	97 01       	movw	r18, r14
    1e78:	42 e0       	ldi	r20, 0x02	; 2
    1e7a:	60 e0       	ldi	r22, 0x00	; 0
    1e7c:	c6 01       	movw	r24, r12
    1e7e:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <_ZN9EZUI_Page7addItemEhhP18EZUI_Control_Label>
	Analogs_0_to_5->addItem(4,2,new EZUI_Control_Label(&(ANIN_A2.value)));/*
    1e82:	8d e0       	ldi	r24, 0x0D	; 13
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    1e8a:	7c 01       	movw	r14, r24
    1e8c:	65 e6       	ldi	r22, 0x65	; 101
    1e8e:	78 e0       	ldi	r23, 0x08	; 8
    1e90:	0e 94 cd 06 	call	0xd9a	; 0xd9a <_ZN18EZUI_Control_LabelC1EPf>
    1e94:	97 01       	movw	r18, r14
    1e96:	42 e0       	ldi	r20, 0x02	; 2
    1e98:	64 e0       	ldi	r22, 0x04	; 4
    1e9a:	c6 01       	movw	r24, r12
    1e9c:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <_ZN9EZUI_Page7addItemEhhP18EZUI_Control_Label>
	Analogs_12_to_15->addItem(new EZUI_PageItem(14,1, &analog15)); */
	
	/***************************************
	  Relay Diagnostics Menu
	***************************************/	
	EZUI_Menu *MenuRCDiag = new EZUI_Menu("Rc");
    1ea0:	67 ee       	ldi	r22, 0xE7	; 231
    1ea2:	73 e0       	ldi	r23, 0x03	; 3
    1ea4:	ce 01       	movw	r24, r28
    1ea6:	85 5a       	subi	r24, 0xA5	; 165
    1ea8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eaa:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    1eae:	8d e1       	ldi	r24, 0x1D	; 29
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    1eb6:	7c 01       	movw	r14, r24
    1eb8:	be 01       	movw	r22, r28
    1eba:	65 5a       	subi	r22, 0xA5	; 165
    1ebc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ebe:	93 d4       	rcall	.+2342   	; 0x27e6 <_ZN9EZUI_MenuC1E6String>
    1ec0:	ce 01       	movw	r24, r28
    1ec2:	85 5a       	subi	r24, 0xA5	; 165
    1ec4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec6:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
	/*MenuRCDiag->addItem(new EZUI_Control_ToggleOption("RC1_Out1",RC1_OUT1));
	MenuRCDiag->addItem(new EZUI_Control_ToggleOption("RC1_Out2",RC1_OUT2));
	MenuRCDiag->addItem(new EZUI_Control_ToggleOption("RC1_Out3",RC1_OUT3));*/
	MenuRCDiag->addItem(new EZUI_Control_ToggleOption("RC1_Out4",&RC1_OUT4));
    1eca:	6a ee       	ldi	r22, 0xEA	; 234
    1ecc:	73 e0       	ldi	r23, 0x03	; 3
    1ece:	ce 01       	movw	r24, r28
    1ed0:	8b 5a       	subi	r24, 0xAB	; 171
    1ed2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ed4:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    1ed8:	88 e1       	ldi	r24, 0x18	; 24
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    1ee0:	5c 01       	movw	r10, r24
    1ee2:	4c e8       	ldi	r20, 0x8C	; 140
    1ee4:	59 e0       	ldi	r21, 0x09	; 9
    1ee6:	be 01       	movw	r22, r28
    1ee8:	6b 5a       	subi	r22, 0xAB	; 171
    1eea:	7f 4f       	sbci	r23, 0xFF	; 255
    1eec:	6a d8       	rcall	.-3884   	; 0xfc2 <_ZN25EZUI_Control_ToggleOptionC1E6StringP9DigitalIO>
    1eee:	b5 01       	movw	r22, r10
    1ef0:	c7 01       	movw	r24, r14
    1ef2:	d7 d4       	rcall	.+2478   	; 0x28a2 <_ZN9EZUI_Menu7addItemEP25EZUI_Control_ToggleOption>
    1ef4:	ce 01       	movw	r24, r28
    1ef6:	8b 5a       	subi	r24, 0xAB	; 171
    1ef8:	9f 4f       	sbci	r25, 0xFF	; 255
    1efa:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
	MenuRCDiag->addItem(new EZUI_Control_ToggleOption("RC1_Out5",&RC1_OUT5));
    1efe:	63 ef       	ldi	r22, 0xF3	; 243
    1f00:	73 e0       	ldi	r23, 0x03	; 3
    1f02:	ce 01       	movw	r24, r28
    1f04:	81 5b       	subi	r24, 0xB1	; 177
    1f06:	9f 4f       	sbci	r25, 0xFF	; 255
    1f08:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    1f0c:	88 e1       	ldi	r24, 0x18	; 24
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    1f14:	5c 01       	movw	r10, r24
    1f16:	4b e7       	ldi	r20, 0x7B	; 123
    1f18:	59 e0       	ldi	r21, 0x09	; 9
    1f1a:	be 01       	movw	r22, r28
    1f1c:	61 5b       	subi	r22, 0xB1	; 177
    1f1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f20:	50 d8       	rcall	.-3936   	; 0xfc2 <_ZN25EZUI_Control_ToggleOptionC1E6StringP9DigitalIO>
    1f22:	b5 01       	movw	r22, r10
    1f24:	c7 01       	movw	r24, r14
    1f26:	bd d4       	rcall	.+2426   	; 0x28a2 <_ZN9EZUI_Menu7addItemEP25EZUI_Control_ToggleOption>
    1f28:	ce 01       	movw	r24, r28
    1f2a:	81 5b       	subi	r24, 0xB1	; 177
    1f2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f2e:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
	MenuRCDiag->addItem(new EZUI_Control_ToggleOption("RC1_Out6",&RC1_OUT6));
    1f32:	6c ef       	ldi	r22, 0xFC	; 252
    1f34:	73 e0       	ldi	r23, 0x03	; 3
    1f36:	ce 01       	movw	r24, r28
    1f38:	87 5b       	subi	r24, 0xB7	; 183
    1f3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f3c:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    1f40:	88 e1       	ldi	r24, 0x18	; 24
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    1f48:	5c 01       	movw	r10, r24
    1f4a:	4a e6       	ldi	r20, 0x6A	; 106
    1f4c:	59 e0       	ldi	r21, 0x09	; 9
    1f4e:	be 01       	movw	r22, r28
    1f50:	67 5b       	subi	r22, 0xB7	; 183
    1f52:	7f 4f       	sbci	r23, 0xFF	; 255
    1f54:	36 d8       	rcall	.-3988   	; 0xfc2 <_ZN25EZUI_Control_ToggleOptionC1E6StringP9DigitalIO>
    1f56:	b5 01       	movw	r22, r10
    1f58:	c7 01       	movw	r24, r14
    1f5a:	a3 d4       	rcall	.+2374   	; 0x28a2 <_ZN9EZUI_Menu7addItemEP25EZUI_Control_ToggleOption>
    1f5c:	ce 01       	movw	r24, r28
    1f5e:	87 5b       	subi	r24, 0xB7	; 183
    1f60:	9f 4f       	sbci	r25, 0xFF	; 255
    1f62:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
	
	/***************************************
	  Analogs Diagnostics Menu
	***************************************/
	
	EZUI_Menu * MenuAnalogsMonitor = new EZUI_Menu("Analog Diagnostics");
    1f66:	65 e0       	ldi	r22, 0x05	; 5
    1f68:	74 e0       	ldi	r23, 0x04	; 4
    1f6a:	ce 01       	movw	r24, r28
    1f6c:	8d 5b       	subi	r24, 0xBD	; 189
    1f6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f70:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    1f74:	8d e1       	ldi	r24, 0x1D	; 29
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    1f7c:	5c 01       	movw	r10, r24
    1f7e:	be 01       	movw	r22, r28
    1f80:	6d 5b       	subi	r22, 0xBD	; 189
    1f82:	7f 4f       	sbci	r23, 0xFF	; 255
    1f84:	30 d4       	rcall	.+2144   	; 0x27e6 <_ZN9EZUI_MenuC1E6String>
    1f86:	ce 01       	movw	r24, r28
    1f88:	8d 5b       	subi	r24, 0xBD	; 189
    1f8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f8c:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
	Analogs_0_to_5->addItem(0,3,new EZUI_Control_Link("Back",MainMenu));
    1f90:	68 e1       	ldi	r22, 0x18	; 24
    1f92:	74 e0       	ldi	r23, 0x04	; 4
    1f94:	ce 01       	movw	r24, r28
    1f96:	cd 96       	adiw	r24, 0x3d	; 61
    1f98:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    1f9c:	89 e0       	ldi	r24, 0x09	; 9
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    1fa4:	4c 01       	movw	r8, r24
    1fa6:	a8 01       	movw	r20, r16
    1fa8:	be 01       	movw	r22, r28
    1faa:	63 5c       	subi	r22, 0xC3	; 195
    1fac:	7f 4f       	sbci	r23, 0xFF	; 255
    1fae:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Menu>
    1fb2:	94 01       	movw	r18, r8
    1fb4:	43 e0       	ldi	r20, 0x03	; 3
    1fb6:	60 e0       	ldi	r22, 0x00	; 0
    1fb8:	c6 01       	movw	r24, r12
    1fba:	0e 94 97 1a 	call	0x352e	; 0x352e <_ZN9EZUI_Page7addItemEhhP17EZUI_Control_Link>
    1fbe:	ce 01       	movw	r24, r28
    1fc0:	cd 96       	adiw	r24, 0x3d	; 61
    1fc2:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
	//Analogs_6_to_11->addItem(new EZUI_PageItem(0,3,new EZUI_Control_Link("Back",MainMenu)));
	//Analogs_12_to_15->addItem(new EZUI_PageItem(0,3,new EZUI_Control_Link("Back",MainMenu)));
	MenuAnalogsMonitor->addItem(new EZUI_Control_Link("Analogs 0 to 5",Analogs_0_to_5));
    1fc6:	6d e1       	ldi	r22, 0x1D	; 29
    1fc8:	74 e0       	ldi	r23, 0x04	; 4
    1fca:	ce 01       	movw	r24, r28
    1fcc:	c7 96       	adiw	r24, 0x37	; 55
    1fce:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    1fd2:	89 e0       	ldi	r24, 0x09	; 9
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    1fda:	4c 01       	movw	r8, r24
    1fdc:	a6 01       	movw	r20, r12
    1fde:	be 01       	movw	r22, r28
    1fe0:	69 5c       	subi	r22, 0xC9	; 201
    1fe2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fe4:	0e 94 0a 07 	call	0xe14	; 0xe14 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Page>
    1fe8:	b4 01       	movw	r22, r8
    1fea:	c5 01       	movw	r24, r10
    1fec:	2a d4       	rcall	.+2132   	; 0x2842 <_ZN9EZUI_Menu7addItemEP17EZUI_Control_Link>
    1fee:	ce 01       	movw	r24, r28
    1ff0:	c7 96       	adiw	r24, 0x37	; 55
    1ff2:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
	//MenuAnalogsMonitor->addItem(new EZUI_Control_Link("Analogs 6 to 11",Analogs_6_to_11));
	//MenuAnalogsMonitor->addItem(new EZUI_Control_Link("Analogs 12 to 15",Analogs_12_to_15));
	MenuAnalogsMonitor->addItem(new EZUI_Control_Link("Back",MainMenu));
    1ff6:	68 e1       	ldi	r22, 0x18	; 24
    1ff8:	74 e0       	ldi	r23, 0x04	; 4
    1ffa:	ce 01       	movw	r24, r28
    1ffc:	c1 96       	adiw	r24, 0x31	; 49
    1ffe:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    2002:	89 e0       	ldi	r24, 0x09	; 9
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    200a:	6c 01       	movw	r12, r24
    200c:	a8 01       	movw	r20, r16
    200e:	be 01       	movw	r22, r28
    2010:	6f 5c       	subi	r22, 0xCF	; 207
    2012:	7f 4f       	sbci	r23, 0xFF	; 255
    2014:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Menu>
    2018:	b6 01       	movw	r22, r12
    201a:	c5 01       	movw	r24, r10
    201c:	12 d4       	rcall	.+2084   	; 0x2842 <_ZN9EZUI_Menu7addItemEP17EZUI_Control_Link>
    201e:	ce 01       	movw	r24, r28
    2020:	c1 96       	adiw	r24, 0x31	; 49
    2022:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
	
	/***************************************
	  HLT_BP - RTD Diagnostics Menu
	***************************************/
	EZUI_Page * Page_HLT_BP = new EZUI_Page("HLT BP");/*
    2026:	6c e2       	ldi	r22, 0x2C	; 44
    2028:	74 e0       	ldi	r23, 0x04	; 4
    202a:	ce 01       	movw	r24, r28
    202c:	8b 96       	adiw	r24, 0x2b	; 43
    202e:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    2032:	8e e2       	ldi	r24, 0x2E	; 46
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    203a:	4c 01       	movw	r8, r24
    203c:	be 01       	movw	r22, r28
    203e:	65 5d       	subi	r22, 0xD5	; 213
    2040:	7f 4f       	sbci	r23, 0xFF	; 255
    2042:	0e 94 4b 1a 	call	0x3496	; 0x3496 <_ZN9EZUI_PageC1E6String>
    2046:	ce 01       	movw	r24, r28
    2048:	8b 96       	adiw	r24, 0x2b	; 43
    204a:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
	Page_BK_OP->addItem(new EZUI_PageItem(14,2,BK_RTD_OP->degC));
	*/
	/***************************************
	  RTD Diagnostics Menu
	***************************************/
	EZUI_Menu * MenuRTDMonitor = new EZUI_Menu("RTD Diagnostics");
    204e:	63 e3       	ldi	r22, 0x33	; 51
    2050:	74 e0       	ldi	r23, 0x04	; 4
    2052:	ce 01       	movw	r24, r28
    2054:	85 96       	adiw	r24, 0x25	; 37
    2056:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    205a:	8d e1       	ldi	r24, 0x1D	; 29
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    2062:	6c 01       	movw	r12, r24
    2064:	be 01       	movw	r22, r28
    2066:	6b 5d       	subi	r22, 0xDB	; 219
    2068:	7f 4f       	sbci	r23, 0xFF	; 255
    206a:	bd d3       	rcall	.+1914   	; 0x27e6 <_ZN9EZUI_MenuC1E6String>
    206c:	ce 01       	movw	r24, r28
    206e:	85 96       	adiw	r24, 0x25	; 37
    2070:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
	Page_HLT_BP->addItem(0,3,new EZUI_Control_Link("Back",MenuRTDMonitor));
    2074:	68 e1       	ldi	r22, 0x18	; 24
    2076:	74 e0       	ldi	r23, 0x04	; 4
    2078:	ce 01       	movw	r24, r28
    207a:	4f 96       	adiw	r24, 0x1f	; 31
    207c:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    2080:	89 e0       	ldi	r24, 0x09	; 9
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    2088:	3c 01       	movw	r6, r24
    208a:	a6 01       	movw	r20, r12
    208c:	be 01       	movw	r22, r28
    208e:	61 5e       	subi	r22, 0xE1	; 225
    2090:	7f 4f       	sbci	r23, 0xFF	; 255
    2092:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Menu>
    2096:	93 01       	movw	r18, r6
    2098:	43 e0       	ldi	r20, 0x03	; 3
    209a:	60 e0       	ldi	r22, 0x00	; 0
    209c:	c4 01       	movw	r24, r8
    209e:	0e 94 97 1a 	call	0x352e	; 0x352e <_ZN9EZUI_Page7addItemEhhP17EZUI_Control_Link>
    20a2:	ce 01       	movw	r24, r28
    20a4:	4f 96       	adiw	r24, 0x1f	; 31
    20a6:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
	//Page_HLT_OP->addItem(new EZUI_PageItem(0,3,new EZUI_Control_Link("Back",MenuRTDMonitor)));
	//Page_MLT_BP->addItem(new EZUI_PageItem(0,3,new EZUI_Control_Link("Back",MenuRTDMonitor)));
	//Page_MLT_OP->addItem(new EZUI_PageItem(0,3,new EZUI_Control_Link("Back",MenuRTDMonitor)));
	//Page_BK_BP->addItem(new EZUI_PageItem(0,3,new EZUI_Control_Link("Back",MenuRTDMonitor)));
	//Page_BK_OP->addItem(new EZUI_PageItem(0,3,new EZUI_Control_Link("Back",MenuRTDMonitor)));
	MenuRTDMonitor->addItem(new EZUI_Control_Link("HLT BP",Page_HLT_BP));
    20aa:	6c e2       	ldi	r22, 0x2C	; 44
    20ac:	74 e0       	ldi	r23, 0x04	; 4
    20ae:	ce 01       	movw	r24, r28
    20b0:	49 96       	adiw	r24, 0x19	; 25
    20b2:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    20b6:	89 e0       	ldi	r24, 0x09	; 9
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    20be:	3c 01       	movw	r6, r24
    20c0:	a4 01       	movw	r20, r8
    20c2:	be 01       	movw	r22, r28
    20c4:	67 5e       	subi	r22, 0xE7	; 231
    20c6:	7f 4f       	sbci	r23, 0xFF	; 255
    20c8:	0e 94 0a 07 	call	0xe14	; 0xe14 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Page>
    20cc:	b3 01       	movw	r22, r6
    20ce:	c6 01       	movw	r24, r12
    20d0:	b8 d3       	rcall	.+1904   	; 0x2842 <_ZN9EZUI_Menu7addItemEP17EZUI_Control_Link>
    20d2:	ce 01       	movw	r24, r28
    20d4:	49 96       	adiw	r24, 0x19	; 25
    20d6:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
	//MenuRTDMonitor->addItem(new EZUI_Control_Link("HLT OP",Page_HLT_OP));
	//MenuRTDMonitor->addItem(new EZUI_Control_Link("MLT BP",Page_MLT_BP));
	//MenuRTDMonitor->addItem(new EZUI_Control_Link("MLT OP",Page_MLT_OP));
	//MenuRTDMonitor->addItem(new EZUI_Control_Link("BK BP",Page_BK_BP));
	//MenuRTDMonitor->addItem(new EZUI_Control_Link("BK OP",Page_BK_OP));
	MenuRTDMonitor->addItem(new EZUI_Control_Link("Back",MainMenu));
    20da:	68 e1       	ldi	r22, 0x18	; 24
    20dc:	74 e0       	ldi	r23, 0x04	; 4
    20de:	ce 01       	movw	r24, r28
    20e0:	43 96       	adiw	r24, 0x13	; 19
    20e2:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    20e6:	89 e0       	ldi	r24, 0x09	; 9
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    20ee:	4c 01       	movw	r8, r24
    20f0:	a8 01       	movw	r20, r16
    20f2:	be 01       	movw	r22, r28
    20f4:	6d 5e       	subi	r22, 0xED	; 237
    20f6:	7f 4f       	sbci	r23, 0xFF	; 255
    20f8:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Menu>
    20fc:	b4 01       	movw	r22, r8
    20fe:	c6 01       	movw	r24, r12
    2100:	a0 d3       	rcall	.+1856   	; 0x2842 <_ZN9EZUI_Menu7addItemEP17EZUI_Control_Link>
    2102:	ce 01       	movw	r24, r28
    2104:	43 96       	adiw	r24, 0x13	; 19
    2106:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
	/***************************************
	  Build the Main Menu and Set the Display
	***************************************/
	//MainMenu->addItem(new EZUI_Control_Link("Alarm Test",MenuAlarmTest));
	//MainMenu->addItem(new EZUI_Control_Link("Pump Monitor",PagePumpMonitor));
	MainMenu->addItem(new EZUI_Control_Link("Analogs Monitor",MenuAnalogsMonitor));
    210a:	63 e4       	ldi	r22, 0x43	; 67
    210c:	74 e0       	ldi	r23, 0x04	; 4
    210e:	ce 01       	movw	r24, r28
    2110:	0d 96       	adiw	r24, 0x0d	; 13
    2112:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    2116:	89 e0       	ldi	r24, 0x09	; 9
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    211e:	4c 01       	movw	r8, r24
    2120:	a5 01       	movw	r20, r10
    2122:	be 01       	movw	r22, r28
    2124:	63 5f       	subi	r22, 0xF3	; 243
    2126:	7f 4f       	sbci	r23, 0xFF	; 255
    2128:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Menu>
    212c:	b4 01       	movw	r22, r8
    212e:	c8 01       	movw	r24, r16
    2130:	88 d3       	rcall	.+1808   	; 0x2842 <_ZN9EZUI_Menu7addItemEP17EZUI_Control_Link>
    2132:	ce 01       	movw	r24, r28
    2134:	0d 96       	adiw	r24, 0x0d	; 13
    2136:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
	MainMenu->addItem(new EZUI_Control_Link("RTD Diagnostics",MenuRTDMonitor));
    213a:	63 e3       	ldi	r22, 0x33	; 51
    213c:	74 e0       	ldi	r23, 0x04	; 4
    213e:	ce 01       	movw	r24, r28
    2140:	07 96       	adiw	r24, 0x07	; 7
    2142:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    2146:	89 e0       	ldi	r24, 0x09	; 9
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    214e:	5c 01       	movw	r10, r24
    2150:	a6 01       	movw	r20, r12
    2152:	be 01       	movw	r22, r28
    2154:	69 5f       	subi	r22, 0xF9	; 249
    2156:	7f 4f       	sbci	r23, 0xFF	; 255
    2158:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Menu>
    215c:	b5 01       	movw	r22, r10
    215e:	c8 01       	movw	r24, r16
    2160:	70 d3       	rcall	.+1760   	; 0x2842 <_ZN9EZUI_Menu7addItemEP17EZUI_Control_Link>
    2162:	ce 01       	movw	r24, r28
    2164:	07 96       	adiw	r24, 0x07	; 7
    2166:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
	MainMenu->addItem(new EZUI_Control_Link("RC Diagnostics",MenuRCDiag));
    216a:	63 e5       	ldi	r22, 0x53	; 83
    216c:	74 e0       	ldi	r23, 0x04	; 4
    216e:	ce 01       	movw	r24, r28
    2170:	01 96       	adiw	r24, 0x01	; 1
    2172:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    2176:	89 e0       	ldi	r24, 0x09	; 9
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    217e:	6c 01       	movw	r12, r24
    2180:	a7 01       	movw	r20, r14
    2182:	be 01       	movw	r22, r28
    2184:	6f 5f       	subi	r22, 0xFF	; 255
    2186:	7f 4f       	sbci	r23, 0xFF	; 255
    2188:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Menu>
    218c:	b6 01       	movw	r22, r12
    218e:	c8 01       	movw	r24, r16
    2190:	58 d3       	rcall	.+1712   	; 0x2842 <_ZN9EZUI_Menu7addItemEP17EZUI_Control_Link>
    2192:	ce 01       	movw	r24, r28
    2194:	01 96       	adiw	r24, 0x01	; 1
    2196:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>

	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.println("Done.");
    219a:	68 e3       	ldi	r22, 0x38	; 56
    219c:	72 e0       	ldi	r23, 0x02	; 2
    219e:	88 ea       	ldi	r24, 0xA8	; 168
    21a0:	9a e0       	ldi	r25, 0x0A	; 10
    21a2:	0e 94 ca 30 	call	0x6194	; 0x6194 <_ZN5Print7printlnEPKc>
	#endif
}
    21a6:	c2 58       	subi	r28, 0x82	; 130
    21a8:	df 4f       	sbci	r29, 0xFF	; 255
    21aa:	0f b6       	in	r0, 0x3f	; 63
    21ac:	f8 94       	cli
    21ae:	de bf       	out	0x3e, r29	; 62
    21b0:	0f be       	out	0x3f, r0	; 63
    21b2:	cd bf       	out	0x3d, r28	; 61
    21b4:	df 91       	pop	r29
    21b6:	cf 91       	pop	r28
    21b8:	1f 91       	pop	r17
    21ba:	0f 91       	pop	r16
    21bc:	ff 90       	pop	r15
    21be:	ef 90       	pop	r14
    21c0:	df 90       	pop	r13
    21c2:	cf 90       	pop	r12
    21c4:	bf 90       	pop	r11
    21c6:	af 90       	pop	r10
    21c8:	9f 90       	pop	r9
    21ca:	8f 90       	pop	r8
    21cc:	7f 90       	pop	r7
    21ce:	6f 90       	pop	r6
    21d0:	08 95       	ret

000021d2 <_GLOBAL__sub_I_MAIN_UI>:
    21d2:	0f 93       	push	r16
    21d4:	1f 93       	push	r17
    21d6:	cf 93       	push	r28
    21d8:	df 93       	push	r29
    21da:	00 d0       	rcall	.+0      	; 0x21dc <_GLOBAL__sub_I_MAIN_UI+0xa>
    21dc:	00 d0       	rcall	.+0      	; 0x21de <_GLOBAL__sub_I_MAIN_UI+0xc>
    21de:	cd b7       	in	r28, 0x3d	; 61
    21e0:	de b7       	in	r29, 0x3e	; 62
 * ----------------------------------------------------------------
 */

#include "MAIN_UI.h"

EZUI *MAIN_UI = new EZUI("MAIN");
    21e2:	62 e6       	ldi	r22, 0x62	; 98
    21e4:	74 e0       	ldi	r23, 0x04	; 4
    21e6:	ce 01       	movw	r24, r28
    21e8:	01 96       	adiw	r24, 0x01	; 1
    21ea:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    21ee:	86 e1       	ldi	r24, 0x16	; 22
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    21f6:	8c 01       	movw	r16, r24
    21f8:	be 01       	movw	r22, r28
    21fa:	6f 5f       	subi	r22, 0xFF	; 255
    21fc:	7f 4f       	sbci	r23, 0xFF	; 255
    21fe:	0e 94 50 20 	call	0x40a0	; 0x40a0 <_ZN4EZUIC1E6String>
    2202:	10 93 d3 09 	sts	0x09D3, r17
    2206:	00 93 d2 09 	sts	0x09D2, r16
    220a:	ce 01       	movw	r24, r28
    220c:	01 96       	adiw	r24, 0x01	; 1
    220e:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
	MainMenu->addItem(new EZUI_Control_Link("RC Diagnostics",MenuRCDiag));

	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.println("Done.");
	#endif
}
    2212:	26 96       	adiw	r28, 0x06	; 6
    2214:	0f b6       	in	r0, 0x3f	; 63
    2216:	f8 94       	cli
    2218:	de bf       	out	0x3e, r29	; 62
    221a:	0f be       	out	0x3f, r0	; 63
    221c:	cd bf       	out	0x3d, r28	; 61
    221e:	df 91       	pop	r29
    2220:	cf 91       	pop	r28
    2222:	1f 91       	pop	r17
    2224:	0f 91       	pop	r16
    2226:	08 95       	ret

00002228 <_Z11MLT_UI_initv>:

#include "MLT_UI.h"

EZUI *MLT_UI = new EZUI("MLT");

void MLT_UI_init(){
    2228:	cf 92       	push	r12
    222a:	df 92       	push	r13
    222c:	ef 92       	push	r14
    222e:	ff 92       	push	r15
    2230:	0f 93       	push	r16
    2232:	1f 93       	push	r17
    2234:	cf 93       	push	r28
    2236:	df 93       	push	r29
    2238:	cd b7       	in	r28, 0x3d	; 61
    223a:	de b7       	in	r29, 0x3e	; 62
    223c:	a4 97       	sbiw	r28, 0x24	; 36
    223e:	0f b6       	in	r0, 0x3f	; 63
    2240:	f8 94       	cli
    2242:	de bf       	out	0x3e, r29	; 62
    2244:	0f be       	out	0x3f, r0	; 63
    2246:	cd bf       	out	0x3d, r28	; 61
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.print("Initializing UI - " + MLT_UI->Name + "...");
    2248:	00 91 d4 09 	lds	r16, 0x09D4
    224c:	10 91 d5 09 	lds	r17, 0x09D5
    2250:	0c 5f       	subi	r16, 0xFC	; 252
    2252:	1f 4f       	sbci	r17, 0xFF	; 255
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2254:	69 e0       	ldi	r22, 0x09	; 9
    2256:	72 e0       	ldi	r23, 0x02	; 2
    2258:	ce 01       	movw	r24, r28
    225a:	4f 96       	adiw	r24, 0x1f	; 31
    225c:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    2260:	b8 01       	movw	r22, r16
    2262:	ce 01       	movw	r24, r28
    2264:	4f 96       	adiw	r24, 0x1f	; 31
    2266:	0e 94 36 38 	call	0x706c	; 0x706c <_ZplRK15StringSumHelperRK6String>
    226a:	61 e0       	ldi	r22, 0x01	; 1
    226c:	75 e0       	ldi	r23, 0x05	; 5
    226e:	0e 94 47 38 	call	0x708e	; 0x708e <_ZplRK15StringSumHelperPKc>
    2272:	bc 01       	movw	r22, r24
    2274:	88 ea       	ldi	r24, 0xA8	; 168
    2276:	9a e0       	ldi	r25, 0x0A	; 10
    2278:	0e 94 81 30 	call	0x6102	; 0x6102 <_ZN5Print5printERK6String>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    227c:	ce 01       	movw	r24, r28
    227e:	4f 96       	adiw	r24, 0x1f	; 31
    2280:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
	#endif
	
	/***************************************
	  Setup + Initialization
	***************************************/
	MLT_UI->attatchEncoder(MLT_ENC);
    2284:	60 91 8a 06 	lds	r22, 0x068A
    2288:	70 91 8b 06 	lds	r23, 0x068B
    228c:	80 91 d4 09 	lds	r24, 0x09D4
    2290:	90 91 d5 09 	lds	r25, 0x09D5
    2294:	0e 94 73 20 	call	0x40e6	; 0x40e6 <_ZN4EZUI14attatchEncoderEP22ClickEncoderWithEvents>
	MLT_UI->attatchLCD(&MLT_LCD);
    2298:	6c e8       	ldi	r22, 0x8C	; 140
    229a:	76 e0       	ldi	r23, 0x06	; 6
    229c:	80 91 d4 09 	lds	r24, 0x09D4
    22a0:	90 91 d5 09 	lds	r25, 0x09D5
    22a4:	0e 94 a9 20 	call	0x4152	; 0x4152 <_ZN4EZUI10attatchLCDEP17LiquidCrystal_I2C>
	
	EZUI_Menu * MainMenu = new EZUI_Menu("MLT-Main-Menu");
    22a8:	67 e6       	ldi	r22, 0x67	; 103
    22aa:	74 e0       	ldi	r23, 0x04	; 4
    22ac:	ce 01       	movw	r24, r28
    22ae:	49 96       	adiw	r24, 0x19	; 25
    22b0:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    22b4:	8d e1       	ldi	r24, 0x1D	; 29
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    22bc:	8c 01       	movw	r16, r24
    22be:	be 01       	movw	r22, r28
    22c0:	67 5e       	subi	r22, 0xE7	; 231
    22c2:	7f 4f       	sbci	r23, 0xFF	; 255
    22c4:	90 d2       	rcall	.+1312   	; 0x27e6 <_ZN9EZUI_MenuC1E6String>
    22c6:	ce 01       	movw	r24, r28
    22c8:	49 96       	adiw	r24, 0x19	; 25
    22ca:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
	
	EZUI_Page * TestPage = new EZUI_Page((String)("TestPage"));
    22ce:	69 e2       	ldi	r22, 0x29	; 41
    22d0:	72 e0       	ldi	r23, 0x02	; 2
    22d2:	ce 01       	movw	r24, r28
    22d4:	43 96       	adiw	r24, 0x13	; 19
    22d6:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    22da:	8e e2       	ldi	r24, 0x2E	; 46
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    22e2:	7c 01       	movw	r14, r24
    22e4:	be 01       	movw	r22, r28
    22e6:	6d 5e       	subi	r22, 0xED	; 237
    22e8:	7f 4f       	sbci	r23, 0xFF	; 255
    22ea:	0e 94 4b 1a 	call	0x3496	; 0x3496 <_ZN9EZUI_PageC1E6String>
    22ee:	ce 01       	movw	r24, r28
    22f0:	43 96       	adiw	r24, 0x13	; 19
    22f2:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
	TestPage->addItem(0,3,new EZUI_Control_Link("Back",MainMenu));
    22f6:	68 e1       	ldi	r22, 0x18	; 24
    22f8:	74 e0       	ldi	r23, 0x04	; 4
    22fa:	ce 01       	movw	r24, r28
    22fc:	0d 96       	adiw	r24, 0x0d	; 13
    22fe:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    2302:	89 e0       	ldi	r24, 0x09	; 9
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    230a:	6c 01       	movw	r12, r24
    230c:	a8 01       	movw	r20, r16
    230e:	be 01       	movw	r22, r28
    2310:	63 5f       	subi	r22, 0xF3	; 243
    2312:	7f 4f       	sbci	r23, 0xFF	; 255
    2314:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Menu>
    2318:	96 01       	movw	r18, r12
    231a:	43 e0       	ldi	r20, 0x03	; 3
    231c:	60 e0       	ldi	r22, 0x00	; 0
    231e:	c7 01       	movw	r24, r14
    2320:	0e 94 97 1a 	call	0x352e	; 0x352e <_ZN9EZUI_Page7addItemEhhP17EZUI_Control_Link>
    2324:	ce 01       	movw	r24, r28
    2326:	0d 96       	adiw	r24, 0x0d	; 13
    2328:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
	
	MainMenu->addItem(new EZUI_Control_Link("TestPage",TestPage));
    232c:	69 e2       	ldi	r22, 0x29	; 41
    232e:	72 e0       	ldi	r23, 0x02	; 2
    2330:	ce 01       	movw	r24, r28
    2332:	07 96       	adiw	r24, 0x07	; 7
    2334:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    2338:	89 e0       	ldi	r24, 0x09	; 9
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    2340:	6c 01       	movw	r12, r24
    2342:	a7 01       	movw	r20, r14
    2344:	be 01       	movw	r22, r28
    2346:	69 5f       	subi	r22, 0xF9	; 249
    2348:	7f 4f       	sbci	r23, 0xFF	; 255
    234a:	0e 94 0a 07 	call	0xe14	; 0xe14 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Page>
    234e:	b6 01       	movw	r22, r12
    2350:	c8 01       	movw	r24, r16
    2352:	77 d2       	rcall	.+1262   	; 0x2842 <_ZN9EZUI_Menu7addItemEP17EZUI_Control_Link>
    2354:	ce 01       	movw	r24, r28
    2356:	07 96       	adiw	r24, 0x07	; 7
    2358:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
	MainMenu->addItem(new EZUI_Control_Link("Test2",MainMenu));
    235c:	62 e3       	ldi	r22, 0x32	; 50
    235e:	72 e0       	ldi	r23, 0x02	; 2
    2360:	ce 01       	movw	r24, r28
    2362:	01 96       	adiw	r24, 0x01	; 1
    2364:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    2368:	89 e0       	ldi	r24, 0x09	; 9
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    2370:	7c 01       	movw	r14, r24
    2372:	a8 01       	movw	r20, r16
    2374:	be 01       	movw	r22, r28
    2376:	6f 5f       	subi	r22, 0xFF	; 255
    2378:	7f 4f       	sbci	r23, 0xFF	; 255
    237a:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Menu>
    237e:	b7 01       	movw	r22, r14
    2380:	c8 01       	movw	r24, r16
    2382:	5f d2       	rcall	.+1214   	; 0x2842 <_ZN9EZUI_Menu7addItemEP17EZUI_Control_Link>
    2384:	ce 01       	movw	r24, r28
    2386:	01 96       	adiw	r24, 0x01	; 1
    2388:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
	/***************************************
	  MLT Menu
	***************************************/
	//MLTMainMenu->addItem(new EZUI_Control_Link("Monitor",MonitorPage));
	
	MLT_UI->setDisplay(MainMenu);
    238c:	b8 01       	movw	r22, r16
    238e:	80 91 d4 09 	lds	r24, 0x09D4
    2392:	90 91 d5 09 	lds	r25, 0x09D5
    2396:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <_ZN4EZUI10setDisplayEP9EZUI_Menu>
	
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.println("Done.");
    239a:	68 e3       	ldi	r22, 0x38	; 56
    239c:	72 e0       	ldi	r23, 0x02	; 2
    239e:	88 ea       	ldi	r24, 0xA8	; 168
    23a0:	9a e0       	ldi	r25, 0x0A	; 10
    23a2:	0e 94 ca 30 	call	0x6194	; 0x6194 <_ZN5Print7printlnEPKc>
	#endif
}
    23a6:	a4 96       	adiw	r28, 0x24	; 36
    23a8:	0f b6       	in	r0, 0x3f	; 63
    23aa:	f8 94       	cli
    23ac:	de bf       	out	0x3e, r29	; 62
    23ae:	0f be       	out	0x3f, r0	; 63
    23b0:	cd bf       	out	0x3d, r28	; 61
    23b2:	df 91       	pop	r29
    23b4:	cf 91       	pop	r28
    23b6:	1f 91       	pop	r17
    23b8:	0f 91       	pop	r16
    23ba:	ff 90       	pop	r15
    23bc:	ef 90       	pop	r14
    23be:	df 90       	pop	r13
    23c0:	cf 90       	pop	r12
    23c2:	08 95       	ret

000023c4 <_GLOBAL__sub_I_MLT_UI>:
    23c4:	0f 93       	push	r16
    23c6:	1f 93       	push	r17
    23c8:	cf 93       	push	r28
    23ca:	df 93       	push	r29
    23cc:	00 d0       	rcall	.+0      	; 0x23ce <_GLOBAL__sub_I_MLT_UI+0xa>
    23ce:	00 d0       	rcall	.+0      	; 0x23d0 <_GLOBAL__sub_I_MLT_UI+0xc>
    23d0:	cd b7       	in	r28, 0x3d	; 61
    23d2:	de b7       	in	r29, 0x3e	; 62
 * ----------------------------------------------------------------
 */

#include "MLT_UI.h"

EZUI *MLT_UI = new EZUI("MLT");
    23d4:	65 e7       	ldi	r22, 0x75	; 117
    23d6:	74 e0       	ldi	r23, 0x04	; 4
    23d8:	ce 01       	movw	r24, r28
    23da:	01 96       	adiw	r24, 0x01	; 1
    23dc:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    23e0:	86 e1       	ldi	r24, 0x16	; 22
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    23e8:	8c 01       	movw	r16, r24
    23ea:	be 01       	movw	r22, r28
    23ec:	6f 5f       	subi	r22, 0xFF	; 255
    23ee:	7f 4f       	sbci	r23, 0xFF	; 255
    23f0:	0e 94 50 20 	call	0x40a0	; 0x40a0 <_ZN4EZUIC1E6String>
    23f4:	10 93 d5 09 	sts	0x09D5, r17
    23f8:	00 93 d4 09 	sts	0x09D4, r16
    23fc:	ce 01       	movw	r24, r28
    23fe:	01 96       	adiw	r24, 0x01	; 1
    2400:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
	MLT_UI->setDisplay(MainMenu);
	
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.println("Done.");
	#endif
}
    2404:	26 96       	adiw	r28, 0x06	; 6
    2406:	0f b6       	in	r0, 0x3f	; 63
    2408:	f8 94       	cli
    240a:	de bf       	out	0x3e, r29	; 62
    240c:	0f be       	out	0x3f, r0	; 63
    240e:	cd bf       	out	0x3d, r28	; 61
    2410:	df 91       	pop	r29
    2412:	cf 91       	pop	r28
    2414:	1f 91       	pop	r17
    2416:	0f 91       	pop	r16
    2418:	08 95       	ret

0000241a <_ZN22ClickEncoderWithEvents4ReadEv>:
// default destructor
ClickEncoderWithEvents::~ClickEncoderWithEvents()
{
} //~ClickEncoderWithEvents

void ClickEncoderWithEvents::Read(){
    241a:	cf 93       	push	r28
    241c:	df 93       	push	r29
    241e:	ec 01       	movw	r28, r24
	//	Serial.print("Encoder Value: ");
	//	Serial.println(value);
	//}
	
			//See if Incremented or not
			t_value += this->getValue();
    2420:	0e 94 c7 25 	call	0x4b8e	; 0x4b8e <_ZN12ClickEncoder8getValueEv>
    2424:	2a a5       	ldd	r18, Y+42	; 0x2a
    2426:	3b a5       	ldd	r19, Y+43	; 0x2b
    2428:	82 0f       	add	r24, r18
    242a:	93 1f       	adc	r25, r19
    242c:	9b a7       	std	Y+43, r25	; 0x2b
    242e:	8a a7       	std	Y+42, r24	; 0x2a
			if(t_value > t_prev_value){
    2430:	28 a5       	ldd	r18, Y+40	; 0x28
    2432:	39 a5       	ldd	r19, Y+41	; 0x29
    2434:	28 17       	cp	r18, r24
    2436:	39 07       	cpc	r19, r25
    2438:	1c f5       	brge	.+70     	; 0x2480 <_ZN22ClickEncoderWithEvents4ReadEv+0x66>
				if( !(IncrementHandler == NULL)){
    243a:	e8 8d       	ldd	r30, Y+24	; 0x18
    243c:	f9 8d       	ldd	r31, Y+25	; 0x19
    243e:	30 97       	sbiw	r30, 0x00	; 0
    2440:	19 f4       	brne	.+6      	; 0x2448 <_ZN22ClickEncoderWithEvents4ReadEv+0x2e>
    2442:	2a 8d       	ldd	r18, Y+26	; 0x1a
    2444:	20 ff       	sbrs	r18, 0
    2446:	41 c0       	rjmp	.+130    	; 0x24ca <_ZN22ClickEncoderWithEvents4ReadEv+0xb0>
				
					t_prev_value = t_value;
    2448:	99 a7       	std	Y+41, r25	; 0x29
    244a:	88 a7       	std	Y+40, r24	; 0x28
					(UI->*IncrementHandler)();
    244c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    244e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2450:	80 ff       	sbrs	r24, 0
    2452:	0e c0       	rjmp	.+28     	; 0x2470 <_ZN22ClickEncoderWithEvents4ReadEv+0x56>
    2454:	ae 85       	ldd	r26, Y+14	; 0x0e
    2456:	bf 85       	ldd	r27, Y+15	; 0x0f
    2458:	9c 01       	movw	r18, r24
    245a:	35 95       	asr	r19
    245c:	27 95       	ror	r18
    245e:	a2 0f       	add	r26, r18
    2460:	b3 1f       	adc	r27, r19
    2462:	2d 91       	ld	r18, X+
    2464:	3c 91       	ld	r19, X
    2466:	e2 0f       	add	r30, r18
    2468:	f3 1f       	adc	r31, r19
    246a:	01 90       	ld	r0, Z+
    246c:	f0 81       	ld	r31, Z
    246e:	e0 2d       	mov	r30, r0
    2470:	95 95       	asr	r25
    2472:	87 95       	ror	r24
    2474:	2e 85       	ldd	r18, Y+14	; 0x0e
    2476:	3f 85       	ldd	r19, Y+15	; 0x0f
    2478:	82 0f       	add	r24, r18
    247a:	93 1f       	adc	r25, r19
    247c:	19 95       	eicall
    247e:	25 c0       	rjmp	.+74     	; 0x24ca <_ZN22ClickEncoderWithEvents4ReadEv+0xb0>
				}
			}else if(t_value < t_prev_value){
    2480:	82 17       	cp	r24, r18
    2482:	93 07       	cpc	r25, r19
    2484:	14 f5       	brge	.+68     	; 0x24ca <_ZN22ClickEncoderWithEvents4ReadEv+0xb0>
				if( !(DecrementHandler == NULL)){
    2486:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2488:	fd 8d       	ldd	r31, Y+29	; 0x1d
    248a:	30 97       	sbiw	r30, 0x00	; 0
    248c:	19 f4       	brne	.+6      	; 0x2494 <_ZN22ClickEncoderWithEvents4ReadEv+0x7a>
    248e:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2490:	20 ff       	sbrs	r18, 0
    2492:	1b c0       	rjmp	.+54     	; 0x24ca <_ZN22ClickEncoderWithEvents4ReadEv+0xb0>
				
					t_prev_value = t_value;
    2494:	99 a7       	std	Y+41, r25	; 0x29
    2496:	88 a7       	std	Y+40, r24	; 0x28
					(UI->*DecrementHandler)();
    2498:	8e 8d       	ldd	r24, Y+30	; 0x1e
    249a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    249c:	80 ff       	sbrs	r24, 0
    249e:	0e c0       	rjmp	.+28     	; 0x24bc <_ZN22ClickEncoderWithEvents4ReadEv+0xa2>
    24a0:	ae 85       	ldd	r26, Y+14	; 0x0e
    24a2:	bf 85       	ldd	r27, Y+15	; 0x0f
    24a4:	9c 01       	movw	r18, r24
    24a6:	35 95       	asr	r19
    24a8:	27 95       	ror	r18
    24aa:	a2 0f       	add	r26, r18
    24ac:	b3 1f       	adc	r27, r19
    24ae:	2d 91       	ld	r18, X+
    24b0:	3c 91       	ld	r19, X
    24b2:	e2 0f       	add	r30, r18
    24b4:	f3 1f       	adc	r31, r19
    24b6:	01 90       	ld	r0, Z+
    24b8:	f0 81       	ld	r31, Z
    24ba:	e0 2d       	mov	r30, r0
    24bc:	95 95       	asr	r25
    24be:	87 95       	ror	r24
    24c0:	2e 85       	ldd	r18, Y+14	; 0x0e
    24c2:	3f 85       	ldd	r19, Y+15	; 0x0f
    24c4:	82 0f       	add	r24, r18
    24c6:	93 1f       	adc	r25, r19
    24c8:	19 95       	eicall
				}
			}
	
			//See if Buttons Clicked
			ClickEncoder::Button b = this->getButton();
    24ca:	ce 01       	movw	r24, r28
    24cc:	0e 94 02 26 	call	0x4c04	; 0x4c04 <_ZN12ClickEncoder9getButtonEv>
			if (b != ClickEncoder::Open) {
    24d0:	88 23       	and	r24, r24
    24d2:	09 f4       	brne	.+2      	; 0x24d6 <_ZN22ClickEncoderWithEvents4ReadEv+0xbc>
    24d4:	54 c0       	rjmp	.+168    	; 0x257e <_ZN22ClickEncoderWithEvents4ReadEv+0x164>
				 switch (b) {
    24d6:	85 30       	cpi	r24, 0x05	; 5
    24d8:	19 f0       	breq	.+6      	; 0x24e0 <_ZN22ClickEncoderWithEvents4ReadEv+0xc6>
    24da:	86 30       	cpi	r24, 0x06	; 6
    24dc:	71 f1       	breq	.+92     	; 0x253a <_ZN22ClickEncoderWithEvents4ReadEv+0x120>
    24de:	4f c0       	rjmp	.+158    	; 0x257e <_ZN22ClickEncoderWithEvents4ReadEv+0x164>
					 case(ClickEncoder::Held):
						break;
					 case(ClickEncoder::Released):
						break;
					 case(ClickEncoder::Clicked):
						if (!(ClickHandler == NULL)){
    24e0:	88 89       	ldd	r24, Y+16	; 0x10
    24e2:	99 89       	ldd	r25, Y+17	; 0x11
    24e4:	89 2b       	or	r24, r25
    24e6:	19 f4       	brne	.+6      	; 0x24ee <_ZN22ClickEncoderWithEvents4ReadEv+0xd4>
    24e8:	8a 89       	ldd	r24, Y+18	; 0x12
    24ea:	80 ff       	sbrs	r24, 0
    24ec:	48 c0       	rjmp	.+144    	; 0x257e <_ZN22ClickEncoderWithEvents4ReadEv+0x164>
							Serial.println("Click Detected!");
    24ee:	69 e7       	ldi	r22, 0x79	; 121
    24f0:	74 e0       	ldi	r23, 0x04	; 4
    24f2:	88 ea       	ldi	r24, 0xA8	; 168
    24f4:	9a e0       	ldi	r25, 0x0A	; 10
    24f6:	0e 94 ca 30 	call	0x6194	; 0x6194 <_ZN5Print7printlnEPKc>
							(UI->*ClickHandler)();
    24fa:	8a 89       	ldd	r24, Y+18	; 0x12
    24fc:	9b 89       	ldd	r25, Y+19	; 0x13
    24fe:	80 fd       	sbrc	r24, 0
    2500:	03 c0       	rjmp	.+6      	; 0x2508 <_ZN22ClickEncoderWithEvents4ReadEv+0xee>
    2502:	e8 89       	ldd	r30, Y+16	; 0x10
    2504:	f9 89       	ldd	r31, Y+17	; 0x11
    2506:	11 c0       	rjmp	.+34     	; 0x252a <_ZN22ClickEncoderWithEvents4ReadEv+0x110>
    2508:	ee 85       	ldd	r30, Y+14	; 0x0e
    250a:	ff 85       	ldd	r31, Y+15	; 0x0f
    250c:	9c 01       	movw	r18, r24
    250e:	35 95       	asr	r19
    2510:	27 95       	ror	r18
    2512:	e2 0f       	add	r30, r18
    2514:	f3 1f       	adc	r31, r19
    2516:	01 90       	ld	r0, Z+
    2518:	f0 81       	ld	r31, Z
    251a:	e0 2d       	mov	r30, r0
    251c:	28 89       	ldd	r18, Y+16	; 0x10
    251e:	39 89       	ldd	r19, Y+17	; 0x11
    2520:	e2 0f       	add	r30, r18
    2522:	f3 1f       	adc	r31, r19
    2524:	01 90       	ld	r0, Z+
    2526:	f0 81       	ld	r31, Z
    2528:	e0 2d       	mov	r30, r0
    252a:	95 95       	asr	r25
    252c:	87 95       	ror	r24
    252e:	2e 85       	ldd	r18, Y+14	; 0x0e
    2530:	3f 85       	ldd	r19, Y+15	; 0x0f
    2532:	82 0f       	add	r24, r18
    2534:	93 1f       	adc	r25, r19
    2536:	19 95       	eicall
    2538:	22 c0       	rjmp	.+68     	; 0x257e <_ZN22ClickEncoderWithEvents4ReadEv+0x164>
					}
					break;
					 case (ClickEncoder::DoubleClicked):
						if (!(DblClickHandler == NULL)){
    253a:	ec 89       	ldd	r30, Y+20	; 0x14
    253c:	fd 89       	ldd	r31, Y+21	; 0x15
    253e:	30 97       	sbiw	r30, 0x00	; 0
    2540:	29 f4       	brne	.+10     	; 0x254c <_ZN22ClickEncoderWithEvents4ReadEv+0x132>
    2542:	8e 89       	ldd	r24, Y+22	; 0x16
    2544:	9f 89       	ldd	r25, Y+23	; 0x17
    2546:	80 fd       	sbrc	r24, 0
    2548:	05 c0       	rjmp	.+10     	; 0x2554 <_ZN22ClickEncoderWithEvents4ReadEv+0x13a>
    254a:	19 c0       	rjmp	.+50     	; 0x257e <_ZN22ClickEncoderWithEvents4ReadEv+0x164>
							(UI->*DblClickHandler)();
    254c:	8e 89       	ldd	r24, Y+22	; 0x16
    254e:	9f 89       	ldd	r25, Y+23	; 0x17
    2550:	80 ff       	sbrs	r24, 0
    2552:	0e c0       	rjmp	.+28     	; 0x2570 <_ZN22ClickEncoderWithEvents4ReadEv+0x156>
    2554:	ae 85       	ldd	r26, Y+14	; 0x0e
    2556:	bf 85       	ldd	r27, Y+15	; 0x0f
    2558:	9c 01       	movw	r18, r24
    255a:	35 95       	asr	r19
    255c:	27 95       	ror	r18
    255e:	a2 0f       	add	r26, r18
    2560:	b3 1f       	adc	r27, r19
    2562:	2d 91       	ld	r18, X+
    2564:	3c 91       	ld	r19, X
    2566:	e2 0f       	add	r30, r18
    2568:	f3 1f       	adc	r31, r19
    256a:	01 90       	ld	r0, Z+
    256c:	f0 81       	ld	r31, Z
    256e:	e0 2d       	mov	r30, r0
    2570:	95 95       	asr	r25
    2572:	87 95       	ror	r24
    2574:	2e 85       	ldd	r18, Y+14	; 0x0e
    2576:	3f 85       	ldd	r19, Y+15	; 0x0f
    2578:	82 0f       	add	r24, r18
    257a:	93 1f       	adc	r25, r19
    257c:	19 95       	eicall
						}
						break;
				 }
			}
}
    257e:	df 91       	pop	r29
    2580:	cf 91       	pop	r28
    2582:	08 95       	ret

00002584 <_ZN10LinkedListI13EZUI_MenuItemE4sizeEv>:
}

// default destructor
EZUI_Menu::~EZUI_Menu()
{
}
    2584:	fc 01       	movw	r30, r24
    2586:	82 81       	ldd	r24, Z+2	; 0x02
    2588:	93 81       	ldd	r25, Z+3	; 0x03
    258a:	08 95       	ret

0000258c <_ZN10LinkedListI13EZUI_MenuItemE5clearEv>:
    258c:	0f 93       	push	r16
    258e:	1f 93       	push	r17
    2590:	cf 93       	push	r28
    2592:	df 93       	push	r29
    2594:	00 d0       	rcall	.+0      	; 0x2596 <_ZN10LinkedListI13EZUI_MenuItemE5clearEv+0xa>
    2596:	1f 92       	push	r1
    2598:	1f 92       	push	r1
    259a:	cd b7       	in	r28, 0x3d	; 61
    259c:	de b7       	in	r29, 0x3e	; 62
    259e:	8c 01       	movw	r16, r24
    25a0:	0d c0       	rjmp	.+26     	; 0x25bc <_ZN10LinkedListI13EZUI_MenuItemE5clearEv+0x30>
    25a2:	d8 01       	movw	r26, r16
    25a4:	ed 91       	ld	r30, X+
    25a6:	fc 91       	ld	r31, X
    25a8:	06 84       	ldd	r0, Z+14	; 0x0e
    25aa:	f7 85       	ldd	r31, Z+15	; 0x0f
    25ac:	e0 2d       	mov	r30, r0
    25ae:	b8 01       	movw	r22, r16
    25b0:	ce 01       	movw	r24, r28
    25b2:	01 96       	adiw	r24, 0x01	; 1
    25b4:	19 95       	eicall
    25b6:	ce 01       	movw	r24, r28
    25b8:	01 96       	adiw	r24, 0x01	; 1
    25ba:	fc d4       	rcall	.+2552   	; 0x2fb4 <_ZN13EZUI_MenuItemD1Ev>
    25bc:	d8 01       	movw	r26, r16
    25be:	ed 91       	ld	r30, X+
    25c0:	fc 91       	ld	r31, X
    25c2:	01 90       	ld	r0, Z+
    25c4:	f0 81       	ld	r31, Z
    25c6:	e0 2d       	mov	r30, r0
    25c8:	c8 01       	movw	r24, r16
    25ca:	19 95       	eicall
    25cc:	18 16       	cp	r1, r24
    25ce:	19 06       	cpc	r1, r25
    25d0:	44 f3       	brlt	.-48     	; 0x25a2 <_ZN10LinkedListI13EZUI_MenuItemE5clearEv+0x16>
    25d2:	0f 90       	pop	r0
    25d4:	0f 90       	pop	r0
    25d6:	0f 90       	pop	r0
    25d8:	0f 90       	pop	r0
    25da:	0f 90       	pop	r0
    25dc:	df 91       	pop	r29
    25de:	cf 91       	pop	r28
    25e0:	1f 91       	pop	r17
    25e2:	0f 91       	pop	r16
    25e4:	08 95       	ret

000025e6 <_ZN10LinkedListI13EZUI_MenuItemE5shiftEv>:
    25e6:	af 92       	push	r10
    25e8:	bf 92       	push	r11
    25ea:	cf 92       	push	r12
    25ec:	df 92       	push	r13
    25ee:	ef 92       	push	r14
    25f0:	ff 92       	push	r15
    25f2:	0f 93       	push	r16
    25f4:	1f 93       	push	r17
    25f6:	cf 93       	push	r28
    25f8:	df 93       	push	r29
    25fa:	00 d0       	rcall	.+0      	; 0x25fc <_ZN10LinkedListI13EZUI_MenuItemE5shiftEv+0x16>
    25fc:	1f 92       	push	r1
    25fe:	1f 92       	push	r1
    2600:	cd b7       	in	r28, 0x3d	; 61
    2602:	de b7       	in	r29, 0x3e	; 62
    2604:	6c 01       	movw	r12, r24
    2606:	8b 01       	movw	r16, r22
    2608:	db 01       	movw	r26, r22
    260a:	12 96       	adiw	r26, 0x02	; 2
    260c:	8d 91       	ld	r24, X+
    260e:	9c 91       	ld	r25, X
    2610:	13 97       	sbiw	r26, 0x03	; 3
    2612:	18 16       	cp	r1, r24
    2614:	19 06       	cpc	r1, r25
    2616:	1c f0       	brlt	.+6      	; 0x261e <_ZN10LinkedListI13EZUI_MenuItemE5shiftEv+0x38>
    2618:	c6 01       	movw	r24, r12
    261a:	c5 d4       	rcall	.+2442   	; 0x2fa6 <_ZN13EZUI_MenuItemC1Ev>
    261c:	38 c0       	rjmp	.+112    	; 0x268e <_ZN10LinkedListI13EZUI_MenuItemE5shiftEv+0xa8>
    261e:	02 97       	sbiw	r24, 0x02	; 2
    2620:	74 f1       	brlt	.+92     	; 0x267e <_ZN10LinkedListI13EZUI_MenuItemE5shiftEv+0x98>
    2622:	fb 01       	movw	r30, r22
    2624:	e4 80       	ldd	r14, Z+4	; 0x04
    2626:	f5 80       	ldd	r15, Z+5	; 0x05
    2628:	d7 01       	movw	r26, r14
    262a:	15 96       	adiw	r26, 0x05	; 5
    262c:	ad 90       	ld	r10, X+
    262e:	bc 90       	ld	r11, X
    2630:	16 97       	sbiw	r26, 0x06	; 6
    2632:	85 e0       	ldi	r24, 0x05	; 5
    2634:	f7 01       	movw	r30, r14
    2636:	de 01       	movw	r26, r28
    2638:	11 96       	adiw	r26, 0x01	; 1
    263a:	01 90       	ld	r0, Z+
    263c:	0d 92       	st	X+, r0
    263e:	8a 95       	dec	r24
    2640:	e1 f7       	brne	.-8      	; 0x263a <_ZN10LinkedListI13EZUI_MenuItemE5shiftEv+0x54>
    2642:	e1 14       	cp	r14, r1
    2644:	f1 04       	cpc	r15, r1
    2646:	29 f0       	breq	.+10     	; 0x2652 <_ZN10LinkedListI13EZUI_MenuItemE5shiftEv+0x6c>
    2648:	c7 01       	movw	r24, r14
    264a:	b4 d4       	rcall	.+2408   	; 0x2fb4 <_ZN13EZUI_MenuItemD1Ev>
    264c:	c7 01       	movw	r24, r14
    264e:	0e 94 51 30 	call	0x60a2	; 0x60a2 <_ZdlPv>
    2652:	f8 01       	movw	r30, r16
    2654:	b5 82       	std	Z+5, r11	; 0x05
    2656:	a4 82       	std	Z+4, r10	; 0x04
    2658:	22 81       	ldd	r18, Z+2	; 0x02
    265a:	33 81       	ldd	r19, Z+3	; 0x03
    265c:	21 50       	subi	r18, 0x01	; 1
    265e:	31 09       	sbc	r19, r1
    2660:	33 83       	std	Z+3, r19	; 0x03
    2662:	22 83       	std	Z+2, r18	; 0x02
    2664:	14 86       	std	Z+12, r1	; 0x0c
    2666:	85 e0       	ldi	r24, 0x05	; 5
    2668:	fe 01       	movw	r30, r28
    266a:	31 96       	adiw	r30, 0x01	; 1
    266c:	d6 01       	movw	r26, r12
    266e:	01 90       	ld	r0, Z+
    2670:	0d 92       	st	X+, r0
    2672:	8a 95       	dec	r24
    2674:	e1 f7       	brne	.-8      	; 0x266e <_ZN10LinkedListI13EZUI_MenuItemE5shiftEv+0x88>
    2676:	ce 01       	movw	r24, r28
    2678:	01 96       	adiw	r24, 0x01	; 1
    267a:	9c d4       	rcall	.+2360   	; 0x2fb4 <_ZN13EZUI_MenuItemD1Ev>
    267c:	08 c0       	rjmp	.+16     	; 0x268e <_ZN10LinkedListI13EZUI_MenuItemE5shiftEv+0xa8>
    267e:	db 01       	movw	r26, r22
    2680:	ed 91       	ld	r30, X+
    2682:	fc 91       	ld	r31, X
    2684:	04 84       	ldd	r0, Z+12	; 0x0c
    2686:	f5 85       	ldd	r31, Z+13	; 0x0d
    2688:	e0 2d       	mov	r30, r0
    268a:	c6 01       	movw	r24, r12
    268c:	19 95       	eicall
    268e:	c6 01       	movw	r24, r12
    2690:	0f 90       	pop	r0
    2692:	0f 90       	pop	r0
    2694:	0f 90       	pop	r0
    2696:	0f 90       	pop	r0
    2698:	0f 90       	pop	r0
    269a:	df 91       	pop	r29
    269c:	cf 91       	pop	r28
    269e:	1f 91       	pop	r17
    26a0:	0f 91       	pop	r16
    26a2:	ff 90       	pop	r15
    26a4:	ef 90       	pop	r14
    26a6:	df 90       	pop	r13
    26a8:	cf 90       	pop	r12
    26aa:	bf 90       	pop	r11
    26ac:	af 90       	pop	r10
    26ae:	08 95       	ret

000026b0 <_ZN10LinkedListI13EZUI_MenuItemE7unshiftES0_>:
    26b0:	cf 92       	push	r12
    26b2:	df 92       	push	r13
    26b4:	ef 92       	push	r14
    26b6:	ff 92       	push	r15
    26b8:	0f 93       	push	r16
    26ba:	1f 93       	push	r17
    26bc:	cf 93       	push	r28
    26be:	df 93       	push	r29
    26c0:	00 d0       	rcall	.+0      	; 0x26c2 <_ZN10LinkedListI13EZUI_MenuItemE7unshiftES0_+0x12>
    26c2:	1f 92       	push	r1
    26c4:	1f 92       	push	r1
    26c6:	cd b7       	in	r28, 0x3d	; 61
    26c8:	de b7       	in	r29, 0x3e	; 62
    26ca:	8c 01       	movw	r16, r24
    26cc:	6b 01       	movw	r12, r22
    26ce:	dc 01       	movw	r26, r24
    26d0:	12 96       	adiw	r26, 0x02	; 2
    26d2:	8d 91       	ld	r24, X+
    26d4:	9c 91       	ld	r25, X
    26d6:	13 97       	sbiw	r26, 0x03	; 3
    26d8:	89 2b       	or	r24, r25
    26da:	b9 f4       	brne	.+46     	; 0x270a <_ZN10LinkedListI13EZUI_MenuItemE7unshiftES0_+0x5a>
    26dc:	ed 91       	ld	r30, X+
    26de:	fc 91       	ld	r31, X
    26e0:	24 81       	ldd	r18, Z+4	; 0x04
    26e2:	35 81       	ldd	r19, Z+5	; 0x05
    26e4:	95 e0       	ldi	r25, 0x05	; 5
    26e6:	fb 01       	movw	r30, r22
    26e8:	de 01       	movw	r26, r28
    26ea:	11 96       	adiw	r26, 0x01	; 1
    26ec:	01 90       	ld	r0, Z+
    26ee:	0d 92       	st	X+, r0
    26f0:	9a 95       	dec	r25
    26f2:	e1 f7       	brne	.-8      	; 0x26ec <_ZN10LinkedListI13EZUI_MenuItemE7unshiftES0_+0x3c>
    26f4:	be 01       	movw	r22, r28
    26f6:	6f 5f       	subi	r22, 0xFF	; 255
    26f8:	7f 4f       	sbci	r23, 0xFF	; 255
    26fa:	c8 01       	movw	r24, r16
    26fc:	f9 01       	movw	r30, r18
    26fe:	19 95       	eicall
    2700:	18 2f       	mov	r17, r24
    2702:	ce 01       	movw	r24, r28
    2704:	01 96       	adiw	r24, 0x01	; 1
    2706:	56 d4       	rcall	.+2220   	; 0x2fb4 <_ZN13EZUI_MenuItemD1Ev>
    2708:	24 c0       	rjmp	.+72     	; 0x2752 <_ZN10LinkedListI13EZUI_MenuItemE7unshiftES0_+0xa2>
    270a:	87 e0       	ldi	r24, 0x07	; 7
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    2712:	7c 01       	movw	r14, r24
    2714:	87 e0       	ldi	r24, 0x07	; 7
    2716:	d7 01       	movw	r26, r14
    2718:	1d 92       	st	X+, r1
    271a:	8a 95       	dec	r24
    271c:	e9 f7       	brne	.-6      	; 0x2718 <_ZN10LinkedListI13EZUI_MenuItemE7unshiftES0_+0x68>
    271e:	c7 01       	movw	r24, r14
    2720:	42 d4       	rcall	.+2180   	; 0x2fa6 <_ZN13EZUI_MenuItemC1Ev>
    2722:	f8 01       	movw	r30, r16
    2724:	84 81       	ldd	r24, Z+4	; 0x04
    2726:	95 81       	ldd	r25, Z+5	; 0x05
    2728:	d7 01       	movw	r26, r14
    272a:	16 96       	adiw	r26, 0x06	; 6
    272c:	9c 93       	st	X, r25
    272e:	8e 93       	st	-X, r24
    2730:	15 97       	sbiw	r26, 0x05	; 5
    2732:	85 e0       	ldi	r24, 0x05	; 5
    2734:	f6 01       	movw	r30, r12
    2736:	01 90       	ld	r0, Z+
    2738:	0d 92       	st	X+, r0
    273a:	8a 95       	dec	r24
    273c:	e1 f7       	brne	.-8      	; 0x2736 <_ZN10LinkedListI13EZUI_MenuItemE7unshiftES0_+0x86>
    273e:	f8 01       	movw	r30, r16
    2740:	f5 82       	std	Z+5, r15	; 0x05
    2742:	e4 82       	std	Z+4, r14	; 0x04
    2744:	82 81       	ldd	r24, Z+2	; 0x02
    2746:	93 81       	ldd	r25, Z+3	; 0x03
    2748:	01 96       	adiw	r24, 0x01	; 1
    274a:	93 83       	std	Z+3, r25	; 0x03
    274c:	82 83       	std	Z+2, r24	; 0x02
    274e:	14 86       	std	Z+12, r1	; 0x0c
    2750:	11 e0       	ldi	r17, 0x01	; 1
    2752:	81 2f       	mov	r24, r17
    2754:	0f 90       	pop	r0
    2756:	0f 90       	pop	r0
    2758:	0f 90       	pop	r0
    275a:	0f 90       	pop	r0
    275c:	0f 90       	pop	r0
    275e:	df 91       	pop	r29
    2760:	cf 91       	pop	r28
    2762:	1f 91       	pop	r17
    2764:	0f 91       	pop	r16
    2766:	ff 90       	pop	r15
    2768:	ef 90       	pop	r14
    276a:	df 90       	pop	r13
    276c:	cf 90       	pop	r12
    276e:	08 95       	ret

00002770 <_ZN10LinkedListI13EZUI_MenuItemE3addES0_>:
    2770:	ef 92       	push	r14
    2772:	ff 92       	push	r15
    2774:	0f 93       	push	r16
    2776:	1f 93       	push	r17
    2778:	cf 93       	push	r28
    277a:	df 93       	push	r29
    277c:	ec 01       	movw	r28, r24
    277e:	7b 01       	movw	r14, r22
    2780:	87 e0       	ldi	r24, 0x07	; 7
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    2788:	8c 01       	movw	r16, r24
    278a:	87 e0       	ldi	r24, 0x07	; 7
    278c:	f8 01       	movw	r30, r16
    278e:	11 92       	st	Z+, r1
    2790:	8a 95       	dec	r24
    2792:	e9 f7       	brne	.-6      	; 0x278e <_ZN10LinkedListI13EZUI_MenuItemE3addES0_+0x1e>
    2794:	c8 01       	movw	r24, r16
    2796:	07 d4       	rcall	.+2062   	; 0x2fa6 <_ZN13EZUI_MenuItemC1Ev>
    2798:	85 e0       	ldi	r24, 0x05	; 5
    279a:	f7 01       	movw	r30, r14
    279c:	d8 01       	movw	r26, r16
    279e:	01 90       	ld	r0, Z+
    27a0:	0d 92       	st	X+, r0
    27a2:	8a 95       	dec	r24
    27a4:	e1 f7       	brne	.-8      	; 0x279e <_ZN10LinkedListI13EZUI_MenuItemE3addES0_+0x2e>
    27a6:	f8 01       	movw	r30, r16
    27a8:	16 82       	std	Z+6, r1	; 0x06
    27aa:	15 82       	std	Z+5, r1	; 0x05
    27ac:	8c 81       	ldd	r24, Y+4	; 0x04
    27ae:	9d 81       	ldd	r25, Y+5	; 0x05
    27b0:	89 2b       	or	r24, r25
    27b2:	39 f0       	breq	.+14     	; 0x27c2 <_ZN10LinkedListI13EZUI_MenuItemE3addES0_+0x52>
    27b4:	ee 81       	ldd	r30, Y+6	; 0x06
    27b6:	ff 81       	ldd	r31, Y+7	; 0x07
    27b8:	16 83       	std	Z+6, r17	; 0x06
    27ba:	05 83       	std	Z+5, r16	; 0x05
    27bc:	1f 83       	std	Y+7, r17	; 0x07
    27be:	0e 83       	std	Y+6, r16	; 0x06
    27c0:	04 c0       	rjmp	.+8      	; 0x27ca <_ZN10LinkedListI13EZUI_MenuItemE3addES0_+0x5a>
    27c2:	1d 83       	std	Y+5, r17	; 0x05
    27c4:	0c 83       	std	Y+4, r16	; 0x04
    27c6:	1f 83       	std	Y+7, r17	; 0x07
    27c8:	0e 83       	std	Y+6, r16	; 0x06
    27ca:	8a 81       	ldd	r24, Y+2	; 0x02
    27cc:	9b 81       	ldd	r25, Y+3	; 0x03
    27ce:	01 96       	adiw	r24, 0x01	; 1
    27d0:	9b 83       	std	Y+3, r25	; 0x03
    27d2:	8a 83       	std	Y+2, r24	; 0x02
    27d4:	1c 86       	std	Y+12, r1	; 0x0c
    27d6:	81 e0       	ldi	r24, 0x01	; 1
    27d8:	df 91       	pop	r29
    27da:	cf 91       	pop	r28
    27dc:	1f 91       	pop	r17
    27de:	0f 91       	pop	r16
    27e0:	ff 90       	pop	r15
    27e2:	ef 90       	pop	r14
    27e4:	08 95       	ret

000027e6 <_ZN9EZUI_MenuC1E6String>:
    27e6:	0f 93       	push	r16
    27e8:	1f 93       	push	r17
    27ea:	cf 93       	push	r28
    27ec:	df 93       	push	r29
    27ee:	ec 01       	movw	r28, r24
    27f0:	8b 01       	movw	r16, r22
    27f2:	61 e6       	ldi	r22, 0x61	; 97
    27f4:	76 e0       	ldi	r23, 0x06	; 6
    27f6:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    27fa:	83 ea       	ldi	r24, 0xA3	; 163
    27fc:	94 e0       	ldi	r25, 0x04	; 4
    27fe:	9f 83       	std	Y+7, r25	; 0x07
    2800:	8e 83       	std	Y+6, r24	; 0x06
    2802:	1b 86       	std	Y+11, r1	; 0x0b
    2804:	1a 86       	std	Y+10, r1	; 0x0a
    2806:	1d 86       	std	Y+13, r1	; 0x0d
    2808:	1c 86       	std	Y+12, r1	; 0x0c
    280a:	19 86       	std	Y+9, r1	; 0x09
    280c:	18 86       	std	Y+8, r1	; 0x08
    280e:	1f 86       	std	Y+15, r1	; 0x0f
    2810:	1e 86       	std	Y+14, r1	; 0x0e
    2812:	19 8a       	std	Y+17, r1	; 0x11
    2814:	18 8a       	std	Y+16, r1	; 0x10
    2816:	1a 8a       	std	Y+18, r1	; 0x12
    2818:	1c 8a       	std	Y+20, r1	; 0x14
    281a:	1b 8a       	std	Y+19, r1	; 0x13
    281c:	1e 8a       	std	Y+22, r1	; 0x16
    281e:	1d 8a       	std	Y+21, r1	; 0x15
    2820:	18 8e       	std	Y+24, r1	; 0x18
    2822:	1f 8a       	std	Y+23, r1	; 0x17
    2824:	1a 8e       	std	Y+26, r1	; 0x1a
    2826:	19 8e       	std	Y+25, r1	; 0x19
    2828:	81 e0       	ldi	r24, 0x01	; 1
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	9c 8f       	std	Y+28, r25	; 0x1c
    282e:	8b 8f       	std	Y+27, r24	; 0x1b
    2830:	b8 01       	movw	r22, r16
    2832:	ce 01       	movw	r24, r28
    2834:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <_ZN6StringaSERKS_>
    2838:	df 91       	pop	r29
    283a:	cf 91       	pop	r28
    283c:	1f 91       	pop	r17
    283e:	0f 91       	pop	r16
    2840:	08 95       	ret

00002842 <_ZN9EZUI_Menu7addItemEP17EZUI_Control_Link>:

void EZUI_Menu::addItem(EZUI_Control_Link * Link){
    2842:	0f 93       	push	r16
    2844:	1f 93       	push	r17
    2846:	cf 93       	push	r28
    2848:	df 93       	push	r29
    284a:	cd b7       	in	r28, 0x3d	; 61
    284c:	de b7       	in	r29, 0x3e	; 62
    284e:	2a 97       	sbiw	r28, 0x0a	; 10
    2850:	0f b6       	in	r0, 0x3f	; 63
    2852:	f8 94       	cli
    2854:	de bf       	out	0x3e, r29	; 62
    2856:	0f be       	out	0x3f, r0	; 63
    2858:	cd bf       	out	0x3d, r28	; 61
    285a:	8c 01       	movw	r16, r24
	EZUI_MenuItem MenuItem = EZUI_MenuItem(Link);
    285c:	ce 01       	movw	r24, r28
    285e:	06 96       	adiw	r24, 0x06	; 6
    2860:	92 d3       	rcall	.+1828   	; 0x2f86 <_ZN13EZUI_MenuItemC1EP17EZUI_Control_Link>
	this->_Items.add(MenuItem);
    2862:	95 e0       	ldi	r25, 0x05	; 5
    2864:	fe 01       	movw	r30, r28
    2866:	36 96       	adiw	r30, 0x06	; 6
    2868:	de 01       	movw	r26, r28
    286a:	11 96       	adiw	r26, 0x01	; 1
    286c:	01 90       	ld	r0, Z+
    286e:	0d 92       	st	X+, r0
    2870:	9a 95       	dec	r25
    2872:	e1 f7       	brne	.-8      	; 0x286c <_ZN9EZUI_Menu7addItemEP17EZUI_Control_Link+0x2a>
    2874:	be 01       	movw	r22, r28
    2876:	6f 5f       	subi	r22, 0xFF	; 255
    2878:	7f 4f       	sbci	r23, 0xFF	; 255
    287a:	c8 01       	movw	r24, r16
    287c:	06 96       	adiw	r24, 0x06	; 6
    287e:	78 df       	rcall	.-272    	; 0x2770 <_ZN10LinkedListI13EZUI_MenuItemE3addES0_>
    2880:	ce 01       	movw	r24, r28
    2882:	01 96       	adiw	r24, 0x01	; 1
    2884:	97 d3       	rcall	.+1838   	; 0x2fb4 <_ZN13EZUI_MenuItemD1Ev>
    2886:	ce 01       	movw	r24, r28
    2888:	06 96       	adiw	r24, 0x06	; 6
    288a:	94 d3       	rcall	.+1832   	; 0x2fb4 <_ZN13EZUI_MenuItemD1Ev>
}
    288c:	2a 96       	adiw	r28, 0x0a	; 10
    288e:	0f b6       	in	r0, 0x3f	; 63
    2890:	f8 94       	cli
    2892:	de bf       	out	0x3e, r29	; 62
    2894:	0f be       	out	0x3f, r0	; 63
    2896:	cd bf       	out	0x3d, r28	; 61
    2898:	df 91       	pop	r29
    289a:	cf 91       	pop	r28
    289c:	1f 91       	pop	r17
    289e:	0f 91       	pop	r16
    28a0:	08 95       	ret

000028a2 <_ZN9EZUI_Menu7addItemEP25EZUI_Control_ToggleOption>:

void EZUI_Menu::addItem(EZUI_Control_ToggleOption * ToggleOpt){
    28a2:	0f 93       	push	r16
    28a4:	1f 93       	push	r17
    28a6:	cf 93       	push	r28
    28a8:	df 93       	push	r29
    28aa:	cd b7       	in	r28, 0x3d	; 61
    28ac:	de b7       	in	r29, 0x3e	; 62
    28ae:	2a 97       	sbiw	r28, 0x0a	; 10
    28b0:	0f b6       	in	r0, 0x3f	; 63
    28b2:	f8 94       	cli
    28b4:	de bf       	out	0x3e, r29	; 62
    28b6:	0f be       	out	0x3f, r0	; 63
    28b8:	cd bf       	out	0x3d, r28	; 61
    28ba:	8c 01       	movw	r16, r24
	EZUI_MenuItem MenuItem = EZUI_MenuItem(ToggleOpt);
    28bc:	ce 01       	movw	r24, r28
    28be:	06 96       	adiw	r24, 0x06	; 6
    28c0:	6a d3       	rcall	.+1748   	; 0x2f96 <_ZN13EZUI_MenuItemC1EP25EZUI_Control_ToggleOption>
	this->_Items.add(MenuItem);
    28c2:	95 e0       	ldi	r25, 0x05	; 5
    28c4:	fe 01       	movw	r30, r28
    28c6:	36 96       	adiw	r30, 0x06	; 6
    28c8:	de 01       	movw	r26, r28
    28ca:	11 96       	adiw	r26, 0x01	; 1
    28cc:	01 90       	ld	r0, Z+
    28ce:	0d 92       	st	X+, r0
    28d0:	9a 95       	dec	r25
    28d2:	e1 f7       	brne	.-8      	; 0x28cc <_ZN9EZUI_Menu7addItemEP25EZUI_Control_ToggleOption+0x2a>
    28d4:	be 01       	movw	r22, r28
    28d6:	6f 5f       	subi	r22, 0xFF	; 255
    28d8:	7f 4f       	sbci	r23, 0xFF	; 255
    28da:	c8 01       	movw	r24, r16
    28dc:	06 96       	adiw	r24, 0x06	; 6
    28de:	48 df       	rcall	.-368    	; 0x2770 <_ZN10LinkedListI13EZUI_MenuItemE3addES0_>
    28e0:	ce 01       	movw	r24, r28
    28e2:	01 96       	adiw	r24, 0x01	; 1
    28e4:	67 d3       	rcall	.+1742   	; 0x2fb4 <_ZN13EZUI_MenuItemD1Ev>
    28e6:	ce 01       	movw	r24, r28
    28e8:	06 96       	adiw	r24, 0x06	; 6
    28ea:	64 d3       	rcall	.+1736   	; 0x2fb4 <_ZN13EZUI_MenuItemD1Ev>
}
    28ec:	2a 96       	adiw	r28, 0x0a	; 10
    28ee:	0f b6       	in	r0, 0x3f	; 63
    28f0:	f8 94       	cli
    28f2:	de bf       	out	0x3e, r29	; 62
    28f4:	0f be       	out	0x3f, r0	; 63
    28f6:	cd bf       	out	0x3d, r28	; 61
    28f8:	df 91       	pop	r29
    28fa:	cf 91       	pop	r28
    28fc:	1f 91       	pop	r17
    28fe:	0f 91       	pop	r16
    2900:	08 95       	ret

00002902 <_ZN9EZUI_Menu8prevItemEv>:
		}
		refresh = 0;
	}
}

void EZUI_Menu::prevItem(void){
    2902:	cf 93       	push	r28
    2904:	df 93       	push	r29
    2906:	ec 01       	movw	r28, r24
	currentItem--;
    2908:	89 8d       	ldd	r24, Y+25	; 0x19
    290a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    290c:	01 97       	sbiw	r24, 0x01	; 1
	if (currentItem < 0){ 
    290e:	1a f0       	brmi	.+6      	; 0x2916 <_ZN9EZUI_Menu8prevItemEv+0x14>
		refresh = 0;
	}
}

void EZUI_Menu::prevItem(void){
	currentItem--;
    2910:	9a 8f       	std	Y+26, r25	; 0x1a
    2912:	89 8f       	std	Y+25, r24	; 0x19
    2914:	02 c0       	rjmp	.+4      	; 0x291a <_ZN9EZUI_Menu8prevItemEv+0x18>
	if (currentItem < 0){ 
		currentItem = 0;
    2916:	1a 8e       	std	Y+26, r1	; 0x1a
    2918:	19 8e       	std	Y+25, r1	; 0x19
	}
	Serial.print(Name);
    291a:	be 01       	movw	r22, r28
    291c:	88 ea       	ldi	r24, 0xA8	; 168
    291e:	9a e0       	ldi	r25, 0x0A	; 10
    2920:	0e 94 81 30 	call	0x6102	; 0x6102 <_ZN5Print5printERK6String>
	Serial.print(" - Encoder Item: ");
    2924:	69 e8       	ldi	r22, 0x89	; 137
    2926:	74 e0       	ldi	r23, 0x04	; 4
    2928:	88 ea       	ldi	r24, 0xA8	; 168
    292a:	9a e0       	ldi	r25, 0x0A	; 10
    292c:	0e 94 90 30 	call	0x6120	; 0x6120 <_ZN5Print5printEPKc>
	Serial.println(currentItem);
    2930:	69 8d       	ldd	r22, Y+25	; 0x19
    2932:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2934:	4a e0       	ldi	r20, 0x0A	; 10
    2936:	50 e0       	ldi	r21, 0x00	; 0
    2938:	88 ea       	ldi	r24, 0xA8	; 168
    293a:	9a e0       	ldi	r25, 0x0A	; 10
    293c:	0e 94 8c 31 	call	0x6318	; 0x6318 <_ZN5Print7printlnEii>
	refresh = 1;
    2940:	81 e0       	ldi	r24, 0x01	; 1
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	9c 8f       	std	Y+28, r25	; 0x1c
    2946:	8b 8f       	std	Y+27, r24	; 0x1b
}
    2948:	df 91       	pop	r29
    294a:	cf 91       	pop	r28
    294c:	08 95       	ret

0000294e <_ZN9EZUI_Menu8nextItemEv>:

void EZUI_Menu::nextItem(void){
    294e:	cf 93       	push	r28
    2950:	df 93       	push	r29
    2952:	ec 01       	movw	r28, r24
	currentItem++;
    2954:	89 8d       	ldd	r24, Y+25	; 0x19
    2956:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2958:	01 96       	adiw	r24, 0x01	; 1
    295a:	9a 8f       	std	Y+26, r25	; 0x1a
    295c:	89 8f       	std	Y+25, r24	; 0x19
	return false;
}

template<typename T>
int LinkedList<T>::size(){
	return _size;
    295e:	28 85       	ldd	r18, Y+8	; 0x08
    2960:	39 85       	ldd	r19, Y+9	; 0x09
	if (currentItem >= _Items.size()){
    2962:	82 17       	cp	r24, r18
    2964:	93 07       	cpc	r25, r19
    2966:	24 f0       	brlt	.+8      	; 0x2970 <_ZN9EZUI_Menu8nextItemEv+0x22>
		currentItem = _Items.size()-1;
    2968:	21 50       	subi	r18, 0x01	; 1
    296a:	31 09       	sbc	r19, r1
    296c:	3a 8f       	std	Y+26, r19	; 0x1a
    296e:	29 8f       	std	Y+25, r18	; 0x19
	}
	Serial.print(Name);
    2970:	be 01       	movw	r22, r28
    2972:	88 ea       	ldi	r24, 0xA8	; 168
    2974:	9a e0       	ldi	r25, 0x0A	; 10
    2976:	0e 94 81 30 	call	0x6102	; 0x6102 <_ZN5Print5printERK6String>
	Serial.print(" - Encoder Item: ");
    297a:	69 e8       	ldi	r22, 0x89	; 137
    297c:	74 e0       	ldi	r23, 0x04	; 4
    297e:	88 ea       	ldi	r24, 0xA8	; 168
    2980:	9a e0       	ldi	r25, 0x0A	; 10
    2982:	0e 94 90 30 	call	0x6120	; 0x6120 <_ZN5Print5printEPKc>
	Serial.println(currentItem);
    2986:	69 8d       	ldd	r22, Y+25	; 0x19
    2988:	7a 8d       	ldd	r23, Y+26	; 0x1a
    298a:	4a e0       	ldi	r20, 0x0A	; 10
    298c:	50 e0       	ldi	r21, 0x00	; 0
    298e:	88 ea       	ldi	r24, 0xA8	; 168
    2990:	9a e0       	ldi	r25, 0x0A	; 10
    2992:	0e 94 8c 31 	call	0x6318	; 0x6318 <_ZN5Print7printlnEii>
	refresh = 1;
    2996:	81 e0       	ldi	r24, 0x01	; 1
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	9c 8f       	std	Y+28, r25	; 0x1c
    299c:	8b 8f       	std	Y+27, r24	; 0x1b
}
    299e:	df 91       	pop	r29
    29a0:	cf 91       	pop	r28
    29a2:	08 95       	ret

000029a4 <_ZN10LinkedListI13EZUI_MenuItemE7getNodeEi>:
/*
	Actualy "logic" coding
*/

template<typename T>
ListNode<T>* LinkedList<T>::getNode(int index){
    29a4:	dc 01       	movw	r26, r24

	int _pos = 0;
	ListNode<T>* current = root;
    29a6:	14 96       	adiw	r26, 0x04	; 4
    29a8:	ed 91       	ld	r30, X+
    29aa:	fc 91       	ld	r31, X
    29ac:	15 97       	sbiw	r26, 0x05	; 5

	// Check if the node trying to get is
	// immediatly AFTER the previous got one
	if(isCached && lastIndexGot <= index){
    29ae:	1c 96       	adiw	r26, 0x0c	; 12
    29b0:	8c 91       	ld	r24, X
    29b2:	1c 97       	sbiw	r26, 0x0c	; 12
    29b4:	88 23       	and	r24, r24
    29b6:	61 f0       	breq	.+24     	; 0x29d0 <_ZN10LinkedListI13EZUI_MenuItemE7getNodeEi+0x2c>
    29b8:	1a 96       	adiw	r26, 0x0a	; 10
    29ba:	2d 91       	ld	r18, X+
    29bc:	3c 91       	ld	r19, X
    29be:	1b 97       	sbiw	r26, 0x0b	; 11
    29c0:	62 17       	cp	r22, r18
    29c2:	73 07       	cpc	r23, r19
    29c4:	44 f0       	brlt	.+16     	; 0x29d6 <_ZN10LinkedListI13EZUI_MenuItemE7getNodeEi+0x32>
		_pos = lastIndexGot;
		current = lastNodeGot;
    29c6:	18 96       	adiw	r26, 0x08	; 8
    29c8:	ed 91       	ld	r30, X+
    29ca:	fc 91       	ld	r31, X
    29cc:	19 97       	sbiw	r26, 0x09	; 9
    29ce:	05 c0       	rjmp	.+10     	; 0x29da <_ZN10LinkedListI13EZUI_MenuItemE7getNodeEi+0x36>
*/

template<typename T>
ListNode<T>* LinkedList<T>::getNode(int index){

	int _pos = 0;
    29d0:	20 e0       	ldi	r18, 0x00	; 0
    29d2:	30 e0       	ldi	r19, 0x00	; 0
    29d4:	02 c0       	rjmp	.+4      	; 0x29da <_ZN10LinkedListI13EZUI_MenuItemE7getNodeEi+0x36>
    29d6:	20 e0       	ldi	r18, 0x00	; 0
    29d8:	30 e0       	ldi	r19, 0x00	; 0
	if(isCached && lastIndexGot <= index){
		_pos = lastIndexGot;
		current = lastNodeGot;
	}

	while(_pos < index && current){
    29da:	26 17       	cp	r18, r22
    29dc:	37 07       	cpc	r19, r23
    29de:	64 f4       	brge	.+24     	; 0x29f8 <_ZN10LinkedListI13EZUI_MenuItemE7getNodeEi+0x54>
    29e0:	30 97       	sbiw	r30, 0x00	; 0
    29e2:	51 f0       	breq	.+20     	; 0x29f8 <_ZN10LinkedListI13EZUI_MenuItemE7getNodeEi+0x54>
		current = current->next;
    29e4:	05 80       	ldd	r0, Z+5	; 0x05
    29e6:	f6 81       	ldd	r31, Z+6	; 0x06
    29e8:	e0 2d       	mov	r30, r0

		_pos++;
    29ea:	2f 5f       	subi	r18, 0xFF	; 255
    29ec:	3f 4f       	sbci	r19, 0xFF	; 255
	if(isCached && lastIndexGot <= index){
		_pos = lastIndexGot;
		current = lastNodeGot;
	}

	while(_pos < index && current){
    29ee:	26 17       	cp	r18, r22
    29f0:	37 07       	cpc	r19, r23
    29f2:	14 f4       	brge	.+4      	; 0x29f8 <_ZN10LinkedListI13EZUI_MenuItemE7getNodeEi+0x54>
    29f4:	30 97       	sbiw	r30, 0x00	; 0
    29f6:	b1 f7       	brne	.-20     	; 0x29e4 <_ZN10LinkedListI13EZUI_MenuItemE7getNodeEi+0x40>

		_pos++;
	}

	// Check if the object index got is the same as the required
	if(_pos == index){
    29f8:	26 17       	cp	r18, r22
    29fa:	37 07       	cpc	r19, r23
    29fc:	79 f4       	brne	.+30     	; 0x2a1c <_ZN10LinkedListI13EZUI_MenuItemE7getNodeEi+0x78>
		isCached = true;
    29fe:	81 e0       	ldi	r24, 0x01	; 1
    2a00:	1c 96       	adiw	r26, 0x0c	; 12
    2a02:	8c 93       	st	X, r24
    2a04:	1c 97       	sbiw	r26, 0x0c	; 12
		lastIndexGot = index;
    2a06:	1b 96       	adiw	r26, 0x0b	; 11
    2a08:	3c 93       	st	X, r19
    2a0a:	2e 93       	st	-X, r18
    2a0c:	1a 97       	sbiw	r26, 0x0a	; 10
		lastNodeGot = current;
    2a0e:	19 96       	adiw	r26, 0x09	; 9
    2a10:	fc 93       	st	X, r31
    2a12:	ee 93       	st	-X, r30
    2a14:	18 97       	sbiw	r26, 0x08	; 8

		return current;
    2a16:	8e 2f       	mov	r24, r30
    2a18:	9f 2f       	mov	r25, r31
    2a1a:	08 95       	ret
	}

	return false;
    2a1c:	80 e0       	ldi	r24, 0x00	; 0
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
}
    2a20:	08 95       	ret

00002a22 <_ZN10LinkedListI13EZUI_MenuItemE3getEi>:
	return ret;
}


template<typename T>
T LinkedList<T>::get(int index){
    2a22:	cf 93       	push	r28
    2a24:	df 93       	push	r29
    2a26:	ec 01       	movw	r28, r24
    2a28:	cb 01       	movw	r24, r22
	ListNode<T> *tmp = getNode(index);
    2a2a:	ba 01       	movw	r22, r20
    2a2c:	bb df       	rcall	.-138    	; 0x29a4 <_ZN10LinkedListI13EZUI_MenuItemE7getNodeEi>

	return (tmp ? tmp->data : T());
    2a2e:	00 97       	sbiw	r24, 0x00	; 0
    2a30:	41 f0       	breq	.+16     	; 0x2a42 <_ZN10LinkedListI13EZUI_MenuItemE3getEi+0x20>
    2a32:	25 e0       	ldi	r18, 0x05	; 5
    2a34:	fc 01       	movw	r30, r24
    2a36:	de 01       	movw	r26, r28
    2a38:	01 90       	ld	r0, Z+
    2a3a:	0d 92       	st	X+, r0
    2a3c:	2a 95       	dec	r18
    2a3e:	e1 f7       	brne	.-8      	; 0x2a38 <_ZN10LinkedListI13EZUI_MenuItemE3getEi+0x16>
    2a40:	02 c0       	rjmp	.+4      	; 0x2a46 <_ZN10LinkedListI13EZUI_MenuItemE3getEi+0x24>
    2a42:	ce 01       	movw	r24, r28
    2a44:	b0 d2       	rcall	.+1376   	; 0x2fa6 <_ZN13EZUI_MenuItemC1Ev>
}
    2a46:	ce 01       	movw	r24, r28
    2a48:	df 91       	pop	r29
    2a4a:	cf 91       	pop	r28
    2a4c:	08 95       	ret

00002a4e <_ZN9EZUI_Menu7displayEP4EZUI>:
void EZUI_Menu::addItem(EZUI_Control_ToggleOption * ToggleOpt){
	EZUI_MenuItem MenuItem = EZUI_MenuItem(ToggleOpt);
	this->_Items.add(MenuItem);
}

void EZUI_Menu::display(EZUI *UI){
    2a4e:	2f 92       	push	r2
    2a50:	3f 92       	push	r3
    2a52:	4f 92       	push	r4
    2a54:	5f 92       	push	r5
    2a56:	6f 92       	push	r6
    2a58:	7f 92       	push	r7
    2a5a:	8f 92       	push	r8
    2a5c:	9f 92       	push	r9
    2a5e:	af 92       	push	r10
    2a60:	bf 92       	push	r11
    2a62:	cf 92       	push	r12
    2a64:	df 92       	push	r13
    2a66:	ef 92       	push	r14
    2a68:	ff 92       	push	r15
    2a6a:	0f 93       	push	r16
    2a6c:	1f 93       	push	r17
    2a6e:	cf 93       	push	r28
    2a70:	df 93       	push	r29
    2a72:	00 d0       	rcall	.+0      	; 0x2a74 <_ZN9EZUI_Menu7displayEP4EZUI+0x26>
    2a74:	1f 92       	push	r1
    2a76:	1f 92       	push	r1
    2a78:	cd b7       	in	r28, 0x3d	; 61
    2a7a:	de b7       	in	r29, 0x3e	; 62
	LiquidCrystal_I2C *LCD = UI->LCD;
    2a7c:	fb 01       	movw	r30, r22
    2a7e:	06 85       	ldd	r16, Z+14	; 0x0e
    2a80:	17 85       	ldd	r17, Z+15	; 0x0f
	if (refresh==1){
    2a82:	fc 01       	movw	r30, r24
    2a84:	23 8d       	ldd	r18, Z+27	; 0x1b
    2a86:	34 8d       	ldd	r19, Z+28	; 0x1c
    2a88:	21 30       	cpi	r18, 0x01	; 1
    2a8a:	31 05       	cpc	r19, r1
    2a8c:	09 f0       	breq	.+2      	; 0x2a90 <_ZN9EZUI_Menu7displayEP4EZUI+0x42>
    2a8e:	93 c0       	rjmp	.+294    	; 0x2bb6 <_ZN9EZUI_Menu7displayEP4EZUI+0x168>
    2a90:	3b 01       	movw	r6, r22
    2a92:	7c 01       	movw	r14, r24
		//Print the Menu Header
		LCD->clear();
    2a94:	50 2e       	mov	r5, r16
    2a96:	41 2e       	mov	r4, r17
    2a98:	80 2f       	mov	r24, r16
    2a9a:	91 2f       	mov	r25, r17
    2a9c:	0e 94 81 26 	call	0x4d02	; 0x4d02 <_ZN3LCD5clearEv>
		LCD->setCursor(0,0);
    2aa0:	40 e0       	ldi	r20, 0x00	; 0
    2aa2:	60 e0       	ldi	r22, 0x00	; 0
    2aa4:	80 2f       	mov	r24, r16
    2aa6:	91 2f       	mov	r25, r17
    2aa8:	0e 94 88 26 	call	0x4d10	; 0x4d10 <_ZN3LCD9setCursorEhh>
		LCD->print("=");
    2aac:	6b e9       	ldi	r22, 0x9B	; 155
    2aae:	74 e0       	ldi	r23, 0x04	; 4
    2ab0:	80 2f       	mov	r24, r16
    2ab2:	91 2f       	mov	r25, r17
    2ab4:	0e 94 90 30 	call	0x6120	; 0x6120 <_ZN5Print5printEPKc>
		LCD->print(Name);
    2ab8:	b7 01       	movw	r22, r14
    2aba:	80 2f       	mov	r24, r16
    2abc:	91 2f       	mov	r25, r17
    2abe:	0e 94 81 30 	call	0x6102	; 0x6102 <_ZN5Print5printERK6String>
	
		for(int i=0; i<(20 - Name.length() - 1); i++){
    2ac2:	f7 01       	movw	r30, r14
    2ac4:	84 81       	ldd	r24, Z+4	; 0x04
    2ac6:	95 81       	ldd	r25, Z+5	; 0x05
    2ac8:	43 97       	sbiw	r24, 0x13	; 19
    2aca:	c1 f0       	breq	.+48     	; 0x2afc <_ZN9EZUI_Menu7displayEP4EZUI+0xae>
    2acc:	00 e0       	ldi	r16, 0x00	; 0
    2ace:	10 e0       	ldi	r17, 0x00	; 0
    2ad0:	0f 2e       	mov	r0, r31
    2ad2:	f3 e1       	ldi	r31, 0x13	; 19
    2ad4:	cf 2e       	mov	r12, r31
    2ad6:	d1 2c       	mov	r13, r1
    2ad8:	f0 2d       	mov	r31, r0
			LCD->print("=");
    2ada:	6b e9       	ldi	r22, 0x9B	; 155
    2adc:	74 e0       	ldi	r23, 0x04	; 4
    2ade:	85 2d       	mov	r24, r5
    2ae0:	94 2d       	mov	r25, r4
    2ae2:	0e 94 90 30 	call	0x6120	; 0x6120 <_ZN5Print5printEPKc>
		LCD->clear();
		LCD->setCursor(0,0);
		LCD->print("=");
		LCD->print(Name);
	
		for(int i=0; i<(20 - Name.length() - 1); i++){
    2ae6:	0f 5f       	subi	r16, 0xFF	; 255
    2ae8:	1f 4f       	sbci	r17, 0xFF	; 255
    2aea:	f7 01       	movw	r30, r14
    2aec:	84 81       	ldd	r24, Z+4	; 0x04
    2aee:	95 81       	ldd	r25, Z+5	; 0x05
    2af0:	96 01       	movw	r18, r12
    2af2:	28 1b       	sub	r18, r24
    2af4:	39 0b       	sbc	r19, r25
    2af6:	02 17       	cp	r16, r18
    2af8:	13 07       	cpc	r17, r19
    2afa:	78 f3       	brcs	.-34     	; 0x2ada <_ZN9EZUI_Menu7displayEP4EZUI+0x8c>
			LCD->print("=");
		}
	
		//Print each menu item (3 items left on line)
		int firstItemToPrint = (int)(currentItem/3);
    2afc:	f7 01       	movw	r30, r14
    2afe:	81 8d       	ldd	r24, Z+25	; 0x19
    2b00:	92 8d       	ldd	r25, Z+26	; 0x1a
    2b02:	63 e0       	ldi	r22, 0x03	; 3
    2b04:	70 e0       	ldi	r23, 0x00	; 0
    2b06:	0e 94 7d 3a 	call	0x74fa	; 0x74fa <__divmodhi4>
    2b0a:	8b 01       	movw	r16, r22
		int ln = 1;
		for(int i=firstItemToPrint; i<min(_Items.size(),firstItemToPrint + 3); i++){
    2b0c:	47 01       	movw	r8, r14
    2b0e:	f6 e0       	ldi	r31, 0x06	; 6
    2b10:	8f 0e       	add	r8, r31
    2b12:	91 1c       	adc	r9, r1
    2b14:	5b 01       	movw	r10, r22
    2b16:	23 e0       	ldi	r18, 0x03	; 3
    2b18:	a2 0e       	add	r10, r18
    2b1a:	b1 1c       	adc	r11, r1
    2b1c:	f7 01       	movw	r30, r14
    2b1e:	20 85       	ldd	r18, Z+8	; 0x08
    2b20:	31 85       	ldd	r19, Z+9	; 0x09
    2b22:	c5 01       	movw	r24, r10
    2b24:	2a 15       	cp	r18, r10
    2b26:	3b 05       	cpc	r19, r11
    2b28:	0c f4       	brge	.+2      	; 0x2b2c <_ZN9EZUI_Menu7displayEP4EZUI+0xde>
    2b2a:	c9 01       	movw	r24, r18
    2b2c:	08 17       	cp	r16, r24
    2b2e:	19 07       	cpc	r17, r25
    2b30:	0c f0       	brlt	.+2      	; 0x2b34 <_ZN9EZUI_Menu7displayEP4EZUI+0xe6>
    2b32:	3e c0       	rjmp	.+124    	; 0x2bb0 <_ZN9EZUI_Menu7displayEP4EZUI+0x162>
    2b34:	cc 24       	eor	r12, r12
    2b36:	c3 94       	inc	r12
    2b38:	d1 2c       	mov	r13, r1
    2b3a:	2a 2c       	mov	r2, r10
    2b3c:	3b 2c       	mov	r3, r11
			LCD->setCursor(0,ln);
    2b3e:	4c 2d       	mov	r20, r12
    2b40:	60 e0       	ldi	r22, 0x00	; 0
    2b42:	85 2d       	mov	r24, r5
    2b44:	94 2d       	mov	r25, r4
    2b46:	0e 94 88 26 	call	0x4d10	; 0x4d10 <_ZN3LCD9setCursorEhh>
			if (i == currentItem){
    2b4a:	f7 01       	movw	r30, r14
    2b4c:	81 8d       	ldd	r24, Z+25	; 0x19
    2b4e:	92 8d       	ldd	r25, Z+26	; 0x1a
    2b50:	80 17       	cp	r24, r16
    2b52:	91 07       	cpc	r25, r17
    2b54:	39 f4       	brne	.+14     	; 0x2b64 <_ZN9EZUI_Menu7displayEP4EZUI+0x116>
				LCD->print(">");
    2b56:	6d e9       	ldi	r22, 0x9D	; 157
    2b58:	74 e0       	ldi	r23, 0x04	; 4
    2b5a:	85 2d       	mov	r24, r5
    2b5c:	94 2d       	mov	r25, r4
    2b5e:	0e 94 90 30 	call	0x6120	; 0x6120 <_ZN5Print5printEPKc>
    2b62:	06 c0       	rjmp	.+12     	; 0x2b70 <_ZN9EZUI_Menu7displayEP4EZUI+0x122>
			}else{
				LCD->print(" ");
    2b64:	66 ed       	ldi	r22, 0xD6	; 214
    2b66:	75 e0       	ldi	r23, 0x05	; 5
    2b68:	85 2d       	mov	r24, r5
    2b6a:	94 2d       	mov	r25, r4
    2b6c:	0e 94 90 30 	call	0x6120	; 0x6120 <_ZN5Print5printEPKc>
			}
			_Items.get(i).Print(1,ln,UI);
    2b70:	a8 01       	movw	r20, r16
    2b72:	b4 01       	movw	r22, r8
    2b74:	ce 01       	movw	r24, r28
    2b76:	01 96       	adiw	r24, 0x01	; 1
    2b78:	54 df       	rcall	.-344    	; 0x2a22 <_ZN10LinkedListI13EZUI_MenuItemE3getEi>
    2b7a:	93 01       	movw	r18, r6
    2b7c:	a6 01       	movw	r20, r12
    2b7e:	61 e0       	ldi	r22, 0x01	; 1
    2b80:	70 e0       	ldi	r23, 0x00	; 0
    2b82:	ce 01       	movw	r24, r28
    2b84:	01 96       	adiw	r24, 0x01	; 1
    2b86:	17 d2       	rcall	.+1070   	; 0x2fb6 <_ZN13EZUI_MenuItem5PrintEiiP4EZUI>
    2b88:	ce 01       	movw	r24, r28
    2b8a:	01 96       	adiw	r24, 0x01	; 1
    2b8c:	13 d2       	rcall	.+1062   	; 0x2fb4 <_ZN13EZUI_MenuItemD1Ev>
			ln++;
    2b8e:	ff ef       	ldi	r31, 0xFF	; 255
    2b90:	cf 1a       	sub	r12, r31
    2b92:	df 0a       	sbc	r13, r31
		}
	
		//Print each menu item (3 items left on line)
		int firstItemToPrint = (int)(currentItem/3);
		int ln = 1;
		for(int i=firstItemToPrint; i<min(_Items.size(),firstItemToPrint + 3); i++){
    2b94:	0f 5f       	subi	r16, 0xFF	; 255
    2b96:	1f 4f       	sbci	r17, 0xFF	; 255
    2b98:	f7 01       	movw	r30, r14
    2b9a:	20 85       	ldd	r18, Z+8	; 0x08
    2b9c:	31 85       	ldd	r19, Z+9	; 0x09
    2b9e:	82 2d       	mov	r24, r2
    2ba0:	93 2d       	mov	r25, r3
    2ba2:	2a 15       	cp	r18, r10
    2ba4:	3b 05       	cpc	r19, r11
    2ba6:	0c f4       	brge	.+2      	; 0x2baa <_ZN9EZUI_Menu7displayEP4EZUI+0x15c>
    2ba8:	c9 01       	movw	r24, r18
    2baa:	08 17       	cp	r16, r24
    2bac:	19 07       	cpc	r17, r25
    2bae:	3c f2       	brlt	.-114    	; 0x2b3e <_ZN9EZUI_Menu7displayEP4EZUI+0xf0>
				LCD->print(" ");
			}
			_Items.get(i).Print(1,ln,UI);
			ln++;
		}
		refresh = 0;
    2bb0:	f7 01       	movw	r30, r14
    2bb2:	14 8e       	std	Z+28, r1	; 0x1c
    2bb4:	13 8e       	std	Z+27, r1	; 0x1b
	}
}
    2bb6:	0f 90       	pop	r0
    2bb8:	0f 90       	pop	r0
    2bba:	0f 90       	pop	r0
    2bbc:	0f 90       	pop	r0
    2bbe:	0f 90       	pop	r0
    2bc0:	df 91       	pop	r29
    2bc2:	cf 91       	pop	r28
    2bc4:	1f 91       	pop	r17
    2bc6:	0f 91       	pop	r16
    2bc8:	ff 90       	pop	r15
    2bca:	ef 90       	pop	r14
    2bcc:	df 90       	pop	r13
    2bce:	cf 90       	pop	r12
    2bd0:	bf 90       	pop	r11
    2bd2:	af 90       	pop	r10
    2bd4:	9f 90       	pop	r9
    2bd6:	8f 90       	pop	r8
    2bd8:	7f 90       	pop	r7
    2bda:	6f 90       	pop	r6
    2bdc:	5f 90       	pop	r5
    2bde:	4f 90       	pop	r4
    2be0:	3f 90       	pop	r3
    2be2:	2f 90       	pop	r2
    2be4:	08 95       	ret

00002be6 <_ZN9EZUI_Menu10selectItemEP4EZUI>:
	Serial.print(" - Encoder Item: ");
	Serial.println(currentItem);
	refresh = 1;
}

void EZUI_Menu::selectItem(EZUI *UI){
    2be6:	ef 92       	push	r14
    2be8:	ff 92       	push	r15
    2bea:	0f 93       	push	r16
    2bec:	1f 93       	push	r17
    2bee:	cf 93       	push	r28
    2bf0:	df 93       	push	r29
    2bf2:	00 d0       	rcall	.+0      	; 0x2bf4 <_ZN9EZUI_Menu10selectItemEP4EZUI+0xe>
    2bf4:	1f 92       	push	r1
    2bf6:	1f 92       	push	r1
    2bf8:	cd b7       	in	r28, 0x3d	; 61
    2bfa:	de b7       	in	r29, 0x3e	; 62
    2bfc:	8c 01       	movw	r16, r24
    2bfe:	7b 01       	movw	r14, r22
	_Items.get(currentItem).ItemSelect(UI);
    2c00:	fc 01       	movw	r30, r24
    2c02:	41 8d       	ldd	r20, Z+25	; 0x19
    2c04:	52 8d       	ldd	r21, Z+26	; 0x1a
    2c06:	bc 01       	movw	r22, r24
    2c08:	6a 5f       	subi	r22, 0xFA	; 250
    2c0a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c0c:	ce 01       	movw	r24, r28
    2c0e:	01 96       	adiw	r24, 0x01	; 1
    2c10:	08 df       	rcall	.-496    	; 0x2a22 <_ZN10LinkedListI13EZUI_MenuItemE3getEi>
    2c12:	b7 01       	movw	r22, r14
    2c14:	ce 01       	movw	r24, r28
    2c16:	01 96       	adiw	r24, 0x01	; 1
    2c18:	bf d2       	rcall	.+1406   	; 0x3198 <_ZN13EZUI_MenuItem10ItemSelectEP4EZUI>
    2c1a:	ce 01       	movw	r24, r28
    2c1c:	01 96       	adiw	r24, 0x01	; 1
    2c1e:	ca d1       	rcall	.+916    	; 0x2fb4 <_ZN13EZUI_MenuItemD1Ev>
	refresh = 1;
    2c20:	81 e0       	ldi	r24, 0x01	; 1
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	f8 01       	movw	r30, r16
    2c26:	94 8f       	std	Z+28, r25	; 0x1c
    2c28:	83 8f       	std	Z+27, r24	; 0x1b
}
    2c2a:	0f 90       	pop	r0
    2c2c:	0f 90       	pop	r0
    2c2e:	0f 90       	pop	r0
    2c30:	0f 90       	pop	r0
    2c32:	0f 90       	pop	r0
    2c34:	df 91       	pop	r29
    2c36:	cf 91       	pop	r28
    2c38:	1f 91       	pop	r17
    2c3a:	0f 91       	pop	r16
    2c3c:	ff 90       	pop	r15
    2c3e:	ef 90       	pop	r14
    2c40:	08 95       	ret

00002c42 <_ZN10LinkedListI13EZUI_MenuItemE3popEv>:
	getNode(index)->data = _t;
	return true;
}

template<typename T>
T LinkedList<T>::pop(){
    2c42:	af 92       	push	r10
    2c44:	bf 92       	push	r11
    2c46:	cf 92       	push	r12
    2c48:	df 92       	push	r13
    2c4a:	ef 92       	push	r14
    2c4c:	ff 92       	push	r15
    2c4e:	0f 93       	push	r16
    2c50:	1f 93       	push	r17
    2c52:	cf 93       	push	r28
    2c54:	df 93       	push	r29
    2c56:	00 d0       	rcall	.+0      	; 0x2c58 <_ZN10LinkedListI13EZUI_MenuItemE3popEv+0x16>
    2c58:	1f 92       	push	r1
    2c5a:	1f 92       	push	r1
    2c5c:	cd b7       	in	r28, 0x3d	; 61
    2c5e:	de b7       	in	r29, 0x3e	; 62
    2c60:	7c 01       	movw	r14, r24
    2c62:	8b 01       	movw	r16, r22
	if(_size <= 0)
    2c64:	fb 01       	movw	r30, r22
    2c66:	62 81       	ldd	r22, Z+2	; 0x02
    2c68:	73 81       	ldd	r23, Z+3	; 0x03
    2c6a:	16 16       	cp	r1, r22
    2c6c:	17 06       	cpc	r1, r23
    2c6e:	14 f0       	brlt	.+4      	; 0x2c74 <_ZN10LinkedListI13EZUI_MenuItemE3popEv+0x32>
		return T();
    2c70:	9a d1       	rcall	.+820    	; 0x2fa6 <_ZN13EZUI_MenuItemC1Ev>
    2c72:	59 c0       	rjmp	.+178    	; 0x2d26 <_ZN10LinkedListI13EZUI_MenuItemE3popEv+0xe4>
	
	isCached = false;
    2c74:	f8 01       	movw	r30, r16
    2c76:	14 86       	std	Z+12, r1	; 0x0c

	if(_size >= 2){
    2c78:	62 30       	cpi	r22, 0x02	; 2
    2c7a:	71 05       	cpc	r23, r1
    2c7c:	7c f1       	brlt	.+94     	; 0x2cdc <_ZN10LinkedListI13EZUI_MenuItemE3popEv+0x9a>
		ListNode<T> *tmp = getNode(_size - 2);
    2c7e:	62 50       	subi	r22, 0x02	; 2
    2c80:	71 09       	sbc	r23, r1
    2c82:	c8 01       	movw	r24, r16
    2c84:	8f de       	rcall	.-738    	; 0x29a4 <_ZN10LinkedListI13EZUI_MenuItemE7getNodeEi>
    2c86:	5c 01       	movw	r10, r24
		T ret = tmp->next->data;
    2c88:	fc 01       	movw	r30, r24
    2c8a:	c5 80       	ldd	r12, Z+5	; 0x05
    2c8c:	d6 80       	ldd	r13, Z+6	; 0x06
    2c8e:	85 e0       	ldi	r24, 0x05	; 5
    2c90:	f6 01       	movw	r30, r12
    2c92:	de 01       	movw	r26, r28
    2c94:	11 96       	adiw	r26, 0x01	; 1
    2c96:	01 90       	ld	r0, Z+
    2c98:	0d 92       	st	X+, r0
    2c9a:	8a 95       	dec	r24
    2c9c:	e1 f7       	brne	.-8      	; 0x2c96 <_ZN10LinkedListI13EZUI_MenuItemE3popEv+0x54>
		delete(tmp->next);
    2c9e:	c1 14       	cp	r12, r1
    2ca0:	d1 04       	cpc	r13, r1
    2ca2:	29 f0       	breq	.+10     	; 0x2cae <_ZN10LinkedListI13EZUI_MenuItemE3popEv+0x6c>

#ifndef LinkedList_h
#define LinkedList_h

template<class T>
struct ListNode
    2ca4:	c6 01       	movw	r24, r12
    2ca6:	86 d1       	rcall	.+780    	; 0x2fb4 <_ZN13EZUI_MenuItemD1Ev>
	isCached = false;

	if(_size >= 2){
		ListNode<T> *tmp = getNode(_size - 2);
		T ret = tmp->next->data;
		delete(tmp->next);
    2ca8:	c6 01       	movw	r24, r12
    2caa:	0e 94 51 30 	call	0x60a2	; 0x60a2 <_ZdlPv>
		tmp->next = false;
    2cae:	f5 01       	movw	r30, r10
    2cb0:	16 82       	std	Z+6, r1	; 0x06
    2cb2:	15 82       	std	Z+5, r1	; 0x05
		last = tmp;
    2cb4:	f8 01       	movw	r30, r16
    2cb6:	b7 82       	std	Z+7, r11	; 0x07
    2cb8:	a6 82       	std	Z+6, r10	; 0x06
		_size--;
    2cba:	82 81       	ldd	r24, Z+2	; 0x02
    2cbc:	93 81       	ldd	r25, Z+3	; 0x03
    2cbe:	01 97       	sbiw	r24, 0x01	; 1
    2cc0:	93 83       	std	Z+3, r25	; 0x03
    2cc2:	82 83       	std	Z+2, r24	; 0x02
		return ret;
    2cc4:	85 e0       	ldi	r24, 0x05	; 5
    2cc6:	fe 01       	movw	r30, r28
    2cc8:	31 96       	adiw	r30, 0x01	; 1
    2cca:	d7 01       	movw	r26, r14
    2ccc:	01 90       	ld	r0, Z+
    2cce:	0d 92       	st	X+, r0
    2cd0:	8a 95       	dec	r24
    2cd2:	e1 f7       	brne	.-8      	; 0x2ccc <_ZN10LinkedListI13EZUI_MenuItemE3popEv+0x8a>
    2cd4:	ce 01       	movw	r24, r28
    2cd6:	01 96       	adiw	r24, 0x01	; 1
    2cd8:	6d d1       	rcall	.+730    	; 0x2fb4 <_ZN13EZUI_MenuItemD1Ev>
    2cda:	25 c0       	rjmp	.+74     	; 0x2d26 <_ZN10LinkedListI13EZUI_MenuItemE3popEv+0xe4>
	}else{
		// Only one element left on the list
		T ret = root->data;
    2cdc:	f8 01       	movw	r30, r16
    2cde:	c4 80       	ldd	r12, Z+4	; 0x04
    2ce0:	d5 80       	ldd	r13, Z+5	; 0x05
    2ce2:	85 e0       	ldi	r24, 0x05	; 5
    2ce4:	f6 01       	movw	r30, r12
    2ce6:	de 01       	movw	r26, r28
    2ce8:	11 96       	adiw	r26, 0x01	; 1
    2cea:	01 90       	ld	r0, Z+
    2cec:	0d 92       	st	X+, r0
    2cee:	8a 95       	dec	r24
    2cf0:	e1 f7       	brne	.-8      	; 0x2cea <_ZN10LinkedListI13EZUI_MenuItemE3popEv+0xa8>
		delete(root);
    2cf2:	c1 14       	cp	r12, r1
    2cf4:	d1 04       	cpc	r13, r1
    2cf6:	29 f0       	breq	.+10     	; 0x2d02 <_ZN10LinkedListI13EZUI_MenuItemE3popEv+0xc0>

#ifndef LinkedList_h
#define LinkedList_h

template<class T>
struct ListNode
    2cf8:	c6 01       	movw	r24, r12
    2cfa:	5c d1       	rcall	.+696    	; 0x2fb4 <_ZN13EZUI_MenuItemD1Ev>
		_size--;
		return ret;
	}else{
		// Only one element left on the list
		T ret = root->data;
		delete(root);
    2cfc:	c6 01       	movw	r24, r12
    2cfe:	0e 94 51 30 	call	0x60a2	; 0x60a2 <_ZdlPv>
		root = false;
    2d02:	f8 01       	movw	r30, r16
    2d04:	15 82       	std	Z+5, r1	; 0x05
    2d06:	14 82       	std	Z+4, r1	; 0x04
		last = false;
    2d08:	17 82       	std	Z+7, r1	; 0x07
    2d0a:	16 82       	std	Z+6, r1	; 0x06
		_size = 0;
    2d0c:	13 82       	std	Z+3, r1	; 0x03
    2d0e:	12 82       	std	Z+2, r1	; 0x02
		return ret;
    2d10:	85 e0       	ldi	r24, 0x05	; 5
    2d12:	fe 01       	movw	r30, r28
    2d14:	31 96       	adiw	r30, 0x01	; 1
    2d16:	d7 01       	movw	r26, r14
    2d18:	01 90       	ld	r0, Z+
    2d1a:	0d 92       	st	X+, r0
    2d1c:	8a 95       	dec	r24
    2d1e:	e1 f7       	brne	.-8      	; 0x2d18 <_ZN10LinkedListI13EZUI_MenuItemE3popEv+0xd6>
    2d20:	ce 01       	movw	r24, r28
    2d22:	01 96       	adiw	r24, 0x01	; 1
    2d24:	47 d1       	rcall	.+654    	; 0x2fb4 <_ZN13EZUI_MenuItemD1Ev>
	}
}
    2d26:	c7 01       	movw	r24, r14
    2d28:	0f 90       	pop	r0
    2d2a:	0f 90       	pop	r0
    2d2c:	0f 90       	pop	r0
    2d2e:	0f 90       	pop	r0
    2d30:	0f 90       	pop	r0
    2d32:	df 91       	pop	r29
    2d34:	cf 91       	pop	r28
    2d36:	1f 91       	pop	r17
    2d38:	0f 91       	pop	r16
    2d3a:	ff 90       	pop	r15
    2d3c:	ef 90       	pop	r14
    2d3e:	df 90       	pop	r13
    2d40:	cf 90       	pop	r12
    2d42:	bf 90       	pop	r11
    2d44:	af 90       	pop	r10
    2d46:	08 95       	ret

00002d48 <_ZN10LinkedListI13EZUI_MenuItemE6removeEi>:
	}

}

template<typename T>
T LinkedList<T>::remove(int index){
    2d48:	cf 92       	push	r12
    2d4a:	df 92       	push	r13
    2d4c:	ef 92       	push	r14
    2d4e:	ff 92       	push	r15
    2d50:	0f 93       	push	r16
    2d52:	1f 93       	push	r17
    2d54:	cf 93       	push	r28
    2d56:	df 93       	push	r29
    2d58:	00 d0       	rcall	.+0      	; 0x2d5a <_ZN10LinkedListI13EZUI_MenuItemE6removeEi+0x12>
    2d5a:	1f 92       	push	r1
    2d5c:	1f 92       	push	r1
    2d5e:	cd b7       	in	r28, 0x3d	; 61
    2d60:	de b7       	in	r29, 0x3e	; 62
    2d62:	7c 01       	movw	r14, r24
    2d64:	8b 01       	movw	r16, r22
	if (index < 0 || index >= _size)
    2d66:	55 23       	and	r21, r21
    2d68:	44 f0       	brlt	.+16     	; 0x2d7a <_ZN10LinkedListI13EZUI_MenuItemE6removeEi+0x32>
    2d6a:	db 01       	movw	r26, r22
    2d6c:	12 96       	adiw	r26, 0x02	; 2
    2d6e:	2d 91       	ld	r18, X+
    2d70:	3c 91       	ld	r19, X
    2d72:	13 97       	sbiw	r26, 0x03	; 3
    2d74:	42 17       	cp	r20, r18
    2d76:	53 07       	cpc	r21, r19
    2d78:	1c f0       	brlt	.+6      	; 0x2d80 <_ZN10LinkedListI13EZUI_MenuItemE6removeEi+0x38>
	{
		return T();
    2d7a:	c7 01       	movw	r24, r14
    2d7c:	14 d1       	rcall	.+552    	; 0x2fa6 <_ZN13EZUI_MenuItemC1Ev>
    2d7e:	4f c0       	rjmp	.+158    	; 0x2e1e <_ZN10LinkedListI13EZUI_MenuItemE6removeEi+0xd6>
	}

	if(index == 0)
    2d80:	41 15       	cp	r20, r1
    2d82:	51 05       	cpc	r21, r1
    2d84:	41 f4       	brne	.+16     	; 0x2d96 <_ZN10LinkedListI13EZUI_MenuItemE6removeEi+0x4e>
		return shift();
    2d86:	db 01       	movw	r26, r22
    2d88:	ed 91       	ld	r30, X+
    2d8a:	fc 91       	ld	r31, X
    2d8c:	06 84       	ldd	r0, Z+14	; 0x0e
    2d8e:	f7 85       	ldd	r31, Z+15	; 0x0f
    2d90:	e0 2d       	mov	r30, r0
    2d92:	19 95       	eicall
    2d94:	44 c0       	rjmp	.+136    	; 0x2e1e <_ZN10LinkedListI13EZUI_MenuItemE6removeEi+0xd6>
	
	if (index == _size-1)
    2d96:	21 50       	subi	r18, 0x01	; 1
    2d98:	31 09       	sbc	r19, r1
    2d9a:	24 17       	cp	r18, r20
    2d9c:	35 07       	cpc	r19, r21
    2d9e:	41 f4       	brne	.+16     	; 0x2db0 <_ZN10LinkedListI13EZUI_MenuItemE6removeEi+0x68>
	{
		return pop();
    2da0:	db 01       	movw	r26, r22
    2da2:	ed 91       	ld	r30, X+
    2da4:	fc 91       	ld	r31, X
    2da6:	04 84       	ldd	r0, Z+12	; 0x0c
    2da8:	f5 85       	ldd	r31, Z+13	; 0x0d
    2daa:	e0 2d       	mov	r30, r0
    2dac:	19 95       	eicall
    2dae:	37 c0       	rjmp	.+110    	; 0x2e1e <_ZN10LinkedListI13EZUI_MenuItemE6removeEi+0xd6>
	}

	ListNode<T> *tmp = getNode(index - 1);
    2db0:	ba 01       	movw	r22, r20
    2db2:	61 50       	subi	r22, 0x01	; 1
    2db4:	71 09       	sbc	r23, r1
    2db6:	c8 01       	movw	r24, r16
    2db8:	f5 dd       	rcall	.-1046   	; 0x29a4 <_ZN10LinkedListI13EZUI_MenuItemE7getNodeEi>
	ListNode<T> *toDelete = tmp->next;
    2dba:	fc 01       	movw	r30, r24
    2dbc:	c5 80       	ldd	r12, Z+5	; 0x05
    2dbe:	d6 80       	ldd	r13, Z+6	; 0x06
	T ret = toDelete->data;
    2dc0:	25 e0       	ldi	r18, 0x05	; 5
    2dc2:	f6 01       	movw	r30, r12
    2dc4:	de 01       	movw	r26, r28
    2dc6:	11 96       	adiw	r26, 0x01	; 1
    2dc8:	01 90       	ld	r0, Z+
    2dca:	0d 92       	st	X+, r0
    2dcc:	2a 95       	dec	r18
    2dce:	e1 f7       	brne	.-8      	; 0x2dc8 <_ZN10LinkedListI13EZUI_MenuItemE6removeEi+0x80>
	tmp->next = tmp->next->next;
    2dd0:	d6 01       	movw	r26, r12
    2dd2:	15 96       	adiw	r26, 0x05	; 5
    2dd4:	2d 91       	ld	r18, X+
    2dd6:	3c 91       	ld	r19, X
    2dd8:	16 97       	sbiw	r26, 0x06	; 6
    2dda:	fc 01       	movw	r30, r24
    2ddc:	36 83       	std	Z+6, r19	; 0x06
    2dde:	25 83       	std	Z+5, r18	; 0x05
	delete(toDelete);
    2de0:	c1 14       	cp	r12, r1
    2de2:	d1 04       	cpc	r13, r1
    2de4:	29 f0       	breq	.+10     	; 0x2df0 <_ZN10LinkedListI13EZUI_MenuItemE6removeEi+0xa8>

#ifndef LinkedList_h
#define LinkedList_h

template<class T>
struct ListNode
    2de6:	c6 01       	movw	r24, r12
    2de8:	e5 d0       	rcall	.+458    	; 0x2fb4 <_ZN13EZUI_MenuItemD1Ev>

	ListNode<T> *tmp = getNode(index - 1);
	ListNode<T> *toDelete = tmp->next;
	T ret = toDelete->data;
	tmp->next = tmp->next->next;
	delete(toDelete);
    2dea:	c6 01       	movw	r24, r12
    2dec:	0e 94 51 30 	call	0x60a2	; 0x60a2 <_ZdlPv>
	_size--;
    2df0:	d8 01       	movw	r26, r16
    2df2:	12 96       	adiw	r26, 0x02	; 2
    2df4:	8d 91       	ld	r24, X+
    2df6:	9c 91       	ld	r25, X
    2df8:	13 97       	sbiw	r26, 0x03	; 3
    2dfa:	01 97       	sbiw	r24, 0x01	; 1
    2dfc:	13 96       	adiw	r26, 0x03	; 3
    2dfe:	9c 93       	st	X, r25
    2e00:	8e 93       	st	-X, r24
    2e02:	12 97       	sbiw	r26, 0x02	; 2
	isCached = false;
    2e04:	1c 96       	adiw	r26, 0x0c	; 12
    2e06:	1c 92       	st	X, r1
	return ret;
    2e08:	85 e0       	ldi	r24, 0x05	; 5
    2e0a:	fe 01       	movw	r30, r28
    2e0c:	31 96       	adiw	r30, 0x01	; 1
    2e0e:	d7 01       	movw	r26, r14
    2e10:	01 90       	ld	r0, Z+
    2e12:	0d 92       	st	X+, r0
    2e14:	8a 95       	dec	r24
    2e16:	e1 f7       	brne	.-8      	; 0x2e10 <_ZN10LinkedListI13EZUI_MenuItemE6removeEi+0xc8>
    2e18:	ce 01       	movw	r24, r28
    2e1a:	01 96       	adiw	r24, 0x01	; 1
    2e1c:	cb d0       	rcall	.+406    	; 0x2fb4 <_ZN13EZUI_MenuItemD1Ev>
}
    2e1e:	c7 01       	movw	r24, r14
    2e20:	0f 90       	pop	r0
    2e22:	0f 90       	pop	r0
    2e24:	0f 90       	pop	r0
    2e26:	0f 90       	pop	r0
    2e28:	0f 90       	pop	r0
    2e2a:	df 91       	pop	r29
    2e2c:	cf 91       	pop	r28
    2e2e:	1f 91       	pop	r17
    2e30:	0f 91       	pop	r16
    2e32:	ff 90       	pop	r15
    2e34:	ef 90       	pop	r14
    2e36:	df 90       	pop	r13
    2e38:	cf 90       	pop	r12
    2e3a:	08 95       	ret

00002e3c <_ZN10LinkedListI13EZUI_MenuItemE3setEiS0_>:
	
	return true;
}

template<typename T>
bool LinkedList<T>::set(int index, T _t){
    2e3c:	cf 93       	push	r28
    2e3e:	df 93       	push	r29
	// Check if index position is in bounds
	if(index < 0 || index >= _size)
    2e40:	77 23       	and	r23, r23
    2e42:	8c f0       	brlt	.+34     	; 0x2e66 <_ZN10LinkedListI13EZUI_MenuItemE3setEiS0_+0x2a>
    2e44:	fc 01       	movw	r30, r24
    2e46:	22 81       	ldd	r18, Z+2	; 0x02
    2e48:	33 81       	ldd	r19, Z+3	; 0x03
    2e4a:	62 17       	cp	r22, r18
    2e4c:	73 07       	cpc	r23, r19
    2e4e:	6c f4       	brge	.+26     	; 0x2e6a <_ZN10LinkedListI13EZUI_MenuItemE3setEiS0_+0x2e>
    2e50:	ea 01       	movw	r28, r20
		return false;

	getNode(index)->data = _t;
    2e52:	a8 dd       	rcall	.-1200   	; 0x29a4 <_ZN10LinkedListI13EZUI_MenuItemE7getNodeEi>
    2e54:	dc 01       	movw	r26, r24
    2e56:	95 e0       	ldi	r25, 0x05	; 5
    2e58:	fe 01       	movw	r30, r28
    2e5a:	01 90       	ld	r0, Z+
    2e5c:	0d 92       	st	X+, r0
    2e5e:	9a 95       	dec	r25
    2e60:	e1 f7       	brne	.-8      	; 0x2e5a <_ZN10LinkedListI13EZUI_MenuItemE3setEiS0_+0x1e>
	return true;
    2e62:	81 e0       	ldi	r24, 0x01	; 1
    2e64:	03 c0       	rjmp	.+6      	; 0x2e6c <_ZN10LinkedListI13EZUI_MenuItemE3setEiS0_+0x30>

template<typename T>
bool LinkedList<T>::set(int index, T _t){
	// Check if index position is in bounds
	if(index < 0 || index >= _size)
		return false;
    2e66:	80 e0       	ldi	r24, 0x00	; 0
    2e68:	01 c0       	rjmp	.+2      	; 0x2e6c <_ZN10LinkedListI13EZUI_MenuItemE3setEiS0_+0x30>
    2e6a:	80 e0       	ldi	r24, 0x00	; 0

	getNode(index)->data = _t;
	return true;
}
    2e6c:	df 91       	pop	r29
    2e6e:	cf 91       	pop	r28
    2e70:	08 95       	ret

00002e72 <_ZN10LinkedListI13EZUI_MenuItemE3addEiS0_>:
int LinkedList<T>::size(){
	return _size;
}

template<typename T>
bool LinkedList<T>::add(int index, T _t){
    2e72:	af 92       	push	r10
    2e74:	bf 92       	push	r11
    2e76:	cf 92       	push	r12
    2e78:	df 92       	push	r13
    2e7a:	ef 92       	push	r14
    2e7c:	ff 92       	push	r15
    2e7e:	0f 93       	push	r16
    2e80:	1f 93       	push	r17
    2e82:	cf 93       	push	r28
    2e84:	df 93       	push	r29
    2e86:	cd b7       	in	r28, 0x3d	; 61
    2e88:	de b7       	in	r29, 0x3e	; 62
    2e8a:	2a 97       	sbiw	r28, 0x0a	; 10
    2e8c:	0f b6       	in	r0, 0x3f	; 63
    2e8e:	f8 94       	cli
    2e90:	de bf       	out	0x3e, r29	; 62
    2e92:	0f be       	out	0x3f, r0	; 63
    2e94:	cd bf       	out	0x3d, r28	; 61
    2e96:	8c 01       	movw	r16, r24
    2e98:	7b 01       	movw	r14, r22
    2e9a:	5a 01       	movw	r10, r20

	if(index >= _size)
    2e9c:	dc 01       	movw	r26, r24
    2e9e:	12 96       	adiw	r26, 0x02	; 2
    2ea0:	8d 91       	ld	r24, X+
    2ea2:	9c 91       	ld	r25, X
    2ea4:	13 97       	sbiw	r26, 0x03	; 3
    2ea6:	68 17       	cp	r22, r24
    2ea8:	79 07       	cpc	r23, r25
    2eaa:	bc f0       	brlt	.+46     	; 0x2eda <_ZN10LinkedListI13EZUI_MenuItemE3addEiS0_+0x68>
		return add(_t);
    2eac:	ed 91       	ld	r30, X+
    2eae:	fc 91       	ld	r31, X
    2eb0:	24 81       	ldd	r18, Z+4	; 0x04
    2eb2:	35 81       	ldd	r19, Z+5	; 0x05
    2eb4:	95 e0       	ldi	r25, 0x05	; 5
    2eb6:	fa 01       	movw	r30, r20
    2eb8:	de 01       	movw	r26, r28
    2eba:	16 96       	adiw	r26, 0x06	; 6
    2ebc:	01 90       	ld	r0, Z+
    2ebe:	0d 92       	st	X+, r0
    2ec0:	9a 95       	dec	r25
    2ec2:	e1 f7       	brne	.-8      	; 0x2ebc <_ZN10LinkedListI13EZUI_MenuItemE3addEiS0_+0x4a>
    2ec4:	be 01       	movw	r22, r28
    2ec6:	6a 5f       	subi	r22, 0xFA	; 250
    2ec8:	7f 4f       	sbci	r23, 0xFF	; 255
    2eca:	c8 01       	movw	r24, r16
    2ecc:	f9 01       	movw	r30, r18
    2ece:	19 95       	eicall
    2ed0:	18 2f       	mov	r17, r24
    2ed2:	ce 01       	movw	r24, r28
    2ed4:	06 96       	adiw	r24, 0x06	; 6
    2ed6:	6e d0       	rcall	.+220    	; 0x2fb4 <_ZN13EZUI_MenuItemD1Ev>
    2ed8:	44 c0       	rjmp	.+136    	; 0x2f62 <_ZN10LinkedListI13EZUI_MenuItemE3addEiS0_+0xf0>

	if(index == 0)
    2eda:	67 2b       	or	r22, r23
    2edc:	c1 f4       	brne	.+48     	; 0x2f0e <_ZN10LinkedListI13EZUI_MenuItemE3addEiS0_+0x9c>
		return unshift(_t);
    2ede:	d8 01       	movw	r26, r16
    2ee0:	ed 91       	ld	r30, X+
    2ee2:	fc 91       	ld	r31, X
    2ee4:	26 81       	ldd	r18, Z+6	; 0x06
    2ee6:	37 81       	ldd	r19, Z+7	; 0x07
    2ee8:	95 e0       	ldi	r25, 0x05	; 5
    2eea:	fa 01       	movw	r30, r20
    2eec:	de 01       	movw	r26, r28
    2eee:	11 96       	adiw	r26, 0x01	; 1
    2ef0:	01 90       	ld	r0, Z+
    2ef2:	0d 92       	st	X+, r0
    2ef4:	9a 95       	dec	r25
    2ef6:	e1 f7       	brne	.-8      	; 0x2ef0 <_ZN10LinkedListI13EZUI_MenuItemE3addEiS0_+0x7e>
    2ef8:	be 01       	movw	r22, r28
    2efa:	6f 5f       	subi	r22, 0xFF	; 255
    2efc:	7f 4f       	sbci	r23, 0xFF	; 255
    2efe:	c8 01       	movw	r24, r16
    2f00:	f9 01       	movw	r30, r18
    2f02:	19 95       	eicall
    2f04:	18 2f       	mov	r17, r24
    2f06:	ce 01       	movw	r24, r28
    2f08:	01 96       	adiw	r24, 0x01	; 1
    2f0a:	54 d0       	rcall	.+168    	; 0x2fb4 <_ZN13EZUI_MenuItemD1Ev>
    2f0c:	2a c0       	rjmp	.+84     	; 0x2f62 <_ZN10LinkedListI13EZUI_MenuItemE3addEiS0_+0xf0>

	ListNode<T> *tmp = new ListNode<T>(),
    2f0e:	87 e0       	ldi	r24, 0x07	; 7
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    2f16:	6c 01       	movw	r12, r24
    2f18:	87 e0       	ldi	r24, 0x07	; 7
    2f1a:	d6 01       	movw	r26, r12
    2f1c:	1d 92       	st	X+, r1
    2f1e:	8a 95       	dec	r24
    2f20:	e9 f7       	brne	.-6      	; 0x2f1c <_ZN10LinkedListI13EZUI_MenuItemE3addEiS0_+0xaa>

#ifndef LinkedList_h
#define LinkedList_h

template<class T>
struct ListNode
    2f22:	c6 01       	movw	r24, r12
    2f24:	40 d0       	rcall	.+128    	; 0x2fa6 <_ZN13EZUI_MenuItemC1Ev>

	if(index == 0)
		return unshift(_t);

	ListNode<T> *tmp = new ListNode<T>(),
				 *_prev = getNode(index-1);
    2f26:	b7 01       	movw	r22, r14
    2f28:	61 50       	subi	r22, 0x01	; 1
    2f2a:	71 09       	sbc	r23, r1
    2f2c:	c8 01       	movw	r24, r16
    2f2e:	3a dd       	rcall	.-1420   	; 0x29a4 <_ZN10LinkedListI13EZUI_MenuItemE7getNodeEi>
	tmp->data = _t;
    2f30:	25 e0       	ldi	r18, 0x05	; 5
    2f32:	f5 01       	movw	r30, r10
    2f34:	d6 01       	movw	r26, r12
    2f36:	01 90       	ld	r0, Z+
    2f38:	0d 92       	st	X+, r0
    2f3a:	2a 95       	dec	r18
    2f3c:	e1 f7       	brne	.-8      	; 0x2f36 <_ZN10LinkedListI13EZUI_MenuItemE3addEiS0_+0xc4>
	tmp->next = _prev->next;
    2f3e:	fc 01       	movw	r30, r24
    2f40:	25 81       	ldd	r18, Z+5	; 0x05
    2f42:	36 81       	ldd	r19, Z+6	; 0x06
    2f44:	d6 01       	movw	r26, r12
    2f46:	16 96       	adiw	r26, 0x06	; 6
    2f48:	3c 93       	st	X, r19
    2f4a:	2e 93       	st	-X, r18
    2f4c:	15 97       	sbiw	r26, 0x05	; 5
	_prev->next = tmp;
    2f4e:	d6 82       	std	Z+6, r13	; 0x06
    2f50:	c5 82       	std	Z+5, r12	; 0x05

	_size++;
    2f52:	f8 01       	movw	r30, r16
    2f54:	82 81       	ldd	r24, Z+2	; 0x02
    2f56:	93 81       	ldd	r25, Z+3	; 0x03
    2f58:	01 96       	adiw	r24, 0x01	; 1
    2f5a:	93 83       	std	Z+3, r25	; 0x03
    2f5c:	82 83       	std	Z+2, r24	; 0x02
	isCached = false;
    2f5e:	14 86       	std	Z+12, r1	; 0x0c

	return true;
    2f60:	11 e0       	ldi	r17, 0x01	; 1
}
    2f62:	81 2f       	mov	r24, r17
    2f64:	2a 96       	adiw	r28, 0x0a	; 10
    2f66:	0f b6       	in	r0, 0x3f	; 63
    2f68:	f8 94       	cli
    2f6a:	de bf       	out	0x3e, r29	; 62
    2f6c:	0f be       	out	0x3f, r0	; 63
    2f6e:	cd bf       	out	0x3d, r28	; 61
    2f70:	df 91       	pop	r29
    2f72:	cf 91       	pop	r28
    2f74:	1f 91       	pop	r17
    2f76:	0f 91       	pop	r16
    2f78:	ff 90       	pop	r15
    2f7a:	ef 90       	pop	r14
    2f7c:	df 90       	pop	r13
    2f7e:	cf 90       	pop	r12
    2f80:	bf 90       	pop	r11
    2f82:	af 90       	pop	r10
    2f84:	08 95       	ret

00002f86 <_ZN13EZUI_MenuItemC1EP17EZUI_Control_Link>:
 */

#include "EZUI_MenuItem.h"

//Constructor - LCD Page
EZUI_MenuItem::EZUI_MenuItem(EZUI_Control_Link * Link)
    2f86:	fc 01       	movw	r30, r24
    2f88:	14 82       	std	Z+4, r1	; 0x04
    2f8a:	13 82       	std	Z+3, r1	; 0x03
{
	this->LinkRef = Link;
    2f8c:	72 83       	std	Z+2, r23	; 0x02
    2f8e:	61 83       	std	Z+1, r22	; 0x01
	this->Type = LinkControl;
    2f90:	81 e0       	ldi	r24, 0x01	; 1
    2f92:	80 83       	st	Z, r24
    2f94:	08 95       	ret

00002f96 <_ZN13EZUI_MenuItemC1EP25EZUI_Control_ToggleOption>:
}

//Constructor - LCD Page
EZUI_MenuItem::EZUI_MenuItem(EZUI_Control_ToggleOption * ToggleOpt)
    2f96:	fc 01       	movw	r30, r24
    2f98:	12 82       	std	Z+2, r1	; 0x02
    2f9a:	11 82       	std	Z+1, r1	; 0x01
{
	this->ToggleOptRef = ToggleOpt;
    2f9c:	74 83       	std	Z+4, r23	; 0x04
    2f9e:	63 83       	std	Z+3, r22	; 0x03
	this->Type = ToggleOptionControl;
    2fa0:	82 e0       	ldi	r24, 0x02	; 2
    2fa2:	80 83       	st	Z, r24
    2fa4:	08 95       	ret

00002fa6 <_ZN13EZUI_MenuItemC1Ev>:
}

// default constructor
EZUI_MenuItem::EZUI_MenuItem()
    2fa6:	fc 01       	movw	r30, r24
    2fa8:	10 82       	st	Z, r1
    2faa:	12 82       	std	Z+2, r1	; 0x02
    2fac:	11 82       	std	Z+1, r1	; 0x01
    2fae:	14 82       	std	Z+4, r1	; 0x04
    2fb0:	13 82       	std	Z+3, r1	; 0x03
    2fb2:	08 95       	ret

00002fb4 <_ZN13EZUI_MenuItemD1Ev>:
{
}

// default destructor
EZUI_MenuItem::~EZUI_MenuItem()
    2fb4:	08 95       	ret

00002fb6 <_ZN13EZUI_MenuItem5PrintEiiP4EZUI>:
{
}

//Print
void EZUI_MenuItem::Print(int col, int row, EZUI *UI){
    2fb6:	8f 92       	push	r8
    2fb8:	9f 92       	push	r9
    2fba:	af 92       	push	r10
    2fbc:	bf 92       	push	r11
    2fbe:	cf 92       	push	r12
    2fc0:	df 92       	push	r13
    2fc2:	ef 92       	push	r14
    2fc4:	ff 92       	push	r15
    2fc6:	0f 93       	push	r16
    2fc8:	1f 93       	push	r17
    2fca:	cf 93       	push	r28
    2fcc:	df 93       	push	r29
    2fce:	cd b7       	in	r28, 0x3d	; 61
    2fd0:	de b7       	in	r29, 0x3e	; 62
    2fd2:	a4 97       	sbiw	r28, 0x24	; 36
    2fd4:	0f b6       	in	r0, 0x3f	; 63
    2fd6:	f8 94       	cli
    2fd8:	de bf       	out	0x3e, r29	; 62
    2fda:	0f be       	out	0x3f, r0	; 63
    2fdc:	cd bf       	out	0x3d, r28	; 61
    2fde:	8c 01       	movw	r16, r24
    2fe0:	a6 2e       	mov	r10, r22
    2fe2:	c4 2e       	mov	r12, r20
	LiquidCrystal_I2C * LCD = UI->LCD;
    2fe4:	f9 01       	movw	r30, r18
    2fe6:	e6 84       	ldd	r14, Z+14	; 0x0e
    2fe8:	f7 84       	ldd	r15, Z+15	; 0x0f
	switch(this->Type){
    2fea:	fc 01       	movw	r30, r24
    2fec:	80 81       	ld	r24, Z
    2fee:	81 30       	cpi	r24, 0x01	; 1
    2ff0:	09 f4       	brne	.+2      	; 0x2ff4 <_ZN13EZUI_MenuItem5PrintEiiP4EZUI+0x3e>
    2ff2:	af c0       	rjmp	.+350    	; 0x3152 <_ZN13EZUI_MenuItem5PrintEiiP4EZUI+0x19c>
    2ff4:	82 30       	cpi	r24, 0x02	; 2
    2ff6:	09 f0       	breq	.+2      	; 0x2ffa <_ZN13EZUI_MenuItem5PrintEiiP4EZUI+0x44>
    2ff8:	bc c0       	rjmp	.+376    	; 0x3172 <_ZN13EZUI_MenuItem5PrintEiiP4EZUI+0x1bc>
		//Print Toggle Option
		case(ToggleOptionControl):
			if (!(ToggleOptRef == NULL)){
    2ffa:	03 81       	ldd	r16, Z+3	; 0x03
    2ffc:	14 81       	ldd	r17, Z+4	; 0x04
    2ffe:	01 15       	cp	r16, r1
    3000:	11 05       	cpc	r17, r1
    3002:	09 f4       	brne	.+2      	; 0x3006 <_ZN13EZUI_MenuItem5PrintEiiP4EZUI+0x50>
    3004:	b6 c0       	rjmp	.+364    	; 0x3172 <_ZN13EZUI_MenuItem5PrintEiiP4EZUI+0x1bc>
#include "../../EnhancedIO/DigitalIO.h"

#ifndef __LCDTOGGLEOPTION_H__
#define __LCDTOGGLEOPTION_H__

class EZUI_Control_ToggleOption
    3006:	b8 01       	movw	r22, r16
    3008:	ce 01       	movw	r24, r28
    300a:	01 96       	adiw	r24, 0x01	; 1
    300c:	0e 94 e0 37 	call	0x6fc0	; 0x6fc0 <_ZN6StringC1ERKS_>
    3010:	f8 01       	movw	r30, r16
    3012:	86 81       	ldd	r24, Z+6	; 0x06
    3014:	8f 83       	std	Y+7, r24	; 0x07
    3016:	b8 01       	movw	r22, r16
    3018:	69 5f       	subi	r22, 0xF9	; 249
    301a:	7f 4f       	sbci	r23, 0xFF	; 255
    301c:	ce 01       	movw	r24, r28
    301e:	08 96       	adiw	r24, 0x08	; 8
    3020:	0e 94 e0 37 	call	0x6fc0	; 0x6fc0 <_ZN6StringC1ERKS_>
    3024:	b8 01       	movw	r22, r16
    3026:	63 5f       	subi	r22, 0xF3	; 243
    3028:	7f 4f       	sbci	r23, 0xFF	; 255
    302a:	ce 01       	movw	r24, r28
    302c:	0e 96       	adiw	r24, 0x0e	; 14
    302e:	0e 94 e0 37 	call	0x6fc0	; 0x6fc0 <_ZN6StringC1ERKS_>
    3032:	f8 01       	movw	r30, r16
    3034:	83 89       	ldd	r24, Z+19	; 0x13
    3036:	8c 8b       	std	Y+20, r24	; 0x14
    3038:	84 89       	ldd	r24, Z+20	; 0x14
    303a:	95 89       	ldd	r25, Z+21	; 0x15
    303c:	9e 8b       	std	Y+22, r25	; 0x16
    303e:	8d 8b       	std	Y+21, r24	; 0x15
    3040:	86 89       	ldd	r24, Z+22	; 0x16
    3042:	97 89       	ldd	r25, Z+23	; 0x17
    3044:	98 8f       	std	Y+24, r25	; 0x18
    3046:	8f 8b       	std	Y+23, r24	; 0x17
				EZUI_Control_ToggleOption TglOpt = *ToggleOptRef;
				LCD->setCursor(col,row);
    3048:	de 2c       	mov	r13, r14
    304a:	bf 2c       	mov	r11, r15
    304c:	4c 2d       	mov	r20, r12
    304e:	6a 2d       	mov	r22, r10
    3050:	8e 2d       	mov	r24, r14
    3052:	9f 2d       	mov	r25, r15
    3054:	0e 94 88 26 	call	0x4d10	; 0x4d10 <_ZN3LCD9setCursorEhh>
				LCD->print(TglOpt.Label);
    3058:	be 01       	movw	r22, r28
    305a:	6f 5f       	subi	r22, 0xFF	; 255
    305c:	7f 4f       	sbci	r23, 0xFF	; 255
    305e:	8e 2d       	mov	r24, r14
    3060:	9f 2d       	mov	r25, r15
    3062:	0e 94 81 30 	call	0x6102	; 0x6102 <_ZN5Print5printERK6String>
			
				String TrueLabel = TglOpt.TrueLabel();
    3066:	be 01       	movw	r22, r28
    3068:	6f 5f       	subi	r22, 0xFF	; 255
    306a:	7f 4f       	sbci	r23, 0xFF	; 255
    306c:	ce 01       	movw	r24, r28
    306e:	4f 96       	adiw	r24, 0x1f	; 31
    3070:	0e 94 4c 07 	call	0xe98	; 0xe98 <_ZN25EZUI_Control_ToggleOption9TrueLabelEv>
				int TrueTextLen = TrueLabel.length();
    3074:	8b a0       	ldd	r8, Y+35	; 0x23
    3076:	9c a0       	ldd	r9, Y+36	; 0x24
				String FalseLabel = TglOpt.FalseLabel();
    3078:	be 01       	movw	r22, r28
    307a:	6f 5f       	subi	r22, 0xFF	; 255
    307c:	7f 4f       	sbci	r23, 0xFF	; 255
    307e:	ce 01       	movw	r24, r28
    3080:	49 96       	adiw	r24, 0x19	; 25
    3082:	0e 94 70 07 	call	0xee0	; 0xee0 <_ZN25EZUI_Control_ToggleOption10FalseLabelEv>
				int FalseTextLen = FalseLabel.length();
    3086:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3088:	9e 8d       	ldd	r25, Y+30	; 0x1e
			
				//Set Cursor Position
				int display_width = 20;
				if(TrueTextLen>FalseTextLen){
    308a:	88 15       	cp	r24, r8
    308c:	99 05       	cpc	r25, r9
    308e:	04 f5       	brge	.+64     	; 0x30d0 <_ZN13EZUI_MenuItem5PrintEiiP4EZUI+0x11a>
					int StartPos = display_width-TrueTextLen - 1;
    3090:	03 e1       	ldi	r16, 0x13	; 19
    3092:	10 e0       	ldi	r17, 0x00	; 0
    3094:	08 19       	sub	r16, r8
    3096:	19 09       	sbc	r17, r9
					LCD->setCursor(StartPos,row);
    3098:	a0 2e       	mov	r10, r16
    309a:	4c 2d       	mov	r20, r12
    309c:	60 2f       	mov	r22, r16
    309e:	8e 2d       	mov	r24, r14
    30a0:	9f 2d       	mov	r25, r15
    30a2:	0e 94 88 26 	call	0x4d10	; 0x4d10 <_ZN3LCD9setCursorEhh>
					
					//Print spaces to clear the label
					int i=0;
					for(i=StartPos; i<=display_width; i++){
    30a6:	05 31       	cpi	r16, 0x15	; 21
    30a8:	11 05       	cpc	r17, r1
    30aa:	5c f4       	brge	.+22     	; 0x30c2 <_ZN13EZUI_MenuItem5PrintEiiP4EZUI+0x10c>
						LCD->print(" ");
    30ac:	66 ed       	ldi	r22, 0xD6	; 214
    30ae:	75 e0       	ldi	r23, 0x05	; 5
    30b0:	8d 2d       	mov	r24, r13
    30b2:	9b 2d       	mov	r25, r11
    30b4:	0e 94 90 30 	call	0x6120	; 0x6120 <_ZN5Print5printEPKc>
					int StartPos = display_width-TrueTextLen - 1;
					LCD->setCursor(StartPos,row);
					
					//Print spaces to clear the label
					int i=0;
					for(i=StartPos; i<=display_width; i++){
    30b8:	0f 5f       	subi	r16, 0xFF	; 255
    30ba:	1f 4f       	sbci	r17, 0xFF	; 255
    30bc:	05 31       	cpi	r16, 0x15	; 21
    30be:	11 05       	cpc	r17, r1
    30c0:	a9 f7       	brne	.-22     	; 0x30ac <_ZN13EZUI_MenuItem5PrintEiiP4EZUI+0xf6>
						LCD->print(" ");
					}
					LCD->setCursor(StartPos,row);
    30c2:	4c 2d       	mov	r20, r12
    30c4:	6a 2d       	mov	r22, r10
    30c6:	8e 2d       	mov	r24, r14
    30c8:	9f 2d       	mov	r25, r15
    30ca:	0e 94 88 26 	call	0x4d10	; 0x4d10 <_ZN3LCD9setCursorEhh>
    30ce:	1f c0       	rjmp	.+62     	; 0x310e <_ZN13EZUI_MenuItem5PrintEiiP4EZUI+0x158>
				}else{
					int StartPos = display_width-FalseTextLen - 1;
    30d0:	03 e1       	ldi	r16, 0x13	; 19
    30d2:	10 e0       	ldi	r17, 0x00	; 0
    30d4:	08 1b       	sub	r16, r24
    30d6:	19 0b       	sbc	r17, r25
					LCD->setCursor(StartPos,row);
    30d8:	a0 2e       	mov	r10, r16
    30da:	4c 2d       	mov	r20, r12
    30dc:	60 2f       	mov	r22, r16
    30de:	8e 2d       	mov	r24, r14
    30e0:	9f 2d       	mov	r25, r15
    30e2:	0e 94 88 26 	call	0x4d10	; 0x4d10 <_ZN3LCD9setCursorEhh>
				
					//Print spaces to clear the label
					int i=0;
					for(i=StartPos; i<=display_width; i++){
    30e6:	05 31       	cpi	r16, 0x15	; 21
    30e8:	11 05       	cpc	r17, r1
    30ea:	5c f4       	brge	.+22     	; 0x3102 <_ZN13EZUI_MenuItem5PrintEiiP4EZUI+0x14c>
						LCD->print(" ");
    30ec:	66 ed       	ldi	r22, 0xD6	; 214
    30ee:	75 e0       	ldi	r23, 0x05	; 5
    30f0:	8d 2d       	mov	r24, r13
    30f2:	9b 2d       	mov	r25, r11
    30f4:	0e 94 90 30 	call	0x6120	; 0x6120 <_ZN5Print5printEPKc>
					int StartPos = display_width-FalseTextLen - 1;
					LCD->setCursor(StartPos,row);
				
					//Print spaces to clear the label
					int i=0;
					for(i=StartPos; i<=display_width; i++){
    30f8:	0f 5f       	subi	r16, 0xFF	; 255
    30fa:	1f 4f       	sbci	r17, 0xFF	; 255
    30fc:	05 31       	cpi	r16, 0x15	; 21
    30fe:	11 05       	cpc	r17, r1
    3100:	a9 f7       	brne	.-22     	; 0x30ec <_ZN13EZUI_MenuItem5PrintEiiP4EZUI+0x136>
						LCD->print(" ");
					}
					LCD->setCursor(StartPos,row);
    3102:	4c 2d       	mov	r20, r12
    3104:	6a 2d       	mov	r22, r10
    3106:	8e 2d       	mov	r24, r14
    3108:	9f 2d       	mov	r25, r15
    310a:	0e 94 88 26 	call	0x4d10	; 0x4d10 <_ZN3LCD9setCursorEhh>
				}
			
				//Print current value
				if(TglOpt.Value() == 1){
    310e:	ce 01       	movw	r24, r28
    3110:	01 96       	adiw	r24, 0x01	; 1
    3112:	0e 94 94 07 	call	0xf28	; 0xf28 <_ZN25EZUI_Control_ToggleOption5ValueEv>
    3116:	01 97       	sbiw	r24, 0x01	; 1
    3118:	41 f4       	brne	.+16     	; 0x312a <_ZN13EZUI_MenuItem5PrintEiiP4EZUI+0x174>
					LCD->print(TrueLabel);
    311a:	be 01       	movw	r22, r28
    311c:	61 5e       	subi	r22, 0xE1	; 225
    311e:	7f 4f       	sbci	r23, 0xFF	; 255
    3120:	8e 2d       	mov	r24, r14
    3122:	9f 2d       	mov	r25, r15
    3124:	0e 94 81 30 	call	0x6102	; 0x6102 <_ZN5Print5printERK6String>
    3128:	07 c0       	rjmp	.+14     	; 0x3138 <_ZN13EZUI_MenuItem5PrintEiiP4EZUI+0x182>
				}else{
					LCD->print(FalseLabel);
    312a:	be 01       	movw	r22, r28
    312c:	67 5e       	subi	r22, 0xE7	; 231
    312e:	7f 4f       	sbci	r23, 0xFF	; 255
    3130:	8e 2d       	mov	r24, r14
    3132:	9f 2d       	mov	r25, r15
    3134:	0e 94 81 30 	call	0x6102	; 0x6102 <_ZN5Print5printERK6String>
				LCD->setCursor(col,row);
				LCD->print(TglOpt.Label);
			
				String TrueLabel = TglOpt.TrueLabel();
				int TrueTextLen = TrueLabel.length();
				String FalseLabel = TglOpt.FalseLabel();
    3138:	ce 01       	movw	r24, r28
    313a:	49 96       	adiw	r24, 0x19	; 25
    313c:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
			if (!(ToggleOptRef == NULL)){
				EZUI_Control_ToggleOption TglOpt = *ToggleOptRef;
				LCD->setCursor(col,row);
				LCD->print(TglOpt.Label);
			
				String TrueLabel = TglOpt.TrueLabel();
    3140:	ce 01       	movw	r24, r28
    3142:	4f 96       	adiw	r24, 0x1f	; 31
    3144:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
				//Print current value
				if(TglOpt.Value() == 1){
					LCD->print(TrueLabel);
				}else{
					LCD->print(FalseLabel);
				}
    3148:	ce 01       	movw	r24, r28
    314a:	01 96       	adiw	r24, 0x01	; 1
    314c:	0e 94 3c 07 	call	0xe78	; 0xe78 <_ZN25EZUI_Control_ToggleOptionD1Ev>
    3150:	10 c0       	rjmp	.+32     	; 0x3172 <_ZN13EZUI_MenuItem5PrintEiiP4EZUI+0x1bc>
			}
			break;
			
		//Print Link Control
		case(LinkControl):
			if(!(LinkRef == NULL)){
    3152:	f8 01       	movw	r30, r16
    3154:	81 81       	ldd	r24, Z+1	; 0x01
    3156:	92 81       	ldd	r25, Z+2	; 0x02
    3158:	89 2b       	or	r24, r25
    315a:	59 f0       	breq	.+22     	; 0x3172 <_ZN13EZUI_MenuItem5PrintEiiP4EZUI+0x1bc>
				LCD->setCursor(col,row);
    315c:	8e 2d       	mov	r24, r14
    315e:	9f 2d       	mov	r25, r15
    3160:	0e 94 88 26 	call	0x4d10	; 0x4d10 <_ZN3LCD9setCursorEhh>
				LCD->print((*LinkRef).Label);
    3164:	f8 01       	movw	r30, r16
    3166:	61 81       	ldd	r22, Z+1	; 0x01
    3168:	72 81       	ldd	r23, Z+2	; 0x02
    316a:	8e 2d       	mov	r24, r14
    316c:	9f 2d       	mov	r25, r15
    316e:	0e 94 81 30 	call	0x6102	; 0x6102 <_ZN5Print5printERK6String>
			}
			break;
	}
}
    3172:	a4 96       	adiw	r28, 0x24	; 36
    3174:	0f b6       	in	r0, 0x3f	; 63
    3176:	f8 94       	cli
    3178:	de bf       	out	0x3e, r29	; 62
    317a:	0f be       	out	0x3f, r0	; 63
    317c:	cd bf       	out	0x3d, r28	; 61
    317e:	df 91       	pop	r29
    3180:	cf 91       	pop	r28
    3182:	1f 91       	pop	r17
    3184:	0f 91       	pop	r16
    3186:	ff 90       	pop	r15
    3188:	ef 90       	pop	r14
    318a:	df 90       	pop	r13
    318c:	cf 90       	pop	r12
    318e:	bf 90       	pop	r11
    3190:	af 90       	pop	r10
    3192:	9f 90       	pop	r9
    3194:	8f 90       	pop	r8
    3196:	08 95       	ret

00003198 <_ZN13EZUI_MenuItem10ItemSelectEP4EZUI>:

//Item Select
void EZUI_MenuItem::ItemSelect(EZUI *UI){
    3198:	cf 93       	push	r28
    319a:	df 93       	push	r29
    319c:	eb 01       	movw	r28, r22
	 switch (Type) {
    319e:	fc 01       	movw	r30, r24
    31a0:	20 81       	ld	r18, Z
    31a2:	21 30       	cpi	r18, 0x01	; 1
    31a4:	19 f0       	breq	.+6      	; 0x31ac <_ZN13EZUI_MenuItem10ItemSelectEP4EZUI+0x14>
    31a6:	22 30       	cpi	r18, 0x02	; 2
    31a8:	11 f1       	breq	.+68     	; 0x31ee <_ZN13EZUI_MenuItem10ItemSelectEP4EZUI+0x56>
    31aa:	29 c0       	rjmp	.+82     	; 0x31fe <_ZN13EZUI_MenuItem10ItemSelectEP4EZUI+0x66>
		case(LinkControl):
			if (LinkRef == NULL){
    31ac:	fc 01       	movw	r30, r24
    31ae:	81 81       	ldd	r24, Z+1	; 0x01
    31b0:	92 81       	ldd	r25, Z+2	; 0x02
    31b2:	00 97       	sbiw	r24, 0x00	; 0
    31b4:	c9 f4       	brne	.+50     	; 0x31e8 <_ZN13EZUI_MenuItem10ItemSelectEP4EZUI+0x50>
				UI->LCD->clear();
    31b6:	8e 85       	ldd	r24, Y+14	; 0x0e
    31b8:	9f 85       	ldd	r25, Y+15	; 0x0f
    31ba:	0e 94 81 26 	call	0x4d02	; 0x4d02 <_ZN3LCD5clearEv>
				UI->LCD->println("Error!");
    31be:	67 eb       	ldi	r22, 0xB7	; 183
    31c0:	74 e0       	ldi	r23, 0x04	; 4
    31c2:	8e 85       	ldd	r24, Y+14	; 0x0e
    31c4:	9f 85       	ldd	r25, Y+15	; 0x0f
    31c6:	0e 94 ca 30 	call	0x6194	; 0x6194 <_ZN5Print7printlnEPKc>
				UI->LCD->println("Selected Menu item null");
    31ca:	6e eb       	ldi	r22, 0xBE	; 190
    31cc:	74 e0       	ldi	r23, 0x04	; 4
    31ce:	8e 85       	ldd	r24, Y+14	; 0x0e
    31d0:	9f 85       	ldd	r25, Y+15	; 0x0f
    31d2:	0e 94 ca 30 	call	0x6194	; 0x6194 <_ZN5Print7printlnEPKc>
				delay(3000);
    31d6:	68 eb       	ldi	r22, 0xB8	; 184
    31d8:	7b e0       	ldi	r23, 0x0B	; 11
    31da:	80 e0       	ldi	r24, 0x00	; 0
    31dc:	90 e0       	ldi	r25, 0x00	; 0
    31de:	0e 94 74 35 	call	0x6ae8	; 0x6ae8 <delay>
				UI->display();
    31e2:	ce 01       	movw	r24, r28
    31e4:	ba d7       	rcall	.+3956   	; 0x415a <_ZN4EZUI7displayEv>
    31e6:	23 c0       	rjmp	.+70     	; 0x322e <_ZN13EZUI_MenuItem10ItemSelectEP4EZUI+0x96>
			}else{
				LinkRef->FollowLink(UI);
    31e8:	0e 94 29 07 	call	0xe52	; 0xe52 <_ZN17EZUI_Control_Link10FollowLinkEP4EZUI>
    31ec:	20 c0       	rjmp	.+64     	; 0x322e <_ZN13EZUI_MenuItem10ItemSelectEP4EZUI+0x96>
			}
			break;
		case(ToggleOptionControl):
			(*ToggleOptRef).Toggle();
    31ee:	fc 01       	movw	r30, r24
    31f0:	83 81       	ldd	r24, Z+3	; 0x03
    31f2:	94 81       	ldd	r25, Z+4	; 0x04
    31f4:	0e 94 b5 07 	call	0xf6a	; 0xf6a <_ZN25EZUI_Control_ToggleOption6ToggleEv>
			UI->display();
    31f8:	ce 01       	movw	r24, r28
    31fa:	af d7       	rcall	.+3934   	; 0x415a <_ZN4EZUI7displayEv>
			break;
    31fc:	18 c0       	rjmp	.+48     	; 0x322e <_ZN13EZUI_MenuItem10ItemSelectEP4EZUI+0x96>
		default:
			UI->LCD->clear();
    31fe:	8e 85       	ldd	r24, Y+14	; 0x0e
    3200:	9f 85       	ldd	r25, Y+15	; 0x0f
    3202:	0e 94 81 26 	call	0x4d02	; 0x4d02 <_ZN3LCD5clearEv>
			UI->LCD->println("ERROR!:");
    3206:	66 ed       	ldi	r22, 0xD6	; 214
    3208:	74 e0       	ldi	r23, 0x04	; 4
    320a:	8e 85       	ldd	r24, Y+14	; 0x0e
    320c:	9f 85       	ldd	r25, Y+15	; 0x0f
    320e:	0e 94 ca 30 	call	0x6194	; 0x6194 <_ZN5Print7printlnEPKc>
			UI->LCD->println("Menu Type not yet Supported");
    3212:	6e ed       	ldi	r22, 0xDE	; 222
    3214:	74 e0       	ldi	r23, 0x04	; 4
    3216:	8e 85       	ldd	r24, Y+14	; 0x0e
    3218:	9f 85       	ldd	r25, Y+15	; 0x0f
    321a:	0e 94 ca 30 	call	0x6194	; 0x6194 <_ZN5Print7printlnEPKc>
			delay(3000);
    321e:	68 eb       	ldi	r22, 0xB8	; 184
    3220:	7b e0       	ldi	r23, 0x0B	; 11
    3222:	80 e0       	ldi	r24, 0x00	; 0
    3224:	90 e0       	ldi	r25, 0x00	; 0
    3226:	0e 94 74 35 	call	0x6ae8	; 0x6ae8 <delay>
			UI->display();
    322a:	ce 01       	movw	r24, r28
    322c:	96 d7       	rcall	.+3884   	; 0x415a <_ZN4EZUI7displayEv>
			break;
	}
}
    322e:	df 91       	pop	r29
    3230:	cf 91       	pop	r28
    3232:	08 95       	ret

00003234 <_ZN10LinkedListI13EZUI_PageItemE4sizeEv>:
		}
	}
	Serial.println(Name + " - Encoder Item: ");
	Serial.println(currentItem);
	refresh = 1;
}
    3234:	fc 01       	movw	r30, r24
    3236:	82 81       	ldd	r24, Z+2	; 0x02
    3238:	93 81       	ldd	r25, Z+3	; 0x03
    323a:	08 95       	ret

0000323c <_ZN10LinkedListI13EZUI_PageItemE5clearEv>:
    323c:	0f 93       	push	r16
    323e:	1f 93       	push	r17
    3240:	cf 93       	push	r28
    3242:	df 93       	push	r29
    3244:	00 d0       	rcall	.+0      	; 0x3246 <_ZN10LinkedListI13EZUI_PageItemE5clearEv+0xa>
    3246:	00 d0       	rcall	.+0      	; 0x3248 <_ZN10LinkedListI13EZUI_PageItemE5clearEv+0xc>
    3248:	cd b7       	in	r28, 0x3d	; 61
    324a:	de b7       	in	r29, 0x3e	; 62
    324c:	8c 01       	movw	r16, r24
    324e:	0d c0       	rjmp	.+26     	; 0x326a <_ZN10LinkedListI13EZUI_PageItemE5clearEv+0x2e>
    3250:	d8 01       	movw	r26, r16
    3252:	ed 91       	ld	r30, X+
    3254:	fc 91       	ld	r31, X
    3256:	06 84       	ldd	r0, Z+14	; 0x0e
    3258:	f7 85       	ldd	r31, Z+15	; 0x0f
    325a:	e0 2d       	mov	r30, r0
    325c:	b8 01       	movw	r22, r16
    325e:	ce 01       	movw	r24, r28
    3260:	01 96       	adiw	r24, 0x01	; 1
    3262:	19 95       	eicall
    3264:	ce 01       	movw	r24, r28
    3266:	01 96       	adiw	r24, 0x01	; 1
    3268:	18 d5       	rcall	.+2608   	; 0x3c9a <_ZN13EZUI_PageItemD1Ev>
    326a:	d8 01       	movw	r26, r16
    326c:	ed 91       	ld	r30, X+
    326e:	fc 91       	ld	r31, X
    3270:	01 90       	ld	r0, Z+
    3272:	f0 81       	ld	r31, Z
    3274:	e0 2d       	mov	r30, r0
    3276:	c8 01       	movw	r24, r16
    3278:	19 95       	eicall
    327a:	18 16       	cp	r1, r24
    327c:	19 06       	cpc	r1, r25
    327e:	44 f3       	brlt	.-48     	; 0x3250 <_ZN10LinkedListI13EZUI_PageItemE5clearEv+0x14>
    3280:	26 96       	adiw	r28, 0x06	; 6
    3282:	0f b6       	in	r0, 0x3f	; 63
    3284:	f8 94       	cli
    3286:	de bf       	out	0x3e, r29	; 62
    3288:	0f be       	out	0x3f, r0	; 63
    328a:	cd bf       	out	0x3d, r28	; 61
    328c:	df 91       	pop	r29
    328e:	cf 91       	pop	r28
    3290:	1f 91       	pop	r17
    3292:	0f 91       	pop	r16
    3294:	08 95       	ret

00003296 <_ZN10LinkedListI13EZUI_PageItemE5shiftEv>:
    3296:	af 92       	push	r10
    3298:	bf 92       	push	r11
    329a:	cf 92       	push	r12
    329c:	df 92       	push	r13
    329e:	ef 92       	push	r14
    32a0:	ff 92       	push	r15
    32a2:	0f 93       	push	r16
    32a4:	1f 93       	push	r17
    32a6:	cf 93       	push	r28
    32a8:	df 93       	push	r29
    32aa:	00 d0       	rcall	.+0      	; 0x32ac <_ZN10LinkedListI13EZUI_PageItemE5shiftEv+0x16>
    32ac:	00 d0       	rcall	.+0      	; 0x32ae <_ZN10LinkedListI13EZUI_PageItemE5shiftEv+0x18>
    32ae:	cd b7       	in	r28, 0x3d	; 61
    32b0:	de b7       	in	r29, 0x3e	; 62
    32b2:	6c 01       	movw	r12, r24
    32b4:	8b 01       	movw	r16, r22
    32b6:	db 01       	movw	r26, r22
    32b8:	12 96       	adiw	r26, 0x02	; 2
    32ba:	8d 91       	ld	r24, X+
    32bc:	9c 91       	ld	r25, X
    32be:	13 97       	sbiw	r26, 0x03	; 3
    32c0:	18 16       	cp	r1, r24
    32c2:	19 06       	cpc	r1, r25
    32c4:	1c f0       	brlt	.+6      	; 0x32cc <_ZN10LinkedListI13EZUI_PageItemE5shiftEv+0x36>
    32c6:	c6 01       	movw	r24, r12
    32c8:	e1 d4       	rcall	.+2498   	; 0x3c8c <_ZN13EZUI_PageItemC1Ev>
    32ca:	38 c0       	rjmp	.+112    	; 0x333c <_ZN10LinkedListI13EZUI_PageItemE5shiftEv+0xa6>
    32cc:	02 97       	sbiw	r24, 0x02	; 2
    32ce:	74 f1       	brlt	.+92     	; 0x332c <_ZN10LinkedListI13EZUI_PageItemE5shiftEv+0x96>
    32d0:	fb 01       	movw	r30, r22
    32d2:	e4 80       	ldd	r14, Z+4	; 0x04
    32d4:	f5 80       	ldd	r15, Z+5	; 0x05
    32d6:	d7 01       	movw	r26, r14
    32d8:	16 96       	adiw	r26, 0x06	; 6
    32da:	ad 90       	ld	r10, X+
    32dc:	bc 90       	ld	r11, X
    32de:	17 97       	sbiw	r26, 0x07	; 7
    32e0:	86 e0       	ldi	r24, 0x06	; 6
    32e2:	f7 01       	movw	r30, r14
    32e4:	de 01       	movw	r26, r28
    32e6:	11 96       	adiw	r26, 0x01	; 1
    32e8:	01 90       	ld	r0, Z+
    32ea:	0d 92       	st	X+, r0
    32ec:	8a 95       	dec	r24
    32ee:	e1 f7       	brne	.-8      	; 0x32e8 <_ZN10LinkedListI13EZUI_PageItemE5shiftEv+0x52>
    32f0:	e1 14       	cp	r14, r1
    32f2:	f1 04       	cpc	r15, r1
    32f4:	29 f0       	breq	.+10     	; 0x3300 <_ZN10LinkedListI13EZUI_PageItemE5shiftEv+0x6a>
    32f6:	c7 01       	movw	r24, r14
    32f8:	d0 d4       	rcall	.+2464   	; 0x3c9a <_ZN13EZUI_PageItemD1Ev>
    32fa:	c7 01       	movw	r24, r14
    32fc:	0e 94 51 30 	call	0x60a2	; 0x60a2 <_ZdlPv>
    3300:	f8 01       	movw	r30, r16
    3302:	b5 82       	std	Z+5, r11	; 0x05
    3304:	a4 82       	std	Z+4, r10	; 0x04
    3306:	22 81       	ldd	r18, Z+2	; 0x02
    3308:	33 81       	ldd	r19, Z+3	; 0x03
    330a:	21 50       	subi	r18, 0x01	; 1
    330c:	31 09       	sbc	r19, r1
    330e:	33 83       	std	Z+3, r19	; 0x03
    3310:	22 83       	std	Z+2, r18	; 0x02
    3312:	14 86       	std	Z+12, r1	; 0x0c
    3314:	86 e0       	ldi	r24, 0x06	; 6
    3316:	fe 01       	movw	r30, r28
    3318:	31 96       	adiw	r30, 0x01	; 1
    331a:	d6 01       	movw	r26, r12
    331c:	01 90       	ld	r0, Z+
    331e:	0d 92       	st	X+, r0
    3320:	8a 95       	dec	r24
    3322:	e1 f7       	brne	.-8      	; 0x331c <_ZN10LinkedListI13EZUI_PageItemE5shiftEv+0x86>
    3324:	ce 01       	movw	r24, r28
    3326:	01 96       	adiw	r24, 0x01	; 1
    3328:	b8 d4       	rcall	.+2416   	; 0x3c9a <_ZN13EZUI_PageItemD1Ev>
    332a:	08 c0       	rjmp	.+16     	; 0x333c <_ZN10LinkedListI13EZUI_PageItemE5shiftEv+0xa6>
    332c:	db 01       	movw	r26, r22
    332e:	ed 91       	ld	r30, X+
    3330:	fc 91       	ld	r31, X
    3332:	04 84       	ldd	r0, Z+12	; 0x0c
    3334:	f5 85       	ldd	r31, Z+13	; 0x0d
    3336:	e0 2d       	mov	r30, r0
    3338:	c6 01       	movw	r24, r12
    333a:	19 95       	eicall
    333c:	c6 01       	movw	r24, r12
    333e:	26 96       	adiw	r28, 0x06	; 6
    3340:	0f b6       	in	r0, 0x3f	; 63
    3342:	f8 94       	cli
    3344:	de bf       	out	0x3e, r29	; 62
    3346:	0f be       	out	0x3f, r0	; 63
    3348:	cd bf       	out	0x3d, r28	; 61
    334a:	df 91       	pop	r29
    334c:	cf 91       	pop	r28
    334e:	1f 91       	pop	r17
    3350:	0f 91       	pop	r16
    3352:	ff 90       	pop	r15
    3354:	ef 90       	pop	r14
    3356:	df 90       	pop	r13
    3358:	cf 90       	pop	r12
    335a:	bf 90       	pop	r11
    335c:	af 90       	pop	r10
    335e:	08 95       	ret

00003360 <_ZN10LinkedListI13EZUI_PageItemE7unshiftES0_>:
    3360:	cf 92       	push	r12
    3362:	df 92       	push	r13
    3364:	ef 92       	push	r14
    3366:	ff 92       	push	r15
    3368:	0f 93       	push	r16
    336a:	1f 93       	push	r17
    336c:	cf 93       	push	r28
    336e:	df 93       	push	r29
    3370:	00 d0       	rcall	.+0      	; 0x3372 <_ZN10LinkedListI13EZUI_PageItemE7unshiftES0_+0x12>
    3372:	00 d0       	rcall	.+0      	; 0x3374 <_ZN10LinkedListI13EZUI_PageItemE7unshiftES0_+0x14>
    3374:	cd b7       	in	r28, 0x3d	; 61
    3376:	de b7       	in	r29, 0x3e	; 62
    3378:	8c 01       	movw	r16, r24
    337a:	6b 01       	movw	r12, r22
    337c:	dc 01       	movw	r26, r24
    337e:	12 96       	adiw	r26, 0x02	; 2
    3380:	8d 91       	ld	r24, X+
    3382:	9c 91       	ld	r25, X
    3384:	13 97       	sbiw	r26, 0x03	; 3
    3386:	89 2b       	or	r24, r25
    3388:	b9 f4       	brne	.+46     	; 0x33b8 <_ZN10LinkedListI13EZUI_PageItemE7unshiftES0_+0x58>
    338a:	ed 91       	ld	r30, X+
    338c:	fc 91       	ld	r31, X
    338e:	24 81       	ldd	r18, Z+4	; 0x04
    3390:	35 81       	ldd	r19, Z+5	; 0x05
    3392:	96 e0       	ldi	r25, 0x06	; 6
    3394:	fb 01       	movw	r30, r22
    3396:	de 01       	movw	r26, r28
    3398:	11 96       	adiw	r26, 0x01	; 1
    339a:	01 90       	ld	r0, Z+
    339c:	0d 92       	st	X+, r0
    339e:	9a 95       	dec	r25
    33a0:	e1 f7       	brne	.-8      	; 0x339a <_ZN10LinkedListI13EZUI_PageItemE7unshiftES0_+0x3a>
    33a2:	be 01       	movw	r22, r28
    33a4:	6f 5f       	subi	r22, 0xFF	; 255
    33a6:	7f 4f       	sbci	r23, 0xFF	; 255
    33a8:	c8 01       	movw	r24, r16
    33aa:	f9 01       	movw	r30, r18
    33ac:	19 95       	eicall
    33ae:	18 2f       	mov	r17, r24
    33b0:	ce 01       	movw	r24, r28
    33b2:	01 96       	adiw	r24, 0x01	; 1
    33b4:	72 d4       	rcall	.+2276   	; 0x3c9a <_ZN13EZUI_PageItemD1Ev>
    33b6:	24 c0       	rjmp	.+72     	; 0x3400 <_ZN10LinkedListI13EZUI_PageItemE7unshiftES0_+0xa0>
    33b8:	88 e0       	ldi	r24, 0x08	; 8
    33ba:	90 e0       	ldi	r25, 0x00	; 0
    33bc:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    33c0:	7c 01       	movw	r14, r24
    33c2:	88 e0       	ldi	r24, 0x08	; 8
    33c4:	d7 01       	movw	r26, r14
    33c6:	1d 92       	st	X+, r1
    33c8:	8a 95       	dec	r24
    33ca:	e9 f7       	brne	.-6      	; 0x33c6 <_ZN10LinkedListI13EZUI_PageItemE7unshiftES0_+0x66>
    33cc:	c7 01       	movw	r24, r14
    33ce:	5e d4       	rcall	.+2236   	; 0x3c8c <_ZN13EZUI_PageItemC1Ev>
    33d0:	f8 01       	movw	r30, r16
    33d2:	84 81       	ldd	r24, Z+4	; 0x04
    33d4:	95 81       	ldd	r25, Z+5	; 0x05
    33d6:	d7 01       	movw	r26, r14
    33d8:	17 96       	adiw	r26, 0x07	; 7
    33da:	9c 93       	st	X, r25
    33dc:	8e 93       	st	-X, r24
    33de:	16 97       	sbiw	r26, 0x06	; 6
    33e0:	86 e0       	ldi	r24, 0x06	; 6
    33e2:	f6 01       	movw	r30, r12
    33e4:	01 90       	ld	r0, Z+
    33e6:	0d 92       	st	X+, r0
    33e8:	8a 95       	dec	r24
    33ea:	e1 f7       	brne	.-8      	; 0x33e4 <_ZN10LinkedListI13EZUI_PageItemE7unshiftES0_+0x84>
    33ec:	f8 01       	movw	r30, r16
    33ee:	f5 82       	std	Z+5, r15	; 0x05
    33f0:	e4 82       	std	Z+4, r14	; 0x04
    33f2:	82 81       	ldd	r24, Z+2	; 0x02
    33f4:	93 81       	ldd	r25, Z+3	; 0x03
    33f6:	01 96       	adiw	r24, 0x01	; 1
    33f8:	93 83       	std	Z+3, r25	; 0x03
    33fa:	82 83       	std	Z+2, r24	; 0x02
    33fc:	14 86       	std	Z+12, r1	; 0x0c
    33fe:	11 e0       	ldi	r17, 0x01	; 1
    3400:	81 2f       	mov	r24, r17
    3402:	26 96       	adiw	r28, 0x06	; 6
    3404:	0f b6       	in	r0, 0x3f	; 63
    3406:	f8 94       	cli
    3408:	de bf       	out	0x3e, r29	; 62
    340a:	0f be       	out	0x3f, r0	; 63
    340c:	cd bf       	out	0x3d, r28	; 61
    340e:	df 91       	pop	r29
    3410:	cf 91       	pop	r28
    3412:	1f 91       	pop	r17
    3414:	0f 91       	pop	r16
    3416:	ff 90       	pop	r15
    3418:	ef 90       	pop	r14
    341a:	df 90       	pop	r13
    341c:	cf 90       	pop	r12
    341e:	08 95       	ret

00003420 <_ZN10LinkedListI13EZUI_PageItemE3addES0_>:
    3420:	ef 92       	push	r14
    3422:	ff 92       	push	r15
    3424:	0f 93       	push	r16
    3426:	1f 93       	push	r17
    3428:	cf 93       	push	r28
    342a:	df 93       	push	r29
    342c:	ec 01       	movw	r28, r24
    342e:	7b 01       	movw	r14, r22
    3430:	88 e0       	ldi	r24, 0x08	; 8
    3432:	90 e0       	ldi	r25, 0x00	; 0
    3434:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    3438:	8c 01       	movw	r16, r24
    343a:	88 e0       	ldi	r24, 0x08	; 8
    343c:	f8 01       	movw	r30, r16
    343e:	11 92       	st	Z+, r1
    3440:	8a 95       	dec	r24
    3442:	e9 f7       	brne	.-6      	; 0x343e <_ZN10LinkedListI13EZUI_PageItemE3addES0_+0x1e>
    3444:	c8 01       	movw	r24, r16
    3446:	22 d4       	rcall	.+2116   	; 0x3c8c <_ZN13EZUI_PageItemC1Ev>
    3448:	86 e0       	ldi	r24, 0x06	; 6
    344a:	f7 01       	movw	r30, r14
    344c:	d8 01       	movw	r26, r16
    344e:	01 90       	ld	r0, Z+
    3450:	0d 92       	st	X+, r0
    3452:	8a 95       	dec	r24
    3454:	e1 f7       	brne	.-8      	; 0x344e <_ZN10LinkedListI13EZUI_PageItemE3addES0_+0x2e>
    3456:	f8 01       	movw	r30, r16
    3458:	17 82       	std	Z+7, r1	; 0x07
    345a:	16 82       	std	Z+6, r1	; 0x06
    345c:	8c 81       	ldd	r24, Y+4	; 0x04
    345e:	9d 81       	ldd	r25, Y+5	; 0x05
    3460:	89 2b       	or	r24, r25
    3462:	39 f0       	breq	.+14     	; 0x3472 <_ZN10LinkedListI13EZUI_PageItemE3addES0_+0x52>
    3464:	ee 81       	ldd	r30, Y+6	; 0x06
    3466:	ff 81       	ldd	r31, Y+7	; 0x07
    3468:	17 83       	std	Z+7, r17	; 0x07
    346a:	06 83       	std	Z+6, r16	; 0x06
    346c:	1f 83       	std	Y+7, r17	; 0x07
    346e:	0e 83       	std	Y+6, r16	; 0x06
    3470:	04 c0       	rjmp	.+8      	; 0x347a <_ZN10LinkedListI13EZUI_PageItemE3addES0_+0x5a>
    3472:	1d 83       	std	Y+5, r17	; 0x05
    3474:	0c 83       	std	Y+4, r16	; 0x04
    3476:	1f 83       	std	Y+7, r17	; 0x07
    3478:	0e 83       	std	Y+6, r16	; 0x06
    347a:	8a 81       	ldd	r24, Y+2	; 0x02
    347c:	9b 81       	ldd	r25, Y+3	; 0x03
    347e:	01 96       	adiw	r24, 0x01	; 1
    3480:	9b 83       	std	Y+3, r25	; 0x03
    3482:	8a 83       	std	Y+2, r24	; 0x02
    3484:	1c 86       	std	Y+12, r1	; 0x0c
    3486:	81 e0       	ldi	r24, 0x01	; 1
    3488:	df 91       	pop	r29
    348a:	cf 91       	pop	r28
    348c:	1f 91       	pop	r17
    348e:	0f 91       	pop	r16
    3490:	ff 90       	pop	r15
    3492:	ef 90       	pop	r14
    3494:	08 95       	ret

00003496 <_ZN9EZUI_PageC1E6String>:
    3496:	ef 92       	push	r14
    3498:	ff 92       	push	r15
    349a:	0f 93       	push	r16
    349c:	1f 93       	push	r17
    349e:	cf 93       	push	r28
    34a0:	df 93       	push	r29
    34a2:	ec 01       	movw	r28, r24
    34a4:	7b 01       	movw	r14, r22
    34a6:	88 ee       	ldi	r24, 0xE8	; 232
    34a8:	93 e0       	ldi	r25, 0x03	; 3
    34aa:	fe 01       	movw	r30, r28
    34ac:	81 93       	st	Z+, r24
    34ae:	91 93       	st	Z+, r25
    34b0:	8f 01       	movw	r16, r30
    34b2:	61 e6       	ldi	r22, 0x61	; 97
    34b4:	76 e0       	ldi	r23, 0x06	; 6
    34b6:	cf 01       	movw	r24, r30
    34b8:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    34bc:	89 e0       	ldi	r24, 0x09	; 9
    34be:	95 e0       	ldi	r25, 0x05	; 5
    34c0:	99 87       	std	Y+9, r25	; 0x09
    34c2:	88 87       	std	Y+8, r24	; 0x08
    34c4:	1d 86       	std	Y+13, r1	; 0x0d
    34c6:	1c 86       	std	Y+12, r1	; 0x0c
    34c8:	1f 86       	std	Y+15, r1	; 0x0f
    34ca:	1e 86       	std	Y+14, r1	; 0x0e
    34cc:	1b 86       	std	Y+11, r1	; 0x0b
    34ce:	1a 86       	std	Y+10, r1	; 0x0a
    34d0:	19 8a       	std	Y+17, r1	; 0x11
    34d2:	18 8a       	std	Y+16, r1	; 0x10
    34d4:	1b 8a       	std	Y+19, r1	; 0x13
    34d6:	1a 8a       	std	Y+18, r1	; 0x12
    34d8:	1c 8a       	std	Y+20, r1	; 0x14
    34da:	85 e4       	ldi	r24, 0x45	; 69
    34dc:	92 e0       	ldi	r25, 0x02	; 2
    34de:	9e 8b       	std	Y+22, r25	; 0x16
    34e0:	8d 8b       	std	Y+21, r24	; 0x15
    34e2:	1a 8e       	std	Y+26, r1	; 0x1a
    34e4:	19 8e       	std	Y+25, r1	; 0x19
    34e6:	1c 8e       	std	Y+28, r1	; 0x1c
    34e8:	1b 8e       	std	Y+27, r1	; 0x1b
    34ea:	18 8e       	std	Y+24, r1	; 0x18
    34ec:	1f 8a       	std	Y+23, r1	; 0x17
    34ee:	1e 8e       	std	Y+30, r1	; 0x1e
    34f0:	1d 8e       	std	Y+29, r1	; 0x1d
    34f2:	18 a2       	std	Y+32, r1	; 0x20
    34f4:	1f 8e       	std	Y+31, r1	; 0x1f
    34f6:	19 a2       	std	Y+33, r1	; 0x21
    34f8:	1b a2       	std	Y+35, r1	; 0x23
    34fa:	1a a2       	std	Y+34, r1	; 0x22
    34fc:	1d a2       	std	Y+37, r1	; 0x25
    34fe:	1c a2       	std	Y+36, r1	; 0x24
    3500:	1e a2       	std	Y+38, r1	; 0x26
    3502:	1f a2       	std	Y+39, r1	; 0x27
    3504:	18 a6       	std	Y+40, r1	; 0x28
    3506:	19 a6       	std	Y+41, r1	; 0x29
    3508:	8f ef       	ldi	r24, 0xFF	; 255
    350a:	9f ef       	ldi	r25, 0xFF	; 255
    350c:	9b a7       	std	Y+43, r25	; 0x2b
    350e:	8a a7       	std	Y+42, r24	; 0x2a
    3510:	81 e0       	ldi	r24, 0x01	; 1
    3512:	90 e0       	ldi	r25, 0x00	; 0
    3514:	9d a7       	std	Y+45, r25	; 0x2d
    3516:	8c a7       	std	Y+44, r24	; 0x2c
    3518:	b7 01       	movw	r22, r14
    351a:	c8 01       	movw	r24, r16
    351c:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <_ZN6StringaSERKS_>
    3520:	df 91       	pop	r29
    3522:	cf 91       	pop	r28
    3524:	1f 91       	pop	r17
    3526:	0f 91       	pop	r16
    3528:	ff 90       	pop	r15
    352a:	ef 90       	pop	r14
    352c:	08 95       	ret

0000352e <_ZN9EZUI_Page7addItemEhhP17EZUI_Control_Link>:
    352e:	0f 93       	push	r16
    3530:	1f 93       	push	r17
    3532:	cf 93       	push	r28
    3534:	df 93       	push	r29
    3536:	cd b7       	in	r28, 0x3d	; 61
    3538:	de b7       	in	r29, 0x3e	; 62
    353a:	2c 97       	sbiw	r28, 0x0c	; 12
    353c:	0f b6       	in	r0, 0x3f	; 63
    353e:	f8 94       	cli
    3540:	de bf       	out	0x3e, r29	; 62
    3542:	0f be       	out	0x3f, r0	; 63
    3544:	cd bf       	out	0x3d, r28	; 61
    3546:	8c 01       	movw	r16, r24
    3548:	ce 01       	movw	r24, r28
    354a:	07 96       	adiw	r24, 0x07	; 7
    354c:	cd d3       	rcall	.+1946   	; 0x3ce8 <_ZN13EZUI_PageItemC1EhhP17EZUI_Control_Link>
    354e:	86 e0       	ldi	r24, 0x06	; 6
    3550:	fe 01       	movw	r30, r28
    3552:	37 96       	adiw	r30, 0x07	; 7
    3554:	de 01       	movw	r26, r28
    3556:	11 96       	adiw	r26, 0x01	; 1
    3558:	01 90       	ld	r0, Z+
    355a:	0d 92       	st	X+, r0
    355c:	8a 95       	dec	r24
    355e:	e1 f7       	brne	.-8      	; 0x3558 <_ZN9EZUI_Page7addItemEhhP17EZUI_Control_Link+0x2a>
    3560:	be 01       	movw	r22, r28
    3562:	6f 5f       	subi	r22, 0xFF	; 255
    3564:	7f 4f       	sbci	r23, 0xFF	; 255
    3566:	c8 01       	movw	r24, r16
    3568:	08 96       	adiw	r24, 0x08	; 8
    356a:	5a df       	rcall	.-332    	; 0x3420 <_ZN10LinkedListI13EZUI_PageItemE3addES0_>
    356c:	ce 01       	movw	r24, r28
    356e:	01 96       	adiw	r24, 0x01	; 1
    3570:	94 d3       	rcall	.+1832   	; 0x3c9a <_ZN13EZUI_PageItemD1Ev>
    3572:	61 e0       	ldi	r22, 0x01	; 1
    3574:	70 e0       	ldi	r23, 0x00	; 0
    3576:	c8 01       	movw	r24, r16
    3578:	45 96       	adiw	r24, 0x15	; 21
    357a:	0e 94 99 03 	call	0x732	; 0x732 <_ZN10LinkedListIiE3addEi>
    357e:	f8 01       	movw	r30, r16
    3580:	82 a5       	ldd	r24, Z+42	; 0x2a
    3582:	93 a5       	ldd	r25, Z+43	; 0x2b
    3584:	01 96       	adiw	r24, 0x01	; 1
    3586:	31 f4       	brne	.+12     	; 0x3594 <_ZN9EZUI_Page7addItemEhhP17EZUI_Control_Link+0x66>
    3588:	f8 01       	movw	r30, r16
    358a:	87 89       	ldd	r24, Z+23	; 0x17
    358c:	90 8d       	ldd	r25, Z+24	; 0x18
    358e:	01 97       	sbiw	r24, 0x01	; 1
    3590:	93 a7       	std	Z+43, r25	; 0x2b
    3592:	82 a7       	std	Z+42, r24	; 0x2a
    3594:	ce 01       	movw	r24, r28
    3596:	07 96       	adiw	r24, 0x07	; 7
    3598:	80 d3       	rcall	.+1792   	; 0x3c9a <_ZN13EZUI_PageItemD1Ev>
    359a:	2c 96       	adiw	r28, 0x0c	; 12
    359c:	0f b6       	in	r0, 0x3f	; 63
    359e:	f8 94       	cli
    35a0:	de bf       	out	0x3e, r29	; 62
    35a2:	0f be       	out	0x3f, r0	; 63
    35a4:	cd bf       	out	0x3d, r28	; 61
    35a6:	df 91       	pop	r29
    35a8:	cf 91       	pop	r28
    35aa:	1f 91       	pop	r17
    35ac:	0f 91       	pop	r16
    35ae:	08 95       	ret

000035b0 <_ZN9EZUI_Page7addItemEhhP18EZUI_Control_Label>:
    35b0:	0f 93       	push	r16
    35b2:	1f 93       	push	r17
    35b4:	cf 93       	push	r28
    35b6:	df 93       	push	r29
    35b8:	cd b7       	in	r28, 0x3d	; 61
    35ba:	de b7       	in	r29, 0x3e	; 62
    35bc:	2c 97       	sbiw	r28, 0x0c	; 12
    35be:	0f b6       	in	r0, 0x3f	; 63
    35c0:	f8 94       	cli
    35c2:	de bf       	out	0x3e, r29	; 62
    35c4:	0f be       	out	0x3f, r0	; 63
    35c6:	cd bf       	out	0x3d, r28	; 61
    35c8:	8c 01       	movw	r16, r24
    35ca:	81 e0       	ldi	r24, 0x01	; 1
    35cc:	23 2b       	or	r18, r19
    35ce:	09 f4       	brne	.+2      	; 0x35d2 <_ZN9EZUI_Page7addItemEhhP18EZUI_Control_Label+0x22>
    35d0:	80 e0       	ldi	r24, 0x00	; 0
    35d2:	28 2f       	mov	r18, r24
    35d4:	ce 01       	movw	r24, r28
    35d6:	07 96       	adiw	r24, 0x07	; 7
    35d8:	61 d3       	rcall	.+1730   	; 0x3c9c <_ZN13EZUI_PageItemC1Ehhb>
    35da:	86 e0       	ldi	r24, 0x06	; 6
    35dc:	fe 01       	movw	r30, r28
    35de:	37 96       	adiw	r30, 0x07	; 7
    35e0:	de 01       	movw	r26, r28
    35e2:	11 96       	adiw	r26, 0x01	; 1
    35e4:	01 90       	ld	r0, Z+
    35e6:	0d 92       	st	X+, r0
    35e8:	8a 95       	dec	r24
    35ea:	e1 f7       	brne	.-8      	; 0x35e4 <_ZN9EZUI_Page7addItemEhhP18EZUI_Control_Label+0x34>
    35ec:	be 01       	movw	r22, r28
    35ee:	6f 5f       	subi	r22, 0xFF	; 255
    35f0:	7f 4f       	sbci	r23, 0xFF	; 255
    35f2:	c8 01       	movw	r24, r16
    35f4:	08 96       	adiw	r24, 0x08	; 8
    35f6:	14 df       	rcall	.-472    	; 0x3420 <_ZN10LinkedListI13EZUI_PageItemE3addES0_>
    35f8:	ce 01       	movw	r24, r28
    35fa:	01 96       	adiw	r24, 0x01	; 1
    35fc:	4e d3       	rcall	.+1692   	; 0x3c9a <_ZN13EZUI_PageItemD1Ev>
    35fe:	60 e0       	ldi	r22, 0x00	; 0
    3600:	70 e0       	ldi	r23, 0x00	; 0
    3602:	c8 01       	movw	r24, r16
    3604:	45 96       	adiw	r24, 0x15	; 21
    3606:	0e 94 99 03 	call	0x732	; 0x732 <_ZN10LinkedListIiE3addEi>
    360a:	ce 01       	movw	r24, r28
    360c:	07 96       	adiw	r24, 0x07	; 7
    360e:	45 d3       	rcall	.+1674   	; 0x3c9a <_ZN13EZUI_PageItemD1Ev>
    3610:	2c 96       	adiw	r28, 0x0c	; 12
    3612:	0f b6       	in	r0, 0x3f	; 63
    3614:	f8 94       	cli
    3616:	de bf       	out	0x3e, r29	; 62
    3618:	0f be       	out	0x3f, r0	; 63
    361a:	cd bf       	out	0x3d, r28	; 61
    361c:	df 91       	pop	r29
    361e:	cf 91       	pop	r28
    3620:	1f 91       	pop	r17
    3622:	0f 91       	pop	r16
    3624:	08 95       	ret

00003626 <_ZN10LinkedListI13EZUI_PageItemE7getNodeEi>:
    3626:	dc 01       	movw	r26, r24
    3628:	14 96       	adiw	r26, 0x04	; 4
    362a:	ed 91       	ld	r30, X+
    362c:	fc 91       	ld	r31, X
    362e:	15 97       	sbiw	r26, 0x05	; 5
    3630:	1c 96       	adiw	r26, 0x0c	; 12
    3632:	8c 91       	ld	r24, X
    3634:	1c 97       	sbiw	r26, 0x0c	; 12
    3636:	88 23       	and	r24, r24
    3638:	61 f0       	breq	.+24     	; 0x3652 <_ZN10LinkedListI13EZUI_PageItemE7getNodeEi+0x2c>
    363a:	1a 96       	adiw	r26, 0x0a	; 10
    363c:	2d 91       	ld	r18, X+
    363e:	3c 91       	ld	r19, X
    3640:	1b 97       	sbiw	r26, 0x0b	; 11
    3642:	62 17       	cp	r22, r18
    3644:	73 07       	cpc	r23, r19
    3646:	44 f0       	brlt	.+16     	; 0x3658 <_ZN10LinkedListI13EZUI_PageItemE7getNodeEi+0x32>
    3648:	18 96       	adiw	r26, 0x08	; 8
    364a:	ed 91       	ld	r30, X+
    364c:	fc 91       	ld	r31, X
    364e:	19 97       	sbiw	r26, 0x09	; 9
    3650:	05 c0       	rjmp	.+10     	; 0x365c <_ZN10LinkedListI13EZUI_PageItemE7getNodeEi+0x36>
    3652:	20 e0       	ldi	r18, 0x00	; 0
    3654:	30 e0       	ldi	r19, 0x00	; 0
    3656:	02 c0       	rjmp	.+4      	; 0x365c <_ZN10LinkedListI13EZUI_PageItemE7getNodeEi+0x36>
    3658:	20 e0       	ldi	r18, 0x00	; 0
    365a:	30 e0       	ldi	r19, 0x00	; 0
    365c:	26 17       	cp	r18, r22
    365e:	37 07       	cpc	r19, r23
    3660:	64 f4       	brge	.+24     	; 0x367a <_ZN10LinkedListI13EZUI_PageItemE7getNodeEi+0x54>
    3662:	30 97       	sbiw	r30, 0x00	; 0
    3664:	51 f0       	breq	.+20     	; 0x367a <_ZN10LinkedListI13EZUI_PageItemE7getNodeEi+0x54>
    3666:	06 80       	ldd	r0, Z+6	; 0x06
    3668:	f7 81       	ldd	r31, Z+7	; 0x07
    366a:	e0 2d       	mov	r30, r0
    366c:	2f 5f       	subi	r18, 0xFF	; 255
    366e:	3f 4f       	sbci	r19, 0xFF	; 255
    3670:	26 17       	cp	r18, r22
    3672:	37 07       	cpc	r19, r23
    3674:	14 f4       	brge	.+4      	; 0x367a <_ZN10LinkedListI13EZUI_PageItemE7getNodeEi+0x54>
    3676:	30 97       	sbiw	r30, 0x00	; 0
    3678:	b1 f7       	brne	.-20     	; 0x3666 <_ZN10LinkedListI13EZUI_PageItemE7getNodeEi+0x40>
    367a:	26 17       	cp	r18, r22
    367c:	37 07       	cpc	r19, r23
    367e:	79 f4       	brne	.+30     	; 0x369e <_ZN10LinkedListI13EZUI_PageItemE7getNodeEi+0x78>
    3680:	81 e0       	ldi	r24, 0x01	; 1
    3682:	1c 96       	adiw	r26, 0x0c	; 12
    3684:	8c 93       	st	X, r24
    3686:	1c 97       	sbiw	r26, 0x0c	; 12
    3688:	1b 96       	adiw	r26, 0x0b	; 11
    368a:	3c 93       	st	X, r19
    368c:	2e 93       	st	-X, r18
    368e:	1a 97       	sbiw	r26, 0x0a	; 10
    3690:	19 96       	adiw	r26, 0x09	; 9
    3692:	fc 93       	st	X, r31
    3694:	ee 93       	st	-X, r30
    3696:	18 97       	sbiw	r26, 0x08	; 8
    3698:	8e 2f       	mov	r24, r30
    369a:	9f 2f       	mov	r25, r31
    369c:	08 95       	ret
    369e:	80 e0       	ldi	r24, 0x00	; 0
    36a0:	90 e0       	ldi	r25, 0x00	; 0
    36a2:	08 95       	ret

000036a4 <_ZN10LinkedListI13EZUI_PageItemE3getEi>:
    36a4:	cf 93       	push	r28
    36a6:	df 93       	push	r29
    36a8:	ec 01       	movw	r28, r24
    36aa:	cb 01       	movw	r24, r22
    36ac:	ba 01       	movw	r22, r20
    36ae:	bb df       	rcall	.-138    	; 0x3626 <_ZN10LinkedListI13EZUI_PageItemE7getNodeEi>
    36b0:	00 97       	sbiw	r24, 0x00	; 0
    36b2:	41 f0       	breq	.+16     	; 0x36c4 <_ZN10LinkedListI13EZUI_PageItemE3getEi+0x20>
    36b4:	26 e0       	ldi	r18, 0x06	; 6
    36b6:	fc 01       	movw	r30, r24
    36b8:	de 01       	movw	r26, r28
    36ba:	01 90       	ld	r0, Z+
    36bc:	0d 92       	st	X+, r0
    36be:	2a 95       	dec	r18
    36c0:	e1 f7       	brne	.-8      	; 0x36ba <_ZN10LinkedListI13EZUI_PageItemE3getEi+0x16>
    36c2:	02 c0       	rjmp	.+4      	; 0x36c8 <_ZN10LinkedListI13EZUI_PageItemE3getEi+0x24>
    36c4:	ce 01       	movw	r24, r28
    36c6:	e2 d2       	rcall	.+1476   	; 0x3c8c <_ZN13EZUI_PageItemC1Ev>
    36c8:	ce 01       	movw	r24, r28
    36ca:	df 91       	pop	r29
    36cc:	cf 91       	pop	r28
    36ce:	08 95       	ret

000036d0 <_ZN9EZUI_Page7displayEP4EZUI>:
    36d0:	5f 92       	push	r5
    36d2:	6f 92       	push	r6
    36d4:	7f 92       	push	r7
    36d6:	8f 92       	push	r8
    36d8:	9f 92       	push	r9
    36da:	af 92       	push	r10
    36dc:	bf 92       	push	r11
    36de:	cf 92       	push	r12
    36e0:	df 92       	push	r13
    36e2:	ef 92       	push	r14
    36e4:	ff 92       	push	r15
    36e6:	0f 93       	push	r16
    36e8:	1f 93       	push	r17
    36ea:	cf 93       	push	r28
    36ec:	df 93       	push	r29
    36ee:	cd b7       	in	r28, 0x3d	; 61
    36f0:	de b7       	in	r29, 0x3e	; 62
    36f2:	62 97       	sbiw	r28, 0x12	; 18
    36f4:	0f b6       	in	r0, 0x3f	; 63
    36f6:	f8 94       	cli
    36f8:	de bf       	out	0x3e, r29	; 62
    36fa:	0f be       	out	0x3f, r0	; 63
    36fc:	cd bf       	out	0x3d, r28	; 61
    36fe:	7c 01       	movw	r14, r24
    3700:	8b 01       	movw	r16, r22
    3702:	0e 94 42 35 	call	0x6a84	; 0x6a84 <millis>
    3706:	f7 01       	movw	r30, r14
    3708:	86 a0       	ldd	r8, Z+38	; 0x26
    370a:	97 a0       	ldd	r9, Z+39	; 0x27
    370c:	a0 a4       	ldd	r10, Z+40	; 0x28
    370e:	b1 a4       	ldd	r11, Z+41	; 0x29
    3710:	ab 01       	movw	r20, r22
    3712:	bc 01       	movw	r22, r24
    3714:	48 19       	sub	r20, r8
    3716:	59 09       	sbc	r21, r9
    3718:	6a 09       	sbc	r22, r10
    371a:	7b 09       	sbc	r23, r11
    371c:	80 81       	ld	r24, Z
    371e:	91 81       	ldd	r25, Z+1	; 0x01
    3720:	09 2e       	mov	r0, r25
    3722:	00 0c       	add	r0, r0
    3724:	aa 0b       	sbc	r26, r26
    3726:	bb 0b       	sbc	r27, r27
    3728:	84 17       	cp	r24, r20
    372a:	95 07       	cpc	r25, r21
    372c:	a6 07       	cpc	r26, r22
    372e:	b7 07       	cpc	r27, r23
    3730:	08 f0       	brcs	.+2      	; 0x3734 <_ZN9EZUI_Page7displayEP4EZUI+0x64>
    3732:	62 c0       	rjmp	.+196    	; 0x37f8 <_ZN9EZUI_Page7displayEP4EZUI+0x128>
    3734:	0e 94 42 35 	call	0x6a84	; 0x6a84 <millis>
    3738:	f7 01       	movw	r30, r14
    373a:	66 a3       	std	Z+38, r22	; 0x26
    373c:	77 a3       	std	Z+39, r23	; 0x27
    373e:	80 a7       	std	Z+40, r24	; 0x28
    3740:	91 a7       	std	Z+41, r25	; 0x29
    3742:	f8 01       	movw	r30, r16
    3744:	96 84       	ldd	r9, Z+14	; 0x0e
    3746:	87 84       	ldd	r8, Z+15	; 0x0f
    3748:	79 2c       	mov	r7, r9
    374a:	68 2c       	mov	r6, r8
    374c:	89 2d       	mov	r24, r9
    374e:	98 2d       	mov	r25, r8
    3750:	0e 94 81 26 	call	0x4d02	; 0x4d02 <_ZN3LCD5clearEv>
    3754:	67 01       	movw	r12, r14
    3756:	f8 e0       	ldi	r31, 0x08	; 8
    3758:	cf 0e       	add	r12, r31
    375a:	d1 1c       	adc	r13, r1
    375c:	f7 01       	movw	r30, r14
    375e:	82 85       	ldd	r24, Z+10	; 0x0a
    3760:	93 85       	ldd	r25, Z+11	; 0x0b
    3762:	18 16       	cp	r1, r24
    3764:	19 06       	cpc	r1, r25
    3766:	0c f0       	brlt	.+2      	; 0x376a <_ZN9EZUI_Page7displayEP4EZUI+0x9a>
    3768:	47 c0       	rjmp	.+142    	; 0x37f8 <_ZN9EZUI_Page7displayEP4EZUI+0x128>
    376a:	00 e0       	ldi	r16, 0x00	; 0
    376c:	10 e0       	ldi	r17, 0x00	; 0
    376e:	a8 01       	movw	r20, r16
    3770:	b6 01       	movw	r22, r12
    3772:	ce 01       	movw	r24, r28
    3774:	0d 96       	adiw	r24, 0x0d	; 13
    3776:	96 df       	rcall	.-212    	; 0x36a4 <_ZN10LinkedListI13EZUI_PageItemE3getEi>
    3778:	41 e0       	ldi	r20, 0x01	; 1
    377a:	69 2d       	mov	r22, r9
    377c:	78 2d       	mov	r23, r8
    377e:	ce 01       	movw	r24, r28
    3780:	0d 96       	adiw	r24, 0x0d	; 13
    3782:	bb d2       	rcall	.+1398   	; 0x3cfa <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb>
    3784:	ce 01       	movw	r24, r28
    3786:	0d 96       	adiw	r24, 0x0d	; 13
    3788:	88 d2       	rcall	.+1296   	; 0x3c9a <_ZN13EZUI_PageItemD1Ev>
    378a:	6a ef       	ldi	r22, 0xFA	; 250
    378c:	74 e0       	ldi	r23, 0x04	; 4
    378e:	88 ea       	ldi	r24, 0xA8	; 168
    3790:	9a e0       	ldi	r25, 0x0A	; 10
    3792:	0e 94 90 30 	call	0x6120	; 0x6120 <_ZN5Print5printEPKc>
    3796:	f7 01       	movw	r30, r14
    3798:	27 89       	ldd	r18, Z+23	; 0x17
    379a:	30 8d       	ldd	r19, Z+24	; 0x18
    379c:	12 16       	cp	r1, r18
    379e:	13 06       	cpc	r1, r19
    37a0:	14 f5       	brge	.+68     	; 0x37e6 <_ZN9EZUI_Page7displayEP4EZUI+0x116>
    37a2:	a2 a4       	ldd	r10, Z+42	; 0x2a
    37a4:	b3 a4       	ldd	r11, Z+43	; 0x2b
    37a6:	a0 16       	cp	r10, r16
    37a8:	b1 06       	cpc	r11, r17
    37aa:	e9 f4       	brne	.+58     	; 0x37e6 <_ZN9EZUI_Page7displayEP4EZUI+0x116>
    37ac:	a5 01       	movw	r20, r10
    37ae:	b6 01       	movw	r22, r12
    37b0:	ce 01       	movw	r24, r28
    37b2:	07 96       	adiw	r24, 0x07	; 7
    37b4:	77 df       	rcall	.-274    	; 0x36a4 <_ZN10LinkedListI13EZUI_PageItemE3getEi>
    37b6:	58 84       	ldd	r5, Y+8	; 0x08
    37b8:	a5 01       	movw	r20, r10
    37ba:	b6 01       	movw	r22, r12
    37bc:	ce 01       	movw	r24, r28
    37be:	01 96       	adiw	r24, 0x01	; 1
    37c0:	71 df       	rcall	.-286    	; 0x36a4 <_ZN10LinkedListI13EZUI_PageItemE3getEi>
    37c2:	45 2d       	mov	r20, r5
    37c4:	69 81       	ldd	r22, Y+1	; 0x01
    37c6:	87 2d       	mov	r24, r7
    37c8:	96 2d       	mov	r25, r6
    37ca:	0e 94 88 26 	call	0x4d10	; 0x4d10 <_ZN3LCD9setCursorEhh>
    37ce:	ce 01       	movw	r24, r28
    37d0:	01 96       	adiw	r24, 0x01	; 1
    37d2:	63 d2       	rcall	.+1222   	; 0x3c9a <_ZN13EZUI_PageItemD1Ev>
    37d4:	ce 01       	movw	r24, r28
    37d6:	07 96       	adiw	r24, 0x07	; 7
    37d8:	60 d2       	rcall	.+1216   	; 0x3c9a <_ZN13EZUI_PageItemD1Ev>
    37da:	6d e9       	ldi	r22, 0x9D	; 157
    37dc:	74 e0       	ldi	r23, 0x04	; 4
    37de:	87 2d       	mov	r24, r7
    37e0:	96 2d       	mov	r25, r6
    37e2:	0e 94 90 30 	call	0x6120	; 0x6120 <_ZN5Print5printEPKc>
    37e6:	0f 5f       	subi	r16, 0xFF	; 255
    37e8:	1f 4f       	sbci	r17, 0xFF	; 255
    37ea:	f7 01       	movw	r30, r14
    37ec:	22 85       	ldd	r18, Z+10	; 0x0a
    37ee:	33 85       	ldd	r19, Z+11	; 0x0b
    37f0:	02 17       	cp	r16, r18
    37f2:	13 07       	cpc	r17, r19
    37f4:	0c f4       	brge	.+2      	; 0x37f8 <_ZN9EZUI_Page7displayEP4EZUI+0x128>
    37f6:	bb cf       	rjmp	.-138    	; 0x376e <_ZN9EZUI_Page7displayEP4EZUI+0x9e>
    37f8:	62 96       	adiw	r28, 0x12	; 18
    37fa:	0f b6       	in	r0, 0x3f	; 63
    37fc:	f8 94       	cli
    37fe:	de bf       	out	0x3e, r29	; 62
    3800:	0f be       	out	0x3f, r0	; 63
    3802:	cd bf       	out	0x3d, r28	; 61
    3804:	df 91       	pop	r29
    3806:	cf 91       	pop	r28
    3808:	1f 91       	pop	r17
    380a:	0f 91       	pop	r16
    380c:	ff 90       	pop	r15
    380e:	ef 90       	pop	r14
    3810:	df 90       	pop	r13
    3812:	cf 90       	pop	r12
    3814:	bf 90       	pop	r11
    3816:	af 90       	pop	r10
    3818:	9f 90       	pop	r9
    381a:	8f 90       	pop	r8
    381c:	7f 90       	pop	r7
    381e:	6f 90       	pop	r6
    3820:	5f 90       	pop	r5
    3822:	08 95       	ret

00003824 <_ZN9EZUI_Page10selectItemEP4EZUI>:
    3824:	ef 92       	push	r14
    3826:	ff 92       	push	r15
    3828:	0f 93       	push	r16
    382a:	1f 93       	push	r17
    382c:	cf 93       	push	r28
    382e:	df 93       	push	r29
    3830:	00 d0       	rcall	.+0      	; 0x3832 <_ZN9EZUI_Page10selectItemEP4EZUI+0xe>
    3832:	00 d0       	rcall	.+0      	; 0x3834 <_ZN9EZUI_Page10selectItemEP4EZUI+0x10>
    3834:	cd b7       	in	r28, 0x3d	; 61
    3836:	de b7       	in	r29, 0x3e	; 62
    3838:	8c 01       	movw	r16, r24
    383a:	7b 01       	movw	r14, r22
    383c:	fc 01       	movw	r30, r24
    383e:	42 a5       	ldd	r20, Z+42	; 0x2a
    3840:	53 a5       	ldd	r21, Z+43	; 0x2b
    3842:	bc 01       	movw	r22, r24
    3844:	68 5f       	subi	r22, 0xF8	; 248
    3846:	7f 4f       	sbci	r23, 0xFF	; 255
    3848:	ce 01       	movw	r24, r28
    384a:	01 96       	adiw	r24, 0x01	; 1
    384c:	2b df       	rcall	.-426    	; 0x36a4 <_ZN10LinkedListI13EZUI_PageItemE3getEi>
    384e:	b7 01       	movw	r22, r14
    3850:	ce 01       	movw	r24, r28
    3852:	01 96       	adiw	r24, 0x01	; 1
    3854:	c9 d3       	rcall	.+1938   	; 0x3fe8 <_ZN13EZUI_PageItem10ItemSelectEP4EZUI>
    3856:	ce 01       	movw	r24, r28
    3858:	01 96       	adiw	r24, 0x01	; 1
    385a:	1f d2       	rcall	.+1086   	; 0x3c9a <_ZN13EZUI_PageItemD1Ev>
    385c:	81 e0       	ldi	r24, 0x01	; 1
    385e:	90 e0       	ldi	r25, 0x00	; 0
    3860:	f8 01       	movw	r30, r16
    3862:	95 a7       	std	Z+45, r25	; 0x2d
    3864:	84 a7       	std	Z+44, r24	; 0x2c
    3866:	26 96       	adiw	r28, 0x06	; 6
    3868:	0f b6       	in	r0, 0x3f	; 63
    386a:	f8 94       	cli
    386c:	de bf       	out	0x3e, r29	; 62
    386e:	0f be       	out	0x3f, r0	; 63
    3870:	cd bf       	out	0x3d, r28	; 61
    3872:	df 91       	pop	r29
    3874:	cf 91       	pop	r28
    3876:	1f 91       	pop	r17
    3878:	0f 91       	pop	r16
    387a:	ff 90       	pop	r15
    387c:	ef 90       	pop	r14
    387e:	08 95       	ret

00003880 <_ZN10LinkedListI13EZUI_PageItemE3popEv>:
    3880:	af 92       	push	r10
    3882:	bf 92       	push	r11
    3884:	cf 92       	push	r12
    3886:	df 92       	push	r13
    3888:	ef 92       	push	r14
    388a:	ff 92       	push	r15
    388c:	0f 93       	push	r16
    388e:	1f 93       	push	r17
    3890:	cf 93       	push	r28
    3892:	df 93       	push	r29
    3894:	00 d0       	rcall	.+0      	; 0x3896 <_ZN10LinkedListI13EZUI_PageItemE3popEv+0x16>
    3896:	00 d0       	rcall	.+0      	; 0x3898 <_ZN10LinkedListI13EZUI_PageItemE3popEv+0x18>
    3898:	cd b7       	in	r28, 0x3d	; 61
    389a:	de b7       	in	r29, 0x3e	; 62
    389c:	7c 01       	movw	r14, r24
    389e:	8b 01       	movw	r16, r22
    38a0:	fb 01       	movw	r30, r22
    38a2:	62 81       	ldd	r22, Z+2	; 0x02
    38a4:	73 81       	ldd	r23, Z+3	; 0x03
    38a6:	16 16       	cp	r1, r22
    38a8:	17 06       	cpc	r1, r23
    38aa:	14 f0       	brlt	.+4      	; 0x38b0 <_ZN10LinkedListI13EZUI_PageItemE3popEv+0x30>
    38ac:	ef d1       	rcall	.+990    	; 0x3c8c <_ZN13EZUI_PageItemC1Ev>
    38ae:	59 c0       	rjmp	.+178    	; 0x3962 <_ZN10LinkedListI13EZUI_PageItemE3popEv+0xe2>
    38b0:	f8 01       	movw	r30, r16
    38b2:	14 86       	std	Z+12, r1	; 0x0c
    38b4:	62 30       	cpi	r22, 0x02	; 2
    38b6:	71 05       	cpc	r23, r1
    38b8:	7c f1       	brlt	.+94     	; 0x3918 <_ZN10LinkedListI13EZUI_PageItemE3popEv+0x98>
    38ba:	62 50       	subi	r22, 0x02	; 2
    38bc:	71 09       	sbc	r23, r1
    38be:	c8 01       	movw	r24, r16
    38c0:	b2 de       	rcall	.-668    	; 0x3626 <_ZN10LinkedListI13EZUI_PageItemE7getNodeEi>
    38c2:	5c 01       	movw	r10, r24
    38c4:	fc 01       	movw	r30, r24
    38c6:	c6 80       	ldd	r12, Z+6	; 0x06
    38c8:	d7 80       	ldd	r13, Z+7	; 0x07
    38ca:	86 e0       	ldi	r24, 0x06	; 6
    38cc:	f6 01       	movw	r30, r12
    38ce:	de 01       	movw	r26, r28
    38d0:	11 96       	adiw	r26, 0x01	; 1
    38d2:	01 90       	ld	r0, Z+
    38d4:	0d 92       	st	X+, r0
    38d6:	8a 95       	dec	r24
    38d8:	e1 f7       	brne	.-8      	; 0x38d2 <_ZN10LinkedListI13EZUI_PageItemE3popEv+0x52>
    38da:	c1 14       	cp	r12, r1
    38dc:	d1 04       	cpc	r13, r1
    38de:	29 f0       	breq	.+10     	; 0x38ea <_ZN10LinkedListI13EZUI_PageItemE3popEv+0x6a>
    38e0:	c6 01       	movw	r24, r12
    38e2:	db d1       	rcall	.+950    	; 0x3c9a <_ZN13EZUI_PageItemD1Ev>
    38e4:	c6 01       	movw	r24, r12
    38e6:	0e 94 51 30 	call	0x60a2	; 0x60a2 <_ZdlPv>
    38ea:	f5 01       	movw	r30, r10
    38ec:	17 82       	std	Z+7, r1	; 0x07
    38ee:	16 82       	std	Z+6, r1	; 0x06
    38f0:	f8 01       	movw	r30, r16
    38f2:	b7 82       	std	Z+7, r11	; 0x07
    38f4:	a6 82       	std	Z+6, r10	; 0x06
    38f6:	82 81       	ldd	r24, Z+2	; 0x02
    38f8:	93 81       	ldd	r25, Z+3	; 0x03
    38fa:	01 97       	sbiw	r24, 0x01	; 1
    38fc:	93 83       	std	Z+3, r25	; 0x03
    38fe:	82 83       	std	Z+2, r24	; 0x02
    3900:	86 e0       	ldi	r24, 0x06	; 6
    3902:	fe 01       	movw	r30, r28
    3904:	31 96       	adiw	r30, 0x01	; 1
    3906:	d7 01       	movw	r26, r14
    3908:	01 90       	ld	r0, Z+
    390a:	0d 92       	st	X+, r0
    390c:	8a 95       	dec	r24
    390e:	e1 f7       	brne	.-8      	; 0x3908 <_ZN10LinkedListI13EZUI_PageItemE3popEv+0x88>
    3910:	ce 01       	movw	r24, r28
    3912:	01 96       	adiw	r24, 0x01	; 1
    3914:	c2 d1       	rcall	.+900    	; 0x3c9a <_ZN13EZUI_PageItemD1Ev>
    3916:	25 c0       	rjmp	.+74     	; 0x3962 <_ZN10LinkedListI13EZUI_PageItemE3popEv+0xe2>
    3918:	f8 01       	movw	r30, r16
    391a:	c4 80       	ldd	r12, Z+4	; 0x04
    391c:	d5 80       	ldd	r13, Z+5	; 0x05
    391e:	86 e0       	ldi	r24, 0x06	; 6
    3920:	f6 01       	movw	r30, r12
    3922:	de 01       	movw	r26, r28
    3924:	11 96       	adiw	r26, 0x01	; 1
    3926:	01 90       	ld	r0, Z+
    3928:	0d 92       	st	X+, r0
    392a:	8a 95       	dec	r24
    392c:	e1 f7       	brne	.-8      	; 0x3926 <_ZN10LinkedListI13EZUI_PageItemE3popEv+0xa6>
    392e:	c1 14       	cp	r12, r1
    3930:	d1 04       	cpc	r13, r1
    3932:	29 f0       	breq	.+10     	; 0x393e <_ZN10LinkedListI13EZUI_PageItemE3popEv+0xbe>
    3934:	c6 01       	movw	r24, r12
    3936:	b1 d1       	rcall	.+866    	; 0x3c9a <_ZN13EZUI_PageItemD1Ev>
    3938:	c6 01       	movw	r24, r12
    393a:	0e 94 51 30 	call	0x60a2	; 0x60a2 <_ZdlPv>
    393e:	f8 01       	movw	r30, r16
    3940:	15 82       	std	Z+5, r1	; 0x05
    3942:	14 82       	std	Z+4, r1	; 0x04
    3944:	17 82       	std	Z+7, r1	; 0x07
    3946:	16 82       	std	Z+6, r1	; 0x06
    3948:	13 82       	std	Z+3, r1	; 0x03
    394a:	12 82       	std	Z+2, r1	; 0x02
    394c:	86 e0       	ldi	r24, 0x06	; 6
    394e:	fe 01       	movw	r30, r28
    3950:	31 96       	adiw	r30, 0x01	; 1
    3952:	d7 01       	movw	r26, r14
    3954:	01 90       	ld	r0, Z+
    3956:	0d 92       	st	X+, r0
    3958:	8a 95       	dec	r24
    395a:	e1 f7       	brne	.-8      	; 0x3954 <_ZN10LinkedListI13EZUI_PageItemE3popEv+0xd4>
    395c:	ce 01       	movw	r24, r28
    395e:	01 96       	adiw	r24, 0x01	; 1
    3960:	9c d1       	rcall	.+824    	; 0x3c9a <_ZN13EZUI_PageItemD1Ev>
    3962:	c7 01       	movw	r24, r14
    3964:	26 96       	adiw	r28, 0x06	; 6
    3966:	0f b6       	in	r0, 0x3f	; 63
    3968:	f8 94       	cli
    396a:	de bf       	out	0x3e, r29	; 62
    396c:	0f be       	out	0x3f, r0	; 63
    396e:	cd bf       	out	0x3d, r28	; 61
    3970:	df 91       	pop	r29
    3972:	cf 91       	pop	r28
    3974:	1f 91       	pop	r17
    3976:	0f 91       	pop	r16
    3978:	ff 90       	pop	r15
    397a:	ef 90       	pop	r14
    397c:	df 90       	pop	r13
    397e:	cf 90       	pop	r12
    3980:	bf 90       	pop	r11
    3982:	af 90       	pop	r10
    3984:	08 95       	ret

00003986 <_ZN10LinkedListI13EZUI_PageItemE6removeEi>:
    3986:	cf 92       	push	r12
    3988:	df 92       	push	r13
    398a:	ef 92       	push	r14
    398c:	ff 92       	push	r15
    398e:	0f 93       	push	r16
    3990:	1f 93       	push	r17
    3992:	cf 93       	push	r28
    3994:	df 93       	push	r29
    3996:	00 d0       	rcall	.+0      	; 0x3998 <_ZN10LinkedListI13EZUI_PageItemE6removeEi+0x12>
    3998:	00 d0       	rcall	.+0      	; 0x399a <_ZN10LinkedListI13EZUI_PageItemE6removeEi+0x14>
    399a:	cd b7       	in	r28, 0x3d	; 61
    399c:	de b7       	in	r29, 0x3e	; 62
    399e:	7c 01       	movw	r14, r24
    39a0:	8b 01       	movw	r16, r22
    39a2:	55 23       	and	r21, r21
    39a4:	44 f0       	brlt	.+16     	; 0x39b6 <_ZN10LinkedListI13EZUI_PageItemE6removeEi+0x30>
    39a6:	db 01       	movw	r26, r22
    39a8:	12 96       	adiw	r26, 0x02	; 2
    39aa:	2d 91       	ld	r18, X+
    39ac:	3c 91       	ld	r19, X
    39ae:	13 97       	sbiw	r26, 0x03	; 3
    39b0:	42 17       	cp	r20, r18
    39b2:	53 07       	cpc	r21, r19
    39b4:	1c f0       	brlt	.+6      	; 0x39bc <_ZN10LinkedListI13EZUI_PageItemE6removeEi+0x36>
    39b6:	c7 01       	movw	r24, r14
    39b8:	69 d1       	rcall	.+722    	; 0x3c8c <_ZN13EZUI_PageItemC1Ev>
    39ba:	4f c0       	rjmp	.+158    	; 0x3a5a <_ZN10LinkedListI13EZUI_PageItemE6removeEi+0xd4>
    39bc:	41 15       	cp	r20, r1
    39be:	51 05       	cpc	r21, r1
    39c0:	41 f4       	brne	.+16     	; 0x39d2 <_ZN10LinkedListI13EZUI_PageItemE6removeEi+0x4c>
    39c2:	db 01       	movw	r26, r22
    39c4:	ed 91       	ld	r30, X+
    39c6:	fc 91       	ld	r31, X
    39c8:	06 84       	ldd	r0, Z+14	; 0x0e
    39ca:	f7 85       	ldd	r31, Z+15	; 0x0f
    39cc:	e0 2d       	mov	r30, r0
    39ce:	19 95       	eicall
    39d0:	44 c0       	rjmp	.+136    	; 0x3a5a <_ZN10LinkedListI13EZUI_PageItemE6removeEi+0xd4>
    39d2:	21 50       	subi	r18, 0x01	; 1
    39d4:	31 09       	sbc	r19, r1
    39d6:	24 17       	cp	r18, r20
    39d8:	35 07       	cpc	r19, r21
    39da:	41 f4       	brne	.+16     	; 0x39ec <_ZN10LinkedListI13EZUI_PageItemE6removeEi+0x66>
    39dc:	db 01       	movw	r26, r22
    39de:	ed 91       	ld	r30, X+
    39e0:	fc 91       	ld	r31, X
    39e2:	04 84       	ldd	r0, Z+12	; 0x0c
    39e4:	f5 85       	ldd	r31, Z+13	; 0x0d
    39e6:	e0 2d       	mov	r30, r0
    39e8:	19 95       	eicall
    39ea:	37 c0       	rjmp	.+110    	; 0x3a5a <_ZN10LinkedListI13EZUI_PageItemE6removeEi+0xd4>
    39ec:	ba 01       	movw	r22, r20
    39ee:	61 50       	subi	r22, 0x01	; 1
    39f0:	71 09       	sbc	r23, r1
    39f2:	c8 01       	movw	r24, r16
    39f4:	18 de       	rcall	.-976    	; 0x3626 <_ZN10LinkedListI13EZUI_PageItemE7getNodeEi>
    39f6:	fc 01       	movw	r30, r24
    39f8:	c6 80       	ldd	r12, Z+6	; 0x06
    39fa:	d7 80       	ldd	r13, Z+7	; 0x07
    39fc:	26 e0       	ldi	r18, 0x06	; 6
    39fe:	f6 01       	movw	r30, r12
    3a00:	de 01       	movw	r26, r28
    3a02:	11 96       	adiw	r26, 0x01	; 1
    3a04:	01 90       	ld	r0, Z+
    3a06:	0d 92       	st	X+, r0
    3a08:	2a 95       	dec	r18
    3a0a:	e1 f7       	brne	.-8      	; 0x3a04 <_ZN10LinkedListI13EZUI_PageItemE6removeEi+0x7e>
    3a0c:	d6 01       	movw	r26, r12
    3a0e:	16 96       	adiw	r26, 0x06	; 6
    3a10:	2d 91       	ld	r18, X+
    3a12:	3c 91       	ld	r19, X
    3a14:	17 97       	sbiw	r26, 0x07	; 7
    3a16:	fc 01       	movw	r30, r24
    3a18:	37 83       	std	Z+7, r19	; 0x07
    3a1a:	26 83       	std	Z+6, r18	; 0x06
    3a1c:	c1 14       	cp	r12, r1
    3a1e:	d1 04       	cpc	r13, r1
    3a20:	29 f0       	breq	.+10     	; 0x3a2c <_ZN10LinkedListI13EZUI_PageItemE6removeEi+0xa6>
    3a22:	c6 01       	movw	r24, r12
    3a24:	3a d1       	rcall	.+628    	; 0x3c9a <_ZN13EZUI_PageItemD1Ev>
    3a26:	c6 01       	movw	r24, r12
    3a28:	0e 94 51 30 	call	0x60a2	; 0x60a2 <_ZdlPv>
    3a2c:	d8 01       	movw	r26, r16
    3a2e:	12 96       	adiw	r26, 0x02	; 2
    3a30:	8d 91       	ld	r24, X+
    3a32:	9c 91       	ld	r25, X
    3a34:	13 97       	sbiw	r26, 0x03	; 3
    3a36:	01 97       	sbiw	r24, 0x01	; 1
    3a38:	13 96       	adiw	r26, 0x03	; 3
    3a3a:	9c 93       	st	X, r25
    3a3c:	8e 93       	st	-X, r24
    3a3e:	12 97       	sbiw	r26, 0x02	; 2
    3a40:	1c 96       	adiw	r26, 0x0c	; 12
    3a42:	1c 92       	st	X, r1
    3a44:	86 e0       	ldi	r24, 0x06	; 6
    3a46:	fe 01       	movw	r30, r28
    3a48:	31 96       	adiw	r30, 0x01	; 1
    3a4a:	d7 01       	movw	r26, r14
    3a4c:	01 90       	ld	r0, Z+
    3a4e:	0d 92       	st	X+, r0
    3a50:	8a 95       	dec	r24
    3a52:	e1 f7       	brne	.-8      	; 0x3a4c <_ZN10LinkedListI13EZUI_PageItemE6removeEi+0xc6>
    3a54:	ce 01       	movw	r24, r28
    3a56:	01 96       	adiw	r24, 0x01	; 1
    3a58:	20 d1       	rcall	.+576    	; 0x3c9a <_ZN13EZUI_PageItemD1Ev>
    3a5a:	c7 01       	movw	r24, r14
    3a5c:	26 96       	adiw	r28, 0x06	; 6
    3a5e:	0f b6       	in	r0, 0x3f	; 63
    3a60:	f8 94       	cli
    3a62:	de bf       	out	0x3e, r29	; 62
    3a64:	0f be       	out	0x3f, r0	; 63
    3a66:	cd bf       	out	0x3d, r28	; 61
    3a68:	df 91       	pop	r29
    3a6a:	cf 91       	pop	r28
    3a6c:	1f 91       	pop	r17
    3a6e:	0f 91       	pop	r16
    3a70:	ff 90       	pop	r15
    3a72:	ef 90       	pop	r14
    3a74:	df 90       	pop	r13
    3a76:	cf 90       	pop	r12
    3a78:	08 95       	ret

00003a7a <_ZN10LinkedListI13EZUI_PageItemE3setEiS0_>:
    3a7a:	cf 93       	push	r28
    3a7c:	df 93       	push	r29
    3a7e:	77 23       	and	r23, r23
    3a80:	8c f0       	brlt	.+34     	; 0x3aa4 <_ZN10LinkedListI13EZUI_PageItemE3setEiS0_+0x2a>
    3a82:	fc 01       	movw	r30, r24
    3a84:	22 81       	ldd	r18, Z+2	; 0x02
    3a86:	33 81       	ldd	r19, Z+3	; 0x03
    3a88:	62 17       	cp	r22, r18
    3a8a:	73 07       	cpc	r23, r19
    3a8c:	6c f4       	brge	.+26     	; 0x3aa8 <_ZN10LinkedListI13EZUI_PageItemE3setEiS0_+0x2e>
    3a8e:	ea 01       	movw	r28, r20
    3a90:	ca dd       	rcall	.-1132   	; 0x3626 <_ZN10LinkedListI13EZUI_PageItemE7getNodeEi>
    3a92:	dc 01       	movw	r26, r24
    3a94:	96 e0       	ldi	r25, 0x06	; 6
    3a96:	fe 01       	movw	r30, r28
    3a98:	01 90       	ld	r0, Z+
    3a9a:	0d 92       	st	X+, r0
    3a9c:	9a 95       	dec	r25
    3a9e:	e1 f7       	brne	.-8      	; 0x3a98 <_ZN10LinkedListI13EZUI_PageItemE3setEiS0_+0x1e>
    3aa0:	81 e0       	ldi	r24, 0x01	; 1
    3aa2:	03 c0       	rjmp	.+6      	; 0x3aaa <_ZN10LinkedListI13EZUI_PageItemE3setEiS0_+0x30>
    3aa4:	80 e0       	ldi	r24, 0x00	; 0
    3aa6:	01 c0       	rjmp	.+2      	; 0x3aaa <_ZN10LinkedListI13EZUI_PageItemE3setEiS0_+0x30>
    3aa8:	80 e0       	ldi	r24, 0x00	; 0
    3aaa:	df 91       	pop	r29
    3aac:	cf 91       	pop	r28
    3aae:	08 95       	ret

00003ab0 <_ZN10LinkedListI13EZUI_PageItemE3addEiS0_>:
    3ab0:	af 92       	push	r10
    3ab2:	bf 92       	push	r11
    3ab4:	cf 92       	push	r12
    3ab6:	df 92       	push	r13
    3ab8:	ef 92       	push	r14
    3aba:	ff 92       	push	r15
    3abc:	0f 93       	push	r16
    3abe:	1f 93       	push	r17
    3ac0:	cf 93       	push	r28
    3ac2:	df 93       	push	r29
    3ac4:	cd b7       	in	r28, 0x3d	; 61
    3ac6:	de b7       	in	r29, 0x3e	; 62
    3ac8:	2c 97       	sbiw	r28, 0x0c	; 12
    3aca:	0f b6       	in	r0, 0x3f	; 63
    3acc:	f8 94       	cli
    3ace:	de bf       	out	0x3e, r29	; 62
    3ad0:	0f be       	out	0x3f, r0	; 63
    3ad2:	cd bf       	out	0x3d, r28	; 61
    3ad4:	8c 01       	movw	r16, r24
    3ad6:	7b 01       	movw	r14, r22
    3ad8:	5a 01       	movw	r10, r20
    3ada:	dc 01       	movw	r26, r24
    3adc:	12 96       	adiw	r26, 0x02	; 2
    3ade:	8d 91       	ld	r24, X+
    3ae0:	9c 91       	ld	r25, X
    3ae2:	13 97       	sbiw	r26, 0x03	; 3
    3ae4:	68 17       	cp	r22, r24
    3ae6:	79 07       	cpc	r23, r25
    3ae8:	bc f0       	brlt	.+46     	; 0x3b18 <_ZN10LinkedListI13EZUI_PageItemE3addEiS0_+0x68>
    3aea:	ed 91       	ld	r30, X+
    3aec:	fc 91       	ld	r31, X
    3aee:	24 81       	ldd	r18, Z+4	; 0x04
    3af0:	35 81       	ldd	r19, Z+5	; 0x05
    3af2:	96 e0       	ldi	r25, 0x06	; 6
    3af4:	fa 01       	movw	r30, r20
    3af6:	de 01       	movw	r26, r28
    3af8:	17 96       	adiw	r26, 0x07	; 7
    3afa:	01 90       	ld	r0, Z+
    3afc:	0d 92       	st	X+, r0
    3afe:	9a 95       	dec	r25
    3b00:	e1 f7       	brne	.-8      	; 0x3afa <_ZN10LinkedListI13EZUI_PageItemE3addEiS0_+0x4a>
    3b02:	be 01       	movw	r22, r28
    3b04:	69 5f       	subi	r22, 0xF9	; 249
    3b06:	7f 4f       	sbci	r23, 0xFF	; 255
    3b08:	c8 01       	movw	r24, r16
    3b0a:	f9 01       	movw	r30, r18
    3b0c:	19 95       	eicall
    3b0e:	18 2f       	mov	r17, r24
    3b10:	ce 01       	movw	r24, r28
    3b12:	07 96       	adiw	r24, 0x07	; 7
    3b14:	c2 d0       	rcall	.+388    	; 0x3c9a <_ZN13EZUI_PageItemD1Ev>
    3b16:	44 c0       	rjmp	.+136    	; 0x3ba0 <_ZN10LinkedListI13EZUI_PageItemE3addEiS0_+0xf0>
    3b18:	67 2b       	or	r22, r23
    3b1a:	c1 f4       	brne	.+48     	; 0x3b4c <_ZN10LinkedListI13EZUI_PageItemE3addEiS0_+0x9c>
    3b1c:	d8 01       	movw	r26, r16
    3b1e:	ed 91       	ld	r30, X+
    3b20:	fc 91       	ld	r31, X
    3b22:	26 81       	ldd	r18, Z+6	; 0x06
    3b24:	37 81       	ldd	r19, Z+7	; 0x07
    3b26:	96 e0       	ldi	r25, 0x06	; 6
    3b28:	fa 01       	movw	r30, r20
    3b2a:	de 01       	movw	r26, r28
    3b2c:	11 96       	adiw	r26, 0x01	; 1
    3b2e:	01 90       	ld	r0, Z+
    3b30:	0d 92       	st	X+, r0
    3b32:	9a 95       	dec	r25
    3b34:	e1 f7       	brne	.-8      	; 0x3b2e <_ZN10LinkedListI13EZUI_PageItemE3addEiS0_+0x7e>
    3b36:	be 01       	movw	r22, r28
    3b38:	6f 5f       	subi	r22, 0xFF	; 255
    3b3a:	7f 4f       	sbci	r23, 0xFF	; 255
    3b3c:	c8 01       	movw	r24, r16
    3b3e:	f9 01       	movw	r30, r18
    3b40:	19 95       	eicall
    3b42:	18 2f       	mov	r17, r24
    3b44:	ce 01       	movw	r24, r28
    3b46:	01 96       	adiw	r24, 0x01	; 1
    3b48:	a8 d0       	rcall	.+336    	; 0x3c9a <_ZN13EZUI_PageItemD1Ev>
    3b4a:	2a c0       	rjmp	.+84     	; 0x3ba0 <_ZN10LinkedListI13EZUI_PageItemE3addEiS0_+0xf0>
    3b4c:	88 e0       	ldi	r24, 0x08	; 8
    3b4e:	90 e0       	ldi	r25, 0x00	; 0
    3b50:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    3b54:	6c 01       	movw	r12, r24
    3b56:	88 e0       	ldi	r24, 0x08	; 8
    3b58:	d6 01       	movw	r26, r12
    3b5a:	1d 92       	st	X+, r1
    3b5c:	8a 95       	dec	r24
    3b5e:	e9 f7       	brne	.-6      	; 0x3b5a <_ZN10LinkedListI13EZUI_PageItemE3addEiS0_+0xaa>
    3b60:	c6 01       	movw	r24, r12
    3b62:	94 d0       	rcall	.+296    	; 0x3c8c <_ZN13EZUI_PageItemC1Ev>
    3b64:	b7 01       	movw	r22, r14
    3b66:	61 50       	subi	r22, 0x01	; 1
    3b68:	71 09       	sbc	r23, r1
    3b6a:	c8 01       	movw	r24, r16
    3b6c:	5c dd       	rcall	.-1352   	; 0x3626 <_ZN10LinkedListI13EZUI_PageItemE7getNodeEi>
    3b6e:	26 e0       	ldi	r18, 0x06	; 6
    3b70:	f5 01       	movw	r30, r10
    3b72:	d6 01       	movw	r26, r12
    3b74:	01 90       	ld	r0, Z+
    3b76:	0d 92       	st	X+, r0
    3b78:	2a 95       	dec	r18
    3b7a:	e1 f7       	brne	.-8      	; 0x3b74 <_ZN10LinkedListI13EZUI_PageItemE3addEiS0_+0xc4>
    3b7c:	fc 01       	movw	r30, r24
    3b7e:	26 81       	ldd	r18, Z+6	; 0x06
    3b80:	37 81       	ldd	r19, Z+7	; 0x07
    3b82:	d6 01       	movw	r26, r12
    3b84:	17 96       	adiw	r26, 0x07	; 7
    3b86:	3c 93       	st	X, r19
    3b88:	2e 93       	st	-X, r18
    3b8a:	16 97       	sbiw	r26, 0x06	; 6
    3b8c:	d7 82       	std	Z+7, r13	; 0x07
    3b8e:	c6 82       	std	Z+6, r12	; 0x06
    3b90:	f8 01       	movw	r30, r16
    3b92:	82 81       	ldd	r24, Z+2	; 0x02
    3b94:	93 81       	ldd	r25, Z+3	; 0x03
    3b96:	01 96       	adiw	r24, 0x01	; 1
    3b98:	93 83       	std	Z+3, r25	; 0x03
    3b9a:	82 83       	std	Z+2, r24	; 0x02
    3b9c:	14 86       	std	Z+12, r1	; 0x0c
    3b9e:	11 e0       	ldi	r17, 0x01	; 1
    3ba0:	81 2f       	mov	r24, r17
    3ba2:	2c 96       	adiw	r28, 0x0c	; 12
    3ba4:	0f b6       	in	r0, 0x3f	; 63
    3ba6:	f8 94       	cli
    3ba8:	de bf       	out	0x3e, r29	; 62
    3baa:	0f be       	out	0x3f, r0	; 63
    3bac:	cd bf       	out	0x3d, r28	; 61
    3bae:	df 91       	pop	r29
    3bb0:	cf 91       	pop	r28
    3bb2:	1f 91       	pop	r17
    3bb4:	0f 91       	pop	r16
    3bb6:	ff 90       	pop	r15
    3bb8:	ef 90       	pop	r14
    3bba:	df 90       	pop	r13
    3bbc:	cf 90       	pop	r12
    3bbe:	bf 90       	pop	r11
    3bc0:	af 90       	pop	r10
    3bc2:	08 95       	ret

00003bc4 <_ZN9EZUI_Page8nextItemEv>:

void EZUI_Page::nextItem(void){
    3bc4:	cf 92       	push	r12
    3bc6:	df 92       	push	r13
    3bc8:	ef 92       	push	r14
    3bca:	ff 92       	push	r15
    3bcc:	0f 93       	push	r16
    3bce:	1f 93       	push	r17
    3bd0:	cf 93       	push	r28
    3bd2:	df 93       	push	r29
    3bd4:	00 d0       	rcall	.+0      	; 0x3bd6 <_ZN9EZUI_Page8nextItemEv+0x12>
    3bd6:	00 d0       	rcall	.+0      	; 0x3bd8 <_ZN9EZUI_Page8nextItemEv+0x14>
    3bd8:	cd b7       	in	r28, 0x3d	; 61
    3bda:	de b7       	in	r29, 0x3e	; 62
    3bdc:	7c 01       	movw	r14, r24
	if(currentItem > -1){
    3bde:	fc 01       	movw	r30, r24
    3be0:	02 a5       	ldd	r16, Z+42	; 0x2a
    3be2:	13 a5       	ldd	r17, Z+43	; 0x2b
    3be4:	11 23       	and	r17, r17
    3be6:	fc f0       	brlt	.+62     	; 0x3c26 <_ZN9EZUI_Page8nextItemEv+0x62>
		for( int i=currentItem; i<(SelectableItems.size()-1); i++){
    3be8:	6c 01       	movw	r12, r24
    3bea:	f5 e1       	ldi	r31, 0x15	; 21
    3bec:	cf 0e       	add	r12, r31
    3bee:	d1 1c       	adc	r13, r1
    3bf0:	fc 01       	movw	r30, r24
    3bf2:	87 89       	ldd	r24, Z+23	; 0x17
    3bf4:	90 8d       	ldd	r25, Z+24	; 0x18
    3bf6:	01 97       	sbiw	r24, 0x01	; 1
    3bf8:	08 17       	cp	r16, r24
    3bfa:	19 07       	cpc	r17, r25
    3bfc:	a4 f4       	brge	.+40     	; 0x3c26 <_ZN9EZUI_Page8nextItemEv+0x62>
			if (SelectableItems.get(i) == 1){
    3bfe:	b8 01       	movw	r22, r16
    3c00:	c6 01       	movw	r24, r12
    3c02:	0e 94 45 04 	call	0x88a	; 0x88a <_ZN10LinkedListIiE3getEi>
    3c06:	01 97       	sbiw	r24, 0x01	; 1
    3c08:	21 f4       	brne	.+8      	; 0x3c12 <_ZN9EZUI_Page8nextItemEv+0x4e>
				currentItem = i;
    3c0a:	f7 01       	movw	r30, r14
    3c0c:	13 a7       	std	Z+43, r17	; 0x2b
    3c0e:	02 a7       	std	Z+42, r16	; 0x2a
				break;
    3c10:	0a c0       	rjmp	.+20     	; 0x3c26 <_ZN9EZUI_Page8nextItemEv+0x62>
	refresh = 1;
}

void EZUI_Page::nextItem(void){
	if(currentItem > -1){
		for( int i=currentItem; i<(SelectableItems.size()-1); i++){
    3c12:	0f 5f       	subi	r16, 0xFF	; 255
    3c14:	1f 4f       	sbci	r17, 0xFF	; 255
    3c16:	f7 01       	movw	r30, r14
    3c18:	27 89       	ldd	r18, Z+23	; 0x17
    3c1a:	30 8d       	ldd	r19, Z+24	; 0x18
    3c1c:	21 50       	subi	r18, 0x01	; 1
    3c1e:	31 09       	sbc	r19, r1
    3c20:	02 17       	cp	r16, r18
    3c22:	13 07       	cpc	r17, r19
    3c24:	64 f3       	brlt	.-40     	; 0x3bfe <_ZN9EZUI_Page8nextItemEv+0x3a>
				currentItem = i;
				break;
			}
		}
	}
	Serial.println(Name + " - Encoder Item: ");
    3c26:	b7 01       	movw	r22, r14
    3c28:	6e 5f       	subi	r22, 0xFE	; 254
    3c2a:	7f 4f       	sbci	r23, 0xFF	; 255
{
public:
	StringSumHelper(const String &s) : String(s) {}
    3c2c:	ce 01       	movw	r24, r28
    3c2e:	01 96       	adiw	r24, 0x01	; 1
    3c30:	0e 94 e0 37 	call	0x6fc0	; 0x6fc0 <_ZN6StringC1ERKS_>
    3c34:	69 e8       	ldi	r22, 0x89	; 137
    3c36:	74 e0       	ldi	r23, 0x04	; 4
    3c38:	ce 01       	movw	r24, r28
    3c3a:	01 96       	adiw	r24, 0x01	; 1
    3c3c:	0e 94 47 38 	call	0x708e	; 0x708e <_ZplRK15StringSumHelperPKc>
    3c40:	bc 01       	movw	r22, r24
    3c42:	88 ea       	ldi	r24, 0xA8	; 168
    3c44:	9a e0       	ldi	r25, 0x0A	; 10
    3c46:	0e 94 ba 30 	call	0x6174	; 0x6174 <_ZN5Print7printlnERK6String>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    3c4a:	ce 01       	movw	r24, r28
    3c4c:	01 96       	adiw	r24, 0x01	; 1
    3c4e:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
	Serial.println(currentItem);
    3c52:	f7 01       	movw	r30, r14
    3c54:	62 a5       	ldd	r22, Z+42	; 0x2a
    3c56:	73 a5       	ldd	r23, Z+43	; 0x2b
    3c58:	4a e0       	ldi	r20, 0x0A	; 10
    3c5a:	50 e0       	ldi	r21, 0x00	; 0
    3c5c:	88 ea       	ldi	r24, 0xA8	; 168
    3c5e:	9a e0       	ldi	r25, 0x0A	; 10
    3c60:	0e 94 8c 31 	call	0x6318	; 0x6318 <_ZN5Print7printlnEii>
	refresh = 1;
    3c64:	81 e0       	ldi	r24, 0x01	; 1
    3c66:	90 e0       	ldi	r25, 0x00	; 0
    3c68:	f7 01       	movw	r30, r14
    3c6a:	95 a7       	std	Z+45, r25	; 0x2d
    3c6c:	84 a7       	std	Z+44, r24	; 0x2c
}
    3c6e:	26 96       	adiw	r28, 0x06	; 6
    3c70:	0f b6       	in	r0, 0x3f	; 63
    3c72:	f8 94       	cli
    3c74:	de bf       	out	0x3e, r29	; 62
    3c76:	0f be       	out	0x3f, r0	; 63
    3c78:	cd bf       	out	0x3d, r28	; 61
    3c7a:	df 91       	pop	r29
    3c7c:	cf 91       	pop	r28
    3c7e:	1f 91       	pop	r17
    3c80:	0f 91       	pop	r16
    3c82:	ff 90       	pop	r15
    3c84:	ef 90       	pop	r14
    3c86:	df 90       	pop	r13
    3c88:	cf 90       	pop	r12
    3c8a:	08 95       	ret

00003c8c <_ZN13EZUI_PageItemC1Ev>:
//Instantiate - Toggle Option
EZUI_PageItem::EZUI_PageItem(uint8_t colIndx, uint8_t rowIndx, EZUI_Control_ToggleOption * val){
	col = colIndx;
	row = rowIndx;
	Type = ToggleOption;
	valRef = val;
    3c8c:	fc 01       	movw	r30, r24
    3c8e:	10 82       	st	Z, r1
    3c90:	11 82       	std	Z+1, r1	; 0x01
    3c92:	84 e1       	ldi	r24, 0x14	; 20
    3c94:	82 83       	std	Z+2, r24	; 0x02
    3c96:	15 82       	std	Z+5, r1	; 0x05
    3c98:	08 95       	ret

00003c9a <_ZN13EZUI_PageItemD1Ev>:
    3c9a:	08 95       	ret

00003c9c <_ZN13EZUI_PageItemC1Ehhb>:
    3c9c:	ff 92       	push	r15
    3c9e:	0f 93       	push	r16
    3ca0:	1f 93       	push	r17
    3ca2:	cf 93       	push	r28
    3ca4:	df 93       	push	r29
    3ca6:	1f 92       	push	r1
    3ca8:	1f 92       	push	r1
    3caa:	cd b7       	in	r28, 0x3d	; 61
    3cac:	de b7       	in	r29, 0x3e	; 62
    3cae:	8c 01       	movw	r16, r24
    3cb0:	f2 2e       	mov	r15, r18
    3cb2:	fc 01       	movw	r30, r24
    3cb4:	15 82       	std	Z+5, r1	; 0x05
    3cb6:	60 83       	st	Z, r22
    3cb8:	41 83       	std	Z+1, r20	; 0x01
    3cba:	87 e0       	ldi	r24, 0x07	; 7
    3cbc:	82 83       	std	Z+2, r24	; 0x02
    3cbe:	81 e0       	ldi	r24, 0x01	; 1
    3cc0:	90 e0       	ldi	r25, 0x00	; 0
    3cc2:	0e 94 4e 30 	call	0x609c	; 0x609c <_Znwj>
    3cc6:	fc 01       	movw	r30, r24
    3cc8:	f0 82       	st	Z, r15
    3cca:	ce 01       	movw	r24, r28
    3ccc:	01 96       	adiw	r24, 0x01	; 1
    3cce:	f8 01       	movw	r30, r16
    3cd0:	94 83       	std	Z+4, r25	; 0x04
    3cd2:	83 83       	std	Z+3, r24	; 0x03
    3cd4:	81 e0       	ldi	r24, 0x01	; 1
    3cd6:	85 83       	std	Z+5, r24	; 0x05
    3cd8:	0f 90       	pop	r0
    3cda:	0f 90       	pop	r0
    3cdc:	df 91       	pop	r29
    3cde:	cf 91       	pop	r28
    3ce0:	1f 91       	pop	r17
    3ce2:	0f 91       	pop	r16
    3ce4:	ff 90       	pop	r15
    3ce6:	08 95       	ret

00003ce8 <_ZN13EZUI_PageItemC1EhhP17EZUI_Control_Link>:
}

//Instantiate - Link
EZUI_PageItem::EZUI_PageItem(uint8_t colIndx, uint8_t rowIndx,EZUI_Control_Link * val){
    3ce8:	fc 01       	movw	r30, r24
    3cea:	15 82       	std	Z+5, r1	; 0x05
	col = colIndx;
    3cec:	60 83       	st	Z, r22
	row = rowIndx;
    3cee:	41 83       	std	Z+1, r20	; 0x01
	Type = Link;
    3cf0:	83 e1       	ldi	r24, 0x13	; 19
    3cf2:	82 83       	std	Z+2, r24	; 0x02
	valRef = val;
    3cf4:	34 83       	std	Z+4, r19	; 0x04
    3cf6:	23 83       	std	Z+3, r18	; 0x03
    3cf8:	08 95       	ret

00003cfa <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb>:
}

void EZUI_PageItem::print(LiquidCrystal_I2C * LCD, bool refresh){
    3cfa:	ef 92       	push	r14
    3cfc:	ff 92       	push	r15
    3cfe:	0f 93       	push	r16
    3d00:	1f 93       	push	r17
    3d02:	cf 93       	push	r28
    3d04:	df 93       	push	r29
    3d06:	cd b7       	in	r28, 0x3d	; 61
    3d08:	de b7       	in	r29, 0x3e	; 62
    3d0a:	68 97       	sbiw	r28, 0x18	; 24
    3d0c:	0f b6       	in	r0, 0x3f	; 63
    3d0e:	f8 94       	cli
    3d10:	de bf       	out	0x3e, r29	; 62
    3d12:	0f be       	out	0x3f, r0	; 63
    3d14:	cd bf       	out	0x3d, r28	; 61
    3d16:	8c 01       	movw	r16, r24
    3d18:	7b 01       	movw	r14, r22
	LCD->setCursor(col, row);
    3d1a:	dc 01       	movw	r26, r24
    3d1c:	11 96       	adiw	r26, 0x01	; 1
    3d1e:	4c 91       	ld	r20, X
    3d20:	11 97       	sbiw	r26, 0x01	; 1
    3d22:	6c 91       	ld	r22, X
    3d24:	c7 01       	movw	r24, r14
    3d26:	f4 d7       	rcall	.+4072   	; 0x4d10 <_ZN3LCD9setCursorEhh>
	switch(Type){
    3d28:	f8 01       	movw	r30, r16
    3d2a:	42 81       	ldd	r20, Z+2	; 0x02
    3d2c:	50 e0       	ldi	r21, 0x00	; 0
    3d2e:	44 31       	cpi	r20, 0x14	; 20
    3d30:	51 05       	cpc	r21, r1
    3d32:	08 f0       	brcs	.+2      	; 0x3d36 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x3c>
    3d34:	4c c1       	rjmp	.+664    	; 0x3fce <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x2d4>
    3d36:	fa 01       	movw	r30, r20
    3d38:	88 27       	eor	r24, r24
    3d3a:	ee 58       	subi	r30, 0x8E	; 142
    3d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d3e:	8f 4f       	sbci	r24, 0xFF	; 255
    3d40:	0c 94 b2 3a 	jmp	0x7564	; 0x7564 <__tablejump2__>
			
		case StaticInt:
		{
			//Serial.println("Printing Static Int");
			//Serial.println(StaticInt);
			LCD->print(*(int*)valRef);
    3d44:	d8 01       	movw	r26, r16
    3d46:	13 96       	adiw	r26, 0x03	; 3
    3d48:	ed 91       	ld	r30, X+
    3d4a:	fc 91       	ld	r31, X
    3d4c:	14 97       	sbiw	r26, 0x04	; 4
    3d4e:	60 81       	ld	r22, Z
    3d50:	71 81       	ldd	r23, Z+1	; 0x01
    3d52:	4a e0       	ldi	r20, 0x0A	; 10
    3d54:	50 e0       	ldi	r21, 0x00	; 0
    3d56:	c7 01       	movw	r24, r14
    3d58:	0e 94 85 31 	call	0x630a	; 0x630a <_ZN5Print5printEii>
		}
		break;
    3d5c:	38 c1       	rjmp	.+624    	; 0x3fce <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x2d4>
		
		case StaticUInt:
		{
			//Serial.println("Printing Static UInt");
			//Serial.println(UIntVal);
			LCD->print(*(unsigned int*)valRef);
    3d5e:	d8 01       	movw	r26, r16
    3d60:	13 96       	adiw	r26, 0x03	; 3
    3d62:	ed 91       	ld	r30, X+
    3d64:	fc 91       	ld	r31, X
    3d66:	14 97       	sbiw	r26, 0x04	; 4
    3d68:	60 81       	ld	r22, Z
    3d6a:	71 81       	ldd	r23, Z+1	; 0x01
    3d6c:	4a e0       	ldi	r20, 0x0A	; 10
    3d6e:	50 e0       	ldi	r21, 0x00	; 0
    3d70:	c7 01       	movw	r24, r14
    3d72:	0e 94 b6 31 	call	0x636c	; 0x636c <_ZN5Print5printEji>
		}
		break;
    3d76:	2b c1       	rjmp	.+598    	; 0x3fce <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x2d4>
		
		case StaticLong:
		{
			//Serial.println("Printing Static Long");
			//Serial.println(LongVal);
			LCD->print(*(long*)valRef);
    3d78:	d8 01       	movw	r26, r16
    3d7a:	13 96       	adiw	r26, 0x03	; 3
    3d7c:	ed 91       	ld	r30, X+
    3d7e:	fc 91       	ld	r31, X
    3d80:	14 97       	sbiw	r26, 0x04	; 4
    3d82:	40 81       	ld	r20, Z
    3d84:	51 81       	ldd	r21, Z+1	; 0x01
    3d86:	62 81       	ldd	r22, Z+2	; 0x02
    3d88:	73 81       	ldd	r23, Z+3	; 0x03
    3d8a:	2a e0       	ldi	r18, 0x0A	; 10
    3d8c:	30 e0       	ldi	r19, 0x00	; 0
    3d8e:	c7 01       	movw	r24, r14
    3d90:	0e 94 4d 31 	call	0x629a	; 0x629a <_ZN5Print5printEli>
		}
		break;
    3d94:	1c c1       	rjmp	.+568    	; 0x3fce <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x2d4>
		
		case StaticULong:
		{
			//Serial.println("Printing Static ULong");
			//Serial.println(ULongVal);
			LCD->print(*(unsigned long*)valRef);
    3d96:	d8 01       	movw	r26, r16
    3d98:	13 96       	adiw	r26, 0x03	; 3
    3d9a:	ed 91       	ld	r30, X+
    3d9c:	fc 91       	ld	r31, X
    3d9e:	14 97       	sbiw	r26, 0x04	; 4
    3da0:	40 81       	ld	r20, Z
    3da2:	51 81       	ldd	r21, Z+1	; 0x01
    3da4:	62 81       	ldd	r22, Z+2	; 0x02
    3da6:	73 81       	ldd	r23, Z+3	; 0x03
    3da8:	2a e0       	ldi	r18, 0x0A	; 10
    3daa:	30 e0       	ldi	r19, 0x00	; 0
    3dac:	c7 01       	movw	r24, r14
    3dae:	0e 94 a1 31 	call	0x6342	; 0x6342 <_ZN5Print5printEmi>
		}
		break;
    3db2:	0d c1       	rjmp	.+538    	; 0x3fce <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x2d4>
		
		case StaticFloat:
		{
			//Serial.println("Printing Static Float");
			//Serial.println(FltVal);
			LCD->print(*(float*)valRef);
    3db4:	d8 01       	movw	r26, r16
    3db6:	13 96       	adiw	r26, 0x03	; 3
    3db8:	ed 91       	ld	r30, X+
    3dba:	fc 91       	ld	r31, X
    3dbc:	14 97       	sbiw	r26, 0x04	; 4
    3dbe:	40 81       	ld	r20, Z
    3dc0:	51 81       	ldd	r21, Z+1	; 0x01
    3dc2:	62 81       	ldd	r22, Z+2	; 0x02
    3dc4:	73 81       	ldd	r23, Z+3	; 0x03
    3dc6:	22 e0       	ldi	r18, 0x02	; 2
    3dc8:	30 e0       	ldi	r19, 0x00	; 0
    3dca:	c7 01       	movw	r24, r14
    3dcc:	0e 94 b0 32 	call	0x6560	; 0x6560 <_ZN5Print5printEdi>
		}
		break;
    3dd0:	fe c0       	rjmp	.+508    	; 0x3fce <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x2d4>
		
		case StaticDouble:
		{
			//Serial.println("Printing Static Double");
			//Serial.println(DblVal);
			LCD->print(*(double*)valRef);
    3dd2:	d8 01       	movw	r26, r16
    3dd4:	13 96       	adiw	r26, 0x03	; 3
    3dd6:	ed 91       	ld	r30, X+
    3dd8:	fc 91       	ld	r31, X
    3dda:	14 97       	sbiw	r26, 0x04	; 4
    3ddc:	40 81       	ld	r20, Z
    3dde:	51 81       	ldd	r21, Z+1	; 0x01
    3de0:	62 81       	ldd	r22, Z+2	; 0x02
    3de2:	73 81       	ldd	r23, Z+3	; 0x03
    3de4:	22 e0       	ldi	r18, 0x02	; 2
    3de6:	30 e0       	ldi	r19, 0x00	; 0
    3de8:	c7 01       	movw	r24, r14
    3dea:	0e 94 b0 32 	call	0x6560	; 0x6560 <_ZN5Print5printEdi>
		}
		break;
    3dee:	ef c0       	rjmp	.+478    	; 0x3fce <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x2d4>
		
		case StaticBool:
		{
			//Serial.println("Printing Static Bool");
			//Serial.println(BlnVal);
			LCD->print(*(boolean*)valRef);
    3df0:	d8 01       	movw	r26, r16
    3df2:	13 96       	adiw	r26, 0x03	; 3
    3df4:	ed 91       	ld	r30, X+
    3df6:	fc 91       	ld	r31, X
    3df8:	14 97       	sbiw	r26, 0x04	; 4
    3dfa:	60 81       	ld	r22, Z
    3dfc:	70 e0       	ldi	r23, 0x00	; 0
    3dfe:	4a e0       	ldi	r20, 0x0A	; 10
    3e00:	50 e0       	ldi	r21, 0x00	; 0
    3e02:	c7 01       	movw	r24, r14
    3e04:	0e 94 85 31 	call	0x630a	; 0x630a <_ZN5Print5printEii>
		}
		break;
    3e08:	e2 c0       	rjmp	.+452    	; 0x3fce <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x2d4>
		
		case StaticBoolWithText:
		{
			//Serial.println("Printing Static Bool with Text");
			//Serial.println(BlnVal);
			LCD->print(*(boolean*)valRef);
    3e0a:	d8 01       	movw	r26, r16
    3e0c:	13 96       	adiw	r26, 0x03	; 3
    3e0e:	ed 91       	ld	r30, X+
    3e10:	fc 91       	ld	r31, X
    3e12:	14 97       	sbiw	r26, 0x04	; 4
    3e14:	60 81       	ld	r22, Z
    3e16:	70 e0       	ldi	r23, 0x00	; 0
    3e18:	4a e0       	ldi	r20, 0x0A	; 10
    3e1a:	50 e0       	ldi	r21, 0x00	; 0
    3e1c:	c7 01       	movw	r24, r14
    3e1e:	0e 94 85 31 	call	0x630a	; 0x630a <_ZN5Print5printEii>
		}
		break;
    3e22:	d5 c0       	rjmp	.+426    	; 0x3fce <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x2d4>
		
		case StaticString:
		{
			//Serial.println("Printing Static STring");
			//Serial.println(StrVal);
			LCD->print(*(String*)valRef);
    3e24:	f8 01       	movw	r30, r16
    3e26:	63 81       	ldd	r22, Z+3	; 0x03
    3e28:	74 81       	ldd	r23, Z+4	; 0x04
    3e2a:	c7 01       	movw	r24, r14
    3e2c:	0e 94 81 30 	call	0x6102	; 0x6102 <_ZN5Print5printERK6String>
		}
		break;
    3e30:	ce c0       	rjmp	.+412    	; 0x3fce <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x2d4>
		
		case VarInt:
		{
			//Serial.println("Printing Var Int");
			//Serial.println(*IntRef);
			LCD->print(*(int*)valRef);
    3e32:	d8 01       	movw	r26, r16
    3e34:	13 96       	adiw	r26, 0x03	; 3
    3e36:	ed 91       	ld	r30, X+
    3e38:	fc 91       	ld	r31, X
    3e3a:	14 97       	sbiw	r26, 0x04	; 4
    3e3c:	60 81       	ld	r22, Z
    3e3e:	71 81       	ldd	r23, Z+1	; 0x01
    3e40:	4a e0       	ldi	r20, 0x0A	; 10
    3e42:	50 e0       	ldi	r21, 0x00	; 0
    3e44:	c7 01       	movw	r24, r14
    3e46:	0e 94 85 31 	call	0x630a	; 0x630a <_ZN5Print5printEii>
		}
		break;
    3e4a:	c1 c0       	rjmp	.+386    	; 0x3fce <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x2d4>
		
		case VarUInt:
		{
			//Serial.println("Printing Var UInt");
			//Serial.println(*UIntRef);
			LCD->print(*(unsigned int*)valRef);
    3e4c:	d8 01       	movw	r26, r16
    3e4e:	13 96       	adiw	r26, 0x03	; 3
    3e50:	ed 91       	ld	r30, X+
    3e52:	fc 91       	ld	r31, X
    3e54:	14 97       	sbiw	r26, 0x04	; 4
    3e56:	60 81       	ld	r22, Z
    3e58:	71 81       	ldd	r23, Z+1	; 0x01
    3e5a:	4a e0       	ldi	r20, 0x0A	; 10
    3e5c:	50 e0       	ldi	r21, 0x00	; 0
    3e5e:	c7 01       	movw	r24, r14
    3e60:	0e 94 b6 31 	call	0x636c	; 0x636c <_ZN5Print5printEji>
		}
		break;
    3e64:	b4 c0       	rjmp	.+360    	; 0x3fce <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x2d4>
		
		case VarLong:
		{
			//Serial.println("Printing Var Long");
			//Serial.println(*LongRef);
			LCD->print(*(long*)valRef);
    3e66:	d8 01       	movw	r26, r16
    3e68:	13 96       	adiw	r26, 0x03	; 3
    3e6a:	ed 91       	ld	r30, X+
    3e6c:	fc 91       	ld	r31, X
    3e6e:	14 97       	sbiw	r26, 0x04	; 4
    3e70:	40 81       	ld	r20, Z
    3e72:	51 81       	ldd	r21, Z+1	; 0x01
    3e74:	62 81       	ldd	r22, Z+2	; 0x02
    3e76:	73 81       	ldd	r23, Z+3	; 0x03
    3e78:	2a e0       	ldi	r18, 0x0A	; 10
    3e7a:	30 e0       	ldi	r19, 0x00	; 0
    3e7c:	c7 01       	movw	r24, r14
    3e7e:	0e 94 4d 31 	call	0x629a	; 0x629a <_ZN5Print5printEli>
		}
		break;	
    3e82:	a5 c0       	rjmp	.+330    	; 0x3fce <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x2d4>
		
		case VarULong:
		{
			//Serial.println("Printing Var ULong");
			//Serial.println(*ULongRef);
			LCD->print(*(unsigned long*)valRef);
    3e84:	d8 01       	movw	r26, r16
    3e86:	13 96       	adiw	r26, 0x03	; 3
    3e88:	ed 91       	ld	r30, X+
    3e8a:	fc 91       	ld	r31, X
    3e8c:	14 97       	sbiw	r26, 0x04	; 4
    3e8e:	40 81       	ld	r20, Z
    3e90:	51 81       	ldd	r21, Z+1	; 0x01
    3e92:	62 81       	ldd	r22, Z+2	; 0x02
    3e94:	73 81       	ldd	r23, Z+3	; 0x03
    3e96:	2a e0       	ldi	r18, 0x0A	; 10
    3e98:	30 e0       	ldi	r19, 0x00	; 0
    3e9a:	c7 01       	movw	r24, r14
    3e9c:	0e 94 a1 31 	call	0x6342	; 0x6342 <_ZN5Print5printEmi>
		}
		break;
    3ea0:	96 c0       	rjmp	.+300    	; 0x3fce <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x2d4>
			
		case VarFloat:
		{
			//Serial.println("Printing Var Float");
			//Serial.println(*FltRef);
			LCD->print(*(float*)valRef);
    3ea2:	d8 01       	movw	r26, r16
    3ea4:	13 96       	adiw	r26, 0x03	; 3
    3ea6:	ed 91       	ld	r30, X+
    3ea8:	fc 91       	ld	r31, X
    3eaa:	14 97       	sbiw	r26, 0x04	; 4
    3eac:	40 81       	ld	r20, Z
    3eae:	51 81       	ldd	r21, Z+1	; 0x01
    3eb0:	62 81       	ldd	r22, Z+2	; 0x02
    3eb2:	73 81       	ldd	r23, Z+3	; 0x03
    3eb4:	22 e0       	ldi	r18, 0x02	; 2
    3eb6:	30 e0       	ldi	r19, 0x00	; 0
    3eb8:	c7 01       	movw	r24, r14
    3eba:	0e 94 b0 32 	call	0x6560	; 0x6560 <_ZN5Print5printEdi>
		}
		break;
    3ebe:	87 c0       	rjmp	.+270    	; 0x3fce <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x2d4>
				
		case VarDouble:
		{
			//Serial.println("Printing Var Double");
			//Serial.println(*DblRef);
			LCD->print(*(double*)valRef);
    3ec0:	d8 01       	movw	r26, r16
    3ec2:	13 96       	adiw	r26, 0x03	; 3
    3ec4:	ed 91       	ld	r30, X+
    3ec6:	fc 91       	ld	r31, X
    3ec8:	14 97       	sbiw	r26, 0x04	; 4
    3eca:	40 81       	ld	r20, Z
    3ecc:	51 81       	ldd	r21, Z+1	; 0x01
    3ece:	62 81       	ldd	r22, Z+2	; 0x02
    3ed0:	73 81       	ldd	r23, Z+3	; 0x03
    3ed2:	22 e0       	ldi	r18, 0x02	; 2
    3ed4:	30 e0       	ldi	r19, 0x00	; 0
    3ed6:	c7 01       	movw	r24, r14
    3ed8:	0e 94 b0 32 	call	0x6560	; 0x6560 <_ZN5Print5printEdi>
		}
		break;
    3edc:	78 c0       	rjmp	.+240    	; 0x3fce <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x2d4>
			
		case VarBool:
		{
			//Serial.println("Printing Var Bool");
			//Serial.println(*BlnRef);
			LCD->print(*(boolean*)valRef);
    3ede:	d8 01       	movw	r26, r16
    3ee0:	13 96       	adiw	r26, 0x03	; 3
    3ee2:	ed 91       	ld	r30, X+
    3ee4:	fc 91       	ld	r31, X
    3ee6:	14 97       	sbiw	r26, 0x04	; 4
    3ee8:	60 81       	ld	r22, Z
    3eea:	70 e0       	ldi	r23, 0x00	; 0
    3eec:	4a e0       	ldi	r20, 0x0A	; 10
    3eee:	50 e0       	ldi	r21, 0x00	; 0
    3ef0:	c7 01       	movw	r24, r14
    3ef2:	0e 94 85 31 	call	0x630a	; 0x630a <_ZN5Print5printEii>
		}
		break; 
    3ef6:	6b c0       	rjmp	.+214    	; 0x3fce <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x2d4>
			
		case VarBoolWithText:
		{
			//Serial.println("Printing Var Bool With Text");
			//Serial.println(*BlnRef);
			LCD->print(*(boolean*)valRef);
    3ef8:	d8 01       	movw	r26, r16
    3efa:	13 96       	adiw	r26, 0x03	; 3
    3efc:	ed 91       	ld	r30, X+
    3efe:	fc 91       	ld	r31, X
    3f00:	14 97       	sbiw	r26, 0x04	; 4
    3f02:	60 81       	ld	r22, Z
    3f04:	70 e0       	ldi	r23, 0x00	; 0
    3f06:	4a e0       	ldi	r20, 0x0A	; 10
    3f08:	50 e0       	ldi	r21, 0x00	; 0
    3f0a:	c7 01       	movw	r24, r14
    3f0c:	0e 94 85 31 	call	0x630a	; 0x630a <_ZN5Print5printEii>
		}
		break;
    3f10:	5e c0       	rjmp	.+188    	; 0x3fce <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x2d4>
			
		case VarString:
		{
			//Serial.println("Printing Var String");
			//Serial.println(*StrRef);
			LCD->print(*(String*)valRef);
    3f12:	f8 01       	movw	r30, r16
    3f14:	63 81       	ldd	r22, Z+3	; 0x03
    3f16:	74 81       	ldd	r23, Z+4	; 0x04
    3f18:	c7 01       	movw	r24, r14
    3f1a:	0e 94 81 30 	call	0x6102	; 0x6102 <_ZN5Print5printERK6String>
		}
		break;
    3f1e:	57 c0       	rjmp	.+174    	; 0x3fce <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x2d4>
		case ToggleOption:
		{
			//Serial.println("Toggle Option");
			//Serial.println(TglOptRef->Label);
			EZUI_Control_ToggleOption * TglOpt;
			TglOpt = (EZUI_Control_ToggleOption*)valRef;
    3f20:	d8 01       	movw	r26, r16
    3f22:	13 96       	adiw	r26, 0x03	; 3
    3f24:	0d 91       	ld	r16, X+
    3f26:	1c 91       	ld	r17, X
    3f28:	14 97       	sbiw	r26, 0x04	; 4
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    3f2a:	66 ed       	ldi	r22, 0xD6	; 214
    3f2c:	75 e0       	ldi	r23, 0x05	; 5
    3f2e:	ce 01       	movw	r24, r28
    3f30:	07 96       	adiw	r24, 0x07	; 7
    3f32:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
			LCD->print(" " + TglOpt->Label + ":" );
    3f36:	b8 01       	movw	r22, r16
    3f38:	ce 01       	movw	r24, r28
    3f3a:	07 96       	adiw	r24, 0x07	; 7
    3f3c:	0e 94 36 38 	call	0x706c	; 0x706c <_ZplRK15StringSumHelperRK6String>
    3f40:	6c ed       	ldi	r22, 0xDC	; 220
    3f42:	74 e0       	ldi	r23, 0x04	; 4
    3f44:	0e 94 47 38 	call	0x708e	; 0x708e <_ZplRK15StringSumHelperPKc>
    3f48:	bc 01       	movw	r22, r24
    3f4a:	c7 01       	movw	r24, r14
    3f4c:	0e 94 81 30 	call	0x6102	; 0x6102 <_ZN5Print5printERK6String>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    3f50:	ce 01       	movw	r24, r28
    3f52:	07 96       	adiw	r24, 0x07	; 7
    3f54:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
			
			String TrueLabel = TglOpt->TrueLabel();
    3f58:	b8 01       	movw	r22, r16
    3f5a:	ce 01       	movw	r24, r28
    3f5c:	43 96       	adiw	r24, 0x13	; 19
    3f5e:	0e 94 4c 07 	call	0xe98	; 0xe98 <_ZN25EZUI_Control_ToggleOption9TrueLabelEv>
			int TrueTextLen = TrueLabel.length();
			String FalseLabel = TglOpt->FalseLabel();
    3f62:	b8 01       	movw	r22, r16
    3f64:	ce 01       	movw	r24, r28
    3f66:	0d 96       	adiw	r24, 0x0d	; 13
    3f68:	0e 94 70 07 	call	0xee0	; 0xee0 <_ZN25EZUI_Control_ToggleOption10FalseLabelEv>
			int FalseTextLen = FalseLabel.length();
			if(TglOpt->Value()){
    3f6c:	c8 01       	movw	r24, r16
    3f6e:	0e 94 94 07 	call	0xf28	; 0xf28 <_ZN25EZUI_Control_ToggleOption5ValueEv>
    3f72:	89 2b       	or	r24, r25
    3f74:	39 f0       	breq	.+14     	; 0x3f84 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x28a>
				LCD->print(TrueLabel);
    3f76:	be 01       	movw	r22, r28
    3f78:	6d 5e       	subi	r22, 0xED	; 237
    3f7a:	7f 4f       	sbci	r23, 0xFF	; 255
    3f7c:	c7 01       	movw	r24, r14
    3f7e:	0e 94 81 30 	call	0x6102	; 0x6102 <_ZN5Print5printERK6String>
    3f82:	06 c0       	rjmp	.+12     	; 0x3f90 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x296>
			}else{
				LCD->print(FalseLabel);
    3f84:	be 01       	movw	r22, r28
    3f86:	63 5f       	subi	r22, 0xF3	; 243
    3f88:	7f 4f       	sbci	r23, 0xFF	; 255
    3f8a:	c7 01       	movw	r24, r14
    3f8c:	0e 94 81 30 	call	0x6102	; 0x6102 <_ZN5Print5printERK6String>
			TglOpt = (EZUI_Control_ToggleOption*)valRef;
			LCD->print(" " + TglOpt->Label + ":" );
			
			String TrueLabel = TglOpt->TrueLabel();
			int TrueTextLen = TrueLabel.length();
			String FalseLabel = TglOpt->FalseLabel();
    3f90:	ce 01       	movw	r24, r28
    3f92:	0d 96       	adiw	r24, 0x0d	; 13
    3f94:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
			int FalseTextLen = FalseLabel.length();
			if(TglOpt->Value()){
				LCD->print(TrueLabel);
			}else{
				LCD->print(FalseLabel);
			}
    3f98:	ce 01       	movw	r24, r28
    3f9a:	43 96       	adiw	r24, 0x13	; 19
    3f9c:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
		}
		break;
    3fa0:	16 c0       	rjmp	.+44     	; 0x3fce <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x2d4>
		{
			//Serial.println("Link Option");
			//Serial.println(LnkRef->Label);
			EZUI_Control_Link *LnkOpt;
			LnkOpt = (EZUI_Control_Link*)valRef;
			LCD->print(" " + LnkOpt->Label);
    3fa2:	f8 01       	movw	r30, r16
    3fa4:	03 81       	ldd	r16, Z+3	; 0x03
    3fa6:	14 81       	ldd	r17, Z+4	; 0x04
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    3fa8:	66 ed       	ldi	r22, 0xD6	; 214
    3faa:	75 e0       	ldi	r23, 0x05	; 5
    3fac:	ce 01       	movw	r24, r28
    3fae:	01 96       	adiw	r24, 0x01	; 1
    3fb0:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    3fb4:	b8 01       	movw	r22, r16
    3fb6:	ce 01       	movw	r24, r28
    3fb8:	01 96       	adiw	r24, 0x01	; 1
    3fba:	0e 94 36 38 	call	0x706c	; 0x706c <_ZplRK15StringSumHelperRK6String>
    3fbe:	bc 01       	movw	r22, r24
    3fc0:	c7 01       	movw	r24, r14
    3fc2:	0e 94 81 30 	call	0x6102	; 0x6102 <_ZN5Print5printERK6String>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    3fc6:	ce 01       	movw	r24, r28
    3fc8:	01 96       	adiw	r24, 0x01	; 1
    3fca:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN6StringD1Ev>
		}
		break;
	}
}
    3fce:	68 96       	adiw	r28, 0x18	; 24
    3fd0:	0f b6       	in	r0, 0x3f	; 63
    3fd2:	f8 94       	cli
    3fd4:	de bf       	out	0x3e, r29	; 62
    3fd6:	0f be       	out	0x3f, r0	; 63
    3fd8:	cd bf       	out	0x3d, r28	; 61
    3fda:	df 91       	pop	r29
    3fdc:	cf 91       	pop	r28
    3fde:	1f 91       	pop	r17
    3fe0:	0f 91       	pop	r16
    3fe2:	ff 90       	pop	r15
    3fe4:	ef 90       	pop	r14
    3fe6:	08 95       	ret

00003fe8 <_ZN13EZUI_PageItem10ItemSelectEP4EZUI>:

//Item Select
void EZUI_PageItem::ItemSelect(EZUI *UI){
    3fe8:	cf 93       	push	r28
    3fea:	df 93       	push	r29
    3fec:	eb 01       	movw	r28, r22
	switch (Type) {
    3fee:	fc 01       	movw	r30, r24
    3ff0:	22 81       	ldd	r18, Z+2	; 0x02
    3ff2:	22 31       	cpi	r18, 0x12	; 18
    3ff4:	19 f0       	breq	.+6      	; 0x3ffc <_ZN13EZUI_PageItem10ItemSelectEP4EZUI+0x14>
    3ff6:	23 31       	cpi	r18, 0x13	; 19
    3ff8:	49 f0       	breq	.+18     	; 0x400c <_ZN13EZUI_PageItem10ItemSelectEP4EZUI+0x24>
    3ffa:	0e c0       	rjmp	.+28     	; 0x4018 <_ZN13EZUI_PageItem10ItemSelectEP4EZUI+0x30>
		case(ToggleOption):
			EZUI_Control_ToggleOption * TglOpt;
			TglOpt = (EZUI_Control_ToggleOption *)valRef;
			TglOpt->Toggle();
    3ffc:	fc 01       	movw	r30, r24
    3ffe:	83 81       	ldd	r24, Z+3	; 0x03
    4000:	94 81       	ldd	r25, Z+4	; 0x04
    4002:	0e 94 b5 07 	call	0xf6a	; 0xf6a <_ZN25EZUI_Control_ToggleOption6ToggleEv>
			UI->display();
    4006:	ce 01       	movw	r24, r28
    4008:	a8 d0       	rcall	.+336    	; 0x415a <_ZN4EZUI7displayEv>
			break;
    400a:	1d c0       	rjmp	.+58     	; 0x4046 <_ZN13EZUI_PageItem10ItemSelectEP4EZUI+0x5e>
		case(Link):
			//Serial.print("***************************Following Link***************************");
			EZUI_Control_Link * LnkOpt;
			LnkOpt = (EZUI_Control_Link*)valRef;
			LnkOpt->FollowLink(UI);
    400c:	fc 01       	movw	r30, r24
    400e:	83 81       	ldd	r24, Z+3	; 0x03
    4010:	94 81       	ldd	r25, Z+4	; 0x04
    4012:	0e 94 29 07 	call	0xe52	; 0xe52 <_ZN17EZUI_Control_Link10FollowLinkEP4EZUI>
			break;
    4016:	17 c0       	rjmp	.+46     	; 0x4046 <_ZN13EZUI_PageItem10ItemSelectEP4EZUI+0x5e>
		default:
			UI->LCD->clear();
    4018:	8e 85       	ldd	r24, Y+14	; 0x0e
    401a:	9f 85       	ldd	r25, Y+15	; 0x0f
    401c:	72 d6       	rcall	.+3300   	; 0x4d02 <_ZN3LCD5clearEv>
			UI->LCD->println("ERROR!:");
    401e:	66 ed       	ldi	r22, 0xD6	; 214
    4020:	74 e0       	ldi	r23, 0x04	; 4
    4022:	8e 85       	ldd	r24, Y+14	; 0x0e
    4024:	9f 85       	ldd	r25, Y+15	; 0x0f
    4026:	0e 94 ca 30 	call	0x6194	; 0x6194 <_ZN5Print7printlnEPKc>
			UI->LCD->println("Menu Type not yet Supported");
    402a:	6e ed       	ldi	r22, 0xDE	; 222
    402c:	74 e0       	ldi	r23, 0x04	; 4
    402e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4030:	9f 85       	ldd	r25, Y+15	; 0x0f
    4032:	0e 94 ca 30 	call	0x6194	; 0x6194 <_ZN5Print7printlnEPKc>
			delay(3000);
    4036:	68 eb       	ldi	r22, 0xB8	; 184
    4038:	7b e0       	ldi	r23, 0x0B	; 11
    403a:	80 e0       	ldi	r24, 0x00	; 0
    403c:	90 e0       	ldi	r25, 0x00	; 0
    403e:	0e 94 74 35 	call	0x6ae8	; 0x6ae8 <delay>
			UI->display();
    4042:	ce 01       	movw	r24, r28
    4044:	8a d0       	rcall	.+276    	; 0x415a <_ZN4EZUI7displayEv>
			break;
	}
    4046:	df 91       	pop	r29
    4048:	cf 91       	pop	r28
    404a:	08 95       	ret

0000404c <_ZN4EZUI15EncoderDblClickEv>:

EZUI::EZUI(String _Name){
	Name = _Name;
}

EZUI::~EZUI(){
    404c:	08 95       	ret

0000404e <_ZN4EZUI12EncoderClickEv>:
    404e:	bc 01       	movw	r22, r24
    4050:	fc 01       	movw	r30, r24
    4052:	80 81       	ld	r24, Z
    4054:	91 81       	ldd	r25, Z+1	; 0x01
    4056:	00 97       	sbiw	r24, 0x00	; 0
    4058:	19 f0       	breq	.+6      	; 0x4060 <_ZN4EZUI12EncoderClickEv+0x12>
    405a:	0c 94 f3 15 	jmp	0x2be6	; 0x2be6 <_ZN9EZUI_Menu10selectItemEP4EZUI>
    405e:	08 95       	ret
    4060:	fb 01       	movw	r30, r22
    4062:	82 81       	ldd	r24, Z+2	; 0x02
    4064:	93 81       	ldd	r25, Z+3	; 0x03
    4066:	00 97       	sbiw	r24, 0x00	; 0
    4068:	09 f0       	breq	.+2      	; 0x406c <_ZN4EZUI12EncoderClickEv+0x1e>
    406a:	dc cb       	rjmp	.-2120   	; 0x3824 <_ZN9EZUI_Page10selectItemEP4EZUI>
    406c:	08 95       	ret

0000406e <_ZN4EZUI16EncoderIncrementEv>:
    406e:	cf 93       	push	r28
    4070:	df 93       	push	r29
    4072:	ec 01       	movw	r28, r24
    4074:	88 81       	ld	r24, Y
    4076:	99 81       	ldd	r25, Y+1	; 0x01
    4078:	00 97       	sbiw	r24, 0x00	; 0
    407a:	11 f0       	breq	.+4      	; 0x4080 <_ZN4EZUI16EncoderIncrementEv+0x12>
    407c:	0e 94 a7 14 	call	0x294e	; 0x294e <_ZN9EZUI_Menu8nextItemEv>
    4080:	8a 81       	ldd	r24, Y+2	; 0x02
    4082:	9b 81       	ldd	r25, Y+3	; 0x03
    4084:	00 97       	sbiw	r24, 0x00	; 0
    4086:	09 f0       	breq	.+2      	; 0x408a <_ZN4EZUI16EncoderIncrementEv+0x1c>
    4088:	9d dd       	rcall	.-1222   	; 0x3bc4 <_ZN9EZUI_Page8nextItemEv>
    408a:	df 91       	pop	r29
    408c:	cf 91       	pop	r28
    408e:	08 95       	ret

00004090 <_ZN4EZUI16EncoderDecrementEv>:
    4090:	fc 01       	movw	r30, r24
    4092:	80 81       	ld	r24, Z
    4094:	91 81       	ldd	r25, Z+1	; 0x01
    4096:	00 97       	sbiw	r24, 0x00	; 0
    4098:	11 f0       	breq	.+4      	; 0x409e <_ZN4EZUI16EncoderDecrementEv+0xe>
    409a:	0c 94 81 14 	jmp	0x2902	; 0x2902 <_ZN9EZUI_Menu8prevItemEv>
    409e:	08 95       	ret

000040a0 <_ZN4EZUIC1E6String>:
    40a0:	ef 92       	push	r14
    40a2:	ff 92       	push	r15
    40a4:	0f 93       	push	r16
    40a6:	1f 93       	push	r17
    40a8:	cf 93       	push	r28
    40aa:	df 93       	push	r29
    40ac:	ec 01       	movw	r28, r24
    40ae:	7b 01       	movw	r14, r22
    40b0:	19 82       	std	Y+1, r1	; 0x01
    40b2:	18 82       	st	Y, r1
    40b4:	1b 82       	std	Y+3, r1	; 0x03
    40b6:	1a 82       	std	Y+2, r1	; 0x02
    40b8:	8c 01       	movw	r16, r24
    40ba:	0c 5f       	subi	r16, 0xFC	; 252
    40bc:	1f 4f       	sbci	r17, 0xFF	; 255
    40be:	61 e6       	ldi	r22, 0x61	; 97
    40c0:	76 e0       	ldi	r23, 0x06	; 6
    40c2:	c8 01       	movw	r24, r16
    40c4:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
    40c8:	1b 86       	std	Y+11, r1	; 0x0b
    40ca:	1a 86       	std	Y+10, r1	; 0x0a
    40cc:	1d 86       	std	Y+13, r1	; 0x0d
    40ce:	1c 86       	std	Y+12, r1	; 0x0c
    40d0:	b7 01       	movw	r22, r14
    40d2:	c8 01       	movw	r24, r16
    40d4:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <_ZN6StringaSERKS_>
    40d8:	df 91       	pop	r29
    40da:	cf 91       	pop	r28
    40dc:	1f 91       	pop	r17
    40de:	0f 91       	pop	r16
    40e0:	ff 90       	pop	r15
    40e2:	ef 90       	pop	r14
    40e4:	08 95       	ret

000040e6 <_ZN4EZUI14attatchEncoderEP22ClickEncoderWithEvents>:
}

void EZUI::attatchEncoder(ClickEncoderWithEvents *_Encoder){
    40e6:	fc 01       	movw	r30, r24
	Encoder = _Encoder;
    40e8:	71 8b       	std	Z+17, r23	; 0x11
    40ea:	60 8b       	std	Z+16, r22	; 0x10
	//Encoder->ClearHandlers();
	Encoder->UI = this;
    40ec:	db 01       	movw	r26, r22
    40ee:	1f 96       	adiw	r26, 0x0f	; 15
    40f0:	9c 93       	st	X, r25
    40f2:	8e 93       	st	-X, r24
    40f4:	1e 97       	sbiw	r26, 0x0e	; 14
	Encoder->ClickHandler = &EZUI::EncoderClick;
    40f6:	a0 89       	ldd	r26, Z+16	; 0x10
    40f8:	b1 89       	ldd	r27, Z+17	; 0x11
    40fa:	87 e2       	ldi	r24, 0x27	; 39
    40fc:	90 e2       	ldi	r25, 0x20	; 32
    40fe:	51 96       	adiw	r26, 0x11	; 17
    4100:	9c 93       	st	X, r25
    4102:	8e 93       	st	-X, r24
    4104:	50 97       	sbiw	r26, 0x10	; 16
    4106:	53 96       	adiw	r26, 0x13	; 19
    4108:	1c 92       	st	X, r1
    410a:	1e 92       	st	-X, r1
    410c:	52 97       	sbiw	r26, 0x12	; 18
	Encoder->DblClickHandler = &EZUI::EncoderDblClick;
    410e:	a0 89       	ldd	r26, Z+16	; 0x10
    4110:	b1 89       	ldd	r27, Z+17	; 0x11
    4112:	86 e2       	ldi	r24, 0x26	; 38
    4114:	90 e2       	ldi	r25, 0x20	; 32
    4116:	55 96       	adiw	r26, 0x15	; 21
    4118:	9c 93       	st	X, r25
    411a:	8e 93       	st	-X, r24
    411c:	54 97       	sbiw	r26, 0x14	; 20
    411e:	57 96       	adiw	r26, 0x17	; 23
    4120:	1c 92       	st	X, r1
    4122:	1e 92       	st	-X, r1
    4124:	56 97       	sbiw	r26, 0x16	; 22
	Encoder->IncrementHandler = &EZUI::EncoderIncrement;
    4126:	a0 89       	ldd	r26, Z+16	; 0x10
    4128:	b1 89       	ldd	r27, Z+17	; 0x11
    412a:	87 e3       	ldi	r24, 0x37	; 55
    412c:	90 e2       	ldi	r25, 0x20	; 32
    412e:	59 96       	adiw	r26, 0x19	; 25
    4130:	9c 93       	st	X, r25
    4132:	8e 93       	st	-X, r24
    4134:	58 97       	sbiw	r26, 0x18	; 24
    4136:	5b 96       	adiw	r26, 0x1b	; 27
    4138:	1c 92       	st	X, r1
    413a:	1e 92       	st	-X, r1
    413c:	5a 97       	sbiw	r26, 0x1a	; 26
	Encoder->DecrementHandler = &EZUI::EncoderDecrement;
    413e:	00 88       	ldd	r0, Z+16	; 0x10
    4140:	f1 89       	ldd	r31, Z+17	; 0x11
    4142:	e0 2d       	mov	r30, r0
    4144:	88 e4       	ldi	r24, 0x48	; 72
    4146:	90 e2       	ldi	r25, 0x20	; 32
    4148:	95 8f       	std	Z+29, r25	; 0x1d
    414a:	84 8f       	std	Z+28, r24	; 0x1c
    414c:	17 8e       	std	Z+31, r1	; 0x1f
    414e:	16 8e       	std	Z+30, r1	; 0x1e
    4150:	08 95       	ret

00004152 <_ZN4EZUI10attatchLCDEP17LiquidCrystal_I2C>:
}

void EZUI::attatchLCD( LiquidCrystal_I2C *_LCD ){
	LCD = _LCD;
    4152:	fc 01       	movw	r30, r24
    4154:	77 87       	std	Z+15, r23	; 0x0f
    4156:	66 87       	std	Z+14, r22	; 0x0e
    4158:	08 95       	ret

0000415a <_ZN4EZUI7displayEv>:
	if (!( CurrentMenu == NULL)){
		CurrentMenu->prevItem();
	}
}

void EZUI::display(){
    415a:	0f 93       	push	r16
    415c:	1f 93       	push	r17
    415e:	cf 93       	push	r28
    4160:	df 93       	push	r29
    4162:	ec 01       	movw	r28, r24
	//Attatch all event handlers
	if (CurrentPage != NULL){
    4164:	8a 81       	ldd	r24, Y+2	; 0x02
    4166:	9b 81       	ldd	r25, Y+3	; 0x03
    4168:	89 2b       	or	r24, r25
    416a:	59 f0       	breq	.+22     	; 0x4182 <_ZN4EZUI7displayEv+0x28>
		lastDisplayMillis = millis();
    416c:	0e 94 42 35 	call	0x6a84	; 0x6a84 <millis>
    4170:	6a 8b       	std	Y+18, r22	; 0x12
    4172:	7b 8b       	std	Y+19, r23	; 0x13
    4174:	8c 8b       	std	Y+20, r24	; 0x14
    4176:	9d 8b       	std	Y+21, r25	; 0x15
		CurrentPage->display(this);
    4178:	be 01       	movw	r22, r28
    417a:	8a 81       	ldd	r24, Y+2	; 0x02
    417c:	9b 81       	ldd	r25, Y+3	; 0x03
    417e:	a8 da       	rcall	.-2736   	; 0x36d0 <_ZN9EZUI_Page7displayEP4EZUI>
    4180:	36 c0       	rjmp	.+108    	; 0x41ee <_ZN4EZUI7displayEv+0x94>
	}else if (CurrentMenu != NULL){
    4182:	88 81       	ld	r24, Y
    4184:	99 81       	ldd	r25, Y+1	; 0x01
    4186:	89 2b       	or	r24, r25
    4188:	61 f0       	breq	.+24     	; 0x41a2 <_ZN4EZUI7displayEv+0x48>
		lastDisplayMillis = millis();
    418a:	0e 94 42 35 	call	0x6a84	; 0x6a84 <millis>
    418e:	6a 8b       	std	Y+18, r22	; 0x12
    4190:	7b 8b       	std	Y+19, r23	; 0x13
    4192:	8c 8b       	std	Y+20, r24	; 0x14
    4194:	9d 8b       	std	Y+21, r25	; 0x15
		CurrentMenu->display(this);
    4196:	be 01       	movw	r22, r28
    4198:	88 81       	ld	r24, Y
    419a:	99 81       	ldd	r25, Y+1	; 0x01
    419c:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <_ZN9EZUI_Menu7displayEP4EZUI>
    41a0:	26 c0       	rjmp	.+76     	; 0x41ee <_ZN4EZUI7displayEv+0x94>
	}else{
		//display nothing
		if((millis() - lastDisplayMillis) > 3000){
    41a2:	0e 94 42 35 	call	0x6a84	; 0x6a84 <millis>
    41a6:	0a 89       	ldd	r16, Y+18	; 0x12
    41a8:	1b 89       	ldd	r17, Y+19	; 0x13
    41aa:	2c 89       	ldd	r18, Y+20	; 0x14
    41ac:	3d 89       	ldd	r19, Y+21	; 0x15
    41ae:	dc 01       	movw	r26, r24
    41b0:	cb 01       	movw	r24, r22
    41b2:	80 1b       	sub	r24, r16
    41b4:	91 0b       	sbc	r25, r17
    41b6:	a2 0b       	sbc	r26, r18
    41b8:	b3 0b       	sbc	r27, r19
    41ba:	89 3b       	cpi	r24, 0xB9	; 185
    41bc:	9b 40       	sbci	r25, 0x0B	; 11
    41be:	a1 05       	cpc	r26, r1
    41c0:	b1 05       	cpc	r27, r1
    41c2:	a8 f0       	brcs	.+42     	; 0x41ee <_ZN4EZUI7displayEv+0x94>
			lastDisplayMillis = millis();
    41c4:	0e 94 42 35 	call	0x6a84	; 0x6a84 <millis>
    41c8:	6a 8b       	std	Y+18, r22	; 0x12
    41ca:	7b 8b       	std	Y+19, r23	; 0x13
    41cc:	8c 8b       	std	Y+20, r24	; 0x14
    41ce:	9d 8b       	std	Y+21, r25	; 0x15
			LCD->clear();
    41d0:	8e 85       	ldd	r24, Y+14	; 0x0e
    41d2:	9f 85       	ldd	r25, Y+15	; 0x0f
    41d4:	96 d5       	rcall	.+2860   	; 0x4d02 <_ZN3LCD5clearEv>
			LCD->println("ERROR!");
    41d6:	6d e1       	ldi	r22, 0x1D	; 29
    41d8:	75 e0       	ldi	r23, 0x05	; 5
    41da:	8e 85       	ldd	r24, Y+14	; 0x0e
    41dc:	9f 85       	ldd	r25, Y+15	; 0x0f
    41de:	0e 94 ca 30 	call	0x6194	; 0x6194 <_ZN5Print7printlnEPKc>
			LCD->println("  No Page or Menu");
    41e2:	64 e2       	ldi	r22, 0x24	; 36
    41e4:	75 e0       	ldi	r23, 0x05	; 5
    41e6:	8e 85       	ldd	r24, Y+14	; 0x0e
    41e8:	9f 85       	ldd	r25, Y+15	; 0x0f
    41ea:	0e 94 ca 30 	call	0x6194	; 0x6194 <_ZN5Print7printlnEPKc>
		}
	}
}
    41ee:	df 91       	pop	r29
    41f0:	cf 91       	pop	r28
    41f2:	1f 91       	pop	r17
    41f4:	0f 91       	pop	r16
    41f6:	08 95       	ret

000041f8 <_ZN4EZUI10setDisplayEP9EZUI_Menu>:

void EZUI::setDisplay(EZUI_Menu *Menu){
	CurrentMenu = Menu;
    41f8:	fc 01       	movw	r30, r24
    41fa:	71 83       	std	Z+1, r23	; 0x01
    41fc:	60 83       	st	Z, r22
	CurrentPage = NULL;
    41fe:	13 82       	std	Z+3, r1	; 0x03
    4200:	12 82       	std	Z+2, r1	; 0x02
    4202:	08 95       	ret

00004204 <_ZN4EZUI10setDisplayEP9EZUI_Page>:
		Serial.println( "  " + Name + "-UI-" + "-DisplayMenu->" + CurrentMenu->Name);
	#endif
}

void EZUI::setDisplay(EZUI_Page *Page){
	CurrentMenu = NULL;
    4204:	fc 01       	movw	r30, r24
    4206:	11 82       	std	Z+1, r1	; 0x01
    4208:	10 82       	st	Z, r1
	CurrentPage = Page;
    420a:	73 83       	std	Z+3, r23	; 0x03
    420c:	62 83       	std	Z+2, r22	; 0x02
    420e:	08 95       	ret

00004210 <_ZN9Executive11exec_frame1Ev>:

void Executive::exec_frame1(){
	//IO
	
	//Encoders
	MAIN_ENC->Read();
    4210:	80 91 c0 06 	lds	r24, 0x06C0
    4214:	90 91 c1 06 	lds	r25, 0x06C1
    4218:	0e 94 0d 12 	call	0x241a	; 0x241a <_ZN22ClickEncoderWithEvents4ReadEv>
	MLT_ENC->Read();
    421c:	80 91 8a 06 	lds	r24, 0x068A
    4220:	90 91 8b 06 	lds	r25, 0x068B
    4224:	0e 94 0d 12 	call	0x241a	; 0x241a <_ZN22ClickEncoderWithEvents4ReadEv>
	HLT_ENC->Read();
    4228:	80 91 a6 06 	lds	r24, 0x06A6
    422c:	90 91 a7 06 	lds	r25, 0x06A7
    4230:	0e 94 0d 12 	call	0x241a	; 0x241a <_ZN22ClickEncoderWithEvents4ReadEv>
	BK_ENC->Read();
    4234:	80 91 70 06 	lds	r24, 0x0670
    4238:	90 91 71 06 	lds	r25, 0x0671
    423c:	0e 94 0d 12 	call	0x241a	; 0x241a <_ZN22ClickEncoderWithEvents4ReadEv>
	
	//Analog Ins
	ANIN_A0.update();
    4240:	80 ea       	ldi	r24, 0xA0	; 160
    4242:	98 e0       	ldi	r25, 0x08	; 8
    4244:	0e 94 4f 04 	call	0x89e	; 0x89e <_ZN8AnalogIn6updateEv>
	ANIN_A1.update();
    4248:	80 e8       	ldi	r24, 0x80	; 128
    424a:	98 e0       	ldi	r25, 0x08	; 8
    424c:	0e 94 4f 04 	call	0x89e	; 0x89e <_ZN8AnalogIn6updateEv>
	ANIN_A2.update();
    4250:	80 e6       	ldi	r24, 0x60	; 96
    4252:	98 e0       	ldi	r25, 0x08	; 8
    4254:	0e 94 4f 04 	call	0x89e	; 0x89e <_ZN8AnalogIn6updateEv>
	ANIN_A3.update();
    4258:	80 e4       	ldi	r24, 0x40	; 64
    425a:	98 e0       	ldi	r25, 0x08	; 8
    425c:	0e 94 4f 04 	call	0x89e	; 0x89e <_ZN8AnalogIn6updateEv>
	ANIN_A4.update();
    4260:	80 e2       	ldi	r24, 0x20	; 32
    4262:	98 e0       	ldi	r25, 0x08	; 8
    4264:	0e 94 4f 04 	call	0x89e	; 0x89e <_ZN8AnalogIn6updateEv>
	ANIN_A5.update();
    4268:	80 e0       	ldi	r24, 0x00	; 0
    426a:	98 e0       	ldi	r25, 0x08	; 8
    426c:	0e 94 4f 04 	call	0x89e	; 0x89e <_ZN8AnalogIn6updateEv>
	ANIN_A6.update();
    4270:	80 ee       	ldi	r24, 0xE0	; 224
    4272:	97 e0       	ldi	r25, 0x07	; 7
    4274:	0e 94 4f 04 	call	0x89e	; 0x89e <_ZN8AnalogIn6updateEv>
	ANIN_A7.update();
    4278:	80 ec       	ldi	r24, 0xC0	; 192
    427a:	97 e0       	ldi	r25, 0x07	; 7
    427c:	0e 94 4f 04 	call	0x89e	; 0x89e <_ZN8AnalogIn6updateEv>
	ANIN_A8.update();
    4280:	80 ea       	ldi	r24, 0xA0	; 160
    4282:	97 e0       	ldi	r25, 0x07	; 7
    4284:	0e 94 4f 04 	call	0x89e	; 0x89e <_ZN8AnalogIn6updateEv>
	ANIN_A9.update();
    4288:	80 e8       	ldi	r24, 0x80	; 128
    428a:	97 e0       	ldi	r25, 0x07	; 7
    428c:	0e 94 4f 04 	call	0x89e	; 0x89e <_ZN8AnalogIn6updateEv>
	ANIN_A10.update();
    4290:	80 e6       	ldi	r24, 0x60	; 96
    4292:	97 e0       	ldi	r25, 0x07	; 7
    4294:	0e 94 4f 04 	call	0x89e	; 0x89e <_ZN8AnalogIn6updateEv>
	ANIN_A11.update();
    4298:	80 e4       	ldi	r24, 0x40	; 64
    429a:	97 e0       	ldi	r25, 0x07	; 7
    429c:	0e 94 4f 04 	call	0x89e	; 0x89e <_ZN8AnalogIn6updateEv>
	ANIN_A12.update();
    42a0:	80 e2       	ldi	r24, 0x20	; 32
    42a2:	97 e0       	ldi	r25, 0x07	; 7
    42a4:	0e 94 4f 04 	call	0x89e	; 0x89e <_ZN8AnalogIn6updateEv>
	ANIN_A13.update();
    42a8:	80 e0       	ldi	r24, 0x00	; 0
    42aa:	97 e0       	ldi	r25, 0x07	; 7
    42ac:	0e 94 4f 04 	call	0x89e	; 0x89e <_ZN8AnalogIn6updateEv>
	ANIN_A14.update();
    42b0:	80 ee       	ldi	r24, 0xE0	; 224
    42b2:	96 e0       	ldi	r25, 0x06	; 6
    42b4:	0c 94 4f 04 	jmp	0x89e	; 0x89e <_ZN8AnalogIn6updateEv>
    42b8:	08 95       	ret

000042ba <_ZN9Executive11exec_frame2Ev>:

void Executive::exec_frame2(){
	//Calculate Parameters
	
	//Update the RTD values
	HLT_RTD_BP->Update();
    42ba:	80 91 a4 06 	lds	r24, 0x06A4
    42be:	90 91 a5 06 	lds	r25, 0x06A5
    42c2:	33 c2       	rjmp	.+1126   	; 0x472a <_ZN16WheatstoneBridge6UpdateEv>
    42c4:	08 95       	ret

000042c6 <_ZN9Executive11exec_frame3Ev>:
	
}

void Executive::exec_frame3(){
	//Update the UI
	MAIN_UI->display();
    42c6:	80 91 d2 09 	lds	r24, 0x09D2
    42ca:	90 91 d3 09 	lds	r25, 0x09D3
    42ce:	45 df       	rcall	.-374    	; 0x415a <_ZN4EZUI7displayEv>
	MLT_UI->display();
    42d0:	80 91 d4 09 	lds	r24, 0x09D4
    42d4:	90 91 d5 09 	lds	r25, 0x09D5
    42d8:	40 df       	rcall	.-384    	; 0x415a <_ZN4EZUI7displayEv>
	HLT_UI->display();
    42da:	80 91 d0 09 	lds	r24, 0x09D0
    42de:	90 91 d1 09 	lds	r25, 0x09D1
    42e2:	3b df       	rcall	.-394    	; 0x415a <_ZN4EZUI7displayEv>
	BK_UI->display();
    42e4:	80 91 6e 06 	lds	r24, 0x066E
    42e8:	90 91 6f 06 	lds	r25, 0x066F
    42ec:	36 cf       	rjmp	.-404    	; 0x415a <_ZN4EZUI7displayEv>
    42ee:	08 95       	ret

000042f0 <_ZN9Executive3runEv>:
 * ----------------------------------------------------------------
 */

#include "Executive.h"

void Executive::run(){
    42f0:	8f 92       	push	r8
    42f2:	9f 92       	push	r9
    42f4:	af 92       	push	r10
    42f6:	bf 92       	push	r11
    42f8:	cf 92       	push	r12
    42fa:	df 92       	push	r13
    42fc:	ef 92       	push	r14
    42fe:	ff 92       	push	r15
    4300:	0f 93       	push	r16
    4302:	1f 93       	push	r17
    4304:	cf 93       	push	r28
    4306:	df 93       	push	r29
    4308:	ec 01       	movw	r28, r24
	frame_count++;
    430a:	8c 81       	ldd	r24, Y+4	; 0x04
    430c:	9d 81       	ldd	r25, Y+5	; 0x05
    430e:	01 96       	adiw	r24, 0x01	; 1
    4310:	9d 83       	std	Y+5, r25	; 0x05
    4312:	8c 83       	std	Y+4, r24	; 0x04
	time = millis();
    4314:	0e 94 42 35 	call	0x6a84	; 0x6a84 <millis>
    4318:	68 83       	st	Y, r22
    431a:	79 83       	std	Y+1, r23	; 0x01
    431c:	8a 83       	std	Y+2, r24	; 0x02
    431e:	9b 83       	std	Y+3, r25	; 0x03
	exec_frame1();
    4320:	ce 01       	movw	r24, r28
    4322:	76 df       	rcall	.-276    	; 0x4210 <_ZN9Executive11exec_frame1Ev>
	exec_frame2();
    4324:	ce 01       	movw	r24, r28
    4326:	c9 df       	rcall	.-110    	; 0x42ba <_ZN9Executive11exec_frame2Ev>
	exec_frame3();
    4328:	ce 01       	movw	r24, r28
    432a:	cd df       	rcall	.-102    	; 0x42c6 <_ZN9Executive11exec_frame3Ev>
	exec_frame4();
	
	//Execution rate
	temp_frame_count++;
    432c:	8e 81       	ldd	r24, Y+6	; 0x06
    432e:	9f 81       	ldd	r25, Y+7	; 0x07
    4330:	a8 85       	ldd	r26, Y+8	; 0x08
    4332:	b9 85       	ldd	r27, Y+9	; 0x09
    4334:	bc 01       	movw	r22, r24
    4336:	cd 01       	movw	r24, r26
    4338:	6f 5f       	subi	r22, 0xFF	; 255
    433a:	7f 4f       	sbci	r23, 0xFF	; 255
    433c:	8f 4f       	sbci	r24, 0xFF	; 255
    433e:	9f 4f       	sbci	r25, 0xFF	; 255
    4340:	6e 83       	std	Y+6, r22	; 0x06
    4342:	7f 83       	std	Y+7, r23	; 0x07
    4344:	88 87       	std	Y+8, r24	; 0x08
    4346:	99 87       	std	Y+9, r25	; 0x09
	if((time - temp_time)>3000){
    4348:	c8 80       	ld	r12, Y
    434a:	d9 80       	ldd	r13, Y+1	; 0x01
    434c:	ea 80       	ldd	r14, Y+2	; 0x02
    434e:	fb 80       	ldd	r15, Y+3	; 0x03
    4350:	0a 85       	ldd	r16, Y+10	; 0x0a
    4352:	1b 85       	ldd	r17, Y+11	; 0x0b
    4354:	2c 85       	ldd	r18, Y+12	; 0x0c
    4356:	3d 85       	ldd	r19, Y+13	; 0x0d
    4358:	c0 1a       	sub	r12, r16
    435a:	d1 0a       	sbc	r13, r17
    435c:	e2 0a       	sbc	r14, r18
    435e:	f3 0a       	sbc	r15, r19
    4360:	29 eb       	ldi	r18, 0xB9	; 185
    4362:	c2 16       	cp	r12, r18
    4364:	2b e0       	ldi	r18, 0x0B	; 11
    4366:	d2 06       	cpc	r13, r18
    4368:	e1 04       	cpc	r14, r1
    436a:	f1 04       	cpc	r15, r1
    436c:	08 f4       	brcc	.+2      	; 0x4370 <_ZN9Executive3runEv+0x80>
    436e:	5e c0       	rjmp	.+188    	; 0x442c <_ZN9Executive3runEv+0x13c>
		float Hz = (((float)temp_frame_count) / ((float)(time-temp_time)/1000));
    4370:	0e 94 62 39 	call	0x72c4	; 0x72c4 <__floatsisf>
    4374:	4b 01       	movw	r8, r22
    4376:	5c 01       	movw	r10, r24
    4378:	c7 01       	movw	r24, r14
    437a:	b6 01       	movw	r22, r12
    437c:	0e 94 60 39 	call	0x72c0	; 0x72c0 <__floatunsisf>
    4380:	20 e0       	ldi	r18, 0x00	; 0
    4382:	30 e0       	ldi	r19, 0x00	; 0
    4384:	4a e7       	ldi	r20, 0x7A	; 122
    4386:	54 e4       	ldi	r21, 0x44	; 68
    4388:	0e 94 c7 38 	call	0x718e	; 0x718e <__divsf3>
    438c:	9b 01       	movw	r18, r22
    438e:	ac 01       	movw	r20, r24
    4390:	c5 01       	movw	r24, r10
    4392:	b4 01       	movw	r22, r8
    4394:	0e 94 c7 38 	call	0x718e	; 0x718e <__divsf3>
    4398:	6b 01       	movw	r12, r22
    439a:	7c 01       	movw	r14, r24
		Serial.print("Running at ");
    439c:	66 e3       	ldi	r22, 0x36	; 54
    439e:	75 e0       	ldi	r23, 0x05	; 5
    43a0:	88 ea       	ldi	r24, 0xA8	; 168
    43a2:	9a e0       	ldi	r25, 0x0A	; 10
    43a4:	0e 94 90 30 	call	0x6120	; 0x6120 <_ZN5Print5printEPKc>
		Serial.print(Hz);
    43a8:	22 e0       	ldi	r18, 0x02	; 2
    43aa:	30 e0       	ldi	r19, 0x00	; 0
    43ac:	b7 01       	movw	r22, r14
    43ae:	a6 01       	movw	r20, r12
    43b0:	88 ea       	ldi	r24, 0xA8	; 168
    43b2:	9a e0       	ldi	r25, 0x0A	; 10
    43b4:	0e 94 b0 32 	call	0x6560	; 0x6560 <_ZN5Print5printEdi>
		Serial.print(" Hertz (");
    43b8:	62 e4       	ldi	r22, 0x42	; 66
    43ba:	75 e0       	ldi	r23, 0x05	; 5
    43bc:	88 ea       	ldi	r24, 0xA8	; 168
    43be:	9a e0       	ldi	r25, 0x0A	; 10
    43c0:	0e 94 90 30 	call	0x6120	; 0x6120 <_ZN5Print5printEPKc>
		Serial.print(temp_frame_count);
    43c4:	4e 81       	ldd	r20, Y+6	; 0x06
    43c6:	5f 81       	ldd	r21, Y+7	; 0x07
    43c8:	68 85       	ldd	r22, Y+8	; 0x08
    43ca:	79 85       	ldd	r23, Y+9	; 0x09
    43cc:	2a e0       	ldi	r18, 0x0A	; 10
    43ce:	30 e0       	ldi	r19, 0x00	; 0
    43d0:	88 ea       	ldi	r24, 0xA8	; 168
    43d2:	9a e0       	ldi	r25, 0x0A	; 10
    43d4:	0e 94 4d 31 	call	0x629a	; 0x629a <_ZN5Print5printEli>
		Serial.print(" frames / ");
    43d8:	6b e4       	ldi	r22, 0x4B	; 75
    43da:	75 e0       	ldi	r23, 0x05	; 5
    43dc:	88 ea       	ldi	r24, 0xA8	; 168
    43de:	9a e0       	ldi	r25, 0x0A	; 10
    43e0:	0e 94 90 30 	call	0x6120	; 0x6120 <_ZN5Print5printEPKc>
		Serial.print(time-temp_time);
    43e4:	48 81       	ld	r20, Y
    43e6:	59 81       	ldd	r21, Y+1	; 0x01
    43e8:	6a 81       	ldd	r22, Y+2	; 0x02
    43ea:	7b 81       	ldd	r23, Y+3	; 0x03
    43ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    43ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    43f0:	ac 85       	ldd	r26, Y+12	; 0x0c
    43f2:	bd 85       	ldd	r27, Y+13	; 0x0d
    43f4:	48 1b       	sub	r20, r24
    43f6:	59 0b       	sbc	r21, r25
    43f8:	6a 0b       	sbc	r22, r26
    43fa:	7b 0b       	sbc	r23, r27
    43fc:	2a e0       	ldi	r18, 0x0A	; 10
    43fe:	30 e0       	ldi	r19, 0x00	; 0
    4400:	88 ea       	ldi	r24, 0xA8	; 168
    4402:	9a e0       	ldi	r25, 0x0A	; 10
    4404:	0e 94 a1 31 	call	0x6342	; 0x6342 <_ZN5Print5printEmi>
		Serial.println(" ms )");
    4408:	66 e5       	ldi	r22, 0x56	; 86
    440a:	75 e0       	ldi	r23, 0x05	; 5
    440c:	88 ea       	ldi	r24, 0xA8	; 168
    440e:	9a e0       	ldi	r25, 0x0A	; 10
    4410:	0e 94 ca 30 	call	0x6194	; 0x6194 <_ZN5Print7printlnEPKc>
		
		//reset counters
		temp_time = time;
    4414:	88 81       	ld	r24, Y
    4416:	99 81       	ldd	r25, Y+1	; 0x01
    4418:	aa 81       	ldd	r26, Y+2	; 0x02
    441a:	bb 81       	ldd	r27, Y+3	; 0x03
    441c:	8a 87       	std	Y+10, r24	; 0x0a
    441e:	9b 87       	std	Y+11, r25	; 0x0b
    4420:	ac 87       	std	Y+12, r26	; 0x0c
    4422:	bd 87       	std	Y+13, r27	; 0x0d
		temp_frame_count=0;
    4424:	1e 82       	std	Y+6, r1	; 0x06
    4426:	1f 82       	std	Y+7, r1	; 0x07
    4428:	18 86       	std	Y+8, r1	; 0x08
    442a:	19 86       	std	Y+9, r1	; 0x09
	}
	
	//global::timems = time;
	//global::timsec = (float)(time/1000);
}
    442c:	df 91       	pop	r29
    442e:	cf 91       	pop	r28
    4430:	1f 91       	pop	r17
    4432:	0f 91       	pop	r16
    4434:	ff 90       	pop	r15
    4436:	ef 90       	pop	r14
    4438:	df 90       	pop	r13
    443a:	cf 90       	pop	r12
    443c:	bf 90       	pop	r11
    443e:	af 90       	pop	r10
    4440:	9f 90       	pop	r9
    4442:	8f 90       	pop	r8
    4444:	08 95       	ret

00004446 <_ZN5LUT1DC1EiPKfS1_>:
	memcpy(&_x, &xvals, sizeof xvals);

	//Copy the z data
	float zvals_temp[lenx];
	_z=zvals_temp;
	memcpy(&_z, &zvals, sizeof zvals);
    4446:	fc 01       	movw	r30, r24
    4448:	75 83       	std	Z+5, r23	; 0x05
    444a:	64 83       	std	Z+4, r22	; 0x04
    444c:	51 83       	std	Z+1, r21	; 0x01
    444e:	40 83       	st	Z, r20
    4450:	33 83       	std	Z+3, r19	; 0x03
    4452:	22 83       	std	Z+2, r18	; 0x02
    4454:	08 95       	ret

00004456 <_ZN5LUT1D6lookupEf>:
}

//---lookup-----

float LUT1D::lookup(float xval){
    4456:	2f 92       	push	r2
    4458:	3f 92       	push	r3
    445a:	4f 92       	push	r4
    445c:	5f 92       	push	r5
    445e:	6f 92       	push	r6
    4460:	7f 92       	push	r7
    4462:	8f 92       	push	r8
    4464:	9f 92       	push	r9
    4466:	af 92       	push	r10
    4468:	bf 92       	push	r11
    446a:	cf 92       	push	r12
    446c:	df 92       	push	r13
    446e:	ef 92       	push	r14
    4470:	ff 92       	push	r15
    4472:	0f 93       	push	r16
    4474:	1f 93       	push	r17
    4476:	cf 93       	push	r28
    4478:	df 93       	push	r29
    447a:	00 d0       	rcall	.+0      	; 0x447c <_ZN5LUT1D6lookupEf+0x26>
    447c:	1f 92       	push	r1
    447e:	cd b7       	in	r28, 0x3d	; 61
    4480:	de b7       	in	r29, 0x3e	; 62
    4482:	3c 01       	movw	r6, r24
    4484:	4a 01       	movw	r8, r20
    4486:	5b 01       	movw	r10, r22
  if( xval <= _x[0]){
    4488:	dc 01       	movw	r26, r24
    448a:	0d 91       	ld	r16, X+
    448c:	1c 91       	ld	r17, X
    448e:	9a 01       	movw	r18, r20
    4490:	ab 01       	movw	r20, r22
    4492:	f8 01       	movw	r30, r16
    4494:	60 81       	ld	r22, Z
    4496:	71 81       	ldd	r23, Z+1	; 0x01
    4498:	82 81       	ldd	r24, Z+2	; 0x02
    449a:	93 81       	ldd	r25, Z+3	; 0x03
    449c:	0e 94 12 3a 	call	0x7424	; 0x7424 <__gesf2>
    44a0:	88 23       	and	r24, r24
    44a2:	54 f0       	brlt	.+20     	; 0x44b8 <_ZN5LUT1D6lookupEf+0x62>
     return _z[0]; 
    44a4:	d3 01       	movw	r26, r6
    44a6:	12 96       	adiw	r26, 0x02	; 2
    44a8:	ed 91       	ld	r30, X+
    44aa:	fc 91       	ld	r31, X
    44ac:	13 97       	sbiw	r26, 0x03	; 3
    44ae:	60 81       	ld	r22, Z
    44b0:	71 81       	ldd	r23, Z+1	; 0x01
    44b2:	82 81       	ldd	r24, Z+2	; 0x02
    44b4:	93 81       	ldd	r25, Z+3	; 0x03
    44b6:	a5 c0       	rjmp	.+330    	; 0x4602 <_ZN5LUT1D6lookupEf+0x1ac>
  }else{
    if( xval >= _x[_lenx-1]){
    44b8:	f3 01       	movw	r30, r6
    44ba:	c4 80       	ldd	r12, Z+4	; 0x04
    44bc:	d5 80       	ldd	r13, Z+5	; 0x05
    44be:	76 01       	movw	r14, r12
    44c0:	f1 e0       	ldi	r31, 0x01	; 1
    44c2:	ef 1a       	sub	r14, r31
    44c4:	f0 ec       	ldi	r31, 0xC0	; 192
    44c6:	ff 0a       	sbc	r15, r31
    44c8:	ee 0c       	add	r14, r14
    44ca:	ff 1c       	adc	r15, r15
    44cc:	ee 0c       	add	r14, r14
    44ce:	ff 1c       	adc	r15, r15
    44d0:	f8 01       	movw	r30, r16
    44d2:	ee 0d       	add	r30, r14
    44d4:	ff 1d       	adc	r31, r15
    44d6:	20 81       	ld	r18, Z
    44d8:	31 81       	ldd	r19, Z+1	; 0x01
    44da:	42 81       	ldd	r20, Z+2	; 0x02
    44dc:	53 81       	ldd	r21, Z+3	; 0x03
    44de:	c5 01       	movw	r24, r10
    44e0:	b4 01       	movw	r22, r8
    44e2:	0e 94 12 3a 	call	0x7424	; 0x7424 <__gesf2>
    44e6:	88 23       	and	r24, r24
    44e8:	4c f4       	brge	.+18     	; 0x44fc <_ZN5LUT1D6lookupEf+0xa6>
      return _z[_lenx-1];
    }else{
      // In the Middel of Table, interpolate to find value.
      int ix = 0;
      for ( ix = 0; ix < _lenx - 1 ; ix++ )
    44ea:	21 e0       	ldi	r18, 0x01	; 1
    44ec:	c2 1a       	sub	r12, r18
    44ee:	d1 08       	sbc	r13, r1
    44f0:	1c 14       	cp	r1, r12
    44f2:	1d 04       	cpc	r1, r13
    44f4:	84 f0       	brlt	.+32     	; 0x4516 <_ZN5LUT1D6lookupEf+0xc0>
    44f6:	e1 2c       	mov	r14, r1
    44f8:	f1 2c       	mov	r15, r1
    44fa:	2d c0       	rjmp	.+90     	; 0x4556 <_ZN5LUT1D6lookupEf+0x100>
float LUT1D::lookup(float xval){
  if( xval <= _x[0]){
     return _z[0]; 
  }else{
    if( xval >= _x[_lenx-1]){
      return _z[_lenx-1];
    44fc:	d3 01       	movw	r26, r6
    44fe:	12 96       	adiw	r26, 0x02	; 2
    4500:	8d 91       	ld	r24, X+
    4502:	9c 91       	ld	r25, X
    4504:	13 97       	sbiw	r26, 0x03	; 3
    4506:	8e 0d       	add	r24, r14
    4508:	9f 1d       	adc	r25, r15
    450a:	fc 01       	movw	r30, r24
    450c:	60 81       	ld	r22, Z
    450e:	71 81       	ldd	r23, Z+1	; 0x01
    4510:	82 81       	ldd	r24, Z+2	; 0x02
    4512:	93 81       	ldd	r25, Z+3	; 0x03
    4514:	76 c0       	rjmp	.+236    	; 0x4602 <_ZN5LUT1D6lookupEf+0x1ac>
    4516:	28 01       	movw	r4, r16
    }else{
      // In the Middel of Table, interpolate to find value.
      int ix = 0;
      for ( ix = 0; ix < _lenx - 1 ; ix++ )
    4518:	e1 2c       	mov	r14, r1
    451a:	f1 2c       	mov	r15, r1
      {
          //Find the location we are in the table.
          if( (xval >= _x[ix]) && (xval < _x[ix+1])){
    451c:	d2 01       	movw	r26, r4
    451e:	2d 91       	ld	r18, X+
    4520:	3d 91       	ld	r19, X+
    4522:	4d 91       	ld	r20, X+
    4524:	5d 91       	ld	r21, X+
    4526:	2d 01       	movw	r4, r26
    4528:	c5 01       	movw	r24, r10
    452a:	b4 01       	movw	r22, r8
    452c:	0e 94 12 3a 	call	0x7424	; 0x7424 <__gesf2>
    4530:	88 23       	and	r24, r24
    4532:	5c f0       	brlt	.+22     	; 0x454a <_ZN5LUT1D6lookupEf+0xf4>
    4534:	f2 01       	movw	r30, r4
    4536:	20 81       	ld	r18, Z
    4538:	31 81       	ldd	r19, Z+1	; 0x01
    453a:	42 81       	ldd	r20, Z+2	; 0x02
    453c:	53 81       	ldd	r21, Z+3	; 0x03
    453e:	c5 01       	movw	r24, r10
    4540:	b4 01       	movw	r22, r8
    4542:	0e 94 c3 38 	call	0x7186	; 0x7186 <__cmpsf2>
    4546:	88 23       	and	r24, r24
    4548:	34 f0       	brlt	.+12     	; 0x4556 <_ZN5LUT1D6lookupEf+0x100>
    if( xval >= _x[_lenx-1]){
      return _z[_lenx-1];
    }else{
      // In the Middel of Table, interpolate to find value.
      int ix = 0;
      for ( ix = 0; ix < _lenx - 1 ; ix++ )
    454a:	ff ef       	ldi	r31, 0xFF	; 255
    454c:	ef 1a       	sub	r14, r31
    454e:	ff 0a       	sbc	r15, r31
    4550:	ec 14       	cp	r14, r12
    4552:	fd 04       	cpc	r15, r13
    4554:	1c f3       	brlt	.-58     	; 0x451c <_ZN5LUT1D6lookupEf+0xc6>
              break;
          }
      }
      
      //Interpolate z value
      return ((xval - _x[ix])*((_z[ix+1] - _z[ix])/(_x[ix+1]-_x[ix])) + _z[ix]);
    4556:	c7 01       	movw	r24, r14
    4558:	88 0f       	add	r24, r24
    455a:	99 1f       	adc	r25, r25
    455c:	88 0f       	add	r24, r24
    455e:	99 1f       	adc	r25, r25
    4560:	f8 01       	movw	r30, r16
    4562:	e8 0f       	add	r30, r24
    4564:	f9 1f       	adc	r31, r25
    4566:	c0 80       	ld	r12, Z
    4568:	d1 80       	ldd	r13, Z+1	; 0x01
    456a:	e2 80       	ldd	r14, Z+2	; 0x02
    456c:	f3 80       	ldd	r15, Z+3	; 0x03
    456e:	d3 01       	movw	r26, r6
    4570:	12 96       	adiw	r26, 0x02	; 2
    4572:	0d 90       	ld	r0, X+
    4574:	bc 91       	ld	r27, X
    4576:	a0 2d       	mov	r26, r0
    4578:	ba 83       	std	Y+2, r27	; 0x02
    457a:	a9 83       	std	Y+1, r26	; 0x01
    457c:	1c 01       	movw	r2, r24
    457e:	b4 e0       	ldi	r27, 0x04	; 4
    4580:	2b 0e       	add	r2, r27
    4582:	31 1c       	adc	r3, r1
    4584:	e9 81       	ldd	r30, Y+1	; 0x01
    4586:	fa 81       	ldd	r31, Y+2	; 0x02
    4588:	e8 0f       	add	r30, r24
    458a:	f9 1f       	adc	r31, r25
    458c:	40 80       	ld	r4, Z
    458e:	51 80       	ldd	r5, Z+1	; 0x01
    4590:	62 80       	ldd	r6, Z+2	; 0x02
    4592:	73 80       	ldd	r7, Z+3	; 0x03
    4594:	a7 01       	movw	r20, r14
    4596:	96 01       	movw	r18, r12
    4598:	c5 01       	movw	r24, r10
    459a:	b4 01       	movw	r22, r8
    459c:	0e 94 5e 38 	call	0x70bc	; 0x70bc <__subsf3>
    45a0:	4b 01       	movw	r8, r22
    45a2:	5c 01       	movw	r10, r24
    45a4:	e9 81       	ldd	r30, Y+1	; 0x01
    45a6:	fa 81       	ldd	r31, Y+2	; 0x02
    45a8:	e2 0d       	add	r30, r2
    45aa:	f3 1d       	adc	r31, r3
    45ac:	a3 01       	movw	r20, r6
    45ae:	92 01       	movw	r18, r4
    45b0:	60 81       	ld	r22, Z
    45b2:	71 81       	ldd	r23, Z+1	; 0x01
    45b4:	82 81       	ldd	r24, Z+2	; 0x02
    45b6:	93 81       	ldd	r25, Z+3	; 0x03
    45b8:	0e 94 5e 38 	call	0x70bc	; 0x70bc <__subsf3>
    45bc:	69 83       	std	Y+1, r22	; 0x01
    45be:	7a 83       	std	Y+2, r23	; 0x02
    45c0:	8b 83       	std	Y+3, r24	; 0x03
    45c2:	9c 83       	std	Y+4, r25	; 0x04
    45c4:	f8 01       	movw	r30, r16
    45c6:	e2 0d       	add	r30, r2
    45c8:	f3 1d       	adc	r31, r3
    45ca:	a7 01       	movw	r20, r14
    45cc:	96 01       	movw	r18, r12
    45ce:	60 81       	ld	r22, Z
    45d0:	71 81       	ldd	r23, Z+1	; 0x01
    45d2:	82 81       	ldd	r24, Z+2	; 0x02
    45d4:	93 81       	ldd	r25, Z+3	; 0x03
    45d6:	0e 94 5e 38 	call	0x70bc	; 0x70bc <__subsf3>
    45da:	9b 01       	movw	r18, r22
    45dc:	ac 01       	movw	r20, r24
    45de:	69 81       	ldd	r22, Y+1	; 0x01
    45e0:	7a 81       	ldd	r23, Y+2	; 0x02
    45e2:	8b 81       	ldd	r24, Y+3	; 0x03
    45e4:	9c 81       	ldd	r25, Y+4	; 0x04
    45e6:	0e 94 c7 38 	call	0x718e	; 0x718e <__divsf3>
    45ea:	9b 01       	movw	r18, r22
    45ec:	ac 01       	movw	r20, r24
    45ee:	c5 01       	movw	r24, r10
    45f0:	b4 01       	movw	r22, r8
    45f2:	0e 94 16 3a 	call	0x742c	; 0x742c <__mulsf3>
    45f6:	9b 01       	movw	r18, r22
    45f8:	ac 01       	movw	r20, r24
    45fa:	c3 01       	movw	r24, r6
    45fc:	b2 01       	movw	r22, r4
    45fe:	0e 94 5f 38 	call	0x70be	; 0x70be <__addsf3>
    }
  }
}
    4602:	0f 90       	pop	r0
    4604:	0f 90       	pop	r0
    4606:	0f 90       	pop	r0
    4608:	0f 90       	pop	r0
    460a:	df 91       	pop	r29
    460c:	cf 91       	pop	r28
    460e:	1f 91       	pop	r17
    4610:	0f 91       	pop	r16
    4612:	ff 90       	pop	r15
    4614:	ef 90       	pop	r14
    4616:	df 90       	pop	r13
    4618:	cf 90       	pop	r12
    461a:	bf 90       	pop	r11
    461c:	af 90       	pop	r10
    461e:	9f 90       	pop	r9
    4620:	8f 90       	pop	r8
    4622:	7f 90       	pop	r7
    4624:	6f 90       	pop	r6
    4626:	5f 90       	pop	r5
    4628:	4f 90       	pop	r4
    462a:	3f 90       	pop	r3
    462c:	2f 90       	pop	r2
    462e:	08 95       	ret

00004630 <_ZN16WheatstoneBridgeC1E6Stringii5LUT1Dfffff>:
	AN_Vs = _AnalogIn_Vs;
	AN_Vo = _AnalogIn_V;
}

//Class Instantiation
WheatstoneBridge::WheatstoneBridge(String _Name, int _AnalogIn_Vs, int _AnalogIn_V, LUT1D _LUT_R2DEGC, float _R2, float _R3, float _R4, float _AmpGain, float _Rs){
    4630:	2f 92       	push	r2
    4632:	3f 92       	push	r3
    4634:	4f 92       	push	r4
    4636:	5f 92       	push	r5
    4638:	6f 92       	push	r6
    463a:	7f 92       	push	r7
    463c:	8f 92       	push	r8
    463e:	9f 92       	push	r9
    4640:	af 92       	push	r10
    4642:	bf 92       	push	r11
    4644:	cf 92       	push	r12
    4646:	df 92       	push	r13
    4648:	ef 92       	push	r14
    464a:	ff 92       	push	r15
    464c:	0f 93       	push	r16
    464e:	1f 93       	push	r17
    4650:	cf 93       	push	r28
    4652:	df 93       	push	r29
    4654:	cd b7       	in	r28, 0x3d	; 61
    4656:	de b7       	in	r29, 0x3e	; 62
    4658:	28 97       	sbiw	r28, 0x08	; 8
    465a:	0f b6       	in	r0, 0x3f	; 63
    465c:	f8 94       	cli
    465e:	de bf       	out	0x3e, r29	; 62
    4660:	0f be       	out	0x3f, r0	; 63
    4662:	cd bf       	out	0x3d, r28	; 61
    4664:	3c 01       	movw	r6, r24
    4666:	78 87       	std	Y+8, r23	; 0x08
    4668:	6f 83       	std	Y+7, r22	; 0x07
    466a:	1a 01       	movw	r2, r20
    466c:	29 01       	movw	r4, r18
    466e:	c9 82       	std	Y+1, r12	; 0x01
    4670:	da 82       	std	Y+2, r13	; 0x02
    4672:	eb 82       	std	Y+3, r14	; 0x03
    4674:	fc 82       	std	Y+4, r15	; 0x04
    4676:	0d 83       	std	Y+5, r16	; 0x05
    4678:	1e 83       	std	Y+6, r17	; 0x06
    467a:	fc 01       	movw	r30, r24
    467c:	14 82       	std	Z+4, r1	; 0x04
    467e:	15 82       	std	Z+5, r1	; 0x05
    4680:	16 82       	std	Z+6, r1	; 0x06
    4682:	17 82       	std	Z+7, r1	; 0x07
    4684:	8c 01       	movw	r16, r24
    4686:	08 5f       	subi	r16, 0xF8	; 248
    4688:	1f 4f       	sbci	r17, 0xFF	; 255
    468a:	61 e6       	ldi	r22, 0x61	; 97
    468c:	76 e0       	ldi	r23, 0x06	; 6
    468e:	c8 01       	movw	r24, r16
    4690:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN6StringC1EPKc>
	Name = _Name;
    4694:	6f 81       	ldd	r22, Y+7	; 0x07
    4696:	78 85       	ldd	r23, Y+8	; 0x08
    4698:	c8 01       	movw	r24, r16
    469a:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <_ZN6StringaSERKS_>
	LUT_R2DEGC = &_LUT_R2DEGC;
    469e:	ce 01       	movw	r24, r28
    46a0:	01 96       	adiw	r24, 0x01	; 1
    46a2:	f3 01       	movw	r30, r6
    46a4:	93 a7       	std	Z+43, r25	; 0x2b
    46a6:	82 a7       	std	Z+42, r24	; 0x2a
	R2 = _R2;
    46a8:	86 8e       	std	Z+30, r8	; 0x1e
    46aa:	97 8e       	std	Z+31, r9	; 0x1f
    46ac:	a0 a2       	std	Z+32, r10	; 0x20
    46ae:	b1 a2       	std	Z+33, r11	; 0x21
	R3 = _R3;
    46b0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    46b2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    46b4:	a8 a1       	ldd	r26, Y+32	; 0x20
    46b6:	b9 a1       	ldd	r27, Y+33	; 0x21
    46b8:	82 a3       	std	Z+34, r24	; 0x22
    46ba:	93 a3       	std	Z+35, r25	; 0x23
    46bc:	a4 a3       	std	Z+36, r26	; 0x24
    46be:	b5 a3       	std	Z+37, r27	; 0x25
	R4 = _R4;
    46c0:	8a a1       	ldd	r24, Y+34	; 0x22
    46c2:	9b a1       	ldd	r25, Y+35	; 0x23
    46c4:	ac a1       	ldd	r26, Y+36	; 0x24
    46c6:	bd a1       	ldd	r27, Y+37	; 0x25
    46c8:	86 a3       	std	Z+38, r24	; 0x26
    46ca:	97 a3       	std	Z+39, r25	; 0x27
    46cc:	a0 a7       	std	Z+40, r26	; 0x28
    46ce:	b1 a7       	std	Z+41, r27	; 0x29
	Rs = _Rs;
    46d0:	8a a5       	ldd	r24, Y+42	; 0x2a
    46d2:	9b a5       	ldd	r25, Y+43	; 0x2b
    46d4:	ac a5       	ldd	r26, Y+44	; 0x2c
    46d6:	bd a5       	ldd	r27, Y+45	; 0x2d
    46d8:	82 8f       	std	Z+26, r24	; 0x1a
    46da:	93 8f       	std	Z+27, r25	; 0x1b
    46dc:	a4 8f       	std	Z+28, r26	; 0x1c
    46de:	b5 8f       	std	Z+29, r27	; 0x1d
	AmpGain = _AmpGain;
    46e0:	8e a1       	ldd	r24, Y+38	; 0x26
    46e2:	9f a1       	ldd	r25, Y+39	; 0x27
    46e4:	a8 a5       	ldd	r26, Y+40	; 0x28
    46e6:	b9 a5       	ldd	r27, Y+41	; 0x29
    46e8:	86 8b       	std	Z+22, r24	; 0x16
    46ea:	97 8b       	std	Z+23, r25	; 0x17
    46ec:	a0 8f       	std	Z+24, r26	; 0x18
    46ee:	b1 8f       	std	Z+25, r27	; 0x19
	AN_Vs = _AnalogIn_Vs;
    46f0:	33 82       	std	Z+3, r3	; 0x03
    46f2:	22 82       	std	Z+2, r2	; 0x02
	AN_Vo = _AnalogIn_V;
    46f4:	51 82       	std	Z+1, r5	; 0x01
    46f6:	40 82       	st	Z, r4
}
    46f8:	28 96       	adiw	r28, 0x08	; 8
    46fa:	0f b6       	in	r0, 0x3f	; 63
    46fc:	f8 94       	cli
    46fe:	de bf       	out	0x3e, r29	; 62
    4700:	0f be       	out	0x3f, r0	; 63
    4702:	cd bf       	out	0x3d, r28	; 61
    4704:	df 91       	pop	r29
    4706:	cf 91       	pop	r28
    4708:	1f 91       	pop	r17
    470a:	0f 91       	pop	r16
    470c:	ff 90       	pop	r15
    470e:	ef 90       	pop	r14
    4710:	df 90       	pop	r13
    4712:	cf 90       	pop	r12
    4714:	bf 90       	pop	r11
    4716:	af 90       	pop	r10
    4718:	9f 90       	pop	r9
    471a:	8f 90       	pop	r8
    471c:	7f 90       	pop	r7
    471e:	6f 90       	pop	r6
    4720:	5f 90       	pop	r5
    4722:	4f 90       	pop	r4
    4724:	3f 90       	pop	r3
    4726:	2f 90       	pop	r2
    4728:	08 95       	ret

0000472a <_ZN16WheatstoneBridge6UpdateEv>:

//Read RTD resistance
float WheatstoneBridge::Update(){
    472a:	4f 92       	push	r4
    472c:	5f 92       	push	r5
    472e:	6f 92       	push	r6
    4730:	7f 92       	push	r7
    4732:	8f 92       	push	r8
    4734:	9f 92       	push	r9
    4736:	af 92       	push	r10
    4738:	bf 92       	push	r11
    473a:	cf 92       	push	r12
    473c:	df 92       	push	r13
    473e:	ef 92       	push	r14
    4740:	ff 92       	push	r15
    4742:	0f 93       	push	r16
    4744:	1f 93       	push	r17
    4746:	cf 93       	push	r28
    4748:	df 93       	push	r29
    474a:	cd b7       	in	r28, 0x3d	; 61
    474c:	de b7       	in	r29, 0x3e	; 62
    474e:	28 97       	sbiw	r28, 0x08	; 8
    4750:	0f b6       	in	r0, 0x3f	; 63
    4752:	f8 94       	cli
    4754:	de bf       	out	0x3e, r29	; 62
    4756:	0f be       	out	0x3f, r0	; 63
    4758:	cd bf       	out	0x3d, r28	; 61
    475a:	8c 01       	movw	r16, r24
	
	Vs = (5.0*(float)analogRead(AN_Vs))/1023.0;
    475c:	fc 01       	movw	r30, r24
    475e:	82 81       	ldd	r24, Z+2	; 0x02
    4760:	0e 94 0a 36 	call	0x6c14	; 0x6c14 <analogRead>
    4764:	bc 01       	movw	r22, r24
    4766:	99 0f       	add	r25, r25
    4768:	88 0b       	sbc	r24, r24
    476a:	99 0b       	sbc	r25, r25
    476c:	0e 94 62 39 	call	0x72c4	; 0x72c4 <__floatsisf>
    4770:	20 e0       	ldi	r18, 0x00	; 0
    4772:	30 e0       	ldi	r19, 0x00	; 0
    4774:	40 ea       	ldi	r20, 0xA0	; 160
    4776:	50 e4       	ldi	r21, 0x40	; 64
    4778:	0e 94 16 3a 	call	0x742c	; 0x742c <__mulsf3>
    477c:	20 e0       	ldi	r18, 0x00	; 0
    477e:	30 ec       	ldi	r19, 0xC0	; 192
    4780:	4f e7       	ldi	r20, 0x7F	; 127
    4782:	54 e4       	ldi	r21, 0x44	; 68
    4784:	0e 94 c7 38 	call	0x718e	; 0x718e <__divsf3>
    4788:	f8 01       	movw	r30, r16
    478a:	62 8b       	std	Z+18, r22	; 0x12
    478c:	73 8b       	std	Z+19, r23	; 0x13
    478e:	84 8b       	std	Z+20, r24	; 0x14
    4790:	95 8b       	std	Z+21, r25	; 0x15
	Vo = (5.0*(float)analogRead(AN_Vo))/1023.0;
    4792:	80 81       	ld	r24, Z
    4794:	0e 94 0a 36 	call	0x6c14	; 0x6c14 <analogRead>
    4798:	bc 01       	movw	r22, r24
    479a:	99 0f       	add	r25, r25
    479c:	88 0b       	sbc	r24, r24
    479e:	99 0b       	sbc	r25, r25
    47a0:	0e 94 62 39 	call	0x72c4	; 0x72c4 <__floatsisf>
    47a4:	20 e0       	ldi	r18, 0x00	; 0
    47a6:	30 e0       	ldi	r19, 0x00	; 0
    47a8:	40 ea       	ldi	r20, 0xA0	; 160
    47aa:	50 e4       	ldi	r21, 0x40	; 64
    47ac:	0e 94 16 3a 	call	0x742c	; 0x742c <__mulsf3>
    47b0:	20 e0       	ldi	r18, 0x00	; 0
    47b2:	30 ec       	ldi	r19, 0xC0	; 192
    47b4:	4f e7       	ldi	r20, 0x7F	; 127
    47b6:	54 e4       	ldi	r21, 0x44	; 68
    47b8:	0e 94 c7 38 	call	0x718e	; 0x718e <__divsf3>
    47bc:	4b 01       	movw	r8, r22
    47be:	5c 01       	movw	r10, r24
    47c0:	f8 01       	movw	r30, r16
    47c2:	66 87       	std	Z+14, r22	; 0x0e
    47c4:	77 87       	std	Z+15, r23	; 0x0f
    47c6:	80 8b       	std	Z+16, r24	; 0x10
    47c8:	91 8b       	std	Z+17, r25	; 0x11
	float Vbridge = Vo / max(AmpGain,0.001);
    47ca:	c6 88       	ldd	r12, Z+22	; 0x16
    47cc:	d7 88       	ldd	r13, Z+23	; 0x17
    47ce:	e0 8c       	ldd	r14, Z+24	; 0x18
    47d0:	f1 8c       	ldd	r15, Z+25	; 0x19
    47d2:	2f e6       	ldi	r18, 0x6F	; 111
    47d4:	32 e1       	ldi	r19, 0x12	; 18
    47d6:	43 e8       	ldi	r20, 0x83	; 131
    47d8:	5a e3       	ldi	r21, 0x3A	; 58
    47da:	6c 2d       	mov	r22, r12
    47dc:	7d 2d       	mov	r23, r13
    47de:	8e 2d       	mov	r24, r14
    47e0:	9f 2d       	mov	r25, r15
    47e2:	0e 94 12 3a 	call	0x7424	; 0x7424 <__gesf2>
    47e6:	18 16       	cp	r1, r24
    47e8:	2c f4       	brge	.+10     	; 0x47f4 <_ZN16WheatstoneBridge6UpdateEv+0xca>
    47ea:	7c 2d       	mov	r23, r12
    47ec:	6d 2d       	mov	r22, r13
    47ee:	9e 2d       	mov	r25, r14
    47f0:	8f 2d       	mov	r24, r15
    47f2:	04 c0       	rjmp	.+8      	; 0x47fc <_ZN16WheatstoneBridge6UpdateEv+0xd2>
    47f4:	7f e6       	ldi	r23, 0x6F	; 111
    47f6:	62 e1       	ldi	r22, 0x12	; 18
    47f8:	93 e8       	ldi	r25, 0x83	; 131
    47fa:	8a e3       	ldi	r24, 0x3A	; 58
    47fc:	27 2f       	mov	r18, r23
    47fe:	36 2f       	mov	r19, r22
    4800:	49 2f       	mov	r20, r25
    4802:	58 2f       	mov	r21, r24
    4804:	c5 01       	movw	r24, r10
    4806:	b4 01       	movw	r22, r8
    4808:	0e 94 c7 38 	call	0x718e	; 0x718e <__divsf3>
	float Vb_q_Vs = Vbridge / Vs;
    480c:	f8 01       	movw	r30, r16
    480e:	22 89       	ldd	r18, Z+18	; 0x12
    4810:	33 89       	ldd	r19, Z+19	; 0x13
    4812:	44 89       	ldd	r20, Z+20	; 0x14
    4814:	55 89       	ldd	r21, Z+21	; 0x15
    4816:	0e 94 c7 38 	call	0x718e	; 0x718e <__divsf3>
    481a:	69 83       	std	Y+1, r22	; 0x01
    481c:	7a 83       	std	Y+2, r23	; 0x02
    481e:	8b 83       	std	Y+3, r24	; 0x03
    4820:	9c 83       	std	Y+4, r25	; 0x04

	float Rcalc_num = (R2*R4 + (Vb_q_Vs)*(R2*(R3 + R4)));
    4822:	f8 01       	movw	r30, r16
    4824:	86 8c       	ldd	r8, Z+30	; 0x1e
    4826:	97 8c       	ldd	r9, Z+31	; 0x1f
    4828:	a0 a0       	ldd	r10, Z+32	; 0x20
    482a:	b1 a0       	ldd	r11, Z+33	; 0x21
    482c:	46 a0       	ldd	r4, Z+38	; 0x26
    482e:	57 a0       	ldd	r5, Z+39	; 0x27
    4830:	60 a4       	ldd	r6, Z+40	; 0x28
    4832:	71 a4       	ldd	r7, Z+41	; 0x29
    4834:	c2 a0       	ldd	r12, Z+34	; 0x22
    4836:	d3 a0       	ldd	r13, Z+35	; 0x23
    4838:	e4 a0       	ldd	r14, Z+36	; 0x24
    483a:	f5 a0       	ldd	r15, Z+37	; 0x25
    483c:	a7 01       	movw	r20, r14
    483e:	96 01       	movw	r18, r12
    4840:	c3 01       	movw	r24, r6
    4842:	b2 01       	movw	r22, r4
    4844:	0e 94 5f 38 	call	0x70be	; 0x70be <__addsf3>
    4848:	6d 83       	std	Y+5, r22	; 0x05
    484a:	7e 83       	std	Y+6, r23	; 0x06
    484c:	8f 83       	std	Y+7, r24	; 0x07
    484e:	98 87       	std	Y+8, r25	; 0x08
    4850:	a3 01       	movw	r20, r6
    4852:	92 01       	movw	r18, r4
    4854:	c5 01       	movw	r24, r10
    4856:	b4 01       	movw	r22, r8
    4858:	0e 94 16 3a 	call	0x742c	; 0x742c <__mulsf3>
    485c:	2b 01       	movw	r4, r22
    485e:	3c 01       	movw	r6, r24
    4860:	2d 81       	ldd	r18, Y+5	; 0x05
    4862:	3e 81       	ldd	r19, Y+6	; 0x06
    4864:	4f 81       	ldd	r20, Y+7	; 0x07
    4866:	58 85       	ldd	r21, Y+8	; 0x08
    4868:	c5 01       	movw	r24, r10
    486a:	b4 01       	movw	r22, r8
    486c:	0e 94 16 3a 	call	0x742c	; 0x742c <__mulsf3>
    4870:	29 81       	ldd	r18, Y+1	; 0x01
    4872:	3a 81       	ldd	r19, Y+2	; 0x02
    4874:	4b 81       	ldd	r20, Y+3	; 0x03
    4876:	5c 81       	ldd	r21, Y+4	; 0x04
    4878:	0e 94 16 3a 	call	0x742c	; 0x742c <__mulsf3>
    487c:	9b 01       	movw	r18, r22
    487e:	ac 01       	movw	r20, r24
    4880:	c3 01       	movw	r24, r6
    4882:	b2 01       	movw	r22, r4
    4884:	0e 94 5f 38 	call	0x70be	; 0x70be <__addsf3>
    4888:	4b 01       	movw	r8, r22
    488a:	5c 01       	movw	r10, r24
	float Rcalc_den = (R3 - (Vb_q_Vs)*(R3+R4));
    488c:	2d 81       	ldd	r18, Y+5	; 0x05
    488e:	3e 81       	ldd	r19, Y+6	; 0x06
    4890:	4f 81       	ldd	r20, Y+7	; 0x07
    4892:	58 85       	ldd	r21, Y+8	; 0x08
    4894:	69 81       	ldd	r22, Y+1	; 0x01
    4896:	7a 81       	ldd	r23, Y+2	; 0x02
    4898:	8b 81       	ldd	r24, Y+3	; 0x03
    489a:	9c 81       	ldd	r25, Y+4	; 0x04
    489c:	0e 94 16 3a 	call	0x742c	; 0x742c <__mulsf3>
    48a0:	9b 01       	movw	r18, r22
    48a2:	ac 01       	movw	r20, r24
    48a4:	c7 01       	movw	r24, r14
    48a6:	b6 01       	movw	r22, r12
    48a8:	0e 94 5e 38 	call	0x70bc	; 0x70bc <__subsf3>
	Rcalc = Rcalc_num / max(Rcalc_den - Rs,0.01);
    48ac:	f8 01       	movw	r30, r16
    48ae:	22 8d       	ldd	r18, Z+26	; 0x1a
    48b0:	33 8d       	ldd	r19, Z+27	; 0x1b
    48b2:	44 8d       	ldd	r20, Z+28	; 0x1c
    48b4:	55 8d       	ldd	r21, Z+29	; 0x1d
    48b6:	0e 94 5e 38 	call	0x70bc	; 0x70bc <__subsf3>
    48ba:	c6 2e       	mov	r12, r22
    48bc:	d7 2e       	mov	r13, r23
    48be:	e8 2e       	mov	r14, r24
    48c0:	f9 2e       	mov	r15, r25
    48c2:	2a e0       	ldi	r18, 0x0A	; 10
    48c4:	37 ed       	ldi	r19, 0xD7	; 215
    48c6:	43 e2       	ldi	r20, 0x23	; 35
    48c8:	5c e3       	ldi	r21, 0x3C	; 60
    48ca:	0e 94 12 3a 	call	0x7424	; 0x7424 <__gesf2>
    48ce:	18 16       	cp	r1, r24
    48d0:	2c f4       	brge	.+10     	; 0x48dc <_ZN16WheatstoneBridge6UpdateEv+0x1b2>
    48d2:	7c 2d       	mov	r23, r12
    48d4:	6d 2d       	mov	r22, r13
    48d6:	9e 2d       	mov	r25, r14
    48d8:	8f 2d       	mov	r24, r15
    48da:	04 c0       	rjmp	.+8      	; 0x48e4 <_ZN16WheatstoneBridge6UpdateEv+0x1ba>
    48dc:	7a e0       	ldi	r23, 0x0A	; 10
    48de:	67 ed       	ldi	r22, 0xD7	; 215
    48e0:	93 e2       	ldi	r25, 0x23	; 35
    48e2:	8c e3       	ldi	r24, 0x3C	; 60
    48e4:	27 2f       	mov	r18, r23
    48e6:	36 2f       	mov	r19, r22
    48e8:	49 2f       	mov	r20, r25
    48ea:	58 2f       	mov	r21, r24
    48ec:	c5 01       	movw	r24, r10
    48ee:	b4 01       	movw	r22, r8
    48f0:	0e 94 c7 38 	call	0x718e	; 0x718e <__divsf3>
    48f4:	ab 01       	movw	r20, r22
    48f6:	bc 01       	movw	r22, r24
    48f8:	f8 01       	movw	r30, r16
    48fa:	44 a7       	std	Z+44, r20	; 0x2c
    48fc:	55 a7       	std	Z+45, r21	; 0x2d
    48fe:	66 a7       	std	Z+46, r22	; 0x2e
    4900:	77 a7       	std	Z+47, r23	; 0x2f
	degC = LUT_R2DEGC->lookup(Rcalc);
    4902:	82 a5       	ldd	r24, Z+42	; 0x2a
    4904:	93 a5       	ldd	r25, Z+43	; 0x2b
    4906:	a7 dd       	rcall	.-1202   	; 0x4456 <_ZN5LUT1D6lookupEf>
    4908:	f8 01       	movw	r30, r16
    490a:	60 ab       	std	Z+48, r22	; 0x30
    490c:	71 ab       	std	Z+49, r23	; 0x31
    490e:	82 ab       	std	Z+50, r24	; 0x32
    4910:	93 ab       	std	Z+51, r25	; 0x33
	degF = degC * 9/5 + 32;
    4912:	20 e0       	ldi	r18, 0x00	; 0
    4914:	30 e0       	ldi	r19, 0x00	; 0
    4916:	40 e1       	ldi	r20, 0x10	; 16
    4918:	51 e4       	ldi	r21, 0x41	; 65
    491a:	0e 94 16 3a 	call	0x742c	; 0x742c <__mulsf3>
    491e:	20 e0       	ldi	r18, 0x00	; 0
    4920:	30 e0       	ldi	r19, 0x00	; 0
    4922:	40 ea       	ldi	r20, 0xA0	; 160
    4924:	50 e4       	ldi	r21, 0x40	; 64
    4926:	0e 94 c7 38 	call	0x718e	; 0x718e <__divsf3>
    492a:	20 e0       	ldi	r18, 0x00	; 0
    492c:	30 e0       	ldi	r19, 0x00	; 0
    492e:	40 e0       	ldi	r20, 0x00	; 0
    4930:	52 e4       	ldi	r21, 0x42	; 66
    4932:	0e 94 5f 38 	call	0x70be	; 0x70be <__addsf3>
    4936:	f8 01       	movw	r30, r16
    4938:	64 ab       	std	Z+52, r22	; 0x34
    493a:	75 ab       	std	Z+53, r23	; 0x35
    493c:	86 ab       	std	Z+54, r24	; 0x36
    493e:	97 ab       	std	Z+55, r25	; 0x37
	//	if((millis() - lastSerialPrint)>2000){
	//		lastSerialPrint = millis();
	//		Serial.println("  RTD:" + Name + " Vo:" + Vo + " Vs:" + Vs + " Rc:" + Rcalc + " Tc:" + degC + " Tf:" + degF);
	//	}
	//#endif
}
    4940:	28 96       	adiw	r28, 0x08	; 8
    4942:	0f b6       	in	r0, 0x3f	; 63
    4944:	f8 94       	cli
    4946:	de bf       	out	0x3e, r29	; 62
    4948:	0f be       	out	0x3f, r0	; 63
    494a:	cd bf       	out	0x3d, r28	; 61
    494c:	df 91       	pop	r29
    494e:	cf 91       	pop	r28
    4950:	1f 91       	pop	r17
    4952:	0f 91       	pop	r16
    4954:	ff 90       	pop	r15
    4956:	ef 90       	pop	r14
    4958:	df 90       	pop	r13
    495a:	cf 90       	pop	r12
    495c:	bf 90       	pop	r11
    495e:	af 90       	pop	r10
    4960:	9f 90       	pop	r9
    4962:	8f 90       	pop	r8
    4964:	7f 90       	pop	r7
    4966:	6f 90       	pop	r6
    4968:	5f 90       	pop	r5
    496a:	4f 90       	pop	r4
    496c:	08 95       	ret

0000496e <_ZN12ClickEncoderC1Ehhhhb>:
#  endif
#endif

// ----------------------------------------------------------------------------

ClickEncoder::ClickEncoder(uint8_t A, uint8_t B, uint8_t BTN, uint8_t stepsPerNotch, bool active)
    496e:	ef 92       	push	r14
    4970:	0f 93       	push	r16
    4972:	1f 93       	push	r17
    4974:	cf 93       	push	r28
    4976:	df 93       	push	r29
    4978:	ec 01       	movw	r28, r24
    497a:	86 2f       	mov	r24, r22
  : doubleClickEnabled(true), accelerationEnabled(true),
    delta(0), last(0), acceleration(0),
    button(Open), steps(stepsPerNotch),
    pinA(A), pinB(B), pinBTN(BTN), pinsActive(active)
    497c:	68 83       	st	Y, r22
    497e:	49 83       	std	Y+1, r20	; 0x01
    4980:	2a 83       	std	Y+2, r18	; 0x02
    4982:	eb 82       	std	Y+3, r14	; 0x03
    4984:	1d 82       	std	Y+5, r1	; 0x05
    4986:	1c 82       	std	Y+4, r1	; 0x04
    4988:	1f 82       	std	Y+7, r1	; 0x07
    498a:	1e 82       	std	Y+6, r1	; 0x06
    498c:	08 87       	std	Y+8, r16	; 0x08
    498e:	1a 86       	std	Y+10, r1	; 0x0a
    4990:	19 86       	std	Y+9, r1	; 0x09
    4992:	1b 86       	std	Y+11, r1	; 0x0b
    4994:	91 e0       	ldi	r25, 0x01	; 1
    4996:	9c 87       	std	Y+12, r25	; 0x0c
    4998:	9d 87       	std	Y+13, r25	; 0x0d
{
  uint8_t configType = (pinsActive == LOW) ? INPUT_PULLUP : INPUT;
    499a:	ee 20       	and	r14, r14
    499c:	11 f0       	breq	.+4      	; 0x49a2 <_ZN12ClickEncoderC1Ehhhhb+0x34>
    499e:	10 e0       	ldi	r17, 0x00	; 0
    49a0:	01 c0       	rjmp	.+2      	; 0x49a4 <_ZN12ClickEncoderC1Ehhhhb+0x36>
    49a2:	12 e0       	ldi	r17, 0x02	; 2
  pinMode(pinA, configType);
    49a4:	61 2f       	mov	r22, r17
    49a6:	0e 94 96 36 	call	0x6d2c	; 0x6d2c <pinMode>
  pinMode(pinB, configType);
    49aa:	61 2f       	mov	r22, r17
    49ac:	89 81       	ldd	r24, Y+1	; 0x01
    49ae:	0e 94 96 36 	call	0x6d2c	; 0x6d2c <pinMode>
  pinMode(pinBTN, configType);
    49b2:	61 2f       	mov	r22, r17
    49b4:	8a 81       	ldd	r24, Y+2	; 0x02
    49b6:	0e 94 96 36 	call	0x6d2c	; 0x6d2c <pinMode>
  
  if (digitalRead(pinA) == pinsActive) {
    49ba:	88 81       	ld	r24, Y
    49bc:	0e 94 05 37 	call	0x6e0a	; 0x6e0a <digitalRead>
    49c0:	2b 81       	ldd	r18, Y+3	; 0x03
    49c2:	30 e0       	ldi	r19, 0x00	; 0
    49c4:	82 17       	cp	r24, r18
    49c6:	93 07       	cpc	r25, r19
    49c8:	21 f4       	brne	.+8      	; 0x49d2 <_ZN12ClickEncoderC1Ehhhhb+0x64>
    last = 3;
    49ca:	83 e0       	ldi	r24, 0x03	; 3
    49cc:	90 e0       	ldi	r25, 0x00	; 0
    49ce:	9f 83       	std	Y+7, r25	; 0x07
    49d0:	8e 83       	std	Y+6, r24	; 0x06
  }

  if (digitalRead(pinB) == pinsActive) {
    49d2:	89 81       	ldd	r24, Y+1	; 0x01
    49d4:	0e 94 05 37 	call	0x6e0a	; 0x6e0a <digitalRead>
    49d8:	2b 81       	ldd	r18, Y+3	; 0x03
    49da:	30 e0       	ldi	r19, 0x00	; 0
    49dc:	82 17       	cp	r24, r18
    49de:	93 07       	cpc	r25, r19
    49e0:	31 f4       	brne	.+12     	; 0x49ee <_ZN12ClickEncoderC1Ehhhhb+0x80>
    last ^=1;
    49e2:	8e 81       	ldd	r24, Y+6	; 0x06
    49e4:	9f 81       	ldd	r25, Y+7	; 0x07
    49e6:	21 e0       	ldi	r18, 0x01	; 1
    49e8:	82 27       	eor	r24, r18
    49ea:	9f 83       	std	Y+7, r25	; 0x07
    49ec:	8e 83       	std	Y+6, r24	; 0x06
  }
}
    49ee:	df 91       	pop	r29
    49f0:	cf 91       	pop	r28
    49f2:	1f 91       	pop	r17
    49f4:	0f 91       	pop	r16
    49f6:	ef 90       	pop	r14
    49f8:	08 95       	ret

000049fa <_ZN12ClickEncoder7serviceEv>:

// ----------------------------------------------------------------------------
// call this every 1 millisecond via timer ISR
//
void ClickEncoder::service(void)
{
    49fa:	cf 92       	push	r12
    49fc:	df 92       	push	r13
    49fe:	ef 92       	push	r14
    4a00:	ff 92       	push	r15
    4a02:	0f 93       	push	r16
    4a04:	1f 93       	push	r17
    4a06:	cf 93       	push	r28
    4a08:	df 93       	push	r29
    4a0a:	ec 01       	movw	r28, r24
  bool moved = false;
  unsigned long now = millis();
    4a0c:	0e 94 42 35 	call	0x6a84	; 0x6a84 <millis>
    4a10:	6b 01       	movw	r12, r22
    4a12:	7c 01       	movw	r14, r24

  if (accelerationEnabled) { // decelerate every tick
    4a14:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a16:	88 23       	and	r24, r24
    4a18:	59 f0       	breq	.+22     	; 0x4a30 <_ZN12ClickEncoder7serviceEv+0x36>
    acceleration -= ENC_ACCEL_DEC;
    4a1a:	89 85       	ldd	r24, Y+9	; 0x09
    4a1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a1e:	02 97       	sbiw	r24, 0x02	; 2
    4a20:	9a 87       	std	Y+10, r25	; 0x0a
    4a22:	89 87       	std	Y+9, r24	; 0x09
    if (acceleration & 0x8000) { // handle overflow of MSB is set
    4a24:	89 85       	ldd	r24, Y+9	; 0x09
    4a26:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a28:	99 23       	and	r25, r25
    4a2a:	14 f4       	brge	.+4      	; 0x4a30 <_ZN12ClickEncoder7serviceEv+0x36>
      acceleration = 0;
    4a2c:	1a 86       	std	Y+10, r1	; 0x0a
    4a2e:	19 86       	std	Y+9, r1	; 0x09
    moved = true;
  }
#elif ENC_DECODER == ENC_NORMAL
  int8_t curr = 0;

  if (digitalRead(pinA) == pinsActive) {
    4a30:	88 81       	ld	r24, Y
    4a32:	0e 94 05 37 	call	0x6e0a	; 0x6e0a <digitalRead>
    4a36:	2b 81       	ldd	r18, Y+3	; 0x03
    4a38:	30 e0       	ldi	r19, 0x00	; 0
    4a3a:	82 17       	cp	r24, r18
    4a3c:	93 07       	cpc	r25, r19
    4a3e:	11 f4       	brne	.+4      	; 0x4a44 <_ZN12ClickEncoder7serviceEv+0x4a>
    curr = 3;
    4a40:	13 e0       	ldi	r17, 0x03	; 3
    4a42:	01 c0       	rjmp	.+2      	; 0x4a46 <_ZN12ClickEncoder7serviceEv+0x4c>
  if (tbl) {
    delta += tbl;
    moved = true;
  }
#elif ENC_DECODER == ENC_NORMAL
  int8_t curr = 0;
    4a44:	10 e0       	ldi	r17, 0x00	; 0

  if (digitalRead(pinA) == pinsActive) {
    curr = 3;
  }

  if (digitalRead(pinB) == pinsActive) {
    4a46:	89 81       	ldd	r24, Y+1	; 0x01
    4a48:	0e 94 05 37 	call	0x6e0a	; 0x6e0a <digitalRead>
    4a4c:	2b 81       	ldd	r18, Y+3	; 0x03
    4a4e:	30 e0       	ldi	r19, 0x00	; 0
    4a50:	82 17       	cp	r24, r18
    4a52:	93 07       	cpc	r25, r19
    4a54:	11 f4       	brne	.+4      	; 0x4a5a <_ZN12ClickEncoder7serviceEv+0x60>
    curr ^= 1;
    4a56:	81 e0       	ldi	r24, 0x01	; 1
    4a58:	18 27       	eor	r17, r24
  }
  
  int8_t diff = last - curr;
    4a5a:	8e 81       	ldd	r24, Y+6	; 0x06
    4a5c:	9f 81       	ldd	r25, Y+7	; 0x07
    4a5e:	81 1b       	sub	r24, r17

  if (diff & 1) {            // bit 0 = step
    4a60:	80 ff       	sbrs	r24, 0
    4a62:	1d c0       	rjmp	.+58     	; 0x4a9e <_ZN12ClickEncoder7serviceEv+0xa4>
    last = curr;
    4a64:	21 2f       	mov	r18, r17
    4a66:	11 0f       	add	r17, r17
    4a68:	33 0b       	sbc	r19, r19
    4a6a:	3f 83       	std	Y+7, r19	; 0x07
    4a6c:	2e 83       	std	Y+6, r18	; 0x06
    delta += (diff & 2) - 1; // bit 1 = direction (+/-)
    4a6e:	2c 81       	ldd	r18, Y+4	; 0x04
    4a70:	3d 81       	ldd	r19, Y+5	; 0x05
    4a72:	82 70       	andi	r24, 0x02	; 2
    4a74:	08 2e       	mov	r0, r24
    4a76:	00 0c       	add	r0, r0
    4a78:	99 0b       	sbc	r25, r25
    4a7a:	01 97       	sbiw	r24, 0x01	; 1
    4a7c:	82 0f       	add	r24, r18
    4a7e:	93 1f       	adc	r25, r19
    4a80:	9d 83       	std	Y+5, r25	; 0x05
    4a82:	8c 83       	std	Y+4, r24	; 0x04
  }
#else
# error "Error: define ENC_DECODER to ENC_NORMAL or ENC_FLAKY"
#endif

  if (accelerationEnabled && moved) {
    4a84:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a86:	88 23       	and	r24, r24
    4a88:	51 f0       	breq	.+20     	; 0x4a9e <_ZN12ClickEncoder7serviceEv+0xa4>
    // increment accelerator if encoder has been moved
    if (acceleration <= (ENC_ACCEL_TOP - ENC_ACCEL_INC)) {
    4a8a:	89 85       	ldd	r24, Y+9	; 0x09
    4a8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a8e:	88 3e       	cpi	r24, 0xE8	; 232
    4a90:	9b 40       	sbci	r25, 0x0B	; 11
    4a92:	28 f4       	brcc	.+10     	; 0x4a9e <_ZN12ClickEncoder7serviceEv+0xa4>
      acceleration += ENC_ACCEL_INC;
    4a94:	89 85       	ldd	r24, Y+9	; 0x09
    4a96:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a98:	49 96       	adiw	r24, 0x19	; 25
    4a9a:	9a 87       	std	Y+10, r25	; 0x0a
    4a9c:	89 87       	std	Y+9, r24	; 0x09
#ifndef WITHOUT_BUTTON
  static uint16_t keyDownTicks = 0;
  static uint8_t doubleClickTicks = 0;
  static unsigned long lastButtonCheck = 0;

  if (pinBTN > 0 // check button only, if a pin has been provided
    4a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    4aa0:	88 23       	and	r24, r24
    4aa2:	09 f4       	brne	.+2      	; 0x4aa6 <_ZN12ClickEncoder7serviceEv+0xac>
    4aa4:	6b c0       	rjmp	.+214    	; 0x4b7c <_ZN12ClickEncoder7serviceEv+0x182>
      && (now - lastButtonCheck) >= ENC_BUTTONINTERVAL) // checking button is sufficient every 10-30ms
    4aa6:	40 91 d9 09 	lds	r20, 0x09D9
    4aaa:	50 91 da 09 	lds	r21, 0x09DA
    4aae:	60 91 db 09 	lds	r22, 0x09DB
    4ab2:	70 91 dc 09 	lds	r23, 0x09DC
    4ab6:	97 01       	movw	r18, r14
    4ab8:	86 01       	movw	r16, r12
    4aba:	04 1b       	sub	r16, r20
    4abc:	15 0b       	sbc	r17, r21
    4abe:	26 0b       	sbc	r18, r22
    4ac0:	37 0b       	sbc	r19, r23
    4ac2:	0a 30       	cpi	r16, 0x0A	; 10
    4ac4:	11 05       	cpc	r17, r1
    4ac6:	21 05       	cpc	r18, r1
    4ac8:	31 05       	cpc	r19, r1
    4aca:	08 f4       	brcc	.+2      	; 0x4ace <_ZN12ClickEncoder7serviceEv+0xd4>
    4acc:	57 c0       	rjmp	.+174    	; 0x4b7c <_ZN12ClickEncoder7serviceEv+0x182>
  { 
    lastButtonCheck = now;
    4ace:	c0 92 d9 09 	sts	0x09D9, r12
    4ad2:	d0 92 da 09 	sts	0x09DA, r13
    4ad6:	e0 92 db 09 	sts	0x09DB, r14
    4ada:	f0 92 dc 09 	sts	0x09DC, r15
    
    if (digitalRead(pinBTN) == pinsActive) { // key is down
    4ade:	0e 94 05 37 	call	0x6e0a	; 0x6e0a <digitalRead>
    4ae2:	2b 81       	ldd	r18, Y+3	; 0x03
    4ae4:	30 e0       	ldi	r19, 0x00	; 0
    4ae6:	82 17       	cp	r24, r18
    4ae8:	93 07       	cpc	r25, r19
    4aea:	71 f4       	brne	.+28     	; 0x4b08 <_ZN12ClickEncoder7serviceEv+0x10e>
      keyDownTicks++;
    4aec:	80 91 d7 09 	lds	r24, 0x09D7
    4af0:	90 91 d8 09 	lds	r25, 0x09D8
    4af4:	01 96       	adiw	r24, 0x01	; 1
    4af6:	90 93 d8 09 	sts	0x09D8, r25
    4afa:	80 93 d7 09 	sts	0x09D7, r24
      if (keyDownTicks > (ENC_HOLDTIME / ENC_BUTTONINTERVAL)) {
    4afe:	89 37       	cpi	r24, 0x79	; 121
    4b00:	91 05       	cpc	r25, r1
    4b02:	10 f0       	brcs	.+4      	; 0x4b08 <_ZN12ClickEncoder7serviceEv+0x10e>
        button = Held;
    4b04:	83 e0       	ldi	r24, 0x03	; 3
    4b06:	8b 87       	std	Y+11, r24	; 0x0b
      }
    }

    if (digitalRead(pinBTN) == !pinsActive) { // key is now up
    4b08:	8a 81       	ldd	r24, Y+2	; 0x02
    4b0a:	0e 94 05 37 	call	0x6e0a	; 0x6e0a <digitalRead>
    4b0e:	3b 81       	ldd	r19, Y+3	; 0x03
    4b10:	21 e0       	ldi	r18, 0x01	; 1
    4b12:	23 27       	eor	r18, r19
    4b14:	30 e0       	ldi	r19, 0x00	; 0
    4b16:	82 17       	cp	r24, r18
    4b18:	93 07       	cpc	r25, r19
    4b1a:	29 f5       	brne	.+74     	; 0x4b66 <_ZN12ClickEncoder7serviceEv+0x16c>
      if (keyDownTicks /*> ENC_BUTTONINTERVAL*/) {
    4b1c:	80 91 d7 09 	lds	r24, 0x09D7
    4b20:	90 91 d8 09 	lds	r25, 0x09D8
    4b24:	89 2b       	or	r24, r25
    4b26:	d9 f0       	breq	.+54     	; 0x4b5e <_ZN12ClickEncoder7serviceEv+0x164>
        if (button == Held) {
    4b28:	8b 85       	ldd	r24, Y+11	; 0x0b
    4b2a:	83 30       	cpi	r24, 0x03	; 3
    4b2c:	29 f4       	brne	.+10     	; 0x4b38 <_ZN12ClickEncoder7serviceEv+0x13e>
          button = Released;
    4b2e:	84 e0       	ldi	r24, 0x04	; 4
    4b30:	8b 87       	std	Y+11, r24	; 0x0b
          doubleClickTicks = 0;
    4b32:	10 92 d6 09 	sts	0x09D6, r1
    4b36:	13 c0       	rjmp	.+38     	; 0x4b5e <_ZN12ClickEncoder7serviceEv+0x164>
        }
        else {
          #define ENC_SINGLECLICKONLY 1
          if (doubleClickTicks > ENC_SINGLECLICKONLY) {   // prevent trigger in single click mode
    4b38:	80 91 d6 09 	lds	r24, 0x09D6
    4b3c:	82 30       	cpi	r24, 0x02	; 2
    4b3e:	38 f0       	brcs	.+14     	; 0x4b4e <_ZN12ClickEncoder7serviceEv+0x154>
            if (doubleClickTicks < (ENC_DOUBLECLICKTIME / ENC_BUTTONINTERVAL)) {
    4b40:	8c 33       	cpi	r24, 0x3C	; 60
    4b42:	68 f4       	brcc	.+26     	; 0x4b5e <_ZN12ClickEncoder7serviceEv+0x164>
              button = DoubleClicked;
    4b44:	86 e0       	ldi	r24, 0x06	; 6
    4b46:	8b 87       	std	Y+11, r24	; 0x0b
              doubleClickTicks = 0;
    4b48:	10 92 d6 09 	sts	0x09D6, r1
    4b4c:	08 c0       	rjmp	.+16     	; 0x4b5e <_ZN12ClickEncoder7serviceEv+0x164>
            }
          }
          else {
            doubleClickTicks = (doubleClickEnabled) ? (ENC_DOUBLECLICKTIME / ENC_BUTTONINTERVAL) : ENC_SINGLECLICKONLY;
    4b4e:	8c 85       	ldd	r24, Y+12	; 0x0c
    4b50:	81 11       	cpse	r24, r1
    4b52:	02 c0       	rjmp	.+4      	; 0x4b58 <_ZN12ClickEncoder7serviceEv+0x15e>
    4b54:	81 e0       	ldi	r24, 0x01	; 1
    4b56:	01 c0       	rjmp	.+2      	; 0x4b5a <_ZN12ClickEncoder7serviceEv+0x160>
    4b58:	8c e3       	ldi	r24, 0x3C	; 60
    4b5a:	80 93 d6 09 	sts	0x09D6, r24
          }
        }
      }

      keyDownTicks = 0;
    4b5e:	10 92 d8 09 	sts	0x09D8, r1
    4b62:	10 92 d7 09 	sts	0x09D7, r1
    }
  
    if (doubleClickTicks > 0) {
    4b66:	80 91 d6 09 	lds	r24, 0x09D6
    4b6a:	88 23       	and	r24, r24
    4b6c:	39 f0       	breq	.+14     	; 0x4b7c <_ZN12ClickEncoder7serviceEv+0x182>
      doubleClickTicks--;
      if (--doubleClickTicks == 0) {
    4b6e:	82 50       	subi	r24, 0x02	; 2
    4b70:	80 93 d6 09 	sts	0x09D6, r24
    4b74:	81 11       	cpse	r24, r1
    4b76:	02 c0       	rjmp	.+4      	; 0x4b7c <_ZN12ClickEncoder7serviceEv+0x182>
        button = Clicked;
    4b78:	85 e0       	ldi	r24, 0x05	; 5
    4b7a:	8b 87       	std	Y+11, r24	; 0x0b
      }
    }
  }
#endif // WITHOUT_BUTTON

}
    4b7c:	df 91       	pop	r29
    4b7e:	cf 91       	pop	r28
    4b80:	1f 91       	pop	r17
    4b82:	0f 91       	pop	r16
    4b84:	ff 90       	pop	r15
    4b86:	ef 90       	pop	r14
    4b88:	df 90       	pop	r13
    4b8a:	cf 90       	pop	r12
    4b8c:	08 95       	ret

00004b8e <_ZN12ClickEncoder8getValueEv>:

// ----------------------------------------------------------------------------

int16_t ClickEncoder::getValue(void)
{
    4b8e:	fc 01       	movw	r30, r24
  int16_t val;
  
  cli();
    4b90:	f8 94       	cli
  val = delta;
    4b92:	24 81       	ldd	r18, Z+4	; 0x04
    4b94:	35 81       	ldd	r19, Z+5	; 0x05

  if (steps == 2) delta = val & 1;
    4b96:	80 85       	ldd	r24, Z+8	; 0x08
    4b98:	82 30       	cpi	r24, 0x02	; 2
    4b9a:	31 f4       	brne	.+12     	; 0x4ba8 <_ZN12ClickEncoder8getValueEv+0x1a>
    4b9c:	c9 01       	movw	r24, r18
    4b9e:	81 70       	andi	r24, 0x01	; 1
    4ba0:	99 27       	eor	r25, r25
    4ba2:	95 83       	std	Z+5, r25	; 0x05
    4ba4:	84 83       	std	Z+4, r24	; 0x04
    4ba6:	0a c0       	rjmp	.+20     	; 0x4bbc <_ZN12ClickEncoder8getValueEv+0x2e>
  else if (steps == 4) delta = val & 3;
    4ba8:	84 30       	cpi	r24, 0x04	; 4
    4baa:	31 f4       	brne	.+12     	; 0x4bb8 <_ZN12ClickEncoder8getValueEv+0x2a>
    4bac:	c9 01       	movw	r24, r18
    4bae:	83 70       	andi	r24, 0x03	; 3
    4bb0:	99 27       	eor	r25, r25
    4bb2:	95 83       	std	Z+5, r25	; 0x05
    4bb4:	84 83       	std	Z+4, r24	; 0x04
    4bb6:	02 c0       	rjmp	.+4      	; 0x4bbc <_ZN12ClickEncoder8getValueEv+0x2e>
  else delta = 0; // default to 1 step per notch
    4bb8:	15 82       	std	Z+5, r1	; 0x05
    4bba:	14 82       	std	Z+4, r1	; 0x04

  sei();
    4bbc:	78 94       	sei
  
  if (steps == 4) val >>= 2;
    4bbe:	80 85       	ldd	r24, Z+8	; 0x08
    4bc0:	84 30       	cpi	r24, 0x04	; 4
    4bc2:	29 f4       	brne	.+10     	; 0x4bce <_ZN12ClickEncoder8getValueEv+0x40>
    4bc4:	35 95       	asr	r19
    4bc6:	27 95       	ror	r18
    4bc8:	35 95       	asr	r19
    4bca:	27 95       	ror	r18
    4bcc:	04 c0       	rjmp	.+8      	; 0x4bd6 <_ZN12ClickEncoder8getValueEv+0x48>
  if (steps == 2) val >>= 1;
    4bce:	82 30       	cpi	r24, 0x02	; 2
    4bd0:	11 f4       	brne	.+4      	; 0x4bd6 <_ZN12ClickEncoder8getValueEv+0x48>
    4bd2:	35 95       	asr	r19
    4bd4:	27 95       	ror	r18

  int16_t r = 0;
  int16_t accel = ((accelerationEnabled) ? (acceleration >> 8) : 0);
    4bd6:	85 85       	ldd	r24, Z+13	; 0x0d
    4bd8:	88 23       	and	r24, r24
    4bda:	29 f0       	breq	.+10     	; 0x4be6 <_ZN12ClickEncoder8getValueEv+0x58>
    4bdc:	81 85       	ldd	r24, Z+9	; 0x09
    4bde:	92 85       	ldd	r25, Z+10	; 0x0a
    4be0:	89 2f       	mov	r24, r25
    4be2:	99 27       	eor	r25, r25
    4be4:	02 c0       	rjmp	.+4      	; 0x4bea <_ZN12ClickEncoder8getValueEv+0x5c>
    4be6:	80 e0       	ldi	r24, 0x00	; 0
    4be8:	90 e0       	ldi	r25, 0x00	; 0

  if (val < 0) {
    4bea:	33 23       	and	r19, r19
    4bec:	1c f4       	brge	.+6      	; 0x4bf4 <_ZN12ClickEncoder8getValueEv+0x66>
    r -= 1 + accel;
    4bee:	80 95       	com	r24
    4bf0:	90 95       	com	r25
    4bf2:	08 95       	ret
  }
  else if (val > 0) {
    4bf4:	12 16       	cp	r1, r18
    4bf6:	13 06       	cpc	r1, r19
    4bf8:	14 f4       	brge	.+4      	; 0x4bfe <_ZN12ClickEncoder8getValueEv+0x70>
    r += 1 + accel;
    4bfa:	01 96       	adiw	r24, 0x01	; 1
    4bfc:	08 95       	ret
  sei();
  
  if (steps == 4) val >>= 2;
  if (steps == 2) val >>= 1;

  int16_t r = 0;
    4bfe:	80 e0       	ldi	r24, 0x00	; 0
    4c00:	90 e0       	ldi	r25, 0x00	; 0
  else if (val > 0) {
    r += 1 + accel;
  }

  return r;
}
    4c02:	08 95       	ret

00004c04 <_ZN12ClickEncoder9getButtonEv>:

// ----------------------------------------------------------------------------

#ifndef WITHOUT_BUTTON
ClickEncoder::Button ClickEncoder::getButton(void)
{
    4c04:	fc 01       	movw	r30, r24
  ClickEncoder::Button ret = button;
    4c06:	83 85       	ldd	r24, Z+11	; 0x0b
  if (button != ClickEncoder::Held) {
    4c08:	93 85       	ldd	r25, Z+11	; 0x0b
    4c0a:	93 30       	cpi	r25, 0x03	; 3
    4c0c:	09 f0       	breq	.+2      	; 0x4c10 <_ZN12ClickEncoder9getButtonEv+0xc>
    button = ClickEncoder::Open; // reset
    4c0e:	13 86       	std	Z+11, r1	; 0x0b
  }
  return ret;
}
    4c10:	08 95       	ret

00004c12 <_ZN5I2CIOC1Ev>:
      // Remove the values which are not inputs and get the value of the pin
      pinVal = this->read() & _dirMask;
      pinVal = ( pinVal >> pin ) & 0x01; // Get the pin value
   }
   return (pinVal);
}
    4c12:	fc 01       	movw	r30, r24
    4c14:	12 82       	std	Z+2, r1	; 0x02
    4c16:	8f ef       	ldi	r24, 0xFF	; 255
    4c18:	81 83       	std	Z+1, r24	; 0x01
    4c1a:	10 82       	st	Z, r1
    4c1c:	13 82       	std	Z+3, r1	; 0x03
    4c1e:	08 95       	ret

00004c20 <_ZN5I2CIO8portModeEh>:
    4c20:	fc 01       	movw	r30, r24
    4c22:	23 81       	ldd	r18, Z+3	; 0x03
    4c24:	22 23       	and	r18, r18
    4c26:	39 f0       	breq	.+14     	; 0x4c36 <_ZN5I2CIO8portModeEh+0x16>
    4c28:	61 11       	cpse	r22, r1
    4c2a:	03 c0       	rjmp	.+6      	; 0x4c32 <_ZN5I2CIO8portModeEh+0x12>
    4c2c:	2f ef       	ldi	r18, 0xFF	; 255
    4c2e:	21 83       	std	Z+1, r18	; 0x01
    4c30:	08 95       	ret
    4c32:	fc 01       	movw	r30, r24
    4c34:	11 82       	std	Z+1, r1	; 0x01
    4c36:	08 95       	ret

00004c38 <_ZN5I2CIO5beginEh>:
    4c38:	cf 93       	push	r28
    4c3a:	df 93       	push	r29
    4c3c:	ec 01       	movw	r28, r24
    4c3e:	6a 83       	std	Y+2, r22	; 0x02
    4c40:	80 e5       	ldi	r24, 0x50	; 80
    4c42:	9a e0       	ldi	r25, 0x0A	; 10
    4c44:	06 d5       	rcall	.+2572   	; 0x5652 <_ZN7TwoWire5beginEv>
    4c46:	41 e0       	ldi	r20, 0x01	; 1
    4c48:	6a 81       	ldd	r22, Y+2	; 0x02
    4c4a:	80 e5       	ldi	r24, 0x50	; 80
    4c4c:	9a e0       	ldi	r25, 0x0A	; 10
    4c4e:	17 d5       	rcall	.+2606   	; 0x567e <_ZN7TwoWire11requestFromEhh>
    4c50:	91 e0       	ldi	r25, 0x01	; 1
    4c52:	81 11       	cpse	r24, r1
    4c54:	01 c0       	rjmp	.+2      	; 0x4c58 <_ZN5I2CIO5beginEh+0x20>
    4c56:	90 e0       	ldi	r25, 0x00	; 0
    4c58:	9b 83       	std	Y+3, r25	; 0x03
    4c5a:	80 e5       	ldi	r24, 0x50	; 80
    4c5c:	9a e0       	ldi	r25, 0x0A	; 10
    4c5e:	66 d4       	rcall	.+2252   	; 0x552c <_ZN7TwoWire4readEv>
    4c60:	88 83       	st	Y, r24
    4c62:	8b 81       	ldd	r24, Y+3	; 0x03
    4c64:	90 e0       	ldi	r25, 0x00	; 0
    4c66:	df 91       	pop	r29
    4c68:	cf 91       	pop	r28
    4c6a:	08 95       	ret

00004c6c <_ZN5I2CIO5writeEh>:
}

//
// write
int I2CIO::write ( uint8_t value )
{
    4c6c:	cf 93       	push	r28
    4c6e:	df 93       	push	r29
   int status = 0;
   
   if ( _initialised )
    4c70:	fc 01       	movw	r30, r24
    4c72:	23 81       	ldd	r18, Z+3	; 0x03
    4c74:	22 23       	and	r18, r18
    4c76:	99 f0       	breq	.+38     	; 0x4c9e <_ZN5I2CIO5writeEh+0x32>
    4c78:	ec 01       	movw	r28, r24
   {
      // Only write HIGH the values of the ports that have been initialised as
      // outputs updating the output shadow of the device
      _shadow = ( value & ~(_dirMask) );
    4c7a:	81 81       	ldd	r24, Z+1	; 0x01
    4c7c:	80 95       	com	r24
    4c7e:	68 23       	and	r22, r24
    4c80:	60 83       	st	Z, r22
   
      Wire.beginTransmission ( _i2cAddr );
    4c82:	62 81       	ldd	r22, Z+2	; 0x02
    4c84:	80 e5       	ldi	r24, 0x50	; 80
    4c86:	9a e0       	ldi	r25, 0x0A	; 10
    4c88:	fd d4       	rcall	.+2554   	; 0x5684 <_ZN7TwoWire17beginTransmissionEh>
#if (ARDUINO <  100)
      Wire.send ( _shadow );
#else
      Wire.write ( _shadow );
    4c8a:	68 81       	ld	r22, Y
    4c8c:	80 e5       	ldi	r24, 0x50	; 80
    4c8e:	9a e0       	ldi	r25, 0x0A	; 10
    4c90:	a0 d4       	rcall	.+2368   	; 0x55d2 <_ZN7TwoWire5writeEh>
#endif  
      status = Wire.endTransmission ();
    4c92:	80 e5       	ldi	r24, 0x50	; 80
    4c94:	9a e0       	ldi	r25, 0x0A	; 10
    4c96:	12 d5       	rcall	.+2596   	; 0x56bc <_ZN7TwoWire15endTransmissionEv>
    4c98:	28 2f       	mov	r18, r24
    4c9a:	30 e0       	ldi	r19, 0x00	; 0
    4c9c:	02 c0       	rjmp	.+4      	; 0x4ca2 <_ZN5I2CIO5writeEh+0x36>

//
// write
int I2CIO::write ( uint8_t value )
{
   int status = 0;
    4c9e:	20 e0       	ldi	r18, 0x00	; 0
    4ca0:	30 e0       	ldi	r19, 0x00	; 0
#else
      Wire.write ( _shadow );
#endif  
      status = Wire.endTransmission ();
   }
   return ( (status == 0) );
    4ca2:	81 e0       	ldi	r24, 0x01	; 1
    4ca4:	90 e0       	ldi	r25, 0x00	; 0
    4ca6:	23 2b       	or	r18, r19
    4ca8:	11 f0       	breq	.+4      	; 0x4cae <_ZN5I2CIO5writeEh+0x42>
    4caa:	80 e0       	ldi	r24, 0x00	; 0
    4cac:	90 e0       	ldi	r25, 0x00	; 0
}
    4cae:	df 91       	pop	r29
    4cb0:	cf 91       	pop	r28
    4cb2:	08 95       	ret

00004cb4 <_ZN3LCD15setBacklightPinEh13t_backlighPol>:
// Switch fully on the LCD (backlight and LCD)
void LCD::on ( void )
{
   display();
   backlight();
}
    4cb4:	08 95       	ret

00004cb6 <_ZN3LCD12setBacklightEh>:
    4cb6:	08 95       	ret

00004cb8 <_ZN3LCD5writeEh>:
    4cb8:	dc 01       	movw	r26, r24
    4cba:	ed 91       	ld	r30, X+
    4cbc:	fc 91       	ld	r31, X
    4cbe:	02 84       	ldd	r0, Z+10	; 0x0a
    4cc0:	f3 85       	ldd	r31, Z+11	; 0x0b
    4cc2:	e0 2d       	mov	r30, r0
    4cc4:	41 e0       	ldi	r20, 0x01	; 1
    4cc6:	19 95       	eicall
    4cc8:	81 e0       	ldi	r24, 0x01	; 1
    4cca:	90 e0       	ldi	r25, 0x00	; 0
    4ccc:	08 95       	ret

00004cce <_ZN3LCDC1Ev>:
    4cce:	fc 01       	movw	r30, r24
    4cd0:	13 82       	std	Z+3, r1	; 0x03
    4cd2:	12 82       	std	Z+2, r1	; 0x02
    4cd4:	20 e6       	ldi	r18, 0x60	; 96
    4cd6:	35 e0       	ldi	r19, 0x05	; 5
    4cd8:	31 83       	std	Z+1, r19	; 0x01
    4cda:	20 83       	st	Z, r18
    4cdc:	08 95       	ret

00004cde <_ZN3LCD9backlightEv>:
    4cde:	dc 01       	movw	r26, r24
    4ce0:	ed 91       	ld	r30, X+
    4ce2:	fc 91       	ld	r31, X
    4ce4:	00 84       	ldd	r0, Z+8	; 0x08
    4ce6:	f1 85       	ldd	r31, Z+9	; 0x09
    4ce8:	e0 2d       	mov	r30, r0
    4cea:	6f ef       	ldi	r22, 0xFF	; 255
    4cec:	19 95       	eicall
    4cee:	08 95       	ret

00004cf0 <_ZN3LCD7commandEh>:
    4cf0:	dc 01       	movw	r26, r24
    4cf2:	ed 91       	ld	r30, X+
    4cf4:	fc 91       	ld	r31, X
    4cf6:	02 84       	ldd	r0, Z+10	; 0x0a
    4cf8:	f3 85       	ldd	r31, Z+11	; 0x0b
    4cfa:	e0 2d       	mov	r30, r0
    4cfc:	40 e0       	ldi	r20, 0x00	; 0
    4cfe:	19 95       	eicall
    4d00:	08 95       	ret

00004d02 <_ZN3LCD5clearEv>:
    4d02:	61 e0       	ldi	r22, 0x01	; 1
    4d04:	f5 df       	rcall	.-22     	; 0x4cf0 <_ZN3LCD7commandEh>
    4d06:	80 ed       	ldi	r24, 0xD0	; 208
    4d08:	97 e0       	ldi	r25, 0x07	; 7
    4d0a:	0c 94 9d 35 	jmp	0x6b3a	; 0x6b3a <delayMicroseconds>
    4d0e:	08 95       	ret

00004d10 <_ZN3LCD9setCursorEhh>:
    4d10:	cf 93       	push	r28
    4d12:	df 93       	push	r29
    4d14:	cd b7       	in	r28, 0x3d	; 61
    4d16:	de b7       	in	r29, 0x3e	; 62
    4d18:	28 97       	sbiw	r28, 0x08	; 8
    4d1a:	0f b6       	in	r0, 0x3f	; 63
    4d1c:	f8 94       	cli
    4d1e:	de bf       	out	0x3e, r29	; 62
    4d20:	0f be       	out	0x3f, r0	; 63
    4d22:	cd bf       	out	0x3d, r28	; 61
    4d24:	fc 01       	movw	r30, r24
    4d26:	1d 82       	std	Y+5, r1	; 0x05
    4d28:	80 e4       	ldi	r24, 0x40	; 64
    4d2a:	8e 83       	std	Y+6, r24	; 0x06
    4d2c:	94 e1       	ldi	r25, 0x14	; 20
    4d2e:	9f 83       	std	Y+7, r25	; 0x07
    4d30:	94 e5       	ldi	r25, 0x54	; 84
    4d32:	98 87       	std	Y+8, r25	; 0x08
    4d34:	19 82       	std	Y+1, r1	; 0x01
    4d36:	8a 83       	std	Y+2, r24	; 0x02
    4d38:	80 e1       	ldi	r24, 0x10	; 16
    4d3a:	8b 83       	std	Y+3, r24	; 0x03
    4d3c:	80 e5       	ldi	r24, 0x50	; 80
    4d3e:	8c 83       	std	Y+4, r24	; 0x04
    4d40:	87 81       	ldd	r24, Z+7	; 0x07
    4d42:	48 17       	cp	r20, r24
    4d44:	10 f0       	brcs	.+4      	; 0x4d4a <_ZN3LCD9setCursorEhh+0x3a>
    4d46:	4f ef       	ldi	r20, 0xFF	; 255
    4d48:	48 0f       	add	r20, r24
    4d4a:	90 85       	ldd	r25, Z+8	; 0x08
    4d4c:	90 31       	cpi	r25, 0x10	; 16
    4d4e:	61 f4       	brne	.+24     	; 0x4d68 <_ZN3LCD9setCursorEhh+0x58>
    4d50:	84 30       	cpi	r24, 0x04	; 4
    4d52:	51 f4       	brne	.+20     	; 0x4d68 <_ZN3LCD9setCursorEhh+0x58>
    4d54:	de 01       	movw	r26, r28
    4d56:	a4 0f       	add	r26, r20
    4d58:	b1 1d       	adc	r27, r1
    4d5a:	11 96       	adiw	r26, 0x01	; 1
    4d5c:	8c 91       	ld	r24, X
    4d5e:	68 0f       	add	r22, r24
    4d60:	60 68       	ori	r22, 0x80	; 128
    4d62:	cf 01       	movw	r24, r30
    4d64:	c5 df       	rcall	.-118    	; 0x4cf0 <_ZN3LCD7commandEh>
    4d66:	09 c0       	rjmp	.+18     	; 0x4d7a <_ZN3LCD9setCursorEhh+0x6a>
    4d68:	de 01       	movw	r26, r28
    4d6a:	a4 0f       	add	r26, r20
    4d6c:	b1 1d       	adc	r27, r1
    4d6e:	15 96       	adiw	r26, 0x05	; 5
    4d70:	9c 91       	ld	r25, X
    4d72:	69 0f       	add	r22, r25
    4d74:	60 68       	ori	r22, 0x80	; 128
    4d76:	cf 01       	movw	r24, r30
    4d78:	bb df       	rcall	.-138    	; 0x4cf0 <_ZN3LCD7commandEh>
    4d7a:	28 96       	adiw	r28, 0x08	; 8
    4d7c:	0f b6       	in	r0, 0x3f	; 63
    4d7e:	f8 94       	cli
    4d80:	de bf       	out	0x3e, r29	; 62
    4d82:	0f be       	out	0x3f, r0	; 63
    4d84:	cd bf       	out	0x3d, r28	; 61
    4d86:	df 91       	pop	r29
    4d88:	cf 91       	pop	r28
    4d8a:	08 95       	ret

00004d8c <_ZN3LCD7displayEv>:
    4d8c:	fc 01       	movw	r30, r24
    4d8e:	65 81       	ldd	r22, Z+5	; 0x05
    4d90:	26 2f       	mov	r18, r22
    4d92:	24 60       	ori	r18, 0x04	; 4
    4d94:	25 83       	std	Z+5, r18	; 0x05
    4d96:	6c 60       	ori	r22, 0x0C	; 12
    4d98:	ab cf       	rjmp	.-170    	; 0x4cf0 <_ZN3LCD7commandEh>
    4d9a:	08 95       	ret

00004d9c <_ZN3LCD5beginEhhh>:
// can't assume that its in that state when a sketch starts (and the
// LiquidCrystal constructor is called).
// A call to begin() will reinitialize the LCD.
//
void LCD::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
    4d9c:	cf 93       	push	r28
    4d9e:	df 93       	push	r29
    4da0:	ec 01       	movw	r28, r24
   if (lines > 1) 
    4da2:	42 30       	cpi	r20, 0x02	; 2
    4da4:	18 f0       	brcs	.+6      	; 0x4dac <_ZN3LCD5beginEhhh+0x10>
   {
      _displayfunction |= LCD_2LINE;
    4da6:	8c 81       	ldd	r24, Y+4	; 0x04
    4da8:	88 60       	ori	r24, 0x08	; 8
    4daa:	8c 83       	std	Y+4, r24	; 0x04
   }
   _numlines = lines;
    4dac:	4f 83       	std	Y+7, r20	; 0x07
   _cols = cols;
    4dae:	68 87       	std	Y+8, r22	; 0x08
   
   // for some 1 line displays you can select a 10 pixel high font
   // ------------------------------------------------------------
   if ((dotsize != LCD_5x8DOTS) && (lines == 1)) 
    4db0:	22 23       	and	r18, r18
    4db2:	29 f0       	breq	.+10     	; 0x4dbe <_ZN3LCD5beginEhhh+0x22>
    4db4:	41 30       	cpi	r20, 0x01	; 1
    4db6:	19 f4       	brne	.+6      	; 0x4dbe <_ZN3LCD5beginEhhh+0x22>
   {
      _displayfunction |= LCD_5x10DOTS;
    4db8:	8c 81       	ldd	r24, Y+4	; 0x04
    4dba:	84 60       	ori	r24, 0x04	; 4
    4dbc:	8c 83       	std	Y+4, r24	; 0x04
   // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
   // according to datasheet, we need at least 40ms after power rises above 2.7V
   // before sending commands. Arduino can turn on way before 4.5V so we'll wait 
   // 50
   // ---------------------------------------------------------------------------
   delay (100); // 100ms delay
    4dbe:	64 e6       	ldi	r22, 0x64	; 100
    4dc0:	70 e0       	ldi	r23, 0x00	; 0
    4dc2:	80 e0       	ldi	r24, 0x00	; 0
    4dc4:	90 e0       	ldi	r25, 0x00	; 0
    4dc6:	0e 94 74 35 	call	0x6ae8	; 0x6ae8 <delay>
   
   //put the LCD into 4 bit or 8 bit mode
   // -------------------------------------
   if (! (_displayfunction & LCD_8BITMODE)) 
    4dca:	6c 81       	ldd	r22, Y+4	; 0x04
    4dcc:	64 fd       	sbrc	r22, 4
    4dce:	31 c0       	rjmp	.+98     	; 0x4e32 <_ZN3LCD5beginEhhh+0x96>
   {
      // this is according to the hitachi HD44780 datasheet
      // figure 24, pg 46
      
      // we start in 8bit mode, try to set 4 bit mode
      send(0x03, FOUR_BITS);
    4dd0:	e8 81       	ld	r30, Y
    4dd2:	f9 81       	ldd	r31, Y+1	; 0x01
    4dd4:	02 84       	ldd	r0, Z+10	; 0x0a
    4dd6:	f3 85       	ldd	r31, Z+11	; 0x0b
    4dd8:	e0 2d       	mov	r30, r0
    4dda:	42 e0       	ldi	r20, 0x02	; 2
    4ddc:	63 e0       	ldi	r22, 0x03	; 3
    4dde:	ce 01       	movw	r24, r28
    4de0:	19 95       	eicall
      delayMicroseconds(4500); // wait min 4.1ms
    4de2:	84 e9       	ldi	r24, 0x94	; 148
    4de4:	91 e1       	ldi	r25, 0x11	; 17
    4de6:	0e 94 9d 35 	call	0x6b3a	; 0x6b3a <delayMicroseconds>
      
      // second try
      send ( 0x03, FOUR_BITS );
    4dea:	e8 81       	ld	r30, Y
    4dec:	f9 81       	ldd	r31, Y+1	; 0x01
    4dee:	02 84       	ldd	r0, Z+10	; 0x0a
    4df0:	f3 85       	ldd	r31, Z+11	; 0x0b
    4df2:	e0 2d       	mov	r30, r0
    4df4:	42 e0       	ldi	r20, 0x02	; 2
    4df6:	63 e0       	ldi	r22, 0x03	; 3
    4df8:	ce 01       	movw	r24, r28
    4dfa:	19 95       	eicall
      delayMicroseconds(4500); // wait min 4.1ms
    4dfc:	84 e9       	ldi	r24, 0x94	; 148
    4dfe:	91 e1       	ldi	r25, 0x11	; 17
    4e00:	0e 94 9d 35 	call	0x6b3a	; 0x6b3a <delayMicroseconds>
      
      // third go!
      send( 0x03, FOUR_BITS );
    4e04:	e8 81       	ld	r30, Y
    4e06:	f9 81       	ldd	r31, Y+1	; 0x01
    4e08:	02 84       	ldd	r0, Z+10	; 0x0a
    4e0a:	f3 85       	ldd	r31, Z+11	; 0x0b
    4e0c:	e0 2d       	mov	r30, r0
    4e0e:	42 e0       	ldi	r20, 0x02	; 2
    4e10:	63 e0       	ldi	r22, 0x03	; 3
    4e12:	ce 01       	movw	r24, r28
    4e14:	19 95       	eicall
      delayMicroseconds(150);
    4e16:	86 e9       	ldi	r24, 0x96	; 150
    4e18:	90 e0       	ldi	r25, 0x00	; 0
    4e1a:	0e 94 9d 35 	call	0x6b3a	; 0x6b3a <delayMicroseconds>
      
      // finally, set to 4-bit interface
      send ( 0x02, FOUR_BITS ); 
    4e1e:	e8 81       	ld	r30, Y
    4e20:	f9 81       	ldd	r31, Y+1	; 0x01
    4e22:	02 84       	ldd	r0, Z+10	; 0x0a
    4e24:	f3 85       	ldd	r31, Z+11	; 0x0b
    4e26:	e0 2d       	mov	r30, r0
    4e28:	42 e0       	ldi	r20, 0x02	; 2
    4e2a:	62 e0       	ldi	r22, 0x02	; 2
    4e2c:	ce 01       	movw	r24, r28
    4e2e:	19 95       	eicall
    4e30:	13 c0       	rjmp	.+38     	; 0x4e58 <_ZN3LCD5beginEhhh+0xbc>
   {
      // this is according to the hitachi HD44780 datasheet
      // page 45 figure 23
      
      // Send function set command sequence
      command(LCD_FUNCTIONSET | _displayfunction);
    4e32:	60 62       	ori	r22, 0x20	; 32
    4e34:	ce 01       	movw	r24, r28
    4e36:	5c df       	rcall	.-328    	; 0x4cf0 <_ZN3LCD7commandEh>
      delayMicroseconds(4500);  // wait more than 4.1ms
    4e38:	84 e9       	ldi	r24, 0x94	; 148
    4e3a:	91 e1       	ldi	r25, 0x11	; 17
    4e3c:	0e 94 9d 35 	call	0x6b3a	; 0x6b3a <delayMicroseconds>
      
      // second try
      command(LCD_FUNCTIONSET | _displayfunction);
    4e40:	6c 81       	ldd	r22, Y+4	; 0x04
    4e42:	60 62       	ori	r22, 0x20	; 32
    4e44:	ce 01       	movw	r24, r28
    4e46:	54 df       	rcall	.-344    	; 0x4cf0 <_ZN3LCD7commandEh>
      delayMicroseconds(150);
    4e48:	86 e9       	ldi	r24, 0x96	; 150
    4e4a:	90 e0       	ldi	r25, 0x00	; 0
    4e4c:	0e 94 9d 35 	call	0x6b3a	; 0x6b3a <delayMicroseconds>
      
      // third go
      command(LCD_FUNCTIONSET | _displayfunction);
    4e50:	6c 81       	ldd	r22, Y+4	; 0x04
    4e52:	60 62       	ori	r22, 0x20	; 32
    4e54:	ce 01       	movw	r24, r28
    4e56:	4c df       	rcall	.-360    	; 0x4cf0 <_ZN3LCD7commandEh>
   }
   
   // finally, set # lines, font size, etc.
   command(LCD_FUNCTIONSET | _displayfunction);  
    4e58:	6c 81       	ldd	r22, Y+4	; 0x04
    4e5a:	60 62       	ori	r22, 0x20	; 32
    4e5c:	ce 01       	movw	r24, r28
    4e5e:	48 df       	rcall	.-368    	; 0x4cf0 <_ZN3LCD7commandEh>
   
   // turn the display on with no cursor or blinking default
   _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
    4e60:	84 e0       	ldi	r24, 0x04	; 4
    4e62:	8d 83       	std	Y+5, r24	; 0x05
   display();
    4e64:	ce 01       	movw	r24, r28
    4e66:	92 df       	rcall	.-220    	; 0x4d8c <_ZN3LCD7displayEv>
   
   // clear the LCD
   clear();
    4e68:	ce 01       	movw	r24, r28
    4e6a:	4b df       	rcall	.-362    	; 0x4d02 <_ZN3LCD5clearEv>
   
   // Initialize to default text direction (for romance languages)
   _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    4e6c:	82 e0       	ldi	r24, 0x02	; 2
    4e6e:	8e 83       	std	Y+6, r24	; 0x06
   // set the entry mode
   command(LCD_ENTRYMODESET | _displaymode);
    4e70:	66 e0       	ldi	r22, 0x06	; 6
    4e72:	ce 01       	movw	r24, r28
    4e74:	3d df       	rcall	.-390    	; 0x4cf0 <_ZN3LCD7commandEh>

   backlight();
    4e76:	ce 01       	movw	r24, r28
    4e78:	32 df       	rcall	.-412    	; 0x4cde <_ZN3LCD9backlightEv>

}
    4e7a:	df 91       	pop	r29
    4e7c:	cf 91       	pop	r28
    4e7e:	08 95       	ret

00004e80 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>:
   // Initialise pin mapping
   _data_pins[0] = ( 1 << d4 );
   _data_pins[1] = ( 1 << d5 );
   _data_pins[2] = ( 1 << d6 );
   _data_pins[3] = ( 1 << d7 );   
}
    4e80:	21 e0       	ldi	r18, 0x01	; 1
    4e82:	01 c0       	rjmp	.+2      	; 0x4e86 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x6>
    4e84:	22 0f       	add	r18, r18
    4e86:	6a 95       	dec	r22
    4e88:	ea f7       	brpl	.-6      	; 0x4e84 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x4>
    4e8a:	dc 01       	movw	r26, r24
    4e8c:	1b 96       	adiw	r26, 0x0b	; 11
    4e8e:	2c 93       	st	X, r18
    4e90:	1b 97       	sbiw	r26, 0x0b	; 11
    4e92:	19 96       	adiw	r26, 0x09	; 9
    4e94:	4c 93       	st	X, r20
    4e96:	19 97       	sbiw	r26, 0x09	; 9
    4e98:	ed 91       	ld	r30, X+
    4e9a:	fc 91       	ld	r31, X
    4e9c:	00 84       	ldd	r0, Z+8	; 0x08
    4e9e:	f1 85       	ldd	r31, Z+9	; 0x09
    4ea0:	e0 2d       	mov	r30, r0
    4ea2:	60 e0       	ldi	r22, 0x00	; 0
    4ea4:	19 95       	eicall
    4ea6:	08 95       	ret

00004ea8 <_ZN17LiquidCrystal_I2C12setBacklightEh>:
    4ea8:	fc 01       	movw	r30, r24
    4eaa:	83 85       	ldd	r24, Z+11	; 0x0b
    4eac:	88 23       	and	r24, r24
    4eae:	89 f0       	breq	.+34     	; 0x4ed2 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x2a>
    4eb0:	91 85       	ldd	r25, Z+9	; 0x09
    4eb2:	91 11       	cpse	r25, r1
    4eb4:	03 c0       	rjmp	.+6      	; 0x4ebc <_ZN17LiquidCrystal_I2C12setBacklightEh+0x14>
    4eb6:	61 11       	cpse	r22, r1
    4eb8:	05 c0       	rjmp	.+10     	; 0x4ec4 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x1c>
    4eba:	06 c0       	rjmp	.+12     	; 0x4ec8 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    4ebc:	91 30       	cpi	r25, 0x01	; 1
    4ebe:	21 f4       	brne	.+8      	; 0x4ec8 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    4ec0:	61 11       	cpse	r22, r1
    4ec2:	02 c0       	rjmp	.+4      	; 0x4ec8 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    4ec4:	84 87       	std	Z+12, r24	; 0x0c
    4ec6:	01 c0       	rjmp	.+2      	; 0x4eca <_ZN17LiquidCrystal_I2C12setBacklightEh+0x22>
    4ec8:	14 86       	std	Z+12, r1	; 0x0c
    4eca:	64 85       	ldd	r22, Z+12	; 0x0c
    4ecc:	cf 01       	movw	r24, r30
    4ece:	0d 96       	adiw	r24, 0x0d	; 13
    4ed0:	cd ce       	rjmp	.-614    	; 0x4c6c <_ZN5I2CIO5writeEh>
    4ed2:	08 95       	ret

00004ed4 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh>:
    4ed4:	6f 92       	push	r6
    4ed6:	7f 92       	push	r7
    4ed8:	8f 92       	push	r8
    4eda:	af 92       	push	r10
    4edc:	cf 92       	push	r12
    4ede:	df 92       	push	r13
    4ee0:	ef 92       	push	r14
    4ee2:	ff 92       	push	r15
    4ee4:	0f 93       	push	r16
    4ee6:	1f 93       	push	r17
    4ee8:	cf 93       	push	r28
    4eea:	df 93       	push	r29
    4eec:	cd b7       	in	r28, 0x3d	; 61
    4eee:	de b7       	in	r29, 0x3e	; 62
    4ef0:	3c 01       	movw	r6, r24
    4ef2:	d6 2e       	mov	r13, r22
    4ef4:	f4 2e       	mov	r15, r20
    4ef6:	12 2f       	mov	r17, r18
    4ef8:	ea de       	rcall	.-556    	; 0x4cce <_ZN3LCDC1Ev>
    4efa:	80 e7       	ldi	r24, 0x70	; 112
    4efc:	95 e0       	ldi	r25, 0x05	; 5
    4efe:	f3 01       	movw	r30, r6
    4f00:	91 83       	std	Z+1, r25	; 0x01
    4f02:	80 83       	st	Z, r24
    4f04:	c3 01       	movw	r24, r6
    4f06:	0d 96       	adiw	r24, 0x0d	; 13
    4f08:	84 de       	rcall	.-760    	; 0x4c12 <_ZN5I2CIOC1Ev>
    4f0a:	f3 01       	movw	r30, r6
    4f0c:	d2 86       	std	Z+10, r13	; 0x0a
    4f0e:	13 86       	std	Z+11, r1	; 0x0b
    4f10:	14 86       	std	Z+12, r1	; 0x0c
    4f12:	11 86       	std	Z+9, r1	; 0x09
    4f14:	81 e0       	ldi	r24, 0x01	; 1
    4f16:	98 2f       	mov	r25, r24
    4f18:	01 c0       	rjmp	.+2      	; 0x4f1c <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x48>
    4f1a:	99 0f       	add	r25, r25
    4f1c:	fa 94       	dec	r15
    4f1e:	ea f7       	brpl	.-6      	; 0x4f1a <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x46>
    4f20:	91 8b       	std	Z+17, r25	; 0x11
    4f22:	98 2f       	mov	r25, r24
    4f24:	01 c0       	rjmp	.+2      	; 0x4f28 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x54>
    4f26:	99 0f       	add	r25, r25
    4f28:	1a 95       	dec	r17
    4f2a:	ea f7       	brpl	.-6      	; 0x4f26 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x52>
    4f2c:	92 8b       	std	Z+18, r25	; 0x12
    4f2e:	98 2f       	mov	r25, r24
    4f30:	01 c0       	rjmp	.+2      	; 0x4f34 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x60>
    4f32:	99 0f       	add	r25, r25
    4f34:	0a 95       	dec	r16
    4f36:	ea f7       	brpl	.-6      	; 0x4f32 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x5e>
    4f38:	93 8b       	std	Z+19, r25	; 0x13
    4f3a:	98 2f       	mov	r25, r24
    4f3c:	01 c0       	rjmp	.+2      	; 0x4f40 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x6c>
    4f3e:	99 0f       	add	r25, r25
    4f40:	ea 94       	dec	r14
    4f42:	ea f7       	brpl	.-6      	; 0x4f3e <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x6a>
    4f44:	94 8b       	std	Z+20, r25	; 0x14
    4f46:	98 2f       	mov	r25, r24
    4f48:	01 c0       	rjmp	.+2      	; 0x4f4c <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x78>
    4f4a:	99 0f       	add	r25, r25
    4f4c:	ca 94       	dec	r12
    4f4e:	ea f7       	brpl	.-6      	; 0x4f4a <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x76>
    4f50:	95 8b       	std	Z+21, r25	; 0x15
    4f52:	98 2f       	mov	r25, r24
    4f54:	01 c0       	rjmp	.+2      	; 0x4f58 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x84>
    4f56:	99 0f       	add	r25, r25
    4f58:	aa 94       	dec	r10
    4f5a:	ea f7       	brpl	.-6      	; 0x4f56 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x82>
    4f5c:	96 8b       	std	Z+22, r25	; 0x16
    4f5e:	01 c0       	rjmp	.+2      	; 0x4f62 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x8e>
    4f60:	88 0f       	add	r24, r24
    4f62:	8a 94       	dec	r8
    4f64:	ea f7       	brpl	.-6      	; 0x4f60 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x8c>
    4f66:	87 8b       	std	Z+23, r24	; 0x17
    4f68:	df 91       	pop	r29
    4f6a:	cf 91       	pop	r28
    4f6c:	1f 91       	pop	r17
    4f6e:	0f 91       	pop	r16
    4f70:	ff 90       	pop	r15
    4f72:	ef 90       	pop	r14
    4f74:	df 90       	pop	r13
    4f76:	cf 90       	pop	r12
    4f78:	af 90       	pop	r10
    4f7a:	8f 90       	pop	r8
    4f7c:	7f 90       	pop	r7
    4f7e:	6f 90       	pop	r6
    4f80:	08 95       	ret

00004f82 <_ZN17LiquidCrystal_I2C4initEv>:
    4f82:	0f 93       	push	r16
    4f84:	1f 93       	push	r17
    4f86:	cf 93       	push	r28
    4f88:	df 93       	push	r29
    4f8a:	ec 01       	movw	r28, r24
    4f8c:	8c 01       	movw	r16, r24
    4f8e:	03 5f       	subi	r16, 0xF3	; 243
    4f90:	1f 4f       	sbci	r17, 0xFF	; 255
    4f92:	6a 85       	ldd	r22, Y+10	; 0x0a
    4f94:	c8 01       	movw	r24, r16
    4f96:	50 de       	rcall	.-864    	; 0x4c38 <_ZN5I2CIO5beginEh>
    4f98:	01 97       	sbiw	r24, 0x01	; 1
    4f9a:	51 f4       	brne	.+20     	; 0x4fb0 <_ZN17LiquidCrystal_I2C4initEv+0x2e>
    4f9c:	61 e0       	ldi	r22, 0x01	; 1
    4f9e:	c8 01       	movw	r24, r16
    4fa0:	3f de       	rcall	.-898    	; 0x4c20 <_ZN5I2CIO8portModeEh>
    4fa2:	1c 82       	std	Y+4, r1	; 0x04
    4fa4:	60 e0       	ldi	r22, 0x00	; 0
    4fa6:	c8 01       	movw	r24, r16
    4fa8:	61 de       	rcall	.-830    	; 0x4c6c <_ZN5I2CIO5writeEh>
    4faa:	81 e0       	ldi	r24, 0x01	; 1
    4fac:	90 e0       	ldi	r25, 0x00	; 0
    4fae:	02 c0       	rjmp	.+4      	; 0x4fb4 <_ZN17LiquidCrystal_I2C4initEv+0x32>
    4fb0:	80 e0       	ldi	r24, 0x00	; 0
    4fb2:	90 e0       	ldi	r25, 0x00	; 0
    4fb4:	df 91       	pop	r29
    4fb6:	cf 91       	pop	r28
    4fb8:	1f 91       	pop	r17
    4fba:	0f 91       	pop	r16
    4fbc:	08 95       	ret

00004fbe <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
}

//
// pulseEnable
void LiquidCrystal_I2C::pulseEnable (uint8_t data)
{
    4fbe:	ff 92       	push	r15
    4fc0:	0f 93       	push	r16
    4fc2:	1f 93       	push	r17
    4fc4:	cf 93       	push	r28
    4fc6:	df 93       	push	r29
    4fc8:	ec 01       	movw	r28, r24
    4fca:	f6 2e       	mov	r15, r22
   _i2cio.write (data | _En);   // En HIGH
    4fcc:	8c 01       	movw	r16, r24
    4fce:	03 5f       	subi	r16, 0xF3	; 243
    4fd0:	1f 4f       	sbci	r17, 0xFF	; 255
    4fd2:	99 89       	ldd	r25, Y+17	; 0x11
    4fd4:	69 2b       	or	r22, r25
    4fd6:	c8 01       	movw	r24, r16
    4fd8:	49 de       	rcall	.-878    	; 0x4c6c <_ZN5I2CIO5writeEh>
   _i2cio.write (data & ~_En);  // En LOW
    4fda:	99 89       	ldd	r25, Y+17	; 0x11
    4fdc:	90 95       	com	r25
    4fde:	6f 2d       	mov	r22, r15
    4fe0:	69 23       	and	r22, r25
    4fe2:	c8 01       	movw	r24, r16
    4fe4:	43 de       	rcall	.-890    	; 0x4c6c <_ZN5I2CIO5writeEh>
    4fe6:	df 91       	pop	r29
    4fe8:	cf 91       	pop	r28
    4fea:	1f 91       	pop	r17
    4fec:	0f 91       	pop	r16
    4fee:	ff 90       	pop	r15
    4ff0:	08 95       	ret

00004ff2 <_ZN17LiquidCrystal_I2C10write4bitsEhh>:
}

//
// write4bits
void LiquidCrystal_I2C::write4bits ( uint8_t value, uint8_t mode ) 
{
    4ff2:	dc 01       	movw	r26, r24
    4ff4:	fc 01       	movw	r30, r24
    4ff6:	74 96       	adiw	r30, 0x14	; 20
    4ff8:	9c 01       	movw	r18, r24
    4ffa:	28 5e       	subi	r18, 0xE8	; 232
    4ffc:	3f 4f       	sbci	r19, 0xFF	; 255
   uint8_t pinMapValue = 0;
    4ffe:	90 e0       	ldi	r25, 0x00	; 0
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
   {
      if ( ( value & 0x1 ) == 1 )
    5000:	60 ff       	sbrs	r22, 0
    5002:	02 c0       	rjmp	.+4      	; 0x5008 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x16>
      {
         pinMapValue |= _data_pins[i];
    5004:	80 81       	ld	r24, Z
    5006:	98 2b       	or	r25, r24
      }
      value = ( value >> 1 );
    5008:	66 95       	lsr	r22
    500a:	31 96       	adiw	r30, 0x01	; 1
{
   uint8_t pinMapValue = 0;
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
    500c:	e2 17       	cp	r30, r18
    500e:	f3 07       	cpc	r31, r19
    5010:	b9 f7       	brne	.-18     	; 0x5000 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0xe>
      value = ( value >> 1 );
   }
   
   // Is it a command or data
   // -----------------------
   if ( mode == DATA )
    5012:	41 30       	cpi	r20, 0x01	; 1
    5014:	19 f4       	brne	.+6      	; 0x501c <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x2a>
   {
      mode = _Rs;
    5016:	53 96       	adiw	r26, 0x13	; 19
    5018:	4c 91       	ld	r20, X
    501a:	53 97       	sbiw	r26, 0x13	; 19
    501c:	1c 96       	adiw	r26, 0x0c	; 12
    501e:	6c 91       	ld	r22, X
    5020:	1c 97       	sbiw	r26, 0x0c	; 12
    5022:	69 2b       	or	r22, r25
   }
   
   pinMapValue |= mode | _backlightStsMask;
    5024:	64 2b       	or	r22, r20
   pulseEnable ( pinMapValue );
    5026:	cd 01       	movw	r24, r26
    5028:	ca cf       	rjmp	.-108    	; 0x4fbe <_ZN17LiquidCrystal_I2C11pulseEnableEh>
    502a:	08 95       	ret

0000502c <_ZN17LiquidCrystal_I2C4sendEhh>:
//----------------------------------------------------------------------------

//
// send - write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) 
{
    502c:	0f 93       	push	r16
    502e:	1f 93       	push	r17
    5030:	cf 93       	push	r28
    5032:	df 93       	push	r29
    5034:	8c 01       	movw	r16, r24
    5036:	c6 2f       	mov	r28, r22
    5038:	d4 2f       	mov	r29, r20
   // No need to use the delay routines since the time taken to write takes
   // longer that what is needed both for toggling and enable pin an to execute
   // the command.
   
   if ( mode == FOUR_BITS )
    503a:	42 30       	cpi	r20, 0x02	; 2
    503c:	21 f4       	brne	.+8      	; 0x5046 <_ZN17LiquidCrystal_I2C4sendEhh+0x1a>
   {
      write4bits( (value & 0x0F), COMMAND );
    503e:	6f 70       	andi	r22, 0x0F	; 15
    5040:	40 e0       	ldi	r20, 0x00	; 0
    5042:	d7 df       	rcall	.-82     	; 0x4ff2 <_ZN17LiquidCrystal_I2C10write4bitsEhh>
    5044:	0f c0       	rjmp	.+30     	; 0x5064 <_ZN17LiquidCrystal_I2C4sendEhh+0x38>
   }
   else 
   {
      write4bits( (value >> 4), mode );
    5046:	70 e0       	ldi	r23, 0x00	; 0
    5048:	75 95       	asr	r23
    504a:	67 95       	ror	r22
    504c:	75 95       	asr	r23
    504e:	67 95       	ror	r22
    5050:	75 95       	asr	r23
    5052:	67 95       	ror	r22
    5054:	75 95       	asr	r23
    5056:	67 95       	ror	r22
    5058:	cc df       	rcall	.-104    	; 0x4ff2 <_ZN17LiquidCrystal_I2C10write4bitsEhh>
      write4bits( (value & 0x0F), mode);
    505a:	6c 2f       	mov	r22, r28
    505c:	6f 70       	andi	r22, 0x0F	; 15
    505e:	4d 2f       	mov	r20, r29
    5060:	c8 01       	movw	r24, r16
    5062:	c7 df       	rcall	.-114    	; 0x4ff2 <_ZN17LiquidCrystal_I2C10write4bitsEhh>
   }
}
    5064:	df 91       	pop	r29
    5066:	cf 91       	pop	r28
    5068:	1f 91       	pop	r17
    506a:	0f 91       	pop	r16
    506c:	08 95       	ret

0000506e <_ZN17LiquidCrystal_I2C5beginEhhh>:
// ---------------------------------------------------------------------------

//
// begin
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
    506e:	ff 92       	push	r15
    5070:	0f 93       	push	r16
    5072:	1f 93       	push	r17
    5074:	cf 93       	push	r28
    5076:	df 93       	push	r29
    5078:	ec 01       	movw	r28, r24
    507a:	16 2f       	mov	r17, r22
    507c:	04 2f       	mov	r16, r20
    507e:	f2 2e       	mov	r15, r18
   
   init();     // Initialise the I2C expander interface
    5080:	80 df       	rcall	.-256    	; 0x4f82 <_ZN17LiquidCrystal_I2C4initEv>
   LCD::begin ( cols, lines, dotsize );   
    5082:	2f 2d       	mov	r18, r15
    5084:	40 2f       	mov	r20, r16
    5086:	61 2f       	mov	r22, r17
    5088:	ce 01       	movw	r24, r28
    508a:	88 de       	rcall	.-752    	; 0x4d9c <_ZN3LCD5beginEhhh>
}
    508c:	df 91       	pop	r29
    508e:	cf 91       	pop	r28
    5090:	1f 91       	pop	r17
    5092:	0f 91       	pop	r16
    5094:	ff 90       	pop	r15
    5096:	08 95       	ret

00005098 <__vector_20>:
void (*TimerOne::isrCallback)() = NULL;

// interrupt service routine that wraps a user defined function supplied by attachInterrupt
#if defined(__AVR__)
ISR(TIMER1_OVF_vect)
{
    5098:	1f 92       	push	r1
    509a:	0f 92       	push	r0
    509c:	0f b6       	in	r0, 0x3f	; 63
    509e:	0f 92       	push	r0
    50a0:	11 24       	eor	r1, r1
    50a2:	0b b6       	in	r0, 0x3b	; 59
    50a4:	0f 92       	push	r0
    50a6:	2f 93       	push	r18
    50a8:	3f 93       	push	r19
    50aa:	4f 93       	push	r20
    50ac:	5f 93       	push	r21
    50ae:	6f 93       	push	r22
    50b0:	7f 93       	push	r23
    50b2:	8f 93       	push	r24
    50b4:	9f 93       	push	r25
    50b6:	af 93       	push	r26
    50b8:	bf 93       	push	r27
    50ba:	ef 93       	push	r30
    50bc:	ff 93       	push	r31
  Timer1.isrCallback();
    50be:	e0 91 dd 09 	lds	r30, 0x09DD
    50c2:	f0 91 de 09 	lds	r31, 0x09DE
    50c6:	19 95       	eicall
}
    50c8:	ff 91       	pop	r31
    50ca:	ef 91       	pop	r30
    50cc:	bf 91       	pop	r27
    50ce:	af 91       	pop	r26
    50d0:	9f 91       	pop	r25
    50d2:	8f 91       	pop	r24
    50d4:	7f 91       	pop	r23
    50d6:	6f 91       	pop	r22
    50d8:	5f 91       	pop	r21
    50da:	4f 91       	pop	r20
    50dc:	3f 91       	pop	r19
    50de:	2f 91       	pop	r18
    50e0:	0f 90       	pop	r0
    50e2:	0b be       	out	0x3b, r0	; 59
    50e4:	0f 90       	pop	r0
    50e6:	0f be       	out	0x3f, r0	; 63
    50e8:	0f 90       	pop	r0
    50ea:	1f 90       	pop	r1
    50ec:	18 95       	reti

000050ee <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    50ee:	10 92 4f 0a 	sts	0x0A4F, r1
    50f2:	81 e0       	ldi	r24, 0x01	; 1
    50f4:	80 93 4d 0a 	sts	0x0A4D, r24
    50f8:	10 92 4c 0a 	sts	0x0A4C, r1
    50fc:	61 e0       	ldi	r22, 0x01	; 1
    50fe:	84 e1       	ldi	r24, 0x14	; 20
    5100:	0e 94 d5 36 	call	0x6daa	; 0x6daa <digitalWrite>
    5104:	61 e0       	ldi	r22, 0x01	; 1
    5106:	85 e1       	ldi	r24, 0x15	; 21
    5108:	0e 94 d5 36 	call	0x6daa	; 0x6daa <digitalWrite>
    510c:	e9 eb       	ldi	r30, 0xB9	; 185
    510e:	f0 e0       	ldi	r31, 0x00	; 0
    5110:	80 81       	ld	r24, Z
    5112:	8e 7f       	andi	r24, 0xFE	; 254
    5114:	80 83       	st	Z, r24
    5116:	80 81       	ld	r24, Z
    5118:	8d 7f       	andi	r24, 0xFD	; 253
    511a:	80 83       	st	Z, r24
    511c:	88 e4       	ldi	r24, 0x48	; 72
    511e:	80 93 b8 00 	sts	0x00B8, r24
    5122:	85 e4       	ldi	r24, 0x45	; 69
    5124:	80 93 bc 00 	sts	0x00BC, r24
    5128:	08 95       	ret

0000512a <twi_readFrom>:
    512a:	41 32       	cpi	r20, 0x21	; 33
    512c:	08 f0       	brcs	.+2      	; 0x5130 <twi_readFrom+0x6>
    512e:	46 c0       	rjmp	.+140    	; 0x51bc <twi_readFrom+0x92>
    5130:	90 91 4f 0a 	lds	r25, 0x0A4F
    5134:	91 11       	cpse	r25, r1
    5136:	fc cf       	rjmp	.-8      	; 0x5130 <twi_readFrom+0x6>
    5138:	31 e0       	ldi	r19, 0x01	; 1
    513a:	30 93 4f 0a 	sts	0x0A4F, r19
    513e:	20 93 4d 0a 	sts	0x0A4D, r18
    5142:	2f ef       	ldi	r18, 0xFF	; 255
    5144:	20 93 e2 09 	sts	0x09E2, r18
    5148:	10 92 27 0a 	sts	0x0A27, r1
    514c:	24 0f       	add	r18, r20
    514e:	20 93 26 0a 	sts	0x0A26, r18
    5152:	30 93 4e 0a 	sts	0x0A4E, r19
    5156:	20 91 4e 0a 	lds	r18, 0x0A4E
    515a:	88 0f       	add	r24, r24
    515c:	82 2b       	or	r24, r18
    515e:	80 93 4e 0a 	sts	0x0A4E, r24
    5162:	80 91 4c 0a 	lds	r24, 0x0A4C
    5166:	81 30       	cpi	r24, 0x01	; 1
    5168:	51 f4       	brne	.+20     	; 0x517e <twi_readFrom+0x54>
    516a:	10 92 4c 0a 	sts	0x0A4C, r1
    516e:	80 91 4e 0a 	lds	r24, 0x0A4E
    5172:	80 93 bb 00 	sts	0x00BB, r24
    5176:	85 ec       	ldi	r24, 0xC5	; 197
    5178:	80 93 bc 00 	sts	0x00BC, r24
    517c:	03 c0       	rjmp	.+6      	; 0x5184 <twi_readFrom+0x5a>
    517e:	85 ee       	ldi	r24, 0xE5	; 229
    5180:	80 93 bc 00 	sts	0x00BC, r24
    5184:	80 91 4f 0a 	lds	r24, 0x0A4F
    5188:	81 30       	cpi	r24, 0x01	; 1
    518a:	e1 f3       	breq	.-8      	; 0x5184 <twi_readFrom+0x5a>
    518c:	80 91 27 0a 	lds	r24, 0x0A27
    5190:	84 17       	cp	r24, r20
    5192:	10 f4       	brcc	.+4      	; 0x5198 <twi_readFrom+0x6e>
    5194:	40 91 27 0a 	lds	r20, 0x0A27
    5198:	44 23       	and	r20, r20
    519a:	89 f0       	breq	.+34     	; 0x51be <twi_readFrom+0x94>
    519c:	a8 e2       	ldi	r26, 0x28	; 40
    519e:	ba e0       	ldi	r27, 0x0A	; 10
    51a0:	fb 01       	movw	r30, r22
    51a2:	8f ef       	ldi	r24, 0xFF	; 255
    51a4:	84 0f       	add	r24, r20
    51a6:	90 e0       	ldi	r25, 0x00	; 0
    51a8:	01 96       	adiw	r24, 0x01	; 1
    51aa:	68 0f       	add	r22, r24
    51ac:	79 1f       	adc	r23, r25
    51ae:	8d 91       	ld	r24, X+
    51b0:	81 93       	st	Z+, r24
    51b2:	e6 17       	cp	r30, r22
    51b4:	f7 07       	cpc	r31, r23
    51b6:	d9 f7       	brne	.-10     	; 0x51ae <twi_readFrom+0x84>
    51b8:	94 2f       	mov	r25, r20
    51ba:	01 c0       	rjmp	.+2      	; 0x51be <twi_readFrom+0x94>
    51bc:	90 e0       	ldi	r25, 0x00	; 0
    51be:	89 2f       	mov	r24, r25
    51c0:	08 95       	ret

000051c2 <twi_writeTo>:
    51c2:	0f 93       	push	r16
    51c4:	41 32       	cpi	r20, 0x21	; 33
    51c6:	08 f0       	brcs	.+2      	; 0x51ca <twi_writeTo+0x8>
    51c8:	51 c0       	rjmp	.+162    	; 0x526c <twi_writeTo+0xaa>
    51ca:	30 91 4f 0a 	lds	r19, 0x0A4F
    51ce:	31 11       	cpse	r19, r1
    51d0:	fc cf       	rjmp	.-8      	; 0x51ca <twi_writeTo+0x8>
    51d2:	92 e0       	ldi	r25, 0x02	; 2
    51d4:	90 93 4f 0a 	sts	0x0A4F, r25
    51d8:	00 93 4d 0a 	sts	0x0A4D, r16
    51dc:	9f ef       	ldi	r25, 0xFF	; 255
    51de:	90 93 e2 09 	sts	0x09E2, r25
    51e2:	10 92 27 0a 	sts	0x0A27, r1
    51e6:	40 93 26 0a 	sts	0x0A26, r20
    51ea:	44 23       	and	r20, r20
    51ec:	71 f0       	breq	.+28     	; 0x520a <twi_writeTo+0x48>
    51ee:	fb 01       	movw	r30, r22
    51f0:	a8 e2       	ldi	r26, 0x28	; 40
    51f2:	ba e0       	ldi	r27, 0x0A	; 10
    51f4:	41 50       	subi	r20, 0x01	; 1
    51f6:	50 e0       	ldi	r21, 0x00	; 0
    51f8:	4f 5f       	subi	r20, 0xFF	; 255
    51fa:	5f 4f       	sbci	r21, 0xFF	; 255
    51fc:	64 0f       	add	r22, r20
    51fe:	75 1f       	adc	r23, r21
    5200:	91 91       	ld	r25, Z+
    5202:	9d 93       	st	X+, r25
    5204:	e6 17       	cp	r30, r22
    5206:	f7 07       	cpc	r31, r23
    5208:	d9 f7       	brne	.-10     	; 0x5200 <twi_writeTo+0x3e>
    520a:	10 92 4e 0a 	sts	0x0A4E, r1
    520e:	90 91 4e 0a 	lds	r25, 0x0A4E
    5212:	88 0f       	add	r24, r24
    5214:	89 2b       	or	r24, r25
    5216:	80 93 4e 0a 	sts	0x0A4E, r24
    521a:	80 91 4c 0a 	lds	r24, 0x0A4C
    521e:	81 30       	cpi	r24, 0x01	; 1
    5220:	51 f4       	brne	.+20     	; 0x5236 <twi_writeTo+0x74>
    5222:	10 92 4c 0a 	sts	0x0A4C, r1
    5226:	80 91 4e 0a 	lds	r24, 0x0A4E
    522a:	80 93 bb 00 	sts	0x00BB, r24
    522e:	85 ec       	ldi	r24, 0xC5	; 197
    5230:	80 93 bc 00 	sts	0x00BC, r24
    5234:	03 c0       	rjmp	.+6      	; 0x523c <twi_writeTo+0x7a>
    5236:	85 ee       	ldi	r24, 0xE5	; 229
    5238:	80 93 bc 00 	sts	0x00BC, r24
    523c:	22 23       	and	r18, r18
    523e:	41 f0       	breq	.+16     	; 0x5250 <twi_writeTo+0x8e>
    5240:	80 91 4f 0a 	lds	r24, 0x0A4F
    5244:	82 30       	cpi	r24, 0x02	; 2
    5246:	21 f4       	brne	.+8      	; 0x5250 <twi_writeTo+0x8e>
    5248:	80 91 4f 0a 	lds	r24, 0x0A4F
    524c:	82 30       	cpi	r24, 0x02	; 2
    524e:	e1 f3       	breq	.-8      	; 0x5248 <twi_writeTo+0x86>
    5250:	80 91 e2 09 	lds	r24, 0x09E2
    5254:	8f 3f       	cpi	r24, 0xFF	; 255
    5256:	79 f0       	breq	.+30     	; 0x5276 <twi_writeTo+0xb4>
    5258:	80 91 e2 09 	lds	r24, 0x09E2
    525c:	80 32       	cpi	r24, 0x20	; 32
    525e:	41 f0       	breq	.+16     	; 0x5270 <twi_writeTo+0xae>
    5260:	80 91 e2 09 	lds	r24, 0x09E2
    5264:	80 33       	cpi	r24, 0x30	; 48
    5266:	31 f0       	breq	.+12     	; 0x5274 <twi_writeTo+0xb2>
    5268:	34 e0       	ldi	r19, 0x04	; 4
    526a:	05 c0       	rjmp	.+10     	; 0x5276 <twi_writeTo+0xb4>
    526c:	31 e0       	ldi	r19, 0x01	; 1
    526e:	03 c0       	rjmp	.+6      	; 0x5276 <twi_writeTo+0xb4>
    5270:	32 e0       	ldi	r19, 0x02	; 2
    5272:	01 c0       	rjmp	.+2      	; 0x5276 <twi_writeTo+0xb4>
    5274:	33 e0       	ldi	r19, 0x03	; 3
    5276:	83 2f       	mov	r24, r19
    5278:	0f 91       	pop	r16
    527a:	08 95       	ret

0000527c <twi_transmit>:
    527c:	61 32       	cpi	r22, 0x21	; 33
    527e:	c8 f4       	brcc	.+50     	; 0x52b2 <twi_transmit+0x36>
    5280:	20 91 4f 0a 	lds	r18, 0x0A4F
    5284:	24 30       	cpi	r18, 0x04	; 4
    5286:	b9 f4       	brne	.+46     	; 0x52b6 <twi_transmit+0x3a>
    5288:	60 93 04 0a 	sts	0x0A04, r22
    528c:	66 23       	and	r22, r22
    528e:	a9 f0       	breq	.+42     	; 0x52ba <twi_transmit+0x3e>
    5290:	fc 01       	movw	r30, r24
    5292:	a6 e0       	ldi	r26, 0x06	; 6
    5294:	ba e0       	ldi	r27, 0x0A	; 10
    5296:	61 50       	subi	r22, 0x01	; 1
    5298:	26 2f       	mov	r18, r22
    529a:	30 e0       	ldi	r19, 0x00	; 0
    529c:	2f 5f       	subi	r18, 0xFF	; 255
    529e:	3f 4f       	sbci	r19, 0xFF	; 255
    52a0:	28 0f       	add	r18, r24
    52a2:	39 1f       	adc	r19, r25
    52a4:	91 91       	ld	r25, Z+
    52a6:	9d 93       	st	X+, r25
    52a8:	e2 17       	cp	r30, r18
    52aa:	f3 07       	cpc	r31, r19
    52ac:	d9 f7       	brne	.-10     	; 0x52a4 <twi_transmit+0x28>
    52ae:	80 e0       	ldi	r24, 0x00	; 0
    52b0:	08 95       	ret
    52b2:	81 e0       	ldi	r24, 0x01	; 1
    52b4:	08 95       	ret
    52b6:	82 e0       	ldi	r24, 0x02	; 2
    52b8:	08 95       	ret
    52ba:	80 e0       	ldi	r24, 0x00	; 0
    52bc:	08 95       	ret

000052be <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    52be:	85 ed       	ldi	r24, 0xD5	; 213
    52c0:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    52c4:	ec eb       	ldi	r30, 0xBC	; 188
    52c6:	f0 e0       	ldi	r31, 0x00	; 0
    52c8:	80 81       	ld	r24, Z
    52ca:	84 fd       	sbrc	r24, 4
    52cc:	fd cf       	rjmp	.-6      	; 0x52c8 <twi_stop+0xa>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    52ce:	10 92 4f 0a 	sts	0x0A4F, r1
    52d2:	08 95       	ret

000052d4 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    52d4:	85 ec       	ldi	r24, 0xC5	; 197
    52d6:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
    52da:	10 92 4f 0a 	sts	0x0A4F, r1
    52de:	08 95       	ret

000052e0 <__vector_39>:
}

ISR(TWI_vect)
{
    52e0:	1f 92       	push	r1
    52e2:	0f 92       	push	r0
    52e4:	0f b6       	in	r0, 0x3f	; 63
    52e6:	0f 92       	push	r0
    52e8:	11 24       	eor	r1, r1
    52ea:	0b b6       	in	r0, 0x3b	; 59
    52ec:	0f 92       	push	r0
    52ee:	2f 93       	push	r18
    52f0:	3f 93       	push	r19
    52f2:	4f 93       	push	r20
    52f4:	5f 93       	push	r21
    52f6:	6f 93       	push	r22
    52f8:	7f 93       	push	r23
    52fa:	8f 93       	push	r24
    52fc:	9f 93       	push	r25
    52fe:	af 93       	push	r26
    5300:	bf 93       	push	r27
    5302:	ef 93       	push	r30
    5304:	ff 93       	push	r31
  switch(TW_STATUS){
    5306:	80 91 b9 00 	lds	r24, 0x00B9
    530a:	88 7f       	andi	r24, 0xF8	; 248
    530c:	90 e0       	ldi	r25, 0x00	; 0
    530e:	89 3c       	cpi	r24, 0xC9	; 201
    5310:	91 05       	cpc	r25, r1
    5312:	08 f0       	brcs	.+2      	; 0x5316 <__vector_39+0x36>
    5314:	f0 c0       	rjmp	.+480    	; 0x54f6 <__vector_39+0x216>
    5316:	fc 01       	movw	r30, r24
    5318:	88 27       	eor	r24, r24
    531a:	ea 57       	subi	r30, 0x7A	; 122
    531c:	ff 4f       	sbci	r31, 0xFF	; 255
    531e:	8f 4f       	sbci	r24, 0xFF	; 255
    5320:	0c 94 b2 3a 	jmp	0x7564	; 0x7564 <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    5324:	80 91 4e 0a 	lds	r24, 0x0A4E
    5328:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    532c:	85 ec       	ldi	r24, 0xC5	; 197
    532e:	80 93 bc 00 	sts	0x00BC, r24
    5332:	e1 c0       	rjmp	.+450    	; 0x54f6 <__vector_39+0x216>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    5334:	90 91 27 0a 	lds	r25, 0x0A27
    5338:	80 91 26 0a 	lds	r24, 0x0A26
    533c:	98 17       	cp	r25, r24
    533e:	80 f4       	brcc	.+32     	; 0x5360 <__vector_39+0x80>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    5340:	e0 91 27 0a 	lds	r30, 0x0A27
    5344:	81 e0       	ldi	r24, 0x01	; 1
    5346:	8e 0f       	add	r24, r30
    5348:	80 93 27 0a 	sts	0x0A27, r24
    534c:	f0 e0       	ldi	r31, 0x00	; 0
    534e:	e8 5d       	subi	r30, 0xD8	; 216
    5350:	f5 4f       	sbci	r31, 0xF5	; 245
    5352:	80 81       	ld	r24, Z
    5354:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5358:	85 ec       	ldi	r24, 0xC5	; 197
    535a:	80 93 bc 00 	sts	0x00BC, r24
    535e:	cb c0       	rjmp	.+406    	; 0x54f6 <__vector_39+0x216>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
    5360:	80 91 4d 0a 	lds	r24, 0x0A4D
    5364:	88 23       	and	r24, r24
    5366:	11 f0       	breq	.+4      	; 0x536c <__vector_39+0x8c>
          twi_stop();
    5368:	aa df       	rcall	.-172    	; 0x52be <twi_stop>
    536a:	c5 c0       	rjmp	.+394    	; 0x54f6 <__vector_39+0x216>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    536c:	81 e0       	ldi	r24, 0x01	; 1
    536e:	80 93 4c 0a 	sts	0x0A4C, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    5372:	84 ea       	ldi	r24, 0xA4	; 164
    5374:	80 93 bc 00 	sts	0x00BC, r24
	  twi_state = TWI_READY;
    5378:	10 92 4f 0a 	sts	0x0A4F, r1
    537c:	bc c0       	rjmp	.+376    	; 0x54f6 <__vector_39+0x216>
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    537e:	80 e2       	ldi	r24, 0x20	; 32
    5380:	80 93 e2 09 	sts	0x09E2, r24
      twi_stop();
    5384:	9c df       	rcall	.-200    	; 0x52be <twi_stop>
      break;
    5386:	b7 c0       	rjmp	.+366    	; 0x54f6 <__vector_39+0x216>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    5388:	80 e3       	ldi	r24, 0x30	; 48
    538a:	80 93 e2 09 	sts	0x09E2, r24
      twi_stop();
    538e:	97 df       	rcall	.-210    	; 0x52be <twi_stop>
      break;
    5390:	b2 c0       	rjmp	.+356    	; 0x54f6 <__vector_39+0x216>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    5392:	88 e3       	ldi	r24, 0x38	; 56
    5394:	80 93 e2 09 	sts	0x09E2, r24
      twi_releaseBus();
    5398:	9d df       	rcall	.-198    	; 0x52d4 <twi_releaseBus>
      break;
    539a:	ad c0       	rjmp	.+346    	; 0x54f6 <__vector_39+0x216>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    539c:	e0 91 27 0a 	lds	r30, 0x0A27
    53a0:	81 e0       	ldi	r24, 0x01	; 1
    53a2:	8e 0f       	add	r24, r30
    53a4:	80 93 27 0a 	sts	0x0A27, r24
    53a8:	80 91 bb 00 	lds	r24, 0x00BB
    53ac:	f0 e0       	ldi	r31, 0x00	; 0
    53ae:	e8 5d       	subi	r30, 0xD8	; 216
    53b0:	f5 4f       	sbci	r31, 0xF5	; 245
    53b2:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    53b4:	90 91 27 0a 	lds	r25, 0x0A27
    53b8:	80 91 26 0a 	lds	r24, 0x0A26
    53bc:	98 17       	cp	r25, r24
    53be:	20 f4       	brcc	.+8      	; 0x53c8 <__vector_39+0xe8>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    53c0:	85 ec       	ldi	r24, 0xC5	; 197
    53c2:	80 93 bc 00 	sts	0x00BC, r24
    53c6:	97 c0       	rjmp	.+302    	; 0x54f6 <__vector_39+0x216>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    53c8:	85 e8       	ldi	r24, 0x85	; 133
    53ca:	80 93 bc 00 	sts	0x00BC, r24
    53ce:	93 c0       	rjmp	.+294    	; 0x54f6 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    53d0:	e0 91 27 0a 	lds	r30, 0x0A27
    53d4:	81 e0       	ldi	r24, 0x01	; 1
    53d6:	8e 0f       	add	r24, r30
    53d8:	80 93 27 0a 	sts	0x0A27, r24
    53dc:	80 91 bb 00 	lds	r24, 0x00BB
    53e0:	f0 e0       	ldi	r31, 0x00	; 0
    53e2:	e8 5d       	subi	r30, 0xD8	; 216
    53e4:	f5 4f       	sbci	r31, 0xF5	; 245
    53e6:	80 83       	st	Z, r24
	if (twi_sendStop)
    53e8:	80 91 4d 0a 	lds	r24, 0x0A4D
    53ec:	88 23       	and	r24, r24
    53ee:	11 f0       	breq	.+4      	; 0x53f4 <__vector_39+0x114>
          twi_stop();
    53f0:	66 df       	rcall	.-308    	; 0x52be <twi_stop>
    53f2:	81 c0       	rjmp	.+258    	; 0x54f6 <__vector_39+0x216>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    53f4:	81 e0       	ldi	r24, 0x01	; 1
    53f6:	80 93 4c 0a 	sts	0x0A4C, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    53fa:	84 ea       	ldi	r24, 0xA4	; 164
    53fc:	80 93 bc 00 	sts	0x00BC, r24
	  twi_state = TWI_READY;
    5400:	10 92 4f 0a 	sts	0x0A4F, r1
    5404:	78 c0       	rjmp	.+240    	; 0x54f6 <__vector_39+0x216>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    5406:	5b df       	rcall	.-330    	; 0x52be <twi_stop>
      break;
    5408:	76 c0       	rjmp	.+236    	; 0x54f6 <__vector_39+0x216>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    540a:	83 e0       	ldi	r24, 0x03	; 3
    540c:	80 93 4f 0a 	sts	0x0A4F, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    5410:	10 92 e3 09 	sts	0x09E3, r1
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5414:	85 ec       	ldi	r24, 0xC5	; 197
    5416:	80 93 bc 00 	sts	0x00BC, r24
    541a:	6d c0       	rjmp	.+218    	; 0x54f6 <__vector_39+0x216>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    541c:	80 91 e3 09 	lds	r24, 0x09E3
    5420:	80 32       	cpi	r24, 0x20	; 32
    5422:	80 f4       	brcc	.+32     	; 0x5444 <__vector_39+0x164>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    5424:	e0 91 e3 09 	lds	r30, 0x09E3
    5428:	81 e0       	ldi	r24, 0x01	; 1
    542a:	8e 0f       	add	r24, r30
    542c:	80 93 e3 09 	sts	0x09E3, r24
    5430:	80 91 bb 00 	lds	r24, 0x00BB
    5434:	f0 e0       	ldi	r31, 0x00	; 0
    5436:	ec 51       	subi	r30, 0x1C	; 28
    5438:	f6 4f       	sbci	r31, 0xF6	; 246
    543a:	80 83       	st	Z, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    543c:	85 ec       	ldi	r24, 0xC5	; 197
    543e:	80 93 bc 00 	sts	0x00BC, r24
    5442:	59 c0       	rjmp	.+178    	; 0x54f6 <__vector_39+0x216>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5444:	85 e8       	ldi	r24, 0x85	; 133
    5446:	80 93 bc 00 	sts	0x00BC, r24
    544a:	55 c0       	rjmp	.+170    	; 0x54f6 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    544c:	80 91 e3 09 	lds	r24, 0x09E3
    5450:	80 32       	cpi	r24, 0x20	; 32
    5452:	30 f4       	brcc	.+12     	; 0x5460 <__vector_39+0x180>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    5454:	e0 91 e3 09 	lds	r30, 0x09E3
    5458:	f0 e0       	ldi	r31, 0x00	; 0
    545a:	ec 51       	subi	r30, 0x1C	; 28
    545c:	f6 4f       	sbci	r31, 0xF6	; 246
    545e:	10 82       	st	Z, r1
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
    5460:	2e df       	rcall	.-420    	; 0x52be <twi_stop>
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    5462:	60 91 e3 09 	lds	r22, 0x09E3
    5466:	70 e0       	ldi	r23, 0x00	; 0
    5468:	e0 91 48 0a 	lds	r30, 0x0A48
    546c:	f0 91 49 0a 	lds	r31, 0x0A49
    5470:	84 ee       	ldi	r24, 0xE4	; 228
    5472:	99 e0       	ldi	r25, 0x09	; 9
    5474:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    5476:	10 92 e3 09 	sts	0x09E3, r1
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    547a:	2c df       	rcall	.-424    	; 0x52d4 <twi_releaseBus>
      break;
    547c:	3c c0       	rjmp	.+120    	; 0x54f6 <__vector_39+0x216>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    547e:	85 e8       	ldi	r24, 0x85	; 133
    5480:	80 93 bc 00 	sts	0x00BC, r24
    5484:	38 c0       	rjmp	.+112    	; 0x54f6 <__vector_39+0x216>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    5486:	84 e0       	ldi	r24, 0x04	; 4
    5488:	80 93 4f 0a 	sts	0x0A4F, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    548c:	10 92 05 0a 	sts	0x0A05, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    5490:	10 92 04 0a 	sts	0x0A04, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    5494:	e0 91 4a 0a 	lds	r30, 0x0A4A
    5498:	f0 91 4b 0a 	lds	r31, 0x0A4B
    549c:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    549e:	80 91 04 0a 	lds	r24, 0x0A04
    54a2:	81 11       	cpse	r24, r1
    54a4:	05 c0       	rjmp	.+10     	; 0x54b0 <__vector_39+0x1d0>
        twi_txBufferLength = 1;
    54a6:	81 e0       	ldi	r24, 0x01	; 1
    54a8:	80 93 04 0a 	sts	0x0A04, r24
        twi_txBuffer[0] = 0x00;
    54ac:	10 92 06 0a 	sts	0x0A06, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    54b0:	e0 91 05 0a 	lds	r30, 0x0A05
    54b4:	81 e0       	ldi	r24, 0x01	; 1
    54b6:	8e 0f       	add	r24, r30
    54b8:	80 93 05 0a 	sts	0x0A05, r24
    54bc:	f0 e0       	ldi	r31, 0x00	; 0
    54be:	ea 5f       	subi	r30, 0xFA	; 250
    54c0:	f5 4f       	sbci	r31, 0xF5	; 245
    54c2:	80 81       	ld	r24, Z
    54c4:	80 93 bb 00 	sts	0x00BB, r24
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    54c8:	90 91 05 0a 	lds	r25, 0x0A05
    54cc:	80 91 04 0a 	lds	r24, 0x0A04
    54d0:	98 17       	cp	r25, r24
    54d2:	20 f4       	brcc	.+8      	; 0x54dc <__vector_39+0x1fc>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    54d4:	85 ec       	ldi	r24, 0xC5	; 197
    54d6:	80 93 bc 00 	sts	0x00BC, r24
    54da:	0d c0       	rjmp	.+26     	; 0x54f6 <__vector_39+0x216>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    54dc:	85 e8       	ldi	r24, 0x85	; 133
    54de:	80 93 bc 00 	sts	0x00BC, r24
    54e2:	09 c0       	rjmp	.+18     	; 0x54f6 <__vector_39+0x216>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    54e4:	85 ec       	ldi	r24, 0xC5	; 197
    54e6:	80 93 bc 00 	sts	0x00BC, r24
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    54ea:	10 92 4f 0a 	sts	0x0A4F, r1
      break;
    54ee:	03 c0       	rjmp	.+6      	; 0x54f6 <__vector_39+0x216>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    54f0:	10 92 e2 09 	sts	0x09E2, r1
      twi_stop();
    54f4:	e4 de       	rcall	.-568    	; 0x52be <twi_stop>
      break;
  }
}
    54f6:	ff 91       	pop	r31
    54f8:	ef 91       	pop	r30
    54fa:	bf 91       	pop	r27
    54fc:	af 91       	pop	r26
    54fe:	9f 91       	pop	r25
    5500:	8f 91       	pop	r24
    5502:	7f 91       	pop	r23
    5504:	6f 91       	pop	r22
    5506:	5f 91       	pop	r21
    5508:	4f 91       	pop	r20
    550a:	3f 91       	pop	r19
    550c:	2f 91       	pop	r18
    550e:	0f 90       	pop	r0
    5510:	0b be       	out	0x3b, r0	; 59
    5512:	0f 90       	pop	r0
    5514:	0f be       	out	0x3f, r0	; 63
    5516:	0f 90       	pop	r0
    5518:	1f 90       	pop	r1
    551a:	18 95       	reti

0000551c <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    551c:	80 91 80 0a 	lds	r24, 0x0A80
    5520:	90 e0       	ldi	r25, 0x00	; 0
    5522:	20 91 81 0a 	lds	r18, 0x0A81
    5526:	82 1b       	sub	r24, r18
    5528:	91 09       	sbc	r25, r1
    552a:	08 95       	ret

0000552c <_ZN7TwoWire4readEv>:
    552c:	90 91 81 0a 	lds	r25, 0x0A81
    5530:	80 91 80 0a 	lds	r24, 0x0A80
    5534:	98 17       	cp	r25, r24
    5536:	50 f4       	brcc	.+20     	; 0x554c <_ZN7TwoWire4readEv+0x20>
    5538:	e9 2f       	mov	r30, r25
    553a:	f0 e0       	ldi	r31, 0x00	; 0
    553c:	ee 57       	subi	r30, 0x7E	; 126
    553e:	f5 4f       	sbci	r31, 0xF5	; 245
    5540:	20 81       	ld	r18, Z
    5542:	30 e0       	ldi	r19, 0x00	; 0
    5544:	9f 5f       	subi	r25, 0xFF	; 255
    5546:	90 93 81 0a 	sts	0x0A81, r25
    554a:	02 c0       	rjmp	.+4      	; 0x5550 <_ZN7TwoWire4readEv+0x24>
    554c:	2f ef       	ldi	r18, 0xFF	; 255
    554e:	3f ef       	ldi	r19, 0xFF	; 255
    5550:	c9 01       	movw	r24, r18
    5552:	08 95       	ret

00005554 <_ZN7TwoWire4peekEv>:
    5554:	e0 91 81 0a 	lds	r30, 0x0A81
    5558:	80 91 80 0a 	lds	r24, 0x0A80
    555c:	e8 17       	cp	r30, r24
    555e:	30 f4       	brcc	.+12     	; 0x556c <_ZN7TwoWire4peekEv+0x18>
    5560:	f0 e0       	ldi	r31, 0x00	; 0
    5562:	ee 57       	subi	r30, 0x7E	; 126
    5564:	f5 4f       	sbci	r31, 0xF5	; 245
    5566:	80 81       	ld	r24, Z
    5568:	90 e0       	ldi	r25, 0x00	; 0
    556a:	08 95       	ret
    556c:	8f ef       	ldi	r24, 0xFF	; 255
    556e:	9f ef       	ldi	r25, 0xFF	; 255
    5570:	08 95       	ret

00005572 <_ZN7TwoWire5flushEv>:
    5572:	08 95       	ret

00005574 <_ZN7TwoWire5writeEPKhj>:
    5574:	cf 92       	push	r12
    5576:	df 92       	push	r13
    5578:	ef 92       	push	r14
    557a:	ff 92       	push	r15
    557c:	0f 93       	push	r16
    557e:	1f 93       	push	r17
    5580:	cf 93       	push	r28
    5582:	df 93       	push	r29
    5584:	8c 01       	movw	r16, r24
    5586:	cb 01       	movw	r24, r22
    5588:	6a 01       	movw	r12, r20
    558a:	20 91 5c 0a 	lds	r18, 0x0A5C
    558e:	22 23       	and	r18, r18
    5590:	a1 f0       	breq	.+40     	; 0x55ba <_ZN7TwoWire5writeEPKhj+0x46>
    5592:	41 15       	cp	r20, r1
    5594:	51 05       	cpc	r21, r1
    5596:	99 f0       	breq	.+38     	; 0x55be <_ZN7TwoWire5writeEPKhj+0x4a>
    5598:	eb 01       	movw	r28, r22
    559a:	7b 01       	movw	r14, r22
    559c:	e4 0e       	add	r14, r20
    559e:	f5 1e       	adc	r15, r21
    55a0:	69 91       	ld	r22, Y+
    55a2:	d8 01       	movw	r26, r16
    55a4:	ed 91       	ld	r30, X+
    55a6:	fc 91       	ld	r31, X
    55a8:	01 90       	ld	r0, Z+
    55aa:	f0 81       	ld	r31, Z
    55ac:	e0 2d       	mov	r30, r0
    55ae:	c8 01       	movw	r24, r16
    55b0:	19 95       	eicall
    55b2:	ce 15       	cp	r28, r14
    55b4:	df 05       	cpc	r29, r15
    55b6:	a1 f7       	brne	.-24     	; 0x55a0 <_ZN7TwoWire5writeEPKhj+0x2c>
    55b8:	02 c0       	rjmp	.+4      	; 0x55be <_ZN7TwoWire5writeEPKhj+0x4a>
    55ba:	64 2f       	mov	r22, r20
    55bc:	5f de       	rcall	.-834    	; 0x527c <twi_transmit>
    55be:	c6 01       	movw	r24, r12
    55c0:	df 91       	pop	r29
    55c2:	cf 91       	pop	r28
    55c4:	1f 91       	pop	r17
    55c6:	0f 91       	pop	r16
    55c8:	ff 90       	pop	r15
    55ca:	ef 90       	pop	r14
    55cc:	df 90       	pop	r13
    55ce:	cf 90       	pop	r12
    55d0:	08 95       	ret

000055d2 <_ZN7TwoWire5writeEh>:
    55d2:	cf 93       	push	r28
    55d4:	df 93       	push	r29
    55d6:	1f 92       	push	r1
    55d8:	cd b7       	in	r28, 0x3d	; 61
    55da:	de b7       	in	r29, 0x3e	; 62
    55dc:	fc 01       	movw	r30, r24
    55de:	69 83       	std	Y+1, r22	; 0x01
    55e0:	90 91 5c 0a 	lds	r25, 0x0A5C
    55e4:	99 23       	and	r25, r25
    55e6:	d9 f0       	breq	.+54     	; 0x561e <_ZN7TwoWire5writeEh+0x4c>
    55e8:	90 91 5d 0a 	lds	r25, 0x0A5D
    55ec:	90 32       	cpi	r25, 0x20	; 32
    55ee:	38 f0       	brcs	.+14     	; 0x55fe <_ZN7TwoWire5writeEh+0x2c>
    55f0:	81 e0       	ldi	r24, 0x01	; 1
    55f2:	90 e0       	ldi	r25, 0x00	; 0
    55f4:	93 83       	std	Z+3, r25	; 0x03
    55f6:	82 83       	std	Z+2, r24	; 0x02
    55f8:	80 e0       	ldi	r24, 0x00	; 0
    55fa:	90 e0       	ldi	r25, 0x00	; 0
    55fc:	16 c0       	rjmp	.+44     	; 0x562a <_ZN7TwoWire5writeEh+0x58>
    55fe:	80 91 5e 0a 	lds	r24, 0x0A5E
    5602:	e8 2f       	mov	r30, r24
    5604:	f0 e0       	ldi	r31, 0x00	; 0
    5606:	e1 5a       	subi	r30, 0xA1	; 161
    5608:	f5 4f       	sbci	r31, 0xF5	; 245
    560a:	99 81       	ldd	r25, Y+1	; 0x01
    560c:	90 83       	st	Z, r25
    560e:	8f 5f       	subi	r24, 0xFF	; 255
    5610:	80 93 5e 0a 	sts	0x0A5E, r24
    5614:	80 93 5d 0a 	sts	0x0A5D, r24
    5618:	81 e0       	ldi	r24, 0x01	; 1
    561a:	90 e0       	ldi	r25, 0x00	; 0
    561c:	06 c0       	rjmp	.+12     	; 0x562a <_ZN7TwoWire5writeEh+0x58>
    561e:	61 e0       	ldi	r22, 0x01	; 1
    5620:	ce 01       	movw	r24, r28
    5622:	01 96       	adiw	r24, 0x01	; 1
    5624:	2b de       	rcall	.-938    	; 0x527c <twi_transmit>
    5626:	81 e0       	ldi	r24, 0x01	; 1
    5628:	90 e0       	ldi	r25, 0x00	; 0
    562a:	0f 90       	pop	r0
    562c:	df 91       	pop	r29
    562e:	cf 91       	pop	r28
    5630:	08 95       	ret

00005632 <_ZN7TwoWireC1Ev>:
    5632:	fc 01       	movw	r30, r24
    5634:	13 82       	std	Z+3, r1	; 0x03
    5636:	12 82       	std	Z+2, r1	; 0x02
    5638:	88 ee       	ldi	r24, 0xE8	; 232
    563a:	93 e0       	ldi	r25, 0x03	; 3
    563c:	a0 e0       	ldi	r26, 0x00	; 0
    563e:	b0 e0       	ldi	r27, 0x00	; 0
    5640:	84 83       	std	Z+4, r24	; 0x04
    5642:	95 83       	std	Z+5, r25	; 0x05
    5644:	a6 83       	std	Z+6, r26	; 0x06
    5646:	b7 83       	std	Z+7, r27	; 0x07
    5648:	80 e8       	ldi	r24, 0x80	; 128
    564a:	95 e0       	ldi	r25, 0x05	; 5
    564c:	91 83       	std	Z+1, r25	; 0x01
    564e:	80 83       	st	Z, r24
    5650:	08 95       	ret

00005652 <_ZN7TwoWire5beginEv>:
    5652:	10 92 81 0a 	sts	0x0A81, r1
    5656:	10 92 80 0a 	sts	0x0A80, r1
    565a:	10 92 5e 0a 	sts	0x0A5E, r1
    565e:	10 92 5d 0a 	sts	0x0A5D, r1
    5662:	45 cd       	rjmp	.-1398   	; 0x50ee <twi_init>
    5664:	08 95       	ret

00005666 <_ZN7TwoWire11requestFromEhhh>:
    5666:	86 2f       	mov	r24, r22
    5668:	41 32       	cpi	r20, 0x21	; 33
    566a:	08 f0       	brcs	.+2      	; 0x566e <_ZN7TwoWire11requestFromEhhh+0x8>
    566c:	40 e2       	ldi	r20, 0x20	; 32
    566e:	62 e8       	ldi	r22, 0x82	; 130
    5670:	7a e0       	ldi	r23, 0x0A	; 10
    5672:	5b dd       	rcall	.-1354   	; 0x512a <twi_readFrom>
    5674:	10 92 81 0a 	sts	0x0A81, r1
    5678:	80 93 80 0a 	sts	0x0A80, r24
    567c:	08 95       	ret

0000567e <_ZN7TwoWire11requestFromEhh>:
    567e:	21 e0       	ldi	r18, 0x01	; 1
    5680:	f2 cf       	rjmp	.-28     	; 0x5666 <_ZN7TwoWire11requestFromEhhh>
    5682:	08 95       	ret

00005684 <_ZN7TwoWire17beginTransmissionEh>:
    5684:	81 e0       	ldi	r24, 0x01	; 1
    5686:	80 93 5c 0a 	sts	0x0A5C, r24
    568a:	60 93 7f 0a 	sts	0x0A7F, r22
    568e:	10 92 5e 0a 	sts	0x0A5E, r1
    5692:	10 92 5d 0a 	sts	0x0A5D, r1
    5696:	08 95       	ret

00005698 <_ZN7TwoWire15endTransmissionEh>:
    5698:	0f 93       	push	r16
    569a:	06 2f       	mov	r16, r22
    569c:	21 e0       	ldi	r18, 0x01	; 1
    569e:	40 91 5d 0a 	lds	r20, 0x0A5D
    56a2:	6f e5       	ldi	r22, 0x5F	; 95
    56a4:	7a e0       	ldi	r23, 0x0A	; 10
    56a6:	80 91 7f 0a 	lds	r24, 0x0A7F
    56aa:	8b dd       	rcall	.-1258   	; 0x51c2 <twi_writeTo>
    56ac:	10 92 5e 0a 	sts	0x0A5E, r1
    56b0:	10 92 5d 0a 	sts	0x0A5D, r1
    56b4:	10 92 5c 0a 	sts	0x0A5C, r1
    56b8:	0f 91       	pop	r16
    56ba:	08 95       	ret

000056bc <_ZN7TwoWire15endTransmissionEv>:
    56bc:	61 e0       	ldi	r22, 0x01	; 1
    56be:	ec cf       	rjmp	.-40     	; 0x5698 <_ZN7TwoWire15endTransmissionEh>
    56c0:	08 95       	ret

000056c2 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    56c2:	80 e5       	ldi	r24, 0x50	; 80
    56c4:	9a e0       	ldi	r25, 0x0A	; 10
    56c6:	b5 cf       	rjmp	.-150    	; 0x5632 <_ZN7TwoWireC1Ev>
    56c8:	08 95       	ret

000056ca <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    56ca:	26 e0       	ldi	r18, 0x06	; 6
    56cc:	40 e8       	ldi	r20, 0x80	; 128
    56ce:	55 e2       	ldi	r21, 0x25	; 37
    56d0:	60 e0       	ldi	r22, 0x00	; 0
    56d2:	70 e0       	ldi	r23, 0x00	; 0
    56d4:	88 ea       	ldi	r24, 0xA8	; 168
    56d6:	9a e0       	ldi	r25, 0x0A	; 10
    56d8:	b6 d1       	rcall	.+876    	; 0x5a46 <_ZN14HardwareSerial5beginEmh>
void setup() {
	//Setup the Hardware
	Serial.begin(9600);      // open the serial port at 9600 bps:
	
	//Print out the version
	Serial.println("*************************************");
    56da:	6c e8       	ldi	r22, 0x8C	; 140
    56dc:	75 e0       	ldi	r23, 0x05	; 5
    56de:	88 ea       	ldi	r24, 0xA8	; 168
    56e0:	9a e0       	ldi	r25, 0x0A	; 10
    56e2:	58 d5       	rcall	.+2736   	; 0x6194 <_ZN5Print7printlnEPKc>
	Serial.println("  Project Narwhal Estd. 2015         ");
    56e4:	62 eb       	ldi	r22, 0xB2	; 178
    56e6:	75 e0       	ldi	r23, 0x05	; 5
    56e8:	88 ea       	ldi	r24, 0xA8	; 168
    56ea:	9a e0       	ldi	r25, 0x0A	; 10
    56ec:	53 d5       	rcall	.+2726   	; 0x6194 <_ZN5Print7printlnEPKc>
	Serial.println("*************************************");
    56ee:	6c e8       	ldi	r22, 0x8C	; 140
    56f0:	75 e0       	ldi	r23, 0x05	; 5
    56f2:	88 ea       	ldi	r24, 0xA8	; 168
    56f4:	9a e0       	ldi	r25, 0x0A	; 10
    56f6:	4e d5       	rcall	.+2716   	; 0x6194 <_ZN5Print7printlnEPKc>
	Serial.print("  Version: ");
    56f8:	68 ed       	ldi	r22, 0xD8	; 216
    56fa:	75 e0       	ldi	r23, 0x05	; 5
    56fc:	88 ea       	ldi	r24, 0xA8	; 168
    56fe:	9a e0       	ldi	r25, 0x0A	; 10
    5700:	0f d5       	rcall	.+2590   	; 0x6120 <_ZN5Print5printEPKc>
	Serial.println(VERSION);
    5702:	22 e0       	ldi	r18, 0x02	; 2
    5704:	30 e0       	ldi	r19, 0x00	; 0
    5706:	4d ec       	ldi	r20, 0xCD	; 205
    5708:	5c ec       	ldi	r21, 0xCC	; 204
    570a:	6c ec       	ldi	r22, 0xCC	; 204
    570c:	7d e3       	ldi	r23, 0x3D	; 61
    570e:	88 ea       	ldi	r24, 0xA8	; 168
    5710:	9a e0       	ldi	r25, 0x0A	; 10
    5712:	28 d7       	rcall	.+3664   	; 0x6564 <_ZN5Print7printlnEdi>
	Serial.println("");
    5714:	61 e6       	ldi	r22, 0x61	; 97
    5716:	76 e0       	ldi	r23, 0x06	; 6
    5718:	88 ea       	ldi	r24, 0xA8	; 168
    571a:	9a e0       	ldi	r25, 0x0A	; 10
    571c:	3b d5       	rcall	.+2678   	; 0x6194 <_ZN5Print7printlnEPKc>
		
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.println("-INITIALIZING-");
    571e:	64 ee       	ldi	r22, 0xE4	; 228
    5720:	75 e0       	ldi	r23, 0x05	; 5
    5722:	88 ea       	ldi	r24, 0xA8	; 168
    5724:	9a e0       	ldi	r25, 0x0A	; 10
    5726:	36 d5       	rcall	.+2668   	; 0x6194 <_ZN5Print7printlnEPKc>
	#endif
	
	//Initialize Hardware
	hardware_init();
    5728:	0e 94 6d 0c 	call	0x18da	; 0x18da <_Z13hardware_initv>

	//Display the Boot screens	
	BootScreenTime = millis();
    572c:	0e 94 42 35 	call	0x6a84	; 0x6a84 <millis>
    5730:	60 93 a4 0a 	sts	0x0AA4, r22
    5734:	70 93 a5 0a 	sts	0x0AA5, r23
    5738:	80 93 a6 0a 	sts	0x0AA6, r24
    573c:	90 93 a7 0a 	sts	0x0AA7, r25
	
	MAIN_LCD.setCursor(3,1);
    5740:	41 e0       	ldi	r20, 0x01	; 1
    5742:	63 e0       	ldi	r22, 0x03	; 3
    5744:	82 ec       	ldi	r24, 0xC2	; 194
    5746:	96 e0       	ldi	r25, 0x06	; 6
    5748:	e3 da       	rcall	.-2618   	; 0x4d10 <_ZN3LCD9setCursorEhh>
	MAIN_LCD.print("Narwhal v");
    574a:	63 ef       	ldi	r22, 0xF3	; 243
    574c:	75 e0       	ldi	r23, 0x05	; 5
    574e:	82 ec       	ldi	r24, 0xC2	; 194
    5750:	96 e0       	ldi	r25, 0x06	; 6
    5752:	e6 d4       	rcall	.+2508   	; 0x6120 <_ZN5Print5printEPKc>
	MAIN_LCD.print(VERSION);
    5754:	22 e0       	ldi	r18, 0x02	; 2
    5756:	30 e0       	ldi	r19, 0x00	; 0
    5758:	4d ec       	ldi	r20, 0xCD	; 205
    575a:	5c ec       	ldi	r21, 0xCC	; 204
    575c:	6c ec       	ldi	r22, 0xCC	; 204
    575e:	7d e3       	ldi	r23, 0x3D	; 61
    5760:	82 ec       	ldi	r24, 0xC2	; 194
    5762:	96 e0       	ldi	r25, 0x06	; 6
    5764:	fd d6       	rcall	.+3578   	; 0x6560 <_ZN5Print5printEdi>
	MAIN_LCD.setCursor(2,2);
    5766:	42 e0       	ldi	r20, 0x02	; 2
    5768:	62 e0       	ldi	r22, 0x02	; 2
    576a:	82 ec       	ldi	r24, 0xC2	; 194
    576c:	96 e0       	ldi	r25, 0x06	; 6
    576e:	d0 da       	rcall	.-2656   	; 0x4d10 <_ZN3LCD9setCursorEhh>
	MAIN_LCD.print("Established 2015");
    5770:	6d ef       	ldi	r22, 0xFD	; 253
    5772:	75 e0       	ldi	r23, 0x05	; 5
    5774:	82 ec       	ldi	r24, 0xC2	; 194
    5776:	96 e0       	ldi	r25, 0x06	; 6
    5778:	d3 d4       	rcall	.+2470   	; 0x6120 <_ZN5Print5printEPKc>
		
	HLT_LCD.setCursor(2,1);
    577a:	41 e0       	ldi	r20, 0x01	; 1
    577c:	62 e0       	ldi	r22, 0x02	; 2
    577e:	88 ea       	ldi	r24, 0xA8	; 168
    5780:	96 e0       	ldi	r25, 0x06	; 6
    5782:	c6 da       	rcall	.-2676   	; 0x4d10 <_ZN3LCD9setCursorEhh>
	HLT_LCD.print("Hot Liquor Tank");
    5784:	6e e0       	ldi	r22, 0x0E	; 14
    5786:	76 e0       	ldi	r23, 0x06	; 6
    5788:	88 ea       	ldi	r24, 0xA8	; 168
    578a:	96 e0       	ldi	r25, 0x06	; 6
    578c:	c9 d4       	rcall	.+2450   	; 0x6120 <_ZN5Print5printEPKc>
		
	MLT_LCD.setCursor(2,1);
    578e:	41 e0       	ldi	r20, 0x01	; 1
    5790:	62 e0       	ldi	r22, 0x02	; 2
    5792:	8c e8       	ldi	r24, 0x8C	; 140
    5794:	96 e0       	ldi	r25, 0x06	; 6
    5796:	bc da       	rcall	.-2696   	; 0x4d10 <_ZN3LCD9setCursorEhh>
	MLT_LCD.print("Mash/Lauter Tun");
    5798:	6e e1       	ldi	r22, 0x1E	; 30
    579a:	76 e0       	ldi	r23, 0x06	; 6
    579c:	8c e8       	ldi	r24, 0x8C	; 140
    579e:	96 e0       	ldi	r25, 0x06	; 6
    57a0:	bf d4       	rcall	.+2430   	; 0x6120 <_ZN5Print5printEPKc>
		
	BK_LCD.setCursor(2,1);
    57a2:	41 e0       	ldi	r20, 0x01	; 1
    57a4:	62 e0       	ldi	r22, 0x02	; 2
    57a6:	82 e7       	ldi	r24, 0x72	; 114
    57a8:	96 e0       	ldi	r25, 0x06	; 6
    57aa:	b2 da       	rcall	.-2716   	; 0x4d10 <_ZN3LCD9setCursorEhh>
	BK_LCD.print("Boil Kettle");
    57ac:	6e e2       	ldi	r22, 0x2E	; 46
    57ae:	76 e0       	ldi	r23, 0x06	; 6
    57b0:	82 e7       	ldi	r24, 0x72	; 114
    57b2:	96 e0       	ldi	r25, 0x06	; 6
    57b4:	b5 d4       	rcall	.+2410   	; 0x6120 <_ZN5Print5printEPKc>

	//Initialize the rest of the programs
	MAIN_UI_init();
    57b6:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <_Z12MAIN_UI_initv>
	HLT_UI_init();
    57ba:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <_Z11HLT_UI_initv>
	MLT_UI_init();
    57be:	0e 94 14 11 	call	0x2228	; 0x2228 <_Z11MLT_UI_initv>
	BK_UI_init();
    57c2:	0e 94 39 02 	call	0x472	; 0x472 <_Z10BK_UI_initv>
	delay(3000);
    57c6:	68 eb       	ldi	r22, 0xB8	; 184
    57c8:	7b e0       	ldi	r23, 0x0B	; 11
    57ca:	80 e0       	ldi	r24, 0x00	; 0
    57cc:	90 e0       	ldi	r25, 0x00	; 0
    57ce:	0c 94 74 35 	jmp	0x6ae8	; 0x6ae8 <delay>
    57d2:	08 95       	ret

000057d4 <loop>:
}

void loop() {
    57d4:	0f 93       	push	r16
    57d6:	1f 93       	push	r17
	
	//On first pass print out a verbose message
	if(firstpass){
    57d8:	80 91 06 02 	lds	r24, 0x0206
    57dc:	88 23       	and	r24, r24
    57de:	29 f0       	breq	.+10     	; 0x57ea <loop+0x16>
		#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
			Serial.println("-MAIN-PROGRAM-");
    57e0:	6a e3       	ldi	r22, 0x3A	; 58
    57e2:	76 e0       	ldi	r23, 0x06	; 6
    57e4:	88 ea       	ldi	r24, 0xA8	; 168
    57e6:	9a e0       	ldi	r25, 0x0A	; 10
    57e8:	d5 d4       	rcall	.+2474   	; 0x6194 <_ZN5Print7printlnEPKc>
		#endif
	}
	firstpass = false;
    57ea:	10 92 06 02 	sts	0x0206, r1
	
	//Make sure boot screens display for atleast 3 seconds (3000ms)
	while((millis()-BootScreenTime)<3000){
    57ee:	06 c0       	rjmp	.+12     	; 0x57fc <loop+0x28>
		//Wait
		delay(500);
    57f0:	64 ef       	ldi	r22, 0xF4	; 244
    57f2:	71 e0       	ldi	r23, 0x01	; 1
    57f4:	80 e0       	ldi	r24, 0x00	; 0
    57f6:	90 e0       	ldi	r25, 0x00	; 0
    57f8:	0e 94 74 35 	call	0x6ae8	; 0x6ae8 <delay>
		#endif
	}
	firstpass = false;
	
	//Make sure boot screens display for atleast 3 seconds (3000ms)
	while((millis()-BootScreenTime)<3000){
    57fc:	0e 94 42 35 	call	0x6a84	; 0x6a84 <millis>
    5800:	00 91 a4 0a 	lds	r16, 0x0AA4
    5804:	10 91 a5 0a 	lds	r17, 0x0AA5
    5808:	20 91 a6 0a 	lds	r18, 0x0AA6
    580c:	30 91 a7 0a 	lds	r19, 0x0AA7
    5810:	dc 01       	movw	r26, r24
    5812:	cb 01       	movw	r24, r22
    5814:	80 1b       	sub	r24, r16
    5816:	91 0b       	sbc	r25, r17
    5818:	a2 0b       	sbc	r26, r18
    581a:	b3 0b       	sbc	r27, r19
    581c:	88 3b       	cpi	r24, 0xB8	; 184
    581e:	9b 40       	sbci	r25, 0x0B	; 11
    5820:	a1 05       	cpc	r26, r1
    5822:	b1 05       	cpc	r27, r1
    5824:	28 f3       	brcs	.-54     	; 0x57f0 <loop+0x1c>
		//Wait
		delay(500);
	}
	
	//Run the Executive
	Exec->run();
    5826:	80 91 a2 0a 	lds	r24, 0x0AA2
    582a:	90 91 a3 0a 	lds	r25, 0x0AA3
    582e:	0e 94 78 21 	call	0x42f0	; 0x42f0 <_ZN9Executive3runEv>
}
    5832:	1f 91       	pop	r17
    5834:	0f 91       	pop	r16
    5836:	08 95       	ret

00005838 <_GLOBAL__sub_I_BootScreenTime>:

//typedef FastDelegate2<int, char *> EvtHandler;
unsigned long BootScreenTime = 0;
bool firstpass = true;

Executive *Exec = new Executive();
    5838:	8e e0       	ldi	r24, 0x0E	; 14
    583a:	90 e0       	ldi	r25, 0x00	; 0
    583c:	2f d4       	rcall	.+2142   	; 0x609c <_Znwj>
    583e:	2e e0       	ldi	r18, 0x0E	; 14
    5840:	fc 01       	movw	r30, r24
    5842:	11 92       	st	Z+, r1
    5844:	2a 95       	dec	r18
    5846:	e9 f7       	brne	.-6      	; 0x5842 <_GLOBAL__sub_I_BootScreenTime+0xa>
    5848:	90 93 a3 0a 	sts	0x0AA3, r25
    584c:	80 93 a2 0a 	sts	0x0AA2, r24
    5850:	08 95       	ret

00005852 <__cxa_pure_virtual>:
void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this 
  
  
  //std::terminate();
  abort();
    5852:	0e 94 df 3c 	call	0x79be	; 0x79be <abort>

00005856 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    5856:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    5858:	91 8d       	ldd	r25, Z+25	; 0x19
    585a:	22 8d       	ldd	r18, Z+26	; 0x1a
    585c:	89 2f       	mov	r24, r25
    585e:	90 e0       	ldi	r25, 0x00	; 0
    5860:	80 5c       	subi	r24, 0xC0	; 192
    5862:	9f 4f       	sbci	r25, 0xFF	; 255
    5864:	82 1b       	sub	r24, r18
    5866:	91 09       	sbc	r25, r1
}
    5868:	8f 73       	andi	r24, 0x3F	; 63
    586a:	99 27       	eor	r25, r25
    586c:	08 95       	ret

0000586e <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    586e:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    5870:	91 8d       	ldd	r25, Z+25	; 0x19
    5872:	82 8d       	ldd	r24, Z+26	; 0x1a
    5874:	98 17       	cp	r25, r24
    5876:	31 f0       	breq	.+12     	; 0x5884 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    5878:	82 8d       	ldd	r24, Z+26	; 0x1a
    587a:	e8 0f       	add	r30, r24
    587c:	f1 1d       	adc	r31, r1
    587e:	85 8d       	ldd	r24, Z+29	; 0x1d
    5880:	90 e0       	ldi	r25, 0x00	; 0
    5882:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    5884:	8f ef       	ldi	r24, 0xFF	; 255
    5886:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    5888:	08 95       	ret

0000588a <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    588a:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    588c:	91 8d       	ldd	r25, Z+25	; 0x19
    588e:	82 8d       	ldd	r24, Z+26	; 0x1a
    5890:	98 17       	cp	r25, r24
    5892:	61 f0       	breq	.+24     	; 0x58ac <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    5894:	82 8d       	ldd	r24, Z+26	; 0x1a
    5896:	df 01       	movw	r26, r30
    5898:	a8 0f       	add	r26, r24
    589a:	b1 1d       	adc	r27, r1
    589c:	5d 96       	adiw	r26, 0x1d	; 29
    589e:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    58a0:	92 8d       	ldd	r25, Z+26	; 0x1a
    58a2:	9f 5f       	subi	r25, 0xFF	; 255
    58a4:	9f 73       	andi	r25, 0x3F	; 63
    58a6:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    58a8:	90 e0       	ldi	r25, 0x00	; 0
    58aa:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    58ac:	8f ef       	ldi	r24, 0xFF	; 255
    58ae:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    58b0:	08 95       	ret

000058b2 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    58b2:	81 ef       	ldi	r24, 0xF1	; 241
    58b4:	9d e2       	ldi	r25, 0x2D	; 45
    58b6:	89 2b       	or	r24, r25
    58b8:	41 f0       	breq	.+16     	; 0x58ca <_Z14serialEventRunv+0x18>
    58ba:	80 e0       	ldi	r24, 0x00	; 0
    58bc:	90 e0       	ldi	r25, 0x00	; 0
    58be:	89 2b       	or	r24, r25
    58c0:	21 f0       	breq	.+8      	; 0x58ca <_Z14serialEventRunv+0x18>
    58c2:	8f d1       	rcall	.+798    	; 0x5be2 <_Z17Serial0_availablev>
    58c4:	81 11       	cpse	r24, r1
    58c6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    58ca:	8c e8       	ldi	r24, 0x8C	; 140
    58cc:	9e e2       	ldi	r25, 0x2E	; 46
    58ce:	89 2b       	or	r24, r25
    58d0:	41 f0       	breq	.+16     	; 0x58e2 <_Z14serialEventRunv+0x30>
    58d2:	80 e0       	ldi	r24, 0x00	; 0
    58d4:	90 e0       	ldi	r25, 0x00	; 0
    58d6:	89 2b       	or	r24, r25
    58d8:	21 f0       	breq	.+8      	; 0x58e2 <_Z14serialEventRunv+0x30>
    58da:	1e d2       	rcall	.+1084   	; 0x5d18 <_Z17Serial1_availablev>
    58dc:	81 11       	cpse	r24, r1
    58de:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    58e2:	87 e2       	ldi	r24, 0x27	; 39
    58e4:	9f e2       	ldi	r25, 0x2F	; 47
    58e6:	89 2b       	or	r24, r25
    58e8:	41 f0       	breq	.+16     	; 0x58fa <_Z14serialEventRunv+0x48>
    58ea:	80 e0       	ldi	r24, 0x00	; 0
    58ec:	90 e0       	ldi	r25, 0x00	; 0
    58ee:	89 2b       	or	r24, r25
    58f0:	21 f0       	breq	.+8      	; 0x58fa <_Z14serialEventRunv+0x48>
    58f2:	ad d2       	rcall	.+1370   	; 0x5e4e <_Z17Serial2_availablev>
    58f4:	81 11       	cpse	r24, r1
    58f6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    58fa:	82 ec       	ldi	r24, 0xC2	; 194
    58fc:	9f e2       	ldi	r25, 0x2F	; 47
    58fe:	89 2b       	or	r24, r25
    5900:	41 f0       	breq	.+16     	; 0x5912 <_Z14serialEventRunv+0x60>
    5902:	80 e0       	ldi	r24, 0x00	; 0
    5904:	90 e0       	ldi	r25, 0x00	; 0
    5906:	89 2b       	or	r24, r25
    5908:	21 f0       	breq	.+8      	; 0x5912 <_Z14serialEventRunv+0x60>
    590a:	3c d3       	rcall	.+1656   	; 0x5f84 <_Z17Serial3_availablev>
    590c:	81 11       	cpse	r24, r1
    590e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5912:	08 95       	ret

00005914 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    5914:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    5916:	84 8d       	ldd	r24, Z+28	; 0x1c
    5918:	df 01       	movw	r26, r30
    591a:	a8 0f       	add	r26, r24
    591c:	b1 1d       	adc	r27, r1
    591e:	a3 5a       	subi	r26, 0xA3	; 163
    5920:	bf 4f       	sbci	r27, 0xFF	; 255
    5922:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    5924:	24 8d       	ldd	r18, Z+28	; 0x1c
    5926:	30 e0       	ldi	r19, 0x00	; 0
    5928:	2f 5f       	subi	r18, 0xFF	; 255
    592a:	3f 4f       	sbci	r19, 0xFF	; 255
    592c:	2f 73       	andi	r18, 0x3F	; 63
    592e:	30 78       	andi	r19, 0x80	; 128
    5930:	33 23       	and	r19, r19
    5932:	34 f4       	brge	.+12     	; 0x5940 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
    5934:	21 50       	subi	r18, 0x01	; 1
    5936:	31 09       	sbc	r19, r1
    5938:	20 6c       	ori	r18, 0xC0	; 192
    593a:	3f 6f       	ori	r19, 0xFF	; 255
    593c:	2f 5f       	subi	r18, 0xFF	; 255
    593e:	3f 4f       	sbci	r19, 0xFF	; 255
    5940:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
    5942:	a6 89       	ldd	r26, Z+22	; 0x16
    5944:	b7 89       	ldd	r27, Z+23	; 0x17
    5946:	8c 93       	st	X, r24

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    5948:	a0 89       	ldd	r26, Z+16	; 0x10
    594a:	b1 89       	ldd	r27, Z+17	; 0x11
    594c:	8c 91       	ld	r24, X
    594e:	80 64       	ori	r24, 0x40	; 64
    5950:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    5952:	93 8d       	ldd	r25, Z+27	; 0x1b
    5954:	84 8d       	ldd	r24, Z+28	; 0x1c
    5956:	98 13       	cpse	r25, r24
    5958:	06 c0       	rjmp	.+12     	; 0x5966 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x52>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    595a:	02 88       	ldd	r0, Z+18	; 0x12
    595c:	f3 89       	ldd	r31, Z+19	; 0x13
    595e:	e0 2d       	mov	r30, r0
    5960:	80 81       	ld	r24, Z
    5962:	8f 7d       	andi	r24, 0xDF	; 223
    5964:	80 83       	st	Z, r24
    5966:	08 95       	ret

00005968 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    5968:	cf 93       	push	r28
    596a:	df 93       	push	r29
    596c:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    596e:	88 8d       	ldd	r24, Y+24	; 0x18
    5970:	81 11       	cpse	r24, r1
    5972:	0e c0       	rjmp	.+28     	; 0x5990 <_ZN14HardwareSerial5flushEv+0x28>
    5974:	17 c0       	rjmp	.+46     	; 0x59a4 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    5976:	0f b6       	in	r0, 0x3f	; 63
    5978:	07 fc       	sbrc	r0, 7
    597a:	0c c0       	rjmp	.+24     	; 0x5994 <_ZN14HardwareSerial5flushEv+0x2c>
    597c:	90 81       	ld	r25, Z
    597e:	95 ff       	sbrs	r25, 5
    5980:	09 c0       	rjmp	.+18     	; 0x5994 <_ZN14HardwareSerial5flushEv+0x2c>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    5982:	a8 89       	ldd	r26, Y+16	; 0x10
    5984:	b9 89       	ldd	r27, Y+17	; 0x11
    5986:	8c 91       	ld	r24, X
    5988:	85 ff       	sbrs	r24, 5
    598a:	04 c0       	rjmp	.+8      	; 0x5994 <_ZN14HardwareSerial5flushEv+0x2c>
	  _tx_udr_empty_irq();
    598c:	ce 01       	movw	r24, r28
    598e:	c2 df       	rcall	.-124    	; 0x5914 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    5990:	ea 89       	ldd	r30, Y+18	; 0x12
    5992:	fb 89       	ldd	r31, Y+19	; 0x13
    5994:	90 81       	ld	r25, Z
    5996:	95 fd       	sbrc	r25, 5
    5998:	ee cf       	rjmp	.-36     	; 0x5976 <_ZN14HardwareSerial5flushEv+0xe>
    599a:	a8 89       	ldd	r26, Y+16	; 0x10
    599c:	b9 89       	ldd	r27, Y+17	; 0x11
    599e:	8c 91       	ld	r24, X
    59a0:	86 ff       	sbrs	r24, 6
    59a2:	e9 cf       	rjmp	.-46     	; 0x5976 <_ZN14HardwareSerial5flushEv+0xe>
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    59a4:	df 91       	pop	r29
    59a6:	cf 91       	pop	r28
    59a8:	08 95       	ret

000059aa <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    59aa:	0f 93       	push	r16
    59ac:	1f 93       	push	r17
    59ae:	cf 93       	push	r28
    59b0:	df 93       	push	r29
    59b2:	fc 01       	movw	r30, r24
  _written = true;
    59b4:	81 e0       	ldi	r24, 0x01	; 1
    59b6:	80 8f       	std	Z+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    59b8:	93 8d       	ldd	r25, Z+27	; 0x1b
    59ba:	84 8d       	ldd	r24, Z+28	; 0x1c
    59bc:	98 13       	cpse	r25, r24
    59be:	21 c0       	rjmp	.+66     	; 0x5a02 <_ZN14HardwareSerial5writeEh+0x58>
    59c0:	a0 89       	ldd	r26, Z+16	; 0x10
    59c2:	b1 89       	ldd	r27, Z+17	; 0x11
    59c4:	8c 91       	ld	r24, X
    59c6:	85 fd       	sbrc	r24, 5
    59c8:	2e c0       	rjmp	.+92     	; 0x5a26 <_ZN14HardwareSerial5writeEh+0x7c>
    59ca:	1b c0       	rjmp	.+54     	; 0x5a02 <_ZN14HardwareSerial5writeEh+0x58>
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    if (bit_is_clear(SREG, SREG_I)) {
    59cc:	0f b6       	in	r0, 0x3f	; 63
    59ce:	07 fc       	sbrc	r0, 7
    59d0:	07 c0       	rjmp	.+14     	; 0x59e0 <_ZN14HardwareSerial5writeEh+0x36>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    59d2:	e8 89       	ldd	r30, Y+16	; 0x10
    59d4:	f9 89       	ldd	r31, Y+17	; 0x11
    59d6:	80 81       	ld	r24, Z
    59d8:	85 ff       	sbrs	r24, 5
    59da:	02 c0       	rjmp	.+4      	; 0x59e0 <_ZN14HardwareSerial5writeEh+0x36>
	_tx_udr_empty_irq();
    59dc:	ce 01       	movw	r24, r28
    59de:	9a df       	rcall	.-204    	; 0x5914 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    59e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    59e2:	09 17       	cp	r16, r25
    59e4:	99 f3       	breq	.-26     	; 0x59cc <_ZN14HardwareSerial5writeEh+0x22>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    59e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    59e8:	fe 01       	movw	r30, r28
    59ea:	e8 0f       	add	r30, r24
    59ec:	f1 1d       	adc	r31, r1
    59ee:	e3 5a       	subi	r30, 0xA3	; 163
    59f0:	ff 4f       	sbci	r31, 0xFF	; 255
    59f2:	10 83       	st	Z, r17
  _tx_buffer_head = i;
    59f4:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    59f6:	ea 89       	ldd	r30, Y+18	; 0x12
    59f8:	fb 89       	ldd	r31, Y+19	; 0x13
    59fa:	80 81       	ld	r24, Z
    59fc:	80 62       	ori	r24, 0x20	; 32
    59fe:	80 83       	st	Z, r24
  
  return 1;
    5a00:	1b c0       	rjmp	.+54     	; 0x5a38 <_ZN14HardwareSerial5writeEh+0x8e>
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    5a02:	23 8d       	ldd	r18, Z+27	; 0x1b
    5a04:	30 e0       	ldi	r19, 0x00	; 0
    5a06:	2f 5f       	subi	r18, 0xFF	; 255
    5a08:	3f 4f       	sbci	r19, 0xFF	; 255
    5a0a:	2f 73       	andi	r18, 0x3F	; 63
    5a0c:	30 78       	andi	r19, 0x80	; 128
    5a0e:	33 23       	and	r19, r19
    5a10:	34 f4       	brge	.+12     	; 0x5a1e <_ZN14HardwareSerial5writeEh+0x74>
    5a12:	21 50       	subi	r18, 0x01	; 1
    5a14:	31 09       	sbc	r19, r1
    5a16:	20 6c       	ori	r18, 0xC0	; 192
    5a18:	3f 6f       	ori	r19, 0xFF	; 255
    5a1a:	2f 5f       	subi	r18, 0xFF	; 255
    5a1c:	3f 4f       	sbci	r19, 0xFF	; 255
    5a1e:	16 2f       	mov	r17, r22
    5a20:	ef 01       	movw	r28, r30
    5a22:	02 2f       	mov	r16, r18
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    5a24:	dd cf       	rjmp	.-70     	; 0x59e0 <_ZN14HardwareSerial5writeEh+0x36>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    5a26:	a6 89       	ldd	r26, Z+22	; 0x16
    5a28:	b7 89       	ldd	r27, Z+23	; 0x17
    5a2a:	6c 93       	st	X, r22
    sbi(*_ucsra, TXC0);
    5a2c:	00 88       	ldd	r0, Z+16	; 0x10
    5a2e:	f1 89       	ldd	r31, Z+17	; 0x11
    5a30:	e0 2d       	mov	r30, r0
    5a32:	80 81       	ld	r24, Z
    5a34:	80 64       	ori	r24, 0x40	; 64
    5a36:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    5a38:	81 e0       	ldi	r24, 0x01	; 1
    5a3a:	90 e0       	ldi	r25, 0x00	; 0
    5a3c:	df 91       	pop	r29
    5a3e:	cf 91       	pop	r28
    5a40:	1f 91       	pop	r17
    5a42:	0f 91       	pop	r16
    5a44:	08 95       	ret

00005a46 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    5a46:	bf 92       	push	r11
    5a48:	cf 92       	push	r12
    5a4a:	df 92       	push	r13
    5a4c:	ef 92       	push	r14
    5a4e:	ff 92       	push	r15
    5a50:	0f 93       	push	r16
    5a52:	1f 93       	push	r17
    5a54:	cf 93       	push	r28
    5a56:	df 93       	push	r29
    5a58:	ec 01       	movw	r28, r24
    5a5a:	6a 01       	movw	r12, r20
    5a5c:	7b 01       	movw	r14, r22
    5a5e:	b2 2e       	mov	r11, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    5a60:	e8 89       	ldd	r30, Y+16	; 0x10
    5a62:	f9 89       	ldd	r31, Y+17	; 0x11
    5a64:	82 e0       	ldi	r24, 0x02	; 2
    5a66:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    5a68:	41 15       	cp	r20, r1
    5a6a:	51 4e       	sbci	r21, 0xE1	; 225
    5a6c:	61 05       	cpc	r22, r1
    5a6e:	71 05       	cpc	r23, r1
    5a70:	b1 f0       	breq	.+44     	; 0x5a9e <_ZN14HardwareSerial5beginEmh+0x58>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    5a72:	60 e0       	ldi	r22, 0x00	; 0
    5a74:	79 e0       	ldi	r23, 0x09	; 9
    5a76:	8d e3       	ldi	r24, 0x3D	; 61
    5a78:	90 e0       	ldi	r25, 0x00	; 0
    5a7a:	a7 01       	movw	r20, r14
    5a7c:	96 01       	movw	r18, r12
    5a7e:	0e 94 90 3a 	call	0x7520	; 0x7520 <__udivmodsi4>
    5a82:	89 01       	movw	r16, r18
    5a84:	9a 01       	movw	r18, r20
    5a86:	01 50       	subi	r16, 0x01	; 1
    5a88:	11 09       	sbc	r17, r1
    5a8a:	21 09       	sbc	r18, r1
    5a8c:	31 09       	sbc	r19, r1
    5a8e:	36 95       	lsr	r19
    5a90:	27 95       	ror	r18
    5a92:	17 95       	ror	r17
    5a94:	07 95       	ror	r16
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    5a96:	01 15       	cp	r16, r1
    5a98:	80 e1       	ldi	r24, 0x10	; 16
    5a9a:	18 07       	cpc	r17, r24
    5a9c:	a8 f0       	brcs	.+42     	; 0x5ac8 <_ZN14HardwareSerial5beginEmh+0x82>
  {
    *_ucsra = 0;
    5a9e:	e8 89       	ldd	r30, Y+16	; 0x10
    5aa0:	f9 89       	ldd	r31, Y+17	; 0x11
    5aa2:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    5aa4:	60 e8       	ldi	r22, 0x80	; 128
    5aa6:	74 e8       	ldi	r23, 0x84	; 132
    5aa8:	8e e1       	ldi	r24, 0x1E	; 30
    5aaa:	90 e0       	ldi	r25, 0x00	; 0
    5aac:	a7 01       	movw	r20, r14
    5aae:	96 01       	movw	r18, r12
    5ab0:	0e 94 90 3a 	call	0x7520	; 0x7520 <__udivmodsi4>
    5ab4:	da 01       	movw	r26, r20
    5ab6:	c9 01       	movw	r24, r18
    5ab8:	01 97       	sbiw	r24, 0x01	; 1
    5aba:	a1 09       	sbc	r26, r1
    5abc:	b1 09       	sbc	r27, r1
    5abe:	b6 95       	lsr	r27
    5ac0:	a7 95       	ror	r26
    5ac2:	97 95       	ror	r25
    5ac4:	87 95       	ror	r24
    5ac6:	8c 01       	movw	r16, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    5ac8:	ec 85       	ldd	r30, Y+12	; 0x0c
    5aca:	fd 85       	ldd	r31, Y+13	; 0x0d
    5acc:	10 83       	st	Z, r17
  *_ubrrl = baud_setting;
    5ace:	ee 85       	ldd	r30, Y+14	; 0x0e
    5ad0:	ff 85       	ldd	r31, Y+15	; 0x0f
    5ad2:	00 83       	st	Z, r16

  _written = false;
    5ad4:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    5ad6:	ec 89       	ldd	r30, Y+20	; 0x14
    5ad8:	fd 89       	ldd	r31, Y+21	; 0x15
    5ada:	b0 82       	st	Z, r11
  
  sbi(*_ucsrb, RXEN0);
    5adc:	ea 89       	ldd	r30, Y+18	; 0x12
    5ade:	fb 89       	ldd	r31, Y+19	; 0x13
    5ae0:	80 81       	ld	r24, Z
    5ae2:	80 61       	ori	r24, 0x10	; 16
    5ae4:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    5ae6:	ea 89       	ldd	r30, Y+18	; 0x12
    5ae8:	fb 89       	ldd	r31, Y+19	; 0x13
    5aea:	80 81       	ld	r24, Z
    5aec:	88 60       	ori	r24, 0x08	; 8
    5aee:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    5af0:	ea 89       	ldd	r30, Y+18	; 0x12
    5af2:	fb 89       	ldd	r31, Y+19	; 0x13
    5af4:	80 81       	ld	r24, Z
    5af6:	80 68       	ori	r24, 0x80	; 128
    5af8:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    5afa:	ea 89       	ldd	r30, Y+18	; 0x12
    5afc:	fb 89       	ldd	r31, Y+19	; 0x13
    5afe:	80 81       	ld	r24, Z
    5b00:	8f 7d       	andi	r24, 0xDF	; 223
    5b02:	80 83       	st	Z, r24
}
    5b04:	df 91       	pop	r29
    5b06:	cf 91       	pop	r28
    5b08:	1f 91       	pop	r17
    5b0a:	0f 91       	pop	r16
    5b0c:	ff 90       	pop	r15
    5b0e:	ef 90       	pop	r14
    5b10:	df 90       	pop	r13
    5b12:	cf 90       	pop	r12
    5b14:	bf 90       	pop	r11
    5b16:	08 95       	ret

00005b18 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    5b18:	1f 92       	push	r1
    5b1a:	0f 92       	push	r0
    5b1c:	0f b6       	in	r0, 0x3f	; 63
    5b1e:	0f 92       	push	r0
    5b20:	11 24       	eor	r1, r1
    5b22:	0b b6       	in	r0, 0x3b	; 59
    5b24:	0f 92       	push	r0
    5b26:	2f 93       	push	r18
    5b28:	8f 93       	push	r24
    5b2a:	9f 93       	push	r25
    5b2c:	af 93       	push	r26
    5b2e:	bf 93       	push	r27
    5b30:	ef 93       	push	r30
    5b32:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    5b34:	e0 91 b8 0a 	lds	r30, 0x0AB8
    5b38:	f0 91 b9 0a 	lds	r31, 0x0AB9
    5b3c:	80 81       	ld	r24, Z
    5b3e:	82 fd       	sbrc	r24, 2
    5b40:	14 c0       	rjmp	.+40     	; 0x5b6a <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    5b42:	e8 ea       	ldi	r30, 0xA8	; 168
    5b44:	fa e0       	ldi	r31, 0x0A	; 10
    5b46:	a6 89       	ldd	r26, Z+22	; 0x16
    5b48:	b7 89       	ldd	r27, Z+23	; 0x17
    5b4a:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    5b4c:	81 8d       	ldd	r24, Z+25	; 0x19
    5b4e:	8f 5f       	subi	r24, 0xFF	; 255
    5b50:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    5b52:	92 8d       	ldd	r25, Z+26	; 0x1a
    5b54:	89 17       	cp	r24, r25
    5b56:	71 f0       	breq	.+28     	; 0x5b74 <__vector_25+0x5c>
      _rx_buffer[_rx_buffer_head] = c;
    5b58:	df 01       	movw	r26, r30
    5b5a:	e1 8d       	ldd	r30, Z+25	; 0x19
    5b5c:	f0 e0       	ldi	r31, 0x00	; 0
    5b5e:	e8 55       	subi	r30, 0x58	; 88
    5b60:	f5 4f       	sbci	r31, 0xF5	; 245
    5b62:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
    5b64:	59 96       	adiw	r26, 0x19	; 25
    5b66:	8c 93       	st	X, r24
    5b68:	05 c0       	rjmp	.+10     	; 0x5b74 <__vector_25+0x5c>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    5b6a:	e0 91 be 0a 	lds	r30, 0x0ABE
    5b6e:	f0 91 bf 0a 	lds	r31, 0x0ABF
    5b72:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    5b74:	ff 91       	pop	r31
    5b76:	ef 91       	pop	r30
    5b78:	bf 91       	pop	r27
    5b7a:	af 91       	pop	r26
    5b7c:	9f 91       	pop	r25
    5b7e:	8f 91       	pop	r24
    5b80:	2f 91       	pop	r18
    5b82:	0f 90       	pop	r0
    5b84:	0b be       	out	0x3b, r0	; 59
    5b86:	0f 90       	pop	r0
    5b88:	0f be       	out	0x3f, r0	; 63
    5b8a:	0f 90       	pop	r0
    5b8c:	1f 90       	pop	r1
    5b8e:	18 95       	reti

00005b90 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    5b90:	1f 92       	push	r1
    5b92:	0f 92       	push	r0
    5b94:	0f b6       	in	r0, 0x3f	; 63
    5b96:	0f 92       	push	r0
    5b98:	11 24       	eor	r1, r1
    5b9a:	0b b6       	in	r0, 0x3b	; 59
    5b9c:	0f 92       	push	r0
    5b9e:	2f 93       	push	r18
    5ba0:	3f 93       	push	r19
    5ba2:	4f 93       	push	r20
    5ba4:	5f 93       	push	r21
    5ba6:	6f 93       	push	r22
    5ba8:	7f 93       	push	r23
    5baa:	8f 93       	push	r24
    5bac:	9f 93       	push	r25
    5bae:	af 93       	push	r26
    5bb0:	bf 93       	push	r27
    5bb2:	ef 93       	push	r30
    5bb4:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    5bb6:	88 ea       	ldi	r24, 0xA8	; 168
    5bb8:	9a e0       	ldi	r25, 0x0A	; 10
    5bba:	ac de       	rcall	.-680    	; 0x5914 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    5bbc:	ff 91       	pop	r31
    5bbe:	ef 91       	pop	r30
    5bc0:	bf 91       	pop	r27
    5bc2:	af 91       	pop	r26
    5bc4:	9f 91       	pop	r25
    5bc6:	8f 91       	pop	r24
    5bc8:	7f 91       	pop	r23
    5bca:	6f 91       	pop	r22
    5bcc:	5f 91       	pop	r21
    5bce:	4f 91       	pop	r20
    5bd0:	3f 91       	pop	r19
    5bd2:	2f 91       	pop	r18
    5bd4:	0f 90       	pop	r0
    5bd6:	0b be       	out	0x3b, r0	; 59
    5bd8:	0f 90       	pop	r0
    5bda:	0f be       	out	0x3f, r0	; 63
    5bdc:	0f 90       	pop	r0
    5bde:	1f 90       	pop	r1
    5be0:	18 95       	reti

00005be2 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    5be2:	88 ea       	ldi	r24, 0xA8	; 168
    5be4:	9a e0       	ldi	r25, 0x0A	; 10
    5be6:	37 de       	rcall	.-914    	; 0x5856 <_ZN14HardwareSerial9availableEv>
    5be8:	21 e0       	ldi	r18, 0x01	; 1
    5bea:	89 2b       	or	r24, r25
    5bec:	09 f4       	brne	.+2      	; 0x5bf0 <_Z17Serial0_availablev+0xe>
    5bee:	20 e0       	ldi	r18, 0x00	; 0
}
    5bf0:	82 2f       	mov	r24, r18
    5bf2:	08 95       	ret

00005bf4 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    5bf4:	e8 ea       	ldi	r30, 0xA8	; 168
    5bf6:	fa e0       	ldi	r31, 0x0A	; 10
    5bf8:	13 82       	std	Z+3, r1	; 0x03
    5bfa:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    5bfc:	88 ee       	ldi	r24, 0xE8	; 232
    5bfe:	93 e0       	ldi	r25, 0x03	; 3
    5c00:	a0 e0       	ldi	r26, 0x00	; 0
    5c02:	b0 e0       	ldi	r27, 0x00	; 0
    5c04:	84 83       	std	Z+4, r24	; 0x04
    5c06:	95 83       	std	Z+5, r25	; 0x05
    5c08:	a6 83       	std	Z+6, r26	; 0x06
    5c0a:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    5c0c:	8d e4       	ldi	r24, 0x4D	; 77
    5c0e:	96 e0       	ldi	r25, 0x06	; 6
    5c10:	91 83       	std	Z+1, r25	; 0x01
    5c12:	80 83       	st	Z, r24
    5c14:	85 ec       	ldi	r24, 0xC5	; 197
    5c16:	90 e0       	ldi	r25, 0x00	; 0
    5c18:	95 87       	std	Z+13, r25	; 0x0d
    5c1a:	84 87       	std	Z+12, r24	; 0x0c
    5c1c:	84 ec       	ldi	r24, 0xC4	; 196
    5c1e:	90 e0       	ldi	r25, 0x00	; 0
    5c20:	97 87       	std	Z+15, r25	; 0x0f
    5c22:	86 87       	std	Z+14, r24	; 0x0e
    5c24:	80 ec       	ldi	r24, 0xC0	; 192
    5c26:	90 e0       	ldi	r25, 0x00	; 0
    5c28:	91 8b       	std	Z+17, r25	; 0x11
    5c2a:	80 8b       	std	Z+16, r24	; 0x10
    5c2c:	81 ec       	ldi	r24, 0xC1	; 193
    5c2e:	90 e0       	ldi	r25, 0x00	; 0
    5c30:	93 8b       	std	Z+19, r25	; 0x13
    5c32:	82 8b       	std	Z+18, r24	; 0x12
    5c34:	82 ec       	ldi	r24, 0xC2	; 194
    5c36:	90 e0       	ldi	r25, 0x00	; 0
    5c38:	95 8b       	std	Z+21, r25	; 0x15
    5c3a:	84 8b       	std	Z+20, r24	; 0x14
    5c3c:	86 ec       	ldi	r24, 0xC6	; 198
    5c3e:	90 e0       	ldi	r25, 0x00	; 0
    5c40:	97 8b       	std	Z+23, r25	; 0x17
    5c42:	86 8b       	std	Z+22, r24	; 0x16
    5c44:	11 8e       	std	Z+25, r1	; 0x19
    5c46:	12 8e       	std	Z+26, r1	; 0x1a
    5c48:	13 8e       	std	Z+27, r1	; 0x1b
    5c4a:	14 8e       	std	Z+28, r1	; 0x1c
    5c4c:	08 95       	ret

00005c4e <__vector_36>:
#elif defined(USART1_RX_vect)
ISR(USART1_RX_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    5c4e:	1f 92       	push	r1
    5c50:	0f 92       	push	r0
    5c52:	0f b6       	in	r0, 0x3f	; 63
    5c54:	0f 92       	push	r0
    5c56:	11 24       	eor	r1, r1
    5c58:	0b b6       	in	r0, 0x3b	; 59
    5c5a:	0f 92       	push	r0
    5c5c:	2f 93       	push	r18
    5c5e:	8f 93       	push	r24
    5c60:	9f 93       	push	r25
    5c62:	af 93       	push	r26
    5c64:	bf 93       	push	r27
    5c66:	ef 93       	push	r30
    5c68:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    5c6a:	e0 91 55 0b 	lds	r30, 0x0B55
    5c6e:	f0 91 56 0b 	lds	r31, 0x0B56
    5c72:	80 81       	ld	r24, Z
    5c74:	82 fd       	sbrc	r24, 2
    5c76:	14 c0       	rjmp	.+40     	; 0x5ca0 <__vector_36+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    5c78:	e5 e4       	ldi	r30, 0x45	; 69
    5c7a:	fb e0       	ldi	r31, 0x0B	; 11
    5c7c:	a6 89       	ldd	r26, Z+22	; 0x16
    5c7e:	b7 89       	ldd	r27, Z+23	; 0x17
    5c80:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    5c82:	81 8d       	ldd	r24, Z+25	; 0x19
    5c84:	8f 5f       	subi	r24, 0xFF	; 255
    5c86:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    5c88:	92 8d       	ldd	r25, Z+26	; 0x1a
    5c8a:	89 17       	cp	r24, r25
    5c8c:	71 f0       	breq	.+28     	; 0x5caa <__vector_36+0x5c>
      _rx_buffer[_rx_buffer_head] = c;
    5c8e:	df 01       	movw	r26, r30
    5c90:	e1 8d       	ldd	r30, Z+25	; 0x19
    5c92:	f0 e0       	ldi	r31, 0x00	; 0
    5c94:	eb 5b       	subi	r30, 0xBB	; 187
    5c96:	f4 4f       	sbci	r31, 0xF4	; 244
    5c98:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
    5c9a:	59 96       	adiw	r26, 0x19	; 25
    5c9c:	8c 93       	st	X, r24
    5c9e:	05 c0       	rjmp	.+10     	; 0x5caa <__vector_36+0x5c>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    5ca0:	e0 91 5b 0b 	lds	r30, 0x0B5B
    5ca4:	f0 91 5c 0b 	lds	r31, 0x0B5C
    5ca8:	80 81       	ld	r24, Z
  Serial1._rx_complete_irq();
}
    5caa:	ff 91       	pop	r31
    5cac:	ef 91       	pop	r30
    5cae:	bf 91       	pop	r27
    5cb0:	af 91       	pop	r26
    5cb2:	9f 91       	pop	r25
    5cb4:	8f 91       	pop	r24
    5cb6:	2f 91       	pop	r18
    5cb8:	0f 90       	pop	r0
    5cba:	0b be       	out	0x3b, r0	; 59
    5cbc:	0f 90       	pop	r0
    5cbe:	0f be       	out	0x3f, r0	; 63
    5cc0:	0f 90       	pop	r0
    5cc2:	1f 90       	pop	r1
    5cc4:	18 95       	reti

00005cc6 <__vector_37>:
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    5cc6:	1f 92       	push	r1
    5cc8:	0f 92       	push	r0
    5cca:	0f b6       	in	r0, 0x3f	; 63
    5ccc:	0f 92       	push	r0
    5cce:	11 24       	eor	r1, r1
    5cd0:	0b b6       	in	r0, 0x3b	; 59
    5cd2:	0f 92       	push	r0
    5cd4:	2f 93       	push	r18
    5cd6:	3f 93       	push	r19
    5cd8:	4f 93       	push	r20
    5cda:	5f 93       	push	r21
    5cdc:	6f 93       	push	r22
    5cde:	7f 93       	push	r23
    5ce0:	8f 93       	push	r24
    5ce2:	9f 93       	push	r25
    5ce4:	af 93       	push	r26
    5ce6:	bf 93       	push	r27
    5ce8:	ef 93       	push	r30
    5cea:	ff 93       	push	r31
  Serial1._tx_udr_empty_irq();
    5cec:	85 e4       	ldi	r24, 0x45	; 69
    5cee:	9b e0       	ldi	r25, 0x0B	; 11
    5cf0:	11 de       	rcall	.-990    	; 0x5914 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    5cf2:	ff 91       	pop	r31
    5cf4:	ef 91       	pop	r30
    5cf6:	bf 91       	pop	r27
    5cf8:	af 91       	pop	r26
    5cfa:	9f 91       	pop	r25
    5cfc:	8f 91       	pop	r24
    5cfe:	7f 91       	pop	r23
    5d00:	6f 91       	pop	r22
    5d02:	5f 91       	pop	r21
    5d04:	4f 91       	pop	r20
    5d06:	3f 91       	pop	r19
    5d08:	2f 91       	pop	r18
    5d0a:	0f 90       	pop	r0
    5d0c:	0b be       	out	0x3b, r0	; 59
    5d0e:	0f 90       	pop	r0
    5d10:	0f be       	out	0x3f, r0	; 63
    5d12:	0f 90       	pop	r0
    5d14:	1f 90       	pop	r1
    5d16:	18 95       	reti

00005d18 <_Z17Serial1_availablev>:
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
    5d18:	85 e4       	ldi	r24, 0x45	; 69
    5d1a:	9b e0       	ldi	r25, 0x0B	; 11
    5d1c:	9c dd       	rcall	.-1224   	; 0x5856 <_ZN14HardwareSerial9availableEv>
    5d1e:	21 e0       	ldi	r18, 0x01	; 1
    5d20:	89 2b       	or	r24, r25
    5d22:	09 f4       	brne	.+2      	; 0x5d26 <_Z17Serial1_availablev+0xe>
    5d24:	20 e0       	ldi	r18, 0x00	; 0
}
    5d26:	82 2f       	mov	r24, r18
    5d28:	08 95       	ret

00005d2a <_GLOBAL__sub_I___vector_36>:
    5d2a:	e5 e4       	ldi	r30, 0x45	; 69
    5d2c:	fb e0       	ldi	r31, 0x0B	; 11
    5d2e:	13 82       	std	Z+3, r1	; 0x03
    5d30:	12 82       	std	Z+2, r1	; 0x02
    5d32:	88 ee       	ldi	r24, 0xE8	; 232
    5d34:	93 e0       	ldi	r25, 0x03	; 3
    5d36:	a0 e0       	ldi	r26, 0x00	; 0
    5d38:	b0 e0       	ldi	r27, 0x00	; 0
    5d3a:	84 83       	std	Z+4, r24	; 0x04
    5d3c:	95 83       	std	Z+5, r25	; 0x05
    5d3e:	a6 83       	std	Z+6, r26	; 0x06
    5d40:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    5d42:	8d e4       	ldi	r24, 0x4D	; 77
    5d44:	96 e0       	ldi	r25, 0x06	; 6
    5d46:	91 83       	std	Z+1, r25	; 0x01
    5d48:	80 83       	st	Z, r24
    5d4a:	8d ec       	ldi	r24, 0xCD	; 205
    5d4c:	90 e0       	ldi	r25, 0x00	; 0
    5d4e:	95 87       	std	Z+13, r25	; 0x0d
    5d50:	84 87       	std	Z+12, r24	; 0x0c
    5d52:	8c ec       	ldi	r24, 0xCC	; 204
    5d54:	90 e0       	ldi	r25, 0x00	; 0
    5d56:	97 87       	std	Z+15, r25	; 0x0f
    5d58:	86 87       	std	Z+14, r24	; 0x0e
    5d5a:	88 ec       	ldi	r24, 0xC8	; 200
    5d5c:	90 e0       	ldi	r25, 0x00	; 0
    5d5e:	91 8b       	std	Z+17, r25	; 0x11
    5d60:	80 8b       	std	Z+16, r24	; 0x10
    5d62:	89 ec       	ldi	r24, 0xC9	; 201
    5d64:	90 e0       	ldi	r25, 0x00	; 0
    5d66:	93 8b       	std	Z+19, r25	; 0x13
    5d68:	82 8b       	std	Z+18, r24	; 0x12
    5d6a:	8a ec       	ldi	r24, 0xCA	; 202
    5d6c:	90 e0       	ldi	r25, 0x00	; 0
    5d6e:	95 8b       	std	Z+21, r25	; 0x15
    5d70:	84 8b       	std	Z+20, r24	; 0x14
    5d72:	8e ec       	ldi	r24, 0xCE	; 206
    5d74:	90 e0       	ldi	r25, 0x00	; 0
    5d76:	97 8b       	std	Z+23, r25	; 0x17
    5d78:	86 8b       	std	Z+22, r24	; 0x16
    5d7a:	11 8e       	std	Z+25, r1	; 0x19
    5d7c:	12 8e       	std	Z+26, r1	; 0x1a
    5d7e:	13 8e       	std	Z+27, r1	; 0x1b
    5d80:	14 8e       	std	Z+28, r1	; 0x1c
    5d82:	08 95       	ret

00005d84 <__vector_51>:
// first place.

#if defined(HAVE_HWSERIAL2)

ISR(USART2_RX_vect)
{
    5d84:	1f 92       	push	r1
    5d86:	0f 92       	push	r0
    5d88:	0f b6       	in	r0, 0x3f	; 63
    5d8a:	0f 92       	push	r0
    5d8c:	11 24       	eor	r1, r1
    5d8e:	0b b6       	in	r0, 0x3b	; 59
    5d90:	0f 92       	push	r0
    5d92:	2f 93       	push	r18
    5d94:	8f 93       	push	r24
    5d96:	9f 93       	push	r25
    5d98:	af 93       	push	r26
    5d9a:	bf 93       	push	r27
    5d9c:	ef 93       	push	r30
    5d9e:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    5da0:	e0 91 f2 0b 	lds	r30, 0x0BF2
    5da4:	f0 91 f3 0b 	lds	r31, 0x0BF3
    5da8:	80 81       	ld	r24, Z
    5daa:	82 fd       	sbrc	r24, 2
    5dac:	14 c0       	rjmp	.+40     	; 0x5dd6 <__vector_51+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    5dae:	e2 ee       	ldi	r30, 0xE2	; 226
    5db0:	fb e0       	ldi	r31, 0x0B	; 11
    5db2:	a6 89       	ldd	r26, Z+22	; 0x16
    5db4:	b7 89       	ldd	r27, Z+23	; 0x17
    5db6:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    5db8:	81 8d       	ldd	r24, Z+25	; 0x19
    5dba:	8f 5f       	subi	r24, 0xFF	; 255
    5dbc:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    5dbe:	92 8d       	ldd	r25, Z+26	; 0x1a
    5dc0:	89 17       	cp	r24, r25
    5dc2:	71 f0       	breq	.+28     	; 0x5de0 <__vector_51+0x5c>
      _rx_buffer[_rx_buffer_head] = c;
    5dc4:	df 01       	movw	r26, r30
    5dc6:	e1 8d       	ldd	r30, Z+25	; 0x19
    5dc8:	f0 e0       	ldi	r31, 0x00	; 0
    5dca:	ee 51       	subi	r30, 0x1E	; 30
    5dcc:	f4 4f       	sbci	r31, 0xF4	; 244
    5dce:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
    5dd0:	59 96       	adiw	r26, 0x19	; 25
    5dd2:	8c 93       	st	X, r24
    5dd4:	05 c0       	rjmp	.+10     	; 0x5de0 <__vector_51+0x5c>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    5dd6:	e0 91 f8 0b 	lds	r30, 0x0BF8
    5dda:	f0 91 f9 0b 	lds	r31, 0x0BF9
    5dde:	80 81       	ld	r24, Z
  Serial2._rx_complete_irq();
}
    5de0:	ff 91       	pop	r31
    5de2:	ef 91       	pop	r30
    5de4:	bf 91       	pop	r27
    5de6:	af 91       	pop	r26
    5de8:	9f 91       	pop	r25
    5dea:	8f 91       	pop	r24
    5dec:	2f 91       	pop	r18
    5dee:	0f 90       	pop	r0
    5df0:	0b be       	out	0x3b, r0	; 59
    5df2:	0f 90       	pop	r0
    5df4:	0f be       	out	0x3f, r0	; 63
    5df6:	0f 90       	pop	r0
    5df8:	1f 90       	pop	r1
    5dfa:	18 95       	reti

00005dfc <__vector_52>:

ISR(USART2_UDRE_vect)
{
    5dfc:	1f 92       	push	r1
    5dfe:	0f 92       	push	r0
    5e00:	0f b6       	in	r0, 0x3f	; 63
    5e02:	0f 92       	push	r0
    5e04:	11 24       	eor	r1, r1
    5e06:	0b b6       	in	r0, 0x3b	; 59
    5e08:	0f 92       	push	r0
    5e0a:	2f 93       	push	r18
    5e0c:	3f 93       	push	r19
    5e0e:	4f 93       	push	r20
    5e10:	5f 93       	push	r21
    5e12:	6f 93       	push	r22
    5e14:	7f 93       	push	r23
    5e16:	8f 93       	push	r24
    5e18:	9f 93       	push	r25
    5e1a:	af 93       	push	r26
    5e1c:	bf 93       	push	r27
    5e1e:	ef 93       	push	r30
    5e20:	ff 93       	push	r31
  Serial2._tx_udr_empty_irq();
    5e22:	82 ee       	ldi	r24, 0xE2	; 226
    5e24:	9b e0       	ldi	r25, 0x0B	; 11
    5e26:	76 dd       	rcall	.-1300   	; 0x5914 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    5e28:	ff 91       	pop	r31
    5e2a:	ef 91       	pop	r30
    5e2c:	bf 91       	pop	r27
    5e2e:	af 91       	pop	r26
    5e30:	9f 91       	pop	r25
    5e32:	8f 91       	pop	r24
    5e34:	7f 91       	pop	r23
    5e36:	6f 91       	pop	r22
    5e38:	5f 91       	pop	r21
    5e3a:	4f 91       	pop	r20
    5e3c:	3f 91       	pop	r19
    5e3e:	2f 91       	pop	r18
    5e40:	0f 90       	pop	r0
    5e42:	0b be       	out	0x3b, r0	; 59
    5e44:	0f 90       	pop	r0
    5e46:	0f be       	out	0x3f, r0	; 63
    5e48:	0f 90       	pop	r0
    5e4a:	1f 90       	pop	r1
    5e4c:	18 95       	reti

00005e4e <_Z17Serial2_availablev>:
HardwareSerial Serial2(&UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial2_available() {
  return Serial2.available();
    5e4e:	82 ee       	ldi	r24, 0xE2	; 226
    5e50:	9b e0       	ldi	r25, 0x0B	; 11
    5e52:	01 dd       	rcall	.-1534   	; 0x5856 <_ZN14HardwareSerial9availableEv>
    5e54:	21 e0       	ldi	r18, 0x01	; 1
    5e56:	89 2b       	or	r24, r25
    5e58:	09 f4       	brne	.+2      	; 0x5e5c <_Z17Serial2_availablev+0xe>
    5e5a:	20 e0       	ldi	r18, 0x00	; 0
}
    5e5c:	82 2f       	mov	r24, r18
    5e5e:	08 95       	ret

00005e60 <_GLOBAL__sub_I___vector_51>:
    5e60:	e2 ee       	ldi	r30, 0xE2	; 226
    5e62:	fb e0       	ldi	r31, 0x0B	; 11
    5e64:	13 82       	std	Z+3, r1	; 0x03
    5e66:	12 82       	std	Z+2, r1	; 0x02
    5e68:	88 ee       	ldi	r24, 0xE8	; 232
    5e6a:	93 e0       	ldi	r25, 0x03	; 3
    5e6c:	a0 e0       	ldi	r26, 0x00	; 0
    5e6e:	b0 e0       	ldi	r27, 0x00	; 0
    5e70:	84 83       	std	Z+4, r24	; 0x04
    5e72:	95 83       	std	Z+5, r25	; 0x05
    5e74:	a6 83       	std	Z+6, r26	; 0x06
    5e76:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    5e78:	8d e4       	ldi	r24, 0x4D	; 77
    5e7a:	96 e0       	ldi	r25, 0x06	; 6
    5e7c:	91 83       	std	Z+1, r25	; 0x01
    5e7e:	80 83       	st	Z, r24
    5e80:	85 ed       	ldi	r24, 0xD5	; 213
    5e82:	90 e0       	ldi	r25, 0x00	; 0
    5e84:	95 87       	std	Z+13, r25	; 0x0d
    5e86:	84 87       	std	Z+12, r24	; 0x0c
    5e88:	84 ed       	ldi	r24, 0xD4	; 212
    5e8a:	90 e0       	ldi	r25, 0x00	; 0
    5e8c:	97 87       	std	Z+15, r25	; 0x0f
    5e8e:	86 87       	std	Z+14, r24	; 0x0e
    5e90:	80 ed       	ldi	r24, 0xD0	; 208
    5e92:	90 e0       	ldi	r25, 0x00	; 0
    5e94:	91 8b       	std	Z+17, r25	; 0x11
    5e96:	80 8b       	std	Z+16, r24	; 0x10
    5e98:	81 ed       	ldi	r24, 0xD1	; 209
    5e9a:	90 e0       	ldi	r25, 0x00	; 0
    5e9c:	93 8b       	std	Z+19, r25	; 0x13
    5e9e:	82 8b       	std	Z+18, r24	; 0x12
    5ea0:	82 ed       	ldi	r24, 0xD2	; 210
    5ea2:	90 e0       	ldi	r25, 0x00	; 0
    5ea4:	95 8b       	std	Z+21, r25	; 0x15
    5ea6:	84 8b       	std	Z+20, r24	; 0x14
    5ea8:	86 ed       	ldi	r24, 0xD6	; 214
    5eaa:	90 e0       	ldi	r25, 0x00	; 0
    5eac:	97 8b       	std	Z+23, r25	; 0x17
    5eae:	86 8b       	std	Z+22, r24	; 0x16
    5eb0:	11 8e       	std	Z+25, r1	; 0x19
    5eb2:	12 8e       	std	Z+26, r1	; 0x1a
    5eb4:	13 8e       	std	Z+27, r1	; 0x1b
    5eb6:	14 8e       	std	Z+28, r1	; 0x1c
    5eb8:	08 95       	ret

00005eba <__vector_54>:
// first place.

#if defined(HAVE_HWSERIAL3)

ISR(USART3_RX_vect)
{
    5eba:	1f 92       	push	r1
    5ebc:	0f 92       	push	r0
    5ebe:	0f b6       	in	r0, 0x3f	; 63
    5ec0:	0f 92       	push	r0
    5ec2:	11 24       	eor	r1, r1
    5ec4:	0b b6       	in	r0, 0x3b	; 59
    5ec6:	0f 92       	push	r0
    5ec8:	2f 93       	push	r18
    5eca:	8f 93       	push	r24
    5ecc:	9f 93       	push	r25
    5ece:	af 93       	push	r26
    5ed0:	bf 93       	push	r27
    5ed2:	ef 93       	push	r30
    5ed4:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    5ed6:	e0 91 8f 0c 	lds	r30, 0x0C8F
    5eda:	f0 91 90 0c 	lds	r31, 0x0C90
    5ede:	80 81       	ld	r24, Z
    5ee0:	82 fd       	sbrc	r24, 2
    5ee2:	14 c0       	rjmp	.+40     	; 0x5f0c <__vector_54+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    5ee4:	ef e7       	ldi	r30, 0x7F	; 127
    5ee6:	fc e0       	ldi	r31, 0x0C	; 12
    5ee8:	a6 89       	ldd	r26, Z+22	; 0x16
    5eea:	b7 89       	ldd	r27, Z+23	; 0x17
    5eec:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    5eee:	81 8d       	ldd	r24, Z+25	; 0x19
    5ef0:	8f 5f       	subi	r24, 0xFF	; 255
    5ef2:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    5ef4:	92 8d       	ldd	r25, Z+26	; 0x1a
    5ef6:	89 17       	cp	r24, r25
    5ef8:	71 f0       	breq	.+28     	; 0x5f16 <__vector_54+0x5c>
      _rx_buffer[_rx_buffer_head] = c;
    5efa:	df 01       	movw	r26, r30
    5efc:	e1 8d       	ldd	r30, Z+25	; 0x19
    5efe:	f0 e0       	ldi	r31, 0x00	; 0
    5f00:	e1 58       	subi	r30, 0x81	; 129
    5f02:	f3 4f       	sbci	r31, 0xF3	; 243
    5f04:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
    5f06:	59 96       	adiw	r26, 0x19	; 25
    5f08:	8c 93       	st	X, r24
    5f0a:	05 c0       	rjmp	.+10     	; 0x5f16 <__vector_54+0x5c>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    5f0c:	e0 91 95 0c 	lds	r30, 0x0C95
    5f10:	f0 91 96 0c 	lds	r31, 0x0C96
    5f14:	80 81       	ld	r24, Z
  Serial3._rx_complete_irq();
}
    5f16:	ff 91       	pop	r31
    5f18:	ef 91       	pop	r30
    5f1a:	bf 91       	pop	r27
    5f1c:	af 91       	pop	r26
    5f1e:	9f 91       	pop	r25
    5f20:	8f 91       	pop	r24
    5f22:	2f 91       	pop	r18
    5f24:	0f 90       	pop	r0
    5f26:	0b be       	out	0x3b, r0	; 59
    5f28:	0f 90       	pop	r0
    5f2a:	0f be       	out	0x3f, r0	; 63
    5f2c:	0f 90       	pop	r0
    5f2e:	1f 90       	pop	r1
    5f30:	18 95       	reti

00005f32 <__vector_55>:

ISR(USART3_UDRE_vect)
{
    5f32:	1f 92       	push	r1
    5f34:	0f 92       	push	r0
    5f36:	0f b6       	in	r0, 0x3f	; 63
    5f38:	0f 92       	push	r0
    5f3a:	11 24       	eor	r1, r1
    5f3c:	0b b6       	in	r0, 0x3b	; 59
    5f3e:	0f 92       	push	r0
    5f40:	2f 93       	push	r18
    5f42:	3f 93       	push	r19
    5f44:	4f 93       	push	r20
    5f46:	5f 93       	push	r21
    5f48:	6f 93       	push	r22
    5f4a:	7f 93       	push	r23
    5f4c:	8f 93       	push	r24
    5f4e:	9f 93       	push	r25
    5f50:	af 93       	push	r26
    5f52:	bf 93       	push	r27
    5f54:	ef 93       	push	r30
    5f56:	ff 93       	push	r31
  Serial3._tx_udr_empty_irq();
    5f58:	8f e7       	ldi	r24, 0x7F	; 127
    5f5a:	9c e0       	ldi	r25, 0x0C	; 12
    5f5c:	db dc       	rcall	.-1610   	; 0x5914 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    5f5e:	ff 91       	pop	r31
    5f60:	ef 91       	pop	r30
    5f62:	bf 91       	pop	r27
    5f64:	af 91       	pop	r26
    5f66:	9f 91       	pop	r25
    5f68:	8f 91       	pop	r24
    5f6a:	7f 91       	pop	r23
    5f6c:	6f 91       	pop	r22
    5f6e:	5f 91       	pop	r21
    5f70:	4f 91       	pop	r20
    5f72:	3f 91       	pop	r19
    5f74:	2f 91       	pop	r18
    5f76:	0f 90       	pop	r0
    5f78:	0b be       	out	0x3b, r0	; 59
    5f7a:	0f 90       	pop	r0
    5f7c:	0f be       	out	0x3f, r0	; 63
    5f7e:	0f 90       	pop	r0
    5f80:	1f 90       	pop	r1
    5f82:	18 95       	reti

00005f84 <_Z17Serial3_availablev>:
HardwareSerial Serial3(&UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial3_available() {
  return Serial3.available();
    5f84:	8f e7       	ldi	r24, 0x7F	; 127
    5f86:	9c e0       	ldi	r25, 0x0C	; 12
    5f88:	66 dc       	rcall	.-1844   	; 0x5856 <_ZN14HardwareSerial9availableEv>
    5f8a:	21 e0       	ldi	r18, 0x01	; 1
    5f8c:	89 2b       	or	r24, r25
    5f8e:	09 f4       	brne	.+2      	; 0x5f92 <_Z17Serial3_availablev+0xe>
    5f90:	20 e0       	ldi	r18, 0x00	; 0
}
    5f92:	82 2f       	mov	r24, r18
    5f94:	08 95       	ret

00005f96 <_GLOBAL__sub_I___vector_54>:
    5f96:	ef e7       	ldi	r30, 0x7F	; 127
    5f98:	fc e0       	ldi	r31, 0x0C	; 12
    5f9a:	13 82       	std	Z+3, r1	; 0x03
    5f9c:	12 82       	std	Z+2, r1	; 0x02
    5f9e:	88 ee       	ldi	r24, 0xE8	; 232
    5fa0:	93 e0       	ldi	r25, 0x03	; 3
    5fa2:	a0 e0       	ldi	r26, 0x00	; 0
    5fa4:	b0 e0       	ldi	r27, 0x00	; 0
    5fa6:	84 83       	std	Z+4, r24	; 0x04
    5fa8:	95 83       	std	Z+5, r25	; 0x05
    5faa:	a6 83       	std	Z+6, r26	; 0x06
    5fac:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    5fae:	8d e4       	ldi	r24, 0x4D	; 77
    5fb0:	96 e0       	ldi	r25, 0x06	; 6
    5fb2:	91 83       	std	Z+1, r25	; 0x01
    5fb4:	80 83       	st	Z, r24
    5fb6:	85 e3       	ldi	r24, 0x35	; 53
    5fb8:	91 e0       	ldi	r25, 0x01	; 1
    5fba:	95 87       	std	Z+13, r25	; 0x0d
    5fbc:	84 87       	std	Z+12, r24	; 0x0c
    5fbe:	84 e3       	ldi	r24, 0x34	; 52
    5fc0:	91 e0       	ldi	r25, 0x01	; 1
    5fc2:	97 87       	std	Z+15, r25	; 0x0f
    5fc4:	86 87       	std	Z+14, r24	; 0x0e
    5fc6:	80 e3       	ldi	r24, 0x30	; 48
    5fc8:	91 e0       	ldi	r25, 0x01	; 1
    5fca:	91 8b       	std	Z+17, r25	; 0x11
    5fcc:	80 8b       	std	Z+16, r24	; 0x10
    5fce:	81 e3       	ldi	r24, 0x31	; 49
    5fd0:	91 e0       	ldi	r25, 0x01	; 1
    5fd2:	93 8b       	std	Z+19, r25	; 0x13
    5fd4:	82 8b       	std	Z+18, r24	; 0x12
    5fd6:	82 e3       	ldi	r24, 0x32	; 50
    5fd8:	91 e0       	ldi	r25, 0x01	; 1
    5fda:	95 8b       	std	Z+21, r25	; 0x15
    5fdc:	84 8b       	std	Z+20, r24	; 0x14
    5fde:	86 e3       	ldi	r24, 0x36	; 54
    5fe0:	91 e0       	ldi	r25, 0x01	; 1
    5fe2:	97 8b       	std	Z+23, r25	; 0x17
    5fe4:	86 8b       	std	Z+22, r24	; 0x16
    5fe6:	11 8e       	std	Z+25, r1	; 0x19
    5fe8:	12 8e       	std	Z+26, r1	; 0x1a
    5fea:	13 8e       	std	Z+27, r1	; 0x1b
    5fec:	14 8e       	std	Z+28, r1	; 0x1c
    5fee:	08 95       	ret

00005ff0 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    5ff0:	08 95       	ret

00005ff2 <_ZNK9IPAddress7printToER5Print>:
}

bool IPAddress::operator==(const uint8_t* addr) const
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}
    5ff2:	8f 92       	push	r8
    5ff4:	9f 92       	push	r9
    5ff6:	af 92       	push	r10
    5ff8:	bf 92       	push	r11
    5ffa:	cf 92       	push	r12
    5ffc:	df 92       	push	r13
    5ffe:	ef 92       	push	r14
    6000:	ff 92       	push	r15
    6002:	0f 93       	push	r16
    6004:	1f 93       	push	r17
    6006:	cf 93       	push	r28
    6008:	df 93       	push	r29
    600a:	5c 01       	movw	r10, r24
    600c:	7b 01       	movw	r14, r22
    600e:	4c 01       	movw	r8, r24
    6010:	82 e0       	ldi	r24, 0x02	; 2
    6012:	88 0e       	add	r8, r24
    6014:	91 1c       	adc	r9, r1
    6016:	65 01       	movw	r12, r10
    6018:	e5 e0       	ldi	r30, 0x05	; 5
    601a:	ce 0e       	add	r12, r30
    601c:	d1 1c       	adc	r13, r1
    601e:	00 e0       	ldi	r16, 0x00	; 0
    6020:	10 e0       	ldi	r17, 0x00	; 0
    6022:	f4 01       	movw	r30, r8
    6024:	61 91       	ld	r22, Z+
    6026:	4f 01       	movw	r8, r30
    6028:	4a e0       	ldi	r20, 0x0A	; 10
    602a:	50 e0       	ldi	r21, 0x00	; 0
    602c:	c7 01       	movw	r24, r14
    602e:	97 d1       	rcall	.+814    	; 0x635e <_ZN5Print5printEhi>
    6030:	ec 01       	movw	r28, r24
    6032:	6e e2       	ldi	r22, 0x2E	; 46
    6034:	c7 01       	movw	r24, r14
    6036:	8a d0       	rcall	.+276    	; 0x614c <_ZN5Print5printEc>
    6038:	8c 0f       	add	r24, r28
    603a:	9d 1f       	adc	r25, r29
    603c:	08 0f       	add	r16, r24
    603e:	19 1f       	adc	r17, r25
    6040:	8c 14       	cp	r8, r12
    6042:	9d 04       	cpc	r9, r13
    6044:	71 f7       	brne	.-36     	; 0x6022 <_ZNK9IPAddress7printToER5Print+0x30>
    6046:	4a e0       	ldi	r20, 0x0A	; 10
    6048:	50 e0       	ldi	r21, 0x00	; 0
    604a:	f5 01       	movw	r30, r10
    604c:	65 81       	ldd	r22, Z+5	; 0x05
    604e:	c7 01       	movw	r24, r14
    6050:	86 d1       	rcall	.+780    	; 0x635e <_ZN5Print5printEhi>
    6052:	80 0f       	add	r24, r16
    6054:	91 1f       	adc	r25, r17
    6056:	df 91       	pop	r29
    6058:	cf 91       	pop	r28
    605a:	1f 91       	pop	r17
    605c:	0f 91       	pop	r16
    605e:	ff 90       	pop	r15
    6060:	ef 90       	pop	r14
    6062:	df 90       	pop	r13
    6064:	cf 90       	pop	r12
    6066:	bf 90       	pop	r11
    6068:	af 90       	pop	r10
    606a:	9f 90       	pop	r9
    606c:	8f 90       	pop	r8
    606e:	08 95       	ret

00006070 <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    6070:	ec e1       	ldi	r30, 0x1C	; 28
    6072:	fd e0       	ldi	r31, 0x0D	; 13
    6074:	8d e5       	ldi	r24, 0x5D	; 93
    6076:	96 e0       	ldi	r25, 0x06	; 6
    6078:	91 83       	std	Z+1, r25	; 0x01
    607a:	80 83       	st	Z, r24
{
    _address.bytes[0] = first_octet;
    607c:	12 82       	std	Z+2, r1	; 0x02
    _address.bytes[1] = second_octet;
    607e:	13 82       	std	Z+3, r1	; 0x03
    _address.bytes[2] = third_octet;
    6080:	14 82       	std	Z+4, r1	; 0x04
    _address.bytes[3] = fourth_octet;
    6082:	15 82       	std	Z+5, r1	; 0x05
    6084:	08 95       	ret

00006086 <initVariant>:
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    6086:	08 95       	ret

00006088 <main>:

int main(void)
{
	init();
    6088:	63 d5       	rcall	.+2758   	; 0x6b50 <init>

	initVariant();
    608a:	fd df       	rcall	.-6      	; 0x6086 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    608c:	1e db       	rcall	.-2500   	; 0x56ca <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    608e:	c9 e5       	ldi	r28, 0x59	; 89
    6090:	dc e2       	ldi	r29, 0x2C	; 44
#endif
	
	setup();
    
	for (;;) {
		loop();
    6092:	a0 db       	rcall	.-2240   	; 0x57d4 <loop>
		if (serialEventRun) serialEventRun();
    6094:	20 97       	sbiw	r28, 0x00	; 0
    6096:	e9 f3       	breq	.-6      	; 0x6092 <main+0xa>
    6098:	0c dc       	rcall	.-2024   	; 0x58b2 <_Z14serialEventRunv>
    609a:	fb cf       	rjmp	.-10     	; 0x6092 <main+0xa>

0000609c <_Znwj>:
  return malloc(size);
}

void *operator new[](size_t size) {
  return malloc(size);
}
    609c:	0c 94 ce 3a 	jmp	0x759c	; 0x759c <malloc>
    60a0:	08 95       	ret

000060a2 <_ZdlPv>:

void operator delete(void * ptr) {
  free(ptr);
    60a2:	0c 94 63 3b 	jmp	0x76c6	; 0x76c6 <free>
    60a6:	08 95       	ret

000060a8 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
  return n;
}
    60a8:	cf 92       	push	r12
    60aa:	df 92       	push	r13
    60ac:	ef 92       	push	r14
    60ae:	ff 92       	push	r15
    60b0:	0f 93       	push	r16
    60b2:	1f 93       	push	r17
    60b4:	cf 93       	push	r28
    60b6:	df 93       	push	r29
    60b8:	41 15       	cp	r20, r1
    60ba:	51 05       	cpc	r21, r1
    60bc:	b1 f0       	breq	.+44     	; 0x60ea <_ZN5Print5writeEPKhj+0x42>
    60be:	8c 01       	movw	r16, r24
    60c0:	e6 2e       	mov	r14, r22
    60c2:	f7 2e       	mov	r15, r23
    60c4:	ea 01       	movw	r28, r20
    60c6:	c1 2c       	mov	r12, r1
    60c8:	d1 2c       	mov	r13, r1
    60ca:	d7 01       	movw	r26, r14
    60cc:	6d 91       	ld	r22, X+
    60ce:	7d 01       	movw	r14, r26
    60d0:	d8 01       	movw	r26, r16
    60d2:	ed 91       	ld	r30, X+
    60d4:	fc 91       	ld	r31, X
    60d6:	01 90       	ld	r0, Z+
    60d8:	f0 81       	ld	r31, Z
    60da:	e0 2d       	mov	r30, r0
    60dc:	c8 01       	movw	r24, r16
    60de:	19 95       	eicall
    60e0:	c8 0e       	add	r12, r24
    60e2:	d9 1e       	adc	r13, r25
    60e4:	21 97       	sbiw	r28, 0x01	; 1
    60e6:	89 f7       	brne	.-30     	; 0x60ca <_ZN5Print5writeEPKhj+0x22>
    60e8:	02 c0       	rjmp	.+4      	; 0x60ee <_ZN5Print5writeEPKhj+0x46>
    60ea:	c1 2c       	mov	r12, r1
    60ec:	d1 2c       	mov	r13, r1
    60ee:	c6 01       	movw	r24, r12
    60f0:	df 91       	pop	r29
    60f2:	cf 91       	pop	r28
    60f4:	1f 91       	pop	r17
    60f6:	0f 91       	pop	r16
    60f8:	ff 90       	pop	r15
    60fa:	ef 90       	pop	r14
    60fc:	df 90       	pop	r13
    60fe:	cf 90       	pop	r12
    6100:	08 95       	ret

00006102 <_ZN5Print5printERK6String>:
    6102:	dc 01       	movw	r26, r24
    6104:	ed 91       	ld	r30, X+
    6106:	fc 91       	ld	r31, X
    6108:	db 01       	movw	r26, r22
    610a:	14 96       	adiw	r26, 0x04	; 4
    610c:	4d 91       	ld	r20, X+
    610e:	5c 91       	ld	r21, X
    6110:	15 97       	sbiw	r26, 0x05	; 5
    6112:	6d 91       	ld	r22, X+
    6114:	7c 91       	ld	r23, X
    6116:	02 80       	ldd	r0, Z+2	; 0x02
    6118:	f3 81       	ldd	r31, Z+3	; 0x03
    611a:	e0 2d       	mov	r30, r0
    611c:	19 95       	eicall
    611e:	08 95       	ret

00006120 <_ZN5Print5printEPKc>:
    6120:	61 15       	cp	r22, r1
    6122:	71 05       	cpc	r23, r1
    6124:	81 f0       	breq	.+32     	; 0x6146 <_ZN5Print5printEPKc+0x26>
    6126:	fb 01       	movw	r30, r22
    6128:	01 90       	ld	r0, Z+
    612a:	00 20       	and	r0, r0
    612c:	e9 f7       	brne	.-6      	; 0x6128 <_ZN5Print5printEPKc+0x8>
    612e:	31 97       	sbiw	r30, 0x01	; 1
    6130:	af 01       	movw	r20, r30
    6132:	46 1b       	sub	r20, r22
    6134:	57 0b       	sbc	r21, r23
    6136:	dc 01       	movw	r26, r24
    6138:	ed 91       	ld	r30, X+
    613a:	fc 91       	ld	r31, X
    613c:	02 80       	ldd	r0, Z+2	; 0x02
    613e:	f3 81       	ldd	r31, Z+3	; 0x03
    6140:	e0 2d       	mov	r30, r0
    6142:	19 95       	eicall
    6144:	08 95       	ret
    6146:	80 e0       	ldi	r24, 0x00	; 0
    6148:	90 e0       	ldi	r25, 0x00	; 0
    614a:	08 95       	ret

0000614c <_ZN5Print5printEc>:
    614c:	dc 01       	movw	r26, r24
    614e:	ed 91       	ld	r30, X+
    6150:	fc 91       	ld	r31, X
    6152:	01 90       	ld	r0, Z+
    6154:	f0 81       	ld	r31, Z
    6156:	e0 2d       	mov	r30, r0
    6158:	19 95       	eicall
    615a:	08 95       	ret

0000615c <_ZN5Print7printlnEv>:
    615c:	dc 01       	movw	r26, r24
    615e:	ed 91       	ld	r30, X+
    6160:	fc 91       	ld	r31, X
    6162:	02 80       	ldd	r0, Z+2	; 0x02
    6164:	f3 81       	ldd	r31, Z+3	; 0x03
    6166:	e0 2d       	mov	r30, r0
    6168:	42 e0       	ldi	r20, 0x02	; 2
    616a:	50 e0       	ldi	r21, 0x00	; 0
    616c:	6f e5       	ldi	r22, 0x5F	; 95
    616e:	76 e0       	ldi	r23, 0x06	; 6
    6170:	19 95       	eicall
    6172:	08 95       	ret

00006174 <_ZN5Print7printlnERK6String>:
    6174:	0f 93       	push	r16
    6176:	1f 93       	push	r17
    6178:	cf 93       	push	r28
    617a:	df 93       	push	r29
    617c:	ec 01       	movw	r28, r24
    617e:	c1 df       	rcall	.-126    	; 0x6102 <_ZN5Print5printERK6String>
    6180:	8c 01       	movw	r16, r24
    6182:	ce 01       	movw	r24, r28
    6184:	eb df       	rcall	.-42     	; 0x615c <_ZN5Print7printlnEv>
    6186:	80 0f       	add	r24, r16
    6188:	91 1f       	adc	r25, r17
    618a:	df 91       	pop	r29
    618c:	cf 91       	pop	r28
    618e:	1f 91       	pop	r17
    6190:	0f 91       	pop	r16
    6192:	08 95       	ret

00006194 <_ZN5Print7printlnEPKc>:
    6194:	0f 93       	push	r16
    6196:	1f 93       	push	r17
    6198:	cf 93       	push	r28
    619a:	df 93       	push	r29
    619c:	ec 01       	movw	r28, r24
    619e:	c0 df       	rcall	.-128    	; 0x6120 <_ZN5Print5printEPKc>
    61a0:	8c 01       	movw	r16, r24
    61a2:	ce 01       	movw	r24, r28
    61a4:	db df       	rcall	.-74     	; 0x615c <_ZN5Print7printlnEv>
    61a6:	80 0f       	add	r24, r16
    61a8:	91 1f       	adc	r25, r17
    61aa:	df 91       	pop	r29
    61ac:	cf 91       	pop	r28
    61ae:	1f 91       	pop	r17
    61b0:	0f 91       	pop	r16
    61b2:	08 95       	ret

000061b4 <_ZN5Print11printNumberEmh>:
    61b4:	4f 92       	push	r4
    61b6:	5f 92       	push	r5
    61b8:	6f 92       	push	r6
    61ba:	7f 92       	push	r7
    61bc:	9f 92       	push	r9
    61be:	af 92       	push	r10
    61c0:	bf 92       	push	r11
    61c2:	cf 92       	push	r12
    61c4:	df 92       	push	r13
    61c6:	ef 92       	push	r14
    61c8:	ff 92       	push	r15
    61ca:	0f 93       	push	r16
    61cc:	1f 93       	push	r17
    61ce:	cf 93       	push	r28
    61d0:	df 93       	push	r29
    61d2:	cd b7       	in	r28, 0x3d	; 61
    61d4:	de b7       	in	r29, 0x3e	; 62
    61d6:	a1 97       	sbiw	r28, 0x21	; 33
    61d8:	0f b6       	in	r0, 0x3f	; 63
    61da:	f8 94       	cli
    61dc:	de bf       	out	0x3e, r29	; 62
    61de:	0f be       	out	0x3f, r0	; 63
    61e0:	cd bf       	out	0x3d, r28	; 61
    61e2:	5c 01       	movw	r10, r24
    61e4:	6a 01       	movw	r12, r20
    61e6:	7b 01       	movw	r14, r22
    61e8:	92 2e       	mov	r9, r18
    61ea:	19 a2       	std	Y+33, r1	; 0x21
    61ec:	81 e0       	ldi	r24, 0x01	; 1
    61ee:	82 17       	cp	r24, r18
    61f0:	20 f0       	brcs	.+8      	; 0x61fa <_ZN5Print11printNumberEmh+0x46>
    61f2:	0f 2e       	mov	r0, r31
    61f4:	fa e0       	ldi	r31, 0x0A	; 10
    61f6:	9f 2e       	mov	r9, r31
    61f8:	f0 2d       	mov	r31, r0
    61fa:	8e 01       	movw	r16, r28
    61fc:	0f 5d       	subi	r16, 0xDF	; 223
    61fe:	1f 4f       	sbci	r17, 0xFF	; 255
    6200:	49 2c       	mov	r4, r9
    6202:	51 2c       	mov	r5, r1
    6204:	61 2c       	mov	r6, r1
    6206:	71 2c       	mov	r7, r1
    6208:	c7 01       	movw	r24, r14
    620a:	b6 01       	movw	r22, r12
    620c:	a3 01       	movw	r20, r6
    620e:	92 01       	movw	r18, r4
    6210:	0e 94 90 3a 	call	0x7520	; 0x7520 <__udivmodsi4>
    6214:	8c 2d       	mov	r24, r12
    6216:	92 9e       	mul	r9, r18
    6218:	80 19       	sub	r24, r0
    621a:	11 24       	eor	r1, r1
    621c:	01 50       	subi	r16, 0x01	; 1
    621e:	11 09       	sbc	r17, r1
    6220:	8a 30       	cpi	r24, 0x0A	; 10
    6222:	10 f4       	brcc	.+4      	; 0x6228 <_ZN5Print11printNumberEmh+0x74>
    6224:	80 5d       	subi	r24, 0xD0	; 208
    6226:	01 c0       	rjmp	.+2      	; 0x622a <_ZN5Print11printNumberEmh+0x76>
    6228:	89 5c       	subi	r24, 0xC9	; 201
    622a:	d8 01       	movw	r26, r16
    622c:	8c 93       	st	X, r24
    622e:	c2 2e       	mov	r12, r18
    6230:	d3 2e       	mov	r13, r19
    6232:	e4 2e       	mov	r14, r20
    6234:	f5 2e       	mov	r15, r21
    6236:	c1 14       	cp	r12, r1
    6238:	d1 04       	cpc	r13, r1
    623a:	e1 04       	cpc	r14, r1
    623c:	f1 04       	cpc	r15, r1
    623e:	21 f7       	brne	.-56     	; 0x6208 <_ZN5Print11printNumberEmh+0x54>
    6240:	01 15       	cp	r16, r1
    6242:	11 05       	cpc	r17, r1
    6244:	91 f0       	breq	.+36     	; 0x626a <_ZN5Print11printNumberEmh+0xb6>
    6246:	f8 01       	movw	r30, r16
    6248:	01 90       	ld	r0, Z+
    624a:	00 20       	and	r0, r0
    624c:	e9 f7       	brne	.-6      	; 0x6248 <_ZN5Print11printNumberEmh+0x94>
    624e:	31 97       	sbiw	r30, 0x01	; 1
    6250:	af 01       	movw	r20, r30
    6252:	40 1b       	sub	r20, r16
    6254:	51 0b       	sbc	r21, r17
    6256:	d5 01       	movw	r26, r10
    6258:	ed 91       	ld	r30, X+
    625a:	fc 91       	ld	r31, X
    625c:	02 80       	ldd	r0, Z+2	; 0x02
    625e:	f3 81       	ldd	r31, Z+3	; 0x03
    6260:	e0 2d       	mov	r30, r0
    6262:	b8 01       	movw	r22, r16
    6264:	c5 01       	movw	r24, r10
    6266:	19 95       	eicall
    6268:	02 c0       	rjmp	.+4      	; 0x626e <_ZN5Print11printNumberEmh+0xba>
    626a:	80 e0       	ldi	r24, 0x00	; 0
    626c:	90 e0       	ldi	r25, 0x00	; 0
    626e:	a1 96       	adiw	r28, 0x21	; 33
    6270:	0f b6       	in	r0, 0x3f	; 63
    6272:	f8 94       	cli
    6274:	de bf       	out	0x3e, r29	; 62
    6276:	0f be       	out	0x3f, r0	; 63
    6278:	cd bf       	out	0x3d, r28	; 61
    627a:	df 91       	pop	r29
    627c:	cf 91       	pop	r28
    627e:	1f 91       	pop	r17
    6280:	0f 91       	pop	r16
    6282:	ff 90       	pop	r15
    6284:	ef 90       	pop	r14
    6286:	df 90       	pop	r13
    6288:	cf 90       	pop	r12
    628a:	bf 90       	pop	r11
    628c:	af 90       	pop	r10
    628e:	9f 90       	pop	r9
    6290:	7f 90       	pop	r7
    6292:	6f 90       	pop	r6
    6294:	5f 90       	pop	r5
    6296:	4f 90       	pop	r4
    6298:	08 95       	ret

0000629a <_ZN5Print5printEli>:
    629a:	cf 92       	push	r12
    629c:	df 92       	push	r13
    629e:	ef 92       	push	r14
    62a0:	ff 92       	push	r15
    62a2:	0f 93       	push	r16
    62a4:	1f 93       	push	r17
    62a6:	cf 93       	push	r28
    62a8:	df 93       	push	r29
    62aa:	ec 01       	movw	r28, r24
    62ac:	6a 01       	movw	r12, r20
    62ae:	7b 01       	movw	r14, r22
    62b0:	21 15       	cp	r18, r1
    62b2:	31 05       	cpc	r19, r1
    62b4:	41 f4       	brne	.+16     	; 0x62c6 <_ZN5Print5printEli+0x2c>
    62b6:	e8 81       	ld	r30, Y
    62b8:	f9 81       	ldd	r31, Y+1	; 0x01
    62ba:	01 90       	ld	r0, Z+
    62bc:	f0 81       	ld	r31, Z
    62be:	e0 2d       	mov	r30, r0
    62c0:	64 2f       	mov	r22, r20
    62c2:	19 95       	eicall
    62c4:	19 c0       	rjmp	.+50     	; 0x62f8 <_ZN5Print5printEli+0x5e>
    62c6:	2a 30       	cpi	r18, 0x0A	; 10
    62c8:	31 05       	cpc	r19, r1
    62ca:	a9 f4       	brne	.+42     	; 0x62f6 <_ZN5Print5printEli+0x5c>
    62cc:	77 23       	and	r23, r23
    62ce:	84 f4       	brge	.+32     	; 0x62f0 <_ZN5Print5printEli+0x56>
    62d0:	6d e2       	ldi	r22, 0x2D	; 45
    62d2:	3c df       	rcall	.-392    	; 0x614c <_ZN5Print5printEc>
    62d4:	8c 01       	movw	r16, r24
    62d6:	44 27       	eor	r20, r20
    62d8:	55 27       	eor	r21, r21
    62da:	ba 01       	movw	r22, r20
    62dc:	4c 19       	sub	r20, r12
    62de:	5d 09       	sbc	r21, r13
    62e0:	6e 09       	sbc	r22, r14
    62e2:	7f 09       	sbc	r23, r15
    62e4:	2a e0       	ldi	r18, 0x0A	; 10
    62e6:	ce 01       	movw	r24, r28
    62e8:	65 df       	rcall	.-310    	; 0x61b4 <_ZN5Print11printNumberEmh>
    62ea:	80 0f       	add	r24, r16
    62ec:	91 1f       	adc	r25, r17
    62ee:	04 c0       	rjmp	.+8      	; 0x62f8 <_ZN5Print5printEli+0x5e>
    62f0:	2a e0       	ldi	r18, 0x0A	; 10
    62f2:	60 df       	rcall	.-320    	; 0x61b4 <_ZN5Print11printNumberEmh>
    62f4:	01 c0       	rjmp	.+2      	; 0x62f8 <_ZN5Print5printEli+0x5e>
    62f6:	5e df       	rcall	.-324    	; 0x61b4 <_ZN5Print11printNumberEmh>
    62f8:	df 91       	pop	r29
    62fa:	cf 91       	pop	r28
    62fc:	1f 91       	pop	r17
    62fe:	0f 91       	pop	r16
    6300:	ff 90       	pop	r15
    6302:	ef 90       	pop	r14
    6304:	df 90       	pop	r13
    6306:	cf 90       	pop	r12
    6308:	08 95       	ret

0000630a <_ZN5Print5printEii>:
    630a:	9a 01       	movw	r18, r20
    630c:	ab 01       	movw	r20, r22
    630e:	77 0f       	add	r23, r23
    6310:	66 0b       	sbc	r22, r22
    6312:	77 0b       	sbc	r23, r23
    6314:	c2 cf       	rjmp	.-124    	; 0x629a <_ZN5Print5printEli>
    6316:	08 95       	ret

00006318 <_ZN5Print7printlnEii>:
    6318:	0f 93       	push	r16
    631a:	1f 93       	push	r17
    631c:	cf 93       	push	r28
    631e:	df 93       	push	r29
    6320:	ec 01       	movw	r28, r24
    6322:	9a 01       	movw	r18, r20
    6324:	ab 01       	movw	r20, r22
    6326:	77 0f       	add	r23, r23
    6328:	66 0b       	sbc	r22, r22
    632a:	77 0b       	sbc	r23, r23
    632c:	b6 df       	rcall	.-148    	; 0x629a <_ZN5Print5printEli>
    632e:	8c 01       	movw	r16, r24
    6330:	ce 01       	movw	r24, r28
    6332:	14 df       	rcall	.-472    	; 0x615c <_ZN5Print7printlnEv>
    6334:	80 0f       	add	r24, r16
    6336:	91 1f       	adc	r25, r17
    6338:	df 91       	pop	r29
    633a:	cf 91       	pop	r28
    633c:	1f 91       	pop	r17
    633e:	0f 91       	pop	r16
    6340:	08 95       	ret

00006342 <_ZN5Print5printEmi>:
    6342:	21 15       	cp	r18, r1
    6344:	31 05       	cpc	r19, r1
    6346:	49 f4       	brne	.+18     	; 0x635a <_ZN5Print5printEmi+0x18>
    6348:	dc 01       	movw	r26, r24
    634a:	ed 91       	ld	r30, X+
    634c:	fc 91       	ld	r31, X
    634e:	01 90       	ld	r0, Z+
    6350:	f0 81       	ld	r31, Z
    6352:	e0 2d       	mov	r30, r0
    6354:	64 2f       	mov	r22, r20
    6356:	19 95       	eicall
    6358:	08 95       	ret
    635a:	2c cf       	rjmp	.-424    	; 0x61b4 <_ZN5Print11printNumberEmh>
    635c:	08 95       	ret

0000635e <_ZN5Print5printEhi>:
    635e:	9a 01       	movw	r18, r20
    6360:	46 2f       	mov	r20, r22
    6362:	50 e0       	ldi	r21, 0x00	; 0
    6364:	60 e0       	ldi	r22, 0x00	; 0
    6366:	70 e0       	ldi	r23, 0x00	; 0
    6368:	ec cf       	rjmp	.-40     	; 0x6342 <_ZN5Print5printEmi>
    636a:	08 95       	ret

0000636c <_ZN5Print5printEji>:
    636c:	9a 01       	movw	r18, r20
    636e:	ab 01       	movw	r20, r22
    6370:	60 e0       	ldi	r22, 0x00	; 0
    6372:	70 e0       	ldi	r23, 0x00	; 0
    6374:	e6 cf       	rjmp	.-52     	; 0x6342 <_ZN5Print5printEmi>
    6376:	08 95       	ret

00006378 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    6378:	4f 92       	push	r4
    637a:	5f 92       	push	r5
    637c:	7f 92       	push	r7
    637e:	8f 92       	push	r8
    6380:	9f 92       	push	r9
    6382:	af 92       	push	r10
    6384:	bf 92       	push	r11
    6386:	cf 92       	push	r12
    6388:	df 92       	push	r13
    638a:	ef 92       	push	r14
    638c:	ff 92       	push	r15
    638e:	0f 93       	push	r16
    6390:	1f 93       	push	r17
    6392:	cf 93       	push	r28
    6394:	df 93       	push	r29
    6396:	00 d0       	rcall	.+0      	; 0x6398 <_ZN5Print10printFloatEdh+0x20>
    6398:	1f 92       	push	r1
    639a:	cd b7       	in	r28, 0x3d	; 61
    639c:	de b7       	in	r29, 0x3e	; 62
    639e:	8c 01       	movw	r16, r24
    63a0:	4a 01       	movw	r8, r20
    63a2:	5b 01       	movw	r10, r22
    63a4:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    63a6:	9a 01       	movw	r18, r20
    63a8:	ab 01       	movw	r20, r22
    63aa:	c5 01       	movw	r24, r10
    63ac:	b4 01       	movw	r22, r8
    63ae:	0e 94 79 3a 	call	0x74f2	; 0x74f2 <__unordsf2>
    63b2:	88 23       	and	r24, r24
    63b4:	29 f0       	breq	.+10     	; 0x63c0 <_ZN5Print10printFloatEdh+0x48>
    63b6:	62 e6       	ldi	r22, 0x62	; 98
    63b8:	76 e0       	ldi	r23, 0x06	; 6
    63ba:	c8 01       	movw	r24, r16
    63bc:	b1 de       	rcall	.-670    	; 0x6120 <_ZN5Print5printEPKc>
    63be:	bc c0       	rjmp	.+376    	; 0x6538 <_ZN5Print10printFloatEdh+0x1c0>
  if (isinf(number)) return print("inf");
    63c0:	75 01       	movw	r14, r10
    63c2:	64 01       	movw	r12, r8
    63c4:	e8 94       	clt
    63c6:	f7 f8       	bld	r15, 7
    63c8:	2f ef       	ldi	r18, 0xFF	; 255
    63ca:	3f ef       	ldi	r19, 0xFF	; 255
    63cc:	4f e7       	ldi	r20, 0x7F	; 127
    63ce:	5f e7       	ldi	r21, 0x7F	; 127
    63d0:	c7 01       	movw	r24, r14
    63d2:	b6 01       	movw	r22, r12
    63d4:	0e 94 79 3a 	call	0x74f2	; 0x74f2 <__unordsf2>
    63d8:	81 11       	cpse	r24, r1
    63da:	0e c0       	rjmp	.+28     	; 0x63f8 <_ZN5Print10printFloatEdh+0x80>
    63dc:	2f ef       	ldi	r18, 0xFF	; 255
    63de:	3f ef       	ldi	r19, 0xFF	; 255
    63e0:	4f e7       	ldi	r20, 0x7F	; 127
    63e2:	5f e7       	ldi	r21, 0x7F	; 127
    63e4:	c7 01       	movw	r24, r14
    63e6:	b6 01       	movw	r22, r12
    63e8:	ce d6       	rcall	.+3484   	; 0x7186 <__cmpsf2>
    63ea:	18 16       	cp	r1, r24
    63ec:	2c f4       	brge	.+10     	; 0x63f8 <_ZN5Print10printFloatEdh+0x80>
    63ee:	66 e6       	ldi	r22, 0x66	; 102
    63f0:	76 e0       	ldi	r23, 0x06	; 6
    63f2:	c8 01       	movw	r24, r16
    63f4:	95 de       	rcall	.-726    	; 0x6120 <_ZN5Print5printEPKc>
    63f6:	a0 c0       	rjmp	.+320    	; 0x6538 <_ZN5Print10printFloatEdh+0x1c0>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    63f8:	2f ef       	ldi	r18, 0xFF	; 255
    63fa:	3f ef       	ldi	r19, 0xFF	; 255
    63fc:	4f e7       	ldi	r20, 0x7F	; 127
    63fe:	5f e4       	ldi	r21, 0x4F	; 79
    6400:	c5 01       	movw	r24, r10
    6402:	b4 01       	movw	r22, r8
    6404:	0e 94 12 3a 	call	0x7424	; 0x7424 <__gesf2>
    6408:	18 16       	cp	r1, r24
    640a:	2c f4       	brge	.+10     	; 0x6416 <_ZN5Print10printFloatEdh+0x9e>
    640c:	6a e6       	ldi	r22, 0x6A	; 106
    640e:	76 e0       	ldi	r23, 0x06	; 6
    6410:	c8 01       	movw	r24, r16
    6412:	86 de       	rcall	.-756    	; 0x6120 <_ZN5Print5printEPKc>
    6414:	91 c0       	rjmp	.+290    	; 0x6538 <_ZN5Print10printFloatEdh+0x1c0>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    6416:	2f ef       	ldi	r18, 0xFF	; 255
    6418:	3f ef       	ldi	r19, 0xFF	; 255
    641a:	4f e7       	ldi	r20, 0x7F	; 127
    641c:	5f ec       	ldi	r21, 0xCF	; 207
    641e:	c5 01       	movw	r24, r10
    6420:	b4 01       	movw	r22, r8
    6422:	b1 d6       	rcall	.+3426   	; 0x7186 <__cmpsf2>
    6424:	88 23       	and	r24, r24
    6426:	2c f4       	brge	.+10     	; 0x6432 <_ZN5Print10printFloatEdh+0xba>
    6428:	6a e6       	ldi	r22, 0x6A	; 106
    642a:	76 e0       	ldi	r23, 0x06	; 6
    642c:	c8 01       	movw	r24, r16
    642e:	78 de       	rcall	.-784    	; 0x6120 <_ZN5Print5printEPKc>
    6430:	83 c0       	rjmp	.+262    	; 0x6538 <_ZN5Print10printFloatEdh+0x1c0>
  
  // Handle negative numbers
  if (number < 0.0)
    6432:	20 e0       	ldi	r18, 0x00	; 0
    6434:	30 e0       	ldi	r19, 0x00	; 0
    6436:	a9 01       	movw	r20, r18
    6438:	c5 01       	movw	r24, r10
    643a:	b4 01       	movw	r22, r8
    643c:	a4 d6       	rcall	.+3400   	; 0x7186 <__cmpsf2>
    643e:	88 23       	and	r24, r24
    6440:	4c f4       	brge	.+18     	; 0x6454 <_ZN5Print10printFloatEdh+0xdc>
  {
     n += print('-');
    6442:	6d e2       	ldi	r22, 0x2D	; 45
    6444:	c8 01       	movw	r24, r16
    6446:	82 de       	rcall	.-764    	; 0x614c <_ZN5Print5printEc>
    6448:	7c 01       	movw	r14, r24
     number = -number;
    644a:	b7 fa       	bst	r11, 7
    644c:	b0 94       	com	r11
    644e:	b7 f8       	bld	r11, 7
    6450:	b0 94       	com	r11
    6452:	02 c0       	rjmp	.+4      	; 0x6458 <_ZN5Print10printFloatEdh+0xe0>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    6454:	e1 2c       	mov	r14, r1
    6456:	f1 2c       	mov	r15, r1
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    6458:	77 20       	and	r7, r7
    645a:	09 f4       	brne	.+2      	; 0x645e <_ZN5Print10printFloatEdh+0xe6>
    645c:	5b c0       	rjmp	.+182    	; 0x6514 <_ZN5Print10printFloatEdh+0x19c>
    645e:	d1 2c       	mov	r13, r1
    6460:	60 e0       	ldi	r22, 0x00	; 0
    6462:	70 e0       	ldi	r23, 0x00	; 0
    6464:	80 e0       	ldi	r24, 0x00	; 0
    6466:	9f e3       	ldi	r25, 0x3F	; 63
    rounding /= 10.0;
    6468:	20 e0       	ldi	r18, 0x00	; 0
    646a:	30 e0       	ldi	r19, 0x00	; 0
    646c:	40 e2       	ldi	r20, 0x20	; 32
    646e:	51 e4       	ldi	r21, 0x41	; 65
    6470:	8e d6       	rcall	.+3356   	; 0x718e <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    6472:	d3 94       	inc	r13
    6474:	d7 10       	cpse	r13, r7
    6476:	f8 cf       	rjmp	.-16     	; 0x6468 <_ZN5Print10printFloatEdh+0xf0>
    6478:	26 c0       	rjmp	.+76     	; 0x64c6 <_ZN5Print10printFloatEdh+0x14e>
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    647a:	20 e0       	ldi	r18, 0x00	; 0
    647c:	30 e0       	ldi	r19, 0x00	; 0
    647e:	40 e2       	ldi	r20, 0x20	; 32
    6480:	51 e4       	ldi	r21, 0x41	; 65
    6482:	c5 01       	movw	r24, r10
    6484:	b4 01       	movw	r22, r8
    6486:	d2 d7       	rcall	.+4004   	; 0x742c <__mulsf3>
    6488:	4b 01       	movw	r8, r22
    648a:	5c 01       	movw	r10, r24
    int toPrint = int(remainder);
    648c:	e8 d6       	rcall	.+3536   	; 0x725e <__fixsfsi>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    648e:	6b 01       	movw	r12, r22
    6490:	77 0f       	add	r23, r23
    6492:	ee 08       	sbc	r14, r14
    6494:	ff 08       	sbc	r15, r15
    6496:	2a e0       	ldi	r18, 0x0A	; 10
    6498:	30 e0       	ldi	r19, 0x00	; 0
    649a:	b7 01       	movw	r22, r14
    649c:	a6 01       	movw	r20, r12
    649e:	c8 01       	movw	r24, r16
    64a0:	fc de       	rcall	.-520    	; 0x629a <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    64a2:	48 0e       	add	r4, r24
    64a4:	59 1e       	adc	r5, r25
    remainder -= toPrint; 
    64a6:	c7 01       	movw	r24, r14
    64a8:	b6 01       	movw	r22, r12
    64aa:	0c d7       	rcall	.+3608   	; 0x72c4 <__floatsisf>
    64ac:	9b 01       	movw	r18, r22
    64ae:	ac 01       	movw	r20, r24
    64b0:	c5 01       	movw	r24, r10
    64b2:	b4 01       	movw	r22, r8
    64b4:	03 d6       	rcall	.+3078   	; 0x70bc <__subsf3>
    64b6:	4b 01       	movw	r8, r22
    64b8:	5c 01       	movw	r10, r24
    64ba:	7a 94       	dec	r7
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    64bc:	71 10       	cpse	r7, r1
    64be:	dd cf       	rjmp	.-70     	; 0x647a <_ZN5Print10printFloatEdh+0x102>
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
    64c0:	84 2d       	mov	r24, r4
    64c2:	95 2d       	mov	r25, r5
    64c4:	39 c0       	rjmp	.+114    	; 0x6538 <_ZN5Print10printFloatEdh+0x1c0>
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
  
  number += rounding;
    64c6:	9b 01       	movw	r18, r22
    64c8:	ac 01       	movw	r20, r24
    64ca:	c5 01       	movw	r24, r10
    64cc:	b4 01       	movw	r22, r8
    64ce:	f7 d5       	rcall	.+3054   	; 0x70be <__addsf3>
    64d0:	4b 01       	movw	r8, r22
    64d2:	5c 01       	movw	r10, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    64d4:	c9 d6       	rcall	.+3474   	; 0x7268 <__fixunssfsi>
    64d6:	69 83       	std	Y+1, r22	; 0x01
    64d8:	7a 83       	std	Y+2, r23	; 0x02
    64da:	8b 83       	std	Y+3, r24	; 0x03
    64dc:	9c 83       	std	Y+4, r25	; 0x04
  double remainder = number - (double)int_part;
    64de:	f0 d6       	rcall	.+3552   	; 0x72c0 <__floatunsisf>
    64e0:	9b 01       	movw	r18, r22
    64e2:	ac 01       	movw	r20, r24
    64e4:	c5 01       	movw	r24, r10
    64e6:	b4 01       	movw	r22, r8
    64e8:	e9 d5       	rcall	.+3026   	; 0x70bc <__subsf3>
    64ea:	4b 01       	movw	r8, r22
    64ec:	5c 01       	movw	r10, r24
  n += print(int_part);
    64ee:	2a e0       	ldi	r18, 0x0A	; 10
    64f0:	30 e0       	ldi	r19, 0x00	; 0
    64f2:	49 81       	ldd	r20, Y+1	; 0x01
    64f4:	5a 81       	ldd	r21, Y+2	; 0x02
    64f6:	6b 81       	ldd	r22, Y+3	; 0x03
    64f8:	7c 81       	ldd	r23, Y+4	; 0x04
    64fa:	c8 01       	movw	r24, r16
    64fc:	22 df       	rcall	.-444    	; 0x6342 <_ZN5Print5printEmi>
    64fe:	6c 01       	movw	r12, r24

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    6500:	63 e0       	ldi	r22, 0x03	; 3
    6502:	75 e0       	ldi	r23, 0x05	; 5
    6504:	c8 01       	movw	r24, r16
    6506:	0c de       	rcall	.-1000   	; 0x6120 <_ZN5Print5printEPKc>
    6508:	8c 0d       	add	r24, r12
    650a:	9d 1d       	adc	r25, r13
    650c:	2c 01       	movw	r4, r24
    650e:	4e 0c       	add	r4, r14
    6510:	5f 1c       	adc	r5, r15
    6512:	b3 cf       	rjmp	.-154    	; 0x647a <_ZN5Print10printFloatEdh+0x102>
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
  
  number += rounding;
    6514:	20 e0       	ldi	r18, 0x00	; 0
    6516:	30 e0       	ldi	r19, 0x00	; 0
    6518:	40 e0       	ldi	r20, 0x00	; 0
    651a:	5f e3       	ldi	r21, 0x3F	; 63
    651c:	c5 01       	movw	r24, r10
    651e:	b4 01       	movw	r22, r8
    6520:	ce d5       	rcall	.+2972   	; 0x70be <__addsf3>

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    6522:	a2 d6       	rcall	.+3396   	; 0x7268 <__fixunssfsi>
    6524:	ab 01       	movw	r20, r22
    6526:	bc 01       	movw	r22, r24
  double remainder = number - (double)int_part;
  n += print(int_part);
    6528:	2a e0       	ldi	r18, 0x0A	; 10
    652a:	30 e0       	ldi	r19, 0x00	; 0
    652c:	c8 01       	movw	r24, r16
    652e:	09 df       	rcall	.-494    	; 0x6342 <_ZN5Print5printEmi>
    6530:	2c 01       	movw	r4, r24
    6532:	4e 0c       	add	r4, r14
    6534:	5f 1c       	adc	r5, r15
    6536:	c4 cf       	rjmp	.-120    	; 0x64c0 <_ZN5Print10printFloatEdh+0x148>
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    6538:	0f 90       	pop	r0
    653a:	0f 90       	pop	r0
    653c:	0f 90       	pop	r0
    653e:	0f 90       	pop	r0
    6540:	df 91       	pop	r29
    6542:	cf 91       	pop	r28
    6544:	1f 91       	pop	r17
    6546:	0f 91       	pop	r16
    6548:	ff 90       	pop	r15
    654a:	ef 90       	pop	r14
    654c:	df 90       	pop	r13
    654e:	cf 90       	pop	r12
    6550:	bf 90       	pop	r11
    6552:	af 90       	pop	r10
    6554:	9f 90       	pop	r9
    6556:	8f 90       	pop	r8
    6558:	7f 90       	pop	r7
    655a:	5f 90       	pop	r5
    655c:	4f 90       	pop	r4
    655e:	08 95       	ret

00006560 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    6560:	0b cf       	rjmp	.-490    	; 0x6378 <_ZN5Print10printFloatEdh>
}
    6562:	08 95       	ret

00006564 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    6564:	0f 93       	push	r16
    6566:	1f 93       	push	r17
    6568:	cf 93       	push	r28
    656a:	df 93       	push	r29
    656c:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    656e:	04 df       	rcall	.-504    	; 0x6378 <_ZN5Print10printFloatEdh>
    6570:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    6572:	ce 01       	movw	r24, r28
    6574:	f3 dd       	rcall	.-1050   	; 0x615c <_ZN5Print7printlnEv>
  return n;
}
    6576:	80 0f       	add	r24, r16
    6578:	91 1f       	adc	r25, r17
    657a:	df 91       	pop	r29
    657c:	cf 91       	pop	r28
    657e:	1f 91       	pop	r17
    6580:	0f 91       	pop	r16
    6582:	08 95       	ret

00006584 <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
    6584:	82 30       	cpi	r24, 0x02	; 2
    6586:	a9 f0       	breq	.+42     	; 0x65b2 <_Z12disableTimerh+0x2e>
    6588:	28 f4       	brcc	.+10     	; 0x6594 <_Z12disableTimerh+0x10>
    658a:	88 23       	and	r24, r24
    658c:	49 f0       	breq	.+18     	; 0x65a0 <_Z12disableTimerh+0x1c>
    658e:	81 30       	cpi	r24, 0x01	; 1
    6590:	51 f0       	breq	.+20     	; 0x65a6 <_Z12disableTimerh+0x22>
    6592:	08 95       	ret
    6594:	84 30       	cpi	r24, 0x04	; 4
    6596:	21 f1       	breq	.+72     	; 0x65e0 <_Z12disableTimerh+0x5c>
    6598:	e8 f0       	brcs	.+58     	; 0x65d4 <_Z12disableTimerh+0x50>
    659a:	85 30       	cpi	r24, 0x05	; 5
    659c:	39 f1       	breq	.+78     	; 0x65ec <_Z12disableTimerh+0x68>
    659e:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
    65a0:	10 92 6e 00 	sts	0x006E, r1
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
    65a4:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
    65a6:	ef e6       	ldi	r30, 0x6F	; 111
    65a8:	f0 e0       	ldi	r31, 0x00	; 0
    65aa:	80 81       	ld	r24, Z
    65ac:	8d 7f       	andi	r24, 0xFD	; 253
    65ae:	80 83       	st	Z, r24
      break;
    65b0:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
    65b2:	e0 e7       	ldi	r30, 0x70	; 112
    65b4:	f0 e0       	ldi	r31, 0x00	; 0
    65b6:	80 81       	ld	r24, Z
    65b8:	8d 7f       	andi	r24, 0xFD	; 253
    65ba:	80 83       	st	Z, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
    65bc:	81 e0       	ldi	r24, 0x01	; 1
    65be:	80 93 b0 00 	sts	0x00B0, r24
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
    65c2:	e1 eb       	ldi	r30, 0xB1	; 177
    65c4:	f0 e0       	ldi	r31, 0x00	; 0
    65c6:	80 81       	ld	r24, Z
    65c8:	88 7f       	andi	r24, 0xF8	; 248
    65ca:	84 60       	ori	r24, 0x04	; 4
    65cc:	80 83       	st	Z, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
    65ce:	10 92 b3 00 	sts	0x00B3, r1
      #endif
      break;
    65d2:	08 95       	ret

#if defined(TIMSK3) && defined(OCIE3A)
    case 3:
      bitWrite(TIMSK3, OCIE3A, 0);
    65d4:	e1 e7       	ldi	r30, 0x71	; 113
    65d6:	f0 e0       	ldi	r31, 0x00	; 0
    65d8:	80 81       	ld	r24, Z
    65da:	8d 7f       	andi	r24, 0xFD	; 253
    65dc:	80 83       	st	Z, r24
      break;
    65de:	08 95       	ret
#endif

#if defined(TIMSK4) && defined(OCIE4A)
    case 4:
      bitWrite(TIMSK4, OCIE4A, 0);
    65e0:	e2 e7       	ldi	r30, 0x72	; 114
    65e2:	f0 e0       	ldi	r31, 0x00	; 0
    65e4:	80 81       	ld	r24, Z
    65e6:	8d 7f       	andi	r24, 0xFD	; 253
    65e8:	80 83       	st	Z, r24
      break;
    65ea:	08 95       	ret
#endif

#if defined(TIMSK5) && defined(OCIE5A)
    case 5:
      bitWrite(TIMSK5, OCIE5A, 0);
    65ec:	e3 e7       	ldi	r30, 0x73	; 115
    65ee:	f0 e0       	ldi	r31, 0x00	; 0
    65f0:	80 81       	ld	r24, Z
    65f2:	8d 7f       	andi	r24, 0xFD	; 253
    65f4:	80 83       	st	Z, r24
    65f6:	08 95       	ret

000065f8 <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
    65f8:	cf 93       	push	r28
    65fa:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    65fc:	80 91 07 02 	lds	r24, 0x0207
    6600:	8c 13       	cpse	r24, r28
    6602:	08 c0       	rjmp	.+16     	; 0x6614 <_Z6noToneh+0x1c>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    6604:	e2 ed       	ldi	r30, 0xD2	; 210
    6606:	f2 e0       	ldi	r31, 0x02	; 2
    6608:	e4 91       	lpm	r30, Z
    660a:	8e 2f       	mov	r24, r30
      tone_pins[i] = 255;
    660c:	9f ef       	ldi	r25, 0xFF	; 255
    660e:	90 93 07 02 	sts	0x0207, r25
    6612:	01 c0       	rjmp	.+2      	; 0x6616 <_Z6noToneh+0x1e>
    6614:	8f ef       	ldi	r24, 0xFF	; 255
    }
  }
  
  disableTimer(_timer);
    6616:	b6 df       	rcall	.-148    	; 0x6584 <_Z12disableTimerh>

  digitalWrite(_pin, 0);
    6618:	60 e0       	ldi	r22, 0x00	; 0
    661a:	8c 2f       	mov	r24, r28
    661c:	c6 d3       	rcall	.+1932   	; 0x6daa <digitalWrite>
}
    661e:	cf 91       	pop	r28
    6620:	08 95       	ret

00006622 <__vector_13>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
    6622:	1f 92       	push	r1
    6624:	0f 92       	push	r0
    6626:	0f b6       	in	r0, 0x3f	; 63
    6628:	0f 92       	push	r0
    662a:	11 24       	eor	r1, r1
    662c:	0b b6       	in	r0, 0x3b	; 59
    662e:	0f 92       	push	r0
    6630:	2f 93       	push	r18
    6632:	3f 93       	push	r19
    6634:	4f 93       	push	r20
    6636:	5f 93       	push	r21
    6638:	6f 93       	push	r22
    663a:	7f 93       	push	r23
    663c:	8f 93       	push	r24
    663e:	9f 93       	push	r25
    6640:	af 93       	push	r26
    6642:	bf 93       	push	r27
    6644:	ef 93       	push	r30
    6646:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
    6648:	80 91 25 0d 	lds	r24, 0x0D25
    664c:	90 91 26 0d 	lds	r25, 0x0D26
    6650:	a0 91 27 0d 	lds	r26, 0x0D27
    6654:	b0 91 28 0d 	lds	r27, 0x0D28
    6658:	89 2b       	or	r24, r25
    665a:	8a 2b       	or	r24, r26
    665c:	8b 2b       	or	r24, r27
    665e:	51 f1       	breq	.+84     	; 0x66b4 <__vector_13+0x92>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
    6660:	80 91 22 0d 	lds	r24, 0x0D22
    6664:	e0 91 23 0d 	lds	r30, 0x0D23
    6668:	f0 91 24 0d 	lds	r31, 0x0D24
    666c:	90 81       	ld	r25, Z
    666e:	89 27       	eor	r24, r25
    6670:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
    6672:	80 91 25 0d 	lds	r24, 0x0D25
    6676:	90 91 26 0d 	lds	r25, 0x0D26
    667a:	a0 91 27 0d 	lds	r26, 0x0D27
    667e:	b0 91 28 0d 	lds	r27, 0x0D28
    6682:	18 16       	cp	r1, r24
    6684:	19 06       	cpc	r1, r25
    6686:	1a 06       	cpc	r1, r26
    6688:	1b 06       	cpc	r1, r27
    668a:	bc f4       	brge	.+46     	; 0x66ba <__vector_13+0x98>
      timer2_toggle_count--;
    668c:	80 91 25 0d 	lds	r24, 0x0D25
    6690:	90 91 26 0d 	lds	r25, 0x0D26
    6694:	a0 91 27 0d 	lds	r26, 0x0D27
    6698:	b0 91 28 0d 	lds	r27, 0x0D28
    669c:	01 97       	sbiw	r24, 0x01	; 1
    669e:	a1 09       	sbc	r26, r1
    66a0:	b1 09       	sbc	r27, r1
    66a2:	80 93 25 0d 	sts	0x0D25, r24
    66a6:	90 93 26 0d 	sts	0x0D26, r25
    66aa:	a0 93 27 0d 	sts	0x0D27, r26
    66ae:	b0 93 28 0d 	sts	0x0D28, r27
    66b2:	03 c0       	rjmp	.+6      	; 0x66ba <__vector_13+0x98>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
    66b4:	80 91 07 02 	lds	r24, 0x0207
    66b8:	9f df       	rcall	.-194    	; 0x65f8 <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    66ba:	ff 91       	pop	r31
    66bc:	ef 91       	pop	r30
    66be:	bf 91       	pop	r27
    66c0:	af 91       	pop	r26
    66c2:	9f 91       	pop	r25
    66c4:	8f 91       	pop	r24
    66c6:	7f 91       	pop	r23
    66c8:	6f 91       	pop	r22
    66ca:	5f 91       	pop	r21
    66cc:	4f 91       	pop	r20
    66ce:	3f 91       	pop	r19
    66d0:	2f 91       	pop	r18
    66d2:	0f 90       	pop	r0
    66d4:	0b be       	out	0x3b, r0	; 59
    66d6:	0f 90       	pop	r0
    66d8:	0f be       	out	0x3f, r0	; 63
    66da:	0f 90       	pop	r0
    66dc:	1f 90       	pop	r1
    66de:	18 95       	reti

000066e0 <__vector_1>:
		intFunc[EXTERNAL_INT_4]();
}

#elif defined(EICRA) && defined(EICRB)

ISR(INT0_vect) {
    66e0:	1f 92       	push	r1
    66e2:	0f 92       	push	r0
    66e4:	0f b6       	in	r0, 0x3f	; 63
    66e6:	0f 92       	push	r0
    66e8:	11 24       	eor	r1, r1
    66ea:	0b b6       	in	r0, 0x3b	; 59
    66ec:	0f 92       	push	r0
    66ee:	2f 93       	push	r18
    66f0:	3f 93       	push	r19
    66f2:	4f 93       	push	r20
    66f4:	5f 93       	push	r21
    66f6:	6f 93       	push	r22
    66f8:	7f 93       	push	r23
    66fa:	8f 93       	push	r24
    66fc:	9f 93       	push	r25
    66fe:	af 93       	push	r26
    6700:	bf 93       	push	r27
    6702:	ef 93       	push	r30
    6704:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_2])
    6706:	80 91 2d 0d 	lds	r24, 0x0D2D
    670a:	90 91 2e 0d 	lds	r25, 0x0D2E
    670e:	89 2b       	or	r24, r25
    6710:	29 f0       	breq	.+10     	; 0x671c <__vector_1+0x3c>
    intFunc[EXTERNAL_INT_2]();
    6712:	e0 91 2d 0d 	lds	r30, 0x0D2D
    6716:	f0 91 2e 0d 	lds	r31, 0x0D2E
    671a:	19 95       	eicall
}
    671c:	ff 91       	pop	r31
    671e:	ef 91       	pop	r30
    6720:	bf 91       	pop	r27
    6722:	af 91       	pop	r26
    6724:	9f 91       	pop	r25
    6726:	8f 91       	pop	r24
    6728:	7f 91       	pop	r23
    672a:	6f 91       	pop	r22
    672c:	5f 91       	pop	r21
    672e:	4f 91       	pop	r20
    6730:	3f 91       	pop	r19
    6732:	2f 91       	pop	r18
    6734:	0f 90       	pop	r0
    6736:	0b be       	out	0x3b, r0	; 59
    6738:	0f 90       	pop	r0
    673a:	0f be       	out	0x3f, r0	; 63
    673c:	0f 90       	pop	r0
    673e:	1f 90       	pop	r1
    6740:	18 95       	reti

00006742 <__vector_2>:

ISR(INT1_vect) {
    6742:	1f 92       	push	r1
    6744:	0f 92       	push	r0
    6746:	0f b6       	in	r0, 0x3f	; 63
    6748:	0f 92       	push	r0
    674a:	11 24       	eor	r1, r1
    674c:	0b b6       	in	r0, 0x3b	; 59
    674e:	0f 92       	push	r0
    6750:	2f 93       	push	r18
    6752:	3f 93       	push	r19
    6754:	4f 93       	push	r20
    6756:	5f 93       	push	r21
    6758:	6f 93       	push	r22
    675a:	7f 93       	push	r23
    675c:	8f 93       	push	r24
    675e:	9f 93       	push	r25
    6760:	af 93       	push	r26
    6762:	bf 93       	push	r27
    6764:	ef 93       	push	r30
    6766:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_3])
    6768:	80 91 2f 0d 	lds	r24, 0x0D2F
    676c:	90 91 30 0d 	lds	r25, 0x0D30
    6770:	89 2b       	or	r24, r25
    6772:	29 f0       	breq	.+10     	; 0x677e <__vector_2+0x3c>
    intFunc[EXTERNAL_INT_3]();
    6774:	e0 91 2f 0d 	lds	r30, 0x0D2F
    6778:	f0 91 30 0d 	lds	r31, 0x0D30
    677c:	19 95       	eicall
}
    677e:	ff 91       	pop	r31
    6780:	ef 91       	pop	r30
    6782:	bf 91       	pop	r27
    6784:	af 91       	pop	r26
    6786:	9f 91       	pop	r25
    6788:	8f 91       	pop	r24
    678a:	7f 91       	pop	r23
    678c:	6f 91       	pop	r22
    678e:	5f 91       	pop	r21
    6790:	4f 91       	pop	r20
    6792:	3f 91       	pop	r19
    6794:	2f 91       	pop	r18
    6796:	0f 90       	pop	r0
    6798:	0b be       	out	0x3b, r0	; 59
    679a:	0f 90       	pop	r0
    679c:	0f be       	out	0x3f, r0	; 63
    679e:	0f 90       	pop	r0
    67a0:	1f 90       	pop	r1
    67a2:	18 95       	reti

000067a4 <__vector_3>:

ISR(INT2_vect) {
    67a4:	1f 92       	push	r1
    67a6:	0f 92       	push	r0
    67a8:	0f b6       	in	r0, 0x3f	; 63
    67aa:	0f 92       	push	r0
    67ac:	11 24       	eor	r1, r1
    67ae:	0b b6       	in	r0, 0x3b	; 59
    67b0:	0f 92       	push	r0
    67b2:	2f 93       	push	r18
    67b4:	3f 93       	push	r19
    67b6:	4f 93       	push	r20
    67b8:	5f 93       	push	r21
    67ba:	6f 93       	push	r22
    67bc:	7f 93       	push	r23
    67be:	8f 93       	push	r24
    67c0:	9f 93       	push	r25
    67c2:	af 93       	push	r26
    67c4:	bf 93       	push	r27
    67c6:	ef 93       	push	r30
    67c8:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_4])
    67ca:	80 91 31 0d 	lds	r24, 0x0D31
    67ce:	90 91 32 0d 	lds	r25, 0x0D32
    67d2:	89 2b       	or	r24, r25
    67d4:	29 f0       	breq	.+10     	; 0x67e0 <__vector_3+0x3c>
    intFunc[EXTERNAL_INT_4]();
    67d6:	e0 91 31 0d 	lds	r30, 0x0D31
    67da:	f0 91 32 0d 	lds	r31, 0x0D32
    67de:	19 95       	eicall
}
    67e0:	ff 91       	pop	r31
    67e2:	ef 91       	pop	r30
    67e4:	bf 91       	pop	r27
    67e6:	af 91       	pop	r26
    67e8:	9f 91       	pop	r25
    67ea:	8f 91       	pop	r24
    67ec:	7f 91       	pop	r23
    67ee:	6f 91       	pop	r22
    67f0:	5f 91       	pop	r21
    67f2:	4f 91       	pop	r20
    67f4:	3f 91       	pop	r19
    67f6:	2f 91       	pop	r18
    67f8:	0f 90       	pop	r0
    67fa:	0b be       	out	0x3b, r0	; 59
    67fc:	0f 90       	pop	r0
    67fe:	0f be       	out	0x3f, r0	; 63
    6800:	0f 90       	pop	r0
    6802:	1f 90       	pop	r1
    6804:	18 95       	reti

00006806 <__vector_4>:

ISR(INT3_vect) {
    6806:	1f 92       	push	r1
    6808:	0f 92       	push	r0
    680a:	0f b6       	in	r0, 0x3f	; 63
    680c:	0f 92       	push	r0
    680e:	11 24       	eor	r1, r1
    6810:	0b b6       	in	r0, 0x3b	; 59
    6812:	0f 92       	push	r0
    6814:	2f 93       	push	r18
    6816:	3f 93       	push	r19
    6818:	4f 93       	push	r20
    681a:	5f 93       	push	r21
    681c:	6f 93       	push	r22
    681e:	7f 93       	push	r23
    6820:	8f 93       	push	r24
    6822:	9f 93       	push	r25
    6824:	af 93       	push	r26
    6826:	bf 93       	push	r27
    6828:	ef 93       	push	r30
    682a:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_5])
    682c:	80 91 33 0d 	lds	r24, 0x0D33
    6830:	90 91 34 0d 	lds	r25, 0x0D34
    6834:	89 2b       	or	r24, r25
    6836:	29 f0       	breq	.+10     	; 0x6842 <__vector_4+0x3c>
    intFunc[EXTERNAL_INT_5]();
    6838:	e0 91 33 0d 	lds	r30, 0x0D33
    683c:	f0 91 34 0d 	lds	r31, 0x0D34
    6840:	19 95       	eicall
}
    6842:	ff 91       	pop	r31
    6844:	ef 91       	pop	r30
    6846:	bf 91       	pop	r27
    6848:	af 91       	pop	r26
    684a:	9f 91       	pop	r25
    684c:	8f 91       	pop	r24
    684e:	7f 91       	pop	r23
    6850:	6f 91       	pop	r22
    6852:	5f 91       	pop	r21
    6854:	4f 91       	pop	r20
    6856:	3f 91       	pop	r19
    6858:	2f 91       	pop	r18
    685a:	0f 90       	pop	r0
    685c:	0b be       	out	0x3b, r0	; 59
    685e:	0f 90       	pop	r0
    6860:	0f be       	out	0x3f, r0	; 63
    6862:	0f 90       	pop	r0
    6864:	1f 90       	pop	r1
    6866:	18 95       	reti

00006868 <__vector_5>:

ISR(INT4_vect) {
    6868:	1f 92       	push	r1
    686a:	0f 92       	push	r0
    686c:	0f b6       	in	r0, 0x3f	; 63
    686e:	0f 92       	push	r0
    6870:	11 24       	eor	r1, r1
    6872:	0b b6       	in	r0, 0x3b	; 59
    6874:	0f 92       	push	r0
    6876:	2f 93       	push	r18
    6878:	3f 93       	push	r19
    687a:	4f 93       	push	r20
    687c:	5f 93       	push	r21
    687e:	6f 93       	push	r22
    6880:	7f 93       	push	r23
    6882:	8f 93       	push	r24
    6884:	9f 93       	push	r25
    6886:	af 93       	push	r26
    6888:	bf 93       	push	r27
    688a:	ef 93       	push	r30
    688c:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
    688e:	80 91 29 0d 	lds	r24, 0x0D29
    6892:	90 91 2a 0d 	lds	r25, 0x0D2A
    6896:	89 2b       	or	r24, r25
    6898:	29 f0       	breq	.+10     	; 0x68a4 <__vector_5+0x3c>
    intFunc[EXTERNAL_INT_0]();
    689a:	e0 91 29 0d 	lds	r30, 0x0D29
    689e:	f0 91 2a 0d 	lds	r31, 0x0D2A
    68a2:	19 95       	eicall
}
    68a4:	ff 91       	pop	r31
    68a6:	ef 91       	pop	r30
    68a8:	bf 91       	pop	r27
    68aa:	af 91       	pop	r26
    68ac:	9f 91       	pop	r25
    68ae:	8f 91       	pop	r24
    68b0:	7f 91       	pop	r23
    68b2:	6f 91       	pop	r22
    68b4:	5f 91       	pop	r21
    68b6:	4f 91       	pop	r20
    68b8:	3f 91       	pop	r19
    68ba:	2f 91       	pop	r18
    68bc:	0f 90       	pop	r0
    68be:	0b be       	out	0x3b, r0	; 59
    68c0:	0f 90       	pop	r0
    68c2:	0f be       	out	0x3f, r0	; 63
    68c4:	0f 90       	pop	r0
    68c6:	1f 90       	pop	r1
    68c8:	18 95       	reti

000068ca <__vector_6>:

ISR(INT5_vect) {
    68ca:	1f 92       	push	r1
    68cc:	0f 92       	push	r0
    68ce:	0f b6       	in	r0, 0x3f	; 63
    68d0:	0f 92       	push	r0
    68d2:	11 24       	eor	r1, r1
    68d4:	0b b6       	in	r0, 0x3b	; 59
    68d6:	0f 92       	push	r0
    68d8:	2f 93       	push	r18
    68da:	3f 93       	push	r19
    68dc:	4f 93       	push	r20
    68de:	5f 93       	push	r21
    68e0:	6f 93       	push	r22
    68e2:	7f 93       	push	r23
    68e4:	8f 93       	push	r24
    68e6:	9f 93       	push	r25
    68e8:	af 93       	push	r26
    68ea:	bf 93       	push	r27
    68ec:	ef 93       	push	r30
    68ee:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
    68f0:	80 91 2b 0d 	lds	r24, 0x0D2B
    68f4:	90 91 2c 0d 	lds	r25, 0x0D2C
    68f8:	89 2b       	or	r24, r25
    68fa:	29 f0       	breq	.+10     	; 0x6906 <__vector_6+0x3c>
    intFunc[EXTERNAL_INT_1]();
    68fc:	e0 91 2b 0d 	lds	r30, 0x0D2B
    6900:	f0 91 2c 0d 	lds	r31, 0x0D2C
    6904:	19 95       	eicall
}
    6906:	ff 91       	pop	r31
    6908:	ef 91       	pop	r30
    690a:	bf 91       	pop	r27
    690c:	af 91       	pop	r26
    690e:	9f 91       	pop	r25
    6910:	8f 91       	pop	r24
    6912:	7f 91       	pop	r23
    6914:	6f 91       	pop	r22
    6916:	5f 91       	pop	r21
    6918:	4f 91       	pop	r20
    691a:	3f 91       	pop	r19
    691c:	2f 91       	pop	r18
    691e:	0f 90       	pop	r0
    6920:	0b be       	out	0x3b, r0	; 59
    6922:	0f 90       	pop	r0
    6924:	0f be       	out	0x3f, r0	; 63
    6926:	0f 90       	pop	r0
    6928:	1f 90       	pop	r1
    692a:	18 95       	reti

0000692c <__vector_7>:

ISR(INT6_vect) {
    692c:	1f 92       	push	r1
    692e:	0f 92       	push	r0
    6930:	0f b6       	in	r0, 0x3f	; 63
    6932:	0f 92       	push	r0
    6934:	11 24       	eor	r1, r1
    6936:	0b b6       	in	r0, 0x3b	; 59
    6938:	0f 92       	push	r0
    693a:	2f 93       	push	r18
    693c:	3f 93       	push	r19
    693e:	4f 93       	push	r20
    6940:	5f 93       	push	r21
    6942:	6f 93       	push	r22
    6944:	7f 93       	push	r23
    6946:	8f 93       	push	r24
    6948:	9f 93       	push	r25
    694a:	af 93       	push	r26
    694c:	bf 93       	push	r27
    694e:	ef 93       	push	r30
    6950:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_6])
    6952:	80 91 35 0d 	lds	r24, 0x0D35
    6956:	90 91 36 0d 	lds	r25, 0x0D36
    695a:	89 2b       	or	r24, r25
    695c:	29 f0       	breq	.+10     	; 0x6968 <__vector_7+0x3c>
    intFunc[EXTERNAL_INT_6]();
    695e:	e0 91 35 0d 	lds	r30, 0x0D35
    6962:	f0 91 36 0d 	lds	r31, 0x0D36
    6966:	19 95       	eicall
}
    6968:	ff 91       	pop	r31
    696a:	ef 91       	pop	r30
    696c:	bf 91       	pop	r27
    696e:	af 91       	pop	r26
    6970:	9f 91       	pop	r25
    6972:	8f 91       	pop	r24
    6974:	7f 91       	pop	r23
    6976:	6f 91       	pop	r22
    6978:	5f 91       	pop	r21
    697a:	4f 91       	pop	r20
    697c:	3f 91       	pop	r19
    697e:	2f 91       	pop	r18
    6980:	0f 90       	pop	r0
    6982:	0b be       	out	0x3b, r0	; 59
    6984:	0f 90       	pop	r0
    6986:	0f be       	out	0x3f, r0	; 63
    6988:	0f 90       	pop	r0
    698a:	1f 90       	pop	r1
    698c:	18 95       	reti

0000698e <__vector_8>:

ISR(INT7_vect) {
    698e:	1f 92       	push	r1
    6990:	0f 92       	push	r0
    6992:	0f b6       	in	r0, 0x3f	; 63
    6994:	0f 92       	push	r0
    6996:	11 24       	eor	r1, r1
    6998:	0b b6       	in	r0, 0x3b	; 59
    699a:	0f 92       	push	r0
    699c:	2f 93       	push	r18
    699e:	3f 93       	push	r19
    69a0:	4f 93       	push	r20
    69a2:	5f 93       	push	r21
    69a4:	6f 93       	push	r22
    69a6:	7f 93       	push	r23
    69a8:	8f 93       	push	r24
    69aa:	9f 93       	push	r25
    69ac:	af 93       	push	r26
    69ae:	bf 93       	push	r27
    69b0:	ef 93       	push	r30
    69b2:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_7])
    69b4:	80 91 37 0d 	lds	r24, 0x0D37
    69b8:	90 91 38 0d 	lds	r25, 0x0D38
    69bc:	89 2b       	or	r24, r25
    69be:	29 f0       	breq	.+10     	; 0x69ca <__vector_8+0x3c>
    intFunc[EXTERNAL_INT_7]();
    69c0:	e0 91 37 0d 	lds	r30, 0x0D37
    69c4:	f0 91 38 0d 	lds	r31, 0x0D38
    69c8:	19 95       	eicall
}
    69ca:	ff 91       	pop	r31
    69cc:	ef 91       	pop	r30
    69ce:	bf 91       	pop	r27
    69d0:	af 91       	pop	r26
    69d2:	9f 91       	pop	r25
    69d4:	8f 91       	pop	r24
    69d6:	7f 91       	pop	r23
    69d8:	6f 91       	pop	r22
    69da:	5f 91       	pop	r21
    69dc:	4f 91       	pop	r20
    69de:	3f 91       	pop	r19
    69e0:	2f 91       	pop	r18
    69e2:	0f 90       	pop	r0
    69e4:	0b be       	out	0x3b, r0	; 59
    69e6:	0f 90       	pop	r0
    69e8:	0f be       	out	0x3f, r0	; 63
    69ea:	0f 90       	pop	r0
    69ec:	1f 90       	pop	r1
    69ee:	18 95       	reti

000069f0 <__vector_23>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    69f0:	1f 92       	push	r1
    69f2:	0f 92       	push	r0
    69f4:	0f b6       	in	r0, 0x3f	; 63
    69f6:	0f 92       	push	r0
    69f8:	11 24       	eor	r1, r1
    69fa:	2f 93       	push	r18
    69fc:	3f 93       	push	r19
    69fe:	8f 93       	push	r24
    6a00:	9f 93       	push	r25
    6a02:	af 93       	push	r26
    6a04:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    6a06:	80 91 3a 0d 	lds	r24, 0x0D3A
    6a0a:	90 91 3b 0d 	lds	r25, 0x0D3B
    6a0e:	a0 91 3c 0d 	lds	r26, 0x0D3C
    6a12:	b0 91 3d 0d 	lds	r27, 0x0D3D
	unsigned char f = timer0_fract;
    6a16:	30 91 39 0d 	lds	r19, 0x0D39

	m += MILLIS_INC;
	f += FRACT_INC;
    6a1a:	23 e0       	ldi	r18, 0x03	; 3
    6a1c:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    6a1e:	2d 37       	cpi	r18, 0x7D	; 125
    6a20:	20 f4       	brcc	.+8      	; 0x6a2a <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    6a22:	01 96       	adiw	r24, 0x01	; 1
    6a24:	a1 1d       	adc	r26, r1
    6a26:	b1 1d       	adc	r27, r1
    6a28:	05 c0       	rjmp	.+10     	; 0x6a34 <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    6a2a:	26 e8       	ldi	r18, 0x86	; 134
    6a2c:	23 0f       	add	r18, r19
		m += 1;
    6a2e:	02 96       	adiw	r24, 0x02	; 2
    6a30:	a1 1d       	adc	r26, r1
    6a32:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    6a34:	20 93 39 0d 	sts	0x0D39, r18
	timer0_millis = m;
    6a38:	80 93 3a 0d 	sts	0x0D3A, r24
    6a3c:	90 93 3b 0d 	sts	0x0D3B, r25
    6a40:	a0 93 3c 0d 	sts	0x0D3C, r26
    6a44:	b0 93 3d 0d 	sts	0x0D3D, r27
	timer0_overflow_count++;
    6a48:	80 91 3e 0d 	lds	r24, 0x0D3E
    6a4c:	90 91 3f 0d 	lds	r25, 0x0D3F
    6a50:	a0 91 40 0d 	lds	r26, 0x0D40
    6a54:	b0 91 41 0d 	lds	r27, 0x0D41
    6a58:	01 96       	adiw	r24, 0x01	; 1
    6a5a:	a1 1d       	adc	r26, r1
    6a5c:	b1 1d       	adc	r27, r1
    6a5e:	80 93 3e 0d 	sts	0x0D3E, r24
    6a62:	90 93 3f 0d 	sts	0x0D3F, r25
    6a66:	a0 93 40 0d 	sts	0x0D40, r26
    6a6a:	b0 93 41 0d 	sts	0x0D41, r27
}
    6a6e:	bf 91       	pop	r27
    6a70:	af 91       	pop	r26
    6a72:	9f 91       	pop	r25
    6a74:	8f 91       	pop	r24
    6a76:	3f 91       	pop	r19
    6a78:	2f 91       	pop	r18
    6a7a:	0f 90       	pop	r0
    6a7c:	0f be       	out	0x3f, r0	; 63
    6a7e:	0f 90       	pop	r0
    6a80:	1f 90       	pop	r1
    6a82:	18 95       	reti

00006a84 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    6a84:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    6a86:	f8 94       	cli
	m = timer0_millis;
    6a88:	60 91 3a 0d 	lds	r22, 0x0D3A
    6a8c:	70 91 3b 0d 	lds	r23, 0x0D3B
    6a90:	80 91 3c 0d 	lds	r24, 0x0D3C
    6a94:	90 91 3d 0d 	lds	r25, 0x0D3D
	SREG = oldSREG;
    6a98:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    6a9a:	08 95       	ret

00006a9c <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    6a9c:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    6a9e:	f8 94       	cli
	m = timer0_overflow_count;
    6aa0:	80 91 3e 0d 	lds	r24, 0x0D3E
    6aa4:	90 91 3f 0d 	lds	r25, 0x0D3F
    6aa8:	a0 91 40 0d 	lds	r26, 0x0D40
    6aac:	b0 91 41 0d 	lds	r27, 0x0D41
#if defined(TCNT0)
	t = TCNT0;
    6ab0:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    6ab2:	a8 9b       	sbis	0x15, 0	; 21
    6ab4:	05 c0       	rjmp	.+10     	; 0x6ac0 <micros+0x24>
    6ab6:	2f 3f       	cpi	r18, 0xFF	; 255
    6ab8:	19 f0       	breq	.+6      	; 0x6ac0 <micros+0x24>
		m++;
    6aba:	01 96       	adiw	r24, 0x01	; 1
    6abc:	a1 1d       	adc	r26, r1
    6abe:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    6ac0:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    6ac2:	ba 2f       	mov	r27, r26
    6ac4:	a9 2f       	mov	r26, r25
    6ac6:	98 2f       	mov	r25, r24
    6ac8:	88 27       	eor	r24, r24
    6aca:	82 0f       	add	r24, r18
    6acc:	91 1d       	adc	r25, r1
    6ace:	a1 1d       	adc	r26, r1
    6ad0:	b1 1d       	adc	r27, r1
    6ad2:	bc 01       	movw	r22, r24
    6ad4:	cd 01       	movw	r24, r26
    6ad6:	66 0f       	add	r22, r22
    6ad8:	77 1f       	adc	r23, r23
    6ada:	88 1f       	adc	r24, r24
    6adc:	99 1f       	adc	r25, r25
    6ade:	66 0f       	add	r22, r22
    6ae0:	77 1f       	adc	r23, r23
    6ae2:	88 1f       	adc	r24, r24
    6ae4:	99 1f       	adc	r25, r25
}
    6ae6:	08 95       	ret

00006ae8 <delay>:

void delay(unsigned long ms)
{
    6ae8:	cf 92       	push	r12
    6aea:	df 92       	push	r13
    6aec:	ef 92       	push	r14
    6aee:	ff 92       	push	r15
    6af0:	cf 93       	push	r28
    6af2:	df 93       	push	r29
    6af4:	6b 01       	movw	r12, r22
    6af6:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
    6af8:	d1 df       	rcall	.-94     	; 0x6a9c <micros>
    6afa:	eb 01       	movw	r28, r22

	while (ms > 0) {
    6afc:	c1 14       	cp	r12, r1
    6afe:	d1 04       	cpc	r13, r1
    6b00:	e1 04       	cpc	r14, r1
    6b02:	f1 04       	cpc	r15, r1
    6b04:	99 f0       	breq	.+38     	; 0x6b2c <delay+0x44>
		yield();
    6b06:	74 da       	rcall	.-2840   	; 0x5ff0 <yield>
		if (((uint16_t)micros() - start) >= 1000) {
    6b08:	c9 df       	rcall	.-110    	; 0x6a9c <micros>
    6b0a:	6c 1b       	sub	r22, r28
    6b0c:	7d 0b       	sbc	r23, r29
    6b0e:	68 3e       	cpi	r22, 0xE8	; 232
    6b10:	73 40       	sbci	r23, 0x03	; 3
    6b12:	38 f0       	brcs	.+14     	; 0x6b22 <delay+0x3a>
			ms--;
    6b14:	81 e0       	ldi	r24, 0x01	; 1
    6b16:	c8 1a       	sub	r12, r24
    6b18:	d1 08       	sbc	r13, r1
    6b1a:	e1 08       	sbc	r14, r1
    6b1c:	f1 08       	sbc	r15, r1
			start += 1000;
    6b1e:	c8 51       	subi	r28, 0x18	; 24
    6b20:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    6b22:	c1 14       	cp	r12, r1
    6b24:	d1 04       	cpc	r13, r1
    6b26:	e1 04       	cpc	r14, r1
    6b28:	f1 04       	cpc	r15, r1
    6b2a:	69 f7       	brne	.-38     	; 0x6b06 <delay+0x1e>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    6b2c:	df 91       	pop	r29
    6b2e:	cf 91       	pop	r28
    6b30:	ff 90       	pop	r15
    6b32:	ef 90       	pop	r14
    6b34:	df 90       	pop	r13
    6b36:	cf 90       	pop	r12
    6b38:	08 95       	ret

00006b3a <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    6b3a:	82 30       	cpi	r24, 0x02	; 2
    6b3c:	91 05       	cpc	r25, r1
    6b3e:	38 f0       	brcs	.+14     	; 0x6b4e <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    6b40:	88 0f       	add	r24, r24
    6b42:	99 1f       	adc	r25, r25
    6b44:	88 0f       	add	r24, r24
    6b46:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    6b48:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    6b4a:	01 97       	sbiw	r24, 0x01	; 1
    6b4c:	f1 f7       	brne	.-4      	; 0x6b4a <delayMicroseconds+0x10>
    6b4e:	08 95       	ret

00006b50 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    6b50:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    6b52:	84 b5       	in	r24, 0x24	; 36
    6b54:	82 60       	ori	r24, 0x02	; 2
    6b56:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    6b58:	84 b5       	in	r24, 0x24	; 36
    6b5a:	81 60       	ori	r24, 0x01	; 1
    6b5c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    6b5e:	85 b5       	in	r24, 0x25	; 37
    6b60:	82 60       	ori	r24, 0x02	; 2
    6b62:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    6b64:	85 b5       	in	r24, 0x25	; 37
    6b66:	81 60       	ori	r24, 0x01	; 1
    6b68:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    6b6a:	ee e6       	ldi	r30, 0x6E	; 110
    6b6c:	f0 e0       	ldi	r31, 0x00	; 0
    6b6e:	80 81       	ld	r24, Z
    6b70:	81 60       	ori	r24, 0x01	; 1
    6b72:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    6b74:	e1 e8       	ldi	r30, 0x81	; 129
    6b76:	f0 e0       	ldi	r31, 0x00	; 0
    6b78:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    6b7a:	80 81       	ld	r24, Z
    6b7c:	82 60       	ori	r24, 0x02	; 2
    6b7e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    6b80:	80 81       	ld	r24, Z
    6b82:	81 60       	ori	r24, 0x01	; 1
    6b84:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    6b86:	e0 e8       	ldi	r30, 0x80	; 128
    6b88:	f0 e0       	ldi	r31, 0x00	; 0
    6b8a:	80 81       	ld	r24, Z
    6b8c:	81 60       	ori	r24, 0x01	; 1
    6b8e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    6b90:	e1 eb       	ldi	r30, 0xB1	; 177
    6b92:	f0 e0       	ldi	r31, 0x00	; 0
    6b94:	80 81       	ld	r24, Z
    6b96:	84 60       	ori	r24, 0x04	; 4
    6b98:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    6b9a:	e0 eb       	ldi	r30, 0xB0	; 176
    6b9c:	f0 e0       	ldi	r31, 0x00	; 0
    6b9e:	80 81       	ld	r24, Z
    6ba0:	81 60       	ori	r24, 0x01	; 1
    6ba2:	80 83       	st	Z, r24
#else
	#warning Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    6ba4:	e1 e9       	ldi	r30, 0x91	; 145
    6ba6:	f0 e0       	ldi	r31, 0x00	; 0
    6ba8:	80 81       	ld	r24, Z
    6baa:	82 60       	ori	r24, 0x02	; 2
    6bac:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    6bae:	80 81       	ld	r24, Z
    6bb0:	81 60       	ori	r24, 0x01	; 1
    6bb2:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    6bb4:	e0 e9       	ldi	r30, 0x90	; 144
    6bb6:	f0 e0       	ldi	r31, 0x00	; 0
    6bb8:	80 81       	ld	r24, Z
    6bba:	81 60       	ori	r24, 0x01	; 1
    6bbc:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    6bbe:	e1 ea       	ldi	r30, 0xA1	; 161
    6bc0:	f0 e0       	ldi	r31, 0x00	; 0
    6bc2:	80 81       	ld	r24, Z
    6bc4:	82 60       	ori	r24, 0x02	; 2
    6bc6:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    6bc8:	80 81       	ld	r24, Z
    6bca:	81 60       	ori	r24, 0x01	; 1
    6bcc:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    6bce:	e0 ea       	ldi	r30, 0xA0	; 160
    6bd0:	f0 e0       	ldi	r31, 0x00	; 0
    6bd2:	80 81       	ld	r24, Z
    6bd4:	81 60       	ori	r24, 0x01	; 1
    6bd6:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    6bd8:	e1 e2       	ldi	r30, 0x21	; 33
    6bda:	f1 e0       	ldi	r31, 0x01	; 1
    6bdc:	80 81       	ld	r24, Z
    6bde:	82 60       	ori	r24, 0x02	; 2
    6be0:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    6be2:	80 81       	ld	r24, Z
    6be4:	81 60       	ori	r24, 0x01	; 1
    6be6:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    6be8:	e0 e2       	ldi	r30, 0x20	; 32
    6bea:	f1 e0       	ldi	r31, 0x01	; 1
    6bec:	80 81       	ld	r24, Z
    6bee:	81 60       	ori	r24, 0x01	; 1
    6bf0:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    6bf2:	ea e7       	ldi	r30, 0x7A	; 122
    6bf4:	f0 e0       	ldi	r31, 0x00	; 0
    6bf6:	80 81       	ld	r24, Z
    6bf8:	84 60       	ori	r24, 0x04	; 4
    6bfa:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    6bfc:	80 81       	ld	r24, Z
    6bfe:	82 60       	ori	r24, 0x02	; 2
    6c00:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    6c02:	80 81       	ld	r24, Z
    6c04:	81 60       	ori	r24, 0x01	; 1
    6c06:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    6c08:	80 81       	ld	r24, Z
    6c0a:	80 68       	ori	r24, 0x80	; 128
    6c0c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    6c0e:	10 92 c1 00 	sts	0x00C1, r1
    6c12:	08 95       	ret

00006c14 <analogRead>:
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#endif
	pin = analogPinToChannel(pin);
#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
    6c14:	86 33       	cpi	r24, 0x36	; 54
    6c16:	08 f0       	brcs	.+2      	; 0x6c1a <analogRead+0x6>
    6c18:	86 53       	subi	r24, 0x36	; 54
#endif

#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    6c1a:	eb e7       	ldi	r30, 0x7B	; 123
    6c1c:	f0 e0       	ldi	r31, 0x00	; 0
    6c1e:	90 81       	ld	r25, Z
    6c20:	28 2f       	mov	r18, r24
    6c22:	28 70       	andi	r18, 0x08	; 8
    6c24:	97 7f       	andi	r25, 0xF7	; 247
    6c26:	92 2b       	or	r25, r18
    6c28:	90 83       	st	Z, r25
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    6c2a:	87 70       	andi	r24, 0x07	; 7
    6c2c:	20 91 08 02 	lds	r18, 0x0208
    6c30:	90 e4       	ldi	r25, 0x40	; 64
    6c32:	29 9f       	mul	r18, r25
    6c34:	90 01       	movw	r18, r0
    6c36:	11 24       	eor	r1, r1
    6c38:	82 2b       	or	r24, r18
    6c3a:	80 93 7c 00 	sts	0x007C, r24
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    6c3e:	ea e7       	ldi	r30, 0x7A	; 122
    6c40:	f0 e0       	ldi	r31, 0x00	; 0
    6c42:	80 81       	ld	r24, Z
    6c44:	80 64       	ori	r24, 0x40	; 64
    6c46:	80 83       	st	Z, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    6c48:	80 81       	ld	r24, Z
    6c4a:	86 fd       	sbrc	r24, 6
    6c4c:	fd cf       	rjmp	.-6      	; 0x6c48 <analogRead+0x34>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    6c4e:	80 91 78 00 	lds	r24, 0x0078
	high = ADCH;
    6c52:	20 91 79 00 	lds	r18, 0x0079
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    6c56:	90 e0       	ldi	r25, 0x00	; 0
}
    6c58:	92 2b       	or	r25, r18
    6c5a:	08 95       	ret

00006c5c <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    6c5c:	90 e0       	ldi	r25, 0x00	; 0
    6c5e:	fc 01       	movw	r30, r24
    6c60:	31 97       	sbiw	r30, 0x01	; 1
    6c62:	e2 31       	cpi	r30, 0x12	; 18
    6c64:	f1 05       	cpc	r31, r1
    6c66:	08 f0       	brcs	.+2      	; 0x6c6a <turnOffPWM+0xe>
    6c68:	60 c0       	rjmp	.+192    	; 0x6d2a <turnOffPWM+0xce>
    6c6a:	88 27       	eor	r24, r24
    6c6c:	e1 5b       	subi	r30, 0xB1	; 177
    6c6e:	fe 4f       	sbci	r31, 0xFE	; 254
    6c70:	8f 4f       	sbci	r24, 0xFF	; 255
    6c72:	78 c4       	rjmp	.+2288   	; 0x7564 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    6c74:	e0 e8       	ldi	r30, 0x80	; 128
    6c76:	f0 e0       	ldi	r31, 0x00	; 0
    6c78:	80 81       	ld	r24, Z
    6c7a:	8f 77       	andi	r24, 0x7F	; 127
    6c7c:	80 83       	st	Z, r24
    6c7e:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    6c80:	e0 e8       	ldi	r30, 0x80	; 128
    6c82:	f0 e0       	ldi	r31, 0x00	; 0
    6c84:	80 81       	ld	r24, Z
    6c86:	8f 7d       	andi	r24, 0xDF	; 223
    6c88:	80 83       	st	Z, r24
    6c8a:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    6c8c:	e0 e8       	ldi	r30, 0x80	; 128
    6c8e:	f0 e0       	ldi	r31, 0x00	; 0
    6c90:	80 81       	ld	r24, Z
    6c92:	87 7f       	andi	r24, 0xF7	; 247
    6c94:	80 83       	st	Z, r24
    6c96:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    6c98:	84 b5       	in	r24, 0x24	; 36
    6c9a:	8f 77       	andi	r24, 0x7F	; 127
    6c9c:	84 bd       	out	0x24, r24	; 36
    6c9e:	08 95       	ret
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    6ca0:	84 b5       	in	r24, 0x24	; 36
    6ca2:	8f 7d       	andi	r24, 0xDF	; 223
    6ca4:	84 bd       	out	0x24, r24	; 36
    6ca6:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    6ca8:	e0 eb       	ldi	r30, 0xB0	; 176
    6caa:	f0 e0       	ldi	r31, 0x00	; 0
    6cac:	80 81       	ld	r24, Z
    6cae:	8f 77       	andi	r24, 0x7F	; 127
    6cb0:	80 83       	st	Z, r24
    6cb2:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    6cb4:	e0 eb       	ldi	r30, 0xB0	; 176
    6cb6:	f0 e0       	ldi	r31, 0x00	; 0
    6cb8:	80 81       	ld	r24, Z
    6cba:	8f 7d       	andi	r24, 0xDF	; 223
    6cbc:	80 83       	st	Z, r24
    6cbe:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    6cc0:	e0 e9       	ldi	r30, 0x90	; 144
    6cc2:	f0 e0       	ldi	r31, 0x00	; 0
    6cc4:	80 81       	ld	r24, Z
    6cc6:	8f 77       	andi	r24, 0x7F	; 127
    6cc8:	80 83       	st	Z, r24
    6cca:	08 95       	ret
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    6ccc:	e0 e9       	ldi	r30, 0x90	; 144
    6cce:	f0 e0       	ldi	r31, 0x00	; 0
    6cd0:	80 81       	ld	r24, Z
    6cd2:	8f 7d       	andi	r24, 0xDF	; 223
    6cd4:	80 83       	st	Z, r24
    6cd6:	08 95       	ret
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    6cd8:	e0 e9       	ldi	r30, 0x90	; 144
    6cda:	f0 e0       	ldi	r31, 0x00	; 0
    6cdc:	80 81       	ld	r24, Z
    6cde:	87 7f       	andi	r24, 0xF7	; 247
    6ce0:	80 83       	st	Z, r24
    6ce2:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    6ce4:	e0 ea       	ldi	r30, 0xA0	; 160
    6ce6:	f0 e0       	ldi	r31, 0x00	; 0
    6ce8:	80 81       	ld	r24, Z
    6cea:	8f 77       	andi	r24, 0x7F	; 127
    6cec:	80 83       	st	Z, r24
    6cee:	08 95       	ret
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    6cf0:	e0 ea       	ldi	r30, 0xA0	; 160
    6cf2:	f0 e0       	ldi	r31, 0x00	; 0
    6cf4:	80 81       	ld	r24, Z
    6cf6:	8f 7d       	andi	r24, 0xDF	; 223
    6cf8:	80 83       	st	Z, r24
    6cfa:	08 95       	ret
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    6cfc:	e0 ea       	ldi	r30, 0xA0	; 160
    6cfe:	f0 e0       	ldi	r31, 0x00	; 0
    6d00:	80 81       	ld	r24, Z
    6d02:	87 7f       	andi	r24, 0xF7	; 247
    6d04:	80 83       	st	Z, r24
    6d06:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    6d08:	e0 e2       	ldi	r30, 0x20	; 32
    6d0a:	f1 e0       	ldi	r31, 0x01	; 1
    6d0c:	80 81       	ld	r24, Z
    6d0e:	8f 77       	andi	r24, 0x7F	; 127
    6d10:	80 83       	st	Z, r24
    6d12:	08 95       	ret
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    6d14:	e0 e2       	ldi	r30, 0x20	; 32
    6d16:	f1 e0       	ldi	r31, 0x01	; 1
    6d18:	80 81       	ld	r24, Z
    6d1a:	8f 7d       	andi	r24, 0xDF	; 223
    6d1c:	80 83       	st	Z, r24
    6d1e:	08 95       	ret
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    6d20:	e0 e2       	ldi	r30, 0x20	; 32
    6d22:	f1 e0       	ldi	r31, 0x01	; 1
    6d24:	80 81       	ld	r24, Z
    6d26:	87 7f       	andi	r24, 0xF7	; 247
    6d28:	80 83       	st	Z, r24
    6d2a:	08 95       	ret

00006d2c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    6d2c:	cf 93       	push	r28
    6d2e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    6d30:	90 e0       	ldi	r25, 0x00	; 0
    6d32:	fc 01       	movw	r30, r24
    6d34:	e7 5e       	subi	r30, 0xE7	; 231
    6d36:	fc 4f       	sbci	r31, 0xFC	; 252
    6d38:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    6d3a:	fc 01       	movw	r30, r24
    6d3c:	e1 5a       	subi	r30, 0xA1	; 161
    6d3e:	fc 4f       	sbci	r31, 0xFC	; 252
    6d40:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    6d42:	88 23       	and	r24, r24
    6d44:	79 f1       	breq	.+94     	; 0x6da4 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    6d46:	90 e0       	ldi	r25, 0x00	; 0
    6d48:	88 0f       	add	r24, r24
    6d4a:	99 1f       	adc	r25, r25
    6d4c:	fc 01       	movw	r30, r24
    6d4e:	e7 52       	subi	r30, 0x27	; 39
    6d50:	fc 4f       	sbci	r31, 0xFC	; 252
    6d52:	a5 91       	lpm	r26, Z+
    6d54:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    6d56:	fc 01       	movw	r30, r24
    6d58:	e1 54       	subi	r30, 0x41	; 65
    6d5a:	fc 4f       	sbci	r31, 0xFC	; 252
    6d5c:	c5 91       	lpm	r28, Z+
    6d5e:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
    6d60:	61 11       	cpse	r22, r1
    6d62:	0c c0       	rjmp	.+24     	; 0x6d7c <pinMode+0x50>
		uint8_t oldSREG = SREG;
    6d64:	9f b7       	in	r25, 0x3f	; 63
                cli();
    6d66:	f8 94       	cli
		*reg &= ~bit;
    6d68:	8c 91       	ld	r24, X
    6d6a:	e2 2f       	mov	r30, r18
    6d6c:	e0 95       	com	r30
    6d6e:	8e 23       	and	r24, r30
    6d70:	8c 93       	st	X, r24
		*out &= ~bit;
    6d72:	28 81       	ld	r18, Y
    6d74:	e2 23       	and	r30, r18
    6d76:	e8 83       	st	Y, r30
		SREG = oldSREG;
    6d78:	9f bf       	out	0x3f, r25	; 63
    6d7a:	14 c0       	rjmp	.+40     	; 0x6da4 <pinMode+0x78>
	} else if (mode == INPUT_PULLUP) {
    6d7c:	62 30       	cpi	r22, 0x02	; 2
    6d7e:	61 f4       	brne	.+24     	; 0x6d98 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    6d80:	9f b7       	in	r25, 0x3f	; 63
                cli();
    6d82:	f8 94       	cli
		*reg &= ~bit;
    6d84:	3c 91       	ld	r19, X
    6d86:	82 2f       	mov	r24, r18
    6d88:	80 95       	com	r24
    6d8a:	83 23       	and	r24, r19
    6d8c:	8c 93       	st	X, r24
		*out |= bit;
    6d8e:	e8 81       	ld	r30, Y
    6d90:	e2 2b       	or	r30, r18
    6d92:	e8 83       	st	Y, r30
		SREG = oldSREG;
    6d94:	9f bf       	out	0x3f, r25	; 63
    6d96:	06 c0       	rjmp	.+12     	; 0x6da4 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    6d98:	8f b7       	in	r24, 0x3f	; 63
                cli();
    6d9a:	f8 94       	cli
		*reg |= bit;
    6d9c:	ec 91       	ld	r30, X
    6d9e:	e2 2b       	or	r30, r18
    6da0:	ec 93       	st	X, r30
		SREG = oldSREG;
    6da2:	8f bf       	out	0x3f, r24	; 63
	}
}
    6da4:	df 91       	pop	r29
    6da6:	cf 91       	pop	r28
    6da8:	08 95       	ret

00006daa <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    6daa:	1f 93       	push	r17
    6dac:	cf 93       	push	r28
    6dae:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    6db0:	28 2f       	mov	r18, r24
    6db2:	30 e0       	ldi	r19, 0x00	; 0
    6db4:	f9 01       	movw	r30, r18
    6db6:	ed 52       	subi	r30, 0x2D	; 45
    6db8:	fd 4f       	sbci	r31, 0xFD	; 253
    6dba:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    6dbc:	f9 01       	movw	r30, r18
    6dbe:	e7 5e       	subi	r30, 0xE7	; 231
    6dc0:	fc 4f       	sbci	r31, 0xFC	; 252
    6dc2:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
    6dc4:	f9 01       	movw	r30, r18
    6dc6:	e1 5a       	subi	r30, 0xA1	; 161
    6dc8:	fc 4f       	sbci	r31, 0xFC	; 252
    6dca:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    6dcc:	cc 23       	and	r28, r28
    6dce:	c9 f0       	breq	.+50     	; 0x6e02 <digitalWrite+0x58>
    6dd0:	d6 2f       	mov	r29, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    6dd2:	81 11       	cpse	r24, r1
    6dd4:	43 df       	rcall	.-378    	; 0x6c5c <turnOffPWM>

	out = portOutputRegister(port);
    6dd6:	ec 2f       	mov	r30, r28
    6dd8:	f0 e0       	ldi	r31, 0x00	; 0
    6dda:	ee 0f       	add	r30, r30
    6ddc:	ff 1f       	adc	r31, r31
    6dde:	e1 54       	subi	r30, 0x41	; 65
    6de0:	fc 4f       	sbci	r31, 0xFC	; 252
    6de2:	a5 91       	lpm	r26, Z+
    6de4:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    6de6:	8f b7       	in	r24, 0x3f	; 63
	cli();
    6de8:	f8 94       	cli

	if (val == LOW) {
    6dea:	d1 11       	cpse	r29, r1
    6dec:	06 c0       	rjmp	.+12     	; 0x6dfa <digitalWrite+0x50>
		*out &= ~bit;
    6dee:	9c 91       	ld	r25, X
    6df0:	e1 2f       	mov	r30, r17
    6df2:	e0 95       	com	r30
    6df4:	e9 23       	and	r30, r25
    6df6:	ec 93       	st	X, r30
    6df8:	03 c0       	rjmp	.+6      	; 0x6e00 <digitalWrite+0x56>
	} else {
		*out |= bit;
    6dfa:	ec 91       	ld	r30, X
    6dfc:	e1 2b       	or	r30, r17
    6dfe:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    6e00:	8f bf       	out	0x3f, r24	; 63
}
    6e02:	df 91       	pop	r29
    6e04:	cf 91       	pop	r28
    6e06:	1f 91       	pop	r17
    6e08:	08 95       	ret

00006e0a <digitalRead>:

int digitalRead(uint8_t pin)
{
    6e0a:	cf 93       	push	r28
    6e0c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    6e0e:	28 2f       	mov	r18, r24
    6e10:	30 e0       	ldi	r19, 0x00	; 0
    6e12:	f9 01       	movw	r30, r18
    6e14:	ed 52       	subi	r30, 0x2D	; 45
    6e16:	fd 4f       	sbci	r31, 0xFD	; 253
    6e18:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    6e1a:	f9 01       	movw	r30, r18
    6e1c:	e7 5e       	subi	r30, 0xE7	; 231
    6e1e:	fc 4f       	sbci	r31, 0xFC	; 252
    6e20:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    6e22:	f9 01       	movw	r30, r18
    6e24:	e1 5a       	subi	r30, 0xA1	; 161
    6e26:	fc 4f       	sbci	r31, 0xFC	; 252
    6e28:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    6e2a:	cc 23       	and	r28, r28
    6e2c:	89 f0       	breq	.+34     	; 0x6e50 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    6e2e:	81 11       	cpse	r24, r1
    6e30:	15 df       	rcall	.-470    	; 0x6c5c <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    6e32:	ec 2f       	mov	r30, r28
    6e34:	f0 e0       	ldi	r31, 0x00	; 0
    6e36:	ee 0f       	add	r30, r30
    6e38:	ff 1f       	adc	r31, r31
    6e3a:	eb 55       	subi	r30, 0x5B	; 91
    6e3c:	fc 4f       	sbci	r31, 0xFC	; 252
    6e3e:	a5 91       	lpm	r26, Z+
    6e40:	b4 91       	lpm	r27, Z
    6e42:	ec 91       	ld	r30, X
    6e44:	ed 23       	and	r30, r29
    6e46:	81 e0       	ldi	r24, 0x01	; 1
    6e48:	90 e0       	ldi	r25, 0x00	; 0
    6e4a:	21 f4       	brne	.+8      	; 0x6e54 <digitalRead+0x4a>
    6e4c:	80 e0       	ldi	r24, 0x00	; 0
    6e4e:	02 c0       	rjmp	.+4      	; 0x6e54 <digitalRead+0x4a>
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    6e50:	80 e0       	ldi	r24, 0x00	; 0
    6e52:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    6e54:	df 91       	pop	r29
    6e56:	cf 91       	pop	r28
    6e58:	08 95       	ret

00006e5a <_ZN6StringD1Ev>:
	unsigned int newlen = len + length;
	if (!reserve(newlen)) return 0;
	strcpy_P(buffer + len, (const char *) str);
	len = newlen;
	return 1;
}
    6e5a:	fc 01       	movw	r30, r24
    6e5c:	80 81       	ld	r24, Z
    6e5e:	91 81       	ldd	r25, Z+1	; 0x01
    6e60:	32 c4       	rjmp	.+2148   	; 0x76c6 <free>
    6e62:	08 95       	ret

00006e64 <_ZN6String10invalidateEv>:
    6e64:	cf 93       	push	r28
    6e66:	df 93       	push	r29
    6e68:	ec 01       	movw	r28, r24
    6e6a:	88 81       	ld	r24, Y
    6e6c:	99 81       	ldd	r25, Y+1	; 0x01
    6e6e:	00 97       	sbiw	r24, 0x00	; 0
    6e70:	09 f0       	breq	.+2      	; 0x6e74 <_ZN6String10invalidateEv+0x10>
    6e72:	29 d4       	rcall	.+2130   	; 0x76c6 <free>
    6e74:	19 82       	std	Y+1, r1	; 0x01
    6e76:	18 82       	st	Y, r1
    6e78:	1d 82       	std	Y+5, r1	; 0x05
    6e7a:	1c 82       	std	Y+4, r1	; 0x04
    6e7c:	1b 82       	std	Y+3, r1	; 0x03
    6e7e:	1a 82       	std	Y+2, r1	; 0x02
    6e80:	df 91       	pop	r29
    6e82:	cf 91       	pop	r28
    6e84:	08 95       	ret

00006e86 <_ZN6String12changeBufferEj>:
    6e86:	0f 93       	push	r16
    6e88:	1f 93       	push	r17
    6e8a:	cf 93       	push	r28
    6e8c:	df 93       	push	r29
    6e8e:	ec 01       	movw	r28, r24
    6e90:	8b 01       	movw	r16, r22
    6e92:	6f 5f       	subi	r22, 0xFF	; 255
    6e94:	7f 4f       	sbci	r23, 0xFF	; 255
    6e96:	88 81       	ld	r24, Y
    6e98:	99 81       	ldd	r25, Y+1	; 0x01
    6e9a:	ad d4       	rcall	.+2394   	; 0x77f6 <realloc>
    6e9c:	00 97       	sbiw	r24, 0x00	; 0
    6e9e:	31 f0       	breq	.+12     	; 0x6eac <_ZN6String12changeBufferEj+0x26>
    6ea0:	99 83       	std	Y+1, r25	; 0x01
    6ea2:	88 83       	st	Y, r24
    6ea4:	1b 83       	std	Y+3, r17	; 0x03
    6ea6:	0a 83       	std	Y+2, r16	; 0x02
    6ea8:	81 e0       	ldi	r24, 0x01	; 1
    6eaa:	01 c0       	rjmp	.+2      	; 0x6eae <_ZN6String12changeBufferEj+0x28>
    6eac:	80 e0       	ldi	r24, 0x00	; 0
    6eae:	df 91       	pop	r29
    6eb0:	cf 91       	pop	r28
    6eb2:	1f 91       	pop	r17
    6eb4:	0f 91       	pop	r16
    6eb6:	08 95       	ret

00006eb8 <_ZN6String7reserveEj>:
    6eb8:	cf 93       	push	r28
    6eba:	df 93       	push	r29
    6ebc:	fc 01       	movw	r30, r24
    6ebe:	20 81       	ld	r18, Z
    6ec0:	31 81       	ldd	r19, Z+1	; 0x01
    6ec2:	23 2b       	or	r18, r19
    6ec4:	29 f0       	breq	.+10     	; 0x6ed0 <_ZN6String7reserveEj+0x18>
    6ec6:	22 81       	ldd	r18, Z+2	; 0x02
    6ec8:	33 81       	ldd	r19, Z+3	; 0x03
    6eca:	26 17       	cp	r18, r22
    6ecc:	37 07       	cpc	r19, r23
    6ece:	68 f4       	brcc	.+26     	; 0x6eea <_ZN6String7reserveEj+0x32>
    6ed0:	ec 01       	movw	r28, r24
    6ed2:	d9 df       	rcall	.-78     	; 0x6e86 <_ZN6String12changeBufferEj>
    6ed4:	88 23       	and	r24, r24
    6ed6:	61 f0       	breq	.+24     	; 0x6ef0 <_ZN6String7reserveEj+0x38>
    6ed8:	8c 81       	ldd	r24, Y+4	; 0x04
    6eda:	9d 81       	ldd	r25, Y+5	; 0x05
    6edc:	89 2b       	or	r24, r25
    6ede:	39 f4       	brne	.+14     	; 0x6eee <_ZN6String7reserveEj+0x36>
    6ee0:	e8 81       	ld	r30, Y
    6ee2:	f9 81       	ldd	r31, Y+1	; 0x01
    6ee4:	10 82       	st	Z, r1
    6ee6:	81 e0       	ldi	r24, 0x01	; 1
    6ee8:	03 c0       	rjmp	.+6      	; 0x6ef0 <_ZN6String7reserveEj+0x38>
    6eea:	81 e0       	ldi	r24, 0x01	; 1
    6eec:	01 c0       	rjmp	.+2      	; 0x6ef0 <_ZN6String7reserveEj+0x38>
    6eee:	81 e0       	ldi	r24, 0x01	; 1
    6ef0:	df 91       	pop	r29
    6ef2:	cf 91       	pop	r28
    6ef4:	08 95       	ret

00006ef6 <_ZN6String4copyEPKcj>:
    6ef6:	ef 92       	push	r14
    6ef8:	ff 92       	push	r15
    6efa:	0f 93       	push	r16
    6efc:	1f 93       	push	r17
    6efe:	cf 93       	push	r28
    6f00:	df 93       	push	r29
    6f02:	ec 01       	movw	r28, r24
    6f04:	7b 01       	movw	r14, r22
    6f06:	8a 01       	movw	r16, r20
    6f08:	ba 01       	movw	r22, r20
    6f0a:	d6 df       	rcall	.-84     	; 0x6eb8 <_ZN6String7reserveEj>
    6f0c:	81 11       	cpse	r24, r1
    6f0e:	03 c0       	rjmp	.+6      	; 0x6f16 <_ZN6String4copyEPKcj+0x20>
    6f10:	ce 01       	movw	r24, r28
    6f12:	a8 df       	rcall	.-176    	; 0x6e64 <_ZN6String10invalidateEv>
    6f14:	06 c0       	rjmp	.+12     	; 0x6f22 <_ZN6String4copyEPKcj+0x2c>
    6f16:	1d 83       	std	Y+5, r17	; 0x05
    6f18:	0c 83       	std	Y+4, r16	; 0x04
    6f1a:	b7 01       	movw	r22, r14
    6f1c:	88 81       	ld	r24, Y
    6f1e:	99 81       	ldd	r25, Y+1	; 0x01
    6f20:	6b d5       	rcall	.+2774   	; 0x79f8 <strcpy>
    6f22:	ce 01       	movw	r24, r28
    6f24:	df 91       	pop	r29
    6f26:	cf 91       	pop	r28
    6f28:	1f 91       	pop	r17
    6f2a:	0f 91       	pop	r16
    6f2c:	ff 90       	pop	r15
    6f2e:	ef 90       	pop	r14
    6f30:	08 95       	ret

00006f32 <_ZN6StringC1EPKc>:
    6f32:	fc 01       	movw	r30, r24
    6f34:	11 82       	std	Z+1, r1	; 0x01
    6f36:	10 82       	st	Z, r1
    6f38:	13 82       	std	Z+3, r1	; 0x03
    6f3a:	12 82       	std	Z+2, r1	; 0x02
    6f3c:	15 82       	std	Z+5, r1	; 0x05
    6f3e:	14 82       	std	Z+4, r1	; 0x04
    6f40:	61 15       	cp	r22, r1
    6f42:	71 05       	cpc	r23, r1
    6f44:	49 f0       	breq	.+18     	; 0x6f58 <_ZN6StringC1EPKc+0x26>
    6f46:	fb 01       	movw	r30, r22
    6f48:	01 90       	ld	r0, Z+
    6f4a:	00 20       	and	r0, r0
    6f4c:	e9 f7       	brne	.-6      	; 0x6f48 <_ZN6StringC1EPKc+0x16>
    6f4e:	31 97       	sbiw	r30, 0x01	; 1
    6f50:	af 01       	movw	r20, r30
    6f52:	46 1b       	sub	r20, r22
    6f54:	57 0b       	sbc	r21, r23
    6f56:	cf cf       	rjmp	.-98     	; 0x6ef6 <_ZN6String4copyEPKcj>
    6f58:	08 95       	ret

00006f5a <_ZN6String4copyEPK19__FlashStringHelperj>:
    6f5a:	ef 92       	push	r14
    6f5c:	ff 92       	push	r15
    6f5e:	0f 93       	push	r16
    6f60:	1f 93       	push	r17
    6f62:	cf 93       	push	r28
    6f64:	df 93       	push	r29
    6f66:	ec 01       	movw	r28, r24
    6f68:	7b 01       	movw	r14, r22
    6f6a:	8a 01       	movw	r16, r20
    6f6c:	ba 01       	movw	r22, r20
    6f6e:	a4 df       	rcall	.-184    	; 0x6eb8 <_ZN6String7reserveEj>
    6f70:	81 11       	cpse	r24, r1
    6f72:	03 c0       	rjmp	.+6      	; 0x6f7a <_ZN6String4copyEPK19__FlashStringHelperj+0x20>
    6f74:	ce 01       	movw	r24, r28
    6f76:	76 df       	rcall	.-276    	; 0x6e64 <_ZN6String10invalidateEv>
    6f78:	06 c0       	rjmp	.+12     	; 0x6f86 <_ZN6String4copyEPK19__FlashStringHelperj+0x2c>
    6f7a:	1d 83       	std	Y+5, r17	; 0x05
    6f7c:	0c 83       	std	Y+4, r16	; 0x04
    6f7e:	b7 01       	movw	r22, r14
    6f80:	88 81       	ld	r24, Y
    6f82:	99 81       	ldd	r25, Y+1	; 0x01
    6f84:	20 d5       	rcall	.+2624   	; 0x79c6 <strcpy_P>
    6f86:	ce 01       	movw	r24, r28
    6f88:	df 91       	pop	r29
    6f8a:	cf 91       	pop	r28
    6f8c:	1f 91       	pop	r17
    6f8e:	0f 91       	pop	r16
    6f90:	ff 90       	pop	r15
    6f92:	ef 90       	pop	r14
    6f94:	08 95       	ret

00006f96 <_ZN6StringaSERKS_>:
    6f96:	cf 93       	push	r28
    6f98:	df 93       	push	r29
    6f9a:	ec 01       	movw	r28, r24
    6f9c:	fb 01       	movw	r30, r22
    6f9e:	86 17       	cp	r24, r22
    6fa0:	97 07       	cpc	r25, r23
    6fa2:	51 f0       	breq	.+20     	; 0x6fb8 <_ZN6StringaSERKS_+0x22>
    6fa4:	60 81       	ld	r22, Z
    6fa6:	71 81       	ldd	r23, Z+1	; 0x01
    6fa8:	61 15       	cp	r22, r1
    6faa:	71 05       	cpc	r23, r1
    6fac:	21 f0       	breq	.+8      	; 0x6fb6 <_ZN6StringaSERKS_+0x20>
    6fae:	44 81       	ldd	r20, Z+4	; 0x04
    6fb0:	55 81       	ldd	r21, Z+5	; 0x05
    6fb2:	a1 df       	rcall	.-190    	; 0x6ef6 <_ZN6String4copyEPKcj>
    6fb4:	01 c0       	rjmp	.+2      	; 0x6fb8 <_ZN6StringaSERKS_+0x22>
    6fb6:	56 df       	rcall	.-340    	; 0x6e64 <_ZN6String10invalidateEv>
    6fb8:	ce 01       	movw	r24, r28
    6fba:	df 91       	pop	r29
    6fbc:	cf 91       	pop	r28
    6fbe:	08 95       	ret

00006fc0 <_ZN6StringC1ERKS_>:
    6fc0:	fc 01       	movw	r30, r24
    6fc2:	11 82       	std	Z+1, r1	; 0x01
    6fc4:	10 82       	st	Z, r1
    6fc6:	13 82       	std	Z+3, r1	; 0x03
    6fc8:	12 82       	std	Z+2, r1	; 0x02
    6fca:	15 82       	std	Z+5, r1	; 0x05
    6fcc:	14 82       	std	Z+4, r1	; 0x04
    6fce:	e3 cf       	rjmp	.-58     	; 0x6f96 <_ZN6StringaSERKS_>
    6fd0:	08 95       	ret

00006fd2 <_ZN6StringaSEPK19__FlashStringHelper>:
    6fd2:	0f 93       	push	r16
    6fd4:	1f 93       	push	r17
    6fd6:	cf 93       	push	r28
    6fd8:	df 93       	push	r29
    6fda:	8c 01       	movw	r16, r24
    6fdc:	eb 01       	movw	r28, r22
    6fde:	20 97       	sbiw	r28, 0x00	; 0
    6fe0:	39 f0       	breq	.+14     	; 0x6ff0 <_ZN6StringaSEPK19__FlashStringHelper+0x1e>
    6fe2:	cb 01       	movw	r24, r22
    6fe4:	f7 d4       	rcall	.+2542   	; 0x79d4 <__strlen_P>
    6fe6:	ac 01       	movw	r20, r24
    6fe8:	be 01       	movw	r22, r28
    6fea:	c8 01       	movw	r24, r16
    6fec:	b6 df       	rcall	.-148    	; 0x6f5a <_ZN6String4copyEPK19__FlashStringHelperj>
    6fee:	01 c0       	rjmp	.+2      	; 0x6ff2 <_ZN6StringaSEPK19__FlashStringHelper+0x20>
    6ff0:	39 df       	rcall	.-398    	; 0x6e64 <_ZN6String10invalidateEv>
    6ff2:	c8 01       	movw	r24, r16
    6ff4:	df 91       	pop	r29
    6ff6:	cf 91       	pop	r28
    6ff8:	1f 91       	pop	r17
    6ffa:	0f 91       	pop	r16
    6ffc:	08 95       	ret

00006ffe <_ZN6StringC1EPK19__FlashStringHelper>:
    6ffe:	fc 01       	movw	r30, r24
    7000:	11 82       	std	Z+1, r1	; 0x01
    7002:	10 82       	st	Z, r1
    7004:	13 82       	std	Z+3, r1	; 0x03
    7006:	12 82       	std	Z+2, r1	; 0x02
    7008:	15 82       	std	Z+5, r1	; 0x05
    700a:	14 82       	std	Z+4, r1	; 0x04
    700c:	e2 cf       	rjmp	.-60     	; 0x6fd2 <_ZN6StringaSEPK19__FlashStringHelper>
    700e:	08 95       	ret

00007010 <_ZN6String6concatEPKcj>:
    7010:	ef 92       	push	r14
    7012:	ff 92       	push	r15
    7014:	0f 93       	push	r16
    7016:	1f 93       	push	r17
    7018:	cf 93       	push	r28
    701a:	df 93       	push	r29
    701c:	fc 01       	movw	r30, r24
    701e:	24 81       	ldd	r18, Z+4	; 0x04
    7020:	35 81       	ldd	r19, Z+5	; 0x05
    7022:	61 15       	cp	r22, r1
    7024:	71 05       	cpc	r23, r1
    7026:	c1 f0       	breq	.+48     	; 0x7058 <_ZN6String6concatEPKcj+0x48>
    7028:	41 15       	cp	r20, r1
    702a:	51 05       	cpc	r21, r1
    702c:	b9 f0       	breq	.+46     	; 0x705c <_ZN6String6concatEPKcj+0x4c>
    702e:	8b 01       	movw	r16, r22
    7030:	ec 01       	movw	r28, r24
    7032:	7a 01       	movw	r14, r20
    7034:	e2 0e       	add	r14, r18
    7036:	f3 1e       	adc	r15, r19
    7038:	b7 01       	movw	r22, r14
    703a:	3e df       	rcall	.-388    	; 0x6eb8 <_ZN6String7reserveEj>
    703c:	88 23       	and	r24, r24
    703e:	79 f0       	breq	.+30     	; 0x705e <_ZN6String6concatEPKcj+0x4e>
    7040:	28 81       	ld	r18, Y
    7042:	39 81       	ldd	r19, Y+1	; 0x01
    7044:	8c 81       	ldd	r24, Y+4	; 0x04
    7046:	9d 81       	ldd	r25, Y+5	; 0x05
    7048:	b8 01       	movw	r22, r16
    704a:	82 0f       	add	r24, r18
    704c:	93 1f       	adc	r25, r19
    704e:	d4 d4       	rcall	.+2472   	; 0x79f8 <strcpy>
    7050:	fd 82       	std	Y+5, r15	; 0x05
    7052:	ec 82       	std	Y+4, r14	; 0x04
    7054:	81 e0       	ldi	r24, 0x01	; 1
    7056:	03 c0       	rjmp	.+6      	; 0x705e <_ZN6String6concatEPKcj+0x4e>
    7058:	80 e0       	ldi	r24, 0x00	; 0
    705a:	01 c0       	rjmp	.+2      	; 0x705e <_ZN6String6concatEPKcj+0x4e>
    705c:	81 e0       	ldi	r24, 0x01	; 1
    705e:	df 91       	pop	r29
    7060:	cf 91       	pop	r28
    7062:	1f 91       	pop	r17
    7064:	0f 91       	pop	r16
    7066:	ff 90       	pop	r15
    7068:	ef 90       	pop	r14
    706a:	08 95       	ret

0000706c <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    706c:	cf 93       	push	r28
    706e:	df 93       	push	r29
    7070:	ec 01       	movw	r28, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    7072:	fb 01       	movw	r30, r22
    7074:	44 81       	ldd	r20, Z+4	; 0x04
    7076:	55 81       	ldd	r21, Z+5	; 0x05
    7078:	60 81       	ld	r22, Z
    707a:	71 81       	ldd	r23, Z+1	; 0x01
    707c:	c9 df       	rcall	.-110    	; 0x7010 <_ZN6String6concatEPKcj>
    707e:	81 11       	cpse	r24, r1
    7080:	02 c0       	rjmp	.+4      	; 0x7086 <_ZplRK15StringSumHelperRK6String+0x1a>
    7082:	ce 01       	movw	r24, r28
    7084:	ef de       	rcall	.-546    	; 0x6e64 <_ZN6String10invalidateEv>
	return a;
}
    7086:	ce 01       	movw	r24, r28
    7088:	df 91       	pop	r29
    708a:	cf 91       	pop	r28
    708c:	08 95       	ret

0000708e <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
    708e:	cf 93       	push	r28
    7090:	df 93       	push	r29
    7092:	ec 01       	movw	r28, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
    7094:	61 15       	cp	r22, r1
    7096:	71 05       	cpc	r23, r1
    7098:	59 f0       	breq	.+22     	; 0x70b0 <_ZplRK15StringSumHelperPKc+0x22>
    709a:	fb 01       	movw	r30, r22
    709c:	01 90       	ld	r0, Z+
    709e:	00 20       	and	r0, r0
    70a0:	e9 f7       	brne	.-6      	; 0x709c <_ZplRK15StringSumHelperPKc+0xe>
    70a2:	31 97       	sbiw	r30, 0x01	; 1
    70a4:	af 01       	movw	r20, r30
    70a6:	46 1b       	sub	r20, r22
    70a8:	57 0b       	sbc	r21, r23
    70aa:	b2 df       	rcall	.-156    	; 0x7010 <_ZN6String6concatEPKcj>
    70ac:	81 11       	cpse	r24, r1
    70ae:	02 c0       	rjmp	.+4      	; 0x70b4 <_ZplRK15StringSumHelperPKc+0x26>
    70b0:	ce 01       	movw	r24, r28
    70b2:	d8 de       	rcall	.-592    	; 0x6e64 <_ZN6String10invalidateEv>
	return a;
}
    70b4:	ce 01       	movw	r24, r28
    70b6:	df 91       	pop	r29
    70b8:	cf 91       	pop	r28
    70ba:	08 95       	ret

000070bc <__subsf3>:
    70bc:	50 58       	subi	r21, 0x80	; 128

000070be <__addsf3>:
    70be:	bb 27       	eor	r27, r27
    70c0:	aa 27       	eor	r26, r26
    70c2:	0e d0       	rcall	.+28     	; 0x70e0 <__addsf3x>
    70c4:	75 c1       	rjmp	.+746    	; 0x73b0 <__fp_round>
    70c6:	66 d1       	rcall	.+716    	; 0x7394 <__fp_pscA>
    70c8:	30 f0       	brcs	.+12     	; 0x70d6 <__addsf3+0x18>
    70ca:	6b d1       	rcall	.+726    	; 0x73a2 <__fp_pscB>
    70cc:	20 f0       	brcs	.+8      	; 0x70d6 <__addsf3+0x18>
    70ce:	31 f4       	brne	.+12     	; 0x70dc <__addsf3+0x1e>
    70d0:	9f 3f       	cpi	r25, 0xFF	; 255
    70d2:	11 f4       	brne	.+4      	; 0x70d8 <__addsf3+0x1a>
    70d4:	1e f4       	brtc	.+6      	; 0x70dc <__addsf3+0x1e>
    70d6:	5b c1       	rjmp	.+694    	; 0x738e <__fp_nan>
    70d8:	0e f4       	brtc	.+2      	; 0x70dc <__addsf3+0x1e>
    70da:	e0 95       	com	r30
    70dc:	e7 fb       	bst	r30, 7
    70de:	51 c1       	rjmp	.+674    	; 0x7382 <__fp_inf>

000070e0 <__addsf3x>:
    70e0:	e9 2f       	mov	r30, r25
    70e2:	77 d1       	rcall	.+750    	; 0x73d2 <__fp_split3>
    70e4:	80 f3       	brcs	.-32     	; 0x70c6 <__addsf3+0x8>
    70e6:	ba 17       	cp	r27, r26
    70e8:	62 07       	cpc	r22, r18
    70ea:	73 07       	cpc	r23, r19
    70ec:	84 07       	cpc	r24, r20
    70ee:	95 07       	cpc	r25, r21
    70f0:	18 f0       	brcs	.+6      	; 0x70f8 <__addsf3x+0x18>
    70f2:	71 f4       	brne	.+28     	; 0x7110 <__addsf3x+0x30>
    70f4:	9e f5       	brtc	.+102    	; 0x715c <__addsf3x+0x7c>
    70f6:	8f c1       	rjmp	.+798    	; 0x7416 <__fp_zero>
    70f8:	0e f4       	brtc	.+2      	; 0x70fc <__addsf3x+0x1c>
    70fa:	e0 95       	com	r30
    70fc:	0b 2e       	mov	r0, r27
    70fe:	ba 2f       	mov	r27, r26
    7100:	a0 2d       	mov	r26, r0
    7102:	0b 01       	movw	r0, r22
    7104:	b9 01       	movw	r22, r18
    7106:	90 01       	movw	r18, r0
    7108:	0c 01       	movw	r0, r24
    710a:	ca 01       	movw	r24, r20
    710c:	a0 01       	movw	r20, r0
    710e:	11 24       	eor	r1, r1
    7110:	ff 27       	eor	r31, r31
    7112:	59 1b       	sub	r21, r25
    7114:	99 f0       	breq	.+38     	; 0x713c <__addsf3x+0x5c>
    7116:	59 3f       	cpi	r21, 0xF9	; 249
    7118:	50 f4       	brcc	.+20     	; 0x712e <__addsf3x+0x4e>
    711a:	50 3e       	cpi	r21, 0xE0	; 224
    711c:	68 f1       	brcs	.+90     	; 0x7178 <__addsf3x+0x98>
    711e:	1a 16       	cp	r1, r26
    7120:	f0 40       	sbci	r31, 0x00	; 0
    7122:	a2 2f       	mov	r26, r18
    7124:	23 2f       	mov	r18, r19
    7126:	34 2f       	mov	r19, r20
    7128:	44 27       	eor	r20, r20
    712a:	58 5f       	subi	r21, 0xF8	; 248
    712c:	f3 cf       	rjmp	.-26     	; 0x7114 <__addsf3x+0x34>
    712e:	46 95       	lsr	r20
    7130:	37 95       	ror	r19
    7132:	27 95       	ror	r18
    7134:	a7 95       	ror	r26
    7136:	f0 40       	sbci	r31, 0x00	; 0
    7138:	53 95       	inc	r21
    713a:	c9 f7       	brne	.-14     	; 0x712e <__addsf3x+0x4e>
    713c:	7e f4       	brtc	.+30     	; 0x715c <__addsf3x+0x7c>
    713e:	1f 16       	cp	r1, r31
    7140:	ba 0b       	sbc	r27, r26
    7142:	62 0b       	sbc	r22, r18
    7144:	73 0b       	sbc	r23, r19
    7146:	84 0b       	sbc	r24, r20
    7148:	ba f0       	brmi	.+46     	; 0x7178 <__addsf3x+0x98>
    714a:	91 50       	subi	r25, 0x01	; 1
    714c:	a1 f0       	breq	.+40     	; 0x7176 <__addsf3x+0x96>
    714e:	ff 0f       	add	r31, r31
    7150:	bb 1f       	adc	r27, r27
    7152:	66 1f       	adc	r22, r22
    7154:	77 1f       	adc	r23, r23
    7156:	88 1f       	adc	r24, r24
    7158:	c2 f7       	brpl	.-16     	; 0x714a <__addsf3x+0x6a>
    715a:	0e c0       	rjmp	.+28     	; 0x7178 <__addsf3x+0x98>
    715c:	ba 0f       	add	r27, r26
    715e:	62 1f       	adc	r22, r18
    7160:	73 1f       	adc	r23, r19
    7162:	84 1f       	adc	r24, r20
    7164:	48 f4       	brcc	.+18     	; 0x7178 <__addsf3x+0x98>
    7166:	87 95       	ror	r24
    7168:	77 95       	ror	r23
    716a:	67 95       	ror	r22
    716c:	b7 95       	ror	r27
    716e:	f7 95       	ror	r31
    7170:	9e 3f       	cpi	r25, 0xFE	; 254
    7172:	08 f0       	brcs	.+2      	; 0x7176 <__addsf3x+0x96>
    7174:	b3 cf       	rjmp	.-154    	; 0x70dc <__addsf3+0x1e>
    7176:	93 95       	inc	r25
    7178:	88 0f       	add	r24, r24
    717a:	08 f0       	brcs	.+2      	; 0x717e <__addsf3x+0x9e>
    717c:	99 27       	eor	r25, r25
    717e:	ee 0f       	add	r30, r30
    7180:	97 95       	ror	r25
    7182:	87 95       	ror	r24
    7184:	08 95       	ret

00007186 <__cmpsf2>:
    7186:	d9 d0       	rcall	.+434    	; 0x733a <__fp_cmp>
    7188:	08 f4       	brcc	.+2      	; 0x718c <__cmpsf2+0x6>
    718a:	81 e0       	ldi	r24, 0x01	; 1
    718c:	08 95       	ret

0000718e <__divsf3>:
    718e:	0c d0       	rcall	.+24     	; 0x71a8 <__divsf3x>
    7190:	0f c1       	rjmp	.+542    	; 0x73b0 <__fp_round>
    7192:	07 d1       	rcall	.+526    	; 0x73a2 <__fp_pscB>
    7194:	40 f0       	brcs	.+16     	; 0x71a6 <__divsf3+0x18>
    7196:	fe d0       	rcall	.+508    	; 0x7394 <__fp_pscA>
    7198:	30 f0       	brcs	.+12     	; 0x71a6 <__divsf3+0x18>
    719a:	21 f4       	brne	.+8      	; 0x71a4 <__divsf3+0x16>
    719c:	5f 3f       	cpi	r21, 0xFF	; 255
    719e:	19 f0       	breq	.+6      	; 0x71a6 <__divsf3+0x18>
    71a0:	f0 c0       	rjmp	.+480    	; 0x7382 <__fp_inf>
    71a2:	51 11       	cpse	r21, r1
    71a4:	39 c1       	rjmp	.+626    	; 0x7418 <__fp_szero>
    71a6:	f3 c0       	rjmp	.+486    	; 0x738e <__fp_nan>

000071a8 <__divsf3x>:
    71a8:	14 d1       	rcall	.+552    	; 0x73d2 <__fp_split3>
    71aa:	98 f3       	brcs	.-26     	; 0x7192 <__divsf3+0x4>

000071ac <__divsf3_pse>:
    71ac:	99 23       	and	r25, r25
    71ae:	c9 f3       	breq	.-14     	; 0x71a2 <__divsf3+0x14>
    71b0:	55 23       	and	r21, r21
    71b2:	b1 f3       	breq	.-20     	; 0x71a0 <__divsf3+0x12>
    71b4:	95 1b       	sub	r25, r21
    71b6:	55 0b       	sbc	r21, r21
    71b8:	bb 27       	eor	r27, r27
    71ba:	aa 27       	eor	r26, r26
    71bc:	62 17       	cp	r22, r18
    71be:	73 07       	cpc	r23, r19
    71c0:	84 07       	cpc	r24, r20
    71c2:	38 f0       	brcs	.+14     	; 0x71d2 <__divsf3_pse+0x26>
    71c4:	9f 5f       	subi	r25, 0xFF	; 255
    71c6:	5f 4f       	sbci	r21, 0xFF	; 255
    71c8:	22 0f       	add	r18, r18
    71ca:	33 1f       	adc	r19, r19
    71cc:	44 1f       	adc	r20, r20
    71ce:	aa 1f       	adc	r26, r26
    71d0:	a9 f3       	breq	.-22     	; 0x71bc <__divsf3_pse+0x10>
    71d2:	33 d0       	rcall	.+102    	; 0x723a <__divsf3_pse+0x8e>
    71d4:	0e 2e       	mov	r0, r30
    71d6:	3a f0       	brmi	.+14     	; 0x71e6 <__divsf3_pse+0x3a>
    71d8:	e0 e8       	ldi	r30, 0x80	; 128
    71da:	30 d0       	rcall	.+96     	; 0x723c <__divsf3_pse+0x90>
    71dc:	91 50       	subi	r25, 0x01	; 1
    71de:	50 40       	sbci	r21, 0x00	; 0
    71e0:	e6 95       	lsr	r30
    71e2:	00 1c       	adc	r0, r0
    71e4:	ca f7       	brpl	.-14     	; 0x71d8 <__divsf3_pse+0x2c>
    71e6:	29 d0       	rcall	.+82     	; 0x723a <__divsf3_pse+0x8e>
    71e8:	fe 2f       	mov	r31, r30
    71ea:	27 d0       	rcall	.+78     	; 0x723a <__divsf3_pse+0x8e>
    71ec:	66 0f       	add	r22, r22
    71ee:	77 1f       	adc	r23, r23
    71f0:	88 1f       	adc	r24, r24
    71f2:	bb 1f       	adc	r27, r27
    71f4:	26 17       	cp	r18, r22
    71f6:	37 07       	cpc	r19, r23
    71f8:	48 07       	cpc	r20, r24
    71fa:	ab 07       	cpc	r26, r27
    71fc:	b0 e8       	ldi	r27, 0x80	; 128
    71fe:	09 f0       	breq	.+2      	; 0x7202 <__divsf3_pse+0x56>
    7200:	bb 0b       	sbc	r27, r27
    7202:	80 2d       	mov	r24, r0
    7204:	bf 01       	movw	r22, r30
    7206:	ff 27       	eor	r31, r31
    7208:	93 58       	subi	r25, 0x83	; 131
    720a:	5f 4f       	sbci	r21, 0xFF	; 255
    720c:	2a f0       	brmi	.+10     	; 0x7218 <__divsf3_pse+0x6c>
    720e:	9e 3f       	cpi	r25, 0xFE	; 254
    7210:	51 05       	cpc	r21, r1
    7212:	68 f0       	brcs	.+26     	; 0x722e <__divsf3_pse+0x82>
    7214:	b6 c0       	rjmp	.+364    	; 0x7382 <__fp_inf>
    7216:	00 c1       	rjmp	.+512    	; 0x7418 <__fp_szero>
    7218:	5f 3f       	cpi	r21, 0xFF	; 255
    721a:	ec f3       	brlt	.-6      	; 0x7216 <__divsf3_pse+0x6a>
    721c:	98 3e       	cpi	r25, 0xE8	; 232
    721e:	dc f3       	brlt	.-10     	; 0x7216 <__divsf3_pse+0x6a>
    7220:	86 95       	lsr	r24
    7222:	77 95       	ror	r23
    7224:	67 95       	ror	r22
    7226:	b7 95       	ror	r27
    7228:	f7 95       	ror	r31
    722a:	9f 5f       	subi	r25, 0xFF	; 255
    722c:	c9 f7       	brne	.-14     	; 0x7220 <__divsf3_pse+0x74>
    722e:	88 0f       	add	r24, r24
    7230:	91 1d       	adc	r25, r1
    7232:	96 95       	lsr	r25
    7234:	87 95       	ror	r24
    7236:	97 f9       	bld	r25, 7
    7238:	08 95       	ret
    723a:	e1 e0       	ldi	r30, 0x01	; 1
    723c:	66 0f       	add	r22, r22
    723e:	77 1f       	adc	r23, r23
    7240:	88 1f       	adc	r24, r24
    7242:	bb 1f       	adc	r27, r27
    7244:	62 17       	cp	r22, r18
    7246:	73 07       	cpc	r23, r19
    7248:	84 07       	cpc	r24, r20
    724a:	ba 07       	cpc	r27, r26
    724c:	20 f0       	brcs	.+8      	; 0x7256 <__divsf3_pse+0xaa>
    724e:	62 1b       	sub	r22, r18
    7250:	73 0b       	sbc	r23, r19
    7252:	84 0b       	sbc	r24, r20
    7254:	ba 0b       	sbc	r27, r26
    7256:	ee 1f       	adc	r30, r30
    7258:	88 f7       	brcc	.-30     	; 0x723c <__divsf3_pse+0x90>
    725a:	e0 95       	com	r30
    725c:	08 95       	ret

0000725e <__fixsfsi>:
    725e:	04 d0       	rcall	.+8      	; 0x7268 <__fixunssfsi>
    7260:	68 94       	set
    7262:	b1 11       	cpse	r27, r1
    7264:	d9 c0       	rjmp	.+434    	; 0x7418 <__fp_szero>
    7266:	08 95       	ret

00007268 <__fixunssfsi>:
    7268:	bc d0       	rcall	.+376    	; 0x73e2 <__fp_splitA>
    726a:	88 f0       	brcs	.+34     	; 0x728e <__fixunssfsi+0x26>
    726c:	9f 57       	subi	r25, 0x7F	; 127
    726e:	90 f0       	brcs	.+36     	; 0x7294 <__fixunssfsi+0x2c>
    7270:	b9 2f       	mov	r27, r25
    7272:	99 27       	eor	r25, r25
    7274:	b7 51       	subi	r27, 0x17	; 23
    7276:	a0 f0       	brcs	.+40     	; 0x72a0 <__fixunssfsi+0x38>
    7278:	d1 f0       	breq	.+52     	; 0x72ae <__fixunssfsi+0x46>
    727a:	66 0f       	add	r22, r22
    727c:	77 1f       	adc	r23, r23
    727e:	88 1f       	adc	r24, r24
    7280:	99 1f       	adc	r25, r25
    7282:	1a f0       	brmi	.+6      	; 0x728a <__fixunssfsi+0x22>
    7284:	ba 95       	dec	r27
    7286:	c9 f7       	brne	.-14     	; 0x727a <__fixunssfsi+0x12>
    7288:	12 c0       	rjmp	.+36     	; 0x72ae <__fixunssfsi+0x46>
    728a:	b1 30       	cpi	r27, 0x01	; 1
    728c:	81 f0       	breq	.+32     	; 0x72ae <__fixunssfsi+0x46>
    728e:	c3 d0       	rcall	.+390    	; 0x7416 <__fp_zero>
    7290:	b1 e0       	ldi	r27, 0x01	; 1
    7292:	08 95       	ret
    7294:	c0 c0       	rjmp	.+384    	; 0x7416 <__fp_zero>
    7296:	67 2f       	mov	r22, r23
    7298:	78 2f       	mov	r23, r24
    729a:	88 27       	eor	r24, r24
    729c:	b8 5f       	subi	r27, 0xF8	; 248
    729e:	39 f0       	breq	.+14     	; 0x72ae <__fixunssfsi+0x46>
    72a0:	b9 3f       	cpi	r27, 0xF9	; 249
    72a2:	cc f3       	brlt	.-14     	; 0x7296 <__fixunssfsi+0x2e>
    72a4:	86 95       	lsr	r24
    72a6:	77 95       	ror	r23
    72a8:	67 95       	ror	r22
    72aa:	b3 95       	inc	r27
    72ac:	d9 f7       	brne	.-10     	; 0x72a4 <__fixunssfsi+0x3c>
    72ae:	3e f4       	brtc	.+14     	; 0x72be <__fixunssfsi+0x56>
    72b0:	90 95       	com	r25
    72b2:	80 95       	com	r24
    72b4:	70 95       	com	r23
    72b6:	61 95       	neg	r22
    72b8:	7f 4f       	sbci	r23, 0xFF	; 255
    72ba:	8f 4f       	sbci	r24, 0xFF	; 255
    72bc:	9f 4f       	sbci	r25, 0xFF	; 255
    72be:	08 95       	ret

000072c0 <__floatunsisf>:
    72c0:	e8 94       	clt
    72c2:	09 c0       	rjmp	.+18     	; 0x72d6 <__floatsisf+0x12>

000072c4 <__floatsisf>:
    72c4:	97 fb       	bst	r25, 7
    72c6:	3e f4       	brtc	.+14     	; 0x72d6 <__floatsisf+0x12>
    72c8:	90 95       	com	r25
    72ca:	80 95       	com	r24
    72cc:	70 95       	com	r23
    72ce:	61 95       	neg	r22
    72d0:	7f 4f       	sbci	r23, 0xFF	; 255
    72d2:	8f 4f       	sbci	r24, 0xFF	; 255
    72d4:	9f 4f       	sbci	r25, 0xFF	; 255
    72d6:	99 23       	and	r25, r25
    72d8:	a9 f0       	breq	.+42     	; 0x7304 <__floatsisf+0x40>
    72da:	f9 2f       	mov	r31, r25
    72dc:	96 e9       	ldi	r25, 0x96	; 150
    72de:	bb 27       	eor	r27, r27
    72e0:	93 95       	inc	r25
    72e2:	f6 95       	lsr	r31
    72e4:	87 95       	ror	r24
    72e6:	77 95       	ror	r23
    72e8:	67 95       	ror	r22
    72ea:	b7 95       	ror	r27
    72ec:	f1 11       	cpse	r31, r1
    72ee:	f8 cf       	rjmp	.-16     	; 0x72e0 <__floatsisf+0x1c>
    72f0:	fa f4       	brpl	.+62     	; 0x7330 <__floatsisf+0x6c>
    72f2:	bb 0f       	add	r27, r27
    72f4:	11 f4       	brne	.+4      	; 0x72fa <__floatsisf+0x36>
    72f6:	60 ff       	sbrs	r22, 0
    72f8:	1b c0       	rjmp	.+54     	; 0x7330 <__floatsisf+0x6c>
    72fa:	6f 5f       	subi	r22, 0xFF	; 255
    72fc:	7f 4f       	sbci	r23, 0xFF	; 255
    72fe:	8f 4f       	sbci	r24, 0xFF	; 255
    7300:	9f 4f       	sbci	r25, 0xFF	; 255
    7302:	16 c0       	rjmp	.+44     	; 0x7330 <__floatsisf+0x6c>
    7304:	88 23       	and	r24, r24
    7306:	11 f0       	breq	.+4      	; 0x730c <__floatsisf+0x48>
    7308:	96 e9       	ldi	r25, 0x96	; 150
    730a:	11 c0       	rjmp	.+34     	; 0x732e <__floatsisf+0x6a>
    730c:	77 23       	and	r23, r23
    730e:	21 f0       	breq	.+8      	; 0x7318 <__floatsisf+0x54>
    7310:	9e e8       	ldi	r25, 0x8E	; 142
    7312:	87 2f       	mov	r24, r23
    7314:	76 2f       	mov	r23, r22
    7316:	05 c0       	rjmp	.+10     	; 0x7322 <__floatsisf+0x5e>
    7318:	66 23       	and	r22, r22
    731a:	71 f0       	breq	.+28     	; 0x7338 <__floatsisf+0x74>
    731c:	96 e8       	ldi	r25, 0x86	; 134
    731e:	86 2f       	mov	r24, r22
    7320:	70 e0       	ldi	r23, 0x00	; 0
    7322:	60 e0       	ldi	r22, 0x00	; 0
    7324:	2a f0       	brmi	.+10     	; 0x7330 <__floatsisf+0x6c>
    7326:	9a 95       	dec	r25
    7328:	66 0f       	add	r22, r22
    732a:	77 1f       	adc	r23, r23
    732c:	88 1f       	adc	r24, r24
    732e:	da f7       	brpl	.-10     	; 0x7326 <__floatsisf+0x62>
    7330:	88 0f       	add	r24, r24
    7332:	96 95       	lsr	r25
    7334:	87 95       	ror	r24
    7336:	97 f9       	bld	r25, 7
    7338:	08 95       	ret

0000733a <__fp_cmp>:
    733a:	99 0f       	add	r25, r25
    733c:	00 08       	sbc	r0, r0
    733e:	55 0f       	add	r21, r21
    7340:	aa 0b       	sbc	r26, r26
    7342:	e0 e8       	ldi	r30, 0x80	; 128
    7344:	fe ef       	ldi	r31, 0xFE	; 254
    7346:	16 16       	cp	r1, r22
    7348:	17 06       	cpc	r1, r23
    734a:	e8 07       	cpc	r30, r24
    734c:	f9 07       	cpc	r31, r25
    734e:	c0 f0       	brcs	.+48     	; 0x7380 <__fp_cmp+0x46>
    7350:	12 16       	cp	r1, r18
    7352:	13 06       	cpc	r1, r19
    7354:	e4 07       	cpc	r30, r20
    7356:	f5 07       	cpc	r31, r21
    7358:	98 f0       	brcs	.+38     	; 0x7380 <__fp_cmp+0x46>
    735a:	62 1b       	sub	r22, r18
    735c:	73 0b       	sbc	r23, r19
    735e:	84 0b       	sbc	r24, r20
    7360:	95 0b       	sbc	r25, r21
    7362:	39 f4       	brne	.+14     	; 0x7372 <__fp_cmp+0x38>
    7364:	0a 26       	eor	r0, r26
    7366:	61 f0       	breq	.+24     	; 0x7380 <__fp_cmp+0x46>
    7368:	23 2b       	or	r18, r19
    736a:	24 2b       	or	r18, r20
    736c:	25 2b       	or	r18, r21
    736e:	21 f4       	brne	.+8      	; 0x7378 <__fp_cmp+0x3e>
    7370:	08 95       	ret
    7372:	0a 26       	eor	r0, r26
    7374:	09 f4       	brne	.+2      	; 0x7378 <__fp_cmp+0x3e>
    7376:	a1 40       	sbci	r26, 0x01	; 1
    7378:	a6 95       	lsr	r26
    737a:	8f ef       	ldi	r24, 0xFF	; 255
    737c:	81 1d       	adc	r24, r1
    737e:	81 1d       	adc	r24, r1
    7380:	08 95       	ret

00007382 <__fp_inf>:
    7382:	97 f9       	bld	r25, 7
    7384:	9f 67       	ori	r25, 0x7F	; 127
    7386:	80 e8       	ldi	r24, 0x80	; 128
    7388:	70 e0       	ldi	r23, 0x00	; 0
    738a:	60 e0       	ldi	r22, 0x00	; 0
    738c:	08 95       	ret

0000738e <__fp_nan>:
    738e:	9f ef       	ldi	r25, 0xFF	; 255
    7390:	80 ec       	ldi	r24, 0xC0	; 192
    7392:	08 95       	ret

00007394 <__fp_pscA>:
    7394:	00 24       	eor	r0, r0
    7396:	0a 94       	dec	r0
    7398:	16 16       	cp	r1, r22
    739a:	17 06       	cpc	r1, r23
    739c:	18 06       	cpc	r1, r24
    739e:	09 06       	cpc	r0, r25
    73a0:	08 95       	ret

000073a2 <__fp_pscB>:
    73a2:	00 24       	eor	r0, r0
    73a4:	0a 94       	dec	r0
    73a6:	12 16       	cp	r1, r18
    73a8:	13 06       	cpc	r1, r19
    73aa:	14 06       	cpc	r1, r20
    73ac:	05 06       	cpc	r0, r21
    73ae:	08 95       	ret

000073b0 <__fp_round>:
    73b0:	09 2e       	mov	r0, r25
    73b2:	03 94       	inc	r0
    73b4:	00 0c       	add	r0, r0
    73b6:	11 f4       	brne	.+4      	; 0x73bc <__fp_round+0xc>
    73b8:	88 23       	and	r24, r24
    73ba:	52 f0       	brmi	.+20     	; 0x73d0 <__fp_round+0x20>
    73bc:	bb 0f       	add	r27, r27
    73be:	40 f4       	brcc	.+16     	; 0x73d0 <__fp_round+0x20>
    73c0:	bf 2b       	or	r27, r31
    73c2:	11 f4       	brne	.+4      	; 0x73c8 <__fp_round+0x18>
    73c4:	60 ff       	sbrs	r22, 0
    73c6:	04 c0       	rjmp	.+8      	; 0x73d0 <__fp_round+0x20>
    73c8:	6f 5f       	subi	r22, 0xFF	; 255
    73ca:	7f 4f       	sbci	r23, 0xFF	; 255
    73cc:	8f 4f       	sbci	r24, 0xFF	; 255
    73ce:	9f 4f       	sbci	r25, 0xFF	; 255
    73d0:	08 95       	ret

000073d2 <__fp_split3>:
    73d2:	57 fd       	sbrc	r21, 7
    73d4:	90 58       	subi	r25, 0x80	; 128
    73d6:	44 0f       	add	r20, r20
    73d8:	55 1f       	adc	r21, r21
    73da:	59 f0       	breq	.+22     	; 0x73f2 <__fp_splitA+0x10>
    73dc:	5f 3f       	cpi	r21, 0xFF	; 255
    73de:	71 f0       	breq	.+28     	; 0x73fc <__fp_splitA+0x1a>
    73e0:	47 95       	ror	r20

000073e2 <__fp_splitA>:
    73e2:	88 0f       	add	r24, r24
    73e4:	97 fb       	bst	r25, 7
    73e6:	99 1f       	adc	r25, r25
    73e8:	61 f0       	breq	.+24     	; 0x7402 <__fp_splitA+0x20>
    73ea:	9f 3f       	cpi	r25, 0xFF	; 255
    73ec:	79 f0       	breq	.+30     	; 0x740c <__fp_splitA+0x2a>
    73ee:	87 95       	ror	r24
    73f0:	08 95       	ret
    73f2:	12 16       	cp	r1, r18
    73f4:	13 06       	cpc	r1, r19
    73f6:	14 06       	cpc	r1, r20
    73f8:	55 1f       	adc	r21, r21
    73fa:	f2 cf       	rjmp	.-28     	; 0x73e0 <__fp_split3+0xe>
    73fc:	46 95       	lsr	r20
    73fe:	f1 df       	rcall	.-30     	; 0x73e2 <__fp_splitA>
    7400:	08 c0       	rjmp	.+16     	; 0x7412 <__fp_splitA+0x30>
    7402:	16 16       	cp	r1, r22
    7404:	17 06       	cpc	r1, r23
    7406:	18 06       	cpc	r1, r24
    7408:	99 1f       	adc	r25, r25
    740a:	f1 cf       	rjmp	.-30     	; 0x73ee <__fp_splitA+0xc>
    740c:	86 95       	lsr	r24
    740e:	71 05       	cpc	r23, r1
    7410:	61 05       	cpc	r22, r1
    7412:	08 94       	sec
    7414:	08 95       	ret

00007416 <__fp_zero>:
    7416:	e8 94       	clt

00007418 <__fp_szero>:
    7418:	bb 27       	eor	r27, r27
    741a:	66 27       	eor	r22, r22
    741c:	77 27       	eor	r23, r23
    741e:	cb 01       	movw	r24, r22
    7420:	97 f9       	bld	r25, 7
    7422:	08 95       	ret

00007424 <__gesf2>:
    7424:	8a df       	rcall	.-236    	; 0x733a <__fp_cmp>
    7426:	08 f4       	brcc	.+2      	; 0x742a <__gesf2+0x6>
    7428:	8f ef       	ldi	r24, 0xFF	; 255
    742a:	08 95       	ret

0000742c <__mulsf3>:
    742c:	0b d0       	rcall	.+22     	; 0x7444 <__mulsf3x>
    742e:	c0 cf       	rjmp	.-128    	; 0x73b0 <__fp_round>
    7430:	b1 df       	rcall	.-158    	; 0x7394 <__fp_pscA>
    7432:	28 f0       	brcs	.+10     	; 0x743e <__mulsf3+0x12>
    7434:	b6 df       	rcall	.-148    	; 0x73a2 <__fp_pscB>
    7436:	18 f0       	brcs	.+6      	; 0x743e <__mulsf3+0x12>
    7438:	95 23       	and	r25, r21
    743a:	09 f0       	breq	.+2      	; 0x743e <__mulsf3+0x12>
    743c:	a2 cf       	rjmp	.-188    	; 0x7382 <__fp_inf>
    743e:	a7 cf       	rjmp	.-178    	; 0x738e <__fp_nan>
    7440:	11 24       	eor	r1, r1
    7442:	ea cf       	rjmp	.-44     	; 0x7418 <__fp_szero>

00007444 <__mulsf3x>:
    7444:	c6 df       	rcall	.-116    	; 0x73d2 <__fp_split3>
    7446:	a0 f3       	brcs	.-24     	; 0x7430 <__mulsf3+0x4>

00007448 <__mulsf3_pse>:
    7448:	95 9f       	mul	r25, r21
    744a:	d1 f3       	breq	.-12     	; 0x7440 <__mulsf3+0x14>
    744c:	95 0f       	add	r25, r21
    744e:	50 e0       	ldi	r21, 0x00	; 0
    7450:	55 1f       	adc	r21, r21
    7452:	62 9f       	mul	r22, r18
    7454:	f0 01       	movw	r30, r0
    7456:	72 9f       	mul	r23, r18
    7458:	bb 27       	eor	r27, r27
    745a:	f0 0d       	add	r31, r0
    745c:	b1 1d       	adc	r27, r1
    745e:	63 9f       	mul	r22, r19
    7460:	aa 27       	eor	r26, r26
    7462:	f0 0d       	add	r31, r0
    7464:	b1 1d       	adc	r27, r1
    7466:	aa 1f       	adc	r26, r26
    7468:	64 9f       	mul	r22, r20
    746a:	66 27       	eor	r22, r22
    746c:	b0 0d       	add	r27, r0
    746e:	a1 1d       	adc	r26, r1
    7470:	66 1f       	adc	r22, r22
    7472:	82 9f       	mul	r24, r18
    7474:	22 27       	eor	r18, r18
    7476:	b0 0d       	add	r27, r0
    7478:	a1 1d       	adc	r26, r1
    747a:	62 1f       	adc	r22, r18
    747c:	73 9f       	mul	r23, r19
    747e:	b0 0d       	add	r27, r0
    7480:	a1 1d       	adc	r26, r1
    7482:	62 1f       	adc	r22, r18
    7484:	83 9f       	mul	r24, r19
    7486:	a0 0d       	add	r26, r0
    7488:	61 1d       	adc	r22, r1
    748a:	22 1f       	adc	r18, r18
    748c:	74 9f       	mul	r23, r20
    748e:	33 27       	eor	r19, r19
    7490:	a0 0d       	add	r26, r0
    7492:	61 1d       	adc	r22, r1
    7494:	23 1f       	adc	r18, r19
    7496:	84 9f       	mul	r24, r20
    7498:	60 0d       	add	r22, r0
    749a:	21 1d       	adc	r18, r1
    749c:	82 2f       	mov	r24, r18
    749e:	76 2f       	mov	r23, r22
    74a0:	6a 2f       	mov	r22, r26
    74a2:	11 24       	eor	r1, r1
    74a4:	9f 57       	subi	r25, 0x7F	; 127
    74a6:	50 40       	sbci	r21, 0x00	; 0
    74a8:	8a f0       	brmi	.+34     	; 0x74cc <__mulsf3_pse+0x84>
    74aa:	e1 f0       	breq	.+56     	; 0x74e4 <__mulsf3_pse+0x9c>
    74ac:	88 23       	and	r24, r24
    74ae:	4a f0       	brmi	.+18     	; 0x74c2 <__mulsf3_pse+0x7a>
    74b0:	ee 0f       	add	r30, r30
    74b2:	ff 1f       	adc	r31, r31
    74b4:	bb 1f       	adc	r27, r27
    74b6:	66 1f       	adc	r22, r22
    74b8:	77 1f       	adc	r23, r23
    74ba:	88 1f       	adc	r24, r24
    74bc:	91 50       	subi	r25, 0x01	; 1
    74be:	50 40       	sbci	r21, 0x00	; 0
    74c0:	a9 f7       	brne	.-22     	; 0x74ac <__mulsf3_pse+0x64>
    74c2:	9e 3f       	cpi	r25, 0xFE	; 254
    74c4:	51 05       	cpc	r21, r1
    74c6:	70 f0       	brcs	.+28     	; 0x74e4 <__mulsf3_pse+0x9c>
    74c8:	5c cf       	rjmp	.-328    	; 0x7382 <__fp_inf>
    74ca:	a6 cf       	rjmp	.-180    	; 0x7418 <__fp_szero>
    74cc:	5f 3f       	cpi	r21, 0xFF	; 255
    74ce:	ec f3       	brlt	.-6      	; 0x74ca <__mulsf3_pse+0x82>
    74d0:	98 3e       	cpi	r25, 0xE8	; 232
    74d2:	dc f3       	brlt	.-10     	; 0x74ca <__mulsf3_pse+0x82>
    74d4:	86 95       	lsr	r24
    74d6:	77 95       	ror	r23
    74d8:	67 95       	ror	r22
    74da:	b7 95       	ror	r27
    74dc:	f7 95       	ror	r31
    74de:	e7 95       	ror	r30
    74e0:	9f 5f       	subi	r25, 0xFF	; 255
    74e2:	c1 f7       	brne	.-16     	; 0x74d4 <__mulsf3_pse+0x8c>
    74e4:	fe 2b       	or	r31, r30
    74e6:	88 0f       	add	r24, r24
    74e8:	91 1d       	adc	r25, r1
    74ea:	96 95       	lsr	r25
    74ec:	87 95       	ror	r24
    74ee:	97 f9       	bld	r25, 7
    74f0:	08 95       	ret

000074f2 <__unordsf2>:
    74f2:	23 df       	rcall	.-442    	; 0x733a <__fp_cmp>
    74f4:	88 0b       	sbc	r24, r24
    74f6:	99 0b       	sbc	r25, r25
    74f8:	08 95       	ret

000074fa <__divmodhi4>:
    74fa:	97 fb       	bst	r25, 7
    74fc:	07 2e       	mov	r0, r23
    74fe:	16 f4       	brtc	.+4      	; 0x7504 <__divmodhi4+0xa>
    7500:	00 94       	com	r0
    7502:	06 d0       	rcall	.+12     	; 0x7510 <__divmodhi4_neg1>
    7504:	77 fd       	sbrc	r23, 7
    7506:	08 d0       	rcall	.+16     	; 0x7518 <__divmodhi4_neg2>
    7508:	35 d0       	rcall	.+106    	; 0x7574 <__udivmodhi4>
    750a:	07 fc       	sbrc	r0, 7
    750c:	05 d0       	rcall	.+10     	; 0x7518 <__divmodhi4_neg2>
    750e:	3e f4       	brtc	.+14     	; 0x751e <__divmodhi4_exit>

00007510 <__divmodhi4_neg1>:
    7510:	90 95       	com	r25
    7512:	81 95       	neg	r24
    7514:	9f 4f       	sbci	r25, 0xFF	; 255
    7516:	08 95       	ret

00007518 <__divmodhi4_neg2>:
    7518:	70 95       	com	r23
    751a:	61 95       	neg	r22
    751c:	7f 4f       	sbci	r23, 0xFF	; 255

0000751e <__divmodhi4_exit>:
    751e:	08 95       	ret

00007520 <__udivmodsi4>:
    7520:	a1 e2       	ldi	r26, 0x21	; 33
    7522:	1a 2e       	mov	r1, r26
    7524:	aa 1b       	sub	r26, r26
    7526:	bb 1b       	sub	r27, r27
    7528:	fd 01       	movw	r30, r26
    752a:	0d c0       	rjmp	.+26     	; 0x7546 <__udivmodsi4_ep>

0000752c <__udivmodsi4_loop>:
    752c:	aa 1f       	adc	r26, r26
    752e:	bb 1f       	adc	r27, r27
    7530:	ee 1f       	adc	r30, r30
    7532:	ff 1f       	adc	r31, r31
    7534:	a2 17       	cp	r26, r18
    7536:	b3 07       	cpc	r27, r19
    7538:	e4 07       	cpc	r30, r20
    753a:	f5 07       	cpc	r31, r21
    753c:	20 f0       	brcs	.+8      	; 0x7546 <__udivmodsi4_ep>
    753e:	a2 1b       	sub	r26, r18
    7540:	b3 0b       	sbc	r27, r19
    7542:	e4 0b       	sbc	r30, r20
    7544:	f5 0b       	sbc	r31, r21

00007546 <__udivmodsi4_ep>:
    7546:	66 1f       	adc	r22, r22
    7548:	77 1f       	adc	r23, r23
    754a:	88 1f       	adc	r24, r24
    754c:	99 1f       	adc	r25, r25
    754e:	1a 94       	dec	r1
    7550:	69 f7       	brne	.-38     	; 0x752c <__udivmodsi4_loop>
    7552:	60 95       	com	r22
    7554:	70 95       	com	r23
    7556:	80 95       	com	r24
    7558:	90 95       	com	r25
    755a:	9b 01       	movw	r18, r22
    755c:	ac 01       	movw	r20, r24
    755e:	bd 01       	movw	r22, r26
    7560:	cf 01       	movw	r24, r30
    7562:	08 95       	ret

00007564 <__tablejump2__>:
    7564:	ee 0f       	add	r30, r30
    7566:	ff 1f       	adc	r31, r31
    7568:	88 1f       	adc	r24, r24
    756a:	8b bf       	out	0x3b, r24	; 59
    756c:	07 90       	elpm	r0, Z+
    756e:	f6 91       	elpm	r31, Z
    7570:	e0 2d       	mov	r30, r0
    7572:	19 94       	eijmp

00007574 <__udivmodhi4>:
    7574:	aa 1b       	sub	r26, r26
    7576:	bb 1b       	sub	r27, r27
    7578:	51 e1       	ldi	r21, 0x11	; 17
    757a:	07 c0       	rjmp	.+14     	; 0x758a <__udivmodhi4_ep>

0000757c <__udivmodhi4_loop>:
    757c:	aa 1f       	adc	r26, r26
    757e:	bb 1f       	adc	r27, r27
    7580:	a6 17       	cp	r26, r22
    7582:	b7 07       	cpc	r27, r23
    7584:	10 f0       	brcs	.+4      	; 0x758a <__udivmodhi4_ep>
    7586:	a6 1b       	sub	r26, r22
    7588:	b7 0b       	sbc	r27, r23

0000758a <__udivmodhi4_ep>:
    758a:	88 1f       	adc	r24, r24
    758c:	99 1f       	adc	r25, r25
    758e:	5a 95       	dec	r21
    7590:	a9 f7       	brne	.-22     	; 0x757c <__udivmodhi4_loop>
    7592:	80 95       	com	r24
    7594:	90 95       	com	r25
    7596:	bc 01       	movw	r22, r24
    7598:	cd 01       	movw	r24, r26
    759a:	08 95       	ret

0000759c <malloc>:
    759c:	cf 93       	push	r28
    759e:	df 93       	push	r29
    75a0:	82 30       	cpi	r24, 0x02	; 2
    75a2:	91 05       	cpc	r25, r1
    75a4:	10 f4       	brcc	.+4      	; 0x75aa <malloc+0xe>
    75a6:	82 e0       	ldi	r24, 0x02	; 2
    75a8:	90 e0       	ldi	r25, 0x00	; 0
    75aa:	e0 91 44 0d 	lds	r30, 0x0D44
    75ae:	f0 91 45 0d 	lds	r31, 0x0D45
    75b2:	20 e0       	ldi	r18, 0x00	; 0
    75b4:	30 e0       	ldi	r19, 0x00	; 0
    75b6:	c0 e0       	ldi	r28, 0x00	; 0
    75b8:	d0 e0       	ldi	r29, 0x00	; 0
    75ba:	30 97       	sbiw	r30, 0x00	; 0
    75bc:	11 f1       	breq	.+68     	; 0x7602 <malloc+0x66>
    75be:	40 81       	ld	r20, Z
    75c0:	51 81       	ldd	r21, Z+1	; 0x01
    75c2:	48 17       	cp	r20, r24
    75c4:	59 07       	cpc	r21, r25
    75c6:	c0 f0       	brcs	.+48     	; 0x75f8 <malloc+0x5c>
    75c8:	48 17       	cp	r20, r24
    75ca:	59 07       	cpc	r21, r25
    75cc:	61 f4       	brne	.+24     	; 0x75e6 <malloc+0x4a>
    75ce:	82 81       	ldd	r24, Z+2	; 0x02
    75d0:	93 81       	ldd	r25, Z+3	; 0x03
    75d2:	20 97       	sbiw	r28, 0x00	; 0
    75d4:	19 f0       	breq	.+6      	; 0x75dc <malloc+0x40>
    75d6:	9b 83       	std	Y+3, r25	; 0x03
    75d8:	8a 83       	std	Y+2, r24	; 0x02
    75da:	2b c0       	rjmp	.+86     	; 0x7632 <malloc+0x96>
    75dc:	90 93 45 0d 	sts	0x0D45, r25
    75e0:	80 93 44 0d 	sts	0x0D44, r24
    75e4:	26 c0       	rjmp	.+76     	; 0x7632 <malloc+0x96>
    75e6:	21 15       	cp	r18, r1
    75e8:	31 05       	cpc	r19, r1
    75ea:	19 f0       	breq	.+6      	; 0x75f2 <malloc+0x56>
    75ec:	42 17       	cp	r20, r18
    75ee:	53 07       	cpc	r21, r19
    75f0:	18 f4       	brcc	.+6      	; 0x75f8 <malloc+0x5c>
    75f2:	9a 01       	movw	r18, r20
    75f4:	be 01       	movw	r22, r28
    75f6:	df 01       	movw	r26, r30
    75f8:	ef 01       	movw	r28, r30
    75fa:	02 80       	ldd	r0, Z+2	; 0x02
    75fc:	f3 81       	ldd	r31, Z+3	; 0x03
    75fe:	e0 2d       	mov	r30, r0
    7600:	dc cf       	rjmp	.-72     	; 0x75ba <malloc+0x1e>
    7602:	21 15       	cp	r18, r1
    7604:	31 05       	cpc	r19, r1
    7606:	09 f1       	breq	.+66     	; 0x764a <malloc+0xae>
    7608:	28 1b       	sub	r18, r24
    760a:	39 0b       	sbc	r19, r25
    760c:	24 30       	cpi	r18, 0x04	; 4
    760e:	31 05       	cpc	r19, r1
    7610:	90 f4       	brcc	.+36     	; 0x7636 <malloc+0x9a>
    7612:	12 96       	adiw	r26, 0x02	; 2
    7614:	8d 91       	ld	r24, X+
    7616:	9c 91       	ld	r25, X
    7618:	13 97       	sbiw	r26, 0x03	; 3
    761a:	61 15       	cp	r22, r1
    761c:	71 05       	cpc	r23, r1
    761e:	21 f0       	breq	.+8      	; 0x7628 <malloc+0x8c>
    7620:	fb 01       	movw	r30, r22
    7622:	93 83       	std	Z+3, r25	; 0x03
    7624:	82 83       	std	Z+2, r24	; 0x02
    7626:	04 c0       	rjmp	.+8      	; 0x7630 <malloc+0x94>
    7628:	90 93 45 0d 	sts	0x0D45, r25
    762c:	80 93 44 0d 	sts	0x0D44, r24
    7630:	fd 01       	movw	r30, r26
    7632:	32 96       	adiw	r30, 0x02	; 2
    7634:	44 c0       	rjmp	.+136    	; 0x76be <malloc+0x122>
    7636:	fd 01       	movw	r30, r26
    7638:	e2 0f       	add	r30, r18
    763a:	f3 1f       	adc	r31, r19
    763c:	81 93       	st	Z+, r24
    763e:	91 93       	st	Z+, r25
    7640:	22 50       	subi	r18, 0x02	; 2
    7642:	31 09       	sbc	r19, r1
    7644:	2d 93       	st	X+, r18
    7646:	3c 93       	st	X, r19
    7648:	3a c0       	rjmp	.+116    	; 0x76be <malloc+0x122>
    764a:	20 91 42 0d 	lds	r18, 0x0D42
    764e:	30 91 43 0d 	lds	r19, 0x0D43
    7652:	23 2b       	or	r18, r19
    7654:	41 f4       	brne	.+16     	; 0x7666 <malloc+0xca>
    7656:	20 91 02 02 	lds	r18, 0x0202
    765a:	30 91 03 02 	lds	r19, 0x0203
    765e:	30 93 43 0d 	sts	0x0D43, r19
    7662:	20 93 42 0d 	sts	0x0D42, r18
    7666:	20 91 00 02 	lds	r18, 0x0200
    766a:	30 91 01 02 	lds	r19, 0x0201
    766e:	21 15       	cp	r18, r1
    7670:	31 05       	cpc	r19, r1
    7672:	41 f4       	brne	.+16     	; 0x7684 <malloc+0xe8>
    7674:	2d b7       	in	r18, 0x3d	; 61
    7676:	3e b7       	in	r19, 0x3e	; 62
    7678:	40 91 04 02 	lds	r20, 0x0204
    767c:	50 91 05 02 	lds	r21, 0x0205
    7680:	24 1b       	sub	r18, r20
    7682:	35 0b       	sbc	r19, r21
    7684:	e0 91 42 0d 	lds	r30, 0x0D42
    7688:	f0 91 43 0d 	lds	r31, 0x0D43
    768c:	e2 17       	cp	r30, r18
    768e:	f3 07       	cpc	r31, r19
    7690:	a0 f4       	brcc	.+40     	; 0x76ba <malloc+0x11e>
    7692:	2e 1b       	sub	r18, r30
    7694:	3f 0b       	sbc	r19, r31
    7696:	28 17       	cp	r18, r24
    7698:	39 07       	cpc	r19, r25
    769a:	78 f0       	brcs	.+30     	; 0x76ba <malloc+0x11e>
    769c:	ac 01       	movw	r20, r24
    769e:	4e 5f       	subi	r20, 0xFE	; 254
    76a0:	5f 4f       	sbci	r21, 0xFF	; 255
    76a2:	24 17       	cp	r18, r20
    76a4:	35 07       	cpc	r19, r21
    76a6:	48 f0       	brcs	.+18     	; 0x76ba <malloc+0x11e>
    76a8:	4e 0f       	add	r20, r30
    76aa:	5f 1f       	adc	r21, r31
    76ac:	50 93 43 0d 	sts	0x0D43, r21
    76b0:	40 93 42 0d 	sts	0x0D42, r20
    76b4:	81 93       	st	Z+, r24
    76b6:	91 93       	st	Z+, r25
    76b8:	02 c0       	rjmp	.+4      	; 0x76be <malloc+0x122>
    76ba:	e0 e0       	ldi	r30, 0x00	; 0
    76bc:	f0 e0       	ldi	r31, 0x00	; 0
    76be:	cf 01       	movw	r24, r30
    76c0:	df 91       	pop	r29
    76c2:	cf 91       	pop	r28
    76c4:	08 95       	ret

000076c6 <free>:
    76c6:	0f 93       	push	r16
    76c8:	1f 93       	push	r17
    76ca:	cf 93       	push	r28
    76cc:	df 93       	push	r29
    76ce:	00 97       	sbiw	r24, 0x00	; 0
    76d0:	09 f4       	brne	.+2      	; 0x76d4 <free+0xe>
    76d2:	8c c0       	rjmp	.+280    	; 0x77ec <free+0x126>
    76d4:	fc 01       	movw	r30, r24
    76d6:	32 97       	sbiw	r30, 0x02	; 2
    76d8:	13 82       	std	Z+3, r1	; 0x03
    76da:	12 82       	std	Z+2, r1	; 0x02
    76dc:	00 91 44 0d 	lds	r16, 0x0D44
    76e0:	10 91 45 0d 	lds	r17, 0x0D45
    76e4:	01 15       	cp	r16, r1
    76e6:	11 05       	cpc	r17, r1
    76e8:	81 f4       	brne	.+32     	; 0x770a <free+0x44>
    76ea:	20 81       	ld	r18, Z
    76ec:	31 81       	ldd	r19, Z+1	; 0x01
    76ee:	82 0f       	add	r24, r18
    76f0:	93 1f       	adc	r25, r19
    76f2:	20 91 42 0d 	lds	r18, 0x0D42
    76f6:	30 91 43 0d 	lds	r19, 0x0D43
    76fa:	28 17       	cp	r18, r24
    76fc:	39 07       	cpc	r19, r25
    76fe:	79 f5       	brne	.+94     	; 0x775e <free+0x98>
    7700:	f0 93 43 0d 	sts	0x0D43, r31
    7704:	e0 93 42 0d 	sts	0x0D42, r30
    7708:	71 c0       	rjmp	.+226    	; 0x77ec <free+0x126>
    770a:	d8 01       	movw	r26, r16
    770c:	40 e0       	ldi	r20, 0x00	; 0
    770e:	50 e0       	ldi	r21, 0x00	; 0
    7710:	ae 17       	cp	r26, r30
    7712:	bf 07       	cpc	r27, r31
    7714:	50 f4       	brcc	.+20     	; 0x772a <free+0x64>
    7716:	12 96       	adiw	r26, 0x02	; 2
    7718:	2d 91       	ld	r18, X+
    771a:	3c 91       	ld	r19, X
    771c:	13 97       	sbiw	r26, 0x03	; 3
    771e:	ad 01       	movw	r20, r26
    7720:	21 15       	cp	r18, r1
    7722:	31 05       	cpc	r19, r1
    7724:	09 f1       	breq	.+66     	; 0x7768 <free+0xa2>
    7726:	d9 01       	movw	r26, r18
    7728:	f3 cf       	rjmp	.-26     	; 0x7710 <free+0x4a>
    772a:	9d 01       	movw	r18, r26
    772c:	da 01       	movw	r26, r20
    772e:	33 83       	std	Z+3, r19	; 0x03
    7730:	22 83       	std	Z+2, r18	; 0x02
    7732:	60 81       	ld	r22, Z
    7734:	71 81       	ldd	r23, Z+1	; 0x01
    7736:	86 0f       	add	r24, r22
    7738:	97 1f       	adc	r25, r23
    773a:	82 17       	cp	r24, r18
    773c:	93 07       	cpc	r25, r19
    773e:	69 f4       	brne	.+26     	; 0x775a <free+0x94>
    7740:	ec 01       	movw	r28, r24
    7742:	28 81       	ld	r18, Y
    7744:	39 81       	ldd	r19, Y+1	; 0x01
    7746:	26 0f       	add	r18, r22
    7748:	37 1f       	adc	r19, r23
    774a:	2e 5f       	subi	r18, 0xFE	; 254
    774c:	3f 4f       	sbci	r19, 0xFF	; 255
    774e:	31 83       	std	Z+1, r19	; 0x01
    7750:	20 83       	st	Z, r18
    7752:	8a 81       	ldd	r24, Y+2	; 0x02
    7754:	9b 81       	ldd	r25, Y+3	; 0x03
    7756:	93 83       	std	Z+3, r25	; 0x03
    7758:	82 83       	std	Z+2, r24	; 0x02
    775a:	45 2b       	or	r20, r21
    775c:	29 f4       	brne	.+10     	; 0x7768 <free+0xa2>
    775e:	f0 93 45 0d 	sts	0x0D45, r31
    7762:	e0 93 44 0d 	sts	0x0D44, r30
    7766:	42 c0       	rjmp	.+132    	; 0x77ec <free+0x126>
    7768:	13 96       	adiw	r26, 0x03	; 3
    776a:	fc 93       	st	X, r31
    776c:	ee 93       	st	-X, r30
    776e:	12 97       	sbiw	r26, 0x02	; 2
    7770:	ed 01       	movw	r28, r26
    7772:	49 91       	ld	r20, Y+
    7774:	59 91       	ld	r21, Y+
    7776:	9e 01       	movw	r18, r28
    7778:	24 0f       	add	r18, r20
    777a:	35 1f       	adc	r19, r21
    777c:	e2 17       	cp	r30, r18
    777e:	f3 07       	cpc	r31, r19
    7780:	71 f4       	brne	.+28     	; 0x779e <free+0xd8>
    7782:	80 81       	ld	r24, Z
    7784:	91 81       	ldd	r25, Z+1	; 0x01
    7786:	84 0f       	add	r24, r20
    7788:	95 1f       	adc	r25, r21
    778a:	02 96       	adiw	r24, 0x02	; 2
    778c:	11 96       	adiw	r26, 0x01	; 1
    778e:	9c 93       	st	X, r25
    7790:	8e 93       	st	-X, r24
    7792:	82 81       	ldd	r24, Z+2	; 0x02
    7794:	93 81       	ldd	r25, Z+3	; 0x03
    7796:	13 96       	adiw	r26, 0x03	; 3
    7798:	9c 93       	st	X, r25
    779a:	8e 93       	st	-X, r24
    779c:	12 97       	sbiw	r26, 0x02	; 2
    779e:	e0 e0       	ldi	r30, 0x00	; 0
    77a0:	f0 e0       	ldi	r31, 0x00	; 0
    77a2:	d8 01       	movw	r26, r16
    77a4:	12 96       	adiw	r26, 0x02	; 2
    77a6:	8d 91       	ld	r24, X+
    77a8:	9c 91       	ld	r25, X
    77aa:	13 97       	sbiw	r26, 0x03	; 3
    77ac:	00 97       	sbiw	r24, 0x00	; 0
    77ae:	19 f0       	breq	.+6      	; 0x77b6 <free+0xf0>
    77b0:	f8 01       	movw	r30, r16
    77b2:	8c 01       	movw	r16, r24
    77b4:	f6 cf       	rjmp	.-20     	; 0x77a2 <free+0xdc>
    77b6:	8d 91       	ld	r24, X+
    77b8:	9c 91       	ld	r25, X
    77ba:	98 01       	movw	r18, r16
    77bc:	2e 5f       	subi	r18, 0xFE	; 254
    77be:	3f 4f       	sbci	r19, 0xFF	; 255
    77c0:	82 0f       	add	r24, r18
    77c2:	93 1f       	adc	r25, r19
    77c4:	20 91 42 0d 	lds	r18, 0x0D42
    77c8:	30 91 43 0d 	lds	r19, 0x0D43
    77cc:	28 17       	cp	r18, r24
    77ce:	39 07       	cpc	r19, r25
    77d0:	69 f4       	brne	.+26     	; 0x77ec <free+0x126>
    77d2:	30 97       	sbiw	r30, 0x00	; 0
    77d4:	29 f4       	brne	.+10     	; 0x77e0 <free+0x11a>
    77d6:	10 92 45 0d 	sts	0x0D45, r1
    77da:	10 92 44 0d 	sts	0x0D44, r1
    77de:	02 c0       	rjmp	.+4      	; 0x77e4 <free+0x11e>
    77e0:	13 82       	std	Z+3, r1	; 0x03
    77e2:	12 82       	std	Z+2, r1	; 0x02
    77e4:	10 93 43 0d 	sts	0x0D43, r17
    77e8:	00 93 42 0d 	sts	0x0D42, r16
    77ec:	df 91       	pop	r29
    77ee:	cf 91       	pop	r28
    77f0:	1f 91       	pop	r17
    77f2:	0f 91       	pop	r16
    77f4:	08 95       	ret

000077f6 <realloc>:
    77f6:	6f 92       	push	r6
    77f8:	7f 92       	push	r7
    77fa:	8f 92       	push	r8
    77fc:	9f 92       	push	r9
    77fe:	af 92       	push	r10
    7800:	bf 92       	push	r11
    7802:	cf 92       	push	r12
    7804:	df 92       	push	r13
    7806:	ef 92       	push	r14
    7808:	ff 92       	push	r15
    780a:	0f 93       	push	r16
    780c:	1f 93       	push	r17
    780e:	cf 93       	push	r28
    7810:	df 93       	push	r29
    7812:	ec 01       	movw	r28, r24
    7814:	00 97       	sbiw	r24, 0x00	; 0
    7816:	81 f4       	brne	.+32     	; 0x7838 <realloc+0x42>
    7818:	cb 01       	movw	r24, r22
    781a:	df 91       	pop	r29
    781c:	cf 91       	pop	r28
    781e:	1f 91       	pop	r17
    7820:	0f 91       	pop	r16
    7822:	ff 90       	pop	r15
    7824:	ef 90       	pop	r14
    7826:	df 90       	pop	r13
    7828:	cf 90       	pop	r12
    782a:	bf 90       	pop	r11
    782c:	af 90       	pop	r10
    782e:	9f 90       	pop	r9
    7830:	8f 90       	pop	r8
    7832:	7f 90       	pop	r7
    7834:	6f 90       	pop	r6
    7836:	b2 ce       	rjmp	.-668    	; 0x759c <malloc>
    7838:	fc 01       	movw	r30, r24
    783a:	e6 0f       	add	r30, r22
    783c:	f7 1f       	adc	r31, r23
    783e:	9c 01       	movw	r18, r24
    7840:	22 50       	subi	r18, 0x02	; 2
    7842:	31 09       	sbc	r19, r1
    7844:	e2 17       	cp	r30, r18
    7846:	f3 07       	cpc	r31, r19
    7848:	08 f4       	brcc	.+2      	; 0x784c <realloc+0x56>
    784a:	a8 c0       	rjmp	.+336    	; 0x799c <realloc+0x1a6>
    784c:	d9 01       	movw	r26, r18
    784e:	0d 91       	ld	r16, X+
    7850:	1c 91       	ld	r17, X
    7852:	11 97       	sbiw	r26, 0x01	; 1
    7854:	06 17       	cp	r16, r22
    7856:	17 07       	cpc	r17, r23
    7858:	a8 f0       	brcs	.+42     	; 0x7884 <realloc+0x8e>
    785a:	05 30       	cpi	r16, 0x05	; 5
    785c:	11 05       	cpc	r17, r1
    785e:	08 f4       	brcc	.+2      	; 0x7862 <realloc+0x6c>
    7860:	9b c0       	rjmp	.+310    	; 0x7998 <realloc+0x1a2>
    7862:	c8 01       	movw	r24, r16
    7864:	04 97       	sbiw	r24, 0x04	; 4
    7866:	86 17       	cp	r24, r22
    7868:	97 07       	cpc	r25, r23
    786a:	08 f4       	brcc	.+2      	; 0x786e <realloc+0x78>
    786c:	95 c0       	rjmp	.+298    	; 0x7998 <realloc+0x1a2>
    786e:	02 50       	subi	r16, 0x02	; 2
    7870:	11 09       	sbc	r17, r1
    7872:	06 1b       	sub	r16, r22
    7874:	17 0b       	sbc	r17, r23
    7876:	01 93       	st	Z+, r16
    7878:	11 93       	st	Z+, r17
    787a:	6d 93       	st	X+, r22
    787c:	7c 93       	st	X, r23
    787e:	cf 01       	movw	r24, r30
    7880:	22 df       	rcall	.-444    	; 0x76c6 <free>
    7882:	8a c0       	rjmp	.+276    	; 0x7998 <realloc+0x1a2>
    7884:	5b 01       	movw	r10, r22
    7886:	a0 1a       	sub	r10, r16
    7888:	b1 0a       	sbc	r11, r17
    788a:	4c 01       	movw	r8, r24
    788c:	80 0e       	add	r8, r16
    788e:	91 1e       	adc	r9, r17
    7890:	a0 91 44 0d 	lds	r26, 0x0D44
    7894:	b0 91 45 0d 	lds	r27, 0x0D45
    7898:	40 e0       	ldi	r20, 0x00	; 0
    789a:	50 e0       	ldi	r21, 0x00	; 0
    789c:	e1 2c       	mov	r14, r1
    789e:	f1 2c       	mov	r15, r1
    78a0:	10 97       	sbiw	r26, 0x00	; 0
    78a2:	09 f4       	brne	.+2      	; 0x78a6 <realloc+0xb0>
    78a4:	4a c0       	rjmp	.+148    	; 0x793a <realloc+0x144>
    78a6:	a8 15       	cp	r26, r8
    78a8:	b9 05       	cpc	r27, r9
    78aa:	d1 f5       	brne	.+116    	; 0x7920 <realloc+0x12a>
    78ac:	6d 90       	ld	r6, X+
    78ae:	7c 90       	ld	r7, X
    78b0:	11 97       	sbiw	r26, 0x01	; 1
    78b2:	63 01       	movw	r12, r6
    78b4:	82 e0       	ldi	r24, 0x02	; 2
    78b6:	c8 0e       	add	r12, r24
    78b8:	d1 1c       	adc	r13, r1
    78ba:	ca 14       	cp	r12, r10
    78bc:	db 04       	cpc	r13, r11
    78be:	80 f1       	brcs	.+96     	; 0x7920 <realloc+0x12a>
    78c0:	a3 01       	movw	r20, r6
    78c2:	4a 19       	sub	r20, r10
    78c4:	5b 09       	sbc	r21, r11
    78c6:	6a 01       	movw	r12, r20
    78c8:	82 e0       	ldi	r24, 0x02	; 2
    78ca:	c8 0e       	add	r12, r24
    78cc:	d1 1c       	adc	r13, r1
    78ce:	12 96       	adiw	r26, 0x02	; 2
    78d0:	bc 90       	ld	r11, X
    78d2:	12 97       	sbiw	r26, 0x02	; 2
    78d4:	13 96       	adiw	r26, 0x03	; 3
    78d6:	ac 91       	ld	r26, X
    78d8:	b5 e0       	ldi	r27, 0x05	; 5
    78da:	cb 16       	cp	r12, r27
    78dc:	d1 04       	cpc	r13, r1
    78de:	40 f0       	brcs	.+16     	; 0x78f0 <realloc+0xfa>
    78e0:	b2 82       	std	Z+2, r11	; 0x02
    78e2:	a3 83       	std	Z+3, r26	; 0x03
    78e4:	51 83       	std	Z+1, r21	; 0x01
    78e6:	40 83       	st	Z, r20
    78e8:	d9 01       	movw	r26, r18
    78ea:	6d 93       	st	X+, r22
    78ec:	7c 93       	st	X, r23
    78ee:	0a c0       	rjmp	.+20     	; 0x7904 <realloc+0x10e>
    78f0:	0e 5f       	subi	r16, 0xFE	; 254
    78f2:	1f 4f       	sbci	r17, 0xFF	; 255
    78f4:	c3 01       	movw	r24, r6
    78f6:	80 0f       	add	r24, r16
    78f8:	91 1f       	adc	r25, r17
    78fa:	f9 01       	movw	r30, r18
    78fc:	91 83       	std	Z+1, r25	; 0x01
    78fe:	80 83       	st	Z, r24
    7900:	eb 2d       	mov	r30, r11
    7902:	fa 2f       	mov	r31, r26
    7904:	e1 14       	cp	r14, r1
    7906:	f1 04       	cpc	r15, r1
    7908:	31 f0       	breq	.+12     	; 0x7916 <realloc+0x120>
    790a:	d7 01       	movw	r26, r14
    790c:	13 96       	adiw	r26, 0x03	; 3
    790e:	fc 93       	st	X, r31
    7910:	ee 93       	st	-X, r30
    7912:	12 97       	sbiw	r26, 0x02	; 2
    7914:	41 c0       	rjmp	.+130    	; 0x7998 <realloc+0x1a2>
    7916:	f0 93 45 0d 	sts	0x0D45, r31
    791a:	e0 93 44 0d 	sts	0x0D44, r30
    791e:	3c c0       	rjmp	.+120    	; 0x7998 <realloc+0x1a2>
    7920:	8d 91       	ld	r24, X+
    7922:	9c 91       	ld	r25, X
    7924:	11 97       	sbiw	r26, 0x01	; 1
    7926:	48 17       	cp	r20, r24
    7928:	59 07       	cpc	r21, r25
    792a:	08 f4       	brcc	.+2      	; 0x792e <realloc+0x138>
    792c:	ac 01       	movw	r20, r24
    792e:	7d 01       	movw	r14, r26
    7930:	12 96       	adiw	r26, 0x02	; 2
    7932:	0d 90       	ld	r0, X+
    7934:	bc 91       	ld	r27, X
    7936:	a0 2d       	mov	r26, r0
    7938:	b3 cf       	rjmp	.-154    	; 0x78a0 <realloc+0xaa>
    793a:	80 91 42 0d 	lds	r24, 0x0D42
    793e:	90 91 43 0d 	lds	r25, 0x0D43
    7942:	88 15       	cp	r24, r8
    7944:	99 05       	cpc	r25, r9
    7946:	e1 f4       	brne	.+56     	; 0x7980 <realloc+0x18a>
    7948:	46 17       	cp	r20, r22
    794a:	57 07       	cpc	r21, r23
    794c:	c8 f4       	brcc	.+50     	; 0x7980 <realloc+0x18a>
    794e:	80 91 00 02 	lds	r24, 0x0200
    7952:	90 91 01 02 	lds	r25, 0x0201
    7956:	00 97       	sbiw	r24, 0x00	; 0
    7958:	41 f4       	brne	.+16     	; 0x796a <realloc+0x174>
    795a:	8d b7       	in	r24, 0x3d	; 61
    795c:	9e b7       	in	r25, 0x3e	; 62
    795e:	40 91 04 02 	lds	r20, 0x0204
    7962:	50 91 05 02 	lds	r21, 0x0205
    7966:	84 1b       	sub	r24, r20
    7968:	95 0b       	sbc	r25, r21
    796a:	e8 17       	cp	r30, r24
    796c:	f9 07       	cpc	r31, r25
    796e:	b0 f4       	brcc	.+44     	; 0x799c <realloc+0x1a6>
    7970:	f0 93 43 0d 	sts	0x0D43, r31
    7974:	e0 93 42 0d 	sts	0x0D42, r30
    7978:	f9 01       	movw	r30, r18
    797a:	71 83       	std	Z+1, r23	; 0x01
    797c:	60 83       	st	Z, r22
    797e:	0c c0       	rjmp	.+24     	; 0x7998 <realloc+0x1a2>
    7980:	cb 01       	movw	r24, r22
    7982:	0c de       	rcall	.-1000   	; 0x759c <malloc>
    7984:	7c 01       	movw	r14, r24
    7986:	00 97       	sbiw	r24, 0x00	; 0
    7988:	49 f0       	breq	.+18     	; 0x799c <realloc+0x1a6>
    798a:	a8 01       	movw	r20, r16
    798c:	be 01       	movw	r22, r28
    798e:	2b d0       	rcall	.+86     	; 0x79e6 <memcpy>
    7990:	ce 01       	movw	r24, r28
    7992:	99 de       	rcall	.-718    	; 0x76c6 <free>
    7994:	c7 01       	movw	r24, r14
    7996:	04 c0       	rjmp	.+8      	; 0x79a0 <realloc+0x1aa>
    7998:	ce 01       	movw	r24, r28
    799a:	02 c0       	rjmp	.+4      	; 0x79a0 <realloc+0x1aa>
    799c:	80 e0       	ldi	r24, 0x00	; 0
    799e:	90 e0       	ldi	r25, 0x00	; 0
    79a0:	df 91       	pop	r29
    79a2:	cf 91       	pop	r28
    79a4:	1f 91       	pop	r17
    79a6:	0f 91       	pop	r16
    79a8:	ff 90       	pop	r15
    79aa:	ef 90       	pop	r14
    79ac:	df 90       	pop	r13
    79ae:	cf 90       	pop	r12
    79b0:	bf 90       	pop	r11
    79b2:	af 90       	pop	r10
    79b4:	9f 90       	pop	r9
    79b6:	8f 90       	pop	r8
    79b8:	7f 90       	pop	r7
    79ba:	6f 90       	pop	r6
    79bc:	08 95       	ret

000079be <abort>:
    79be:	81 e0       	ldi	r24, 0x01	; 1
    79c0:	90 e0       	ldi	r25, 0x00	; 0
    79c2:	f8 94       	cli
    79c4:	20 c0       	rjmp	.+64     	; 0x7a06 <__do_global_dtors>

000079c6 <strcpy_P>:
    79c6:	fb 01       	movw	r30, r22
    79c8:	dc 01       	movw	r26, r24
    79ca:	05 90       	lpm	r0, Z+
    79cc:	0d 92       	st	X+, r0
    79ce:	00 20       	and	r0, r0
    79d0:	e1 f7       	brne	.-8      	; 0x79ca <strcpy_P+0x4>
    79d2:	08 95       	ret

000079d4 <__strlen_P>:
    79d4:	fc 01       	movw	r30, r24
    79d6:	05 90       	lpm	r0, Z+
    79d8:	00 20       	and	r0, r0
    79da:	e9 f7       	brne	.-6      	; 0x79d6 <__strlen_P+0x2>
    79dc:	80 95       	com	r24
    79de:	90 95       	com	r25
    79e0:	8e 0f       	add	r24, r30
    79e2:	9f 1f       	adc	r25, r31
    79e4:	08 95       	ret

000079e6 <memcpy>:
    79e6:	fb 01       	movw	r30, r22
    79e8:	dc 01       	movw	r26, r24
    79ea:	02 c0       	rjmp	.+4      	; 0x79f0 <memcpy+0xa>
    79ec:	01 90       	ld	r0, Z+
    79ee:	0d 92       	st	X+, r0
    79f0:	41 50       	subi	r20, 0x01	; 1
    79f2:	50 40       	sbci	r21, 0x00	; 0
    79f4:	d8 f7       	brcc	.-10     	; 0x79ec <memcpy+0x6>
    79f6:	08 95       	ret

000079f8 <strcpy>:
    79f8:	fb 01       	movw	r30, r22
    79fa:	dc 01       	movw	r26, r24
    79fc:	01 90       	ld	r0, Z+
    79fe:	0d 92       	st	X+, r0
    7a00:	00 20       	and	r0, r0
    7a02:	e1 f7       	brne	.-8      	; 0x79fc <strcpy+0x4>
    7a04:	08 95       	ret

00007a06 <__do_global_dtors>:
    7a06:	12 e0       	ldi	r17, 0x02	; 2
    7a08:	c6 e0       	ldi	r28, 0x06	; 6
    7a0a:	d2 e0       	ldi	r29, 0x02	; 2
    7a0c:	00 e0       	ldi	r16, 0x00	; 0
    7a0e:	05 c0       	rjmp	.+10     	; 0x7a1a <__do_global_dtors+0x14>
    7a10:	80 2f       	mov	r24, r16
    7a12:	fe 01       	movw	r30, r28
    7a14:	a7 dd       	rcall	.-1202   	; 0x7564 <__tablejump2__>
    7a16:	21 96       	adiw	r28, 0x01	; 1
    7a18:	01 1d       	adc	r16, r1
    7a1a:	c7 30       	cpi	r28, 0x07	; 7
    7a1c:	d1 07       	cpc	r29, r17
    7a1e:	80 e0       	ldi	r24, 0x00	; 0
    7a20:	08 07       	cpc	r16, r24
    7a22:	b1 f7       	brne	.-20     	; 0x7a10 <__do_global_dtors+0xa>
    7a24:	f8 94       	cli

00007a26 <__stop_program>:
    7a26:	ff cf       	rjmp	.-2      	; 0x7a26 <__stop_program>
