
ProjectNarwhal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003ee  00800200  00008e36  00008eca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00008e36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000532  008005ee  008005ee  000092b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000092b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000092e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000010c0  00000000  00000000  00009328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0004da15  00000000  00000000  0000a3e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000083ce  00000000  00000000  00057dfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000b3ab  00000000  00000000  000601cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003d28  00000000  00000000  0006b578  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000054de  00000000  00000000  0006f2a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001407e  00000000  00000000  0007477e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000f10  00000000  00000000  000887fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	06 c2       	rjmp	.+1036   	; 0x40e <__dtors_end>
       2:	00 00       	nop
       4:	0c 94 28 3d 	jmp	0x7a50	; 0x7a50 <__vector_1>
       8:	0c 94 59 3d 	jmp	0x7ab2	; 0x7ab2 <__vector_2>
       c:	0c 94 8a 3d 	jmp	0x7b14	; 0x7b14 <__vector_3>
      10:	0c 94 bb 3d 	jmp	0x7b76	; 0x7b76 <__vector_4>
      14:	0c 94 ec 3d 	jmp	0x7bd8	; 0x7bd8 <__vector_5>
      18:	0c 94 1d 3e 	jmp	0x7c3a	; 0x7c3a <__vector_6>
      1c:	0c 94 4e 3e 	jmp	0x7c9c	; 0x7c9c <__vector_7>
      20:	0c 94 7f 3e 	jmp	0x7cfe	; 0x7cfe <__vector_8>
      24:	25 c2       	rjmp	.+1098   	; 0x470 <__bad_interrupt>
      26:	00 00       	nop
      28:	23 c2       	rjmp	.+1094   	; 0x470 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	21 c2       	rjmp	.+1090   	; 0x470 <__bad_interrupt>
      2e:	00 00       	nop
      30:	1f c2       	rjmp	.+1086   	; 0x470 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 c9 3c 	jmp	0x7992	; 0x7992 <__vector_13>
      38:	1b c2       	rjmp	.+1078   	; 0x470 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	19 c2       	rjmp	.+1074   	; 0x470 <__bad_interrupt>
      3e:	00 00       	nop
      40:	17 c2       	rjmp	.+1070   	; 0x470 <__bad_interrupt>
      42:	00 00       	nop
      44:	15 c2       	rjmp	.+1066   	; 0x470 <__bad_interrupt>
      46:	00 00       	nop
      48:	13 c2       	rjmp	.+1062   	; 0x470 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	11 c2       	rjmp	.+1058   	; 0x470 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 09 32 	jmp	0x6412	; 0x6412 <__vector_20>
      54:	0d c2       	rjmp	.+1050   	; 0x470 <__bad_interrupt>
      56:	00 00       	nop
      58:	0b c2       	rjmp	.+1046   	; 0x470 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 b0 3e 	jmp	0x7d60	; 0x7d60 <__vector_23>
      60:	07 c2       	rjmp	.+1038   	; 0x470 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 49 37 	jmp	0x6e92	; 0x6e92 <__vector_25>
      68:	0c 94 85 37 	jmp	0x6f0a	; 0x6f0a <__vector_26>
      6c:	01 c2       	rjmp	.+1026   	; 0x470 <__bad_interrupt>
      6e:	00 00       	nop
      70:	ff c1       	rjmp	.+1022   	; 0x470 <__bad_interrupt>
      72:	00 00       	nop
      74:	fd c1       	rjmp	.+1018   	; 0x470 <__bad_interrupt>
      76:	00 00       	nop
      78:	fb c1       	rjmp	.+1014   	; 0x470 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f9 c1       	rjmp	.+1010   	; 0x470 <__bad_interrupt>
      7e:	00 00       	nop
      80:	f7 c1       	rjmp	.+1006   	; 0x470 <__bad_interrupt>
      82:	00 00       	nop
      84:	f5 c1       	rjmp	.+1002   	; 0x470 <__bad_interrupt>
      86:	00 00       	nop
      88:	f3 c1       	rjmp	.+998    	; 0x470 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f1 c1       	rjmp	.+994    	; 0x470 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 e4 37 	jmp	0x6fc8	; 0x6fc8 <__vector_36>
      94:	0c 94 20 38 	jmp	0x7040	; 0x7040 <__vector_37>
      98:	eb c1       	rjmp	.+982    	; 0x470 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 2d 33 	jmp	0x665a	; 0x665a <__vector_39>
      a0:	e7 c1       	rjmp	.+974    	; 0x470 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	e5 c1       	rjmp	.+970    	; 0x470 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	e3 c1       	rjmp	.+966    	; 0x470 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	e1 c1       	rjmp	.+962    	; 0x470 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	df c1       	rjmp	.+958    	; 0x470 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	dd c1       	rjmp	.+954    	; 0x470 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	db c1       	rjmp	.+950    	; 0x470 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	d9 c1       	rjmp	.+946    	; 0x470 <__bad_interrupt>
      be:	00 00       	nop
      c0:	d7 c1       	rjmp	.+942    	; 0x470 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	d5 c1       	rjmp	.+938    	; 0x470 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	d3 c1       	rjmp	.+934    	; 0x470 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 7f 38 	jmp	0x70fe	; 0x70fe <__vector_51>
      d0:	0c 94 bb 38 	jmp	0x7176	; 0x7176 <__vector_52>
      d4:	cd c1       	rjmp	.+922    	; 0x470 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 1a 39 	jmp	0x7234	; 0x7234 <__vector_54>
      dc:	0c 94 56 39 	jmp	0x72ac	; 0x72ac <__vector_55>
      e0:	c7 c1       	rjmp	.+910    	; 0x470 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ba 26       	eor	r11, r26
      e6:	86 26       	eor	r8, r22
      e8:	93 26       	eor	r9, r19
      ea:	5e 26       	eor	r5, r30
      ec:	69 26       	eor	r6, r25
      ee:	72 26       	eor	r7, r18
      f0:	7d 26       	eor	r7, r29
      f2:	9e 26       	eor	r9, r30
      f4:	a8 26       	eor	r10, r24
      f6:	be 27       	eor	r27, r30
      f8:	3b 27       	eor	r19, r27
      fa:	60 27       	eor	r22, r16
      fc:	c1 26       	eor	r12, r17
      fe:	db 26       	eor	r13, r27
     100:	f5 26       	eor	r15, r21
     102:	18 27       	eor	r17, r24
     104:	85 27       	eor	r24, r21
     106:	9b 27       	eor	r25, r27
     108:	d9 27       	eor	r29, r25
     10a:	f5 27       	eor	r31, r21
     10c:	35 34       	cpi	r19, 0x45	; 69
     10e:	38 34       	cpi	r19, 0x48	; 72
     110:	38 34       	cpi	r19, 0x48	; 72
     112:	38 34       	cpi	r19, 0x48	; 72
     114:	38 34       	cpi	r19, 0x48	; 72
     116:	38 34       	cpi	r19, 0x48	; 72
     118:	38 34       	cpi	r19, 0x48	; 72
     11a:	38 34       	cpi	r19, 0x48	; 72
     11c:	4f 33       	cpi	r20, 0x3F	; 63
     11e:	38 34       	cpi	r19, 0x48	; 72
     120:	38 34       	cpi	r19, 0x48	; 72
     122:	38 34       	cpi	r19, 0x48	; 72
     124:	38 34       	cpi	r19, 0x48	; 72
     126:	38 34       	cpi	r19, 0x48	; 72
     128:	38 34       	cpi	r19, 0x48	; 72
     12a:	38 34       	cpi	r19, 0x48	; 72
     12c:	4f 33       	cpi	r20, 0x3F	; 63
     12e:	38 34       	cpi	r19, 0x48	; 72
     130:	38 34       	cpi	r19, 0x48	; 72
     132:	38 34       	cpi	r19, 0x48	; 72
     134:	38 34       	cpi	r19, 0x48	; 72
     136:	38 34       	cpi	r19, 0x48	; 72
     138:	38 34       	cpi	r19, 0x48	; 72
     13a:	38 34       	cpi	r19, 0x48	; 72
     13c:	57 33       	cpi	r21, 0x37	; 55
     13e:	38 34       	cpi	r19, 0x48	; 72
     140:	38 34       	cpi	r19, 0x48	; 72
     142:	38 34       	cpi	r19, 0x48	; 72
     144:	38 34       	cpi	r19, 0x48	; 72
     146:	38 34       	cpi	r19, 0x48	; 72
     148:	38 34       	cpi	r19, 0x48	; 72
     14a:	38 34       	cpi	r19, 0x48	; 72
     14c:	7c 33       	cpi	r23, 0x3C	; 60
     14e:	38 34       	cpi	r19, 0x48	; 72
     150:	38 34       	cpi	r19, 0x48	; 72
     152:	38 34       	cpi	r19, 0x48	; 72
     154:	38 34       	cpi	r19, 0x48	; 72
     156:	38 34       	cpi	r19, 0x48	; 72
     158:	38 34       	cpi	r19, 0x48	; 72
     15a:	38 34       	cpi	r19, 0x48	; 72
     15c:	57 33       	cpi	r21, 0x37	; 55
     15e:	38 34       	cpi	r19, 0x48	; 72
     160:	38 34       	cpi	r19, 0x48	; 72
     162:	38 34       	cpi	r19, 0x48	; 72
     164:	38 34       	cpi	r19, 0x48	; 72
     166:	38 34       	cpi	r19, 0x48	; 72
     168:	38 34       	cpi	r19, 0x48	; 72
     16a:	38 34       	cpi	r19, 0x48	; 72
     16c:	81 33       	cpi	r24, 0x31	; 49
     16e:	38 34       	cpi	r19, 0x48	; 72
     170:	38 34       	cpi	r19, 0x48	; 72
     172:	38 34       	cpi	r19, 0x48	; 72
     174:	38 34       	cpi	r19, 0x48	; 72
     176:	38 34       	cpi	r19, 0x48	; 72
     178:	38 34       	cpi	r19, 0x48	; 72
     17a:	38 34       	cpi	r19, 0x48	; 72
     17c:	86 33       	cpi	r24, 0x36	; 54
     17e:	38 34       	cpi	r19, 0x48	; 72
     180:	38 34       	cpi	r19, 0x48	; 72
     182:	38 34       	cpi	r19, 0x48	; 72
     184:	38 34       	cpi	r19, 0x48	; 72
     186:	38 34       	cpi	r19, 0x48	; 72
     188:	38 34       	cpi	r19, 0x48	; 72
     18a:	38 34       	cpi	r19, 0x48	; 72
     18c:	97 33       	cpi	r25, 0x37	; 55
     18e:	38 34       	cpi	r19, 0x48	; 72
     190:	38 34       	cpi	r19, 0x48	; 72
     192:	38 34       	cpi	r19, 0x48	; 72
     194:	38 34       	cpi	r19, 0x48	; 72
     196:	38 34       	cpi	r19, 0x48	; 72
     198:	38 34       	cpi	r19, 0x48	; 72
     19a:	38 34       	cpi	r19, 0x48	; 72
     19c:	c0 33       	cpi	r28, 0x30	; 48
     19e:	38 34       	cpi	r19, 0x48	; 72
     1a0:	38 34       	cpi	r19, 0x48	; 72
     1a2:	38 34       	cpi	r19, 0x48	; 72
     1a4:	38 34       	cpi	r19, 0x48	; 72
     1a6:	38 34       	cpi	r19, 0x48	; 72
     1a8:	38 34       	cpi	r19, 0x48	; 72
     1aa:	38 34       	cpi	r19, 0x48	; 72
     1ac:	8b 33       	cpi	r24, 0x3B	; 59
     1ae:	38 34       	cpi	r19, 0x48	; 72
     1b0:	38 34       	cpi	r19, 0x48	; 72
     1b2:	38 34       	cpi	r19, 0x48	; 72
     1b4:	38 34       	cpi	r19, 0x48	; 72
     1b6:	38 34       	cpi	r19, 0x48	; 72
     1b8:	38 34       	cpi	r19, 0x48	; 72
     1ba:	38 34       	cpi	r19, 0x48	; 72
     1bc:	a5 33       	cpi	r26, 0x35	; 53
     1be:	38 34       	cpi	r19, 0x48	; 72
     1c0:	38 34       	cpi	r19, 0x48	; 72
     1c2:	38 34       	cpi	r19, 0x48	; 72
     1c4:	38 34       	cpi	r19, 0x48	; 72
     1c6:	38 34       	cpi	r19, 0x48	; 72
     1c8:	38 34       	cpi	r19, 0x48	; 72
     1ca:	38 34       	cpi	r19, 0x48	; 72
     1cc:	c2 33       	cpi	r28, 0x32	; 50
     1ce:	38 34       	cpi	r19, 0x48	; 72
     1d0:	38 34       	cpi	r19, 0x48	; 72
     1d2:	38 34       	cpi	r19, 0x48	; 72
     1d4:	38 34       	cpi	r19, 0x48	; 72
     1d6:	38 34       	cpi	r19, 0x48	; 72
     1d8:	38 34       	cpi	r19, 0x48	; 72
     1da:	38 34       	cpi	r19, 0x48	; 72
     1dc:	c2 33       	cpi	r28, 0x32	; 50
     1de:	38 34       	cpi	r19, 0x48	; 72
     1e0:	38 34       	cpi	r19, 0x48	; 72
     1e2:	38 34       	cpi	r19, 0x48	; 72
     1e4:	38 34       	cpi	r19, 0x48	; 72
     1e6:	38 34       	cpi	r19, 0x48	; 72
     1e8:	38 34       	cpi	r19, 0x48	; 72
     1ea:	38 34       	cpi	r19, 0x48	; 72
     1ec:	c2 33       	cpi	r28, 0x32	; 50
     1ee:	38 34       	cpi	r19, 0x48	; 72
     1f0:	38 34       	cpi	r19, 0x48	; 72
     1f2:	38 34       	cpi	r19, 0x48	; 72
     1f4:	38 34       	cpi	r19, 0x48	; 72
     1f6:	38 34       	cpi	r19, 0x48	; 72
     1f8:	38 34       	cpi	r19, 0x48	; 72
     1fa:	38 34       	cpi	r19, 0x48	; 72
     1fc:	c2 33       	cpi	r28, 0x32	; 50
     1fe:	38 34       	cpi	r19, 0x48	; 72
     200:	38 34       	cpi	r19, 0x48	; 72
     202:	38 34       	cpi	r19, 0x48	; 72
     204:	38 34       	cpi	r19, 0x48	; 72
     206:	38 34       	cpi	r19, 0x48	; 72
     208:	38 34       	cpi	r19, 0x48	; 72
     20a:	38 34       	cpi	r19, 0x48	; 72
     20c:	cb 33       	cpi	r28, 0x3B	; 59
     20e:	38 34       	cpi	r19, 0x48	; 72
     210:	38 34       	cpi	r19, 0x48	; 72
     212:	38 34       	cpi	r19, 0x48	; 72
     214:	38 34       	cpi	r19, 0x48	; 72
     216:	38 34       	cpi	r19, 0x48	; 72
     218:	38 34       	cpi	r19, 0x48	; 72
     21a:	38 34       	cpi	r19, 0x48	; 72
     21c:	fc 33       	cpi	r31, 0x3C	; 60
     21e:	38 34       	cpi	r19, 0x48	; 72
     220:	38 34       	cpi	r19, 0x48	; 72
     222:	38 34       	cpi	r19, 0x48	; 72
     224:	38 34       	cpi	r19, 0x48	; 72
     226:	38 34       	cpi	r19, 0x48	; 72
     228:	38 34       	cpi	r19, 0x48	; 72
     22a:	38 34       	cpi	r19, 0x48	; 72
     22c:	cb 33       	cpi	r28, 0x3B	; 59
     22e:	38 34       	cpi	r19, 0x48	; 72
     230:	38 34       	cpi	r19, 0x48	; 72
     232:	38 34       	cpi	r19, 0x48	; 72
     234:	38 34       	cpi	r19, 0x48	; 72
     236:	38 34       	cpi	r19, 0x48	; 72
     238:	38 34       	cpi	r19, 0x48	; 72
     23a:	38 34       	cpi	r19, 0x48	; 72
     23c:	fc 33       	cpi	r31, 0x3C	; 60
     23e:	38 34       	cpi	r19, 0x48	; 72
     240:	38 34       	cpi	r19, 0x48	; 72
     242:	38 34       	cpi	r19, 0x48	; 72
     244:	38 34       	cpi	r19, 0x48	; 72
     246:	38 34       	cpi	r19, 0x48	; 72
     248:	38 34       	cpi	r19, 0x48	; 72
     24a:	38 34       	cpi	r19, 0x48	; 72
     24c:	e3 33       	cpi	r30, 0x33	; 51
     24e:	38 34       	cpi	r19, 0x48	; 72
     250:	38 34       	cpi	r19, 0x48	; 72
     252:	38 34       	cpi	r19, 0x48	; 72
     254:	38 34       	cpi	r19, 0x48	; 72
     256:	38 34       	cpi	r19, 0x48	; 72
     258:	38 34       	cpi	r19, 0x48	; 72
     25a:	38 34       	cpi	r19, 0x48	; 72
     25c:	00 34       	cpi	r16, 0x40	; 64
     25e:	38 34       	cpi	r19, 0x48	; 72
     260:	38 34       	cpi	r19, 0x48	; 72
     262:	38 34       	cpi	r19, 0x48	; 72
     264:	38 34       	cpi	r19, 0x48	; 72
     266:	38 34       	cpi	r19, 0x48	; 72
     268:	38 34       	cpi	r19, 0x48	; 72
     26a:	38 34       	cpi	r19, 0x48	; 72
     26c:	00 34       	cpi	r16, 0x40	; 64
     26e:	38 34       	cpi	r19, 0x48	; 72
     270:	38 34       	cpi	r19, 0x48	; 72
     272:	38 34       	cpi	r19, 0x48	; 72
     274:	38 34       	cpi	r19, 0x48	; 72
     276:	38 34       	cpi	r19, 0x48	; 72
     278:	38 34       	cpi	r19, 0x48	; 72
     27a:	38 34       	cpi	r19, 0x48	; 72
     27c:	15 34       	cpi	r17, 0x45	; 69
     27e:	38 34       	cpi	r19, 0x48	; 72
     280:	38 34       	cpi	r19, 0x48	; 72
     282:	38 34       	cpi	r19, 0x48	; 72
     284:	38 34       	cpi	r19, 0x48	; 72
     286:	38 34       	cpi	r19, 0x48	; 72
     288:	38 34       	cpi	r19, 0x48	; 72
     28a:	38 34       	cpi	r19, 0x48	; 72
     28c:	2f 34       	cpi	r18, 0x4F	; 79
     28e:	38 34       	cpi	r19, 0x48	; 72
     290:	38 34       	cpi	r19, 0x48	; 72
     292:	38 34       	cpi	r19, 0x48	; 72
     294:	38 34       	cpi	r19, 0x48	; 72
     296:	38 34       	cpi	r19, 0x48	; 72
     298:	38 34       	cpi	r19, 0x48	; 72
     29a:	38 34       	cpi	r19, 0x48	; 72
     29c:	2f 34       	cpi	r18, 0x4F	; 79
     29e:	04 40       	sbci	r16, 0x04	; 4
     2a0:	08 40       	sbci	r16, 0x08	; 8
     2a2:	f2 3f       	cpi	r31, 0xF2	; 242
     2a4:	f8 3f       	cpi	r31, 0xF8	; 248
     2a6:	fe 3f       	cpi	r31, 0xFE	; 254
     2a8:	4d 40       	sbci	r20, 0x0D	; 13
     2aa:	0c 40       	sbci	r16, 0x0C	; 12
     2ac:	12 40       	sbci	r17, 0x02	; 2
     2ae:	18 40       	sbci	r17, 0x08	; 8
     2b0:	1e 40       	sbci	r17, 0x0E	; 14
     2b2:	24 40       	sbci	r18, 0x04	; 4
     2b4:	2a 40       	sbci	r18, 0x0A	; 10
     2b6:	30 40       	sbci	r19, 0x00	; 0
     2b8:	36 40       	sbci	r19, 0x06	; 6
     2ba:	4d 40       	sbci	r20, 0x0D	; 13
     2bc:	3c 40       	sbci	r19, 0x0C	; 12
     2be:	42 40       	sbci	r20, 0x02	; 2
     2c0:	48 40       	sbci	r20, 0x08	; 8

000002c2 <__trampolines_end>:
     2c2:	42 61       	ori	r20, 0x12	; 18
     2c4:	63 6b       	ori	r22, 0xB3	; 179
	...

000002c7 <_ZZ12MAIN_UI_initvE3__c>:
     2c7:	41 6c 61 72 6d 20 54 65 73 74 00                    Alarm Test.

000002d2 <_ZL21tone_pin_to_timer_PGM>:
     2d2:	02                                                  .

000002d3 <digital_pin_to_timer_PGM>:
     2d3:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
     2ff:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000319 <digital_pin_to_bit_mask_PGM>:
     319:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     329:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     339:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     349:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     359:	04 08 10 20 40 80                                   ... @.

0000035f <digital_pin_to_port_PGM>:
     35f:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     36f:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     37f:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     38f:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     39f:	0b 0b 0b 0b 0b 0b                                   ......

000003a5 <port_to_input_PGM>:
     3a5:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     3b5:	00 01 00 00 03 01 06 01 09 01                       ..........

000003bf <port_to_output_PGM>:
     3bf:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     3cf:	02 01 00 00 05 01 08 01 0b 01                       ..........

000003d9 <port_to_mode_PGM>:
     3d9:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     3e9:	01 01 00 00 04 01 07 01 0a 01 00                    ...........

000003f4 <__ctors_start>:
     3f4:	13 03       	mulsu	r17, r19
     3f6:	28 05       	cpc	r18, r8
     3f8:	4b 0a       	sbc	r4, r27
     3fa:	4e 0d       	add	r20, r14
     3fc:	53 0e       	add	r5, r19
     3fe:	1e 35       	cpi	r17, 0x5E	; 94
     400:	d9 35       	cpi	r29, 0x59	; 89
     402:	b7 37       	cpi	r27, 0x77	; 119
     404:	52 38       	cpi	r21, 0x82	; 130
     406:	ed 38       	cpi	r30, 0x8D	; 141
     408:	88 39       	cpi	r24, 0x98	; 152
     40a:	f5 39       	cpi	r31, 0x95	; 149

0000040c <__ctors_end>:
     40c:	3d 08       	sbc	r3, r13

0000040e <__dtors_end>:
     40e:	11 24       	eor	r1, r1
     410:	1f be       	out	0x3f, r1	; 63
     412:	cf ef       	ldi	r28, 0xFF	; 255
     414:	d1 e2       	ldi	r29, 0x21	; 33
     416:	de bf       	out	0x3e, r29	; 62
     418:	cd bf       	out	0x3d, r28	; 61
     41a:	00 e0       	ldi	r16, 0x00	; 0
     41c:	0c bf       	out	0x3c, r16	; 60

0000041e <__do_copy_data>:
     41e:	15 e0       	ldi	r17, 0x05	; 5
     420:	a0 e0       	ldi	r26, 0x00	; 0
     422:	b2 e0       	ldi	r27, 0x02	; 2
     424:	e6 e3       	ldi	r30, 0x36	; 54
     426:	fe e8       	ldi	r31, 0x8E	; 142
     428:	00 e0       	ldi	r16, 0x00	; 0
     42a:	0b bf       	out	0x3b, r16	; 59
     42c:	02 c0       	rjmp	.+4      	; 0x432 <__do_copy_data+0x14>
     42e:	07 90       	elpm	r0, Z+
     430:	0d 92       	st	X+, r0
     432:	ae 3e       	cpi	r26, 0xEE	; 238
     434:	b1 07       	cpc	r27, r17
     436:	d9 f7       	brne	.-10     	; 0x42e <__do_copy_data+0x10>

00000438 <__do_clear_bss>:
     438:	2b e0       	ldi	r18, 0x0B	; 11
     43a:	ae ee       	ldi	r26, 0xEE	; 238
     43c:	b5 e0       	ldi	r27, 0x05	; 5
     43e:	01 c0       	rjmp	.+2      	; 0x442 <.do_clear_bss_start>

00000440 <.do_clear_bss_loop>:
     440:	1d 92       	st	X+, r1

00000442 <.do_clear_bss_start>:
     442:	a0 32       	cpi	r26, 0x20	; 32
     444:	b2 07       	cpc	r27, r18
     446:	e1 f7       	brne	.-8      	; 0x440 <.do_clear_bss_loop>

00000448 <__do_global_ctors>:
     448:	11 e0       	ldi	r17, 0x01	; 1
     44a:	c6 e0       	ldi	r28, 0x06	; 6
     44c:	d2 e0       	ldi	r29, 0x02	; 2
     44e:	00 e0       	ldi	r16, 0x00	; 0
     450:	06 c0       	rjmp	.+12     	; 0x45e <__do_global_ctors+0x16>
     452:	21 97       	sbiw	r28, 0x01	; 1
     454:	01 09       	sbc	r16, r1
     456:	80 2f       	mov	r24, r16
     458:	fe 01       	movw	r30, r28
     45a:	0e 94 b0 44 	call	0x8960	; 0x8960 <__tablejump2__>
     45e:	ca 3f       	cpi	r28, 0xFA	; 250
     460:	d1 07       	cpc	r29, r17
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	08 07       	cpc	r16, r24
     466:	a9 f7       	brne	.-22     	; 0x452 <__do_global_ctors+0xa>
     468:	0e 94 01 3a 	call	0x7402	; 0x7402 <main>
     46c:	0c 94 0a 47 	jmp	0x8e14	; 0x8e14 <__do_global_dtors>

00000470 <__bad_interrupt>:
     470:	c7 cd       	rjmp	.-1138   	; 0x0 <__vectors>

00000472 <_Z10BK_UI_initv>:

#include "BK_UI.h"

EZUI *BK_UI = new EZUI("BK");

void BK_UI_init(){
     472:	af 92       	push	r10
     474:	bf 92       	push	r11
     476:	cf 92       	push	r12
     478:	df 92       	push	r13
     47a:	ef 92       	push	r14
     47c:	ff 92       	push	r15
     47e:	0f 93       	push	r16
     480:	1f 93       	push	r17
     482:	cf 93       	push	r28
     484:	df 93       	push	r29
     486:	cd b7       	in	r28, 0x3d	; 61
     488:	de b7       	in	r29, 0x3e	; 62
     48a:	a4 97       	sbiw	r28, 0x24	; 36
     48c:	0f b6       	in	r0, 0x3f	; 63
     48e:	f8 94       	cli
     490:	de bf       	out	0x3e, r29	; 62
     492:	0f be       	out	0x3f, r0	; 63
     494:	cd bf       	out	0x3d, r28	; 61
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.print("Initializing UI - " + BK_UI->Name + "...");
     496:	00 91 ee 05 	lds	r16, 0x05EE
     49a:	10 91 ef 05 	lds	r17, 0x05EF
     49e:	0c 5f       	subi	r16, 0xFC	; 252
     4a0:	1f 4f       	sbci	r17, 0xFF	; 255

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
     4a2:	69 e9       	ldi	r22, 0x99	; 153
     4a4:	72 e0       	ldi	r23, 0x02	; 2
     4a6:	ce 01       	movw	r24, r28
     4a8:	4f 96       	adiw	r24, 0x1f	; 31
     4aa:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
     4ae:	b8 01       	movw	r22, r16
     4b0:	ce 01       	movw	r24, r28
     4b2:	4f 96       	adiw	r24, 0x1f	; 31
     4b4:	0e 94 ee 41 	call	0x83dc	; 0x83dc <_ZplRK15StringSumHelperRK6String>
     4b8:	68 e6       	ldi	r22, 0x68	; 104
     4ba:	74 e0       	ldi	r23, 0x04	; 4
     4bc:	0e 94 ff 41 	call	0x83fe	; 0x83fe <_ZplRK15StringSumHelperPKc>
     4c0:	bc 01       	movw	r22, r24
     4c2:	82 e8       	ldi	r24, 0x82	; 130
     4c4:	98 e0       	ldi	r25, 0x08	; 8
     4c6:	0e 94 3e 3a 	call	0x747c	; 0x747c <_ZN5Print5printERK6String>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
     4ca:	ce 01       	movw	r24, r28
     4cc:	4f 96       	adiw	r24, 0x1f	; 31
     4ce:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
	#endif
	
	/***************************************
	  Setup + Initialization
	***************************************/
	BK_UI->attatchEncoder(BK_ENC);
     4d2:	60 91 f0 05 	lds	r22, 0x05F0
     4d6:	70 91 f1 05 	lds	r23, 0x05F1
     4da:	80 91 ee 05 	lds	r24, 0x05EE
     4de:	90 91 ef 05 	lds	r25, 0x05EF
     4e2:	0e 94 9e 28 	call	0x513c	; 0x513c <_ZN4EZUI14attatchEncoderEP22ClickEncoderWithEvents>
	BK_UI->attatchLCD(&BK_LCD);
     4e6:	62 ef       	ldi	r22, 0xF2	; 242
     4e8:	75 e0       	ldi	r23, 0x05	; 5
     4ea:	80 91 ee 05 	lds	r24, 0x05EE
     4ee:	90 91 ef 05 	lds	r25, 0x05EF
     4f2:	0e 94 d4 28 	call	0x51a8	; 0x51a8 <_ZN4EZUI10attatchLCDEP17LiquidCrystal_I2C>
	
	EZUI_Menu * MainMenu = new EZUI_Menu("BK-Main-Menu");
     4f6:	6c ea       	ldi	r22, 0xAC	; 172
     4f8:	72 e0       	ldi	r23, 0x02	; 2
     4fa:	ce 01       	movw	r24, r28
     4fc:	49 96       	adiw	r24, 0x19	; 25
     4fe:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
     502:	8d e1       	ldi	r24, 0x1D	; 29
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
     50a:	8c 01       	movw	r16, r24
     50c:	be 01       	movw	r22, r28
     50e:	67 5e       	subi	r22, 0xE7	; 231
     510:	7f 4f       	sbci	r23, 0xFF	; 255
     512:	0e 94 64 10 	call	0x20c8	; 0x20c8 <_ZN9EZUI_MenuC1E6String>
     516:	ce 01       	movw	r24, r28
     518:	49 96       	adiw	r24, 0x19	; 25
     51a:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
	
	EZUI_Page * TestPage = new EZUI_Page((String)("TestPage"));
     51e:	69 eb       	ldi	r22, 0xB9	; 185
     520:	72 e0       	ldi	r23, 0x02	; 2
     522:	ce 01       	movw	r24, r28
     524:	43 96       	adiw	r24, 0x13	; 19
     526:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
     52a:	8e e2       	ldi	r24, 0x2E	; 46
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
     532:	7c 01       	movw	r14, r24
     534:	be 01       	movw	r22, r28
     536:	6d 5e       	subi	r22, 0xED	; 237
     538:	7f 4f       	sbci	r23, 0xFF	; 255
     53a:	0e 94 21 1a 	call	0x3442	; 0x3442 <_ZN9EZUI_PageC1E6String>
     53e:	ce 01       	movw	r24, r28
     540:	43 96       	adiw	r24, 0x13	; 19
     542:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
	TestPage->addItem(new EZUI_PageItem(0,3,new EZUI_Control_Link("Back",MainMenu)));
     546:	62 ec       	ldi	r22, 0xC2	; 194
     548:	72 e0       	ldi	r23, 0x02	; 2
     54a:	ce 01       	movw	r24, r28
     54c:	0d 96       	adiw	r24, 0x0d	; 13
     54e:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
     552:	8a e0       	ldi	r24, 0x0A	; 10
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
     55a:	5c 01       	movw	r10, r24
     55c:	a8 01       	movw	r20, r16
     55e:	be 01       	movw	r22, r28
     560:	63 5f       	subi	r22, 0xF3	; 243
     562:	7f 4f       	sbci	r23, 0xFF	; 255
     564:	0e d1       	rcall	.+540    	; 0x782 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Menu>
     566:	8e e3       	ldi	r24, 0x3E	; 62
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
     56e:	6c 01       	movw	r12, r24
     570:	95 01       	movw	r18, r10
     572:	43 e0       	ldi	r20, 0x03	; 3
     574:	60 e0       	ldi	r22, 0x00	; 0
     576:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <_ZN13EZUI_PageItemC1EhhP17EZUI_Control_Link>
     57a:	b6 01       	movw	r22, r12
     57c:	c7 01       	movw	r24, r14
     57e:	0e 94 6d 1a 	call	0x34da	; 0x34da <_ZN9EZUI_Page7addItemEP13EZUI_PageItem>
     582:	ce 01       	movw	r24, r28
     584:	0d 96       	adiw	r24, 0x0d	; 13
     586:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
	
	MainMenu->addItem(new EZUI_Control_Link("TestPage",TestPage));
     58a:	69 eb       	ldi	r22, 0xB9	; 185
     58c:	72 e0       	ldi	r23, 0x02	; 2
     58e:	ce 01       	movw	r24, r28
     590:	07 96       	adiw	r24, 0x07	; 7
     592:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
     596:	8a e0       	ldi	r24, 0x0A	; 10
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
     59e:	6c 01       	movw	r12, r24
     5a0:	a7 01       	movw	r20, r14
     5a2:	be 01       	movw	r22, r28
     5a4:	69 5f       	subi	r22, 0xF9	; 249
     5a6:	7f 4f       	sbci	r23, 0xFF	; 255
     5a8:	0c d1       	rcall	.+536    	; 0x7c2 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Page>
     5aa:	b6 01       	movw	r22, r12
     5ac:	c8 01       	movw	r24, r16
     5ae:	0e 94 92 10 	call	0x2124	; 0x2124 <_ZN9EZUI_Menu7addItemEP17EZUI_Control_Link>
     5b2:	ce 01       	movw	r24, r28
     5b4:	07 96       	adiw	r24, 0x07	; 7
     5b6:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
	MainMenu->addItem(new EZUI_Control_Link("Test2",MainMenu));
     5ba:	67 ec       	ldi	r22, 0xC7	; 199
     5bc:	72 e0       	ldi	r23, 0x02	; 2
     5be:	ce 01       	movw	r24, r28
     5c0:	01 96       	adiw	r24, 0x01	; 1
     5c2:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
     5c6:	8a e0       	ldi	r24, 0x0A	; 10
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
     5ce:	7c 01       	movw	r14, r24
     5d0:	a8 01       	movw	r20, r16
     5d2:	be 01       	movw	r22, r28
     5d4:	6f 5f       	subi	r22, 0xFF	; 255
     5d6:	7f 4f       	sbci	r23, 0xFF	; 255
     5d8:	d4 d0       	rcall	.+424    	; 0x782 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Menu>
     5da:	b7 01       	movw	r22, r14
     5dc:	c8 01       	movw	r24, r16
     5de:	0e 94 92 10 	call	0x2124	; 0x2124 <_ZN9EZUI_Menu7addItemEP17EZUI_Control_Link>
     5e2:	ce 01       	movw	r24, r28
     5e4:	01 96       	adiw	r24, 0x01	; 1
     5e6:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
	***************************************/
	
	/***************************************
	  BK Menu
	***************************************/
	BK_UI->setDisplay(MainMenu);
     5ea:	b8 01       	movw	r22, r16
     5ec:	80 91 ee 05 	lds	r24, 0x05EE
     5f0:	90 91 ef 05 	lds	r25, 0x05EF
     5f4:	0e 94 28 29 	call	0x5250	; 0x5250 <_ZN4EZUI10setDisplayEP9EZUI_Menu>
	
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.println("Done.");
     5f8:	6d ec       	ldi	r22, 0xCD	; 205
     5fa:	72 e0       	ldi	r23, 0x02	; 2
     5fc:	82 e8       	ldi	r24, 0x82	; 130
     5fe:	98 e0       	ldi	r25, 0x08	; 8
     600:	0e 94 87 3a 	call	0x750e	; 0x750e <_ZN5Print7printlnEPKc>
	#endif
}
     604:	a4 96       	adiw	r28, 0x24	; 36
     606:	0f b6       	in	r0, 0x3f	; 63
     608:	f8 94       	cli
     60a:	de bf       	out	0x3e, r29	; 62
     60c:	0f be       	out	0x3f, r0	; 63
     60e:	cd bf       	out	0x3d, r28	; 61
     610:	df 91       	pop	r29
     612:	cf 91       	pop	r28
     614:	1f 91       	pop	r17
     616:	0f 91       	pop	r16
     618:	ff 90       	pop	r15
     61a:	ef 90       	pop	r14
     61c:	df 90       	pop	r13
     61e:	cf 90       	pop	r12
     620:	bf 90       	pop	r11
     622:	af 90       	pop	r10
     624:	08 95       	ret

00000626 <_GLOBAL__sub_I_BK_UI>:
     626:	0f 93       	push	r16
     628:	1f 93       	push	r17
     62a:	cf 93       	push	r28
     62c:	df 93       	push	r29
     62e:	00 d0       	rcall	.+0      	; 0x630 <_GLOBAL__sub_I_BK_UI+0xa>
     630:	00 d0       	rcall	.+0      	; 0x632 <_GLOBAL__sub_I_BK_UI+0xc>
     632:	cd b7       	in	r28, 0x3d	; 61
     634:	de b7       	in	r29, 0x3e	; 62
 * ----------------------------------------------------------------
 */

#include "BK_UI.h"

EZUI *BK_UI = new EZUI("BK");
     636:	63 ed       	ldi	r22, 0xD3	; 211
     638:	72 e0       	ldi	r23, 0x02	; 2
     63a:	ce 01       	movw	r24, r28
     63c:	01 96       	adiw	r24, 0x01	; 1
     63e:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
     642:	86 e1       	ldi	r24, 0x16	; 22
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
     64a:	8c 01       	movw	r16, r24
     64c:	be 01       	movw	r22, r28
     64e:	6f 5f       	subi	r22, 0xFF	; 255
     650:	7f 4f       	sbci	r23, 0xFF	; 255
     652:	0e 94 7b 28 	call	0x50f6	; 0x50f6 <_ZN4EZUIC1E6String>
     656:	10 93 ef 05 	sts	0x05EF, r17
     65a:	00 93 ee 05 	sts	0x05EE, r16
     65e:	ce 01       	movw	r24, r28
     660:	01 96       	adiw	r24, 0x01	; 1
     662:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
	BK_UI->setDisplay(MainMenu);
	
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.println("Done.");
	#endif
}
     666:	26 96       	adiw	r28, 0x06	; 6
     668:	0f b6       	in	r0, 0x3f	; 63
     66a:	f8 94       	cli
     66c:	de bf       	out	0x3e, r29	; 62
     66e:	0f be       	out	0x3f, r0	; 63
     670:	cd bf       	out	0x3d, r28	; 61
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	1f 91       	pop	r17
     678:	0f 91       	pop	r16
     67a:	08 95       	ret

0000067c <_ZN9DigitalIOD1Ev>:
}
	
DigitalIO::DigitalIO(int _Pin, DigitalIO::PinModes _Mode){
	Pin = _Pin;
	Mode = _Mode;
}
     67c:	cf 93       	push	r28
     67e:	df 93       	push	r29
     680:	ec 01       	movw	r28, r24
     682:	09 96       	adiw	r24, 0x09	; 9
     684:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
     688:	ce 01       	movw	r24, r28
     68a:	03 96       	adiw	r24, 0x03	; 3
     68c:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	08 95       	ret

00000696 <_ZN9DigitalIO5ValueEv>:
     696:	cf 93       	push	r28
     698:	df 93       	push	r29
     69a:	ec 01       	movw	r28, r24
     69c:	8a 81       	ldd	r24, Y+2	; 0x02
     69e:	88 23       	and	r24, r24
     6a0:	19 f0       	breq	.+6      	; 0x6a8 <_ZN9DigitalIO5ValueEv+0x12>
     6a2:	82 30       	cpi	r24, 0x02	; 2
     6a4:	39 f0       	breq	.+14     	; 0x6b4 <_ZN9DigitalIO5ValueEv+0x1e>
     6a6:	0b c0       	rjmp	.+22     	; 0x6be <_ZN9DigitalIO5ValueEv+0x28>
     6a8:	88 81       	ld	r24, Y
     6aa:	0e 94 bd 40 	call	0x817a	; 0x817a <digitalRead>
     6ae:	98 8b       	std	Y+16, r25	; 0x10
     6b0:	8f 87       	std	Y+15, r24	; 0x0f
     6b2:	05 c0       	rjmp	.+10     	; 0x6be <_ZN9DigitalIO5ValueEv+0x28>
     6b4:	88 81       	ld	r24, Y
     6b6:	0e 94 bd 40 	call	0x817a	; 0x817a <digitalRead>
     6ba:	98 8b       	std	Y+16, r25	; 0x10
     6bc:	8f 87       	std	Y+15, r24	; 0x0f
     6be:	8f 85       	ldd	r24, Y+15	; 0x0f
     6c0:	98 89       	ldd	r25, Y+16	; 0x10
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	08 95       	ret

000006c8 <_ZN9DigitalIO5WriteEi>:
     6c8:	0f 93       	push	r16
     6ca:	1f 93       	push	r17
     6cc:	cf 93       	push	r28
     6ce:	df 93       	push	r29
     6d0:	ec 01       	movw	r28, r24
     6d2:	8b 01       	movw	r16, r22
     6d4:	8a 81       	ldd	r24, Y+2	; 0x02
     6d6:	81 30       	cpi	r24, 0x01	; 1
     6d8:	21 f0       	breq	.+8      	; 0x6e2 <_ZN9DigitalIO5WriteEi+0x1a>
     6da:	61 e0       	ldi	r22, 0x01	; 1
     6dc:	88 81       	ld	r24, Y
     6de:	0e 94 4e 40 	call	0x809c	; 0x809c <pinMode>
     6e2:	18 8b       	std	Y+16, r17	; 0x10
     6e4:	0f 87       	std	Y+15, r16	; 0x0f
     6e6:	61 e0       	ldi	r22, 0x01	; 1
     6e8:	88 81       	ld	r24, Y
     6ea:	0e 94 4e 40 	call	0x809c	; 0x809c <pinMode>
     6ee:	6f 85       	ldd	r22, Y+15	; 0x0f
     6f0:	88 81       	ld	r24, Y
     6f2:	0e 94 8d 40 	call	0x811a	; 0x811a <digitalWrite>
     6f6:	df 91       	pop	r29
     6f8:	cf 91       	pop	r28
     6fa:	1f 91       	pop	r17
     6fc:	0f 91       	pop	r16
     6fe:	08 95       	ret

00000700 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>:

DigitalIO::DigitalIO(int _Pin, DigitalIO::PinModes _Mode, String _TrueLabel, String _FalseLabel){
     700:	7f 92       	push	r7
     702:	8f 92       	push	r8
     704:	9f 92       	push	r9
     706:	af 92       	push	r10
     708:	bf 92       	push	r11
     70a:	cf 92       	push	r12
     70c:	df 92       	push	r13
     70e:	ef 92       	push	r14
     710:	ff 92       	push	r15
     712:	0f 93       	push	r16
     714:	1f 93       	push	r17
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	ec 01       	movw	r28, r24
     71c:	5b 01       	movw	r10, r22
     71e:	74 2e       	mov	r7, r20
     720:	69 01       	movw	r12, r18
     722:	48 01       	movw	r8, r16
     724:	8f ef       	ldi	r24, 0xFF	; 255
     726:	9f ef       	ldi	r25, 0xFF	; 255
     728:	99 83       	std	Y+1, r25	; 0x01
     72a:	88 83       	st	Y, r24
     72c:	1a 82       	std	Y+2, r1	; 0x02
     72e:	7e 01       	movw	r14, r28
     730:	83 e0       	ldi	r24, 0x03	; 3
     732:	e8 0e       	add	r14, r24
     734:	f1 1c       	adc	r15, r1
     736:	66 ed       	ldi	r22, 0xD6	; 214
     738:	72 e0       	ldi	r23, 0x02	; 2
     73a:	c7 01       	movw	r24, r14
     73c:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
     740:	8e 01       	movw	r16, r28
     742:	07 5f       	subi	r16, 0xF7	; 247
     744:	1f 4f       	sbci	r17, 0xFF	; 255
     746:	6b ed       	ldi	r22, 0xDB	; 219
     748:	72 e0       	ldi	r23, 0x02	; 2
     74a:	c8 01       	movw	r24, r16
     74c:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
	Pin = _Pin;
     750:	b9 82       	std	Y+1, r11	; 0x01
     752:	a8 82       	st	Y, r10
	Mode = _Mode;
     754:	7a 82       	std	Y+2, r7	; 0x02
	TrueLabel = _TrueLabel;
     756:	b6 01       	movw	r22, r12
     758:	c7 01       	movw	r24, r14
     75a:	0e 94 83 41 	call	0x8306	; 0x8306 <_ZN6StringaSERKS_>
	FalseLabel = _FalseLabel;
     75e:	b4 01       	movw	r22, r8
     760:	c8 01       	movw	r24, r16
     762:	0e 94 83 41 	call	0x8306	; 0x8306 <_ZN6StringaSERKS_>
}
     766:	df 91       	pop	r29
     768:	cf 91       	pop	r28
     76a:	1f 91       	pop	r17
     76c:	0f 91       	pop	r16
     76e:	ff 90       	pop	r15
     770:	ef 90       	pop	r14
     772:	df 90       	pop	r13
     774:	cf 90       	pop	r12
     776:	bf 90       	pop	r11
     778:	af 90       	pop	r10
     77a:	9f 90       	pop	r9
     77c:	8f 90       	pop	r8
     77e:	7f 90       	pop	r7
     780:	08 95       	ret

00000782 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Menu>:
	PageRef = PageLink;
	MenuRef = NULL;
} //EZUI_Control_Link

// default destructor
EZUI_Control_Link::~EZUI_Control_Link()
     782:	ef 92       	push	r14
     784:	ff 92       	push	r15
     786:	0f 93       	push	r16
     788:	1f 93       	push	r17
     78a:	cf 93       	push	r28
     78c:	df 93       	push	r29
     78e:	ec 01       	movw	r28, r24
     790:	7b 01       	movw	r14, r22
     792:	8a 01       	movw	r16, r20
     794:	60 ee       	ldi	r22, 0xE0	; 224
     796:	75 e0       	ldi	r23, 0x05	; 5
     798:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
     79c:	1f 82       	std	Y+7, r1	; 0x07
     79e:	1e 82       	std	Y+6, r1	; 0x06
     7a0:	19 86       	std	Y+9, r1	; 0x09
     7a2:	18 86       	std	Y+8, r1	; 0x08
     7a4:	b7 01       	movw	r22, r14
     7a6:	ce 01       	movw	r24, r28
     7a8:	0e 94 83 41 	call	0x8306	; 0x8306 <_ZN6StringaSERKS_>
     7ac:	19 86       	std	Y+9, r1	; 0x09
     7ae:	18 86       	std	Y+8, r1	; 0x08
     7b0:	1f 83       	std	Y+7, r17	; 0x07
     7b2:	0e 83       	std	Y+6, r16	; 0x06
     7b4:	df 91       	pop	r29
     7b6:	cf 91       	pop	r28
     7b8:	1f 91       	pop	r17
     7ba:	0f 91       	pop	r16
     7bc:	ff 90       	pop	r15
     7be:	ef 90       	pop	r14
     7c0:	08 95       	ret

000007c2 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Page>:
     7c2:	ef 92       	push	r14
     7c4:	ff 92       	push	r15
     7c6:	0f 93       	push	r16
     7c8:	1f 93       	push	r17
     7ca:	cf 93       	push	r28
     7cc:	df 93       	push	r29
     7ce:	ec 01       	movw	r28, r24
     7d0:	7b 01       	movw	r14, r22
     7d2:	8a 01       	movw	r16, r20
     7d4:	60 ee       	ldi	r22, 0xE0	; 224
     7d6:	75 e0       	ldi	r23, 0x05	; 5
     7d8:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
     7dc:	1f 82       	std	Y+7, r1	; 0x07
     7de:	1e 82       	std	Y+6, r1	; 0x06
     7e0:	19 86       	std	Y+9, r1	; 0x09
     7e2:	18 86       	std	Y+8, r1	; 0x08
     7e4:	b7 01       	movw	r22, r14
     7e6:	ce 01       	movw	r24, r28
     7e8:	0e 94 83 41 	call	0x8306	; 0x8306 <_ZN6StringaSERKS_>
     7ec:	19 87       	std	Y+9, r17	; 0x09
     7ee:	08 87       	std	Y+8, r16	; 0x08
     7f0:	1f 82       	std	Y+7, r1	; 0x07
     7f2:	1e 82       	std	Y+6, r1	; 0x06
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	1f 91       	pop	r17
     7fa:	0f 91       	pop	r16
     7fc:	ff 90       	pop	r15
     7fe:	ef 90       	pop	r14
     800:	08 95       	ret

00000802 <_ZN17EZUI_Control_Link10FollowLinkEP4EZUI>:
{
} //~EZUI_Control_Link


void EZUI_Control_Link::FollowLink(EZUI *UI){
     802:	fc 01       	movw	r30, r24
     804:	cb 01       	movw	r24, r22
	if (!(PageRef == NULL)){
     806:	60 85       	ldd	r22, Z+8	; 0x08
     808:	71 85       	ldd	r23, Z+9	; 0x09
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	19 f0       	breq	.+6      	; 0x816 <_ZN17EZUI_Control_Link10FollowLinkEP4EZUI+0x14>
		UI->setDisplay(PageRef);
     810:	0c 94 2e 29 	jmp	0x525c	; 0x525c <_ZN4EZUI10setDisplayEP9EZUI_Page>
     814:	08 95       	ret
	}else if (!(MenuRef == NULL)){
     816:	66 81       	ldd	r22, Z+6	; 0x06
     818:	77 81       	ldd	r23, Z+7	; 0x07
     81a:	61 15       	cp	r22, r1
     81c:	71 05       	cpc	r23, r1
     81e:	11 f0       	breq	.+4      	; 0x824 <_ZN17EZUI_Control_Link10FollowLinkEP4EZUI+0x22>
		UI->setDisplay(MenuRef);
     820:	0c 94 28 29 	jmp	0x5250	; 0x5250 <_ZN4EZUI10setDisplayEP9EZUI_Menu>
     824:	08 95       	ret

00000826 <_ZN25EZUI_Control_ToggleOptionD1Ev>:
		case(StaticBool):
			BlnVal=_value;
			break;
		case(VarBool):
			*BlnRef = _value;
			BlnVal = *BlnRef;
     826:	cf 93       	push	r28
     828:	df 93       	push	r29
     82a:	ec 01       	movw	r28, r24
     82c:	0d 96       	adiw	r24, 0x0d	; 13
     82e:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
     832:	ce 01       	movw	r24, r28
     834:	07 96       	adiw	r24, 0x07	; 7
     836:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
     83a:	ce 01       	movw	r24, r28
     83c:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
     840:	df 91       	pop	r29
     842:	cf 91       	pop	r28
     844:	08 95       	ret

00000846 <_ZN25EZUI_Control_ToggleOption9TrueLabelEv>:
     846:	cf 93       	push	r28
     848:	df 93       	push	r29
     84a:	ec 01       	movw	r28, r24
     84c:	fb 01       	movw	r30, r22
     84e:	86 81       	ldd	r24, Z+6	; 0x06
     850:	81 30       	cpi	r24, 0x01	; 1
     852:	69 f0       	breq	.+26     	; 0x86e <_ZN25EZUI_Control_ToggleOption9TrueLabelEv+0x28>
     854:	18 f0       	brcs	.+6      	; 0x85c <_ZN25EZUI_Control_ToggleOption9TrueLabelEv+0x16>
     856:	82 30       	cpi	r24, 0x02	; 2
     858:	81 f0       	breq	.+32     	; 0x87a <_ZN25EZUI_Control_ToggleOption9TrueLabelEv+0x34>
     85a:	15 c0       	rjmp	.+42     	; 0x886 <_ZN25EZUI_Control_ToggleOption9TrueLabelEv+0x40>
     85c:	fb 01       	movw	r30, r22
     85e:	66 89       	ldd	r22, Z+22	; 0x16
     860:	77 89       	ldd	r23, Z+23	; 0x17
     862:	6d 5f       	subi	r22, 0xFD	; 253
     864:	7f 4f       	sbci	r23, 0xFF	; 255
     866:	ce 01       	movw	r24, r28
     868:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
     86c:	0c c0       	rjmp	.+24     	; 0x886 <_ZN25EZUI_Control_ToggleOption9TrueLabelEv+0x40>
     86e:	69 5f       	subi	r22, 0xF9	; 249
     870:	7f 4f       	sbci	r23, 0xFF	; 255
     872:	ce 01       	movw	r24, r28
     874:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
     878:	06 c0       	rjmp	.+12     	; 0x886 <_ZN25EZUI_Control_ToggleOption9TrueLabelEv+0x40>
     87a:	69 5f       	subi	r22, 0xF9	; 249
     87c:	7f 4f       	sbci	r23, 0xFF	; 255
     87e:	ce 01       	movw	r24, r28
     880:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
     884:	00 c0       	rjmp	.+0      	; 0x886 <_ZN25EZUI_Control_ToggleOption9TrueLabelEv+0x40>
     886:	ce 01       	movw	r24, r28
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	08 95       	ret

0000088e <_ZN25EZUI_Control_ToggleOption10FalseLabelEv>:
     88e:	cf 93       	push	r28
     890:	df 93       	push	r29
     892:	ec 01       	movw	r28, r24
     894:	fb 01       	movw	r30, r22
     896:	86 81       	ldd	r24, Z+6	; 0x06
     898:	81 30       	cpi	r24, 0x01	; 1
     89a:	69 f0       	breq	.+26     	; 0x8b6 <_ZN25EZUI_Control_ToggleOption10FalseLabelEv+0x28>
     89c:	18 f0       	brcs	.+6      	; 0x8a4 <_ZN25EZUI_Control_ToggleOption10FalseLabelEv+0x16>
     89e:	82 30       	cpi	r24, 0x02	; 2
     8a0:	81 f0       	breq	.+32     	; 0x8c2 <_ZN25EZUI_Control_ToggleOption10FalseLabelEv+0x34>
     8a2:	15 c0       	rjmp	.+42     	; 0x8ce <_ZN25EZUI_Control_ToggleOption10FalseLabelEv+0x40>
     8a4:	fb 01       	movw	r30, r22
     8a6:	66 89       	ldd	r22, Z+22	; 0x16
     8a8:	77 89       	ldd	r23, Z+23	; 0x17
     8aa:	67 5f       	subi	r22, 0xF7	; 247
     8ac:	7f 4f       	sbci	r23, 0xFF	; 255
     8ae:	ce 01       	movw	r24, r28
     8b0:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
     8b4:	0c c0       	rjmp	.+24     	; 0x8ce <_ZN25EZUI_Control_ToggleOption10FalseLabelEv+0x40>
     8b6:	63 5f       	subi	r22, 0xF3	; 243
     8b8:	7f 4f       	sbci	r23, 0xFF	; 255
     8ba:	ce 01       	movw	r24, r28
     8bc:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
     8c0:	06 c0       	rjmp	.+12     	; 0x8ce <_ZN25EZUI_Control_ToggleOption10FalseLabelEv+0x40>
     8c2:	63 5f       	subi	r22, 0xF3	; 243
     8c4:	7f 4f       	sbci	r23, 0xFF	; 255
     8c6:	ce 01       	movw	r24, r28
     8c8:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
     8cc:	00 c0       	rjmp	.+0      	; 0x8ce <_ZN25EZUI_Control_ToggleOption10FalseLabelEv+0x40>
     8ce:	ce 01       	movw	r24, r28
     8d0:	df 91       	pop	r29
     8d2:	cf 91       	pop	r28
     8d4:	08 95       	ret

000008d6 <_ZN25EZUI_Control_ToggleOption5ValueEv>:
     8d6:	dc 01       	movw	r26, r24
     8d8:	16 96       	adiw	r26, 0x06	; 6
     8da:	2c 91       	ld	r18, X
     8dc:	21 30       	cpi	r18, 0x01	; 1
     8de:	51 f0       	breq	.+20     	; 0x8f4 <_ZN25EZUI_Control_ToggleOption5ValueEv+0x1e>
     8e0:	18 f0       	brcs	.+6      	; 0x8e8 <_ZN25EZUI_Control_ToggleOption5ValueEv+0x12>
     8e2:	22 30       	cpi	r18, 0x02	; 2
     8e4:	59 f0       	breq	.+22     	; 0x8fc <_ZN25EZUI_Control_ToggleOption5ValueEv+0x26>
     8e6:	14 c0       	rjmp	.+40     	; 0x910 <_ZN25EZUI_Control_ToggleOption5ValueEv+0x3a>
     8e8:	fc 01       	movw	r30, r24
     8ea:	86 89       	ldd	r24, Z+22	; 0x16
     8ec:	97 89       	ldd	r25, Z+23	; 0x17
     8ee:	d3 de       	rcall	.-602    	; 0x696 <_ZN9DigitalIO5ValueEv>
     8f0:	9c 01       	movw	r18, r24
     8f2:	0f c0       	rjmp	.+30     	; 0x912 <_ZN25EZUI_Control_ToggleOption5ValueEv+0x3c>
     8f4:	fc 01       	movw	r30, r24
     8f6:	23 89       	ldd	r18, Z+19	; 0x13
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	0b c0       	rjmp	.+22     	; 0x912 <_ZN25EZUI_Control_ToggleOption5ValueEv+0x3c>
     8fc:	dc 01       	movw	r26, r24
     8fe:	54 96       	adiw	r26, 0x14	; 20
     900:	ed 91       	ld	r30, X+
     902:	fc 91       	ld	r31, X
     904:	55 97       	sbiw	r26, 0x15	; 21
     906:	20 81       	ld	r18, Z
     908:	53 96       	adiw	r26, 0x13	; 19
     90a:	2c 93       	st	X, r18
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	01 c0       	rjmp	.+2      	; 0x912 <_ZN25EZUI_Control_ToggleOption5ValueEv+0x3c>
     910:	08 95       	ret
     912:	82 2f       	mov	r24, r18
     914:	93 2f       	mov	r25, r19
     916:	08 95       	ret

00000918 <_ZN25EZUI_Control_ToggleOption6ToggleEv>:
			break;
	}
}

void EZUI_Control_ToggleOption::Toggle(void){
     918:	cf 93       	push	r28
     91a:	df 93       	push	r29
     91c:	fc 01       	movw	r30, r24
	switch(Type){
     91e:	86 81       	ldd	r24, Z+6	; 0x06
     920:	81 30       	cpi	r24, 0x01	; 1
     922:	a1 f0       	breq	.+40     	; 0x94c <_ZN25EZUI_Control_ToggleOption6ToggleEv+0x34>
     924:	18 f0       	brcs	.+6      	; 0x92c <_ZN25EZUI_Control_ToggleOption6ToggleEv+0x14>
     926:	82 30       	cpi	r24, 0x02	; 2
     928:	b1 f0       	breq	.+44     	; 0x956 <_ZN25EZUI_Control_ToggleOption6ToggleEv+0x3e>
     92a:	1f c0       	rjmp	.+62     	; 0x96a <_ZN25EZUI_Control_ToggleOption6ToggleEv+0x52>
		case(VarDigIO):
			DigitalIO *DIO;
			DIO = DIORef;
     92c:	c6 89       	ldd	r28, Z+22	; 0x16
     92e:	d7 89       	ldd	r29, Z+23	; 0x17
			if ((*DIO).Value()){
     930:	ce 01       	movw	r24, r28
     932:	b1 de       	rcall	.-670    	; 0x696 <_ZN9DigitalIO5ValueEv>
     934:	89 2b       	or	r24, r25
     936:	29 f0       	breq	.+10     	; 0x942 <_ZN25EZUI_Control_ToggleOption6ToggleEv+0x2a>
				(*DIO).Write(0);
     938:	60 e0       	ldi	r22, 0x00	; 0
     93a:	70 e0       	ldi	r23, 0x00	; 0
     93c:	ce 01       	movw	r24, r28
     93e:	c4 de       	rcall	.-632    	; 0x6c8 <_ZN9DigitalIO5WriteEi>
     940:	14 c0       	rjmp	.+40     	; 0x96a <_ZN25EZUI_Control_ToggleOption6ToggleEv+0x52>
			}else{
				(*DIO).Write(1);
     942:	61 e0       	ldi	r22, 0x01	; 1
     944:	70 e0       	ldi	r23, 0x00	; 0
     946:	ce 01       	movw	r24, r28
     948:	bf de       	rcall	.-642    	; 0x6c8 <_ZN9DigitalIO5WriteEi>
     94a:	0f c0       	rjmp	.+30     	; 0x96a <_ZN25EZUI_Control_ToggleOption6ToggleEv+0x52>
			}
			break;
		case(StaticBool):
			BlnVal=!BlnVal;
     94c:	93 89       	ldd	r25, Z+19	; 0x13
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	89 27       	eor	r24, r25
     952:	83 8b       	std	Z+19, r24	; 0x13
			break;
     954:	0a c0       	rjmp	.+20     	; 0x96a <_ZN25EZUI_Control_ToggleOption6ToggleEv+0x52>
		case(VarBool):
			*BlnRef = !BlnVal;
     956:	a4 89       	ldd	r26, Z+20	; 0x14
     958:	b5 89       	ldd	r27, Z+21	; 0x15
     95a:	93 89       	ldd	r25, Z+19	; 0x13
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	89 27       	eor	r24, r25
     960:	8c 93       	st	X, r24
			BlnVal = *BlnRef;
     962:	a4 89       	ldd	r26, Z+20	; 0x14
     964:	b5 89       	ldd	r27, Z+21	; 0x15
     966:	8c 91       	ld	r24, X
     968:	83 8b       	std	Z+19, r24	; 0x13
			break;
	}
}
     96a:	df 91       	pop	r29
     96c:	cf 91       	pop	r28
     96e:	08 95       	ret

00000970 <_ZN25EZUI_Control_ToggleOptionC1E6StringP9DigitalIO>:

EZUI_Control_ToggleOption::EZUI_Control_ToggleOption(String _Label, DigitalIO * DigitalIOObject)
     970:	ef 92       	push	r14
     972:	ff 92       	push	r15
     974:	0f 93       	push	r16
     976:	1f 93       	push	r17
     978:	cf 93       	push	r28
     97a:	df 93       	push	r29
     97c:	ec 01       	movw	r28, r24
     97e:	7b 01       	movw	r14, r22
     980:	8a 01       	movw	r16, r20
     982:	60 ee       	ldi	r22, 0xE0	; 224
     984:	75 e0       	ldi	r23, 0x05	; 5
     986:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	8e 83       	std	Y+6, r24	; 0x06
     98e:	66 ed       	ldi	r22, 0xD6	; 214
     990:	72 e0       	ldi	r23, 0x02	; 2
     992:	ce 01       	movw	r24, r28
     994:	07 96       	adiw	r24, 0x07	; 7
     996:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
     99a:	6b ed       	ldi	r22, 0xDB	; 219
     99c:	72 e0       	ldi	r23, 0x02	; 2
     99e:	ce 01       	movw	r24, r28
     9a0:	0d 96       	adiw	r24, 0x0d	; 13
     9a2:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
     9a6:	1b 8a       	std	Y+19, r1	; 0x13
     9a8:	1d 8a       	std	Y+21, r1	; 0x15
     9aa:	1c 8a       	std	Y+20, r1	; 0x14
     9ac:	1f 8a       	std	Y+23, r1	; 0x17
     9ae:	1e 8a       	std	Y+22, r1	; 0x16
{
	Label = _Label;
     9b0:	b7 01       	movw	r22, r14
     9b2:	ce 01       	movw	r24, r28
     9b4:	0e 94 83 41 	call	0x8306	; 0x8306 <_ZN6StringaSERKS_>
	Type = VarDigIO;
     9b8:	1e 82       	std	Y+6, r1	; 0x06
	DIORef = DigitalIOObject;	
     9ba:	1f 8b       	std	Y+23, r17	; 0x17
     9bc:	0e 8b       	std	Y+22, r16	; 0x16
}
     9be:	df 91       	pop	r29
     9c0:	cf 91       	pop	r28
     9c2:	1f 91       	pop	r17
     9c4:	0f 91       	pop	r16
     9c6:	ff 90       	pop	r15
     9c8:	ef 90       	pop	r14
     9ca:	08 95       	ret

000009cc <_Z15serviceEncodersv>:

/**************************
*	Functions
**************************/
void serviceEncoders(){
	MAIN_ENC->service();
     9cc:	80 91 40 06 	lds	r24, 0x0640
     9d0:	90 91 41 06 	lds	r25, 0x0641
     9d4:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <_ZN12ClickEncoder7serviceEv>
	HLT_ENC->service();
     9d8:	80 91 26 06 	lds	r24, 0x0626
     9dc:	90 91 27 06 	lds	r25, 0x0627
     9e0:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <_ZN12ClickEncoder7serviceEv>
	MLT_ENC->service();
     9e4:	80 91 0a 06 	lds	r24, 0x060A
     9e8:	90 91 0b 06 	lds	r25, 0x060B
     9ec:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <_ZN12ClickEncoder7serviceEv>
	BK_ENC->service();
     9f0:	80 91 f0 05 	lds	r24, 0x05F0
     9f4:	90 91 f1 05 	lds	r25, 0x05F1
     9f8:	0c 94 ba 2e 	jmp	0x5d74	; 0x5d74 <_ZN12ClickEncoder7serviceEv>
     9fc:	08 95       	ret

000009fe <_ZN22ClickEncoderWithEventsC1Ehhhh>:
		int16_t t_value = 0;

	//functions
	public:
		ClickEncoderWithEvents(uint8_t A, uint8_t B, uint8_t SW) : ClickEncoder(A, B, SW ) {};
		ClickEncoderWithEvents(uint8_t A, uint8_t B, uint8_t SW, uint8_t DEGPERNOTCH) : ClickEncoder(A, B, SW, DEGPERNOTCH) {};
     9fe:	ef 92       	push	r14
     a00:	0f 93       	push	r16
     a02:	cf 93       	push	r28
     a04:	df 93       	push	r29
     a06:	ec 01       	movw	r28, r24
     a08:	e1 2c       	mov	r14, r1
     a0a:	0e 94 74 2e 	call	0x5ce8	; 0x5ce8 <_ZN12ClickEncoderC1Ehhhhb>
     a0e:	19 8a       	std	Y+17, r1	; 0x11
     a10:	18 8a       	std	Y+16, r1	; 0x10
     a12:	1b 8a       	std	Y+19, r1	; 0x13
     a14:	1a 8a       	std	Y+18, r1	; 0x12
     a16:	1d 8a       	std	Y+21, r1	; 0x15
     a18:	1c 8a       	std	Y+20, r1	; 0x14
     a1a:	1f 8a       	std	Y+23, r1	; 0x17
     a1c:	1e 8a       	std	Y+22, r1	; 0x16
     a1e:	19 8e       	std	Y+25, r1	; 0x19
     a20:	18 8e       	std	Y+24, r1	; 0x18
     a22:	1b 8e       	std	Y+27, r1	; 0x1b
     a24:	1a 8e       	std	Y+26, r1	; 0x1a
     a26:	1d 8e       	std	Y+29, r1	; 0x1d
     a28:	1c 8e       	std	Y+28, r1	; 0x1c
     a2a:	1f 8e       	std	Y+31, r1	; 0x1f
     a2c:	1e 8e       	std	Y+30, r1	; 0x1e
     a2e:	18 a2       	std	Y+32, r1	; 0x20
     a30:	19 a2       	std	Y+33, r1	; 0x21
     a32:	1a a2       	std	Y+34, r1	; 0x22
     a34:	1b a2       	std	Y+35, r1	; 0x23
     a36:	1c a2       	std	Y+36, r1	; 0x24
     a38:	1d a2       	std	Y+37, r1	; 0x25
     a3a:	1e a2       	std	Y+38, r1	; 0x26
     a3c:	1f a2       	std	Y+39, r1	; 0x27
     a3e:	19 a6       	std	Y+41, r1	; 0x29
     a40:	18 a6       	std	Y+40, r1	; 0x28
     a42:	1b a6       	std	Y+43, r1	; 0x2b
     a44:	1a a6       	std	Y+42, r1	; 0x2a
     a46:	df 91       	pop	r29
     a48:	cf 91       	pop	r28
     a4a:	0f 91       	pop	r16
     a4c:	ef 90       	pop	r14
     a4e:	08 95       	ret

00000a50 <_GLOBAL__sub_I__Z15serviceEncodersv>:

/**************************
*	Boil Kettle
**************************/
LiquidCrystal_I2C BK_LCD( BK_LCD_I2C_ADDR, En_pin, Rw_pin, Rs_pin, D4_pin, D5_pin, D6_pin, D7_pin);
ClickEncoderWithEvents *BK_ENC = new ClickEncoderWithEvents( BK_ENC_A, BK_ENC_B, BK_ENC_SW, BK_ENC_DEG_PER_NOTCH );
     a50:	6f 92       	push	r6
     a52:	7f 92       	push	r7
     a54:	8f 92       	push	r8
     a56:	9f 92       	push	r9
     a58:	af 92       	push	r10
     a5a:	bf 92       	push	r11
     a5c:	cf 92       	push	r12
     a5e:	df 92       	push	r13
     a60:	ef 92       	push	r14
     a62:	ff 92       	push	r15
     a64:	0f 93       	push	r16
     a66:	1f 93       	push	r17
     a68:	cf 93       	push	r28
     a6a:	df 93       	push	r29
     a6c:	cd b7       	in	r28, 0x3d	; 61
     a6e:	de b7       	in	r29, 0x3e	; 62
     a70:	cc 5c       	subi	r28, 0xCC	; 204
     a72:	d1 09       	sbc	r29, r1
     a74:	0f b6       	in	r0, 0x3f	; 63
     a76:	f8 94       	cli
     a78:	de bf       	out	0x3e, r29	; 62
     a7a:	0f be       	out	0x3f, r0	; 63
     a7c:	cd bf       	out	0x3d, r28	; 61
float analog15 = 0;

/**************************
*	Alarms
**************************/
DigitalIO RC1_OUT1 = DigitalIO(49, DigitalIO::OUT, "OFF", "ON");
     a7e:	61 ee       	ldi	r22, 0xE1	; 225
     a80:	72 e0       	ldi	r23, 0x02	; 2
     a82:	ce 01       	movw	r24, r28
     a84:	01 96       	adiw	r24, 0x01	; 1
     a86:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
     a8a:	64 ee       	ldi	r22, 0xE4	; 228
     a8c:	72 e0       	ldi	r23, 0x02	; 2
     a8e:	ce 01       	movw	r24, r28
     a90:	07 96       	adiw	r24, 0x07	; 7
     a92:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
     a96:	8e 01       	movw	r16, r28
     a98:	0f 5f       	subi	r16, 0xFF	; 255
     a9a:	1f 4f       	sbci	r17, 0xFF	; 255
     a9c:	9e 01       	movw	r18, r28
     a9e:	29 5f       	subi	r18, 0xF9	; 249
     aa0:	3f 4f       	sbci	r19, 0xFF	; 255
     aa2:	41 e0       	ldi	r20, 0x01	; 1
     aa4:	61 e3       	ldi	r22, 0x31	; 49
     aa6:	70 e0       	ldi	r23, 0x00	; 0
     aa8:	89 e5       	ldi	r24, 0x59	; 89
     aaa:	97 e0       	ldi	r25, 0x07	; 7
     aac:	29 de       	rcall	.-942    	; 0x700 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
     aae:	ce 01       	movw	r24, r28
     ab0:	07 96       	adiw	r24, 0x07	; 7
     ab2:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
     ab6:	c8 01       	movw	r24, r16
     ab8:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
DigitalIO RC1_OUT2 = DigitalIO(48 , DigitalIO::OUT, "OFF", "ON");
     abc:	61 ee       	ldi	r22, 0xE1	; 225
     abe:	72 e0       	ldi	r23, 0x02	; 2
     ac0:	ce 01       	movw	r24, r28
     ac2:	0d 96       	adiw	r24, 0x0d	; 13
     ac4:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
     ac8:	64 ee       	ldi	r22, 0xE4	; 228
     aca:	72 e0       	ldi	r23, 0x02	; 2
     acc:	ce 01       	movw	r24, r28
     ace:	43 96       	adiw	r24, 0x13	; 19
     ad0:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
     ad4:	04 5f       	subi	r16, 0xF4	; 244
     ad6:	1f 4f       	sbci	r17, 0xFF	; 255
     ad8:	9e 01       	movw	r18, r28
     ada:	2d 5e       	subi	r18, 0xED	; 237
     adc:	3f 4f       	sbci	r19, 0xFF	; 255
     ade:	41 e0       	ldi	r20, 0x01	; 1
     ae0:	60 e3       	ldi	r22, 0x30	; 48
     ae2:	70 e0       	ldi	r23, 0x00	; 0
     ae4:	88 e4       	ldi	r24, 0x48	; 72
     ae6:	97 e0       	ldi	r25, 0x07	; 7
     ae8:	0b de       	rcall	.-1002   	; 0x700 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
     aea:	ce 01       	movw	r24, r28
     aec:	43 96       	adiw	r24, 0x13	; 19
     aee:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
     af2:	c8 01       	movw	r24, r16
     af4:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
DigitalIO RC1_OUT3 = DigitalIO(47 , DigitalIO::OUT, "OFF", "ON");
     af8:	61 ee       	ldi	r22, 0xE1	; 225
     afa:	72 e0       	ldi	r23, 0x02	; 2
     afc:	ce 01       	movw	r24, r28
     afe:	49 96       	adiw	r24, 0x19	; 25
     b00:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
     b04:	64 ee       	ldi	r22, 0xE4	; 228
     b06:	72 e0       	ldi	r23, 0x02	; 2
     b08:	ce 01       	movw	r24, r28
     b0a:	4f 96       	adiw	r24, 0x1f	; 31
     b0c:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
     b10:	04 5f       	subi	r16, 0xF4	; 244
     b12:	1f 4f       	sbci	r17, 0xFF	; 255
     b14:	9e 01       	movw	r18, r28
     b16:	21 5e       	subi	r18, 0xE1	; 225
     b18:	3f 4f       	sbci	r19, 0xFF	; 255
     b1a:	41 e0       	ldi	r20, 0x01	; 1
     b1c:	6f e2       	ldi	r22, 0x2F	; 47
     b1e:	70 e0       	ldi	r23, 0x00	; 0
     b20:	87 e3       	ldi	r24, 0x37	; 55
     b22:	97 e0       	ldi	r25, 0x07	; 7
     b24:	ed dd       	rcall	.-1062   	; 0x700 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
     b26:	ce 01       	movw	r24, r28
     b28:	4f 96       	adiw	r24, 0x1f	; 31
     b2a:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
     b2e:	c8 01       	movw	r24, r16
     b30:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
DigitalIO RC1_OUT4 = DigitalIO(46 , DigitalIO::OUT, "OFF", "ON");
     b34:	61 ee       	ldi	r22, 0xE1	; 225
     b36:	72 e0       	ldi	r23, 0x02	; 2
     b38:	ce 01       	movw	r24, r28
     b3a:	85 96       	adiw	r24, 0x25	; 37
     b3c:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
     b40:	64 ee       	ldi	r22, 0xE4	; 228
     b42:	72 e0       	ldi	r23, 0x02	; 2
     b44:	ce 01       	movw	r24, r28
     b46:	8b 96       	adiw	r24, 0x2b	; 43
     b48:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
     b4c:	04 5f       	subi	r16, 0xF4	; 244
     b4e:	1f 4f       	sbci	r17, 0xFF	; 255
     b50:	9e 01       	movw	r18, r28
     b52:	25 5d       	subi	r18, 0xD5	; 213
     b54:	3f 4f       	sbci	r19, 0xFF	; 255
     b56:	41 e0       	ldi	r20, 0x01	; 1
     b58:	6e e2       	ldi	r22, 0x2E	; 46
     b5a:	70 e0       	ldi	r23, 0x00	; 0
     b5c:	86 e2       	ldi	r24, 0x26	; 38
     b5e:	97 e0       	ldi	r25, 0x07	; 7
     b60:	cf dd       	rcall	.-1122   	; 0x700 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
     b62:	ce 01       	movw	r24, r28
     b64:	8b 96       	adiw	r24, 0x2b	; 43
     b66:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
     b6a:	c8 01       	movw	r24, r16
     b6c:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
DigitalIO RC1_OUT5 = DigitalIO(45 , DigitalIO::OUT, "OFF", "ON");
     b70:	61 ee       	ldi	r22, 0xE1	; 225
     b72:	72 e0       	ldi	r23, 0x02	; 2
     b74:	ce 01       	movw	r24, r28
     b76:	c1 96       	adiw	r24, 0x31	; 49
     b78:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
     b7c:	64 ee       	ldi	r22, 0xE4	; 228
     b7e:	72 e0       	ldi	r23, 0x02	; 2
     b80:	ce 01       	movw	r24, r28
     b82:	c7 96       	adiw	r24, 0x37	; 55
     b84:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
     b88:	04 5f       	subi	r16, 0xF4	; 244
     b8a:	1f 4f       	sbci	r17, 0xFF	; 255
     b8c:	9e 01       	movw	r18, r28
     b8e:	29 5c       	subi	r18, 0xC9	; 201
     b90:	3f 4f       	sbci	r19, 0xFF	; 255
     b92:	41 e0       	ldi	r20, 0x01	; 1
     b94:	6d e2       	ldi	r22, 0x2D	; 45
     b96:	70 e0       	ldi	r23, 0x00	; 0
     b98:	85 e1       	ldi	r24, 0x15	; 21
     b9a:	97 e0       	ldi	r25, 0x07	; 7
     b9c:	b1 dd       	rcall	.-1182   	; 0x700 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
     b9e:	ce 01       	movw	r24, r28
     ba0:	c7 96       	adiw	r24, 0x37	; 55
     ba2:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
     ba6:	c8 01       	movw	r24, r16
     ba8:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
DigitalIO RC1_OUT6 = DigitalIO(44 , DigitalIO::OUT, "OFF", "ON");
     bac:	61 ee       	ldi	r22, 0xE1	; 225
     bae:	72 e0       	ldi	r23, 0x02	; 2
     bb0:	ce 01       	movw	r24, r28
     bb2:	cd 96       	adiw	r24, 0x3d	; 61
     bb4:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
     bb8:	64 ee       	ldi	r22, 0xE4	; 228
     bba:	72 e0       	ldi	r23, 0x02	; 2
     bbc:	ce 01       	movw	r24, r28
     bbe:	8d 5b       	subi	r24, 0xBD	; 189
     bc0:	9f 4f       	sbci	r25, 0xFF	; 255
     bc2:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
     bc6:	04 5f       	subi	r16, 0xF4	; 244
     bc8:	1f 4f       	sbci	r17, 0xFF	; 255
     bca:	9e 01       	movw	r18, r28
     bcc:	2d 5b       	subi	r18, 0xBD	; 189
     bce:	3f 4f       	sbci	r19, 0xFF	; 255
     bd0:	41 e0       	ldi	r20, 0x01	; 1
     bd2:	6c e2       	ldi	r22, 0x2C	; 44
     bd4:	70 e0       	ldi	r23, 0x00	; 0
     bd6:	84 e0       	ldi	r24, 0x04	; 4
     bd8:	97 e0       	ldi	r25, 0x07	; 7
     bda:	92 dd       	rcall	.-1244   	; 0x700 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
     bdc:	ce 01       	movw	r24, r28
     bde:	8d 5b       	subi	r24, 0xBD	; 189
     be0:	9f 4f       	sbci	r25, 0xFF	; 255
     be2:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
     be6:	c8 01       	movw	r24, r16
     be8:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
DigitalIO RC1_OUT7 = DigitalIO(43 , DigitalIO::OUT, "OFF", "ON");
     bec:	61 ee       	ldi	r22, 0xE1	; 225
     bee:	72 e0       	ldi	r23, 0x02	; 2
     bf0:	ce 01       	movw	r24, r28
     bf2:	87 5b       	subi	r24, 0xB7	; 183
     bf4:	9f 4f       	sbci	r25, 0xFF	; 255
     bf6:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
     bfa:	64 ee       	ldi	r22, 0xE4	; 228
     bfc:	72 e0       	ldi	r23, 0x02	; 2
     bfe:	ce 01       	movw	r24, r28
     c00:	81 5b       	subi	r24, 0xB1	; 177
     c02:	9f 4f       	sbci	r25, 0xFF	; 255
     c04:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
     c08:	04 5f       	subi	r16, 0xF4	; 244
     c0a:	1f 4f       	sbci	r17, 0xFF	; 255
     c0c:	9e 01       	movw	r18, r28
     c0e:	21 5b       	subi	r18, 0xB1	; 177
     c10:	3f 4f       	sbci	r19, 0xFF	; 255
     c12:	41 e0       	ldi	r20, 0x01	; 1
     c14:	6b e2       	ldi	r22, 0x2B	; 43
     c16:	70 e0       	ldi	r23, 0x00	; 0
     c18:	83 ef       	ldi	r24, 0xF3	; 243
     c1a:	96 e0       	ldi	r25, 0x06	; 6
     c1c:	71 dd       	rcall	.-1310   	; 0x700 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
     c1e:	ce 01       	movw	r24, r28
     c20:	81 5b       	subi	r24, 0xB1	; 177
     c22:	9f 4f       	sbci	r25, 0xFF	; 255
     c24:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
     c28:	c8 01       	movw	r24, r16
     c2a:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
DigitalIO RC1_OUT8 = DigitalIO(42 , DigitalIO::OUT, "OFF", "ON");
     c2e:	61 ee       	ldi	r22, 0xE1	; 225
     c30:	72 e0       	ldi	r23, 0x02	; 2
     c32:	ce 01       	movw	r24, r28
     c34:	8b 5a       	subi	r24, 0xAB	; 171
     c36:	9f 4f       	sbci	r25, 0xFF	; 255
     c38:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
     c3c:	64 ee       	ldi	r22, 0xE4	; 228
     c3e:	72 e0       	ldi	r23, 0x02	; 2
     c40:	ce 01       	movw	r24, r28
     c42:	85 5a       	subi	r24, 0xA5	; 165
     c44:	9f 4f       	sbci	r25, 0xFF	; 255
     c46:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
     c4a:	04 5f       	subi	r16, 0xF4	; 244
     c4c:	1f 4f       	sbci	r17, 0xFF	; 255
     c4e:	9e 01       	movw	r18, r28
     c50:	25 5a       	subi	r18, 0xA5	; 165
     c52:	3f 4f       	sbci	r19, 0xFF	; 255
     c54:	41 e0       	ldi	r20, 0x01	; 1
     c56:	6a e2       	ldi	r22, 0x2A	; 42
     c58:	70 e0       	ldi	r23, 0x00	; 0
     c5a:	82 ee       	ldi	r24, 0xE2	; 226
     c5c:	96 e0       	ldi	r25, 0x06	; 6
     c5e:	50 dd       	rcall	.-1376   	; 0x700 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
     c60:	ce 01       	movw	r24, r28
     c62:	85 5a       	subi	r24, 0xA5	; 165
     c64:	9f 4f       	sbci	r25, 0xFF	; 255
     c66:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
     c6a:	c8 01       	movw	r24, r16
     c6c:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>

DigitalIO RC2_OUT1 = DigitalIO(41, DigitalIO::OUT, "OFF", "ON");
     c70:	61 ee       	ldi	r22, 0xE1	; 225
     c72:	72 e0       	ldi	r23, 0x02	; 2
     c74:	ce 01       	movw	r24, r28
     c76:	8f 59       	subi	r24, 0x9F	; 159
     c78:	9f 4f       	sbci	r25, 0xFF	; 255
     c7a:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
     c7e:	64 ee       	ldi	r22, 0xE4	; 228
     c80:	72 e0       	ldi	r23, 0x02	; 2
     c82:	ce 01       	movw	r24, r28
     c84:	89 59       	subi	r24, 0x99	; 153
     c86:	9f 4f       	sbci	r25, 0xFF	; 255
     c88:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
     c8c:	04 5f       	subi	r16, 0xF4	; 244
     c8e:	1f 4f       	sbci	r17, 0xFF	; 255
     c90:	9e 01       	movw	r18, r28
     c92:	29 59       	subi	r18, 0x99	; 153
     c94:	3f 4f       	sbci	r19, 0xFF	; 255
     c96:	41 e0       	ldi	r20, 0x01	; 1
     c98:	69 e2       	ldi	r22, 0x29	; 41
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	81 ed       	ldi	r24, 0xD1	; 209
     c9e:	96 e0       	ldi	r25, 0x06	; 6
     ca0:	2f dd       	rcall	.-1442   	; 0x700 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
     ca2:	ce 01       	movw	r24, r28
     ca4:	89 59       	subi	r24, 0x99	; 153
     ca6:	9f 4f       	sbci	r25, 0xFF	; 255
     ca8:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
     cac:	c8 01       	movw	r24, r16
     cae:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
DigitalIO RC2_OUT2 = DigitalIO(40 , DigitalIO::OUT, "OFF", "ON");
     cb2:	61 ee       	ldi	r22, 0xE1	; 225
     cb4:	72 e0       	ldi	r23, 0x02	; 2
     cb6:	ce 01       	movw	r24, r28
     cb8:	83 59       	subi	r24, 0x93	; 147
     cba:	9f 4f       	sbci	r25, 0xFF	; 255
     cbc:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
     cc0:	64 ee       	ldi	r22, 0xE4	; 228
     cc2:	72 e0       	ldi	r23, 0x02	; 2
     cc4:	ce 01       	movw	r24, r28
     cc6:	8d 58       	subi	r24, 0x8D	; 141
     cc8:	9f 4f       	sbci	r25, 0xFF	; 255
     cca:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
     cce:	04 5f       	subi	r16, 0xF4	; 244
     cd0:	1f 4f       	sbci	r17, 0xFF	; 255
     cd2:	9e 01       	movw	r18, r28
     cd4:	2d 58       	subi	r18, 0x8D	; 141
     cd6:	3f 4f       	sbci	r19, 0xFF	; 255
     cd8:	41 e0       	ldi	r20, 0x01	; 1
     cda:	68 e2       	ldi	r22, 0x28	; 40
     cdc:	70 e0       	ldi	r23, 0x00	; 0
     cde:	80 ec       	ldi	r24, 0xC0	; 192
     ce0:	96 e0       	ldi	r25, 0x06	; 6
     ce2:	0e dd       	rcall	.-1508   	; 0x700 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
     ce4:	ce 01       	movw	r24, r28
     ce6:	8d 58       	subi	r24, 0x8D	; 141
     ce8:	9f 4f       	sbci	r25, 0xFF	; 255
     cea:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
     cee:	c8 01       	movw	r24, r16
     cf0:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
DigitalIO RC2_OUT3 = DigitalIO(39 , DigitalIO::OUT, "OFF", "ON");
     cf4:	61 ee       	ldi	r22, 0xE1	; 225
     cf6:	72 e0       	ldi	r23, 0x02	; 2
     cf8:	ce 01       	movw	r24, r28
     cfa:	87 58       	subi	r24, 0x87	; 135
     cfc:	9f 4f       	sbci	r25, 0xFF	; 255
     cfe:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
     d02:	64 ee       	ldi	r22, 0xE4	; 228
     d04:	72 e0       	ldi	r23, 0x02	; 2
     d06:	ce 01       	movw	r24, r28
     d08:	81 58       	subi	r24, 0x81	; 129
     d0a:	9f 4f       	sbci	r25, 0xFF	; 255
     d0c:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
     d10:	04 5f       	subi	r16, 0xF4	; 244
     d12:	1f 4f       	sbci	r17, 0xFF	; 255
     d14:	9e 01       	movw	r18, r28
     d16:	21 58       	subi	r18, 0x81	; 129
     d18:	3f 4f       	sbci	r19, 0xFF	; 255
     d1a:	41 e0       	ldi	r20, 0x01	; 1
     d1c:	67 e2       	ldi	r22, 0x27	; 39
     d1e:	70 e0       	ldi	r23, 0x00	; 0
     d20:	8f ea       	ldi	r24, 0xAF	; 175
     d22:	96 e0       	ldi	r25, 0x06	; 6
     d24:	ed dc       	rcall	.-1574   	; 0x700 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
     d26:	ce 01       	movw	r24, r28
     d28:	81 58       	subi	r24, 0x81	; 129
     d2a:	9f 4f       	sbci	r25, 0xFF	; 255
     d2c:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
     d30:	c8 01       	movw	r24, r16
     d32:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
DigitalIO RC2_OUT4 = DigitalIO(38 , DigitalIO::OUT, "OFF", "ON");
     d36:	61 ee       	ldi	r22, 0xE1	; 225
     d38:	72 e0       	ldi	r23, 0x02	; 2
     d3a:	ce 01       	movw	r24, r28
     d3c:	8b 57       	subi	r24, 0x7B	; 123
     d3e:	9f 4f       	sbci	r25, 0xFF	; 255
     d40:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
     d44:	64 ee       	ldi	r22, 0xE4	; 228
     d46:	72 e0       	ldi	r23, 0x02	; 2
     d48:	ce 01       	movw	r24, r28
     d4a:	85 57       	subi	r24, 0x75	; 117
     d4c:	9f 4f       	sbci	r25, 0xFF	; 255
     d4e:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
     d52:	04 5f       	subi	r16, 0xF4	; 244
     d54:	1f 4f       	sbci	r17, 0xFF	; 255
     d56:	9e 01       	movw	r18, r28
     d58:	25 57       	subi	r18, 0x75	; 117
     d5a:	3f 4f       	sbci	r19, 0xFF	; 255
     d5c:	41 e0       	ldi	r20, 0x01	; 1
     d5e:	66 e2       	ldi	r22, 0x26	; 38
     d60:	70 e0       	ldi	r23, 0x00	; 0
     d62:	8e e9       	ldi	r24, 0x9E	; 158
     d64:	96 e0       	ldi	r25, 0x06	; 6
     d66:	cc dc       	rcall	.-1640   	; 0x700 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
     d68:	ce 01       	movw	r24, r28
     d6a:	85 57       	subi	r24, 0x75	; 117
     d6c:	9f 4f       	sbci	r25, 0xFF	; 255
     d6e:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
     d72:	c8 01       	movw	r24, r16
     d74:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
DigitalIO RC2_OUT5 = DigitalIO(37 , DigitalIO::OUT, "OFF", "ON");
     d78:	61 ee       	ldi	r22, 0xE1	; 225
     d7a:	72 e0       	ldi	r23, 0x02	; 2
     d7c:	ce 01       	movw	r24, r28
     d7e:	8f 56       	subi	r24, 0x6F	; 111
     d80:	9f 4f       	sbci	r25, 0xFF	; 255
     d82:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
     d86:	64 ee       	ldi	r22, 0xE4	; 228
     d88:	72 e0       	ldi	r23, 0x02	; 2
     d8a:	ce 01       	movw	r24, r28
     d8c:	89 56       	subi	r24, 0x69	; 105
     d8e:	9f 4f       	sbci	r25, 0xFF	; 255
     d90:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
     d94:	04 5f       	subi	r16, 0xF4	; 244
     d96:	1f 4f       	sbci	r17, 0xFF	; 255
     d98:	9e 01       	movw	r18, r28
     d9a:	29 56       	subi	r18, 0x69	; 105
     d9c:	3f 4f       	sbci	r19, 0xFF	; 255
     d9e:	41 e0       	ldi	r20, 0x01	; 1
     da0:	65 e2       	ldi	r22, 0x25	; 37
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	8d e8       	ldi	r24, 0x8D	; 141
     da6:	96 e0       	ldi	r25, 0x06	; 6
     da8:	ab dc       	rcall	.-1706   	; 0x700 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
     daa:	ce 01       	movw	r24, r28
     dac:	89 56       	subi	r24, 0x69	; 105
     dae:	9f 4f       	sbci	r25, 0xFF	; 255
     db0:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
     db4:	c8 01       	movw	r24, r16
     db6:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
DigitalIO RC2_OUT6 = DigitalIO(36 , DigitalIO::OUT, "OFF", "ON");
     dba:	61 ee       	ldi	r22, 0xE1	; 225
     dbc:	72 e0       	ldi	r23, 0x02	; 2
     dbe:	ce 01       	movw	r24, r28
     dc0:	83 56       	subi	r24, 0x63	; 99
     dc2:	9f 4f       	sbci	r25, 0xFF	; 255
     dc4:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
     dc8:	64 ee       	ldi	r22, 0xE4	; 228
     dca:	72 e0       	ldi	r23, 0x02	; 2
     dcc:	ce 01       	movw	r24, r28
     dce:	8d 55       	subi	r24, 0x5D	; 93
     dd0:	9f 4f       	sbci	r25, 0xFF	; 255
     dd2:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
     dd6:	04 5f       	subi	r16, 0xF4	; 244
     dd8:	1f 4f       	sbci	r17, 0xFF	; 255
     dda:	9e 01       	movw	r18, r28
     ddc:	2d 55       	subi	r18, 0x5D	; 93
     dde:	3f 4f       	sbci	r19, 0xFF	; 255
     de0:	41 e0       	ldi	r20, 0x01	; 1
     de2:	64 e2       	ldi	r22, 0x24	; 36
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	8c e7       	ldi	r24, 0x7C	; 124
     de8:	96 e0       	ldi	r25, 0x06	; 6
     dea:	8a dc       	rcall	.-1772   	; 0x700 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
     dec:	ce 01       	movw	r24, r28
     dee:	8d 55       	subi	r24, 0x5D	; 93
     df0:	9f 4f       	sbci	r25, 0xFF	; 255
     df2:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
     df6:	c8 01       	movw	r24, r16
     df8:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
DigitalIO RC2_OUT7 = DigitalIO(35 , DigitalIO::OUT, "OFF", "ON");
     dfc:	61 ee       	ldi	r22, 0xE1	; 225
     dfe:	72 e0       	ldi	r23, 0x02	; 2
     e00:	ce 01       	movw	r24, r28
     e02:	87 55       	subi	r24, 0x57	; 87
     e04:	9f 4f       	sbci	r25, 0xFF	; 255
     e06:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
     e0a:	64 ee       	ldi	r22, 0xE4	; 228
     e0c:	72 e0       	ldi	r23, 0x02	; 2
     e0e:	ce 01       	movw	r24, r28
     e10:	81 55       	subi	r24, 0x51	; 81
     e12:	9f 4f       	sbci	r25, 0xFF	; 255
     e14:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
     e18:	04 5f       	subi	r16, 0xF4	; 244
     e1a:	1f 4f       	sbci	r17, 0xFF	; 255
     e1c:	9e 01       	movw	r18, r28
     e1e:	21 55       	subi	r18, 0x51	; 81
     e20:	3f 4f       	sbci	r19, 0xFF	; 255
     e22:	41 e0       	ldi	r20, 0x01	; 1
     e24:	63 e2       	ldi	r22, 0x23	; 35
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	8b e6       	ldi	r24, 0x6B	; 107
     e2a:	96 e0       	ldi	r25, 0x06	; 6
     e2c:	69 dc       	rcall	.-1838   	; 0x700 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
     e2e:	ce 01       	movw	r24, r28
     e30:	81 55       	subi	r24, 0x51	; 81
     e32:	9f 4f       	sbci	r25, 0xFF	; 255
     e34:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
     e38:	c8 01       	movw	r24, r16
     e3a:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
DigitalIO RC2_OUT8 = DigitalIO(35 , DigitalIO::OUT, "OFF", "ON");
     e3e:	61 ee       	ldi	r22, 0xE1	; 225
     e40:	72 e0       	ldi	r23, 0x02	; 2
     e42:	ce 01       	movw	r24, r28
     e44:	8b 54       	subi	r24, 0x4B	; 75
     e46:	9f 4f       	sbci	r25, 0xFF	; 255
     e48:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
     e4c:	64 ee       	ldi	r22, 0xE4	; 228
     e4e:	72 e0       	ldi	r23, 0x02	; 2
     e50:	ce 01       	movw	r24, r28
     e52:	85 54       	subi	r24, 0x45	; 69
     e54:	9f 4f       	sbci	r25, 0xFF	; 255
     e56:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
     e5a:	04 5f       	subi	r16, 0xF4	; 244
     e5c:	1f 4f       	sbci	r17, 0xFF	; 255
     e5e:	9e 01       	movw	r18, r28
     e60:	25 54       	subi	r18, 0x45	; 69
     e62:	3f 4f       	sbci	r19, 0xFF	; 255
     e64:	41 e0       	ldi	r20, 0x01	; 1
     e66:	63 e2       	ldi	r22, 0x23	; 35
     e68:	70 e0       	ldi	r23, 0x00	; 0
     e6a:	8a e5       	ldi	r24, 0x5A	; 90
     e6c:	96 e0       	ldi	r25, 0x06	; 6
     e6e:	48 dc       	rcall	.-1904   	; 0x700 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
     e70:	ce 01       	movw	r24, r28
     e72:	85 54       	subi	r24, 0x45	; 69
     e74:	9f 4f       	sbci	r25, 0xFF	; 255
     e76:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
     e7a:	c8 01       	movw	r24, r16
     e7c:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
float WB_R2C_Z[36] = {-50, -40, -30, -20, -10, 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300};

/**************************
*	Main Screen
**************************/
LiquidCrystal_I2C MAIN_LCD( MAIN_LCD_I2C_ADDR, En_pin, Rw_pin, Rs_pin, D4_pin, D5_pin, D6_pin, D7_pin);
     e80:	0f 2e       	mov	r0, r31
     e82:	f7 e0       	ldi	r31, 0x07	; 7
     e84:	8f 2e       	mov	r8, r31
     e86:	f0 2d       	mov	r31, r0
     e88:	0f 2e       	mov	r0, r31
     e8a:	f6 e0       	ldi	r31, 0x06	; 6
     e8c:	af 2e       	mov	r10, r31
     e8e:	f0 2d       	mov	r31, r0
     e90:	0f 2e       	mov	r0, r31
     e92:	f5 e0       	ldi	r31, 0x05	; 5
     e94:	cf 2e       	mov	r12, r31
     e96:	f0 2d       	mov	r31, r0
     e98:	68 94       	set
     e9a:	ee 24       	eor	r14, r14
     e9c:	e2 f8       	bld	r14, 2
     e9e:	00 e0       	ldi	r16, 0x00	; 0
     ea0:	21 e0       	ldi	r18, 0x01	; 1
     ea2:	42 e0       	ldi	r20, 0x02	; 2
     ea4:	67 e2       	ldi	r22, 0x27	; 39
     ea6:	82 e4       	ldi	r24, 0x42	; 66
     ea8:	96 e0       	ldi	r25, 0x06	; 6
     eaa:	0e 94 27 31 	call	0x624e	; 0x624e <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh>
ClickEncoderWithEvents *MAIN_ENC = new ClickEncoderWithEvents( MAIN_ENC_A, MAIN_ENC_B, MAIN_ENC_SW, MAIN_ENC_DEG_PER_NOTCH );
     eae:	8c e2       	ldi	r24, 0x2C	; 44
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
     eb6:	7c 01       	movw	r14, r24
     eb8:	04 e0       	ldi	r16, 0x04	; 4
     eba:	28 e1       	ldi	r18, 0x18	; 24
     ebc:	46 e1       	ldi	r20, 0x16	; 22
     ebe:	67 e1       	ldi	r22, 0x17	; 23
     ec0:	9e dd       	rcall	.-1220   	; 0x9fe <_ZN22ClickEncoderWithEventsC1Ehhhh>
     ec2:	f0 92 41 06 	sts	0x0641, r15
     ec6:	e0 92 40 06 	sts	0x0640, r14

/**************************
*	Hot Liquor Tank
**************************/
LiquidCrystal_I2C HLT_LCD( HLT_LCD_I2C_ADDR, En_pin, Rw_pin, Rs_pin, D4_pin, D5_pin, D6_pin, D7_pin);
     eca:	68 94       	set
     ecc:	ee 24       	eor	r14, r14
     ece:	e2 f8       	bld	r14, 2
     ed0:	00 e0       	ldi	r16, 0x00	; 0
     ed2:	21 e0       	ldi	r18, 0x01	; 1
     ed4:	42 e0       	ldi	r20, 0x02	; 2
     ed6:	66 e2       	ldi	r22, 0x26	; 38
     ed8:	88 e2       	ldi	r24, 0x28	; 40
     eda:	96 e0       	ldi	r25, 0x06	; 6
     edc:	0e 94 27 31 	call	0x624e	; 0x624e <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh>
ClickEncoderWithEvents *HLT_ENC = new ClickEncoderWithEvents( HLT_ENC_A, HLT_ENC_B, HLT_ENC_SW, HLT_ENC_DEG_PER_NOTCH );
     ee0:	8c e2       	ldi	r24, 0x2C	; 44
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
     ee8:	7c 01       	movw	r14, r24
     eea:	04 e0       	ldi	r16, 0x04	; 4
     eec:	2b e1       	ldi	r18, 0x1B	; 27
     eee:	49 e1       	ldi	r20, 0x19	; 25
     ef0:	6a e1       	ldi	r22, 0x1A	; 26
     ef2:	85 dd       	rcall	.-1270   	; 0x9fe <_ZN22ClickEncoderWithEventsC1Ehhhh>
     ef4:	f0 92 27 06 	sts	0x0627, r15
     ef8:	e0 92 26 06 	sts	0x0626, r14
//DigitalIO * HLT_SOL1 = new DigitalIO( HLT_SOLENOID_1, DigitalIO::OUT, "OFF","ON" );
//DigitalIO * HLT_SOL2 = new DigitalIO( HLT_SOLENOID_2, DigitalIO::OUT, "OFF","ON" );
WheatstoneBridge *HLT_RTD_BP = new WheatstoneBridge("HLT_RTD_BP", HLT_RTD_Vs_AN, HLT_RTD_BP_AN, LUT1D(36, WB_R2C_X, WB_R2C_X), WB_R2, WB_R3, WB_R4, WB_OpAmpGn, WB_Rs);
     efc:	68 ee       	ldi	r22, 0xE8	; 232
     efe:	72 e0       	ldi	r23, 0x02	; 2
     f00:	ce 01       	movw	r24, r28
     f02:	8f 53       	subi	r24, 0x3F	; 63
     f04:	9f 4f       	sbci	r25, 0xFF	; 255
     f06:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
     f0a:	26 e0       	ldi	r18, 0x06	; 6
     f0c:	32 e0       	ldi	r19, 0x02	; 2
     f0e:	a9 01       	movw	r20, r18
     f10:	64 e2       	ldi	r22, 0x24	; 36
     f12:	70 e0       	ldi	r23, 0x00	; 0
     f14:	ce 01       	movw	r24, r28
     f16:	89 53       	subi	r24, 0x39	; 57
     f18:	9f 4f       	sbci	r25, 0xFF	; 255
     f1a:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <_ZN5LUT1DC1EiPfS0_>
     f1e:	88 e3       	ldi	r24, 0x38	; 56
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
     f26:	3c 01       	movw	r6, r24
     f28:	80 e4       	ldi	r24, 0x40	; 64
     f2a:	8f 93       	push	r24
     f2c:	80 ea       	ldi	r24, 0xA0	; 160
     f2e:	8f 93       	push	r24
     f30:	1f 92       	push	r1
     f32:	1f 92       	push	r1
     f34:	82 e4       	ldi	r24, 0x42	; 66
     f36:	8f 93       	push	r24
     f38:	9c e4       	ldi	r25, 0x4C	; 76
     f3a:	9f 93       	push	r25
     f3c:	1f 92       	push	r1
     f3e:	1f 92       	push	r1
     f40:	8f 93       	push	r24
     f42:	88 ec       	ldi	r24, 0xC8	; 200
     f44:	8f 93       	push	r24
     f46:	1f 92       	push	r1
     f48:	1f 92       	push	r1
     f4a:	84 e4       	ldi	r24, 0x44	; 68
     f4c:	8f 93       	push	r24
     f4e:	8a ef       	ldi	r24, 0xFA	; 250
     f50:	8f 93       	push	r24
     f52:	1f 92       	push	r1
     f54:	1f 92       	push	r1
     f56:	0f 2e       	mov	r0, r31
     f58:	81 2c       	mov	r8, r1
     f5a:	91 2c       	mov	r9, r1
     f5c:	fa ef       	ldi	r31, 0xFA	; 250
     f5e:	af 2e       	mov	r10, r31
     f60:	f4 e4       	ldi	r31, 0x44	; 68
     f62:	bf 2e       	mov	r11, r31
     f64:	f0 2d       	mov	r31, r0
     f66:	c9 53       	subi	r28, 0x39	; 57
     f68:	df 4f       	sbci	r29, 0xFF	; 255
     f6a:	c8 80       	ld	r12, Y
     f6c:	c7 5c       	subi	r28, 0xC7	; 199
     f6e:	d0 40       	sbci	r29, 0x00	; 0
     f70:	c8 53       	subi	r28, 0x38	; 56
     f72:	df 4f       	sbci	r29, 0xFF	; 255
     f74:	d8 80       	ld	r13, Y
     f76:	c8 5c       	subi	r28, 0xC8	; 200
     f78:	d0 40       	sbci	r29, 0x00	; 0
     f7a:	c7 53       	subi	r28, 0x37	; 55
     f7c:	df 4f       	sbci	r29, 0xFF	; 255
     f7e:	e8 80       	ld	r14, Y
     f80:	c9 5c       	subi	r28, 0xC9	; 201
     f82:	d0 40       	sbci	r29, 0x00	; 0
     f84:	c6 53       	subi	r28, 0x36	; 54
     f86:	df 4f       	sbci	r29, 0xFF	; 255
     f88:	f8 80       	ld	r15, Y
     f8a:	ca 5c       	subi	r28, 0xCA	; 202
     f8c:	d0 40       	sbci	r29, 0x00	; 0
     f8e:	c5 53       	subi	r28, 0x35	; 53
     f90:	df 4f       	sbci	r29, 0xFF	; 255
     f92:	08 81       	ld	r16, Y
     f94:	cb 5c       	subi	r28, 0xCB	; 203
     f96:	d0 40       	sbci	r29, 0x00	; 0
     f98:	c4 53       	subi	r28, 0x34	; 52
     f9a:	df 4f       	sbci	r29, 0xFF	; 255
     f9c:	18 81       	ld	r17, Y
     f9e:	cc 5c       	subi	r28, 0xCC	; 204
     fa0:	d0 40       	sbci	r29, 0x00	; 0
     fa2:	2a e3       	ldi	r18, 0x3A	; 58
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	46 e3       	ldi	r20, 0x36	; 54
     fa8:	50 e0       	ldi	r21, 0x00	; 0
     faa:	be 01       	movw	r22, r28
     fac:	6f 53       	subi	r22, 0x3F	; 63
     fae:	7f 4f       	sbci	r23, 0xFF	; 255
     fb0:	c3 01       	movw	r24, r6
     fb2:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <_ZN16WheatstoneBridgeC1E6Stringii5LUT1Dfffff>
     fb6:	70 92 25 06 	sts	0x0625, r7
     fba:	60 92 24 06 	sts	0x0624, r6
     fbe:	ce 01       	movw	r24, r28
     fc0:	8f 53       	subi	r24, 0x3F	; 63
     fc2:	9f 4f       	sbci	r25, 0xFF	; 255
     fc4:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>


/**************************
*	Mash Lauter Tun
**************************/
LiquidCrystal_I2C MLT_LCD( MLT_LCD_I2C_ADDR, En_pin, Rw_pin, Rs_pin, D4_pin, D5_pin, D6_pin, D7_pin);
     fc8:	0f 2e       	mov	r0, r31
     fca:	f7 e0       	ldi	r31, 0x07	; 7
     fcc:	8f 2e       	mov	r8, r31
     fce:	f0 2d       	mov	r31, r0
     fd0:	0f 2e       	mov	r0, r31
     fd2:	f6 e0       	ldi	r31, 0x06	; 6
     fd4:	af 2e       	mov	r10, r31
     fd6:	f0 2d       	mov	r31, r0
     fd8:	0f 2e       	mov	r0, r31
     fda:	f5 e0       	ldi	r31, 0x05	; 5
     fdc:	cf 2e       	mov	r12, r31
     fde:	f0 2d       	mov	r31, r0
     fe0:	68 94       	set
     fe2:	ee 24       	eor	r14, r14
     fe4:	e2 f8       	bld	r14, 2
     fe6:	00 e0       	ldi	r16, 0x00	; 0
     fe8:	21 e0       	ldi	r18, 0x01	; 1
     fea:	42 e0       	ldi	r20, 0x02	; 2
     fec:	65 e2       	ldi	r22, 0x25	; 37
     fee:	8c e0       	ldi	r24, 0x0C	; 12
     ff0:	96 e0       	ldi	r25, 0x06	; 6
     ff2:	0e 94 27 31 	call	0x624e	; 0x624e <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh>
ClickEncoderWithEvents *MLT_ENC = new ClickEncoderWithEvents( MLT_ENC_A, MLT_ENC_B, MLT_ENC_SW, MLT_ENC_DEG_PER_NOTCH );
     ff6:	8c e2       	ldi	r24, 0x2C	; 44
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
     ffe:	7c 01       	movw	r14, r24
    1000:	04 e0       	ldi	r16, 0x04	; 4
    1002:	2e e1       	ldi	r18, 0x1E	; 30
    1004:	4c e1       	ldi	r20, 0x1C	; 28
    1006:	6d e1       	ldi	r22, 0x1D	; 29
    1008:	fa dc       	rcall	.-1548   	; 0x9fe <_ZN22ClickEncoderWithEventsC1Ehhhh>
    100a:	f0 92 0b 06 	sts	0x060B, r15
    100e:	e0 92 0a 06 	sts	0x060A, r14


/**************************
*	Boil Kettle
**************************/
LiquidCrystal_I2C BK_LCD( BK_LCD_I2C_ADDR, En_pin, Rw_pin, Rs_pin, D4_pin, D5_pin, D6_pin, D7_pin);
    1012:	68 94       	set
    1014:	ee 24       	eor	r14, r14
    1016:	e2 f8       	bld	r14, 2
    1018:	00 e0       	ldi	r16, 0x00	; 0
    101a:	21 e0       	ldi	r18, 0x01	; 1
    101c:	42 e0       	ldi	r20, 0x02	; 2
    101e:	63 e2       	ldi	r22, 0x23	; 35
    1020:	82 ef       	ldi	r24, 0xF2	; 242
    1022:	95 e0       	ldi	r25, 0x05	; 5
    1024:	0e 94 27 31 	call	0x624e	; 0x624e <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh>
ClickEncoderWithEvents *BK_ENC = new ClickEncoderWithEvents( BK_ENC_A, BK_ENC_B, BK_ENC_SW, BK_ENC_DEG_PER_NOTCH );
    1028:	8c e2       	ldi	r24, 0x2C	; 44
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    1030:	7c 01       	movw	r14, r24
    1032:	04 e0       	ldi	r16, 0x04	; 4
    1034:	21 e2       	ldi	r18, 0x21	; 33
    1036:	4f e1       	ldi	r20, 0x1F	; 31
    1038:	60 e2       	ldi	r22, 0x20	; 32
    103a:	e1 dc       	rcall	.-1598   	; 0x9fe <_ZN22ClickEncoderWithEventsC1Ehhhh>
    103c:	f0 92 f1 05 	sts	0x05F1, r15
    1040:	e0 92 f0 05 	sts	0x05F0, r14
    1044:	0f b6       	in	r0, 0x3f	; 63
    1046:	f8 94       	cli
    1048:	de bf       	out	0x3e, r29	; 62
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	cd bf       	out	0x3d, r28	; 61
    104e:	c4 53       	subi	r28, 0x34	; 52
    1050:	df 4f       	sbci	r29, 0xFF	; 255
    1052:	0f b6       	in	r0, 0x3f	; 63
    1054:	f8 94       	cli
    1056:	de bf       	out	0x3e, r29	; 62
    1058:	0f be       	out	0x3f, r0	; 63
    105a:	cd bf       	out	0x3d, r28	; 61
    105c:	df 91       	pop	r29
    105e:	cf 91       	pop	r28
    1060:	1f 91       	pop	r17
    1062:	0f 91       	pop	r16
    1064:	ff 90       	pop	r15
    1066:	ef 90       	pop	r14
    1068:	df 90       	pop	r13
    106a:	cf 90       	pop	r12
    106c:	bf 90       	pop	r11
    106e:	af 90       	pop	r10
    1070:	9f 90       	pop	r9
    1072:	8f 90       	pop	r8
    1074:	7f 90       	pop	r7
    1076:	6f 90       	pop	r6
    1078:	08 95       	ret

0000107a <_GLOBAL__sub_D__Z15serviceEncodersv>:
DigitalIO RC2_OUT3 = DigitalIO(39 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT4 = DigitalIO(38 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT5 = DigitalIO(37 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT6 = DigitalIO(36 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT7 = DigitalIO(35 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT8 = DigitalIO(35 , DigitalIO::OUT, "OFF", "ON");
    107a:	8a e5       	ldi	r24, 0x5A	; 90
    107c:	96 e0       	ldi	r25, 0x06	; 6
    107e:	fe da       	rcall	.-2564   	; 0x67c <_ZN9DigitalIOD1Ev>
DigitalIO RC2_OUT2 = DigitalIO(40 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT3 = DigitalIO(39 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT4 = DigitalIO(38 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT5 = DigitalIO(37 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT6 = DigitalIO(36 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT7 = DigitalIO(35 , DigitalIO::OUT, "OFF", "ON");
    1080:	8b e6       	ldi	r24, 0x6B	; 107
    1082:	96 e0       	ldi	r25, 0x06	; 6
    1084:	fb da       	rcall	.-2570   	; 0x67c <_ZN9DigitalIOD1Ev>
DigitalIO RC2_OUT1 = DigitalIO(41, DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT2 = DigitalIO(40 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT3 = DigitalIO(39 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT4 = DigitalIO(38 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT5 = DigitalIO(37 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT6 = DigitalIO(36 , DigitalIO::OUT, "OFF", "ON");
    1086:	8c e7       	ldi	r24, 0x7C	; 124
    1088:	96 e0       	ldi	r25, 0x06	; 6
    108a:	f8 da       	rcall	.-2576   	; 0x67c <_ZN9DigitalIOD1Ev>

DigitalIO RC2_OUT1 = DigitalIO(41, DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT2 = DigitalIO(40 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT3 = DigitalIO(39 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT4 = DigitalIO(38 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT5 = DigitalIO(37 , DigitalIO::OUT, "OFF", "ON");
    108c:	8d e8       	ldi	r24, 0x8D	; 141
    108e:	96 e0       	ldi	r25, 0x06	; 6
    1090:	f5 da       	rcall	.-2582   	; 0x67c <_ZN9DigitalIOD1Ev>
DigitalIO RC1_OUT8 = DigitalIO(42 , DigitalIO::OUT, "OFF", "ON");

DigitalIO RC2_OUT1 = DigitalIO(41, DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT2 = DigitalIO(40 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT3 = DigitalIO(39 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT4 = DigitalIO(38 , DigitalIO::OUT, "OFF", "ON");
    1092:	8e e9       	ldi	r24, 0x9E	; 158
    1094:	96 e0       	ldi	r25, 0x06	; 6
    1096:	f2 da       	rcall	.-2588   	; 0x67c <_ZN9DigitalIOD1Ev>
DigitalIO RC1_OUT7 = DigitalIO(43 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT8 = DigitalIO(42 , DigitalIO::OUT, "OFF", "ON");

DigitalIO RC2_OUT1 = DigitalIO(41, DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT2 = DigitalIO(40 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT3 = DigitalIO(39 , DigitalIO::OUT, "OFF", "ON");
    1098:	8f ea       	ldi	r24, 0xAF	; 175
    109a:	96 e0       	ldi	r25, 0x06	; 6
    109c:	ef da       	rcall	.-2594   	; 0x67c <_ZN9DigitalIOD1Ev>
DigitalIO RC1_OUT6 = DigitalIO(44 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT7 = DigitalIO(43 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT8 = DigitalIO(42 , DigitalIO::OUT, "OFF", "ON");

DigitalIO RC2_OUT1 = DigitalIO(41, DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT2 = DigitalIO(40 , DigitalIO::OUT, "OFF", "ON");
    109e:	80 ec       	ldi	r24, 0xC0	; 192
    10a0:	96 e0       	ldi	r25, 0x06	; 6
    10a2:	ec da       	rcall	.-2600   	; 0x67c <_ZN9DigitalIOD1Ev>
DigitalIO RC1_OUT5 = DigitalIO(45 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT6 = DigitalIO(44 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT7 = DigitalIO(43 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT8 = DigitalIO(42 , DigitalIO::OUT, "OFF", "ON");

DigitalIO RC2_OUT1 = DigitalIO(41, DigitalIO::OUT, "OFF", "ON");
    10a4:	81 ed       	ldi	r24, 0xD1	; 209
    10a6:	96 e0       	ldi	r25, 0x06	; 6
    10a8:	e9 da       	rcall	.-2606   	; 0x67c <_ZN9DigitalIOD1Ev>
DigitalIO RC1_OUT3 = DigitalIO(47 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT4 = DigitalIO(46 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT5 = DigitalIO(45 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT6 = DigitalIO(44 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT7 = DigitalIO(43 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT8 = DigitalIO(42 , DigitalIO::OUT, "OFF", "ON");
    10aa:	82 ee       	ldi	r24, 0xE2	; 226
    10ac:	96 e0       	ldi	r25, 0x06	; 6
    10ae:	e6 da       	rcall	.-2612   	; 0x67c <_ZN9DigitalIOD1Ev>
DigitalIO RC1_OUT2 = DigitalIO(48 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT3 = DigitalIO(47 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT4 = DigitalIO(46 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT5 = DigitalIO(45 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT6 = DigitalIO(44 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT7 = DigitalIO(43 , DigitalIO::OUT, "OFF", "ON");
    10b0:	83 ef       	ldi	r24, 0xF3	; 243
    10b2:	96 e0       	ldi	r25, 0x06	; 6
    10b4:	e3 da       	rcall	.-2618   	; 0x67c <_ZN9DigitalIOD1Ev>
DigitalIO RC1_OUT1 = DigitalIO(49, DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT2 = DigitalIO(48 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT3 = DigitalIO(47 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT4 = DigitalIO(46 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT5 = DigitalIO(45 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT6 = DigitalIO(44 , DigitalIO::OUT, "OFF", "ON");
    10b6:	84 e0       	ldi	r24, 0x04	; 4
    10b8:	97 e0       	ldi	r25, 0x07	; 7
    10ba:	e0 da       	rcall	.-2624   	; 0x67c <_ZN9DigitalIOD1Ev>
**************************/
DigitalIO RC1_OUT1 = DigitalIO(49, DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT2 = DigitalIO(48 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT3 = DigitalIO(47 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT4 = DigitalIO(46 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT5 = DigitalIO(45 , DigitalIO::OUT, "OFF", "ON");
    10bc:	85 e1       	ldi	r24, 0x15	; 21
    10be:	97 e0       	ldi	r25, 0x07	; 7
    10c0:	dd da       	rcall	.-2630   	; 0x67c <_ZN9DigitalIOD1Ev>
*	Alarms
**************************/
DigitalIO RC1_OUT1 = DigitalIO(49, DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT2 = DigitalIO(48 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT3 = DigitalIO(47 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT4 = DigitalIO(46 , DigitalIO::OUT, "OFF", "ON");
    10c2:	86 e2       	ldi	r24, 0x26	; 38
    10c4:	97 e0       	ldi	r25, 0x07	; 7
    10c6:	da da       	rcall	.-2636   	; 0x67c <_ZN9DigitalIOD1Ev>
/**************************
*	Alarms
**************************/
DigitalIO RC1_OUT1 = DigitalIO(49, DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT2 = DigitalIO(48 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT3 = DigitalIO(47 , DigitalIO::OUT, "OFF", "ON");
    10c8:	87 e3       	ldi	r24, 0x37	; 55
    10ca:	97 e0       	ldi	r25, 0x07	; 7
    10cc:	d7 da       	rcall	.-2642   	; 0x67c <_ZN9DigitalIOD1Ev>

/**************************
*	Alarms
**************************/
DigitalIO RC1_OUT1 = DigitalIO(49, DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT2 = DigitalIO(48 , DigitalIO::OUT, "OFF", "ON");
    10ce:	88 e4       	ldi	r24, 0x48	; 72
    10d0:	97 e0       	ldi	r25, 0x07	; 7
    10d2:	d4 da       	rcall	.-2648   	; 0x67c <_ZN9DigitalIOD1Ev>
float analog15 = 0;

/**************************
*	Alarms
**************************/
DigitalIO RC1_OUT1 = DigitalIO(49, DigitalIO::OUT, "OFF", "ON");
    10d4:	89 e5       	ldi	r24, 0x59	; 89
    10d6:	97 e0       	ldi	r25, 0x07	; 7
    10d8:	d1 ca       	rjmp	.-2654   	; 0x67c <_ZN9DigitalIOD1Ev>
    10da:	08 95       	ret

000010dc <_Z13hardware_initv>:
void hardware_init(){
	
	//--Setup the LCDs-------
	
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.print("Initializing LCDs...");
    10dc:	63 ef       	ldi	r22, 0xF3	; 243
    10de:	72 e0       	ldi	r23, 0x02	; 2
    10e0:	82 e8       	ldi	r24, 0x82	; 130
    10e2:	98 e0       	ldi	r25, 0x08	; 8
    10e4:	0e 94 4d 3a 	call	0x749a	; 0x749a <_ZN5Print5printEPKc>
	#endif
	
	MAIN_LCD.setBacklightPin(LCD_BACKLIGHT_PIN,POSITIVE);
    10e8:	40 e0       	ldi	r20, 0x00	; 0
    10ea:	63 e0       	ldi	r22, 0x03	; 3
    10ec:	82 e4       	ldi	r24, 0x42	; 66
    10ee:	96 e0       	ldi	r25, 0x06	; 6
    10f0:	0e 94 fd 30 	call	0x61fa	; 0x61fa <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>
	MAIN_LCD.setBacklight(HIGH);
    10f4:	61 e0       	ldi	r22, 0x01	; 1
    10f6:	82 e4       	ldi	r24, 0x42	; 66
    10f8:	96 e0       	ldi	r25, 0x06	; 6
    10fa:	0e 94 11 31 	call	0x6222	; 0x6222 <_ZN17LiquidCrystal_I2C12setBacklightEh>
	MAIN_LCD.begin (20,4);
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	44 e0       	ldi	r20, 0x04	; 4
    1102:	64 e1       	ldi	r22, 0x14	; 20
    1104:	82 e4       	ldi	r24, 0x42	; 66
    1106:	96 e0       	ldi	r25, 0x06	; 6
    1108:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <_ZN17LiquidCrystal_I2C5beginEhhh>
	
	HLT_LCD.setBacklightPin(LCD_BACKLIGHT_PIN,POSITIVE);
    110c:	40 e0       	ldi	r20, 0x00	; 0
    110e:	63 e0       	ldi	r22, 0x03	; 3
    1110:	88 e2       	ldi	r24, 0x28	; 40
    1112:	96 e0       	ldi	r25, 0x06	; 6
    1114:	0e 94 fd 30 	call	0x61fa	; 0x61fa <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>
	HLT_LCD.setBacklight(HIGH);
    1118:	61 e0       	ldi	r22, 0x01	; 1
    111a:	88 e2       	ldi	r24, 0x28	; 40
    111c:	96 e0       	ldi	r25, 0x06	; 6
    111e:	0e 94 11 31 	call	0x6222	; 0x6222 <_ZN17LiquidCrystal_I2C12setBacklightEh>
	HLT_LCD.begin (20,4);
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	44 e0       	ldi	r20, 0x04	; 4
    1126:	64 e1       	ldi	r22, 0x14	; 20
    1128:	88 e2       	ldi	r24, 0x28	; 40
    112a:	96 e0       	ldi	r25, 0x06	; 6
    112c:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <_ZN17LiquidCrystal_I2C5beginEhhh>
	
	MLT_LCD.setBacklightPin(LCD_BACKLIGHT_PIN,POSITIVE);
    1130:	40 e0       	ldi	r20, 0x00	; 0
    1132:	63 e0       	ldi	r22, 0x03	; 3
    1134:	8c e0       	ldi	r24, 0x0C	; 12
    1136:	96 e0       	ldi	r25, 0x06	; 6
    1138:	0e 94 fd 30 	call	0x61fa	; 0x61fa <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>
	MLT_LCD.setBacklight(HIGH);
    113c:	61 e0       	ldi	r22, 0x01	; 1
    113e:	8c e0       	ldi	r24, 0x0C	; 12
    1140:	96 e0       	ldi	r25, 0x06	; 6
    1142:	0e 94 11 31 	call	0x6222	; 0x6222 <_ZN17LiquidCrystal_I2C12setBacklightEh>
	MLT_LCD.begin (20,4);
    1146:	20 e0       	ldi	r18, 0x00	; 0
    1148:	44 e0       	ldi	r20, 0x04	; 4
    114a:	64 e1       	ldi	r22, 0x14	; 20
    114c:	8c e0       	ldi	r24, 0x0C	; 12
    114e:	96 e0       	ldi	r25, 0x06	; 6
    1150:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <_ZN17LiquidCrystal_I2C5beginEhhh>
	
	BK_LCD.setBacklightPin(LCD_BACKLIGHT_PIN,POSITIVE);
    1154:	40 e0       	ldi	r20, 0x00	; 0
    1156:	63 e0       	ldi	r22, 0x03	; 3
    1158:	82 ef       	ldi	r24, 0xF2	; 242
    115a:	95 e0       	ldi	r25, 0x05	; 5
    115c:	0e 94 fd 30 	call	0x61fa	; 0x61fa <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>
	BK_LCD.setBacklight(HIGH);
    1160:	61 e0       	ldi	r22, 0x01	; 1
    1162:	82 ef       	ldi	r24, 0xF2	; 242
    1164:	95 e0       	ldi	r25, 0x05	; 5
    1166:	0e 94 11 31 	call	0x6222	; 0x6222 <_ZN17LiquidCrystal_I2C12setBacklightEh>
	BK_LCD.begin (20,4);
    116a:	20 e0       	ldi	r18, 0x00	; 0
    116c:	44 e0       	ldi	r20, 0x04	; 4
    116e:	64 e1       	ldi	r22, 0x14	; 20
    1170:	82 ef       	ldi	r24, 0xF2	; 242
    1172:	95 e0       	ldi	r25, 0x05	; 5
    1174:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <_ZN17LiquidCrystal_I2C5beginEhhh>
	
	//--Initialize the Encoders-------
	
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.println("Done.");
    1178:	6d ec       	ldi	r22, 0xCD	; 205
    117a:	72 e0       	ldi	r23, 0x02	; 2
    117c:	82 e8       	ldi	r24, 0x82	; 130
    117e:	98 e0       	ldi	r25, 0x08	; 8
    1180:	0e 94 87 3a 	call	0x750e	; 0x750e <_ZN5Print7printlnEPKc>
		Serial.print("Initializing Encoders...");
    1184:	68 e0       	ldi	r22, 0x08	; 8
    1186:	73 e0       	ldi	r23, 0x03	; 3
    1188:	82 e8       	ldi	r24, 0x82	; 130
    118a:	98 e0       	ldi	r25, 0x08	; 8
    118c:	0e 94 4d 3a 	call	0x749a	; 0x749a <_ZN5Print5printEPKc>
  public:
    //****************************
    //  Configuration
    //****************************
    void initialize(unsigned long microseconds=1000000) __attribute__((always_inline)) {
	TCCR1B = _BV(WGM13);        // set mode as phase and frequency correct pwm, stop the timer
    1190:	e1 e8       	ldi	r30, 0x81	; 129
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 e1       	ldi	r24, 0x10	; 16
    1196:	80 83       	st	Z, r24
	TCCR1A = 0;                 // clear control register A 
    1198:	10 92 80 00 	sts	0x0080, r1
	setPeriod(microseconds);
    }
    void setPeriod(unsigned long microseconds) __attribute__((always_inline)) {
	const unsigned long cycles = (F_CPU / 2000000) * microseconds;
	if (cycles < TIMER1_RESOLUTION) {
		clockSelectBits = _BV(CS10);
    119c:	91 e0       	ldi	r25, 0x01	; 1
    119e:	90 93 b9 07 	sts	0x07B9, r25
		pwmPeriod = cycles;
    11a2:	20 e4       	ldi	r18, 0x40	; 64
    11a4:	3f e1       	ldi	r19, 0x1F	; 31
    11a6:	30 93 bb 07 	sts	0x07BB, r19
    11aa:	20 93 ba 07 	sts	0x07BA, r18
		pwmPeriod = cycles / 1024;
	} else {
		clockSelectBits = _BV(CS12) | _BV(CS10);
		pwmPeriod = TIMER1_RESOLUTION - 1;
	}
	ICR1 = pwmPeriod;
    11ae:	30 93 87 00 	sts	0x0087, r19
    11b2:	20 93 86 00 	sts	0x0086, r18
	TCCR1B = _BV(WGM13) | clockSelectBits;
    11b6:	80 91 b9 07 	lds	r24, 0x07B9
    11ba:	80 61       	ori	r24, 0x10	; 16
    11bc:	80 83       	st	Z, r24

    //****************************
    //  Interrupt Function
    //****************************
    void attachInterrupt(void (*isr)()) __attribute__((always_inline)) {
	isrCallback = isr;
    11be:	26 ee       	ldi	r18, 0xE6	; 230
    11c0:	34 e0       	ldi	r19, 0x04	; 4
    11c2:	30 93 b8 07 	sts	0x07B8, r19
    11c6:	20 93 b7 07 	sts	0x07B7, r18
	TIMSK1 = _BV(TOIE1);
    11ca:	90 93 6f 00 	sts	0x006F, r25
	//Attach the Timer
	Timer1.initialize(1000);
	Timer1.attachInterrupt(serviceEncoders);
	
	//--Attach Hardware-------
	HLT_UI->attatchEncoder(HLT_ENC);
    11ce:	60 91 26 06 	lds	r22, 0x0626
    11d2:	70 91 27 06 	lds	r23, 0x0627
    11d6:	80 91 aa 07 	lds	r24, 0x07AA
    11da:	90 91 ab 07 	lds	r25, 0x07AB
    11de:	0e 94 9e 28 	call	0x513c	; 0x513c <_ZN4EZUI14attatchEncoderEP22ClickEncoderWithEvents>
	HLT_UI->attatchLCD(&HLT_LCD);
    11e2:	68 e2       	ldi	r22, 0x28	; 40
    11e4:	76 e0       	ldi	r23, 0x06	; 6
    11e6:	80 91 aa 07 	lds	r24, 0x07AA
    11ea:	90 91 ab 07 	lds	r25, 0x07AB
    11ee:	0e 94 d4 28 	call	0x51a8	; 0x51a8 <_ZN4EZUI10attatchLCDEP17LiquidCrystal_I2C>
	
	MLT_UI->attatchEncoder(MLT_ENC);
    11f2:	60 91 0a 06 	lds	r22, 0x060A
    11f6:	70 91 0b 06 	lds	r23, 0x060B
    11fa:	80 91 ae 07 	lds	r24, 0x07AE
    11fe:	90 91 af 07 	lds	r25, 0x07AF
    1202:	0e 94 9e 28 	call	0x513c	; 0x513c <_ZN4EZUI14attatchEncoderEP22ClickEncoderWithEvents>
	MLT_UI->attatchLCD(&MLT_LCD);
    1206:	6c e0       	ldi	r22, 0x0C	; 12
    1208:	76 e0       	ldi	r23, 0x06	; 6
    120a:	80 91 ae 07 	lds	r24, 0x07AE
    120e:	90 91 af 07 	lds	r25, 0x07AF
    1212:	0e 94 d4 28 	call	0x51a8	; 0x51a8 <_ZN4EZUI10attatchLCDEP17LiquidCrystal_I2C>
	
	BK_UI->attatchEncoder(BK_ENC);
    1216:	60 91 f0 05 	lds	r22, 0x05F0
    121a:	70 91 f1 05 	lds	r23, 0x05F1
    121e:	80 91 ee 05 	lds	r24, 0x05EE
    1222:	90 91 ef 05 	lds	r25, 0x05EF
    1226:	0e 94 9e 28 	call	0x513c	; 0x513c <_ZN4EZUI14attatchEncoderEP22ClickEncoderWithEvents>
	BK_UI->attatchLCD(&BK_LCD);
    122a:	62 ef       	ldi	r22, 0xF2	; 242
    122c:	75 e0       	ldi	r23, 0x05	; 5
    122e:	80 91 ee 05 	lds	r24, 0x05EE
    1232:	90 91 ef 05 	lds	r25, 0x05EF
    1236:	0e 94 d4 28 	call	0x51a8	; 0x51a8 <_ZN4EZUI10attatchLCDEP17LiquidCrystal_I2C>
	
	//Set all Solenoids to output high which is "off" mode
	RC1_OUT1.Write(1);
    123a:	61 e0       	ldi	r22, 0x01	; 1
    123c:	70 e0       	ldi	r23, 0x00	; 0
    123e:	89 e5       	ldi	r24, 0x59	; 89
    1240:	97 e0       	ldi	r25, 0x07	; 7
    1242:	42 da       	rcall	.-2940   	; 0x6c8 <_ZN9DigitalIO5WriteEi>
	RC1_OUT2.Write(1);
    1244:	61 e0       	ldi	r22, 0x01	; 1
    1246:	70 e0       	ldi	r23, 0x00	; 0
    1248:	88 e4       	ldi	r24, 0x48	; 72
    124a:	97 e0       	ldi	r25, 0x07	; 7
    124c:	3d da       	rcall	.-2950   	; 0x6c8 <_ZN9DigitalIO5WriteEi>
	RC1_OUT3.Write(1);
    124e:	61 e0       	ldi	r22, 0x01	; 1
    1250:	70 e0       	ldi	r23, 0x00	; 0
    1252:	87 e3       	ldi	r24, 0x37	; 55
    1254:	97 e0       	ldi	r25, 0x07	; 7
    1256:	38 da       	rcall	.-2960   	; 0x6c8 <_ZN9DigitalIO5WriteEi>
	RC1_OUT4.Write(1);
    1258:	61 e0       	ldi	r22, 0x01	; 1
    125a:	70 e0       	ldi	r23, 0x00	; 0
    125c:	86 e2       	ldi	r24, 0x26	; 38
    125e:	97 e0       	ldi	r25, 0x07	; 7
    1260:	33 da       	rcall	.-2970   	; 0x6c8 <_ZN9DigitalIO5WriteEi>
	RC1_OUT5.Write(1);
    1262:	61 e0       	ldi	r22, 0x01	; 1
    1264:	70 e0       	ldi	r23, 0x00	; 0
    1266:	85 e1       	ldi	r24, 0x15	; 21
    1268:	97 e0       	ldi	r25, 0x07	; 7
    126a:	2e da       	rcall	.-2980   	; 0x6c8 <_ZN9DigitalIO5WriteEi>
	RC1_OUT6.Write(1);
    126c:	61 e0       	ldi	r22, 0x01	; 1
    126e:	70 e0       	ldi	r23, 0x00	; 0
    1270:	84 e0       	ldi	r24, 0x04	; 4
    1272:	97 e0       	ldi	r25, 0x07	; 7
    1274:	29 da       	rcall	.-2990   	; 0x6c8 <_ZN9DigitalIO5WriteEi>
	RC1_OUT7.Write(1);
    1276:	61 e0       	ldi	r22, 0x01	; 1
    1278:	70 e0       	ldi	r23, 0x00	; 0
    127a:	83 ef       	ldi	r24, 0xF3	; 243
    127c:	96 e0       	ldi	r25, 0x06	; 6
    127e:	24 da       	rcall	.-3000   	; 0x6c8 <_ZN9DigitalIO5WriteEi>
	RC1_OUT8.Write(1);
    1280:	61 e0       	ldi	r22, 0x01	; 1
    1282:	70 e0       	ldi	r23, 0x00	; 0
    1284:	82 ee       	ldi	r24, 0xE2	; 226
    1286:	96 e0       	ldi	r25, 0x06	; 6
    1288:	1f da       	rcall	.-3010   	; 0x6c8 <_ZN9DigitalIO5WriteEi>
	RC2_OUT1.Write(1);
    128a:	61 e0       	ldi	r22, 0x01	; 1
    128c:	70 e0       	ldi	r23, 0x00	; 0
    128e:	81 ed       	ldi	r24, 0xD1	; 209
    1290:	96 e0       	ldi	r25, 0x06	; 6
    1292:	1a da       	rcall	.-3020   	; 0x6c8 <_ZN9DigitalIO5WriteEi>
	RC2_OUT2.Write(1);
    1294:	61 e0       	ldi	r22, 0x01	; 1
    1296:	70 e0       	ldi	r23, 0x00	; 0
    1298:	80 ec       	ldi	r24, 0xC0	; 192
    129a:	96 e0       	ldi	r25, 0x06	; 6
    129c:	15 da       	rcall	.-3030   	; 0x6c8 <_ZN9DigitalIO5WriteEi>
	RC2_OUT3.Write(1);
    129e:	61 e0       	ldi	r22, 0x01	; 1
    12a0:	70 e0       	ldi	r23, 0x00	; 0
    12a2:	8f ea       	ldi	r24, 0xAF	; 175
    12a4:	96 e0       	ldi	r25, 0x06	; 6
    12a6:	10 da       	rcall	.-3040   	; 0x6c8 <_ZN9DigitalIO5WriteEi>
	RC2_OUT4.Write(1);
    12a8:	61 e0       	ldi	r22, 0x01	; 1
    12aa:	70 e0       	ldi	r23, 0x00	; 0
    12ac:	8e e9       	ldi	r24, 0x9E	; 158
    12ae:	96 e0       	ldi	r25, 0x06	; 6
    12b0:	0b da       	rcall	.-3050   	; 0x6c8 <_ZN9DigitalIO5WriteEi>
	RC2_OUT5.Write(1);
    12b2:	61 e0       	ldi	r22, 0x01	; 1
    12b4:	70 e0       	ldi	r23, 0x00	; 0
    12b6:	8d e8       	ldi	r24, 0x8D	; 141
    12b8:	96 e0       	ldi	r25, 0x06	; 6
    12ba:	06 da       	rcall	.-3060   	; 0x6c8 <_ZN9DigitalIO5WriteEi>
	RC2_OUT6.Write(1);
    12bc:	61 e0       	ldi	r22, 0x01	; 1
    12be:	70 e0       	ldi	r23, 0x00	; 0
    12c0:	8c e7       	ldi	r24, 0x7C	; 124
    12c2:	96 e0       	ldi	r25, 0x06	; 6
    12c4:	01 da       	rcall	.-3070   	; 0x6c8 <_ZN9DigitalIO5WriteEi>
	RC2_OUT7.Write(1);
    12c6:	61 e0       	ldi	r22, 0x01	; 1
    12c8:	70 e0       	ldi	r23, 0x00	; 0
    12ca:	8b e6       	ldi	r24, 0x6B	; 107
    12cc:	96 e0       	ldi	r25, 0x06	; 6
    12ce:	fc d9       	rcall	.-3080   	; 0x6c8 <_ZN9DigitalIO5WriteEi>
	RC2_OUT8.Write(1);
    12d0:	61 e0       	ldi	r22, 0x01	; 1
    12d2:	70 e0       	ldi	r23, 0x00	; 0
    12d4:	8a e5       	ldi	r24, 0x5A	; 90
    12d6:	96 e0       	ldi	r25, 0x06	; 6
    12d8:	f7 d9       	rcall	.-3090   	; 0x6c8 <_ZN9DigitalIO5WriteEi>
	
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.println("Done.");
    12da:	6d ec       	ldi	r22, 0xCD	; 205
    12dc:	72 e0       	ldi	r23, 0x02	; 2
    12de:	82 e8       	ldi	r24, 0x82	; 130
    12e0:	98 e0       	ldi	r25, 0x08	; 8
    12e2:	0c 94 87 3a 	jmp	0x750e	; 0x750e <_ZN5Print7printlnEPKc>
    12e6:	08 95       	ret

000012e8 <_Z11HLT_UI_initv>:

#include "HLT_UI.h"

EZUI *HLT_UI = new EZUI("HLT");

void HLT_UI_init(){
    12e8:	af 92       	push	r10
    12ea:	bf 92       	push	r11
    12ec:	cf 92       	push	r12
    12ee:	df 92       	push	r13
    12f0:	ef 92       	push	r14
    12f2:	ff 92       	push	r15
    12f4:	0f 93       	push	r16
    12f6:	1f 93       	push	r17
    12f8:	cf 93       	push	r28
    12fa:	df 93       	push	r29
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
    1300:	a4 97       	sbiw	r28, 0x24	; 36
    1302:	0f b6       	in	r0, 0x3f	; 63
    1304:	f8 94       	cli
    1306:	de bf       	out	0x3e, r29	; 62
    1308:	0f be       	out	0x3f, r0	; 63
    130a:	cd bf       	out	0x3d, r28	; 61
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.print("Initializing UI - " + HLT_UI->Name + "...");
    130c:	00 91 aa 07 	lds	r16, 0x07AA
    1310:	10 91 ab 07 	lds	r17, 0x07AB
    1314:	0c 5f       	subi	r16, 0xFC	; 252
    1316:	1f 4f       	sbci	r17, 0xFF	; 255
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1318:	69 e9       	ldi	r22, 0x99	; 153
    131a:	72 e0       	ldi	r23, 0x02	; 2
    131c:	ce 01       	movw	r24, r28
    131e:	4f 96       	adiw	r24, 0x1f	; 31
    1320:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    1324:	b8 01       	movw	r22, r16
    1326:	ce 01       	movw	r24, r28
    1328:	4f 96       	adiw	r24, 0x1f	; 31
    132a:	0e 94 ee 41 	call	0x83dc	; 0x83dc <_ZplRK15StringSumHelperRK6String>
    132e:	68 e6       	ldi	r22, 0x68	; 104
    1330:	74 e0       	ldi	r23, 0x04	; 4
    1332:	0e 94 ff 41 	call	0x83fe	; 0x83fe <_ZplRK15StringSumHelperPKc>
    1336:	bc 01       	movw	r22, r24
    1338:	82 e8       	ldi	r24, 0x82	; 130
    133a:	98 e0       	ldi	r25, 0x08	; 8
    133c:	0e 94 3e 3a 	call	0x747c	; 0x747c <_ZN5Print5printERK6String>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1340:	ce 01       	movw	r24, r28
    1342:	4f 96       	adiw	r24, 0x1f	; 31
    1344:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
	#endif
	
	/***************************************
	  Setup + Initialization
	***************************************/
	HLT_UI->attatchEncoder(HLT_ENC);
    1348:	60 91 26 06 	lds	r22, 0x0626
    134c:	70 91 27 06 	lds	r23, 0x0627
    1350:	80 91 aa 07 	lds	r24, 0x07AA
    1354:	90 91 ab 07 	lds	r25, 0x07AB
    1358:	0e 94 9e 28 	call	0x513c	; 0x513c <_ZN4EZUI14attatchEncoderEP22ClickEncoderWithEvents>
	HLT_UI->attatchLCD(&HLT_LCD);
    135c:	68 e2       	ldi	r22, 0x28	; 40
    135e:	76 e0       	ldi	r23, 0x06	; 6
    1360:	80 91 aa 07 	lds	r24, 0x07AA
    1364:	90 91 ab 07 	lds	r25, 0x07AB
    1368:	0e 94 d4 28 	call	0x51a8	; 0x51a8 <_ZN4EZUI10attatchLCDEP17LiquidCrystal_I2C>
	
	EZUI_Menu * MainMenu = new EZUI_Menu("HLT-Main-Menu");
    136c:	61 e2       	ldi	r22, 0x21	; 33
    136e:	73 e0       	ldi	r23, 0x03	; 3
    1370:	ce 01       	movw	r24, r28
    1372:	49 96       	adiw	r24, 0x19	; 25
    1374:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    1378:	8d e1       	ldi	r24, 0x1D	; 29
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    1380:	8c 01       	movw	r16, r24
    1382:	be 01       	movw	r22, r28
    1384:	67 5e       	subi	r22, 0xE7	; 231
    1386:	7f 4f       	sbci	r23, 0xFF	; 255
    1388:	9f d6       	rcall	.+3390   	; 0x20c8 <_ZN9EZUI_MenuC1E6String>
    138a:	ce 01       	movw	r24, r28
    138c:	49 96       	adiw	r24, 0x19	; 25
    138e:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
	
	EZUI_Page * TestPage = new EZUI_Page((String)("TestPage"));
    1392:	69 eb       	ldi	r22, 0xB9	; 185
    1394:	72 e0       	ldi	r23, 0x02	; 2
    1396:	ce 01       	movw	r24, r28
    1398:	43 96       	adiw	r24, 0x13	; 19
    139a:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    139e:	8e e2       	ldi	r24, 0x2E	; 46
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    13a6:	7c 01       	movw	r14, r24
    13a8:	be 01       	movw	r22, r28
    13aa:	6d 5e       	subi	r22, 0xED	; 237
    13ac:	7f 4f       	sbci	r23, 0xFF	; 255
    13ae:	0e 94 21 1a 	call	0x3442	; 0x3442 <_ZN9EZUI_PageC1E6String>
    13b2:	ce 01       	movw	r24, r28
    13b4:	43 96       	adiw	r24, 0x13	; 19
    13b6:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
	TestPage->addItem(new EZUI_PageItem(0,3,new EZUI_Control_Link("Back",MainMenu)));
    13ba:	62 ec       	ldi	r22, 0xC2	; 194
    13bc:	72 e0       	ldi	r23, 0x02	; 2
    13be:	ce 01       	movw	r24, r28
    13c0:	0d 96       	adiw	r24, 0x0d	; 13
    13c2:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    13c6:	8a e0       	ldi	r24, 0x0A	; 10
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    13ce:	5c 01       	movw	r10, r24
    13d0:	a8 01       	movw	r20, r16
    13d2:	be 01       	movw	r22, r28
    13d4:	63 5f       	subi	r22, 0xF3	; 243
    13d6:	7f 4f       	sbci	r23, 0xFF	; 255
    13d8:	d4 d9       	rcall	.-3160   	; 0x782 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Menu>
    13da:	8e e3       	ldi	r24, 0x3E	; 62
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    13e2:	6c 01       	movw	r12, r24
    13e4:	95 01       	movw	r18, r10
    13e6:	43 e0       	ldi	r20, 0x03	; 3
    13e8:	60 e0       	ldi	r22, 0x00	; 0
    13ea:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <_ZN13EZUI_PageItemC1EhhP17EZUI_Control_Link>
    13ee:	b6 01       	movw	r22, r12
    13f0:	c7 01       	movw	r24, r14
    13f2:	0e 94 6d 1a 	call	0x34da	; 0x34da <_ZN9EZUI_Page7addItemEP13EZUI_PageItem>
    13f6:	ce 01       	movw	r24, r28
    13f8:	0d 96       	adiw	r24, 0x0d	; 13
    13fa:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
	
	MainMenu->addItem(new EZUI_Control_Link("TestPage",TestPage));
    13fe:	69 eb       	ldi	r22, 0xB9	; 185
    1400:	72 e0       	ldi	r23, 0x02	; 2
    1402:	ce 01       	movw	r24, r28
    1404:	07 96       	adiw	r24, 0x07	; 7
    1406:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    140a:	8a e0       	ldi	r24, 0x0A	; 10
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    1412:	6c 01       	movw	r12, r24
    1414:	a7 01       	movw	r20, r14
    1416:	be 01       	movw	r22, r28
    1418:	69 5f       	subi	r22, 0xF9	; 249
    141a:	7f 4f       	sbci	r23, 0xFF	; 255
    141c:	d2 d9       	rcall	.-3164   	; 0x7c2 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Page>
    141e:	b6 01       	movw	r22, r12
    1420:	c8 01       	movw	r24, r16
    1422:	80 d6       	rcall	.+3328   	; 0x2124 <_ZN9EZUI_Menu7addItemEP17EZUI_Control_Link>
    1424:	ce 01       	movw	r24, r28
    1426:	07 96       	adiw	r24, 0x07	; 7
    1428:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
	MainMenu->addItem(new EZUI_Control_Link("Test2",MainMenu));
    142c:	67 ec       	ldi	r22, 0xC7	; 199
    142e:	72 e0       	ldi	r23, 0x02	; 2
    1430:	ce 01       	movw	r24, r28
    1432:	01 96       	adiw	r24, 0x01	; 1
    1434:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    1438:	8a e0       	ldi	r24, 0x0A	; 10
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    1440:	7c 01       	movw	r14, r24
    1442:	a8 01       	movw	r20, r16
    1444:	be 01       	movw	r22, r28
    1446:	6f 5f       	subi	r22, 0xFF	; 255
    1448:	7f 4f       	sbci	r23, 0xFF	; 255
    144a:	9b d9       	rcall	.-3274   	; 0x782 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Menu>
    144c:	b7 01       	movw	r22, r14
    144e:	c8 01       	movw	r24, r16
    1450:	69 d6       	rcall	.+3282   	; 0x2124 <_ZN9EZUI_Menu7addItemEP17EZUI_Control_Link>
    1452:	ce 01       	movw	r24, r28
    1454:	01 96       	adiw	r24, 0x01	; 1
    1456:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
	***************************************/
	//MainMenu->addItem(new EZUI_Control_Link("Monitor",MonitorPage));
	//MainMenu->addItem(new EZUI_Control_Link("Monitor",SettingsPage));
	//MainMenu->addItem(new EZUI_Control_Link("Diagnostics",DiagPage));

	HLT_UI->setDisplay(MainMenu);
    145a:	b8 01       	movw	r22, r16
    145c:	80 91 aa 07 	lds	r24, 0x07AA
    1460:	90 91 ab 07 	lds	r25, 0x07AB
    1464:	0e 94 28 29 	call	0x5250	; 0x5250 <_ZN4EZUI10setDisplayEP9EZUI_Menu>
	
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.println("Done.");
    1468:	6d ec       	ldi	r22, 0xCD	; 205
    146a:	72 e0       	ldi	r23, 0x02	; 2
    146c:	82 e8       	ldi	r24, 0x82	; 130
    146e:	98 e0       	ldi	r25, 0x08	; 8
    1470:	0e 94 87 3a 	call	0x750e	; 0x750e <_ZN5Print7printlnEPKc>
	#endif
}
    1474:	a4 96       	adiw	r28, 0x24	; 36
    1476:	0f b6       	in	r0, 0x3f	; 63
    1478:	f8 94       	cli
    147a:	de bf       	out	0x3e, r29	; 62
    147c:	0f be       	out	0x3f, r0	; 63
    147e:	cd bf       	out	0x3d, r28	; 61
    1480:	df 91       	pop	r29
    1482:	cf 91       	pop	r28
    1484:	1f 91       	pop	r17
    1486:	0f 91       	pop	r16
    1488:	ff 90       	pop	r15
    148a:	ef 90       	pop	r14
    148c:	df 90       	pop	r13
    148e:	cf 90       	pop	r12
    1490:	bf 90       	pop	r11
    1492:	af 90       	pop	r10
    1494:	08 95       	ret

00001496 <_GLOBAL__sub_I_HLT_UI>:
    1496:	0f 93       	push	r16
    1498:	1f 93       	push	r17
    149a:	cf 93       	push	r28
    149c:	df 93       	push	r29
    149e:	00 d0       	rcall	.+0      	; 0x14a0 <_GLOBAL__sub_I_HLT_UI+0xa>
    14a0:	00 d0       	rcall	.+0      	; 0x14a2 <_GLOBAL__sub_I_HLT_UI+0xc>
    14a2:	cd b7       	in	r28, 0x3d	; 61
    14a4:	de b7       	in	r29, 0x3e	; 62
 * ----------------------------------------------------------------
 */

#include "HLT_UI.h"

EZUI *HLT_UI = new EZUI("HLT");
    14a6:	6f e2       	ldi	r22, 0x2F	; 47
    14a8:	73 e0       	ldi	r23, 0x03	; 3
    14aa:	ce 01       	movw	r24, r28
    14ac:	01 96       	adiw	r24, 0x01	; 1
    14ae:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    14b2:	86 e1       	ldi	r24, 0x16	; 22
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    14ba:	8c 01       	movw	r16, r24
    14bc:	be 01       	movw	r22, r28
    14be:	6f 5f       	subi	r22, 0xFF	; 255
    14c0:	7f 4f       	sbci	r23, 0xFF	; 255
    14c2:	0e 94 7b 28 	call	0x50f6	; 0x50f6 <_ZN4EZUIC1E6String>
    14c6:	10 93 ab 07 	sts	0x07AB, r17
    14ca:	00 93 aa 07 	sts	0x07AA, r16
    14ce:	ce 01       	movw	r24, r28
    14d0:	01 96       	adiw	r24, 0x01	; 1
    14d2:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
	HLT_UI->setDisplay(MainMenu);
	
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.println("Done.");
	#endif
}
    14d6:	26 96       	adiw	r28, 0x06	; 6
    14d8:	0f b6       	in	r0, 0x3f	; 63
    14da:	f8 94       	cli
    14dc:	de bf       	out	0x3e, r29	; 62
    14de:	0f be       	out	0x3f, r0	; 63
    14e0:	cd bf       	out	0x3d, r28	; 61
    14e2:	df 91       	pop	r29
    14e4:	cf 91       	pop	r28
    14e6:	1f 91       	pop	r17
    14e8:	0f 91       	pop	r16
    14ea:	08 95       	ret

000014ec <_Z12MAIN_UI_initv>:

#include "MAIN_UI.h"

EZUI *MAIN_UI = new EZUI("MAIN");

void MAIN_UI_init(){
    14ec:	4f 92       	push	r4
    14ee:	5f 92       	push	r5
    14f0:	6f 92       	push	r6
    14f2:	7f 92       	push	r7
    14f4:	8f 92       	push	r8
    14f6:	9f 92       	push	r9
    14f8:	af 92       	push	r10
    14fa:	bf 92       	push	r11
    14fc:	cf 92       	push	r12
    14fe:	df 92       	push	r13
    1500:	ef 92       	push	r14
    1502:	ff 92       	push	r15
    1504:	0f 93       	push	r16
    1506:	1f 93       	push	r17
    1508:	cf 93       	push	r28
    150a:	df 93       	push	r29
    150c:	cd b7       	in	r28, 0x3d	; 61
    150e:	de b7       	in	r29, 0x3e	; 62
    1510:	c0 59       	subi	r28, 0x90	; 144
    1512:	d1 09       	sbc	r29, r1
    1514:	0f b6       	in	r0, 0x3f	; 63
    1516:	f8 94       	cli
    1518:	de bf       	out	0x3e, r29	; 62
    151a:	0f be       	out	0x3f, r0	; 63
    151c:	cd bf       	out	0x3d, r28	; 61
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.print("Initializing UI - " + MAIN_UI->Name + "...");
    151e:	00 91 ac 07 	lds	r16, 0x07AC
    1522:	10 91 ad 07 	lds	r17, 0x07AD
    1526:	0c 5f       	subi	r16, 0xFC	; 252
    1528:	1f 4f       	sbci	r17, 0xFF	; 255
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    152a:	69 e9       	ldi	r22, 0x99	; 153
    152c:	72 e0       	ldi	r23, 0x02	; 2
    152e:	ce 01       	movw	r24, r28
    1530:	85 57       	subi	r24, 0x75	; 117
    1532:	9f 4f       	sbci	r25, 0xFF	; 255
    1534:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    1538:	b8 01       	movw	r22, r16
    153a:	ce 01       	movw	r24, r28
    153c:	85 57       	subi	r24, 0x75	; 117
    153e:	9f 4f       	sbci	r25, 0xFF	; 255
    1540:	0e 94 ee 41 	call	0x83dc	; 0x83dc <_ZplRK15StringSumHelperRK6String>
    1544:	68 e6       	ldi	r22, 0x68	; 104
    1546:	74 e0       	ldi	r23, 0x04	; 4
    1548:	0e 94 ff 41 	call	0x83fe	; 0x83fe <_ZplRK15StringSumHelperPKc>
    154c:	bc 01       	movw	r22, r24
    154e:	82 e8       	ldi	r24, 0x82	; 130
    1550:	98 e0       	ldi	r25, 0x08	; 8
    1552:	0e 94 3e 3a 	call	0x747c	; 0x747c <_ZN5Print5printERK6String>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1556:	ce 01       	movw	r24, r28
    1558:	85 57       	subi	r24, 0x75	; 117
    155a:	9f 4f       	sbci	r25, 0xFF	; 255
    155c:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
	#endif
	
	EZUI_Menu * MainMenu = new EZUI_Menu("Main");
    1560:	63 e3       	ldi	r22, 0x33	; 51
    1562:	73 e0       	ldi	r23, 0x03	; 3
    1564:	ce 01       	movw	r24, r28
    1566:	8b 57       	subi	r24, 0x7B	; 123
    1568:	9f 4f       	sbci	r25, 0xFF	; 255
    156a:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    156e:	8d e1       	ldi	r24, 0x1D	; 29
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    1576:	8c 01       	movw	r16, r24
    1578:	be 01       	movw	r22, r28
    157a:	6b 57       	subi	r22, 0x7B	; 123
    157c:	7f 4f       	sbci	r23, 0xFF	; 255
    157e:	a4 d5       	rcall	.+2888   	; 0x20c8 <_ZN9EZUI_MenuC1E6String>
    1580:	ce 01       	movw	r24, r28
    1582:	8b 57       	subi	r24, 0x7B	; 123
    1584:	9f 4f       	sbci	r25, 0xFF	; 255
    1586:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
	
	/***************************************
	  Setup + Initialization
	***************************************/
	MAIN_UI->attatchEncoder(MAIN_ENC);
    158a:	60 91 40 06 	lds	r22, 0x0640
    158e:	70 91 41 06 	lds	r23, 0x0641
    1592:	80 91 ac 07 	lds	r24, 0x07AC
    1596:	90 91 ad 07 	lds	r25, 0x07AD
    159a:	0e 94 9e 28 	call	0x513c	; 0x513c <_ZN4EZUI14attatchEncoderEP22ClickEncoderWithEvents>
	MAIN_UI->attatchLCD(&MAIN_LCD);
    159e:	62 e4       	ldi	r22, 0x42	; 66
    15a0:	76 e0       	ldi	r23, 0x06	; 6
    15a2:	80 91 ac 07 	lds	r24, 0x07AC
    15a6:	90 91 ad 07 	lds	r25, 0x07AD
    15aa:	0e 94 d4 28 	call	0x51a8	; 0x51a8 <_ZN4EZUI10attatchLCDEP17LiquidCrystal_I2C>
	MAIN_UI->setDisplay(MainMenu);
    15ae:	b8 01       	movw	r22, r16
    15b0:	80 91 ac 07 	lds	r24, 0x07AC
    15b4:	90 91 ad 07 	lds	r25, 0x07AD
    15b8:	0e 94 28 29 	call	0x5250	; 0x5250 <_ZN4EZUI10setDisplayEP9EZUI_Menu>
	
	/***************************************
	  Alarm Test Menu
	***************************************/
	
	EZUI_Menu * MenuAlarmTest = new EZUI_Menu(F("Alarm Test"));	
    15bc:	67 ec       	ldi	r22, 0xC7	; 199
    15be:	72 e0       	ldi	r23, 0x02	; 2
    15c0:	ce 01       	movw	r24, r28
    15c2:	81 58       	subi	r24, 0x81	; 129
    15c4:	9f 4f       	sbci	r25, 0xFF	; 255
    15c6:	0e 94 b7 41 	call	0x836e	; 0x836e <_ZN6StringC1EPK19__FlashStringHelper>
    15ca:	8d e1       	ldi	r24, 0x1D	; 29
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    15d2:	7c 01       	movw	r14, r24
    15d4:	be 01       	movw	r22, r28
    15d6:	61 58       	subi	r22, 0x81	; 129
    15d8:	7f 4f       	sbci	r23, 0xFF	; 255
    15da:	76 d5       	rcall	.+2796   	; 0x20c8 <_ZN9EZUI_MenuC1E6String>
    15dc:	ce 01       	movw	r24, r28
    15de:	81 58       	subi	r24, 0x81	; 129
    15e0:	9f 4f       	sbci	r25, 0xFF	; 255
    15e2:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
	//MenuAlarmTest->addItem(new EZUI_Control_ToggleOption("Timer Alarm",TimerAlarmDIO));
	//MenuAlarmTest->addItem(new EZUI_Control_ToggleOption("Temp Alarm",TempAlarmDIO));
	MenuAlarmTest->addItem(new EZUI_Control_Link(F("Back"),MainMenu));
    15e6:	62 ec       	ldi	r22, 0xC2	; 194
    15e8:	72 e0       	ldi	r23, 0x02	; 2
    15ea:	ce 01       	movw	r24, r28
    15ec:	87 58       	subi	r24, 0x87	; 135
    15ee:	9f 4f       	sbci	r25, 0xFF	; 255
    15f0:	0e 94 b7 41 	call	0x836e	; 0x836e <_ZN6StringC1EPK19__FlashStringHelper>
    15f4:	8a e0       	ldi	r24, 0x0A	; 10
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    15fc:	6c 01       	movw	r12, r24
    15fe:	a8 01       	movw	r20, r16
    1600:	be 01       	movw	r22, r28
    1602:	67 58       	subi	r22, 0x87	; 135
    1604:	7f 4f       	sbci	r23, 0xFF	; 255
    1606:	bd d8       	rcall	.-3718   	; 0x782 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Menu>
    1608:	b6 01       	movw	r22, r12
    160a:	c7 01       	movw	r24, r14
    160c:	8b d5       	rcall	.+2838   	; 0x2124 <_ZN9EZUI_Menu7addItemEP17EZUI_Control_Link>
    160e:	ce 01       	movw	r24, r28
    1610:	87 58       	subi	r24, 0x87	; 135
    1612:	9f 4f       	sbci	r25, 0xFF	; 255
    1614:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
	
	/***************************************
	  Analogs
	***************************************/
	
	EZUI_Page * Analogs_0_to_5 = new EZUI_Page((String)("Analogs 0-5"));
    1618:	68 e3       	ldi	r22, 0x38	; 56
    161a:	73 e0       	ldi	r23, 0x03	; 3
    161c:	ce 01       	movw	r24, r28
    161e:	8d 58       	subi	r24, 0x8D	; 141
    1620:	9f 4f       	sbci	r25, 0xFF	; 255
    1622:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    1626:	8e e2       	ldi	r24, 0x2E	; 46
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    162e:	7c 01       	movw	r14, r24
    1630:	be 01       	movw	r22, r28
    1632:	6d 58       	subi	r22, 0x8D	; 141
    1634:	7f 4f       	sbci	r23, 0xFF	; 255
    1636:	0e 94 21 1a 	call	0x3442	; 0x3442 <_ZN9EZUI_PageC1E6String>
    163a:	ce 01       	movw	r24, r28
    163c:	8d 58       	subi	r24, 0x8D	; 141
    163e:	9f 4f       	sbci	r25, 0xFF	; 255
    1640:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
	Analogs_0_to_5->addItem(new EZUI_PageItem(0,0,(String)(" A0:")));
    1644:	64 e4       	ldi	r22, 0x44	; 68
    1646:	73 e0       	ldi	r23, 0x03	; 3
    1648:	ce 01       	movw	r24, r28
    164a:	83 59       	subi	r24, 0x93	; 147
    164c:	9f 4f       	sbci	r25, 0xFF	; 255
    164e:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    1652:	8e e3       	ldi	r24, 0x3E	; 62
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    165a:	6c 01       	movw	r12, r24
    165c:	9e 01       	movw	r18, r28
    165e:	23 59       	subi	r18, 0x93	; 147
    1660:	3f 4f       	sbci	r19, 0xFF	; 255
    1662:	40 e0       	ldi	r20, 0x00	; 0
    1664:	60 e0       	ldi	r22, 0x00	; 0
    1666:	0e 94 1d 25 	call	0x4a3a	; 0x4a3a <_ZN13EZUI_PageItemC1Ehh6String>
    166a:	b6 01       	movw	r22, r12
    166c:	c7 01       	movw	r24, r14
    166e:	0e 94 6d 1a 	call	0x34da	; 0x34da <_ZN9EZUI_Page7addItemEP13EZUI_PageItem>
    1672:	ce 01       	movw	r24, r28
    1674:	83 59       	subi	r24, 0x93	; 147
    1676:	9f 4f       	sbci	r25, 0xFF	; 255
    1678:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
	Analogs_0_to_5->addItem(new EZUI_PageItem(4,0,&analog0));
    167c:	8e e3       	ldi	r24, 0x3E	; 62
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    1684:	6c 01       	movw	r12, r24
    1686:	26 ea       	ldi	r18, 0xA6	; 166
    1688:	37 e0       	ldi	r19, 0x07	; 7
    168a:	40 e0       	ldi	r20, 0x00	; 0
    168c:	64 e0       	ldi	r22, 0x04	; 4
    168e:	0e 94 7c 25 	call	0x4af8	; 0x4af8 <_ZN13EZUI_PageItemC1EhhPf>
    1692:	b6 01       	movw	r22, r12
    1694:	c7 01       	movw	r24, r14
    1696:	0e 94 6d 1a 	call	0x34da	; 0x34da <_ZN9EZUI_Page7addItemEP13EZUI_PageItem>
	Analogs_0_to_5->addItem(new EZUI_PageItem(0,1,(String)(" A1:")));
    169a:	69 e4       	ldi	r22, 0x49	; 73
    169c:	73 e0       	ldi	r23, 0x03	; 3
    169e:	ce 01       	movw	r24, r28
    16a0:	89 59       	subi	r24, 0x99	; 153
    16a2:	9f 4f       	sbci	r25, 0xFF	; 255
    16a4:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    16a8:	8e e3       	ldi	r24, 0x3E	; 62
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    16b0:	6c 01       	movw	r12, r24
    16b2:	9e 01       	movw	r18, r28
    16b4:	29 59       	subi	r18, 0x99	; 153
    16b6:	3f 4f       	sbci	r19, 0xFF	; 255
    16b8:	41 e0       	ldi	r20, 0x01	; 1
    16ba:	60 e0       	ldi	r22, 0x00	; 0
    16bc:	0e 94 1d 25 	call	0x4a3a	; 0x4a3a <_ZN13EZUI_PageItemC1Ehh6String>
    16c0:	b6 01       	movw	r22, r12
    16c2:	c7 01       	movw	r24, r14
    16c4:	0e 94 6d 1a 	call	0x34da	; 0x34da <_ZN9EZUI_Page7addItemEP13EZUI_PageItem>
    16c8:	ce 01       	movw	r24, r28
    16ca:	89 59       	subi	r24, 0x99	; 153
    16cc:	9f 4f       	sbci	r25, 0xFF	; 255
    16ce:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
	Analogs_0_to_5->addItem(new EZUI_PageItem(4,1,&analog1));
    16d2:	8e e3       	ldi	r24, 0x3E	; 62
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    16da:	6c 01       	movw	r12, r24
    16dc:	22 ea       	ldi	r18, 0xA2	; 162
    16de:	37 e0       	ldi	r19, 0x07	; 7
    16e0:	41 e0       	ldi	r20, 0x01	; 1
    16e2:	64 e0       	ldi	r22, 0x04	; 4
    16e4:	0e 94 7c 25 	call	0x4af8	; 0x4af8 <_ZN13EZUI_PageItemC1EhhPf>
    16e8:	b6 01       	movw	r22, r12
    16ea:	c7 01       	movw	r24, r14
    16ec:	0e 94 6d 1a 	call	0x34da	; 0x34da <_ZN9EZUI_Page7addItemEP13EZUI_PageItem>
	Analogs_0_to_5->addItem(new EZUI_PageItem(0,2,(String)(" A2:")));
    16f0:	6e e4       	ldi	r22, 0x4E	; 78
    16f2:	73 e0       	ldi	r23, 0x03	; 3
    16f4:	ce 01       	movw	r24, r28
    16f6:	8f 59       	subi	r24, 0x9F	; 159
    16f8:	9f 4f       	sbci	r25, 0xFF	; 255
    16fa:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    16fe:	8e e3       	ldi	r24, 0x3E	; 62
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    1706:	6c 01       	movw	r12, r24
    1708:	9e 01       	movw	r18, r28
    170a:	2f 59       	subi	r18, 0x9F	; 159
    170c:	3f 4f       	sbci	r19, 0xFF	; 255
    170e:	42 e0       	ldi	r20, 0x02	; 2
    1710:	60 e0       	ldi	r22, 0x00	; 0
    1712:	0e 94 1d 25 	call	0x4a3a	; 0x4a3a <_ZN13EZUI_PageItemC1Ehh6String>
    1716:	b6 01       	movw	r22, r12
    1718:	c7 01       	movw	r24, r14
    171a:	0e 94 6d 1a 	call	0x34da	; 0x34da <_ZN9EZUI_Page7addItemEP13EZUI_PageItem>
    171e:	ce 01       	movw	r24, r28
    1720:	8f 59       	subi	r24, 0x9F	; 159
    1722:	9f 4f       	sbci	r25, 0xFF	; 255
    1724:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
	Analogs_0_to_5->addItem(new EZUI_PageItem(4,2,&analog2));/*
    1728:	8e e3       	ldi	r24, 0x3E	; 62
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    1730:	6c 01       	movw	r12, r24
    1732:	2e e9       	ldi	r18, 0x9E	; 158
    1734:	37 e0       	ldi	r19, 0x07	; 7
    1736:	42 e0       	ldi	r20, 0x02	; 2
    1738:	64 e0       	ldi	r22, 0x04	; 4
    173a:	0e 94 7c 25 	call	0x4af8	; 0x4af8 <_ZN13EZUI_PageItemC1EhhPf>
    173e:	b6 01       	movw	r22, r12
    1740:	c7 01       	movw	r24, r14
    1742:	0e 94 6d 1a 	call	0x34da	; 0x34da <_ZN9EZUI_Page7addItemEP13EZUI_PageItem>
	Analogs_12_to_15->addItem(new EZUI_PageItem(14,1, &analog15)); */
	
	/***************************************
	  Relay Diagnostics Menu
	***************************************/	
	EZUI_Menu *MenuRCDiag = new EZUI_Menu("Rc");
    1746:	63 e5       	ldi	r22, 0x53	; 83
    1748:	73 e0       	ldi	r23, 0x03	; 3
    174a:	ce 01       	movw	r24, r28
    174c:	85 5a       	subi	r24, 0xA5	; 165
    174e:	9f 4f       	sbci	r25, 0xFF	; 255
    1750:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    1754:	8d e1       	ldi	r24, 0x1D	; 29
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    175c:	6c 01       	movw	r12, r24
    175e:	be 01       	movw	r22, r28
    1760:	65 5a       	subi	r22, 0xA5	; 165
    1762:	7f 4f       	sbci	r23, 0xFF	; 255
    1764:	b1 d4       	rcall	.+2402   	; 0x20c8 <_ZN9EZUI_MenuC1E6String>
    1766:	ce 01       	movw	r24, r28
    1768:	85 5a       	subi	r24, 0xA5	; 165
    176a:	9f 4f       	sbci	r25, 0xFF	; 255
    176c:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
	/*MenuRCDiag->addItem(new EZUI_Control_ToggleOption("RC1_Out1",RC1_OUT1));
	MenuRCDiag->addItem(new EZUI_Control_ToggleOption("RC1_Out2",RC1_OUT2));
	MenuRCDiag->addItem(new EZUI_Control_ToggleOption("RC1_Out3",RC1_OUT3));*/
	MenuRCDiag->addItem(new EZUI_Control_ToggleOption("RC1_Out4",&RC1_OUT4));
    1770:	66 e5       	ldi	r22, 0x56	; 86
    1772:	73 e0       	ldi	r23, 0x03	; 3
    1774:	ce 01       	movw	r24, r28
    1776:	8b 5a       	subi	r24, 0xAB	; 171
    1778:	9f 4f       	sbci	r25, 0xFF	; 255
    177a:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    177e:	88 e1       	ldi	r24, 0x18	; 24
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    1786:	5c 01       	movw	r10, r24
    1788:	46 e2       	ldi	r20, 0x26	; 38
    178a:	57 e0       	ldi	r21, 0x07	; 7
    178c:	be 01       	movw	r22, r28
    178e:	6b 5a       	subi	r22, 0xAB	; 171
    1790:	7f 4f       	sbci	r23, 0xFF	; 255
    1792:	ee d8       	rcall	.-3620   	; 0x970 <_ZN25EZUI_Control_ToggleOptionC1E6StringP9DigitalIO>
    1794:	b5 01       	movw	r22, r10
    1796:	c6 01       	movw	r24, r12
    1798:	f5 d4       	rcall	.+2538   	; 0x2184 <_ZN9EZUI_Menu7addItemEP25EZUI_Control_ToggleOption>
    179a:	ce 01       	movw	r24, r28
    179c:	8b 5a       	subi	r24, 0xAB	; 171
    179e:	9f 4f       	sbci	r25, 0xFF	; 255
    17a0:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
	MenuRCDiag->addItem(new EZUI_Control_ToggleOption("RC1_Out5",&RC1_OUT5));
    17a4:	6f e5       	ldi	r22, 0x5F	; 95
    17a6:	73 e0       	ldi	r23, 0x03	; 3
    17a8:	ce 01       	movw	r24, r28
    17aa:	81 5b       	subi	r24, 0xB1	; 177
    17ac:	9f 4f       	sbci	r25, 0xFF	; 255
    17ae:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    17b2:	88 e1       	ldi	r24, 0x18	; 24
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    17ba:	5c 01       	movw	r10, r24
    17bc:	45 e1       	ldi	r20, 0x15	; 21
    17be:	57 e0       	ldi	r21, 0x07	; 7
    17c0:	be 01       	movw	r22, r28
    17c2:	61 5b       	subi	r22, 0xB1	; 177
    17c4:	7f 4f       	sbci	r23, 0xFF	; 255
    17c6:	d4 d8       	rcall	.-3672   	; 0x970 <_ZN25EZUI_Control_ToggleOptionC1E6StringP9DigitalIO>
    17c8:	b5 01       	movw	r22, r10
    17ca:	c6 01       	movw	r24, r12
    17cc:	db d4       	rcall	.+2486   	; 0x2184 <_ZN9EZUI_Menu7addItemEP25EZUI_Control_ToggleOption>
    17ce:	ce 01       	movw	r24, r28
    17d0:	81 5b       	subi	r24, 0xB1	; 177
    17d2:	9f 4f       	sbci	r25, 0xFF	; 255
    17d4:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
	MenuRCDiag->addItem(new EZUI_Control_ToggleOption("RC1_Out6",&RC1_OUT6));
    17d8:	68 e6       	ldi	r22, 0x68	; 104
    17da:	73 e0       	ldi	r23, 0x03	; 3
    17dc:	ce 01       	movw	r24, r28
    17de:	87 5b       	subi	r24, 0xB7	; 183
    17e0:	9f 4f       	sbci	r25, 0xFF	; 255
    17e2:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    17e6:	88 e1       	ldi	r24, 0x18	; 24
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    17ee:	5c 01       	movw	r10, r24
    17f0:	44 e0       	ldi	r20, 0x04	; 4
    17f2:	57 e0       	ldi	r21, 0x07	; 7
    17f4:	be 01       	movw	r22, r28
    17f6:	67 5b       	subi	r22, 0xB7	; 183
    17f8:	7f 4f       	sbci	r23, 0xFF	; 255
    17fa:	ba d8       	rcall	.-3724   	; 0x970 <_ZN25EZUI_Control_ToggleOptionC1E6StringP9DigitalIO>
    17fc:	b5 01       	movw	r22, r10
    17fe:	c6 01       	movw	r24, r12
    1800:	c1 d4       	rcall	.+2434   	; 0x2184 <_ZN9EZUI_Menu7addItemEP25EZUI_Control_ToggleOption>
    1802:	ce 01       	movw	r24, r28
    1804:	87 5b       	subi	r24, 0xB7	; 183
    1806:	9f 4f       	sbci	r25, 0xFF	; 255
    1808:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
	
	/***************************************
	  Analogs Diagnostics Menu
	***************************************/
	
	EZUI_Menu * MenuAnalogsMonitor = new EZUI_Menu("Analog Diagnostics");
    180c:	61 e7       	ldi	r22, 0x71	; 113
    180e:	73 e0       	ldi	r23, 0x03	; 3
    1810:	ce 01       	movw	r24, r28
    1812:	8d 5b       	subi	r24, 0xBD	; 189
    1814:	9f 4f       	sbci	r25, 0xFF	; 255
    1816:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    181a:	8d e1       	ldi	r24, 0x1D	; 29
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    1822:	5c 01       	movw	r10, r24
    1824:	be 01       	movw	r22, r28
    1826:	6d 5b       	subi	r22, 0xBD	; 189
    1828:	7f 4f       	sbci	r23, 0xFF	; 255
    182a:	4e d4       	rcall	.+2204   	; 0x20c8 <_ZN9EZUI_MenuC1E6String>
    182c:	ce 01       	movw	r24, r28
    182e:	8d 5b       	subi	r24, 0xBD	; 189
    1830:	9f 4f       	sbci	r25, 0xFF	; 255
    1832:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
	Analogs_0_to_5->addItem(new EZUI_PageItem(0,3,new EZUI_Control_Link("Back",MainMenu)));
    1836:	62 ec       	ldi	r22, 0xC2	; 194
    1838:	72 e0       	ldi	r23, 0x02	; 2
    183a:	ce 01       	movw	r24, r28
    183c:	cd 96       	adiw	r24, 0x3d	; 61
    183e:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    1842:	8a e0       	ldi	r24, 0x0A	; 10
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    184a:	4c 01       	movw	r8, r24
    184c:	a8 01       	movw	r20, r16
    184e:	be 01       	movw	r22, r28
    1850:	63 5c       	subi	r22, 0xC3	; 195
    1852:	7f 4f       	sbci	r23, 0xFF	; 255
    1854:	0e 94 c1 03 	call	0x782	; 0x782 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Menu>
    1858:	8e e3       	ldi	r24, 0x3E	; 62
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    1860:	3c 01       	movw	r6, r24
    1862:	94 01       	movw	r18, r8
    1864:	43 e0       	ldi	r20, 0x03	; 3
    1866:	60 e0       	ldi	r22, 0x00	; 0
    1868:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <_ZN13EZUI_PageItemC1EhhP17EZUI_Control_Link>
    186c:	b3 01       	movw	r22, r6
    186e:	c7 01       	movw	r24, r14
    1870:	0e 94 6d 1a 	call	0x34da	; 0x34da <_ZN9EZUI_Page7addItemEP13EZUI_PageItem>
    1874:	ce 01       	movw	r24, r28
    1876:	cd 96       	adiw	r24, 0x3d	; 61
    1878:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
	//Analogs_6_to_11->addItem(new EZUI_PageItem(0,3,new EZUI_Control_Link("Back",MainMenu)));
	//Analogs_12_to_15->addItem(new EZUI_PageItem(0,3,new EZUI_Control_Link("Back",MainMenu)));
	MenuAnalogsMonitor->addItem(new EZUI_Control_Link("Analogs 0 to 5",Analogs_0_to_5));
    187c:	64 e8       	ldi	r22, 0x84	; 132
    187e:	73 e0       	ldi	r23, 0x03	; 3
    1880:	ce 01       	movw	r24, r28
    1882:	c7 96       	adiw	r24, 0x37	; 55
    1884:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    1888:	8a e0       	ldi	r24, 0x0A	; 10
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    1890:	4c 01       	movw	r8, r24
    1892:	a7 01       	movw	r20, r14
    1894:	be 01       	movw	r22, r28
    1896:	69 5c       	subi	r22, 0xC9	; 201
    1898:	7f 4f       	sbci	r23, 0xFF	; 255
    189a:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Page>
    189e:	b4 01       	movw	r22, r8
    18a0:	c5 01       	movw	r24, r10
    18a2:	40 d4       	rcall	.+2176   	; 0x2124 <_ZN9EZUI_Menu7addItemEP17EZUI_Control_Link>
    18a4:	ce 01       	movw	r24, r28
    18a6:	c7 96       	adiw	r24, 0x37	; 55
    18a8:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
	//MenuAnalogsMonitor->addItem(new EZUI_Control_Link("Analogs 6 to 11",Analogs_6_to_11));
	//MenuAnalogsMonitor->addItem(new EZUI_Control_Link("Analogs 12 to 15",Analogs_12_to_15));
	MenuAnalogsMonitor->addItem(new EZUI_Control_Link("Back",MainMenu));
    18ac:	62 ec       	ldi	r22, 0xC2	; 194
    18ae:	72 e0       	ldi	r23, 0x02	; 2
    18b0:	ce 01       	movw	r24, r28
    18b2:	c1 96       	adiw	r24, 0x31	; 49
    18b4:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    18b8:	8a e0       	ldi	r24, 0x0A	; 10
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    18c0:	7c 01       	movw	r14, r24
    18c2:	a8 01       	movw	r20, r16
    18c4:	be 01       	movw	r22, r28
    18c6:	6f 5c       	subi	r22, 0xCF	; 207
    18c8:	7f 4f       	sbci	r23, 0xFF	; 255
    18ca:	0e 94 c1 03 	call	0x782	; 0x782 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Menu>
    18ce:	b7 01       	movw	r22, r14
    18d0:	c5 01       	movw	r24, r10
    18d2:	28 d4       	rcall	.+2128   	; 0x2124 <_ZN9EZUI_Menu7addItemEP17EZUI_Control_Link>
    18d4:	ce 01       	movw	r24, r28
    18d6:	c1 96       	adiw	r24, 0x31	; 49
    18d8:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
	
	/***************************************
	  HLT_BP - RTD Diagnostics Menu
	***************************************/
	EZUI_Page * Page_HLT_BP = new EZUI_Page("HLT BP");/*
    18dc:	63 e9       	ldi	r22, 0x93	; 147
    18de:	73 e0       	ldi	r23, 0x03	; 3
    18e0:	ce 01       	movw	r24, r28
    18e2:	8b 96       	adiw	r24, 0x2b	; 43
    18e4:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    18e8:	8e e2       	ldi	r24, 0x2E	; 46
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    18f0:	4c 01       	movw	r8, r24
    18f2:	be 01       	movw	r22, r28
    18f4:	65 5d       	subi	r22, 0xD5	; 213
    18f6:	7f 4f       	sbci	r23, 0xFF	; 255
    18f8:	0e 94 21 1a 	call	0x3442	; 0x3442 <_ZN9EZUI_PageC1E6String>
    18fc:	ce 01       	movw	r24, r28
    18fe:	8b 96       	adiw	r24, 0x2b	; 43
    1900:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
	Page_BK_OP->addItem(new EZUI_PageItem(14,2,BK_RTD_OP->degC));
	*/
	/***************************************
	  RTD Diagnostics Menu
	***************************************/
	EZUI_Menu * MenuRTDMonitor = new EZUI_Menu("RTD Diagnostics");
    1904:	6a e9       	ldi	r22, 0x9A	; 154
    1906:	73 e0       	ldi	r23, 0x03	; 3
    1908:	ce 01       	movw	r24, r28
    190a:	85 96       	adiw	r24, 0x25	; 37
    190c:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    1910:	8d e1       	ldi	r24, 0x1D	; 29
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    1918:	7c 01       	movw	r14, r24
    191a:	be 01       	movw	r22, r28
    191c:	6b 5d       	subi	r22, 0xDB	; 219
    191e:	7f 4f       	sbci	r23, 0xFF	; 255
    1920:	d3 d3       	rcall	.+1958   	; 0x20c8 <_ZN9EZUI_MenuC1E6String>
    1922:	ce 01       	movw	r24, r28
    1924:	85 96       	adiw	r24, 0x25	; 37
    1926:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
	Page_HLT_BP->addItem(new EZUI_PageItem(0,3,new EZUI_Control_Link("Back",MenuRTDMonitor)));
    192a:	62 ec       	ldi	r22, 0xC2	; 194
    192c:	72 e0       	ldi	r23, 0x02	; 2
    192e:	ce 01       	movw	r24, r28
    1930:	4f 96       	adiw	r24, 0x1f	; 31
    1932:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    1936:	8a e0       	ldi	r24, 0x0A	; 10
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    193e:	3c 01       	movw	r6, r24
    1940:	a7 01       	movw	r20, r14
    1942:	be 01       	movw	r22, r28
    1944:	61 5e       	subi	r22, 0xE1	; 225
    1946:	7f 4f       	sbci	r23, 0xFF	; 255
    1948:	0e 94 c1 03 	call	0x782	; 0x782 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Menu>
    194c:	8e e3       	ldi	r24, 0x3E	; 62
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    1954:	2c 01       	movw	r4, r24
    1956:	93 01       	movw	r18, r6
    1958:	43 e0       	ldi	r20, 0x03	; 3
    195a:	60 e0       	ldi	r22, 0x00	; 0
    195c:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <_ZN13EZUI_PageItemC1EhhP17EZUI_Control_Link>
    1960:	b2 01       	movw	r22, r4
    1962:	c4 01       	movw	r24, r8
    1964:	0e 94 6d 1a 	call	0x34da	; 0x34da <_ZN9EZUI_Page7addItemEP13EZUI_PageItem>
    1968:	ce 01       	movw	r24, r28
    196a:	4f 96       	adiw	r24, 0x1f	; 31
    196c:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
	//Page_HLT_OP->addItem(new EZUI_PageItem(0,3,new EZUI_Control_Link("Back",MenuRTDMonitor)));
	//Page_MLT_BP->addItem(new EZUI_PageItem(0,3,new EZUI_Control_Link("Back",MenuRTDMonitor)));
	//Page_MLT_OP->addItem(new EZUI_PageItem(0,3,new EZUI_Control_Link("Back",MenuRTDMonitor)));
	//Page_BK_BP->addItem(new EZUI_PageItem(0,3,new EZUI_Control_Link("Back",MenuRTDMonitor)));
	//Page_BK_OP->addItem(new EZUI_PageItem(0,3,new EZUI_Control_Link("Back",MenuRTDMonitor)));
	MenuRTDMonitor->addItem(new EZUI_Control_Link("HLT BP",Page_HLT_BP));
    1970:	63 e9       	ldi	r22, 0x93	; 147
    1972:	73 e0       	ldi	r23, 0x03	; 3
    1974:	ce 01       	movw	r24, r28
    1976:	49 96       	adiw	r24, 0x19	; 25
    1978:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    197c:	8a e0       	ldi	r24, 0x0A	; 10
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    1984:	3c 01       	movw	r6, r24
    1986:	a4 01       	movw	r20, r8
    1988:	be 01       	movw	r22, r28
    198a:	67 5e       	subi	r22, 0xE7	; 231
    198c:	7f 4f       	sbci	r23, 0xFF	; 255
    198e:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Page>
    1992:	b3 01       	movw	r22, r6
    1994:	c7 01       	movw	r24, r14
    1996:	c6 d3       	rcall	.+1932   	; 0x2124 <_ZN9EZUI_Menu7addItemEP17EZUI_Control_Link>
    1998:	ce 01       	movw	r24, r28
    199a:	49 96       	adiw	r24, 0x19	; 25
    199c:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
	//MenuRTDMonitor->addItem(new EZUI_Control_Link("HLT OP",Page_HLT_OP));
	//MenuRTDMonitor->addItem(new EZUI_Control_Link("MLT BP",Page_MLT_BP));
	//MenuRTDMonitor->addItem(new EZUI_Control_Link("MLT OP",Page_MLT_OP));
	//MenuRTDMonitor->addItem(new EZUI_Control_Link("BK BP",Page_BK_BP));
	//MenuRTDMonitor->addItem(new EZUI_Control_Link("BK OP",Page_BK_OP));
	MenuRTDMonitor->addItem(new EZUI_Control_Link("Back",MainMenu));
    19a0:	62 ec       	ldi	r22, 0xC2	; 194
    19a2:	72 e0       	ldi	r23, 0x02	; 2
    19a4:	ce 01       	movw	r24, r28
    19a6:	43 96       	adiw	r24, 0x13	; 19
    19a8:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    19ac:	8a e0       	ldi	r24, 0x0A	; 10
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    19b4:	4c 01       	movw	r8, r24
    19b6:	a8 01       	movw	r20, r16
    19b8:	be 01       	movw	r22, r28
    19ba:	6d 5e       	subi	r22, 0xED	; 237
    19bc:	7f 4f       	sbci	r23, 0xFF	; 255
    19be:	0e 94 c1 03 	call	0x782	; 0x782 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Menu>
    19c2:	b4 01       	movw	r22, r8
    19c4:	c7 01       	movw	r24, r14
    19c6:	ae d3       	rcall	.+1884   	; 0x2124 <_ZN9EZUI_Menu7addItemEP17EZUI_Control_Link>
    19c8:	ce 01       	movw	r24, r28
    19ca:	43 96       	adiw	r24, 0x13	; 19
    19cc:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
	/***************************************
	  Build the Main Menu and Set the Display
	***************************************/
	//MainMenu->addItem(new EZUI_Control_Link("Alarm Test",MenuAlarmTest));
	//MainMenu->addItem(new EZUI_Control_Link("Pump Monitor",PagePumpMonitor));
	MainMenu->addItem(new EZUI_Control_Link("Analogs Monitor",MenuAnalogsMonitor));
    19d0:	6a ea       	ldi	r22, 0xAA	; 170
    19d2:	73 e0       	ldi	r23, 0x03	; 3
    19d4:	ce 01       	movw	r24, r28
    19d6:	0d 96       	adiw	r24, 0x0d	; 13
    19d8:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    19dc:	8a e0       	ldi	r24, 0x0A	; 10
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    19e4:	4c 01       	movw	r8, r24
    19e6:	a5 01       	movw	r20, r10
    19e8:	be 01       	movw	r22, r28
    19ea:	63 5f       	subi	r22, 0xF3	; 243
    19ec:	7f 4f       	sbci	r23, 0xFF	; 255
    19ee:	0e 94 c1 03 	call	0x782	; 0x782 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Menu>
    19f2:	b4 01       	movw	r22, r8
    19f4:	c8 01       	movw	r24, r16
    19f6:	96 d3       	rcall	.+1836   	; 0x2124 <_ZN9EZUI_Menu7addItemEP17EZUI_Control_Link>
    19f8:	ce 01       	movw	r24, r28
    19fa:	0d 96       	adiw	r24, 0x0d	; 13
    19fc:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
	MainMenu->addItem(new EZUI_Control_Link("RTD Diagnostics",MenuRTDMonitor));
    1a00:	6a e9       	ldi	r22, 0x9A	; 154
    1a02:	73 e0       	ldi	r23, 0x03	; 3
    1a04:	ce 01       	movw	r24, r28
    1a06:	07 96       	adiw	r24, 0x07	; 7
    1a08:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    1a0c:	8a e0       	ldi	r24, 0x0A	; 10
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    1a14:	5c 01       	movw	r10, r24
    1a16:	a7 01       	movw	r20, r14
    1a18:	be 01       	movw	r22, r28
    1a1a:	69 5f       	subi	r22, 0xF9	; 249
    1a1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a1e:	0e 94 c1 03 	call	0x782	; 0x782 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Menu>
    1a22:	b5 01       	movw	r22, r10
    1a24:	c8 01       	movw	r24, r16
    1a26:	7e d3       	rcall	.+1788   	; 0x2124 <_ZN9EZUI_Menu7addItemEP17EZUI_Control_Link>
    1a28:	ce 01       	movw	r24, r28
    1a2a:	07 96       	adiw	r24, 0x07	; 7
    1a2c:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
	MainMenu->addItem(new EZUI_Control_Link("RC Diagnostics",MenuRCDiag));
    1a30:	6a eb       	ldi	r22, 0xBA	; 186
    1a32:	73 e0       	ldi	r23, 0x03	; 3
    1a34:	ce 01       	movw	r24, r28
    1a36:	01 96       	adiw	r24, 0x01	; 1
    1a38:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    1a3c:	8a e0       	ldi	r24, 0x0A	; 10
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    1a44:	7c 01       	movw	r14, r24
    1a46:	a6 01       	movw	r20, r12
    1a48:	be 01       	movw	r22, r28
    1a4a:	6f 5f       	subi	r22, 0xFF	; 255
    1a4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a4e:	0e 94 c1 03 	call	0x782	; 0x782 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Menu>
    1a52:	b7 01       	movw	r22, r14
    1a54:	c8 01       	movw	r24, r16
    1a56:	66 d3       	rcall	.+1740   	; 0x2124 <_ZN9EZUI_Menu7addItemEP17EZUI_Control_Link>
    1a58:	ce 01       	movw	r24, r28
    1a5a:	01 96       	adiw	r24, 0x01	; 1
    1a5c:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>

	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.println("Done.");
    1a60:	6d ec       	ldi	r22, 0xCD	; 205
    1a62:	72 e0       	ldi	r23, 0x02	; 2
    1a64:	82 e8       	ldi	r24, 0x82	; 130
    1a66:	98 e0       	ldi	r25, 0x08	; 8
    1a68:	0e 94 87 3a 	call	0x750e	; 0x750e <_ZN5Print7printlnEPKc>
	#endif
}
    1a6c:	c0 57       	subi	r28, 0x70	; 112
    1a6e:	df 4f       	sbci	r29, 0xFF	; 255
    1a70:	0f b6       	in	r0, 0x3f	; 63
    1a72:	f8 94       	cli
    1a74:	de bf       	out	0x3e, r29	; 62
    1a76:	0f be       	out	0x3f, r0	; 63
    1a78:	cd bf       	out	0x3d, r28	; 61
    1a7a:	df 91       	pop	r29
    1a7c:	cf 91       	pop	r28
    1a7e:	1f 91       	pop	r17
    1a80:	0f 91       	pop	r16
    1a82:	ff 90       	pop	r15
    1a84:	ef 90       	pop	r14
    1a86:	df 90       	pop	r13
    1a88:	cf 90       	pop	r12
    1a8a:	bf 90       	pop	r11
    1a8c:	af 90       	pop	r10
    1a8e:	9f 90       	pop	r9
    1a90:	8f 90       	pop	r8
    1a92:	7f 90       	pop	r7
    1a94:	6f 90       	pop	r6
    1a96:	5f 90       	pop	r5
    1a98:	4f 90       	pop	r4
    1a9a:	08 95       	ret

00001a9c <_GLOBAL__sub_I_MAIN_UI>:
    1a9c:	0f 93       	push	r16
    1a9e:	1f 93       	push	r17
    1aa0:	cf 93       	push	r28
    1aa2:	df 93       	push	r29
    1aa4:	00 d0       	rcall	.+0      	; 0x1aa6 <_GLOBAL__sub_I_MAIN_UI+0xa>
    1aa6:	00 d0       	rcall	.+0      	; 0x1aa8 <_GLOBAL__sub_I_MAIN_UI+0xc>
    1aa8:	cd b7       	in	r28, 0x3d	; 61
    1aaa:	de b7       	in	r29, 0x3e	; 62
 * ----------------------------------------------------------------
 */

#include "MAIN_UI.h"

EZUI *MAIN_UI = new EZUI("MAIN");
    1aac:	69 ec       	ldi	r22, 0xC9	; 201
    1aae:	73 e0       	ldi	r23, 0x03	; 3
    1ab0:	ce 01       	movw	r24, r28
    1ab2:	01 96       	adiw	r24, 0x01	; 1
    1ab4:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    1ab8:	86 e1       	ldi	r24, 0x16	; 22
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    1ac0:	8c 01       	movw	r16, r24
    1ac2:	be 01       	movw	r22, r28
    1ac4:	6f 5f       	subi	r22, 0xFF	; 255
    1ac6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac8:	0e 94 7b 28 	call	0x50f6	; 0x50f6 <_ZN4EZUIC1E6String>
    1acc:	10 93 ad 07 	sts	0x07AD, r17
    1ad0:	00 93 ac 07 	sts	0x07AC, r16
    1ad4:	ce 01       	movw	r24, r28
    1ad6:	01 96       	adiw	r24, 0x01	; 1
    1ad8:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
	MainMenu->addItem(new EZUI_Control_Link("RC Diagnostics",MenuRCDiag));

	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.println("Done.");
	#endif
}
    1adc:	26 96       	adiw	r28, 0x06	; 6
    1ade:	0f b6       	in	r0, 0x3f	; 63
    1ae0:	f8 94       	cli
    1ae2:	de bf       	out	0x3e, r29	; 62
    1ae4:	0f be       	out	0x3f, r0	; 63
    1ae6:	cd bf       	out	0x3d, r28	; 61
    1ae8:	df 91       	pop	r29
    1aea:	cf 91       	pop	r28
    1aec:	1f 91       	pop	r17
    1aee:	0f 91       	pop	r16
    1af0:	08 95       	ret

00001af2 <_Z11MLT_UI_initv>:

#include "MLT_UI.h"

EZUI *MLT_UI = new EZUI("MLT");

void MLT_UI_init(){
    1af2:	af 92       	push	r10
    1af4:	bf 92       	push	r11
    1af6:	cf 92       	push	r12
    1af8:	df 92       	push	r13
    1afa:	ef 92       	push	r14
    1afc:	ff 92       	push	r15
    1afe:	0f 93       	push	r16
    1b00:	1f 93       	push	r17
    1b02:	cf 93       	push	r28
    1b04:	df 93       	push	r29
    1b06:	cd b7       	in	r28, 0x3d	; 61
    1b08:	de b7       	in	r29, 0x3e	; 62
    1b0a:	a4 97       	sbiw	r28, 0x24	; 36
    1b0c:	0f b6       	in	r0, 0x3f	; 63
    1b0e:	f8 94       	cli
    1b10:	de bf       	out	0x3e, r29	; 62
    1b12:	0f be       	out	0x3f, r0	; 63
    1b14:	cd bf       	out	0x3d, r28	; 61
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.print("Initializing UI - " + MLT_UI->Name + "...");
    1b16:	00 91 ae 07 	lds	r16, 0x07AE
    1b1a:	10 91 af 07 	lds	r17, 0x07AF
    1b1e:	0c 5f       	subi	r16, 0xFC	; 252
    1b20:	1f 4f       	sbci	r17, 0xFF	; 255
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1b22:	69 e9       	ldi	r22, 0x99	; 153
    1b24:	72 e0       	ldi	r23, 0x02	; 2
    1b26:	ce 01       	movw	r24, r28
    1b28:	4f 96       	adiw	r24, 0x1f	; 31
    1b2a:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    1b2e:	b8 01       	movw	r22, r16
    1b30:	ce 01       	movw	r24, r28
    1b32:	4f 96       	adiw	r24, 0x1f	; 31
    1b34:	0e 94 ee 41 	call	0x83dc	; 0x83dc <_ZplRK15StringSumHelperRK6String>
    1b38:	68 e6       	ldi	r22, 0x68	; 104
    1b3a:	74 e0       	ldi	r23, 0x04	; 4
    1b3c:	0e 94 ff 41 	call	0x83fe	; 0x83fe <_ZplRK15StringSumHelperPKc>
    1b40:	bc 01       	movw	r22, r24
    1b42:	82 e8       	ldi	r24, 0x82	; 130
    1b44:	98 e0       	ldi	r25, 0x08	; 8
    1b46:	0e 94 3e 3a 	call	0x747c	; 0x747c <_ZN5Print5printERK6String>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1b4a:	ce 01       	movw	r24, r28
    1b4c:	4f 96       	adiw	r24, 0x1f	; 31
    1b4e:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
	#endif
	
	/***************************************
	  Setup + Initialization
	***************************************/
	MLT_UI->attatchEncoder(MLT_ENC);
    1b52:	60 91 0a 06 	lds	r22, 0x060A
    1b56:	70 91 0b 06 	lds	r23, 0x060B
    1b5a:	80 91 ae 07 	lds	r24, 0x07AE
    1b5e:	90 91 af 07 	lds	r25, 0x07AF
    1b62:	0e 94 9e 28 	call	0x513c	; 0x513c <_ZN4EZUI14attatchEncoderEP22ClickEncoderWithEvents>
	MLT_UI->attatchLCD(&MLT_LCD);
    1b66:	6c e0       	ldi	r22, 0x0C	; 12
    1b68:	76 e0       	ldi	r23, 0x06	; 6
    1b6a:	80 91 ae 07 	lds	r24, 0x07AE
    1b6e:	90 91 af 07 	lds	r25, 0x07AF
    1b72:	0e 94 d4 28 	call	0x51a8	; 0x51a8 <_ZN4EZUI10attatchLCDEP17LiquidCrystal_I2C>
	
	EZUI_Menu * MainMenu = new EZUI_Menu("MLT-Main-Menu");
    1b76:	6e ec       	ldi	r22, 0xCE	; 206
    1b78:	73 e0       	ldi	r23, 0x03	; 3
    1b7a:	ce 01       	movw	r24, r28
    1b7c:	49 96       	adiw	r24, 0x19	; 25
    1b7e:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    1b82:	8d e1       	ldi	r24, 0x1D	; 29
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    1b8a:	8c 01       	movw	r16, r24
    1b8c:	be 01       	movw	r22, r28
    1b8e:	67 5e       	subi	r22, 0xE7	; 231
    1b90:	7f 4f       	sbci	r23, 0xFF	; 255
    1b92:	9a d2       	rcall	.+1332   	; 0x20c8 <_ZN9EZUI_MenuC1E6String>
    1b94:	ce 01       	movw	r24, r28
    1b96:	49 96       	adiw	r24, 0x19	; 25
    1b98:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
	
	EZUI_Page * TestPage = new EZUI_Page((String)("TestPage"));
    1b9c:	69 eb       	ldi	r22, 0xB9	; 185
    1b9e:	72 e0       	ldi	r23, 0x02	; 2
    1ba0:	ce 01       	movw	r24, r28
    1ba2:	43 96       	adiw	r24, 0x13	; 19
    1ba4:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    1ba8:	8e e2       	ldi	r24, 0x2E	; 46
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    1bb0:	7c 01       	movw	r14, r24
    1bb2:	be 01       	movw	r22, r28
    1bb4:	6d 5e       	subi	r22, 0xED	; 237
    1bb6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb8:	0e 94 21 1a 	call	0x3442	; 0x3442 <_ZN9EZUI_PageC1E6String>
    1bbc:	ce 01       	movw	r24, r28
    1bbe:	43 96       	adiw	r24, 0x13	; 19
    1bc0:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
	TestPage->addItem(new EZUI_PageItem(0,3,new EZUI_Control_Link("Back",MainMenu)));
    1bc4:	62 ec       	ldi	r22, 0xC2	; 194
    1bc6:	72 e0       	ldi	r23, 0x02	; 2
    1bc8:	ce 01       	movw	r24, r28
    1bca:	0d 96       	adiw	r24, 0x0d	; 13
    1bcc:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    1bd0:	8a e0       	ldi	r24, 0x0A	; 10
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    1bd8:	5c 01       	movw	r10, r24
    1bda:	a8 01       	movw	r20, r16
    1bdc:	be 01       	movw	r22, r28
    1bde:	63 5f       	subi	r22, 0xF3	; 243
    1be0:	7f 4f       	sbci	r23, 0xFF	; 255
    1be2:	0e 94 c1 03 	call	0x782	; 0x782 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Menu>
    1be6:	8e e3       	ldi	r24, 0x3E	; 62
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    1bee:	6c 01       	movw	r12, r24
    1bf0:	95 01       	movw	r18, r10
    1bf2:	43 e0       	ldi	r20, 0x03	; 3
    1bf4:	60 e0       	ldi	r22, 0x00	; 0
    1bf6:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <_ZN13EZUI_PageItemC1EhhP17EZUI_Control_Link>
    1bfa:	b6 01       	movw	r22, r12
    1bfc:	c7 01       	movw	r24, r14
    1bfe:	0e 94 6d 1a 	call	0x34da	; 0x34da <_ZN9EZUI_Page7addItemEP13EZUI_PageItem>
    1c02:	ce 01       	movw	r24, r28
    1c04:	0d 96       	adiw	r24, 0x0d	; 13
    1c06:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
	
	MainMenu->addItem(new EZUI_Control_Link("TestPage",TestPage));
    1c0a:	69 eb       	ldi	r22, 0xB9	; 185
    1c0c:	72 e0       	ldi	r23, 0x02	; 2
    1c0e:	ce 01       	movw	r24, r28
    1c10:	07 96       	adiw	r24, 0x07	; 7
    1c12:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    1c16:	8a e0       	ldi	r24, 0x0A	; 10
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    1c1e:	6c 01       	movw	r12, r24
    1c20:	a7 01       	movw	r20, r14
    1c22:	be 01       	movw	r22, r28
    1c24:	69 5f       	subi	r22, 0xF9	; 249
    1c26:	7f 4f       	sbci	r23, 0xFF	; 255
    1c28:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Page>
    1c2c:	b6 01       	movw	r22, r12
    1c2e:	c8 01       	movw	r24, r16
    1c30:	79 d2       	rcall	.+1266   	; 0x2124 <_ZN9EZUI_Menu7addItemEP17EZUI_Control_Link>
    1c32:	ce 01       	movw	r24, r28
    1c34:	07 96       	adiw	r24, 0x07	; 7
    1c36:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
	MainMenu->addItem(new EZUI_Control_Link("Test2",MainMenu));
    1c3a:	67 ec       	ldi	r22, 0xC7	; 199
    1c3c:	72 e0       	ldi	r23, 0x02	; 2
    1c3e:	ce 01       	movw	r24, r28
    1c40:	01 96       	adiw	r24, 0x01	; 1
    1c42:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    1c46:	8a e0       	ldi	r24, 0x0A	; 10
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    1c4e:	7c 01       	movw	r14, r24
    1c50:	a8 01       	movw	r20, r16
    1c52:	be 01       	movw	r22, r28
    1c54:	6f 5f       	subi	r22, 0xFF	; 255
    1c56:	7f 4f       	sbci	r23, 0xFF	; 255
    1c58:	0e 94 c1 03 	call	0x782	; 0x782 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Menu>
    1c5c:	b7 01       	movw	r22, r14
    1c5e:	c8 01       	movw	r24, r16
    1c60:	61 d2       	rcall	.+1218   	; 0x2124 <_ZN9EZUI_Menu7addItemEP17EZUI_Control_Link>
    1c62:	ce 01       	movw	r24, r28
    1c64:	01 96       	adiw	r24, 0x01	; 1
    1c66:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
	/***************************************
	  MLT Menu
	***************************************/
	//MLTMainMenu->addItem(new EZUI_Control_Link("Monitor",MonitorPage));
	
	MLT_UI->setDisplay(MainMenu);
    1c6a:	b8 01       	movw	r22, r16
    1c6c:	80 91 ae 07 	lds	r24, 0x07AE
    1c70:	90 91 af 07 	lds	r25, 0x07AF
    1c74:	0e 94 28 29 	call	0x5250	; 0x5250 <_ZN4EZUI10setDisplayEP9EZUI_Menu>
	
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.println("Done.");
    1c78:	6d ec       	ldi	r22, 0xCD	; 205
    1c7a:	72 e0       	ldi	r23, 0x02	; 2
    1c7c:	82 e8       	ldi	r24, 0x82	; 130
    1c7e:	98 e0       	ldi	r25, 0x08	; 8
    1c80:	0e 94 87 3a 	call	0x750e	; 0x750e <_ZN5Print7printlnEPKc>
	#endif
}
    1c84:	a4 96       	adiw	r28, 0x24	; 36
    1c86:	0f b6       	in	r0, 0x3f	; 63
    1c88:	f8 94       	cli
    1c8a:	de bf       	out	0x3e, r29	; 62
    1c8c:	0f be       	out	0x3f, r0	; 63
    1c8e:	cd bf       	out	0x3d, r28	; 61
    1c90:	df 91       	pop	r29
    1c92:	cf 91       	pop	r28
    1c94:	1f 91       	pop	r17
    1c96:	0f 91       	pop	r16
    1c98:	ff 90       	pop	r15
    1c9a:	ef 90       	pop	r14
    1c9c:	df 90       	pop	r13
    1c9e:	cf 90       	pop	r12
    1ca0:	bf 90       	pop	r11
    1ca2:	af 90       	pop	r10
    1ca4:	08 95       	ret

00001ca6 <_GLOBAL__sub_I_MLT_UI>:
    1ca6:	0f 93       	push	r16
    1ca8:	1f 93       	push	r17
    1caa:	cf 93       	push	r28
    1cac:	df 93       	push	r29
    1cae:	00 d0       	rcall	.+0      	; 0x1cb0 <_GLOBAL__sub_I_MLT_UI+0xa>
    1cb0:	00 d0       	rcall	.+0      	; 0x1cb2 <_GLOBAL__sub_I_MLT_UI+0xc>
    1cb2:	cd b7       	in	r28, 0x3d	; 61
    1cb4:	de b7       	in	r29, 0x3e	; 62
 * ----------------------------------------------------------------
 */

#include "MLT_UI.h"

EZUI *MLT_UI = new EZUI("MLT");
    1cb6:	6c ed       	ldi	r22, 0xDC	; 220
    1cb8:	73 e0       	ldi	r23, 0x03	; 3
    1cba:	ce 01       	movw	r24, r28
    1cbc:	01 96       	adiw	r24, 0x01	; 1
    1cbe:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    1cc2:	86 e1       	ldi	r24, 0x16	; 22
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    1cca:	8c 01       	movw	r16, r24
    1ccc:	be 01       	movw	r22, r28
    1cce:	6f 5f       	subi	r22, 0xFF	; 255
    1cd0:	7f 4f       	sbci	r23, 0xFF	; 255
    1cd2:	0e 94 7b 28 	call	0x50f6	; 0x50f6 <_ZN4EZUIC1E6String>
    1cd6:	10 93 af 07 	sts	0x07AF, r17
    1cda:	00 93 ae 07 	sts	0x07AE, r16
    1cde:	ce 01       	movw	r24, r28
    1ce0:	01 96       	adiw	r24, 0x01	; 1
    1ce2:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
	MLT_UI->setDisplay(MainMenu);
	
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.println("Done.");
	#endif
}
    1ce6:	26 96       	adiw	r28, 0x06	; 6
    1ce8:	0f b6       	in	r0, 0x3f	; 63
    1cea:	f8 94       	cli
    1cec:	de bf       	out	0x3e, r29	; 62
    1cee:	0f be       	out	0x3f, r0	; 63
    1cf0:	cd bf       	out	0x3d, r28	; 61
    1cf2:	df 91       	pop	r29
    1cf4:	cf 91       	pop	r28
    1cf6:	1f 91       	pop	r17
    1cf8:	0f 91       	pop	r16
    1cfa:	08 95       	ret

00001cfc <_ZN22ClickEncoderWithEvents4ReadEv>:
// default destructor
ClickEncoderWithEvents::~ClickEncoderWithEvents()
{
} //~ClickEncoderWithEvents

void ClickEncoderWithEvents::Read(){
    1cfc:	cf 93       	push	r28
    1cfe:	df 93       	push	r29
    1d00:	ec 01       	movw	r28, r24
	//	Serial.print("Encoder Value: ");
	//	Serial.println(value);
	//}
	
			//See if Incremented or not
			t_value += this->getValue();
    1d02:	0e 94 84 2f 	call	0x5f08	; 0x5f08 <_ZN12ClickEncoder8getValueEv>
    1d06:	2a a5       	ldd	r18, Y+42	; 0x2a
    1d08:	3b a5       	ldd	r19, Y+43	; 0x2b
    1d0a:	82 0f       	add	r24, r18
    1d0c:	93 1f       	adc	r25, r19
    1d0e:	9b a7       	std	Y+43, r25	; 0x2b
    1d10:	8a a7       	std	Y+42, r24	; 0x2a
			if(t_value > t_prev_value){
    1d12:	28 a5       	ldd	r18, Y+40	; 0x28
    1d14:	39 a5       	ldd	r19, Y+41	; 0x29
    1d16:	28 17       	cp	r18, r24
    1d18:	39 07       	cpc	r19, r25
    1d1a:	1c f5       	brge	.+70     	; 0x1d62 <_ZN22ClickEncoderWithEvents4ReadEv+0x66>
				if( !(IncrementHandler == NULL)){
    1d1c:	e8 8d       	ldd	r30, Y+24	; 0x18
    1d1e:	f9 8d       	ldd	r31, Y+25	; 0x19
    1d20:	30 97       	sbiw	r30, 0x00	; 0
    1d22:	19 f4       	brne	.+6      	; 0x1d2a <_ZN22ClickEncoderWithEvents4ReadEv+0x2e>
    1d24:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1d26:	20 ff       	sbrs	r18, 0
    1d28:	41 c0       	rjmp	.+130    	; 0x1dac <_ZN22ClickEncoderWithEvents4ReadEv+0xb0>
				
					t_prev_value = t_value;
    1d2a:	99 a7       	std	Y+41, r25	; 0x29
    1d2c:	88 a7       	std	Y+40, r24	; 0x28
					(UI->*IncrementHandler)();
    1d2e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d30:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1d32:	80 ff       	sbrs	r24, 0
    1d34:	0e c0       	rjmp	.+28     	; 0x1d52 <_ZN22ClickEncoderWithEvents4ReadEv+0x56>
    1d36:	ae 85       	ldd	r26, Y+14	; 0x0e
    1d38:	bf 85       	ldd	r27, Y+15	; 0x0f
    1d3a:	9c 01       	movw	r18, r24
    1d3c:	35 95       	asr	r19
    1d3e:	27 95       	ror	r18
    1d40:	a2 0f       	add	r26, r18
    1d42:	b3 1f       	adc	r27, r19
    1d44:	2d 91       	ld	r18, X+
    1d46:	3c 91       	ld	r19, X
    1d48:	e2 0f       	add	r30, r18
    1d4a:	f3 1f       	adc	r31, r19
    1d4c:	01 90       	ld	r0, Z+
    1d4e:	f0 81       	ld	r31, Z
    1d50:	e0 2d       	mov	r30, r0
    1d52:	95 95       	asr	r25
    1d54:	87 95       	ror	r24
    1d56:	2e 85       	ldd	r18, Y+14	; 0x0e
    1d58:	3f 85       	ldd	r19, Y+15	; 0x0f
    1d5a:	82 0f       	add	r24, r18
    1d5c:	93 1f       	adc	r25, r19
    1d5e:	19 95       	eicall
    1d60:	25 c0       	rjmp	.+74     	; 0x1dac <_ZN22ClickEncoderWithEvents4ReadEv+0xb0>
				}
			}else if(t_value < t_prev_value){
    1d62:	82 17       	cp	r24, r18
    1d64:	93 07       	cpc	r25, r19
    1d66:	14 f5       	brge	.+68     	; 0x1dac <_ZN22ClickEncoderWithEvents4ReadEv+0xb0>
				if( !(DecrementHandler == NULL)){
    1d68:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1d6a:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1d6c:	30 97       	sbiw	r30, 0x00	; 0
    1d6e:	19 f4       	brne	.+6      	; 0x1d76 <_ZN22ClickEncoderWithEvents4ReadEv+0x7a>
    1d70:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1d72:	20 ff       	sbrs	r18, 0
    1d74:	1b c0       	rjmp	.+54     	; 0x1dac <_ZN22ClickEncoderWithEvents4ReadEv+0xb0>
				
					t_prev_value = t_value;
    1d76:	99 a7       	std	Y+41, r25	; 0x29
    1d78:	88 a7       	std	Y+40, r24	; 0x28
					(UI->*DecrementHandler)();
    1d7a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d7c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1d7e:	80 ff       	sbrs	r24, 0
    1d80:	0e c0       	rjmp	.+28     	; 0x1d9e <_ZN22ClickEncoderWithEvents4ReadEv+0xa2>
    1d82:	ae 85       	ldd	r26, Y+14	; 0x0e
    1d84:	bf 85       	ldd	r27, Y+15	; 0x0f
    1d86:	9c 01       	movw	r18, r24
    1d88:	35 95       	asr	r19
    1d8a:	27 95       	ror	r18
    1d8c:	a2 0f       	add	r26, r18
    1d8e:	b3 1f       	adc	r27, r19
    1d90:	2d 91       	ld	r18, X+
    1d92:	3c 91       	ld	r19, X
    1d94:	e2 0f       	add	r30, r18
    1d96:	f3 1f       	adc	r31, r19
    1d98:	01 90       	ld	r0, Z+
    1d9a:	f0 81       	ld	r31, Z
    1d9c:	e0 2d       	mov	r30, r0
    1d9e:	95 95       	asr	r25
    1da0:	87 95       	ror	r24
    1da2:	2e 85       	ldd	r18, Y+14	; 0x0e
    1da4:	3f 85       	ldd	r19, Y+15	; 0x0f
    1da6:	82 0f       	add	r24, r18
    1da8:	93 1f       	adc	r25, r19
    1daa:	19 95       	eicall
				}
			}
	
			//See if Buttons Clicked
			ClickEncoder::Button b = this->getButton();
    1dac:	ce 01       	movw	r24, r28
    1dae:	0e 94 bf 2f 	call	0x5f7e	; 0x5f7e <_ZN12ClickEncoder9getButtonEv>
			if (b != ClickEncoder::Open) {
    1db2:	88 23       	and	r24, r24
    1db4:	09 f4       	brne	.+2      	; 0x1db8 <_ZN22ClickEncoderWithEvents4ReadEv+0xbc>
    1db6:	54 c0       	rjmp	.+168    	; 0x1e60 <_ZN22ClickEncoderWithEvents4ReadEv+0x164>
				 switch (b) {
    1db8:	85 30       	cpi	r24, 0x05	; 5
    1dba:	19 f0       	breq	.+6      	; 0x1dc2 <_ZN22ClickEncoderWithEvents4ReadEv+0xc6>
    1dbc:	86 30       	cpi	r24, 0x06	; 6
    1dbe:	71 f1       	breq	.+92     	; 0x1e1c <_ZN22ClickEncoderWithEvents4ReadEv+0x120>
    1dc0:	4f c0       	rjmp	.+158    	; 0x1e60 <_ZN22ClickEncoderWithEvents4ReadEv+0x164>
					 case(ClickEncoder::Held):
						break;
					 case(ClickEncoder::Released):
						break;
					 case(ClickEncoder::Clicked):
						if (!(ClickHandler == NULL)){
    1dc2:	88 89       	ldd	r24, Y+16	; 0x10
    1dc4:	99 89       	ldd	r25, Y+17	; 0x11
    1dc6:	89 2b       	or	r24, r25
    1dc8:	19 f4       	brne	.+6      	; 0x1dd0 <_ZN22ClickEncoderWithEvents4ReadEv+0xd4>
    1dca:	8a 89       	ldd	r24, Y+18	; 0x12
    1dcc:	80 ff       	sbrs	r24, 0
    1dce:	48 c0       	rjmp	.+144    	; 0x1e60 <_ZN22ClickEncoderWithEvents4ReadEv+0x164>
							Serial.println("Click Detected!");
    1dd0:	60 ee       	ldi	r22, 0xE0	; 224
    1dd2:	73 e0       	ldi	r23, 0x03	; 3
    1dd4:	82 e8       	ldi	r24, 0x82	; 130
    1dd6:	98 e0       	ldi	r25, 0x08	; 8
    1dd8:	0e 94 87 3a 	call	0x750e	; 0x750e <_ZN5Print7printlnEPKc>
							(UI->*ClickHandler)();
    1ddc:	8a 89       	ldd	r24, Y+18	; 0x12
    1dde:	9b 89       	ldd	r25, Y+19	; 0x13
    1de0:	80 fd       	sbrc	r24, 0
    1de2:	03 c0       	rjmp	.+6      	; 0x1dea <_ZN22ClickEncoderWithEvents4ReadEv+0xee>
    1de4:	e8 89       	ldd	r30, Y+16	; 0x10
    1de6:	f9 89       	ldd	r31, Y+17	; 0x11
    1de8:	11 c0       	rjmp	.+34     	; 0x1e0c <_ZN22ClickEncoderWithEvents4ReadEv+0x110>
    1dea:	ee 85       	ldd	r30, Y+14	; 0x0e
    1dec:	ff 85       	ldd	r31, Y+15	; 0x0f
    1dee:	9c 01       	movw	r18, r24
    1df0:	35 95       	asr	r19
    1df2:	27 95       	ror	r18
    1df4:	e2 0f       	add	r30, r18
    1df6:	f3 1f       	adc	r31, r19
    1df8:	01 90       	ld	r0, Z+
    1dfa:	f0 81       	ld	r31, Z
    1dfc:	e0 2d       	mov	r30, r0
    1dfe:	28 89       	ldd	r18, Y+16	; 0x10
    1e00:	39 89       	ldd	r19, Y+17	; 0x11
    1e02:	e2 0f       	add	r30, r18
    1e04:	f3 1f       	adc	r31, r19
    1e06:	01 90       	ld	r0, Z+
    1e08:	f0 81       	ld	r31, Z
    1e0a:	e0 2d       	mov	r30, r0
    1e0c:	95 95       	asr	r25
    1e0e:	87 95       	ror	r24
    1e10:	2e 85       	ldd	r18, Y+14	; 0x0e
    1e12:	3f 85       	ldd	r19, Y+15	; 0x0f
    1e14:	82 0f       	add	r24, r18
    1e16:	93 1f       	adc	r25, r19
    1e18:	19 95       	eicall
    1e1a:	22 c0       	rjmp	.+68     	; 0x1e60 <_ZN22ClickEncoderWithEvents4ReadEv+0x164>
					}
					break;
					 case (ClickEncoder::DoubleClicked):
						if (!(DblClickHandler == NULL)){
    1e1c:	ec 89       	ldd	r30, Y+20	; 0x14
    1e1e:	fd 89       	ldd	r31, Y+21	; 0x15
    1e20:	30 97       	sbiw	r30, 0x00	; 0
    1e22:	29 f4       	brne	.+10     	; 0x1e2e <_ZN22ClickEncoderWithEvents4ReadEv+0x132>
    1e24:	8e 89       	ldd	r24, Y+22	; 0x16
    1e26:	9f 89       	ldd	r25, Y+23	; 0x17
    1e28:	80 fd       	sbrc	r24, 0
    1e2a:	05 c0       	rjmp	.+10     	; 0x1e36 <_ZN22ClickEncoderWithEvents4ReadEv+0x13a>
    1e2c:	19 c0       	rjmp	.+50     	; 0x1e60 <_ZN22ClickEncoderWithEvents4ReadEv+0x164>
							(UI->*DblClickHandler)();
    1e2e:	8e 89       	ldd	r24, Y+22	; 0x16
    1e30:	9f 89       	ldd	r25, Y+23	; 0x17
    1e32:	80 ff       	sbrs	r24, 0
    1e34:	0e c0       	rjmp	.+28     	; 0x1e52 <_ZN22ClickEncoderWithEvents4ReadEv+0x156>
    1e36:	ae 85       	ldd	r26, Y+14	; 0x0e
    1e38:	bf 85       	ldd	r27, Y+15	; 0x0f
    1e3a:	9c 01       	movw	r18, r24
    1e3c:	35 95       	asr	r19
    1e3e:	27 95       	ror	r18
    1e40:	a2 0f       	add	r26, r18
    1e42:	b3 1f       	adc	r27, r19
    1e44:	2d 91       	ld	r18, X+
    1e46:	3c 91       	ld	r19, X
    1e48:	e2 0f       	add	r30, r18
    1e4a:	f3 1f       	adc	r31, r19
    1e4c:	01 90       	ld	r0, Z+
    1e4e:	f0 81       	ld	r31, Z
    1e50:	e0 2d       	mov	r30, r0
    1e52:	95 95       	asr	r25
    1e54:	87 95       	ror	r24
    1e56:	2e 85       	ldd	r18, Y+14	; 0x0e
    1e58:	3f 85       	ldd	r19, Y+15	; 0x0f
    1e5a:	82 0f       	add	r24, r18
    1e5c:	93 1f       	adc	r25, r19
    1e5e:	19 95       	eicall
						}
						break;
				 }
			}
}
    1e60:	df 91       	pop	r29
    1e62:	cf 91       	pop	r28
    1e64:	08 95       	ret

00001e66 <_ZN10LinkedListI13EZUI_MenuItemE4sizeEv>:
}

// default destructor
EZUI_Menu::~EZUI_Menu()
{
}
    1e66:	fc 01       	movw	r30, r24
    1e68:	82 81       	ldd	r24, Z+2	; 0x02
    1e6a:	93 81       	ldd	r25, Z+3	; 0x03
    1e6c:	08 95       	ret

00001e6e <_ZN10LinkedListI13EZUI_MenuItemE5clearEv>:
    1e6e:	0f 93       	push	r16
    1e70:	1f 93       	push	r17
    1e72:	cf 93       	push	r28
    1e74:	df 93       	push	r29
    1e76:	00 d0       	rcall	.+0      	; 0x1e78 <_ZN10LinkedListI13EZUI_MenuItemE5clearEv+0xa>
    1e78:	1f 92       	push	r1
    1e7a:	1f 92       	push	r1
    1e7c:	cd b7       	in	r28, 0x3d	; 61
    1e7e:	de b7       	in	r29, 0x3e	; 62
    1e80:	8c 01       	movw	r16, r24
    1e82:	0d c0       	rjmp	.+26     	; 0x1e9e <_ZN10LinkedListI13EZUI_MenuItemE5clearEv+0x30>
    1e84:	d8 01       	movw	r26, r16
    1e86:	ed 91       	ld	r30, X+
    1e88:	fc 91       	ld	r31, X
    1e8a:	06 84       	ldd	r0, Z+14	; 0x0e
    1e8c:	f7 85       	ldd	r31, Z+15	; 0x0f
    1e8e:	e0 2d       	mov	r30, r0
    1e90:	b8 01       	movw	r22, r16
    1e92:	ce 01       	movw	r24, r28
    1e94:	01 96       	adiw	r24, 0x01	; 1
    1e96:	19 95       	eicall
    1e98:	ce 01       	movw	r24, r28
    1e9a:	01 96       	adiw	r24, 0x01	; 1
    1e9c:	fc d4       	rcall	.+2552   	; 0x2896 <_ZN13EZUI_MenuItemD1Ev>
    1e9e:	d8 01       	movw	r26, r16
    1ea0:	ed 91       	ld	r30, X+
    1ea2:	fc 91       	ld	r31, X
    1ea4:	01 90       	ld	r0, Z+
    1ea6:	f0 81       	ld	r31, Z
    1ea8:	e0 2d       	mov	r30, r0
    1eaa:	c8 01       	movw	r24, r16
    1eac:	19 95       	eicall
    1eae:	18 16       	cp	r1, r24
    1eb0:	19 06       	cpc	r1, r25
    1eb2:	44 f3       	brlt	.-48     	; 0x1e84 <_ZN10LinkedListI13EZUI_MenuItemE5clearEv+0x16>
    1eb4:	0f 90       	pop	r0
    1eb6:	0f 90       	pop	r0
    1eb8:	0f 90       	pop	r0
    1eba:	0f 90       	pop	r0
    1ebc:	0f 90       	pop	r0
    1ebe:	df 91       	pop	r29
    1ec0:	cf 91       	pop	r28
    1ec2:	1f 91       	pop	r17
    1ec4:	0f 91       	pop	r16
    1ec6:	08 95       	ret

00001ec8 <_ZN10LinkedListI13EZUI_MenuItemE5shiftEv>:
    1ec8:	af 92       	push	r10
    1eca:	bf 92       	push	r11
    1ecc:	cf 92       	push	r12
    1ece:	df 92       	push	r13
    1ed0:	ef 92       	push	r14
    1ed2:	ff 92       	push	r15
    1ed4:	0f 93       	push	r16
    1ed6:	1f 93       	push	r17
    1ed8:	cf 93       	push	r28
    1eda:	df 93       	push	r29
    1edc:	00 d0       	rcall	.+0      	; 0x1ede <_ZN10LinkedListI13EZUI_MenuItemE5shiftEv+0x16>
    1ede:	1f 92       	push	r1
    1ee0:	1f 92       	push	r1
    1ee2:	cd b7       	in	r28, 0x3d	; 61
    1ee4:	de b7       	in	r29, 0x3e	; 62
    1ee6:	6c 01       	movw	r12, r24
    1ee8:	8b 01       	movw	r16, r22
    1eea:	db 01       	movw	r26, r22
    1eec:	12 96       	adiw	r26, 0x02	; 2
    1eee:	8d 91       	ld	r24, X+
    1ef0:	9c 91       	ld	r25, X
    1ef2:	13 97       	sbiw	r26, 0x03	; 3
    1ef4:	18 16       	cp	r1, r24
    1ef6:	19 06       	cpc	r1, r25
    1ef8:	1c f0       	brlt	.+6      	; 0x1f00 <_ZN10LinkedListI13EZUI_MenuItemE5shiftEv+0x38>
    1efa:	c6 01       	movw	r24, r12
    1efc:	c5 d4       	rcall	.+2442   	; 0x2888 <_ZN13EZUI_MenuItemC1Ev>
    1efe:	38 c0       	rjmp	.+112    	; 0x1f70 <_ZN10LinkedListI13EZUI_MenuItemE5shiftEv+0xa8>
    1f00:	02 97       	sbiw	r24, 0x02	; 2
    1f02:	74 f1       	brlt	.+92     	; 0x1f60 <_ZN10LinkedListI13EZUI_MenuItemE5shiftEv+0x98>
    1f04:	fb 01       	movw	r30, r22
    1f06:	e4 80       	ldd	r14, Z+4	; 0x04
    1f08:	f5 80       	ldd	r15, Z+5	; 0x05
    1f0a:	d7 01       	movw	r26, r14
    1f0c:	15 96       	adiw	r26, 0x05	; 5
    1f0e:	ad 90       	ld	r10, X+
    1f10:	bc 90       	ld	r11, X
    1f12:	16 97       	sbiw	r26, 0x06	; 6
    1f14:	85 e0       	ldi	r24, 0x05	; 5
    1f16:	f7 01       	movw	r30, r14
    1f18:	de 01       	movw	r26, r28
    1f1a:	11 96       	adiw	r26, 0x01	; 1
    1f1c:	01 90       	ld	r0, Z+
    1f1e:	0d 92       	st	X+, r0
    1f20:	8a 95       	dec	r24
    1f22:	e1 f7       	brne	.-8      	; 0x1f1c <_ZN10LinkedListI13EZUI_MenuItemE5shiftEv+0x54>
    1f24:	e1 14       	cp	r14, r1
    1f26:	f1 04       	cpc	r15, r1
    1f28:	29 f0       	breq	.+10     	; 0x1f34 <_ZN10LinkedListI13EZUI_MenuItemE5shiftEv+0x6c>
    1f2a:	c7 01       	movw	r24, r14
    1f2c:	b4 d4       	rcall	.+2408   	; 0x2896 <_ZN13EZUI_MenuItemD1Ev>
    1f2e:	c7 01       	movw	r24, r14
    1f30:	0e 94 0e 3a 	call	0x741c	; 0x741c <_ZdlPv>
    1f34:	f8 01       	movw	r30, r16
    1f36:	b5 82       	std	Z+5, r11	; 0x05
    1f38:	a4 82       	std	Z+4, r10	; 0x04
    1f3a:	22 81       	ldd	r18, Z+2	; 0x02
    1f3c:	33 81       	ldd	r19, Z+3	; 0x03
    1f3e:	21 50       	subi	r18, 0x01	; 1
    1f40:	31 09       	sbc	r19, r1
    1f42:	33 83       	std	Z+3, r19	; 0x03
    1f44:	22 83       	std	Z+2, r18	; 0x02
    1f46:	14 86       	std	Z+12, r1	; 0x0c
    1f48:	85 e0       	ldi	r24, 0x05	; 5
    1f4a:	fe 01       	movw	r30, r28
    1f4c:	31 96       	adiw	r30, 0x01	; 1
    1f4e:	d6 01       	movw	r26, r12
    1f50:	01 90       	ld	r0, Z+
    1f52:	0d 92       	st	X+, r0
    1f54:	8a 95       	dec	r24
    1f56:	e1 f7       	brne	.-8      	; 0x1f50 <_ZN10LinkedListI13EZUI_MenuItemE5shiftEv+0x88>
    1f58:	ce 01       	movw	r24, r28
    1f5a:	01 96       	adiw	r24, 0x01	; 1
    1f5c:	9c d4       	rcall	.+2360   	; 0x2896 <_ZN13EZUI_MenuItemD1Ev>
    1f5e:	08 c0       	rjmp	.+16     	; 0x1f70 <_ZN10LinkedListI13EZUI_MenuItemE5shiftEv+0xa8>
    1f60:	db 01       	movw	r26, r22
    1f62:	ed 91       	ld	r30, X+
    1f64:	fc 91       	ld	r31, X
    1f66:	04 84       	ldd	r0, Z+12	; 0x0c
    1f68:	f5 85       	ldd	r31, Z+13	; 0x0d
    1f6a:	e0 2d       	mov	r30, r0
    1f6c:	c6 01       	movw	r24, r12
    1f6e:	19 95       	eicall
    1f70:	c6 01       	movw	r24, r12
    1f72:	0f 90       	pop	r0
    1f74:	0f 90       	pop	r0
    1f76:	0f 90       	pop	r0
    1f78:	0f 90       	pop	r0
    1f7a:	0f 90       	pop	r0
    1f7c:	df 91       	pop	r29
    1f7e:	cf 91       	pop	r28
    1f80:	1f 91       	pop	r17
    1f82:	0f 91       	pop	r16
    1f84:	ff 90       	pop	r15
    1f86:	ef 90       	pop	r14
    1f88:	df 90       	pop	r13
    1f8a:	cf 90       	pop	r12
    1f8c:	bf 90       	pop	r11
    1f8e:	af 90       	pop	r10
    1f90:	08 95       	ret

00001f92 <_ZN10LinkedListI13EZUI_MenuItemE7unshiftES0_>:
    1f92:	cf 92       	push	r12
    1f94:	df 92       	push	r13
    1f96:	ef 92       	push	r14
    1f98:	ff 92       	push	r15
    1f9a:	0f 93       	push	r16
    1f9c:	1f 93       	push	r17
    1f9e:	cf 93       	push	r28
    1fa0:	df 93       	push	r29
    1fa2:	00 d0       	rcall	.+0      	; 0x1fa4 <_ZN10LinkedListI13EZUI_MenuItemE7unshiftES0_+0x12>
    1fa4:	1f 92       	push	r1
    1fa6:	1f 92       	push	r1
    1fa8:	cd b7       	in	r28, 0x3d	; 61
    1faa:	de b7       	in	r29, 0x3e	; 62
    1fac:	8c 01       	movw	r16, r24
    1fae:	6b 01       	movw	r12, r22
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	12 96       	adiw	r26, 0x02	; 2
    1fb4:	8d 91       	ld	r24, X+
    1fb6:	9c 91       	ld	r25, X
    1fb8:	13 97       	sbiw	r26, 0x03	; 3
    1fba:	89 2b       	or	r24, r25
    1fbc:	b9 f4       	brne	.+46     	; 0x1fec <_ZN10LinkedListI13EZUI_MenuItemE7unshiftES0_+0x5a>
    1fbe:	ed 91       	ld	r30, X+
    1fc0:	fc 91       	ld	r31, X
    1fc2:	24 81       	ldd	r18, Z+4	; 0x04
    1fc4:	35 81       	ldd	r19, Z+5	; 0x05
    1fc6:	95 e0       	ldi	r25, 0x05	; 5
    1fc8:	fb 01       	movw	r30, r22
    1fca:	de 01       	movw	r26, r28
    1fcc:	11 96       	adiw	r26, 0x01	; 1
    1fce:	01 90       	ld	r0, Z+
    1fd0:	0d 92       	st	X+, r0
    1fd2:	9a 95       	dec	r25
    1fd4:	e1 f7       	brne	.-8      	; 0x1fce <_ZN10LinkedListI13EZUI_MenuItemE7unshiftES0_+0x3c>
    1fd6:	be 01       	movw	r22, r28
    1fd8:	6f 5f       	subi	r22, 0xFF	; 255
    1fda:	7f 4f       	sbci	r23, 0xFF	; 255
    1fdc:	c8 01       	movw	r24, r16
    1fde:	f9 01       	movw	r30, r18
    1fe0:	19 95       	eicall
    1fe2:	18 2f       	mov	r17, r24
    1fe4:	ce 01       	movw	r24, r28
    1fe6:	01 96       	adiw	r24, 0x01	; 1
    1fe8:	56 d4       	rcall	.+2220   	; 0x2896 <_ZN13EZUI_MenuItemD1Ev>
    1fea:	24 c0       	rjmp	.+72     	; 0x2034 <_ZN10LinkedListI13EZUI_MenuItemE7unshiftES0_+0xa2>
    1fec:	87 e0       	ldi	r24, 0x07	; 7
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    1ff4:	7c 01       	movw	r14, r24
    1ff6:	87 e0       	ldi	r24, 0x07	; 7
    1ff8:	d7 01       	movw	r26, r14
    1ffa:	1d 92       	st	X+, r1
    1ffc:	8a 95       	dec	r24
    1ffe:	e9 f7       	brne	.-6      	; 0x1ffa <_ZN10LinkedListI13EZUI_MenuItemE7unshiftES0_+0x68>
    2000:	c7 01       	movw	r24, r14
    2002:	42 d4       	rcall	.+2180   	; 0x2888 <_ZN13EZUI_MenuItemC1Ev>
    2004:	f8 01       	movw	r30, r16
    2006:	84 81       	ldd	r24, Z+4	; 0x04
    2008:	95 81       	ldd	r25, Z+5	; 0x05
    200a:	d7 01       	movw	r26, r14
    200c:	16 96       	adiw	r26, 0x06	; 6
    200e:	9c 93       	st	X, r25
    2010:	8e 93       	st	-X, r24
    2012:	15 97       	sbiw	r26, 0x05	; 5
    2014:	85 e0       	ldi	r24, 0x05	; 5
    2016:	f6 01       	movw	r30, r12
    2018:	01 90       	ld	r0, Z+
    201a:	0d 92       	st	X+, r0
    201c:	8a 95       	dec	r24
    201e:	e1 f7       	brne	.-8      	; 0x2018 <_ZN10LinkedListI13EZUI_MenuItemE7unshiftES0_+0x86>
    2020:	f8 01       	movw	r30, r16
    2022:	f5 82       	std	Z+5, r15	; 0x05
    2024:	e4 82       	std	Z+4, r14	; 0x04
    2026:	82 81       	ldd	r24, Z+2	; 0x02
    2028:	93 81       	ldd	r25, Z+3	; 0x03
    202a:	01 96       	adiw	r24, 0x01	; 1
    202c:	93 83       	std	Z+3, r25	; 0x03
    202e:	82 83       	std	Z+2, r24	; 0x02
    2030:	14 86       	std	Z+12, r1	; 0x0c
    2032:	11 e0       	ldi	r17, 0x01	; 1
    2034:	81 2f       	mov	r24, r17
    2036:	0f 90       	pop	r0
    2038:	0f 90       	pop	r0
    203a:	0f 90       	pop	r0
    203c:	0f 90       	pop	r0
    203e:	0f 90       	pop	r0
    2040:	df 91       	pop	r29
    2042:	cf 91       	pop	r28
    2044:	1f 91       	pop	r17
    2046:	0f 91       	pop	r16
    2048:	ff 90       	pop	r15
    204a:	ef 90       	pop	r14
    204c:	df 90       	pop	r13
    204e:	cf 90       	pop	r12
    2050:	08 95       	ret

00002052 <_ZN10LinkedListI13EZUI_MenuItemE3addES0_>:
    2052:	ef 92       	push	r14
    2054:	ff 92       	push	r15
    2056:	0f 93       	push	r16
    2058:	1f 93       	push	r17
    205a:	cf 93       	push	r28
    205c:	df 93       	push	r29
    205e:	ec 01       	movw	r28, r24
    2060:	7b 01       	movw	r14, r22
    2062:	87 e0       	ldi	r24, 0x07	; 7
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    206a:	8c 01       	movw	r16, r24
    206c:	87 e0       	ldi	r24, 0x07	; 7
    206e:	f8 01       	movw	r30, r16
    2070:	11 92       	st	Z+, r1
    2072:	8a 95       	dec	r24
    2074:	e9 f7       	brne	.-6      	; 0x2070 <_ZN10LinkedListI13EZUI_MenuItemE3addES0_+0x1e>
    2076:	c8 01       	movw	r24, r16
    2078:	07 d4       	rcall	.+2062   	; 0x2888 <_ZN13EZUI_MenuItemC1Ev>
    207a:	85 e0       	ldi	r24, 0x05	; 5
    207c:	f7 01       	movw	r30, r14
    207e:	d8 01       	movw	r26, r16
    2080:	01 90       	ld	r0, Z+
    2082:	0d 92       	st	X+, r0
    2084:	8a 95       	dec	r24
    2086:	e1 f7       	brne	.-8      	; 0x2080 <_ZN10LinkedListI13EZUI_MenuItemE3addES0_+0x2e>
    2088:	f8 01       	movw	r30, r16
    208a:	16 82       	std	Z+6, r1	; 0x06
    208c:	15 82       	std	Z+5, r1	; 0x05
    208e:	8c 81       	ldd	r24, Y+4	; 0x04
    2090:	9d 81       	ldd	r25, Y+5	; 0x05
    2092:	89 2b       	or	r24, r25
    2094:	39 f0       	breq	.+14     	; 0x20a4 <_ZN10LinkedListI13EZUI_MenuItemE3addES0_+0x52>
    2096:	ee 81       	ldd	r30, Y+6	; 0x06
    2098:	ff 81       	ldd	r31, Y+7	; 0x07
    209a:	16 83       	std	Z+6, r17	; 0x06
    209c:	05 83       	std	Z+5, r16	; 0x05
    209e:	1f 83       	std	Y+7, r17	; 0x07
    20a0:	0e 83       	std	Y+6, r16	; 0x06
    20a2:	04 c0       	rjmp	.+8      	; 0x20ac <_ZN10LinkedListI13EZUI_MenuItemE3addES0_+0x5a>
    20a4:	1d 83       	std	Y+5, r17	; 0x05
    20a6:	0c 83       	std	Y+4, r16	; 0x04
    20a8:	1f 83       	std	Y+7, r17	; 0x07
    20aa:	0e 83       	std	Y+6, r16	; 0x06
    20ac:	8a 81       	ldd	r24, Y+2	; 0x02
    20ae:	9b 81       	ldd	r25, Y+3	; 0x03
    20b0:	01 96       	adiw	r24, 0x01	; 1
    20b2:	9b 83       	std	Y+3, r25	; 0x03
    20b4:	8a 83       	std	Y+2, r24	; 0x02
    20b6:	1c 86       	std	Y+12, r1	; 0x0c
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	df 91       	pop	r29
    20bc:	cf 91       	pop	r28
    20be:	1f 91       	pop	r17
    20c0:	0f 91       	pop	r16
    20c2:	ff 90       	pop	r15
    20c4:	ef 90       	pop	r14
    20c6:	08 95       	ret

000020c8 <_ZN9EZUI_MenuC1E6String>:
    20c8:	0f 93       	push	r16
    20ca:	1f 93       	push	r17
    20cc:	cf 93       	push	r28
    20ce:	df 93       	push	r29
    20d0:	ec 01       	movw	r28, r24
    20d2:	8b 01       	movw	r16, r22
    20d4:	60 ee       	ldi	r22, 0xE0	; 224
    20d6:	75 e0       	ldi	r23, 0x05	; 5
    20d8:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    20dc:	8a e0       	ldi	r24, 0x0A	; 10
    20de:	94 e0       	ldi	r25, 0x04	; 4
    20e0:	9f 83       	std	Y+7, r25	; 0x07
    20e2:	8e 83       	std	Y+6, r24	; 0x06
    20e4:	1b 86       	std	Y+11, r1	; 0x0b
    20e6:	1a 86       	std	Y+10, r1	; 0x0a
    20e8:	1d 86       	std	Y+13, r1	; 0x0d
    20ea:	1c 86       	std	Y+12, r1	; 0x0c
    20ec:	19 86       	std	Y+9, r1	; 0x09
    20ee:	18 86       	std	Y+8, r1	; 0x08
    20f0:	1f 86       	std	Y+15, r1	; 0x0f
    20f2:	1e 86       	std	Y+14, r1	; 0x0e
    20f4:	19 8a       	std	Y+17, r1	; 0x11
    20f6:	18 8a       	std	Y+16, r1	; 0x10
    20f8:	1a 8a       	std	Y+18, r1	; 0x12
    20fa:	1c 8a       	std	Y+20, r1	; 0x14
    20fc:	1b 8a       	std	Y+19, r1	; 0x13
    20fe:	1e 8a       	std	Y+22, r1	; 0x16
    2100:	1d 8a       	std	Y+21, r1	; 0x15
    2102:	18 8e       	std	Y+24, r1	; 0x18
    2104:	1f 8a       	std	Y+23, r1	; 0x17
    2106:	1a 8e       	std	Y+26, r1	; 0x1a
    2108:	19 8e       	std	Y+25, r1	; 0x19
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	9c 8f       	std	Y+28, r25	; 0x1c
    2110:	8b 8f       	std	Y+27, r24	; 0x1b
    2112:	b8 01       	movw	r22, r16
    2114:	ce 01       	movw	r24, r28
    2116:	0e 94 83 41 	call	0x8306	; 0x8306 <_ZN6StringaSERKS_>
    211a:	df 91       	pop	r29
    211c:	cf 91       	pop	r28
    211e:	1f 91       	pop	r17
    2120:	0f 91       	pop	r16
    2122:	08 95       	ret

00002124 <_ZN9EZUI_Menu7addItemEP17EZUI_Control_Link>:

void EZUI_Menu::addItem(EZUI_Control_Link * Link){
    2124:	0f 93       	push	r16
    2126:	1f 93       	push	r17
    2128:	cf 93       	push	r28
    212a:	df 93       	push	r29
    212c:	cd b7       	in	r28, 0x3d	; 61
    212e:	de b7       	in	r29, 0x3e	; 62
    2130:	2a 97       	sbiw	r28, 0x0a	; 10
    2132:	0f b6       	in	r0, 0x3f	; 63
    2134:	f8 94       	cli
    2136:	de bf       	out	0x3e, r29	; 62
    2138:	0f be       	out	0x3f, r0	; 63
    213a:	cd bf       	out	0x3d, r28	; 61
    213c:	8c 01       	movw	r16, r24
	EZUI_MenuItem MenuItem = EZUI_MenuItem(Link);
    213e:	ce 01       	movw	r24, r28
    2140:	06 96       	adiw	r24, 0x06	; 6
    2142:	92 d3       	rcall	.+1828   	; 0x2868 <_ZN13EZUI_MenuItemC1EP17EZUI_Control_Link>
	this->_Items.add(MenuItem);
    2144:	95 e0       	ldi	r25, 0x05	; 5
    2146:	fe 01       	movw	r30, r28
    2148:	36 96       	adiw	r30, 0x06	; 6
    214a:	de 01       	movw	r26, r28
    214c:	11 96       	adiw	r26, 0x01	; 1
    214e:	01 90       	ld	r0, Z+
    2150:	0d 92       	st	X+, r0
    2152:	9a 95       	dec	r25
    2154:	e1 f7       	brne	.-8      	; 0x214e <_ZN9EZUI_Menu7addItemEP17EZUI_Control_Link+0x2a>
    2156:	be 01       	movw	r22, r28
    2158:	6f 5f       	subi	r22, 0xFF	; 255
    215a:	7f 4f       	sbci	r23, 0xFF	; 255
    215c:	c8 01       	movw	r24, r16
    215e:	06 96       	adiw	r24, 0x06	; 6
    2160:	78 df       	rcall	.-272    	; 0x2052 <_ZN10LinkedListI13EZUI_MenuItemE3addES0_>
    2162:	ce 01       	movw	r24, r28
    2164:	01 96       	adiw	r24, 0x01	; 1
    2166:	97 d3       	rcall	.+1838   	; 0x2896 <_ZN13EZUI_MenuItemD1Ev>
    2168:	ce 01       	movw	r24, r28
    216a:	06 96       	adiw	r24, 0x06	; 6
    216c:	94 d3       	rcall	.+1832   	; 0x2896 <_ZN13EZUI_MenuItemD1Ev>
}
    216e:	2a 96       	adiw	r28, 0x0a	; 10
    2170:	0f b6       	in	r0, 0x3f	; 63
    2172:	f8 94       	cli
    2174:	de bf       	out	0x3e, r29	; 62
    2176:	0f be       	out	0x3f, r0	; 63
    2178:	cd bf       	out	0x3d, r28	; 61
    217a:	df 91       	pop	r29
    217c:	cf 91       	pop	r28
    217e:	1f 91       	pop	r17
    2180:	0f 91       	pop	r16
    2182:	08 95       	ret

00002184 <_ZN9EZUI_Menu7addItemEP25EZUI_Control_ToggleOption>:

void EZUI_Menu::addItem(EZUI_Control_ToggleOption * ToggleOpt){
    2184:	0f 93       	push	r16
    2186:	1f 93       	push	r17
    2188:	cf 93       	push	r28
    218a:	df 93       	push	r29
    218c:	cd b7       	in	r28, 0x3d	; 61
    218e:	de b7       	in	r29, 0x3e	; 62
    2190:	2a 97       	sbiw	r28, 0x0a	; 10
    2192:	0f b6       	in	r0, 0x3f	; 63
    2194:	f8 94       	cli
    2196:	de bf       	out	0x3e, r29	; 62
    2198:	0f be       	out	0x3f, r0	; 63
    219a:	cd bf       	out	0x3d, r28	; 61
    219c:	8c 01       	movw	r16, r24
	EZUI_MenuItem MenuItem = EZUI_MenuItem(ToggleOpt);
    219e:	ce 01       	movw	r24, r28
    21a0:	06 96       	adiw	r24, 0x06	; 6
    21a2:	6a d3       	rcall	.+1748   	; 0x2878 <_ZN13EZUI_MenuItemC1EP25EZUI_Control_ToggleOption>
	this->_Items.add(MenuItem);
    21a4:	95 e0       	ldi	r25, 0x05	; 5
    21a6:	fe 01       	movw	r30, r28
    21a8:	36 96       	adiw	r30, 0x06	; 6
    21aa:	de 01       	movw	r26, r28
    21ac:	11 96       	adiw	r26, 0x01	; 1
    21ae:	01 90       	ld	r0, Z+
    21b0:	0d 92       	st	X+, r0
    21b2:	9a 95       	dec	r25
    21b4:	e1 f7       	brne	.-8      	; 0x21ae <_ZN9EZUI_Menu7addItemEP25EZUI_Control_ToggleOption+0x2a>
    21b6:	be 01       	movw	r22, r28
    21b8:	6f 5f       	subi	r22, 0xFF	; 255
    21ba:	7f 4f       	sbci	r23, 0xFF	; 255
    21bc:	c8 01       	movw	r24, r16
    21be:	06 96       	adiw	r24, 0x06	; 6
    21c0:	48 df       	rcall	.-368    	; 0x2052 <_ZN10LinkedListI13EZUI_MenuItemE3addES0_>
    21c2:	ce 01       	movw	r24, r28
    21c4:	01 96       	adiw	r24, 0x01	; 1
    21c6:	67 d3       	rcall	.+1742   	; 0x2896 <_ZN13EZUI_MenuItemD1Ev>
    21c8:	ce 01       	movw	r24, r28
    21ca:	06 96       	adiw	r24, 0x06	; 6
    21cc:	64 d3       	rcall	.+1736   	; 0x2896 <_ZN13EZUI_MenuItemD1Ev>
}
    21ce:	2a 96       	adiw	r28, 0x0a	; 10
    21d0:	0f b6       	in	r0, 0x3f	; 63
    21d2:	f8 94       	cli
    21d4:	de bf       	out	0x3e, r29	; 62
    21d6:	0f be       	out	0x3f, r0	; 63
    21d8:	cd bf       	out	0x3d, r28	; 61
    21da:	df 91       	pop	r29
    21dc:	cf 91       	pop	r28
    21de:	1f 91       	pop	r17
    21e0:	0f 91       	pop	r16
    21e2:	08 95       	ret

000021e4 <_ZN9EZUI_Menu8prevItemEv>:
		}
		refresh = 0;
	}
}

void EZUI_Menu::prevItem(void){
    21e4:	cf 93       	push	r28
    21e6:	df 93       	push	r29
    21e8:	ec 01       	movw	r28, r24
	currentItem--;
    21ea:	89 8d       	ldd	r24, Y+25	; 0x19
    21ec:	9a 8d       	ldd	r25, Y+26	; 0x1a
    21ee:	01 97       	sbiw	r24, 0x01	; 1
	if (currentItem < 0){ 
    21f0:	1a f0       	brmi	.+6      	; 0x21f8 <_ZN9EZUI_Menu8prevItemEv+0x14>
		refresh = 0;
	}
}

void EZUI_Menu::prevItem(void){
	currentItem--;
    21f2:	9a 8f       	std	Y+26, r25	; 0x1a
    21f4:	89 8f       	std	Y+25, r24	; 0x19
    21f6:	02 c0       	rjmp	.+4      	; 0x21fc <_ZN9EZUI_Menu8prevItemEv+0x18>
	if (currentItem < 0){ 
		currentItem = 0;
    21f8:	1a 8e       	std	Y+26, r1	; 0x1a
    21fa:	19 8e       	std	Y+25, r1	; 0x19
	}
	Serial.print(Name);
    21fc:	be 01       	movw	r22, r28
    21fe:	82 e8       	ldi	r24, 0x82	; 130
    2200:	98 e0       	ldi	r25, 0x08	; 8
    2202:	0e 94 3e 3a 	call	0x747c	; 0x747c <_ZN5Print5printERK6String>
	Serial.print(" - Encoder Item: ");
    2206:	60 ef       	ldi	r22, 0xF0	; 240
    2208:	73 e0       	ldi	r23, 0x03	; 3
    220a:	82 e8       	ldi	r24, 0x82	; 130
    220c:	98 e0       	ldi	r25, 0x08	; 8
    220e:	0e 94 4d 3a 	call	0x749a	; 0x749a <_ZN5Print5printEPKc>
	Serial.println(currentItem);
    2212:	69 8d       	ldd	r22, Y+25	; 0x19
    2214:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2216:	4a e0       	ldi	r20, 0x0A	; 10
    2218:	50 e0       	ldi	r21, 0x00	; 0
    221a:	82 e8       	ldi	r24, 0x82	; 130
    221c:	98 e0       	ldi	r25, 0x08	; 8
    221e:	0e 94 49 3b 	call	0x7692	; 0x7692 <_ZN5Print7printlnEii>
	refresh = 1;
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	9c 8f       	std	Y+28, r25	; 0x1c
    2228:	8b 8f       	std	Y+27, r24	; 0x1b
}
    222a:	df 91       	pop	r29
    222c:	cf 91       	pop	r28
    222e:	08 95       	ret

00002230 <_ZN9EZUI_Menu8nextItemEv>:

void EZUI_Menu::nextItem(void){
    2230:	cf 93       	push	r28
    2232:	df 93       	push	r29
    2234:	ec 01       	movw	r28, r24
	currentItem++;
    2236:	89 8d       	ldd	r24, Y+25	; 0x19
    2238:	9a 8d       	ldd	r25, Y+26	; 0x1a
    223a:	01 96       	adiw	r24, 0x01	; 1
    223c:	9a 8f       	std	Y+26, r25	; 0x1a
    223e:	89 8f       	std	Y+25, r24	; 0x19
	return false;
}

template<typename T>
int LinkedList<T>::size(){
	return _size;
    2240:	28 85       	ldd	r18, Y+8	; 0x08
    2242:	39 85       	ldd	r19, Y+9	; 0x09
	if (currentItem >= _Items.size()){
    2244:	82 17       	cp	r24, r18
    2246:	93 07       	cpc	r25, r19
    2248:	24 f0       	brlt	.+8      	; 0x2252 <_ZN9EZUI_Menu8nextItemEv+0x22>
		currentItem = _Items.size()-1;
    224a:	21 50       	subi	r18, 0x01	; 1
    224c:	31 09       	sbc	r19, r1
    224e:	3a 8f       	std	Y+26, r19	; 0x1a
    2250:	29 8f       	std	Y+25, r18	; 0x19
	}
	Serial.print(Name);
    2252:	be 01       	movw	r22, r28
    2254:	82 e8       	ldi	r24, 0x82	; 130
    2256:	98 e0       	ldi	r25, 0x08	; 8
    2258:	0e 94 3e 3a 	call	0x747c	; 0x747c <_ZN5Print5printERK6String>
	Serial.print(" - Encoder Item: ");
    225c:	60 ef       	ldi	r22, 0xF0	; 240
    225e:	73 e0       	ldi	r23, 0x03	; 3
    2260:	82 e8       	ldi	r24, 0x82	; 130
    2262:	98 e0       	ldi	r25, 0x08	; 8
    2264:	0e 94 4d 3a 	call	0x749a	; 0x749a <_ZN5Print5printEPKc>
	Serial.println(currentItem);
    2268:	69 8d       	ldd	r22, Y+25	; 0x19
    226a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    226c:	4a e0       	ldi	r20, 0x0A	; 10
    226e:	50 e0       	ldi	r21, 0x00	; 0
    2270:	82 e8       	ldi	r24, 0x82	; 130
    2272:	98 e0       	ldi	r25, 0x08	; 8
    2274:	0e 94 49 3b 	call	0x7692	; 0x7692 <_ZN5Print7printlnEii>
	refresh = 1;
    2278:	81 e0       	ldi	r24, 0x01	; 1
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	9c 8f       	std	Y+28, r25	; 0x1c
    227e:	8b 8f       	std	Y+27, r24	; 0x1b
}
    2280:	df 91       	pop	r29
    2282:	cf 91       	pop	r28
    2284:	08 95       	ret

00002286 <_ZN10LinkedListI13EZUI_MenuItemE7getNodeEi>:
/*
	Actualy "logic" coding
*/

template<typename T>
ListNode<T>* LinkedList<T>::getNode(int index){
    2286:	dc 01       	movw	r26, r24

	int _pos = 0;
	ListNode<T>* current = root;
    2288:	14 96       	adiw	r26, 0x04	; 4
    228a:	ed 91       	ld	r30, X+
    228c:	fc 91       	ld	r31, X
    228e:	15 97       	sbiw	r26, 0x05	; 5

	// Check if the node trying to get is
	// immediatly AFTER the previous got one
	if(isCached && lastIndexGot <= index){
    2290:	1c 96       	adiw	r26, 0x0c	; 12
    2292:	8c 91       	ld	r24, X
    2294:	1c 97       	sbiw	r26, 0x0c	; 12
    2296:	88 23       	and	r24, r24
    2298:	61 f0       	breq	.+24     	; 0x22b2 <_ZN10LinkedListI13EZUI_MenuItemE7getNodeEi+0x2c>
    229a:	1a 96       	adiw	r26, 0x0a	; 10
    229c:	2d 91       	ld	r18, X+
    229e:	3c 91       	ld	r19, X
    22a0:	1b 97       	sbiw	r26, 0x0b	; 11
    22a2:	62 17       	cp	r22, r18
    22a4:	73 07       	cpc	r23, r19
    22a6:	44 f0       	brlt	.+16     	; 0x22b8 <_ZN10LinkedListI13EZUI_MenuItemE7getNodeEi+0x32>
		_pos = lastIndexGot;
		current = lastNodeGot;
    22a8:	18 96       	adiw	r26, 0x08	; 8
    22aa:	ed 91       	ld	r30, X+
    22ac:	fc 91       	ld	r31, X
    22ae:	19 97       	sbiw	r26, 0x09	; 9
    22b0:	05 c0       	rjmp	.+10     	; 0x22bc <_ZN10LinkedListI13EZUI_MenuItemE7getNodeEi+0x36>
*/

template<typename T>
ListNode<T>* LinkedList<T>::getNode(int index){

	int _pos = 0;
    22b2:	20 e0       	ldi	r18, 0x00	; 0
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	02 c0       	rjmp	.+4      	; 0x22bc <_ZN10LinkedListI13EZUI_MenuItemE7getNodeEi+0x36>
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	30 e0       	ldi	r19, 0x00	; 0
	if(isCached && lastIndexGot <= index){
		_pos = lastIndexGot;
		current = lastNodeGot;
	}

	while(_pos < index && current){
    22bc:	26 17       	cp	r18, r22
    22be:	37 07       	cpc	r19, r23
    22c0:	64 f4       	brge	.+24     	; 0x22da <_ZN10LinkedListI13EZUI_MenuItemE7getNodeEi+0x54>
    22c2:	30 97       	sbiw	r30, 0x00	; 0
    22c4:	51 f0       	breq	.+20     	; 0x22da <_ZN10LinkedListI13EZUI_MenuItemE7getNodeEi+0x54>
		current = current->next;
    22c6:	05 80       	ldd	r0, Z+5	; 0x05
    22c8:	f6 81       	ldd	r31, Z+6	; 0x06
    22ca:	e0 2d       	mov	r30, r0

		_pos++;
    22cc:	2f 5f       	subi	r18, 0xFF	; 255
    22ce:	3f 4f       	sbci	r19, 0xFF	; 255
	if(isCached && lastIndexGot <= index){
		_pos = lastIndexGot;
		current = lastNodeGot;
	}

	while(_pos < index && current){
    22d0:	26 17       	cp	r18, r22
    22d2:	37 07       	cpc	r19, r23
    22d4:	14 f4       	brge	.+4      	; 0x22da <_ZN10LinkedListI13EZUI_MenuItemE7getNodeEi+0x54>
    22d6:	30 97       	sbiw	r30, 0x00	; 0
    22d8:	b1 f7       	brne	.-20     	; 0x22c6 <_ZN10LinkedListI13EZUI_MenuItemE7getNodeEi+0x40>

		_pos++;
	}

	// Check if the object index got is the same as the required
	if(_pos == index){
    22da:	26 17       	cp	r18, r22
    22dc:	37 07       	cpc	r19, r23
    22de:	79 f4       	brne	.+30     	; 0x22fe <_ZN10LinkedListI13EZUI_MenuItemE7getNodeEi+0x78>
		isCached = true;
    22e0:	81 e0       	ldi	r24, 0x01	; 1
    22e2:	1c 96       	adiw	r26, 0x0c	; 12
    22e4:	8c 93       	st	X, r24
    22e6:	1c 97       	sbiw	r26, 0x0c	; 12
		lastIndexGot = index;
    22e8:	1b 96       	adiw	r26, 0x0b	; 11
    22ea:	3c 93       	st	X, r19
    22ec:	2e 93       	st	-X, r18
    22ee:	1a 97       	sbiw	r26, 0x0a	; 10
		lastNodeGot = current;
    22f0:	19 96       	adiw	r26, 0x09	; 9
    22f2:	fc 93       	st	X, r31
    22f4:	ee 93       	st	-X, r30
    22f6:	18 97       	sbiw	r26, 0x08	; 8

		return current;
    22f8:	8e 2f       	mov	r24, r30
    22fa:	9f 2f       	mov	r25, r31
    22fc:	08 95       	ret
	}

	return false;
    22fe:	80 e0       	ldi	r24, 0x00	; 0
    2300:	90 e0       	ldi	r25, 0x00	; 0
}
    2302:	08 95       	ret

00002304 <_ZN10LinkedListI13EZUI_MenuItemE3getEi>:
	return ret;
}


template<typename T>
T LinkedList<T>::get(int index){
    2304:	cf 93       	push	r28
    2306:	df 93       	push	r29
    2308:	ec 01       	movw	r28, r24
    230a:	cb 01       	movw	r24, r22
	ListNode<T> *tmp = getNode(index);
    230c:	ba 01       	movw	r22, r20
    230e:	bb df       	rcall	.-138    	; 0x2286 <_ZN10LinkedListI13EZUI_MenuItemE7getNodeEi>

	return (tmp ? tmp->data : T());
    2310:	00 97       	sbiw	r24, 0x00	; 0
    2312:	41 f0       	breq	.+16     	; 0x2324 <_ZN10LinkedListI13EZUI_MenuItemE3getEi+0x20>
    2314:	25 e0       	ldi	r18, 0x05	; 5
    2316:	fc 01       	movw	r30, r24
    2318:	de 01       	movw	r26, r28
    231a:	01 90       	ld	r0, Z+
    231c:	0d 92       	st	X+, r0
    231e:	2a 95       	dec	r18
    2320:	e1 f7       	brne	.-8      	; 0x231a <_ZN10LinkedListI13EZUI_MenuItemE3getEi+0x16>
    2322:	02 c0       	rjmp	.+4      	; 0x2328 <_ZN10LinkedListI13EZUI_MenuItemE3getEi+0x24>
    2324:	ce 01       	movw	r24, r28
    2326:	b0 d2       	rcall	.+1376   	; 0x2888 <_ZN13EZUI_MenuItemC1Ev>
}
    2328:	ce 01       	movw	r24, r28
    232a:	df 91       	pop	r29
    232c:	cf 91       	pop	r28
    232e:	08 95       	ret

00002330 <_ZN9EZUI_Menu7displayEP4EZUI>:
void EZUI_Menu::addItem(EZUI_Control_ToggleOption * ToggleOpt){
	EZUI_MenuItem MenuItem = EZUI_MenuItem(ToggleOpt);
	this->_Items.add(MenuItem);
}

void EZUI_Menu::display(EZUI *UI){
    2330:	2f 92       	push	r2
    2332:	3f 92       	push	r3
    2334:	4f 92       	push	r4
    2336:	5f 92       	push	r5
    2338:	6f 92       	push	r6
    233a:	7f 92       	push	r7
    233c:	8f 92       	push	r8
    233e:	9f 92       	push	r9
    2340:	af 92       	push	r10
    2342:	bf 92       	push	r11
    2344:	cf 92       	push	r12
    2346:	df 92       	push	r13
    2348:	ef 92       	push	r14
    234a:	ff 92       	push	r15
    234c:	0f 93       	push	r16
    234e:	1f 93       	push	r17
    2350:	cf 93       	push	r28
    2352:	df 93       	push	r29
    2354:	00 d0       	rcall	.+0      	; 0x2356 <_ZN9EZUI_Menu7displayEP4EZUI+0x26>
    2356:	1f 92       	push	r1
    2358:	1f 92       	push	r1
    235a:	cd b7       	in	r28, 0x3d	; 61
    235c:	de b7       	in	r29, 0x3e	; 62
	LiquidCrystal_I2C *LCD = UI->LCD;
    235e:	fb 01       	movw	r30, r22
    2360:	06 85       	ldd	r16, Z+14	; 0x0e
    2362:	17 85       	ldd	r17, Z+15	; 0x0f
	if (refresh==1){
    2364:	fc 01       	movw	r30, r24
    2366:	23 8d       	ldd	r18, Z+27	; 0x1b
    2368:	34 8d       	ldd	r19, Z+28	; 0x1c
    236a:	21 30       	cpi	r18, 0x01	; 1
    236c:	31 05       	cpc	r19, r1
    236e:	09 f0       	breq	.+2      	; 0x2372 <_ZN9EZUI_Menu7displayEP4EZUI+0x42>
    2370:	93 c0       	rjmp	.+294    	; 0x2498 <_ZN9EZUI_Menu7displayEP4EZUI+0x168>
    2372:	3b 01       	movw	r6, r22
    2374:	7c 01       	movw	r14, r24
		//Print the Menu Header
		LCD->clear();
    2376:	50 2e       	mov	r5, r16
    2378:	41 2e       	mov	r4, r17
    237a:	80 2f       	mov	r24, r16
    237c:	91 2f       	mov	r25, r17
    237e:	0e 94 3e 30 	call	0x607c	; 0x607c <_ZN3LCD5clearEv>
		LCD->setCursor(0,0);
    2382:	40 e0       	ldi	r20, 0x00	; 0
    2384:	60 e0       	ldi	r22, 0x00	; 0
    2386:	80 2f       	mov	r24, r16
    2388:	91 2f       	mov	r25, r17
    238a:	0e 94 45 30 	call	0x608a	; 0x608a <_ZN3LCD9setCursorEhh>
		LCD->print("=");
    238e:	62 e0       	ldi	r22, 0x02	; 2
    2390:	74 e0       	ldi	r23, 0x04	; 4
    2392:	80 2f       	mov	r24, r16
    2394:	91 2f       	mov	r25, r17
    2396:	0e 94 4d 3a 	call	0x749a	; 0x749a <_ZN5Print5printEPKc>
		LCD->print(Name);
    239a:	b7 01       	movw	r22, r14
    239c:	80 2f       	mov	r24, r16
    239e:	91 2f       	mov	r25, r17
    23a0:	0e 94 3e 3a 	call	0x747c	; 0x747c <_ZN5Print5printERK6String>
	
		for(int i=0; i<(20 - Name.length() - 1); i++){
    23a4:	f7 01       	movw	r30, r14
    23a6:	84 81       	ldd	r24, Z+4	; 0x04
    23a8:	95 81       	ldd	r25, Z+5	; 0x05
    23aa:	43 97       	sbiw	r24, 0x13	; 19
    23ac:	c1 f0       	breq	.+48     	; 0x23de <_ZN9EZUI_Menu7displayEP4EZUI+0xae>
    23ae:	00 e0       	ldi	r16, 0x00	; 0
    23b0:	10 e0       	ldi	r17, 0x00	; 0
    23b2:	0f 2e       	mov	r0, r31
    23b4:	f3 e1       	ldi	r31, 0x13	; 19
    23b6:	cf 2e       	mov	r12, r31
    23b8:	d1 2c       	mov	r13, r1
    23ba:	f0 2d       	mov	r31, r0
			LCD->print("=");
    23bc:	62 e0       	ldi	r22, 0x02	; 2
    23be:	74 e0       	ldi	r23, 0x04	; 4
    23c0:	85 2d       	mov	r24, r5
    23c2:	94 2d       	mov	r25, r4
    23c4:	0e 94 4d 3a 	call	0x749a	; 0x749a <_ZN5Print5printEPKc>
		LCD->clear();
		LCD->setCursor(0,0);
		LCD->print("=");
		LCD->print(Name);
	
		for(int i=0; i<(20 - Name.length() - 1); i++){
    23c8:	0f 5f       	subi	r16, 0xFF	; 255
    23ca:	1f 4f       	sbci	r17, 0xFF	; 255
    23cc:	f7 01       	movw	r30, r14
    23ce:	84 81       	ldd	r24, Z+4	; 0x04
    23d0:	95 81       	ldd	r25, Z+5	; 0x05
    23d2:	96 01       	movw	r18, r12
    23d4:	28 1b       	sub	r18, r24
    23d6:	39 0b       	sbc	r19, r25
    23d8:	02 17       	cp	r16, r18
    23da:	13 07       	cpc	r17, r19
    23dc:	78 f3       	brcs	.-34     	; 0x23bc <_ZN9EZUI_Menu7displayEP4EZUI+0x8c>
			LCD->print("=");
		}
	
		//Print each menu item (3 items left on line)
		int firstItemToPrint = (int)(currentItem/3);
    23de:	f7 01       	movw	r30, r14
    23e0:	81 8d       	ldd	r24, Z+25	; 0x19
    23e2:	92 8d       	ldd	r25, Z+26	; 0x1a
    23e4:	63 e0       	ldi	r22, 0x03	; 3
    23e6:	70 e0       	ldi	r23, 0x00	; 0
    23e8:	0e 94 7b 44 	call	0x88f6	; 0x88f6 <__divmodhi4>
    23ec:	8b 01       	movw	r16, r22
		int ln = 1;
		for(int i=firstItemToPrint; i<min(_Items.size(),firstItemToPrint + 3); i++){
    23ee:	47 01       	movw	r8, r14
    23f0:	f6 e0       	ldi	r31, 0x06	; 6
    23f2:	8f 0e       	add	r8, r31
    23f4:	91 1c       	adc	r9, r1
    23f6:	5b 01       	movw	r10, r22
    23f8:	23 e0       	ldi	r18, 0x03	; 3
    23fa:	a2 0e       	add	r10, r18
    23fc:	b1 1c       	adc	r11, r1
    23fe:	f7 01       	movw	r30, r14
    2400:	20 85       	ldd	r18, Z+8	; 0x08
    2402:	31 85       	ldd	r19, Z+9	; 0x09
    2404:	c5 01       	movw	r24, r10
    2406:	2a 15       	cp	r18, r10
    2408:	3b 05       	cpc	r19, r11
    240a:	0c f4       	brge	.+2      	; 0x240e <_ZN9EZUI_Menu7displayEP4EZUI+0xde>
    240c:	c9 01       	movw	r24, r18
    240e:	08 17       	cp	r16, r24
    2410:	19 07       	cpc	r17, r25
    2412:	0c f0       	brlt	.+2      	; 0x2416 <_ZN9EZUI_Menu7displayEP4EZUI+0xe6>
    2414:	3e c0       	rjmp	.+124    	; 0x2492 <_ZN9EZUI_Menu7displayEP4EZUI+0x162>
    2416:	cc 24       	eor	r12, r12
    2418:	c3 94       	inc	r12
    241a:	d1 2c       	mov	r13, r1
    241c:	2a 2c       	mov	r2, r10
    241e:	3b 2c       	mov	r3, r11
			LCD->setCursor(0,ln);
    2420:	4c 2d       	mov	r20, r12
    2422:	60 e0       	ldi	r22, 0x00	; 0
    2424:	85 2d       	mov	r24, r5
    2426:	94 2d       	mov	r25, r4
    2428:	0e 94 45 30 	call	0x608a	; 0x608a <_ZN3LCD9setCursorEhh>
			if (i == currentItem){
    242c:	f7 01       	movw	r30, r14
    242e:	81 8d       	ldd	r24, Z+25	; 0x19
    2430:	92 8d       	ldd	r25, Z+26	; 0x1a
    2432:	80 17       	cp	r24, r16
    2434:	91 07       	cpc	r25, r17
    2436:	39 f4       	brne	.+14     	; 0x2446 <_ZN9EZUI_Menu7displayEP4EZUI+0x116>
				LCD->print(">");
    2438:	64 e0       	ldi	r22, 0x04	; 4
    243a:	74 e0       	ldi	r23, 0x04	; 4
    243c:	85 2d       	mov	r24, r5
    243e:	94 2d       	mov	r25, r4
    2440:	0e 94 4d 3a 	call	0x749a	; 0x749a <_ZN5Print5printEPKc>
    2444:	06 c0       	rjmp	.+12     	; 0x2452 <_ZN9EZUI_Menu7displayEP4EZUI+0x122>
			}else{
				LCD->print(" ");
    2446:	65 e5       	ldi	r22, 0x55	; 85
    2448:	75 e0       	ldi	r23, 0x05	; 5
    244a:	85 2d       	mov	r24, r5
    244c:	94 2d       	mov	r25, r4
    244e:	0e 94 4d 3a 	call	0x749a	; 0x749a <_ZN5Print5printEPKc>
			}
			_Items.get(i).Print(1,ln,UI);
    2452:	a8 01       	movw	r20, r16
    2454:	b4 01       	movw	r22, r8
    2456:	ce 01       	movw	r24, r28
    2458:	01 96       	adiw	r24, 0x01	; 1
    245a:	54 df       	rcall	.-344    	; 0x2304 <_ZN10LinkedListI13EZUI_MenuItemE3getEi>
    245c:	93 01       	movw	r18, r6
    245e:	a6 01       	movw	r20, r12
    2460:	61 e0       	ldi	r22, 0x01	; 1
    2462:	70 e0       	ldi	r23, 0x00	; 0
    2464:	ce 01       	movw	r24, r28
    2466:	01 96       	adiw	r24, 0x01	; 1
    2468:	17 d2       	rcall	.+1070   	; 0x2898 <_ZN13EZUI_MenuItem5PrintEiiP4EZUI>
    246a:	ce 01       	movw	r24, r28
    246c:	01 96       	adiw	r24, 0x01	; 1
    246e:	13 d2       	rcall	.+1062   	; 0x2896 <_ZN13EZUI_MenuItemD1Ev>
			ln++;
    2470:	ff ef       	ldi	r31, 0xFF	; 255
    2472:	cf 1a       	sub	r12, r31
    2474:	df 0a       	sbc	r13, r31
		}
	
		//Print each menu item (3 items left on line)
		int firstItemToPrint = (int)(currentItem/3);
		int ln = 1;
		for(int i=firstItemToPrint; i<min(_Items.size(),firstItemToPrint + 3); i++){
    2476:	0f 5f       	subi	r16, 0xFF	; 255
    2478:	1f 4f       	sbci	r17, 0xFF	; 255
    247a:	f7 01       	movw	r30, r14
    247c:	20 85       	ldd	r18, Z+8	; 0x08
    247e:	31 85       	ldd	r19, Z+9	; 0x09
    2480:	82 2d       	mov	r24, r2
    2482:	93 2d       	mov	r25, r3
    2484:	2a 15       	cp	r18, r10
    2486:	3b 05       	cpc	r19, r11
    2488:	0c f4       	brge	.+2      	; 0x248c <_ZN9EZUI_Menu7displayEP4EZUI+0x15c>
    248a:	c9 01       	movw	r24, r18
    248c:	08 17       	cp	r16, r24
    248e:	19 07       	cpc	r17, r25
    2490:	3c f2       	brlt	.-114    	; 0x2420 <_ZN9EZUI_Menu7displayEP4EZUI+0xf0>
				LCD->print(" ");
			}
			_Items.get(i).Print(1,ln,UI);
			ln++;
		}
		refresh = 0;
    2492:	f7 01       	movw	r30, r14
    2494:	14 8e       	std	Z+28, r1	; 0x1c
    2496:	13 8e       	std	Z+27, r1	; 0x1b
	}
}
    2498:	0f 90       	pop	r0
    249a:	0f 90       	pop	r0
    249c:	0f 90       	pop	r0
    249e:	0f 90       	pop	r0
    24a0:	0f 90       	pop	r0
    24a2:	df 91       	pop	r29
    24a4:	cf 91       	pop	r28
    24a6:	1f 91       	pop	r17
    24a8:	0f 91       	pop	r16
    24aa:	ff 90       	pop	r15
    24ac:	ef 90       	pop	r14
    24ae:	df 90       	pop	r13
    24b0:	cf 90       	pop	r12
    24b2:	bf 90       	pop	r11
    24b4:	af 90       	pop	r10
    24b6:	9f 90       	pop	r9
    24b8:	8f 90       	pop	r8
    24ba:	7f 90       	pop	r7
    24bc:	6f 90       	pop	r6
    24be:	5f 90       	pop	r5
    24c0:	4f 90       	pop	r4
    24c2:	3f 90       	pop	r3
    24c4:	2f 90       	pop	r2
    24c6:	08 95       	ret

000024c8 <_ZN9EZUI_Menu10selectItemEP4EZUI>:
	Serial.print(" - Encoder Item: ");
	Serial.println(currentItem);
	refresh = 1;
}

void EZUI_Menu::selectItem(EZUI *UI){
    24c8:	ef 92       	push	r14
    24ca:	ff 92       	push	r15
    24cc:	0f 93       	push	r16
    24ce:	1f 93       	push	r17
    24d0:	cf 93       	push	r28
    24d2:	df 93       	push	r29
    24d4:	00 d0       	rcall	.+0      	; 0x24d6 <_ZN9EZUI_Menu10selectItemEP4EZUI+0xe>
    24d6:	1f 92       	push	r1
    24d8:	1f 92       	push	r1
    24da:	cd b7       	in	r28, 0x3d	; 61
    24dc:	de b7       	in	r29, 0x3e	; 62
    24de:	8c 01       	movw	r16, r24
    24e0:	7b 01       	movw	r14, r22
	_Items.get(currentItem).ItemSelect(UI);
    24e2:	fc 01       	movw	r30, r24
    24e4:	41 8d       	ldd	r20, Z+25	; 0x19
    24e6:	52 8d       	ldd	r21, Z+26	; 0x1a
    24e8:	bc 01       	movw	r22, r24
    24ea:	6a 5f       	subi	r22, 0xFA	; 250
    24ec:	7f 4f       	sbci	r23, 0xFF	; 255
    24ee:	ce 01       	movw	r24, r28
    24f0:	01 96       	adiw	r24, 0x01	; 1
    24f2:	08 df       	rcall	.-496    	; 0x2304 <_ZN10LinkedListI13EZUI_MenuItemE3getEi>
    24f4:	b7 01       	movw	r22, r14
    24f6:	ce 01       	movw	r24, r28
    24f8:	01 96       	adiw	r24, 0x01	; 1
    24fa:	bf d2       	rcall	.+1406   	; 0x2a7a <_ZN13EZUI_MenuItem10ItemSelectEP4EZUI>
    24fc:	ce 01       	movw	r24, r28
    24fe:	01 96       	adiw	r24, 0x01	; 1
    2500:	ca d1       	rcall	.+916    	; 0x2896 <_ZN13EZUI_MenuItemD1Ev>
	refresh = 1;
    2502:	81 e0       	ldi	r24, 0x01	; 1
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	f8 01       	movw	r30, r16
    2508:	94 8f       	std	Z+28, r25	; 0x1c
    250a:	83 8f       	std	Z+27, r24	; 0x1b
}
    250c:	0f 90       	pop	r0
    250e:	0f 90       	pop	r0
    2510:	0f 90       	pop	r0
    2512:	0f 90       	pop	r0
    2514:	0f 90       	pop	r0
    2516:	df 91       	pop	r29
    2518:	cf 91       	pop	r28
    251a:	1f 91       	pop	r17
    251c:	0f 91       	pop	r16
    251e:	ff 90       	pop	r15
    2520:	ef 90       	pop	r14
    2522:	08 95       	ret

00002524 <_ZN10LinkedListI13EZUI_MenuItemE3popEv>:
	getNode(index)->data = _t;
	return true;
}

template<typename T>
T LinkedList<T>::pop(){
    2524:	af 92       	push	r10
    2526:	bf 92       	push	r11
    2528:	cf 92       	push	r12
    252a:	df 92       	push	r13
    252c:	ef 92       	push	r14
    252e:	ff 92       	push	r15
    2530:	0f 93       	push	r16
    2532:	1f 93       	push	r17
    2534:	cf 93       	push	r28
    2536:	df 93       	push	r29
    2538:	00 d0       	rcall	.+0      	; 0x253a <_ZN10LinkedListI13EZUI_MenuItemE3popEv+0x16>
    253a:	1f 92       	push	r1
    253c:	1f 92       	push	r1
    253e:	cd b7       	in	r28, 0x3d	; 61
    2540:	de b7       	in	r29, 0x3e	; 62
    2542:	7c 01       	movw	r14, r24
    2544:	8b 01       	movw	r16, r22
	if(_size <= 0)
    2546:	fb 01       	movw	r30, r22
    2548:	62 81       	ldd	r22, Z+2	; 0x02
    254a:	73 81       	ldd	r23, Z+3	; 0x03
    254c:	16 16       	cp	r1, r22
    254e:	17 06       	cpc	r1, r23
    2550:	14 f0       	brlt	.+4      	; 0x2556 <_ZN10LinkedListI13EZUI_MenuItemE3popEv+0x32>
		return T();
    2552:	9a d1       	rcall	.+820    	; 0x2888 <_ZN13EZUI_MenuItemC1Ev>
    2554:	59 c0       	rjmp	.+178    	; 0x2608 <_ZN10LinkedListI13EZUI_MenuItemE3popEv+0xe4>
	
	isCached = false;
    2556:	f8 01       	movw	r30, r16
    2558:	14 86       	std	Z+12, r1	; 0x0c

	if(_size >= 2){
    255a:	62 30       	cpi	r22, 0x02	; 2
    255c:	71 05       	cpc	r23, r1
    255e:	7c f1       	brlt	.+94     	; 0x25be <_ZN10LinkedListI13EZUI_MenuItemE3popEv+0x9a>
		ListNode<T> *tmp = getNode(_size - 2);
    2560:	62 50       	subi	r22, 0x02	; 2
    2562:	71 09       	sbc	r23, r1
    2564:	c8 01       	movw	r24, r16
    2566:	8f de       	rcall	.-738    	; 0x2286 <_ZN10LinkedListI13EZUI_MenuItemE7getNodeEi>
    2568:	5c 01       	movw	r10, r24
		T ret = tmp->next->data;
    256a:	fc 01       	movw	r30, r24
    256c:	c5 80       	ldd	r12, Z+5	; 0x05
    256e:	d6 80       	ldd	r13, Z+6	; 0x06
    2570:	85 e0       	ldi	r24, 0x05	; 5
    2572:	f6 01       	movw	r30, r12
    2574:	de 01       	movw	r26, r28
    2576:	11 96       	adiw	r26, 0x01	; 1
    2578:	01 90       	ld	r0, Z+
    257a:	0d 92       	st	X+, r0
    257c:	8a 95       	dec	r24
    257e:	e1 f7       	brne	.-8      	; 0x2578 <_ZN10LinkedListI13EZUI_MenuItemE3popEv+0x54>
		delete(tmp->next);
    2580:	c1 14       	cp	r12, r1
    2582:	d1 04       	cpc	r13, r1
    2584:	29 f0       	breq	.+10     	; 0x2590 <_ZN10LinkedListI13EZUI_MenuItemE3popEv+0x6c>

#ifndef LinkedList_h
#define LinkedList_h

template<class T>
struct ListNode
    2586:	c6 01       	movw	r24, r12
    2588:	86 d1       	rcall	.+780    	; 0x2896 <_ZN13EZUI_MenuItemD1Ev>
	isCached = false;

	if(_size >= 2){
		ListNode<T> *tmp = getNode(_size - 2);
		T ret = tmp->next->data;
		delete(tmp->next);
    258a:	c6 01       	movw	r24, r12
    258c:	0e 94 0e 3a 	call	0x741c	; 0x741c <_ZdlPv>
		tmp->next = false;
    2590:	f5 01       	movw	r30, r10
    2592:	16 82       	std	Z+6, r1	; 0x06
    2594:	15 82       	std	Z+5, r1	; 0x05
		last = tmp;
    2596:	f8 01       	movw	r30, r16
    2598:	b7 82       	std	Z+7, r11	; 0x07
    259a:	a6 82       	std	Z+6, r10	; 0x06
		_size--;
    259c:	82 81       	ldd	r24, Z+2	; 0x02
    259e:	93 81       	ldd	r25, Z+3	; 0x03
    25a0:	01 97       	sbiw	r24, 0x01	; 1
    25a2:	93 83       	std	Z+3, r25	; 0x03
    25a4:	82 83       	std	Z+2, r24	; 0x02
		return ret;
    25a6:	85 e0       	ldi	r24, 0x05	; 5
    25a8:	fe 01       	movw	r30, r28
    25aa:	31 96       	adiw	r30, 0x01	; 1
    25ac:	d7 01       	movw	r26, r14
    25ae:	01 90       	ld	r0, Z+
    25b0:	0d 92       	st	X+, r0
    25b2:	8a 95       	dec	r24
    25b4:	e1 f7       	brne	.-8      	; 0x25ae <_ZN10LinkedListI13EZUI_MenuItemE3popEv+0x8a>
    25b6:	ce 01       	movw	r24, r28
    25b8:	01 96       	adiw	r24, 0x01	; 1
    25ba:	6d d1       	rcall	.+730    	; 0x2896 <_ZN13EZUI_MenuItemD1Ev>
    25bc:	25 c0       	rjmp	.+74     	; 0x2608 <_ZN10LinkedListI13EZUI_MenuItemE3popEv+0xe4>
	}else{
		// Only one element left on the list
		T ret = root->data;
    25be:	f8 01       	movw	r30, r16
    25c0:	c4 80       	ldd	r12, Z+4	; 0x04
    25c2:	d5 80       	ldd	r13, Z+5	; 0x05
    25c4:	85 e0       	ldi	r24, 0x05	; 5
    25c6:	f6 01       	movw	r30, r12
    25c8:	de 01       	movw	r26, r28
    25ca:	11 96       	adiw	r26, 0x01	; 1
    25cc:	01 90       	ld	r0, Z+
    25ce:	0d 92       	st	X+, r0
    25d0:	8a 95       	dec	r24
    25d2:	e1 f7       	brne	.-8      	; 0x25cc <_ZN10LinkedListI13EZUI_MenuItemE3popEv+0xa8>
		delete(root);
    25d4:	c1 14       	cp	r12, r1
    25d6:	d1 04       	cpc	r13, r1
    25d8:	29 f0       	breq	.+10     	; 0x25e4 <_ZN10LinkedListI13EZUI_MenuItemE3popEv+0xc0>

#ifndef LinkedList_h
#define LinkedList_h

template<class T>
struct ListNode
    25da:	c6 01       	movw	r24, r12
    25dc:	5c d1       	rcall	.+696    	; 0x2896 <_ZN13EZUI_MenuItemD1Ev>
		_size--;
		return ret;
	}else{
		// Only one element left on the list
		T ret = root->data;
		delete(root);
    25de:	c6 01       	movw	r24, r12
    25e0:	0e 94 0e 3a 	call	0x741c	; 0x741c <_ZdlPv>
		root = false;
    25e4:	f8 01       	movw	r30, r16
    25e6:	15 82       	std	Z+5, r1	; 0x05
    25e8:	14 82       	std	Z+4, r1	; 0x04
		last = false;
    25ea:	17 82       	std	Z+7, r1	; 0x07
    25ec:	16 82       	std	Z+6, r1	; 0x06
		_size = 0;
    25ee:	13 82       	std	Z+3, r1	; 0x03
    25f0:	12 82       	std	Z+2, r1	; 0x02
		return ret;
    25f2:	85 e0       	ldi	r24, 0x05	; 5
    25f4:	fe 01       	movw	r30, r28
    25f6:	31 96       	adiw	r30, 0x01	; 1
    25f8:	d7 01       	movw	r26, r14
    25fa:	01 90       	ld	r0, Z+
    25fc:	0d 92       	st	X+, r0
    25fe:	8a 95       	dec	r24
    2600:	e1 f7       	brne	.-8      	; 0x25fa <_ZN10LinkedListI13EZUI_MenuItemE3popEv+0xd6>
    2602:	ce 01       	movw	r24, r28
    2604:	01 96       	adiw	r24, 0x01	; 1
    2606:	47 d1       	rcall	.+654    	; 0x2896 <_ZN13EZUI_MenuItemD1Ev>
	}
}
    2608:	c7 01       	movw	r24, r14
    260a:	0f 90       	pop	r0
    260c:	0f 90       	pop	r0
    260e:	0f 90       	pop	r0
    2610:	0f 90       	pop	r0
    2612:	0f 90       	pop	r0
    2614:	df 91       	pop	r29
    2616:	cf 91       	pop	r28
    2618:	1f 91       	pop	r17
    261a:	0f 91       	pop	r16
    261c:	ff 90       	pop	r15
    261e:	ef 90       	pop	r14
    2620:	df 90       	pop	r13
    2622:	cf 90       	pop	r12
    2624:	bf 90       	pop	r11
    2626:	af 90       	pop	r10
    2628:	08 95       	ret

0000262a <_ZN10LinkedListI13EZUI_MenuItemE6removeEi>:
	}

}

template<typename T>
T LinkedList<T>::remove(int index){
    262a:	cf 92       	push	r12
    262c:	df 92       	push	r13
    262e:	ef 92       	push	r14
    2630:	ff 92       	push	r15
    2632:	0f 93       	push	r16
    2634:	1f 93       	push	r17
    2636:	cf 93       	push	r28
    2638:	df 93       	push	r29
    263a:	00 d0       	rcall	.+0      	; 0x263c <_ZN10LinkedListI13EZUI_MenuItemE6removeEi+0x12>
    263c:	1f 92       	push	r1
    263e:	1f 92       	push	r1
    2640:	cd b7       	in	r28, 0x3d	; 61
    2642:	de b7       	in	r29, 0x3e	; 62
    2644:	7c 01       	movw	r14, r24
    2646:	8b 01       	movw	r16, r22
	if (index < 0 || index >= _size)
    2648:	55 23       	and	r21, r21
    264a:	44 f0       	brlt	.+16     	; 0x265c <_ZN10LinkedListI13EZUI_MenuItemE6removeEi+0x32>
    264c:	db 01       	movw	r26, r22
    264e:	12 96       	adiw	r26, 0x02	; 2
    2650:	2d 91       	ld	r18, X+
    2652:	3c 91       	ld	r19, X
    2654:	13 97       	sbiw	r26, 0x03	; 3
    2656:	42 17       	cp	r20, r18
    2658:	53 07       	cpc	r21, r19
    265a:	1c f0       	brlt	.+6      	; 0x2662 <_ZN10LinkedListI13EZUI_MenuItemE6removeEi+0x38>
	{
		return T();
    265c:	c7 01       	movw	r24, r14
    265e:	14 d1       	rcall	.+552    	; 0x2888 <_ZN13EZUI_MenuItemC1Ev>
    2660:	4f c0       	rjmp	.+158    	; 0x2700 <_ZN10LinkedListI13EZUI_MenuItemE6removeEi+0xd6>
	}

	if(index == 0)
    2662:	41 15       	cp	r20, r1
    2664:	51 05       	cpc	r21, r1
    2666:	41 f4       	brne	.+16     	; 0x2678 <_ZN10LinkedListI13EZUI_MenuItemE6removeEi+0x4e>
		return shift();
    2668:	db 01       	movw	r26, r22
    266a:	ed 91       	ld	r30, X+
    266c:	fc 91       	ld	r31, X
    266e:	06 84       	ldd	r0, Z+14	; 0x0e
    2670:	f7 85       	ldd	r31, Z+15	; 0x0f
    2672:	e0 2d       	mov	r30, r0
    2674:	19 95       	eicall
    2676:	44 c0       	rjmp	.+136    	; 0x2700 <_ZN10LinkedListI13EZUI_MenuItemE6removeEi+0xd6>
	
	if (index == _size-1)
    2678:	21 50       	subi	r18, 0x01	; 1
    267a:	31 09       	sbc	r19, r1
    267c:	24 17       	cp	r18, r20
    267e:	35 07       	cpc	r19, r21
    2680:	41 f4       	brne	.+16     	; 0x2692 <_ZN10LinkedListI13EZUI_MenuItemE6removeEi+0x68>
	{
		return pop();
    2682:	db 01       	movw	r26, r22
    2684:	ed 91       	ld	r30, X+
    2686:	fc 91       	ld	r31, X
    2688:	04 84       	ldd	r0, Z+12	; 0x0c
    268a:	f5 85       	ldd	r31, Z+13	; 0x0d
    268c:	e0 2d       	mov	r30, r0
    268e:	19 95       	eicall
    2690:	37 c0       	rjmp	.+110    	; 0x2700 <_ZN10LinkedListI13EZUI_MenuItemE6removeEi+0xd6>
	}

	ListNode<T> *tmp = getNode(index - 1);
    2692:	ba 01       	movw	r22, r20
    2694:	61 50       	subi	r22, 0x01	; 1
    2696:	71 09       	sbc	r23, r1
    2698:	c8 01       	movw	r24, r16
    269a:	f5 dd       	rcall	.-1046   	; 0x2286 <_ZN10LinkedListI13EZUI_MenuItemE7getNodeEi>
	ListNode<T> *toDelete = tmp->next;
    269c:	fc 01       	movw	r30, r24
    269e:	c5 80       	ldd	r12, Z+5	; 0x05
    26a0:	d6 80       	ldd	r13, Z+6	; 0x06
	T ret = toDelete->data;
    26a2:	25 e0       	ldi	r18, 0x05	; 5
    26a4:	f6 01       	movw	r30, r12
    26a6:	de 01       	movw	r26, r28
    26a8:	11 96       	adiw	r26, 0x01	; 1
    26aa:	01 90       	ld	r0, Z+
    26ac:	0d 92       	st	X+, r0
    26ae:	2a 95       	dec	r18
    26b0:	e1 f7       	brne	.-8      	; 0x26aa <_ZN10LinkedListI13EZUI_MenuItemE6removeEi+0x80>
	tmp->next = tmp->next->next;
    26b2:	d6 01       	movw	r26, r12
    26b4:	15 96       	adiw	r26, 0x05	; 5
    26b6:	2d 91       	ld	r18, X+
    26b8:	3c 91       	ld	r19, X
    26ba:	16 97       	sbiw	r26, 0x06	; 6
    26bc:	fc 01       	movw	r30, r24
    26be:	36 83       	std	Z+6, r19	; 0x06
    26c0:	25 83       	std	Z+5, r18	; 0x05
	delete(toDelete);
    26c2:	c1 14       	cp	r12, r1
    26c4:	d1 04       	cpc	r13, r1
    26c6:	29 f0       	breq	.+10     	; 0x26d2 <_ZN10LinkedListI13EZUI_MenuItemE6removeEi+0xa8>

#ifndef LinkedList_h
#define LinkedList_h

template<class T>
struct ListNode
    26c8:	c6 01       	movw	r24, r12
    26ca:	e5 d0       	rcall	.+458    	; 0x2896 <_ZN13EZUI_MenuItemD1Ev>

	ListNode<T> *tmp = getNode(index - 1);
	ListNode<T> *toDelete = tmp->next;
	T ret = toDelete->data;
	tmp->next = tmp->next->next;
	delete(toDelete);
    26cc:	c6 01       	movw	r24, r12
    26ce:	0e 94 0e 3a 	call	0x741c	; 0x741c <_ZdlPv>
	_size--;
    26d2:	d8 01       	movw	r26, r16
    26d4:	12 96       	adiw	r26, 0x02	; 2
    26d6:	8d 91       	ld	r24, X+
    26d8:	9c 91       	ld	r25, X
    26da:	13 97       	sbiw	r26, 0x03	; 3
    26dc:	01 97       	sbiw	r24, 0x01	; 1
    26de:	13 96       	adiw	r26, 0x03	; 3
    26e0:	9c 93       	st	X, r25
    26e2:	8e 93       	st	-X, r24
    26e4:	12 97       	sbiw	r26, 0x02	; 2
	isCached = false;
    26e6:	1c 96       	adiw	r26, 0x0c	; 12
    26e8:	1c 92       	st	X, r1
	return ret;
    26ea:	85 e0       	ldi	r24, 0x05	; 5
    26ec:	fe 01       	movw	r30, r28
    26ee:	31 96       	adiw	r30, 0x01	; 1
    26f0:	d7 01       	movw	r26, r14
    26f2:	01 90       	ld	r0, Z+
    26f4:	0d 92       	st	X+, r0
    26f6:	8a 95       	dec	r24
    26f8:	e1 f7       	brne	.-8      	; 0x26f2 <_ZN10LinkedListI13EZUI_MenuItemE6removeEi+0xc8>
    26fa:	ce 01       	movw	r24, r28
    26fc:	01 96       	adiw	r24, 0x01	; 1
    26fe:	cb d0       	rcall	.+406    	; 0x2896 <_ZN13EZUI_MenuItemD1Ev>
}
    2700:	c7 01       	movw	r24, r14
    2702:	0f 90       	pop	r0
    2704:	0f 90       	pop	r0
    2706:	0f 90       	pop	r0
    2708:	0f 90       	pop	r0
    270a:	0f 90       	pop	r0
    270c:	df 91       	pop	r29
    270e:	cf 91       	pop	r28
    2710:	1f 91       	pop	r17
    2712:	0f 91       	pop	r16
    2714:	ff 90       	pop	r15
    2716:	ef 90       	pop	r14
    2718:	df 90       	pop	r13
    271a:	cf 90       	pop	r12
    271c:	08 95       	ret

0000271e <_ZN10LinkedListI13EZUI_MenuItemE3setEiS0_>:
	
	return true;
}

template<typename T>
bool LinkedList<T>::set(int index, T _t){
    271e:	cf 93       	push	r28
    2720:	df 93       	push	r29
	// Check if index position is in bounds
	if(index < 0 || index >= _size)
    2722:	77 23       	and	r23, r23
    2724:	8c f0       	brlt	.+34     	; 0x2748 <_ZN10LinkedListI13EZUI_MenuItemE3setEiS0_+0x2a>
    2726:	fc 01       	movw	r30, r24
    2728:	22 81       	ldd	r18, Z+2	; 0x02
    272a:	33 81       	ldd	r19, Z+3	; 0x03
    272c:	62 17       	cp	r22, r18
    272e:	73 07       	cpc	r23, r19
    2730:	6c f4       	brge	.+26     	; 0x274c <_ZN10LinkedListI13EZUI_MenuItemE3setEiS0_+0x2e>
    2732:	ea 01       	movw	r28, r20
		return false;

	getNode(index)->data = _t;
    2734:	a8 dd       	rcall	.-1200   	; 0x2286 <_ZN10LinkedListI13EZUI_MenuItemE7getNodeEi>
    2736:	dc 01       	movw	r26, r24
    2738:	95 e0       	ldi	r25, 0x05	; 5
    273a:	fe 01       	movw	r30, r28
    273c:	01 90       	ld	r0, Z+
    273e:	0d 92       	st	X+, r0
    2740:	9a 95       	dec	r25
    2742:	e1 f7       	brne	.-8      	; 0x273c <_ZN10LinkedListI13EZUI_MenuItemE3setEiS0_+0x1e>
	return true;
    2744:	81 e0       	ldi	r24, 0x01	; 1
    2746:	03 c0       	rjmp	.+6      	; 0x274e <_ZN10LinkedListI13EZUI_MenuItemE3setEiS0_+0x30>

template<typename T>
bool LinkedList<T>::set(int index, T _t){
	// Check if index position is in bounds
	if(index < 0 || index >= _size)
		return false;
    2748:	80 e0       	ldi	r24, 0x00	; 0
    274a:	01 c0       	rjmp	.+2      	; 0x274e <_ZN10LinkedListI13EZUI_MenuItemE3setEiS0_+0x30>
    274c:	80 e0       	ldi	r24, 0x00	; 0

	getNode(index)->data = _t;
	return true;
}
    274e:	df 91       	pop	r29
    2750:	cf 91       	pop	r28
    2752:	08 95       	ret

00002754 <_ZN10LinkedListI13EZUI_MenuItemE3addEiS0_>:
int LinkedList<T>::size(){
	return _size;
}

template<typename T>
bool LinkedList<T>::add(int index, T _t){
    2754:	af 92       	push	r10
    2756:	bf 92       	push	r11
    2758:	cf 92       	push	r12
    275a:	df 92       	push	r13
    275c:	ef 92       	push	r14
    275e:	ff 92       	push	r15
    2760:	0f 93       	push	r16
    2762:	1f 93       	push	r17
    2764:	cf 93       	push	r28
    2766:	df 93       	push	r29
    2768:	cd b7       	in	r28, 0x3d	; 61
    276a:	de b7       	in	r29, 0x3e	; 62
    276c:	2a 97       	sbiw	r28, 0x0a	; 10
    276e:	0f b6       	in	r0, 0x3f	; 63
    2770:	f8 94       	cli
    2772:	de bf       	out	0x3e, r29	; 62
    2774:	0f be       	out	0x3f, r0	; 63
    2776:	cd bf       	out	0x3d, r28	; 61
    2778:	8c 01       	movw	r16, r24
    277a:	7b 01       	movw	r14, r22
    277c:	5a 01       	movw	r10, r20

	if(index >= _size)
    277e:	dc 01       	movw	r26, r24
    2780:	12 96       	adiw	r26, 0x02	; 2
    2782:	8d 91       	ld	r24, X+
    2784:	9c 91       	ld	r25, X
    2786:	13 97       	sbiw	r26, 0x03	; 3
    2788:	68 17       	cp	r22, r24
    278a:	79 07       	cpc	r23, r25
    278c:	bc f0       	brlt	.+46     	; 0x27bc <_ZN10LinkedListI13EZUI_MenuItemE3addEiS0_+0x68>
		return add(_t);
    278e:	ed 91       	ld	r30, X+
    2790:	fc 91       	ld	r31, X
    2792:	24 81       	ldd	r18, Z+4	; 0x04
    2794:	35 81       	ldd	r19, Z+5	; 0x05
    2796:	95 e0       	ldi	r25, 0x05	; 5
    2798:	fa 01       	movw	r30, r20
    279a:	de 01       	movw	r26, r28
    279c:	16 96       	adiw	r26, 0x06	; 6
    279e:	01 90       	ld	r0, Z+
    27a0:	0d 92       	st	X+, r0
    27a2:	9a 95       	dec	r25
    27a4:	e1 f7       	brne	.-8      	; 0x279e <_ZN10LinkedListI13EZUI_MenuItemE3addEiS0_+0x4a>
    27a6:	be 01       	movw	r22, r28
    27a8:	6a 5f       	subi	r22, 0xFA	; 250
    27aa:	7f 4f       	sbci	r23, 0xFF	; 255
    27ac:	c8 01       	movw	r24, r16
    27ae:	f9 01       	movw	r30, r18
    27b0:	19 95       	eicall
    27b2:	18 2f       	mov	r17, r24
    27b4:	ce 01       	movw	r24, r28
    27b6:	06 96       	adiw	r24, 0x06	; 6
    27b8:	6e d0       	rcall	.+220    	; 0x2896 <_ZN13EZUI_MenuItemD1Ev>
    27ba:	44 c0       	rjmp	.+136    	; 0x2844 <_ZN10LinkedListI13EZUI_MenuItemE3addEiS0_+0xf0>

	if(index == 0)
    27bc:	67 2b       	or	r22, r23
    27be:	c1 f4       	brne	.+48     	; 0x27f0 <_ZN10LinkedListI13EZUI_MenuItemE3addEiS0_+0x9c>
		return unshift(_t);
    27c0:	d8 01       	movw	r26, r16
    27c2:	ed 91       	ld	r30, X+
    27c4:	fc 91       	ld	r31, X
    27c6:	26 81       	ldd	r18, Z+6	; 0x06
    27c8:	37 81       	ldd	r19, Z+7	; 0x07
    27ca:	95 e0       	ldi	r25, 0x05	; 5
    27cc:	fa 01       	movw	r30, r20
    27ce:	de 01       	movw	r26, r28
    27d0:	11 96       	adiw	r26, 0x01	; 1
    27d2:	01 90       	ld	r0, Z+
    27d4:	0d 92       	st	X+, r0
    27d6:	9a 95       	dec	r25
    27d8:	e1 f7       	brne	.-8      	; 0x27d2 <_ZN10LinkedListI13EZUI_MenuItemE3addEiS0_+0x7e>
    27da:	be 01       	movw	r22, r28
    27dc:	6f 5f       	subi	r22, 0xFF	; 255
    27de:	7f 4f       	sbci	r23, 0xFF	; 255
    27e0:	c8 01       	movw	r24, r16
    27e2:	f9 01       	movw	r30, r18
    27e4:	19 95       	eicall
    27e6:	18 2f       	mov	r17, r24
    27e8:	ce 01       	movw	r24, r28
    27ea:	01 96       	adiw	r24, 0x01	; 1
    27ec:	54 d0       	rcall	.+168    	; 0x2896 <_ZN13EZUI_MenuItemD1Ev>
    27ee:	2a c0       	rjmp	.+84     	; 0x2844 <_ZN10LinkedListI13EZUI_MenuItemE3addEiS0_+0xf0>

	ListNode<T> *tmp = new ListNode<T>(),
    27f0:	87 e0       	ldi	r24, 0x07	; 7
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    27f8:	6c 01       	movw	r12, r24
    27fa:	87 e0       	ldi	r24, 0x07	; 7
    27fc:	d6 01       	movw	r26, r12
    27fe:	1d 92       	st	X+, r1
    2800:	8a 95       	dec	r24
    2802:	e9 f7       	brne	.-6      	; 0x27fe <_ZN10LinkedListI13EZUI_MenuItemE3addEiS0_+0xaa>

#ifndef LinkedList_h
#define LinkedList_h

template<class T>
struct ListNode
    2804:	c6 01       	movw	r24, r12
    2806:	40 d0       	rcall	.+128    	; 0x2888 <_ZN13EZUI_MenuItemC1Ev>

	if(index == 0)
		return unshift(_t);

	ListNode<T> *tmp = new ListNode<T>(),
				 *_prev = getNode(index-1);
    2808:	b7 01       	movw	r22, r14
    280a:	61 50       	subi	r22, 0x01	; 1
    280c:	71 09       	sbc	r23, r1
    280e:	c8 01       	movw	r24, r16
    2810:	3a dd       	rcall	.-1420   	; 0x2286 <_ZN10LinkedListI13EZUI_MenuItemE7getNodeEi>
	tmp->data = _t;
    2812:	25 e0       	ldi	r18, 0x05	; 5
    2814:	f5 01       	movw	r30, r10
    2816:	d6 01       	movw	r26, r12
    2818:	01 90       	ld	r0, Z+
    281a:	0d 92       	st	X+, r0
    281c:	2a 95       	dec	r18
    281e:	e1 f7       	brne	.-8      	; 0x2818 <_ZN10LinkedListI13EZUI_MenuItemE3addEiS0_+0xc4>
	tmp->next = _prev->next;
    2820:	fc 01       	movw	r30, r24
    2822:	25 81       	ldd	r18, Z+5	; 0x05
    2824:	36 81       	ldd	r19, Z+6	; 0x06
    2826:	d6 01       	movw	r26, r12
    2828:	16 96       	adiw	r26, 0x06	; 6
    282a:	3c 93       	st	X, r19
    282c:	2e 93       	st	-X, r18
    282e:	15 97       	sbiw	r26, 0x05	; 5
	_prev->next = tmp;
    2830:	d6 82       	std	Z+6, r13	; 0x06
    2832:	c5 82       	std	Z+5, r12	; 0x05

	_size++;
    2834:	f8 01       	movw	r30, r16
    2836:	82 81       	ldd	r24, Z+2	; 0x02
    2838:	93 81       	ldd	r25, Z+3	; 0x03
    283a:	01 96       	adiw	r24, 0x01	; 1
    283c:	93 83       	std	Z+3, r25	; 0x03
    283e:	82 83       	std	Z+2, r24	; 0x02
	isCached = false;
    2840:	14 86       	std	Z+12, r1	; 0x0c

	return true;
    2842:	11 e0       	ldi	r17, 0x01	; 1
}
    2844:	81 2f       	mov	r24, r17
    2846:	2a 96       	adiw	r28, 0x0a	; 10
    2848:	0f b6       	in	r0, 0x3f	; 63
    284a:	f8 94       	cli
    284c:	de bf       	out	0x3e, r29	; 62
    284e:	0f be       	out	0x3f, r0	; 63
    2850:	cd bf       	out	0x3d, r28	; 61
    2852:	df 91       	pop	r29
    2854:	cf 91       	pop	r28
    2856:	1f 91       	pop	r17
    2858:	0f 91       	pop	r16
    285a:	ff 90       	pop	r15
    285c:	ef 90       	pop	r14
    285e:	df 90       	pop	r13
    2860:	cf 90       	pop	r12
    2862:	bf 90       	pop	r11
    2864:	af 90       	pop	r10
    2866:	08 95       	ret

00002868 <_ZN13EZUI_MenuItemC1EP17EZUI_Control_Link>:
 */

#include "EZUI_MenuItem.h"

//Constructor - LCD Page
EZUI_MenuItem::EZUI_MenuItem(EZUI_Control_Link * Link)
    2868:	fc 01       	movw	r30, r24
    286a:	14 82       	std	Z+4, r1	; 0x04
    286c:	13 82       	std	Z+3, r1	; 0x03
{
	this->LinkRef = Link;
    286e:	72 83       	std	Z+2, r23	; 0x02
    2870:	61 83       	std	Z+1, r22	; 0x01
	this->Type = LinkControl;
    2872:	81 e0       	ldi	r24, 0x01	; 1
    2874:	80 83       	st	Z, r24
    2876:	08 95       	ret

00002878 <_ZN13EZUI_MenuItemC1EP25EZUI_Control_ToggleOption>:
}

//Constructor - LCD Page
EZUI_MenuItem::EZUI_MenuItem(EZUI_Control_ToggleOption * ToggleOpt)
    2878:	fc 01       	movw	r30, r24
    287a:	12 82       	std	Z+2, r1	; 0x02
    287c:	11 82       	std	Z+1, r1	; 0x01
{
	this->ToggleOptRef = ToggleOpt;
    287e:	74 83       	std	Z+4, r23	; 0x04
    2880:	63 83       	std	Z+3, r22	; 0x03
	this->Type = ToggleOptionControl;
    2882:	82 e0       	ldi	r24, 0x02	; 2
    2884:	80 83       	st	Z, r24
    2886:	08 95       	ret

00002888 <_ZN13EZUI_MenuItemC1Ev>:
}

// default constructor
EZUI_MenuItem::EZUI_MenuItem()
    2888:	fc 01       	movw	r30, r24
    288a:	10 82       	st	Z, r1
    288c:	12 82       	std	Z+2, r1	; 0x02
    288e:	11 82       	std	Z+1, r1	; 0x01
    2890:	14 82       	std	Z+4, r1	; 0x04
    2892:	13 82       	std	Z+3, r1	; 0x03
    2894:	08 95       	ret

00002896 <_ZN13EZUI_MenuItemD1Ev>:
{
}

// default destructor
EZUI_MenuItem::~EZUI_MenuItem()
    2896:	08 95       	ret

00002898 <_ZN13EZUI_MenuItem5PrintEiiP4EZUI>:
{
}

//Print
void EZUI_MenuItem::Print(int col, int row, EZUI *UI){
    2898:	8f 92       	push	r8
    289a:	9f 92       	push	r9
    289c:	af 92       	push	r10
    289e:	bf 92       	push	r11
    28a0:	cf 92       	push	r12
    28a2:	df 92       	push	r13
    28a4:	ef 92       	push	r14
    28a6:	ff 92       	push	r15
    28a8:	0f 93       	push	r16
    28aa:	1f 93       	push	r17
    28ac:	cf 93       	push	r28
    28ae:	df 93       	push	r29
    28b0:	cd b7       	in	r28, 0x3d	; 61
    28b2:	de b7       	in	r29, 0x3e	; 62
    28b4:	a4 97       	sbiw	r28, 0x24	; 36
    28b6:	0f b6       	in	r0, 0x3f	; 63
    28b8:	f8 94       	cli
    28ba:	de bf       	out	0x3e, r29	; 62
    28bc:	0f be       	out	0x3f, r0	; 63
    28be:	cd bf       	out	0x3d, r28	; 61
    28c0:	8c 01       	movw	r16, r24
    28c2:	a6 2e       	mov	r10, r22
    28c4:	c4 2e       	mov	r12, r20
	LiquidCrystal_I2C * LCD = UI->LCD;
    28c6:	f9 01       	movw	r30, r18
    28c8:	e6 84       	ldd	r14, Z+14	; 0x0e
    28ca:	f7 84       	ldd	r15, Z+15	; 0x0f
	switch(this->Type){
    28cc:	fc 01       	movw	r30, r24
    28ce:	80 81       	ld	r24, Z
    28d0:	81 30       	cpi	r24, 0x01	; 1
    28d2:	09 f4       	brne	.+2      	; 0x28d6 <_ZN13EZUI_MenuItem5PrintEiiP4EZUI+0x3e>
    28d4:	af c0       	rjmp	.+350    	; 0x2a34 <_ZN13EZUI_MenuItem5PrintEiiP4EZUI+0x19c>
    28d6:	82 30       	cpi	r24, 0x02	; 2
    28d8:	09 f0       	breq	.+2      	; 0x28dc <_ZN13EZUI_MenuItem5PrintEiiP4EZUI+0x44>
    28da:	bc c0       	rjmp	.+376    	; 0x2a54 <_ZN13EZUI_MenuItem5PrintEiiP4EZUI+0x1bc>
		//Print Toggle Option
		case(ToggleOptionControl):
			if (!(ToggleOptRef == NULL)){
    28dc:	03 81       	ldd	r16, Z+3	; 0x03
    28de:	14 81       	ldd	r17, Z+4	; 0x04
    28e0:	01 15       	cp	r16, r1
    28e2:	11 05       	cpc	r17, r1
    28e4:	09 f4       	brne	.+2      	; 0x28e8 <_ZN13EZUI_MenuItem5PrintEiiP4EZUI+0x50>
    28e6:	b6 c0       	rjmp	.+364    	; 0x2a54 <_ZN13EZUI_MenuItem5PrintEiiP4EZUI+0x1bc>
#include "../../DigitalIO.h"

#ifndef __LCDTOGGLEOPTION_H__
#define __LCDTOGGLEOPTION_H__

class EZUI_Control_ToggleOption
    28e8:	b8 01       	movw	r22, r16
    28ea:	ce 01       	movw	r24, r28
    28ec:	01 96       	adiw	r24, 0x01	; 1
    28ee:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
    28f2:	f8 01       	movw	r30, r16
    28f4:	86 81       	ldd	r24, Z+6	; 0x06
    28f6:	8f 83       	std	Y+7, r24	; 0x07
    28f8:	b8 01       	movw	r22, r16
    28fa:	69 5f       	subi	r22, 0xF9	; 249
    28fc:	7f 4f       	sbci	r23, 0xFF	; 255
    28fe:	ce 01       	movw	r24, r28
    2900:	08 96       	adiw	r24, 0x08	; 8
    2902:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
    2906:	b8 01       	movw	r22, r16
    2908:	63 5f       	subi	r22, 0xF3	; 243
    290a:	7f 4f       	sbci	r23, 0xFF	; 255
    290c:	ce 01       	movw	r24, r28
    290e:	0e 96       	adiw	r24, 0x0e	; 14
    2910:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
    2914:	f8 01       	movw	r30, r16
    2916:	83 89       	ldd	r24, Z+19	; 0x13
    2918:	8c 8b       	std	Y+20, r24	; 0x14
    291a:	84 89       	ldd	r24, Z+20	; 0x14
    291c:	95 89       	ldd	r25, Z+21	; 0x15
    291e:	9e 8b       	std	Y+22, r25	; 0x16
    2920:	8d 8b       	std	Y+21, r24	; 0x15
    2922:	86 89       	ldd	r24, Z+22	; 0x16
    2924:	97 89       	ldd	r25, Z+23	; 0x17
    2926:	98 8f       	std	Y+24, r25	; 0x18
    2928:	8f 8b       	std	Y+23, r24	; 0x17
				EZUI_Control_ToggleOption TglOpt = *ToggleOptRef;
				LCD->setCursor(col,row);
    292a:	de 2c       	mov	r13, r14
    292c:	bf 2c       	mov	r11, r15
    292e:	4c 2d       	mov	r20, r12
    2930:	6a 2d       	mov	r22, r10
    2932:	8e 2d       	mov	r24, r14
    2934:	9f 2d       	mov	r25, r15
    2936:	0e 94 45 30 	call	0x608a	; 0x608a <_ZN3LCD9setCursorEhh>
				LCD->print(TglOpt.Label);
    293a:	be 01       	movw	r22, r28
    293c:	6f 5f       	subi	r22, 0xFF	; 255
    293e:	7f 4f       	sbci	r23, 0xFF	; 255
    2940:	8e 2d       	mov	r24, r14
    2942:	9f 2d       	mov	r25, r15
    2944:	0e 94 3e 3a 	call	0x747c	; 0x747c <_ZN5Print5printERK6String>
			
				String TrueLabel = TglOpt.TrueLabel();
    2948:	be 01       	movw	r22, r28
    294a:	6f 5f       	subi	r22, 0xFF	; 255
    294c:	7f 4f       	sbci	r23, 0xFF	; 255
    294e:	ce 01       	movw	r24, r28
    2950:	4f 96       	adiw	r24, 0x1f	; 31
    2952:	0e 94 23 04 	call	0x846	; 0x846 <_ZN25EZUI_Control_ToggleOption9TrueLabelEv>
				int TrueTextLen = TrueLabel.length();
    2956:	8b a0       	ldd	r8, Y+35	; 0x23
    2958:	9c a0       	ldd	r9, Y+36	; 0x24
				String FalseLabel = TglOpt.FalseLabel();
    295a:	be 01       	movw	r22, r28
    295c:	6f 5f       	subi	r22, 0xFF	; 255
    295e:	7f 4f       	sbci	r23, 0xFF	; 255
    2960:	ce 01       	movw	r24, r28
    2962:	49 96       	adiw	r24, 0x19	; 25
    2964:	0e 94 47 04 	call	0x88e	; 0x88e <_ZN25EZUI_Control_ToggleOption10FalseLabelEv>
				int FalseTextLen = FalseLabel.length();
    2968:	8d 8d       	ldd	r24, Y+29	; 0x1d
    296a:	9e 8d       	ldd	r25, Y+30	; 0x1e
			
				//Set Cursor Position
				int display_width = 20;
				if(TrueTextLen>FalseTextLen){
    296c:	88 15       	cp	r24, r8
    296e:	99 05       	cpc	r25, r9
    2970:	04 f5       	brge	.+64     	; 0x29b2 <_ZN13EZUI_MenuItem5PrintEiiP4EZUI+0x11a>
					int StartPos = display_width-TrueTextLen - 1;
    2972:	03 e1       	ldi	r16, 0x13	; 19
    2974:	10 e0       	ldi	r17, 0x00	; 0
    2976:	08 19       	sub	r16, r8
    2978:	19 09       	sbc	r17, r9
					LCD->setCursor(StartPos,row);
    297a:	a0 2e       	mov	r10, r16
    297c:	4c 2d       	mov	r20, r12
    297e:	60 2f       	mov	r22, r16
    2980:	8e 2d       	mov	r24, r14
    2982:	9f 2d       	mov	r25, r15
    2984:	0e 94 45 30 	call	0x608a	; 0x608a <_ZN3LCD9setCursorEhh>
					
					//Print spaces to clear the label
					int i=0;
					for(i=StartPos; i<=display_width; i++){
    2988:	05 31       	cpi	r16, 0x15	; 21
    298a:	11 05       	cpc	r17, r1
    298c:	5c f4       	brge	.+22     	; 0x29a4 <_ZN13EZUI_MenuItem5PrintEiiP4EZUI+0x10c>
						LCD->print(" ");
    298e:	65 e5       	ldi	r22, 0x55	; 85
    2990:	75 e0       	ldi	r23, 0x05	; 5
    2992:	8d 2d       	mov	r24, r13
    2994:	9b 2d       	mov	r25, r11
    2996:	0e 94 4d 3a 	call	0x749a	; 0x749a <_ZN5Print5printEPKc>
					int StartPos = display_width-TrueTextLen - 1;
					LCD->setCursor(StartPos,row);
					
					//Print spaces to clear the label
					int i=0;
					for(i=StartPos; i<=display_width; i++){
    299a:	0f 5f       	subi	r16, 0xFF	; 255
    299c:	1f 4f       	sbci	r17, 0xFF	; 255
    299e:	05 31       	cpi	r16, 0x15	; 21
    29a0:	11 05       	cpc	r17, r1
    29a2:	a9 f7       	brne	.-22     	; 0x298e <_ZN13EZUI_MenuItem5PrintEiiP4EZUI+0xf6>
						LCD->print(" ");
					}
					LCD->setCursor(StartPos,row);
    29a4:	4c 2d       	mov	r20, r12
    29a6:	6a 2d       	mov	r22, r10
    29a8:	8e 2d       	mov	r24, r14
    29aa:	9f 2d       	mov	r25, r15
    29ac:	0e 94 45 30 	call	0x608a	; 0x608a <_ZN3LCD9setCursorEhh>
    29b0:	1f c0       	rjmp	.+62     	; 0x29f0 <_ZN13EZUI_MenuItem5PrintEiiP4EZUI+0x158>
				}else{
					int StartPos = display_width-FalseTextLen - 1;
    29b2:	03 e1       	ldi	r16, 0x13	; 19
    29b4:	10 e0       	ldi	r17, 0x00	; 0
    29b6:	08 1b       	sub	r16, r24
    29b8:	19 0b       	sbc	r17, r25
					LCD->setCursor(StartPos,row);
    29ba:	a0 2e       	mov	r10, r16
    29bc:	4c 2d       	mov	r20, r12
    29be:	60 2f       	mov	r22, r16
    29c0:	8e 2d       	mov	r24, r14
    29c2:	9f 2d       	mov	r25, r15
    29c4:	0e 94 45 30 	call	0x608a	; 0x608a <_ZN3LCD9setCursorEhh>
				
					//Print spaces to clear the label
					int i=0;
					for(i=StartPos; i<=display_width; i++){
    29c8:	05 31       	cpi	r16, 0x15	; 21
    29ca:	11 05       	cpc	r17, r1
    29cc:	5c f4       	brge	.+22     	; 0x29e4 <_ZN13EZUI_MenuItem5PrintEiiP4EZUI+0x14c>
						LCD->print(" ");
    29ce:	65 e5       	ldi	r22, 0x55	; 85
    29d0:	75 e0       	ldi	r23, 0x05	; 5
    29d2:	8d 2d       	mov	r24, r13
    29d4:	9b 2d       	mov	r25, r11
    29d6:	0e 94 4d 3a 	call	0x749a	; 0x749a <_ZN5Print5printEPKc>
					int StartPos = display_width-FalseTextLen - 1;
					LCD->setCursor(StartPos,row);
				
					//Print spaces to clear the label
					int i=0;
					for(i=StartPos; i<=display_width; i++){
    29da:	0f 5f       	subi	r16, 0xFF	; 255
    29dc:	1f 4f       	sbci	r17, 0xFF	; 255
    29de:	05 31       	cpi	r16, 0x15	; 21
    29e0:	11 05       	cpc	r17, r1
    29e2:	a9 f7       	brne	.-22     	; 0x29ce <_ZN13EZUI_MenuItem5PrintEiiP4EZUI+0x136>
						LCD->print(" ");
					}
					LCD->setCursor(StartPos,row);
    29e4:	4c 2d       	mov	r20, r12
    29e6:	6a 2d       	mov	r22, r10
    29e8:	8e 2d       	mov	r24, r14
    29ea:	9f 2d       	mov	r25, r15
    29ec:	0e 94 45 30 	call	0x608a	; 0x608a <_ZN3LCD9setCursorEhh>
				}
			
				//Print current value
				if(TglOpt.Value() == 1){
    29f0:	ce 01       	movw	r24, r28
    29f2:	01 96       	adiw	r24, 0x01	; 1
    29f4:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <_ZN25EZUI_Control_ToggleOption5ValueEv>
    29f8:	01 97       	sbiw	r24, 0x01	; 1
    29fa:	41 f4       	brne	.+16     	; 0x2a0c <_ZN13EZUI_MenuItem5PrintEiiP4EZUI+0x174>
					LCD->print(TrueLabel);
    29fc:	be 01       	movw	r22, r28
    29fe:	61 5e       	subi	r22, 0xE1	; 225
    2a00:	7f 4f       	sbci	r23, 0xFF	; 255
    2a02:	8e 2d       	mov	r24, r14
    2a04:	9f 2d       	mov	r25, r15
    2a06:	0e 94 3e 3a 	call	0x747c	; 0x747c <_ZN5Print5printERK6String>
    2a0a:	07 c0       	rjmp	.+14     	; 0x2a1a <_ZN13EZUI_MenuItem5PrintEiiP4EZUI+0x182>
				}else{
					LCD->print(FalseLabel);
    2a0c:	be 01       	movw	r22, r28
    2a0e:	67 5e       	subi	r22, 0xE7	; 231
    2a10:	7f 4f       	sbci	r23, 0xFF	; 255
    2a12:	8e 2d       	mov	r24, r14
    2a14:	9f 2d       	mov	r25, r15
    2a16:	0e 94 3e 3a 	call	0x747c	; 0x747c <_ZN5Print5printERK6String>
				LCD->setCursor(col,row);
				LCD->print(TglOpt.Label);
			
				String TrueLabel = TglOpt.TrueLabel();
				int TrueTextLen = TrueLabel.length();
				String FalseLabel = TglOpt.FalseLabel();
    2a1a:	ce 01       	movw	r24, r28
    2a1c:	49 96       	adiw	r24, 0x19	; 25
    2a1e:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
			if (!(ToggleOptRef == NULL)){
				EZUI_Control_ToggleOption TglOpt = *ToggleOptRef;
				LCD->setCursor(col,row);
				LCD->print(TglOpt.Label);
			
				String TrueLabel = TglOpt.TrueLabel();
    2a22:	ce 01       	movw	r24, r28
    2a24:	4f 96       	adiw	r24, 0x1f	; 31
    2a26:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
				//Print current value
				if(TglOpt.Value() == 1){
					LCD->print(TrueLabel);
				}else{
					LCD->print(FalseLabel);
				}
    2a2a:	ce 01       	movw	r24, r28
    2a2c:	01 96       	adiw	r24, 0x01	; 1
    2a2e:	0e 94 13 04 	call	0x826	; 0x826 <_ZN25EZUI_Control_ToggleOptionD1Ev>
    2a32:	10 c0       	rjmp	.+32     	; 0x2a54 <_ZN13EZUI_MenuItem5PrintEiiP4EZUI+0x1bc>
			}
			break;
			
		//Print Link Control
		case(LinkControl):
			if(!(LinkRef == NULL)){
    2a34:	f8 01       	movw	r30, r16
    2a36:	81 81       	ldd	r24, Z+1	; 0x01
    2a38:	92 81       	ldd	r25, Z+2	; 0x02
    2a3a:	89 2b       	or	r24, r25
    2a3c:	59 f0       	breq	.+22     	; 0x2a54 <_ZN13EZUI_MenuItem5PrintEiiP4EZUI+0x1bc>
				LCD->setCursor(col,row);
    2a3e:	8e 2d       	mov	r24, r14
    2a40:	9f 2d       	mov	r25, r15
    2a42:	0e 94 45 30 	call	0x608a	; 0x608a <_ZN3LCD9setCursorEhh>
				LCD->print((*LinkRef).Label);
    2a46:	f8 01       	movw	r30, r16
    2a48:	61 81       	ldd	r22, Z+1	; 0x01
    2a4a:	72 81       	ldd	r23, Z+2	; 0x02
    2a4c:	8e 2d       	mov	r24, r14
    2a4e:	9f 2d       	mov	r25, r15
    2a50:	0e 94 3e 3a 	call	0x747c	; 0x747c <_ZN5Print5printERK6String>
			}
			break;
	}
}
    2a54:	a4 96       	adiw	r28, 0x24	; 36
    2a56:	0f b6       	in	r0, 0x3f	; 63
    2a58:	f8 94       	cli
    2a5a:	de bf       	out	0x3e, r29	; 62
    2a5c:	0f be       	out	0x3f, r0	; 63
    2a5e:	cd bf       	out	0x3d, r28	; 61
    2a60:	df 91       	pop	r29
    2a62:	cf 91       	pop	r28
    2a64:	1f 91       	pop	r17
    2a66:	0f 91       	pop	r16
    2a68:	ff 90       	pop	r15
    2a6a:	ef 90       	pop	r14
    2a6c:	df 90       	pop	r13
    2a6e:	cf 90       	pop	r12
    2a70:	bf 90       	pop	r11
    2a72:	af 90       	pop	r10
    2a74:	9f 90       	pop	r9
    2a76:	8f 90       	pop	r8
    2a78:	08 95       	ret

00002a7a <_ZN13EZUI_MenuItem10ItemSelectEP4EZUI>:

//Item Select
void EZUI_MenuItem::ItemSelect(EZUI *UI){
    2a7a:	cf 93       	push	r28
    2a7c:	df 93       	push	r29
    2a7e:	eb 01       	movw	r28, r22
	 switch (Type) {
    2a80:	fc 01       	movw	r30, r24
    2a82:	20 81       	ld	r18, Z
    2a84:	21 30       	cpi	r18, 0x01	; 1
    2a86:	19 f0       	breq	.+6      	; 0x2a8e <_ZN13EZUI_MenuItem10ItemSelectEP4EZUI+0x14>
    2a88:	22 30       	cpi	r18, 0x02	; 2
    2a8a:	19 f1       	breq	.+70     	; 0x2ad2 <_ZN13EZUI_MenuItem10ItemSelectEP4EZUI+0x58>
    2a8c:	2b c0       	rjmp	.+86     	; 0x2ae4 <_ZN13EZUI_MenuItem10ItemSelectEP4EZUI+0x6a>
		case(LinkControl):
			if (LinkRef == NULL){
    2a8e:	fc 01       	movw	r30, r24
    2a90:	81 81       	ldd	r24, Z+1	; 0x01
    2a92:	92 81       	ldd	r25, Z+2	; 0x02
    2a94:	00 97       	sbiw	r24, 0x00	; 0
    2a96:	d1 f4       	brne	.+52     	; 0x2acc <_ZN13EZUI_MenuItem10ItemSelectEP4EZUI+0x52>
				UI->LCD->clear();
    2a98:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a9a:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a9c:	0e 94 3e 30 	call	0x607c	; 0x607c <_ZN3LCD5clearEv>
				UI->LCD->println("Error!");
    2aa0:	6e e1       	ldi	r22, 0x1E	; 30
    2aa2:	74 e0       	ldi	r23, 0x04	; 4
    2aa4:	8e 85       	ldd	r24, Y+14	; 0x0e
    2aa6:	9f 85       	ldd	r25, Y+15	; 0x0f
    2aa8:	0e 94 87 3a 	call	0x750e	; 0x750e <_ZN5Print7printlnEPKc>
				UI->LCD->println("Selected Menu item null");
    2aac:	65 e2       	ldi	r22, 0x25	; 37
    2aae:	74 e0       	ldi	r23, 0x04	; 4
    2ab0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ab2:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ab4:	0e 94 87 3a 	call	0x750e	; 0x750e <_ZN5Print7printlnEPKc>
				delay(3000);
    2ab8:	68 eb       	ldi	r22, 0xB8	; 184
    2aba:	7b e0       	ldi	r23, 0x0B	; 11
    2abc:	80 e0       	ldi	r24, 0x00	; 0
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	0e 94 2c 3f 	call	0x7e58	; 0x7e58 <delay>
				UI->display();
    2ac4:	ce 01       	movw	r24, r28
    2ac6:	0e 94 d8 28 	call	0x51b0	; 0x51b0 <_ZN4EZUI7displayEv>
    2aca:	25 c0       	rjmp	.+74     	; 0x2b16 <_ZN13EZUI_MenuItem10ItemSelectEP4EZUI+0x9c>
			}else{
				LinkRef->FollowLink(UI);
    2acc:	0e 94 01 04 	call	0x802	; 0x802 <_ZN17EZUI_Control_Link10FollowLinkEP4EZUI>
    2ad0:	22 c0       	rjmp	.+68     	; 0x2b16 <_ZN13EZUI_MenuItem10ItemSelectEP4EZUI+0x9c>
			}
			break;
		case(ToggleOptionControl):
			(*ToggleOptRef).Toggle();
    2ad2:	fc 01       	movw	r30, r24
    2ad4:	83 81       	ldd	r24, Z+3	; 0x03
    2ad6:	94 81       	ldd	r25, Z+4	; 0x04
    2ad8:	0e 94 8c 04 	call	0x918	; 0x918 <_ZN25EZUI_Control_ToggleOption6ToggleEv>
			UI->display();
    2adc:	ce 01       	movw	r24, r28
    2ade:	0e 94 d8 28 	call	0x51b0	; 0x51b0 <_ZN4EZUI7displayEv>
			break;
    2ae2:	19 c0       	rjmp	.+50     	; 0x2b16 <_ZN13EZUI_MenuItem10ItemSelectEP4EZUI+0x9c>
		default:
			UI->LCD->clear();
    2ae4:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ae6:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ae8:	0e 94 3e 30 	call	0x607c	; 0x607c <_ZN3LCD5clearEv>
			UI->LCD->println("ERROR!:");
    2aec:	6d e3       	ldi	r22, 0x3D	; 61
    2aee:	74 e0       	ldi	r23, 0x04	; 4
    2af0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2af2:	9f 85       	ldd	r25, Y+15	; 0x0f
    2af4:	0e 94 87 3a 	call	0x750e	; 0x750e <_ZN5Print7printlnEPKc>
			UI->LCD->println("Menu Type not yet Supported");
    2af8:	65 e4       	ldi	r22, 0x45	; 69
    2afa:	74 e0       	ldi	r23, 0x04	; 4
    2afc:	8e 85       	ldd	r24, Y+14	; 0x0e
    2afe:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b00:	0e 94 87 3a 	call	0x750e	; 0x750e <_ZN5Print7printlnEPKc>
			delay(3000);
    2b04:	68 eb       	ldi	r22, 0xB8	; 184
    2b06:	7b e0       	ldi	r23, 0x0B	; 11
    2b08:	80 e0       	ldi	r24, 0x00	; 0
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	0e 94 2c 3f 	call	0x7e58	; 0x7e58 <delay>
			UI->display();
    2b10:	ce 01       	movw	r24, r28
    2b12:	0e 94 d8 28 	call	0x51b0	; 0x51b0 <_ZN4EZUI7displayEv>
			break;
	}
}
    2b16:	df 91       	pop	r29
    2b18:	cf 91       	pop	r28
    2b1a:	08 95       	ret

00002b1c <_ZN10LinkedListI13EZUI_PageItemE4sizeEv>:
		}
	}
	Serial.println(Name + " - Encoder Item: ");
	Serial.println(currentItem);
	refresh = 1;
}
    2b1c:	fc 01       	movw	r30, r24
    2b1e:	82 81       	ldd	r24, Z+2	; 0x02
    2b20:	93 81       	ldd	r25, Z+3	; 0x03
    2b22:	08 95       	ret

00002b24 <_ZN10LinkedListIiE4sizeEv>:
    2b24:	fc 01       	movw	r30, r24
    2b26:	82 81       	ldd	r24, Z+2	; 0x02
    2b28:	93 81       	ldd	r25, Z+3	; 0x03
    2b2a:	08 95       	ret

00002b2c <_ZN10LinkedListIiE5clearEv>:
    2b2c:	cf 93       	push	r28
    2b2e:	df 93       	push	r29
    2b30:	ec 01       	movw	r28, r24
    2b32:	07 c0       	rjmp	.+14     	; 0x2b42 <_ZN10LinkedListIiE5clearEv+0x16>
    2b34:	e8 81       	ld	r30, Y
    2b36:	f9 81       	ldd	r31, Y+1	; 0x01
    2b38:	06 84       	ldd	r0, Z+14	; 0x0e
    2b3a:	f7 85       	ldd	r31, Z+15	; 0x0f
    2b3c:	e0 2d       	mov	r30, r0
    2b3e:	ce 01       	movw	r24, r28
    2b40:	19 95       	eicall
    2b42:	e8 81       	ld	r30, Y
    2b44:	f9 81       	ldd	r31, Y+1	; 0x01
    2b46:	01 90       	ld	r0, Z+
    2b48:	f0 81       	ld	r31, Z
    2b4a:	e0 2d       	mov	r30, r0
    2b4c:	ce 01       	movw	r24, r28
    2b4e:	19 95       	eicall
    2b50:	18 16       	cp	r1, r24
    2b52:	19 06       	cpc	r1, r25
    2b54:	7c f3       	brlt	.-34     	; 0x2b34 <_ZN10LinkedListIiE5clearEv+0x8>
    2b56:	df 91       	pop	r29
    2b58:	cf 91       	pop	r28
    2b5a:	08 95       	ret

00002b5c <_ZN10LinkedListI13EZUI_PageItemE5clearEv>:
    2b5c:	0f 93       	push	r16
    2b5e:	1f 93       	push	r17
    2b60:	cf 93       	push	r28
    2b62:	df 93       	push	r29
    2b64:	cd b7       	in	r28, 0x3d	; 61
    2b66:	de b7       	in	r29, 0x3e	; 62
    2b68:	ee 97       	sbiw	r28, 0x3e	; 62
    2b6a:	0f b6       	in	r0, 0x3f	; 63
    2b6c:	f8 94       	cli
    2b6e:	de bf       	out	0x3e, r29	; 62
    2b70:	0f be       	out	0x3f, r0	; 63
    2b72:	cd bf       	out	0x3d, r28	; 61
    2b74:	8c 01       	movw	r16, r24
    2b76:	0e c0       	rjmp	.+28     	; 0x2b94 <_ZN10LinkedListI13EZUI_PageItemE5clearEv+0x38>
    2b78:	d8 01       	movw	r26, r16
    2b7a:	ed 91       	ld	r30, X+
    2b7c:	fc 91       	ld	r31, X
    2b7e:	06 84       	ldd	r0, Z+14	; 0x0e
    2b80:	f7 85       	ldd	r31, Z+15	; 0x0f
    2b82:	e0 2d       	mov	r30, r0
    2b84:	b8 01       	movw	r22, r16
    2b86:	ce 01       	movw	r24, r28
    2b88:	01 96       	adiw	r24, 0x01	; 1
    2b8a:	19 95       	eicall
    2b8c:	ce 01       	movw	r24, r28
    2b8e:	01 96       	adiw	r24, 0x01	; 1
    2b90:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <_ZN13EZUI_PageItemD1Ev>
    2b94:	d8 01       	movw	r26, r16
    2b96:	ed 91       	ld	r30, X+
    2b98:	fc 91       	ld	r31, X
    2b9a:	01 90       	ld	r0, Z+
    2b9c:	f0 81       	ld	r31, Z
    2b9e:	e0 2d       	mov	r30, r0
    2ba0:	c8 01       	movw	r24, r16
    2ba2:	19 95       	eicall
    2ba4:	18 16       	cp	r1, r24
    2ba6:	19 06       	cpc	r1, r25
    2ba8:	3c f3       	brlt	.-50     	; 0x2b78 <_ZN10LinkedListI13EZUI_PageItemE5clearEv+0x1c>
    2baa:	ee 96       	adiw	r28, 0x3e	; 62
    2bac:	0f b6       	in	r0, 0x3f	; 63
    2bae:	f8 94       	cli
    2bb0:	de bf       	out	0x3e, r29	; 62
    2bb2:	0f be       	out	0x3f, r0	; 63
    2bb4:	cd bf       	out	0x3d, r28	; 61
    2bb6:	df 91       	pop	r29
    2bb8:	cf 91       	pop	r28
    2bba:	1f 91       	pop	r17
    2bbc:	0f 91       	pop	r16
    2bbe:	08 95       	ret

00002bc0 <_ZN10LinkedListIiE5shiftEv>:
    2bc0:	ef 92       	push	r14
    2bc2:	ff 92       	push	r15
    2bc4:	0f 93       	push	r16
    2bc6:	1f 93       	push	r17
    2bc8:	cf 93       	push	r28
    2bca:	df 93       	push	r29
    2bcc:	fc 01       	movw	r30, r24
    2bce:	22 81       	ldd	r18, Z+2	; 0x02
    2bd0:	33 81       	ldd	r19, Z+3	; 0x03
    2bd2:	12 16       	cp	r1, r18
    2bd4:	13 06       	cpc	r1, r19
    2bd6:	0c f5       	brge	.+66     	; 0x2c1a <_ZN10LinkedListIiE5shiftEv+0x5a>
    2bd8:	ec 01       	movw	r28, r24
    2bda:	22 30       	cpi	r18, 0x02	; 2
    2bdc:	31 05       	cpc	r19, r1
    2bde:	ac f0       	brlt	.+42     	; 0x2c0a <_ZN10LinkedListIiE5shiftEv+0x4a>
    2be0:	04 80       	ldd	r0, Z+4	; 0x04
    2be2:	f5 81       	ldd	r31, Z+5	; 0x05
    2be4:	e0 2d       	mov	r30, r0
    2be6:	e2 80       	ldd	r14, Z+2	; 0x02
    2be8:	f3 80       	ldd	r15, Z+3	; 0x03
    2bea:	00 81       	ld	r16, Z
    2bec:	11 81       	ldd	r17, Z+1	; 0x01
    2bee:	cf 01       	movw	r24, r30
    2bf0:	0e 94 0e 3a 	call	0x741c	; 0x741c <_ZdlPv>
    2bf4:	fd 82       	std	Y+5, r15	; 0x05
    2bf6:	ec 82       	std	Y+4, r14	; 0x04
    2bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfa:	9b 81       	ldd	r25, Y+3	; 0x03
    2bfc:	01 97       	sbiw	r24, 0x01	; 1
    2bfe:	9b 83       	std	Y+3, r25	; 0x03
    2c00:	8a 83       	std	Y+2, r24	; 0x02
    2c02:	1c 86       	std	Y+12, r1	; 0x0c
    2c04:	80 2f       	mov	r24, r16
    2c06:	91 2f       	mov	r25, r17
    2c08:	0a c0       	rjmp	.+20     	; 0x2c1e <_ZN10LinkedListIiE5shiftEv+0x5e>
    2c0a:	01 90       	ld	r0, Z+
    2c0c:	f0 81       	ld	r31, Z
    2c0e:	e0 2d       	mov	r30, r0
    2c10:	04 84       	ldd	r0, Z+12	; 0x0c
    2c12:	f5 85       	ldd	r31, Z+13	; 0x0d
    2c14:	e0 2d       	mov	r30, r0
    2c16:	19 95       	eicall
    2c18:	02 c0       	rjmp	.+4      	; 0x2c1e <_ZN10LinkedListIiE5shiftEv+0x5e>
    2c1a:	80 e0       	ldi	r24, 0x00	; 0
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	df 91       	pop	r29
    2c20:	cf 91       	pop	r28
    2c22:	1f 91       	pop	r17
    2c24:	0f 91       	pop	r16
    2c26:	ff 90       	pop	r15
    2c28:	ef 90       	pop	r14
    2c2a:	08 95       	ret

00002c2c <_ZN10LinkedListIiE7unshiftEi>:
    2c2c:	0f 93       	push	r16
    2c2e:	1f 93       	push	r17
    2c30:	cf 93       	push	r28
    2c32:	df 93       	push	r29
    2c34:	ec 01       	movw	r28, r24
    2c36:	8b 01       	movw	r16, r22
    2c38:	8a 81       	ldd	r24, Y+2	; 0x02
    2c3a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c3c:	89 2b       	or	r24, r25
    2c3e:	41 f4       	brne	.+16     	; 0x2c50 <_ZN10LinkedListIiE7unshiftEi+0x24>
    2c40:	e8 81       	ld	r30, Y
    2c42:	f9 81       	ldd	r31, Y+1	; 0x01
    2c44:	04 80       	ldd	r0, Z+4	; 0x04
    2c46:	f5 81       	ldd	r31, Z+5	; 0x05
    2c48:	e0 2d       	mov	r30, r0
    2c4a:	ce 01       	movw	r24, r28
    2c4c:	19 95       	eicall
    2c4e:	18 c0       	rjmp	.+48     	; 0x2c80 <_ZN10LinkedListIiE7unshiftEi+0x54>
    2c50:	84 e0       	ldi	r24, 0x04	; 4
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    2c58:	fc 01       	movw	r30, r24
    2c5a:	11 82       	std	Z+1, r1	; 0x01
    2c5c:	10 82       	st	Z, r1
    2c5e:	13 82       	std	Z+3, r1	; 0x03
    2c60:	12 82       	std	Z+2, r1	; 0x02
    2c62:	8c 81       	ldd	r24, Y+4	; 0x04
    2c64:	9d 81       	ldd	r25, Y+5	; 0x05
    2c66:	93 83       	std	Z+3, r25	; 0x03
    2c68:	82 83       	std	Z+2, r24	; 0x02
    2c6a:	11 83       	std	Z+1, r17	; 0x01
    2c6c:	00 83       	st	Z, r16
    2c6e:	fd 83       	std	Y+5, r31	; 0x05
    2c70:	ec 83       	std	Y+4, r30	; 0x04
    2c72:	8a 81       	ldd	r24, Y+2	; 0x02
    2c74:	9b 81       	ldd	r25, Y+3	; 0x03
    2c76:	01 96       	adiw	r24, 0x01	; 1
    2c78:	9b 83       	std	Y+3, r25	; 0x03
    2c7a:	8a 83       	std	Y+2, r24	; 0x02
    2c7c:	1c 86       	std	Y+12, r1	; 0x0c
    2c7e:	81 e0       	ldi	r24, 0x01	; 1
    2c80:	df 91       	pop	r29
    2c82:	cf 91       	pop	r28
    2c84:	1f 91       	pop	r17
    2c86:	0f 91       	pop	r16
    2c88:	08 95       	ret

00002c8a <_ZN10LinkedListIiE3addEi>:
    2c8a:	0f 93       	push	r16
    2c8c:	1f 93       	push	r17
    2c8e:	cf 93       	push	r28
    2c90:	df 93       	push	r29
    2c92:	ec 01       	movw	r28, r24
    2c94:	8b 01       	movw	r16, r22
    2c96:	84 e0       	ldi	r24, 0x04	; 4
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    2c9e:	fc 01       	movw	r30, r24
    2ca0:	13 82       	std	Z+3, r1	; 0x03
    2ca2:	12 82       	std	Z+2, r1	; 0x02
    2ca4:	11 83       	std	Z+1, r17	; 0x01
    2ca6:	00 83       	st	Z, r16
    2ca8:	2c 81       	ldd	r18, Y+4	; 0x04
    2caa:	3d 81       	ldd	r19, Y+5	; 0x05
    2cac:	23 2b       	or	r18, r19
    2cae:	39 f0       	breq	.+14     	; 0x2cbe <_ZN10LinkedListIiE3addEi+0x34>
    2cb0:	ee 81       	ldd	r30, Y+6	; 0x06
    2cb2:	ff 81       	ldd	r31, Y+7	; 0x07
    2cb4:	93 83       	std	Z+3, r25	; 0x03
    2cb6:	82 83       	std	Z+2, r24	; 0x02
    2cb8:	9f 83       	std	Y+7, r25	; 0x07
    2cba:	8e 83       	std	Y+6, r24	; 0x06
    2cbc:	04 c0       	rjmp	.+8      	; 0x2cc6 <_ZN10LinkedListIiE3addEi+0x3c>
    2cbe:	9d 83       	std	Y+5, r25	; 0x05
    2cc0:	8c 83       	std	Y+4, r24	; 0x04
    2cc2:	9f 83       	std	Y+7, r25	; 0x07
    2cc4:	8e 83       	std	Y+6, r24	; 0x06
    2cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc8:	9b 81       	ldd	r25, Y+3	; 0x03
    2cca:	01 96       	adiw	r24, 0x01	; 1
    2ccc:	9b 83       	std	Y+3, r25	; 0x03
    2cce:	8a 83       	std	Y+2, r24	; 0x02
    2cd0:	1c 86       	std	Y+12, r1	; 0x0c
    2cd2:	81 e0       	ldi	r24, 0x01	; 1
    2cd4:	df 91       	pop	r29
    2cd6:	cf 91       	pop	r28
    2cd8:	1f 91       	pop	r17
    2cda:	0f 91       	pop	r16
    2cdc:	08 95       	ret

00002cde <_ZN10LinkedListI13EZUI_PageItemE3addES0_>:
    2cde:	ef 92       	push	r14
    2ce0:	ff 92       	push	r15
    2ce2:	0f 93       	push	r16
    2ce4:	1f 93       	push	r17
    2ce6:	cf 93       	push	r28
    2ce8:	df 93       	push	r29
    2cea:	7c 01       	movw	r14, r24
    2cec:	8b 01       	movw	r16, r22
    2cee:	80 e4       	ldi	r24, 0x40	; 64
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    2cf6:	ec 01       	movw	r28, r24
    2cf8:	80 e4       	ldi	r24, 0x40	; 64
    2cfa:	de 01       	movw	r26, r28
    2cfc:	1d 92       	st	X+, r1
    2cfe:	8a 95       	dec	r24
    2d00:	e9 f7       	brne	.-6      	; 0x2cfc <_ZN10LinkedListI13EZUI_PageItemE3addES0_+0x1e>
    2d02:	ce 01       	movw	r24, r28
    2d04:	0e 94 c5 24 	call	0x498a	; 0x498a <_ZN13EZUI_PageItemC1Ev>
    2d08:	f8 01       	movw	r30, r16
    2d0a:	80 81       	ld	r24, Z
    2d0c:	88 83       	st	Y, r24
    2d0e:	81 81       	ldd	r24, Z+1	; 0x01
    2d10:	89 83       	std	Y+1, r24	; 0x01
    2d12:	82 81       	ldd	r24, Z+2	; 0x02
    2d14:	8a 83       	std	Y+2, r24	; 0x02
    2d16:	b8 01       	movw	r22, r16
    2d18:	6d 5f       	subi	r22, 0xFD	; 253
    2d1a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d1c:	ce 01       	movw	r24, r28
    2d1e:	03 96       	adiw	r24, 0x03	; 3
    2d20:	0e 94 83 41 	call	0x8306	; 0x8306 <_ZN6StringaSERKS_>
    2d24:	f8 01       	movw	r30, r16
    2d26:	81 85       	ldd	r24, Z+9	; 0x09
    2d28:	92 85       	ldd	r25, Z+10	; 0x0a
    2d2a:	a3 85       	ldd	r26, Z+11	; 0x0b
    2d2c:	b4 85       	ldd	r27, Z+12	; 0x0c
    2d2e:	89 87       	std	Y+9, r24	; 0x09
    2d30:	9a 87       	std	Y+10, r25	; 0x0a
    2d32:	ab 87       	std	Y+11, r26	; 0x0b
    2d34:	bc 87       	std	Y+12, r27	; 0x0c
    2d36:	85 85       	ldd	r24, Z+13	; 0x0d
    2d38:	96 85       	ldd	r25, Z+14	; 0x0e
    2d3a:	a7 85       	ldd	r26, Z+15	; 0x0f
    2d3c:	b0 89       	ldd	r27, Z+16	; 0x10
    2d3e:	8d 87       	std	Y+13, r24	; 0x0d
    2d40:	9e 87       	std	Y+14, r25	; 0x0e
    2d42:	af 87       	std	Y+15, r26	; 0x0f
    2d44:	b8 8b       	std	Y+16, r27	; 0x10
    2d46:	81 89       	ldd	r24, Z+17	; 0x11
    2d48:	89 8b       	std	Y+17, r24	; 0x11
    2d4a:	82 89       	ldd	r24, Z+18	; 0x12
    2d4c:	93 89       	ldd	r25, Z+19	; 0x13
    2d4e:	9b 8b       	std	Y+19, r25	; 0x13
    2d50:	8a 8b       	std	Y+18, r24	; 0x12
    2d52:	84 89       	ldd	r24, Z+20	; 0x14
    2d54:	95 89       	ldd	r25, Z+21	; 0x15
    2d56:	9d 8b       	std	Y+21, r25	; 0x15
    2d58:	8c 8b       	std	Y+20, r24	; 0x14
    2d5a:	86 89       	ldd	r24, Z+22	; 0x16
    2d5c:	97 89       	ldd	r25, Z+23	; 0x17
    2d5e:	9f 8b       	std	Y+23, r25	; 0x17
    2d60:	8e 8b       	std	Y+22, r24	; 0x16
    2d62:	80 8d       	ldd	r24, Z+24	; 0x18
    2d64:	91 8d       	ldd	r25, Z+25	; 0x19
    2d66:	99 8f       	std	Y+25, r25	; 0x19
    2d68:	88 8f       	std	Y+24, r24	; 0x18
    2d6a:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d6c:	93 8d       	ldd	r25, Z+27	; 0x1b
    2d6e:	9b 8f       	std	Y+27, r25	; 0x1b
    2d70:	8a 8f       	std	Y+26, r24	; 0x1a
    2d72:	b8 01       	movw	r22, r16
    2d74:	64 5e       	subi	r22, 0xE4	; 228
    2d76:	7f 4f       	sbci	r23, 0xFF	; 255
    2d78:	ce 01       	movw	r24, r28
    2d7a:	4c 96       	adiw	r24, 0x1c	; 28
    2d7c:	0e 94 83 41 	call	0x8306	; 0x8306 <_ZN6StringaSERKS_>
    2d80:	b8 01       	movw	r22, r16
    2d82:	6e 5d       	subi	r22, 0xDE	; 222
    2d84:	7f 4f       	sbci	r23, 0xFF	; 255
    2d86:	ce 01       	movw	r24, r28
    2d88:	82 96       	adiw	r24, 0x22	; 34
    2d8a:	0e 94 83 41 	call	0x8306	; 0x8306 <_ZN6StringaSERKS_>
    2d8e:	d8 01       	movw	r26, r16
    2d90:	98 96       	adiw	r26, 0x28	; 40
    2d92:	8d 91       	ld	r24, X+
    2d94:	9c 91       	ld	r25, X
    2d96:	99 97       	sbiw	r26, 0x29	; 41
    2d98:	99 a7       	std	Y+41, r25	; 0x29
    2d9a:	88 a7       	std	Y+40, r24	; 0x28
    2d9c:	9a 96       	adiw	r26, 0x2a	; 42
    2d9e:	8d 91       	ld	r24, X+
    2da0:	9c 91       	ld	r25, X
    2da2:	9b 97       	sbiw	r26, 0x2b	; 43
    2da4:	9b a7       	std	Y+43, r25	; 0x2b
    2da6:	8a a7       	std	Y+42, r24	; 0x2a
    2da8:	9c 96       	adiw	r26, 0x2c	; 44
    2daa:	8d 91       	ld	r24, X+
    2dac:	9c 91       	ld	r25, X
    2dae:	9d 97       	sbiw	r26, 0x2d	; 45
    2db0:	9d a7       	std	Y+45, r25	; 0x2d
    2db2:	8c a7       	std	Y+44, r24	; 0x2c
    2db4:	9e 96       	adiw	r26, 0x2e	; 46
    2db6:	8d 91       	ld	r24, X+
    2db8:	9c 91       	ld	r25, X
    2dba:	9f 97       	sbiw	r26, 0x2f	; 47
    2dbc:	9f a7       	std	Y+47, r25	; 0x2f
    2dbe:	8e a7       	std	Y+46, r24	; 0x2e
    2dc0:	d0 96       	adiw	r26, 0x30	; 48
    2dc2:	8d 91       	ld	r24, X+
    2dc4:	9c 91       	ld	r25, X
    2dc6:	d1 97       	sbiw	r26, 0x31	; 49
    2dc8:	99 ab       	std	Y+49, r25	; 0x31
    2dca:	88 ab       	std	Y+48, r24	; 0x30
    2dcc:	d2 96       	adiw	r26, 0x32	; 50
    2dce:	8d 91       	ld	r24, X+
    2dd0:	9c 91       	ld	r25, X
    2dd2:	d3 97       	sbiw	r26, 0x33	; 51
    2dd4:	9b ab       	std	Y+51, r25	; 0x33
    2dd6:	8a ab       	std	Y+50, r24	; 0x32
    2dd8:	d4 96       	adiw	r26, 0x34	; 52
    2dda:	8d 91       	ld	r24, X+
    2ddc:	9c 91       	ld	r25, X
    2dde:	d5 97       	sbiw	r26, 0x35	; 53
    2de0:	9d ab       	std	Y+53, r25	; 0x35
    2de2:	8c ab       	std	Y+52, r24	; 0x34
    2de4:	d6 96       	adiw	r26, 0x36	; 54
    2de6:	8d 91       	ld	r24, X+
    2de8:	9c 91       	ld	r25, X
    2dea:	d7 97       	sbiw	r26, 0x37	; 55
    2dec:	9f ab       	std	Y+55, r25	; 0x37
    2dee:	8e ab       	std	Y+54, r24	; 0x36
    2df0:	d8 96       	adiw	r26, 0x38	; 56
    2df2:	8d 91       	ld	r24, X+
    2df4:	9c 91       	ld	r25, X
    2df6:	d9 97       	sbiw	r26, 0x39	; 57
    2df8:	99 af       	std	Y+57, r25	; 0x39
    2dfa:	88 af       	std	Y+56, r24	; 0x38
    2dfc:	da 96       	adiw	r26, 0x3a	; 58
    2dfe:	8d 91       	ld	r24, X+
    2e00:	9c 91       	ld	r25, X
    2e02:	db 97       	sbiw	r26, 0x3b	; 59
    2e04:	9b af       	std	Y+59, r25	; 0x3b
    2e06:	8a af       	std	Y+58, r24	; 0x3a
    2e08:	dc 96       	adiw	r26, 0x3c	; 60
    2e0a:	8d 91       	ld	r24, X+
    2e0c:	9c 91       	ld	r25, X
    2e0e:	dd 97       	sbiw	r26, 0x3d	; 61
    2e10:	9d af       	std	Y+61, r25	; 0x3d
    2e12:	8c af       	std	Y+60, r24	; 0x3c
    2e14:	1f ae       	std	Y+63, r1	; 0x3f
    2e16:	1e ae       	std	Y+62, r1	; 0x3e
    2e18:	f7 01       	movw	r30, r14
    2e1a:	84 81       	ldd	r24, Z+4	; 0x04
    2e1c:	95 81       	ldd	r25, Z+5	; 0x05
    2e1e:	89 2b       	or	r24, r25
    2e20:	59 f0       	breq	.+22     	; 0x2e38 <_ZN10LinkedListI13EZUI_PageItemE3addES0_+0x15a>
    2e22:	06 80       	ldd	r0, Z+6	; 0x06
    2e24:	f7 81       	ldd	r31, Z+7	; 0x07
    2e26:	e0 2d       	mov	r30, r0
    2e28:	d7 af       	std	Z+63, r29	; 0x3f
    2e2a:	c6 af       	std	Z+62, r28	; 0x3e
    2e2c:	d7 01       	movw	r26, r14
    2e2e:	17 96       	adiw	r26, 0x07	; 7
    2e30:	dc 93       	st	X, r29
    2e32:	ce 93       	st	-X, r28
    2e34:	16 97       	sbiw	r26, 0x06	; 6
    2e36:	05 c0       	rjmp	.+10     	; 0x2e42 <_ZN10LinkedListI13EZUI_PageItemE3addES0_+0x164>
    2e38:	f7 01       	movw	r30, r14
    2e3a:	d5 83       	std	Z+5, r29	; 0x05
    2e3c:	c4 83       	std	Z+4, r28	; 0x04
    2e3e:	d7 83       	std	Z+7, r29	; 0x07
    2e40:	c6 83       	std	Z+6, r28	; 0x06
    2e42:	d7 01       	movw	r26, r14
    2e44:	12 96       	adiw	r26, 0x02	; 2
    2e46:	8d 91       	ld	r24, X+
    2e48:	9c 91       	ld	r25, X
    2e4a:	13 97       	sbiw	r26, 0x03	; 3
    2e4c:	01 96       	adiw	r24, 0x01	; 1
    2e4e:	13 96       	adiw	r26, 0x03	; 3
    2e50:	9c 93       	st	X, r25
    2e52:	8e 93       	st	-X, r24
    2e54:	12 97       	sbiw	r26, 0x02	; 2
    2e56:	1c 96       	adiw	r26, 0x0c	; 12
    2e58:	1c 92       	st	X, r1
    2e5a:	81 e0       	ldi	r24, 0x01	; 1
    2e5c:	df 91       	pop	r29
    2e5e:	cf 91       	pop	r28
    2e60:	1f 91       	pop	r17
    2e62:	0f 91       	pop	r16
    2e64:	ff 90       	pop	r15
    2e66:	ef 90       	pop	r14
    2e68:	08 95       	ret

00002e6a <_ZN10LinkedListI13EZUI_PageItemE5shiftEv>:
    2e6a:	af 92       	push	r10
    2e6c:	bf 92       	push	r11
    2e6e:	cf 92       	push	r12
    2e70:	df 92       	push	r13
    2e72:	ef 92       	push	r14
    2e74:	ff 92       	push	r15
    2e76:	0f 93       	push	r16
    2e78:	1f 93       	push	r17
    2e7a:	cf 93       	push	r28
    2e7c:	df 93       	push	r29
    2e7e:	cd b7       	in	r28, 0x3d	; 61
    2e80:	de b7       	in	r29, 0x3e	; 62
    2e82:	ee 97       	sbiw	r28, 0x3e	; 62
    2e84:	0f b6       	in	r0, 0x3f	; 63
    2e86:	f8 94       	cli
    2e88:	de bf       	out	0x3e, r29	; 62
    2e8a:	0f be       	out	0x3f, r0	; 63
    2e8c:	cd bf       	out	0x3d, r28	; 61
    2e8e:	8c 01       	movw	r16, r24
    2e90:	6b 01       	movw	r12, r22
    2e92:	db 01       	movw	r26, r22
    2e94:	12 96       	adiw	r26, 0x02	; 2
    2e96:	8d 91       	ld	r24, X+
    2e98:	9c 91       	ld	r25, X
    2e9a:	13 97       	sbiw	r26, 0x03	; 3
    2e9c:	18 16       	cp	r1, r24
    2e9e:	19 06       	cpc	r1, r25
    2ea0:	24 f0       	brlt	.+8      	; 0x2eaa <_ZN10LinkedListI13EZUI_PageItemE5shiftEv+0x40>
    2ea2:	c8 01       	movw	r24, r16
    2ea4:	0e 94 c5 24 	call	0x498a	; 0x498a <_ZN13EZUI_PageItemC1Ev>
    2ea8:	42 c1       	rjmp	.+644    	; 0x312e <_ZN10LinkedListI13EZUI_PageItemE5shiftEv+0x2c4>
    2eaa:	02 97       	sbiw	r24, 0x02	; 2
    2eac:	0c f4       	brge	.+2      	; 0x2eb0 <_ZN10LinkedListI13EZUI_PageItemE5shiftEv+0x46>
    2eae:	37 c1       	rjmp	.+622    	; 0x311e <_ZN10LinkedListI13EZUI_PageItemE5shiftEv+0x2b4>
    2eb0:	fb 01       	movw	r30, r22
    2eb2:	e4 80       	ldd	r14, Z+4	; 0x04
    2eb4:	f5 80       	ldd	r15, Z+5	; 0x05
    2eb6:	d7 01       	movw	r26, r14
    2eb8:	de 96       	adiw	r26, 0x3e	; 62
    2eba:	ad 90       	ld	r10, X+
    2ebc:	bc 90       	ld	r11, X
    2ebe:	df 97       	sbiw	r26, 0x3f	; 63
    2ec0:	8c 91       	ld	r24, X
    2ec2:	89 83       	std	Y+1, r24	; 0x01
    2ec4:	11 96       	adiw	r26, 0x01	; 1
    2ec6:	8c 91       	ld	r24, X
    2ec8:	11 97       	sbiw	r26, 0x01	; 1
    2eca:	8a 83       	std	Y+2, r24	; 0x02
    2ecc:	12 96       	adiw	r26, 0x02	; 2
    2ece:	8c 91       	ld	r24, X
    2ed0:	8b 83       	std	Y+3, r24	; 0x03
    2ed2:	b7 01       	movw	r22, r14
    2ed4:	6d 5f       	subi	r22, 0xFD	; 253
    2ed6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ed8:	ce 01       	movw	r24, r28
    2eda:	04 96       	adiw	r24, 0x04	; 4
    2edc:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
    2ee0:	f7 01       	movw	r30, r14
    2ee2:	81 85       	ldd	r24, Z+9	; 0x09
    2ee4:	92 85       	ldd	r25, Z+10	; 0x0a
    2ee6:	a3 85       	ldd	r26, Z+11	; 0x0b
    2ee8:	b4 85       	ldd	r27, Z+12	; 0x0c
    2eea:	8a 87       	std	Y+10, r24	; 0x0a
    2eec:	9b 87       	std	Y+11, r25	; 0x0b
    2eee:	ac 87       	std	Y+12, r26	; 0x0c
    2ef0:	bd 87       	std	Y+13, r27	; 0x0d
    2ef2:	85 85       	ldd	r24, Z+13	; 0x0d
    2ef4:	96 85       	ldd	r25, Z+14	; 0x0e
    2ef6:	a7 85       	ldd	r26, Z+15	; 0x0f
    2ef8:	b0 89       	ldd	r27, Z+16	; 0x10
    2efa:	8e 87       	std	Y+14, r24	; 0x0e
    2efc:	9f 87       	std	Y+15, r25	; 0x0f
    2efe:	a8 8b       	std	Y+16, r26	; 0x10
    2f00:	b9 8b       	std	Y+17, r27	; 0x11
    2f02:	81 89       	ldd	r24, Z+17	; 0x11
    2f04:	8a 8b       	std	Y+18, r24	; 0x12
    2f06:	82 89       	ldd	r24, Z+18	; 0x12
    2f08:	93 89       	ldd	r25, Z+19	; 0x13
    2f0a:	9c 8b       	std	Y+20, r25	; 0x14
    2f0c:	8b 8b       	std	Y+19, r24	; 0x13
    2f0e:	84 89       	ldd	r24, Z+20	; 0x14
    2f10:	95 89       	ldd	r25, Z+21	; 0x15
    2f12:	9e 8b       	std	Y+22, r25	; 0x16
    2f14:	8d 8b       	std	Y+21, r24	; 0x15
    2f16:	86 89       	ldd	r24, Z+22	; 0x16
    2f18:	97 89       	ldd	r25, Z+23	; 0x17
    2f1a:	98 8f       	std	Y+24, r25	; 0x18
    2f1c:	8f 8b       	std	Y+23, r24	; 0x17
    2f1e:	80 8d       	ldd	r24, Z+24	; 0x18
    2f20:	91 8d       	ldd	r25, Z+25	; 0x19
    2f22:	9a 8f       	std	Y+26, r25	; 0x1a
    2f24:	89 8f       	std	Y+25, r24	; 0x19
    2f26:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f28:	93 8d       	ldd	r25, Z+27	; 0x1b
    2f2a:	9c 8f       	std	Y+28, r25	; 0x1c
    2f2c:	8b 8f       	std	Y+27, r24	; 0x1b
    2f2e:	b7 01       	movw	r22, r14
    2f30:	64 5e       	subi	r22, 0xE4	; 228
    2f32:	7f 4f       	sbci	r23, 0xFF	; 255
    2f34:	ce 01       	movw	r24, r28
    2f36:	4d 96       	adiw	r24, 0x1d	; 29
    2f38:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
    2f3c:	b7 01       	movw	r22, r14
    2f3e:	6e 5d       	subi	r22, 0xDE	; 222
    2f40:	7f 4f       	sbci	r23, 0xFF	; 255
    2f42:	ce 01       	movw	r24, r28
    2f44:	83 96       	adiw	r24, 0x23	; 35
    2f46:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
    2f4a:	d7 01       	movw	r26, r14
    2f4c:	98 96       	adiw	r26, 0x28	; 40
    2f4e:	8d 91       	ld	r24, X+
    2f50:	9c 91       	ld	r25, X
    2f52:	99 97       	sbiw	r26, 0x29	; 41
    2f54:	9a a7       	std	Y+42, r25	; 0x2a
    2f56:	89 a7       	std	Y+41, r24	; 0x29
    2f58:	9a 96       	adiw	r26, 0x2a	; 42
    2f5a:	8d 91       	ld	r24, X+
    2f5c:	9c 91       	ld	r25, X
    2f5e:	9b 97       	sbiw	r26, 0x2b	; 43
    2f60:	9c a7       	std	Y+44, r25	; 0x2c
    2f62:	8b a7       	std	Y+43, r24	; 0x2b
    2f64:	9c 96       	adiw	r26, 0x2c	; 44
    2f66:	8d 91       	ld	r24, X+
    2f68:	9c 91       	ld	r25, X
    2f6a:	9d 97       	sbiw	r26, 0x2d	; 45
    2f6c:	9e a7       	std	Y+46, r25	; 0x2e
    2f6e:	8d a7       	std	Y+45, r24	; 0x2d
    2f70:	9e 96       	adiw	r26, 0x2e	; 46
    2f72:	8d 91       	ld	r24, X+
    2f74:	9c 91       	ld	r25, X
    2f76:	9f 97       	sbiw	r26, 0x2f	; 47
    2f78:	98 ab       	std	Y+48, r25	; 0x30
    2f7a:	8f a7       	std	Y+47, r24	; 0x2f
    2f7c:	d0 96       	adiw	r26, 0x30	; 48
    2f7e:	8d 91       	ld	r24, X+
    2f80:	9c 91       	ld	r25, X
    2f82:	d1 97       	sbiw	r26, 0x31	; 49
    2f84:	9a ab       	std	Y+50, r25	; 0x32
    2f86:	89 ab       	std	Y+49, r24	; 0x31
    2f88:	d2 96       	adiw	r26, 0x32	; 50
    2f8a:	8d 91       	ld	r24, X+
    2f8c:	9c 91       	ld	r25, X
    2f8e:	d3 97       	sbiw	r26, 0x33	; 51
    2f90:	9c ab       	std	Y+52, r25	; 0x34
    2f92:	8b ab       	std	Y+51, r24	; 0x33
    2f94:	d4 96       	adiw	r26, 0x34	; 52
    2f96:	8d 91       	ld	r24, X+
    2f98:	9c 91       	ld	r25, X
    2f9a:	d5 97       	sbiw	r26, 0x35	; 53
    2f9c:	9e ab       	std	Y+54, r25	; 0x36
    2f9e:	8d ab       	std	Y+53, r24	; 0x35
    2fa0:	d6 96       	adiw	r26, 0x36	; 54
    2fa2:	8d 91       	ld	r24, X+
    2fa4:	9c 91       	ld	r25, X
    2fa6:	d7 97       	sbiw	r26, 0x37	; 55
    2fa8:	98 af       	std	Y+56, r25	; 0x38
    2faa:	8f ab       	std	Y+55, r24	; 0x37
    2fac:	d8 96       	adiw	r26, 0x38	; 56
    2fae:	8d 91       	ld	r24, X+
    2fb0:	9c 91       	ld	r25, X
    2fb2:	d9 97       	sbiw	r26, 0x39	; 57
    2fb4:	9a af       	std	Y+58, r25	; 0x3a
    2fb6:	89 af       	std	Y+57, r24	; 0x39
    2fb8:	da 96       	adiw	r26, 0x3a	; 58
    2fba:	8d 91       	ld	r24, X+
    2fbc:	9c 91       	ld	r25, X
    2fbe:	db 97       	sbiw	r26, 0x3b	; 59
    2fc0:	9c af       	std	Y+60, r25	; 0x3c
    2fc2:	8b af       	std	Y+59, r24	; 0x3b
    2fc4:	dc 96       	adiw	r26, 0x3c	; 60
    2fc6:	8d 91       	ld	r24, X+
    2fc8:	9c 91       	ld	r25, X
    2fca:	dd 97       	sbiw	r26, 0x3d	; 61
    2fcc:	9e af       	std	Y+62, r25	; 0x3e
    2fce:	8d af       	std	Y+61, r24	; 0x3d
    2fd0:	f6 01       	movw	r30, r12
    2fd2:	e4 80       	ldd	r14, Z+4	; 0x04
    2fd4:	f5 80       	ldd	r15, Z+5	; 0x05
    2fd6:	e1 14       	cp	r14, r1
    2fd8:	f1 04       	cpc	r15, r1
    2fda:	31 f0       	breq	.+12     	; 0x2fe8 <_ZN10LinkedListI13EZUI_PageItemE5shiftEv+0x17e>
    2fdc:	c7 01       	movw	r24, r14
    2fde:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <_ZN13EZUI_PageItemD1Ev>
    2fe2:	c7 01       	movw	r24, r14
    2fe4:	0e 94 0e 3a 	call	0x741c	; 0x741c <_ZdlPv>
    2fe8:	d6 01       	movw	r26, r12
    2fea:	15 96       	adiw	r26, 0x05	; 5
    2fec:	bc 92       	st	X, r11
    2fee:	ae 92       	st	-X, r10
    2ff0:	14 97       	sbiw	r26, 0x04	; 4
    2ff2:	12 96       	adiw	r26, 0x02	; 2
    2ff4:	8d 91       	ld	r24, X+
    2ff6:	9c 91       	ld	r25, X
    2ff8:	13 97       	sbiw	r26, 0x03	; 3
    2ffa:	01 97       	sbiw	r24, 0x01	; 1
    2ffc:	13 96       	adiw	r26, 0x03	; 3
    2ffe:	9c 93       	st	X, r25
    3000:	8e 93       	st	-X, r24
    3002:	12 97       	sbiw	r26, 0x02	; 2
    3004:	1c 96       	adiw	r26, 0x0c	; 12
    3006:	1c 92       	st	X, r1
    3008:	89 81       	ldd	r24, Y+1	; 0x01
    300a:	f8 01       	movw	r30, r16
    300c:	80 83       	st	Z, r24
    300e:	8a 81       	ldd	r24, Y+2	; 0x02
    3010:	81 83       	std	Z+1, r24	; 0x01
    3012:	8b 81       	ldd	r24, Y+3	; 0x03
    3014:	82 83       	std	Z+2, r24	; 0x02
    3016:	be 01       	movw	r22, r28
    3018:	6c 5f       	subi	r22, 0xFC	; 252
    301a:	7f 4f       	sbci	r23, 0xFF	; 255
    301c:	c8 01       	movw	r24, r16
    301e:	03 96       	adiw	r24, 0x03	; 3
    3020:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
    3024:	8a 85       	ldd	r24, Y+10	; 0x0a
    3026:	9b 85       	ldd	r25, Y+11	; 0x0b
    3028:	ac 85       	ldd	r26, Y+12	; 0x0c
    302a:	bd 85       	ldd	r27, Y+13	; 0x0d
    302c:	f8 01       	movw	r30, r16
    302e:	81 87       	std	Z+9, r24	; 0x09
    3030:	92 87       	std	Z+10, r25	; 0x0a
    3032:	a3 87       	std	Z+11, r26	; 0x0b
    3034:	b4 87       	std	Z+12, r27	; 0x0c
    3036:	8e 85       	ldd	r24, Y+14	; 0x0e
    3038:	9f 85       	ldd	r25, Y+15	; 0x0f
    303a:	a8 89       	ldd	r26, Y+16	; 0x10
    303c:	b9 89       	ldd	r27, Y+17	; 0x11
    303e:	85 87       	std	Z+13, r24	; 0x0d
    3040:	96 87       	std	Z+14, r25	; 0x0e
    3042:	a7 87       	std	Z+15, r26	; 0x0f
    3044:	b0 8b       	std	Z+16, r27	; 0x10
    3046:	8a 89       	ldd	r24, Y+18	; 0x12
    3048:	81 8b       	std	Z+17, r24	; 0x11
    304a:	8b 89       	ldd	r24, Y+19	; 0x13
    304c:	9c 89       	ldd	r25, Y+20	; 0x14
    304e:	93 8b       	std	Z+19, r25	; 0x13
    3050:	82 8b       	std	Z+18, r24	; 0x12
    3052:	8d 89       	ldd	r24, Y+21	; 0x15
    3054:	9e 89       	ldd	r25, Y+22	; 0x16
    3056:	95 8b       	std	Z+21, r25	; 0x15
    3058:	84 8b       	std	Z+20, r24	; 0x14
    305a:	8f 89       	ldd	r24, Y+23	; 0x17
    305c:	98 8d       	ldd	r25, Y+24	; 0x18
    305e:	97 8b       	std	Z+23, r25	; 0x17
    3060:	86 8b       	std	Z+22, r24	; 0x16
    3062:	89 8d       	ldd	r24, Y+25	; 0x19
    3064:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3066:	91 8f       	std	Z+25, r25	; 0x19
    3068:	80 8f       	std	Z+24, r24	; 0x18
    306a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    306c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    306e:	93 8f       	std	Z+27, r25	; 0x1b
    3070:	82 8f       	std	Z+26, r24	; 0x1a
    3072:	be 01       	movw	r22, r28
    3074:	63 5e       	subi	r22, 0xE3	; 227
    3076:	7f 4f       	sbci	r23, 0xFF	; 255
    3078:	c8 01       	movw	r24, r16
    307a:	4c 96       	adiw	r24, 0x1c	; 28
    307c:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
    3080:	be 01       	movw	r22, r28
    3082:	6d 5d       	subi	r22, 0xDD	; 221
    3084:	7f 4f       	sbci	r23, 0xFF	; 255
    3086:	c8 01       	movw	r24, r16
    3088:	82 96       	adiw	r24, 0x22	; 34
    308a:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
    308e:	89 a5       	ldd	r24, Y+41	; 0x29
    3090:	9a a5       	ldd	r25, Y+42	; 0x2a
    3092:	d8 01       	movw	r26, r16
    3094:	99 96       	adiw	r26, 0x29	; 41
    3096:	9c 93       	st	X, r25
    3098:	8e 93       	st	-X, r24
    309a:	98 97       	sbiw	r26, 0x28	; 40
    309c:	8b a5       	ldd	r24, Y+43	; 0x2b
    309e:	9c a5       	ldd	r25, Y+44	; 0x2c
    30a0:	9b 96       	adiw	r26, 0x2b	; 43
    30a2:	9c 93       	st	X, r25
    30a4:	8e 93       	st	-X, r24
    30a6:	9a 97       	sbiw	r26, 0x2a	; 42
    30a8:	8d a5       	ldd	r24, Y+45	; 0x2d
    30aa:	9e a5       	ldd	r25, Y+46	; 0x2e
    30ac:	9d 96       	adiw	r26, 0x2d	; 45
    30ae:	9c 93       	st	X, r25
    30b0:	8e 93       	st	-X, r24
    30b2:	9c 97       	sbiw	r26, 0x2c	; 44
    30b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    30b6:	98 a9       	ldd	r25, Y+48	; 0x30
    30b8:	9f 96       	adiw	r26, 0x2f	; 47
    30ba:	9c 93       	st	X, r25
    30bc:	8e 93       	st	-X, r24
    30be:	9e 97       	sbiw	r26, 0x2e	; 46
    30c0:	89 a9       	ldd	r24, Y+49	; 0x31
    30c2:	9a a9       	ldd	r25, Y+50	; 0x32
    30c4:	d1 96       	adiw	r26, 0x31	; 49
    30c6:	9c 93       	st	X, r25
    30c8:	8e 93       	st	-X, r24
    30ca:	d0 97       	sbiw	r26, 0x30	; 48
    30cc:	8b a9       	ldd	r24, Y+51	; 0x33
    30ce:	9c a9       	ldd	r25, Y+52	; 0x34
    30d0:	d3 96       	adiw	r26, 0x33	; 51
    30d2:	9c 93       	st	X, r25
    30d4:	8e 93       	st	-X, r24
    30d6:	d2 97       	sbiw	r26, 0x32	; 50
    30d8:	8d a9       	ldd	r24, Y+53	; 0x35
    30da:	9e a9       	ldd	r25, Y+54	; 0x36
    30dc:	d5 96       	adiw	r26, 0x35	; 53
    30de:	9c 93       	st	X, r25
    30e0:	8e 93       	st	-X, r24
    30e2:	d4 97       	sbiw	r26, 0x34	; 52
    30e4:	8f a9       	ldd	r24, Y+55	; 0x37
    30e6:	98 ad       	ldd	r25, Y+56	; 0x38
    30e8:	d7 96       	adiw	r26, 0x37	; 55
    30ea:	9c 93       	st	X, r25
    30ec:	8e 93       	st	-X, r24
    30ee:	d6 97       	sbiw	r26, 0x36	; 54
    30f0:	89 ad       	ldd	r24, Y+57	; 0x39
    30f2:	9a ad       	ldd	r25, Y+58	; 0x3a
    30f4:	d9 96       	adiw	r26, 0x39	; 57
    30f6:	9c 93       	st	X, r25
    30f8:	8e 93       	st	-X, r24
    30fa:	d8 97       	sbiw	r26, 0x38	; 56
    30fc:	8b ad       	ldd	r24, Y+59	; 0x3b
    30fe:	9c ad       	ldd	r25, Y+60	; 0x3c
    3100:	db 96       	adiw	r26, 0x3b	; 59
    3102:	9c 93       	st	X, r25
    3104:	8e 93       	st	-X, r24
    3106:	da 97       	sbiw	r26, 0x3a	; 58
    3108:	8d ad       	ldd	r24, Y+61	; 0x3d
    310a:	9e ad       	ldd	r25, Y+62	; 0x3e
    310c:	dd 96       	adiw	r26, 0x3d	; 61
    310e:	9c 93       	st	X, r25
    3110:	8e 93       	st	-X, r24
    3112:	dc 97       	sbiw	r26, 0x3c	; 60
    3114:	ce 01       	movw	r24, r28
    3116:	01 96       	adiw	r24, 0x01	; 1
    3118:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <_ZN13EZUI_PageItemD1Ev>
    311c:	08 c0       	rjmp	.+16     	; 0x312e <_ZN10LinkedListI13EZUI_PageItemE5shiftEv+0x2c4>
    311e:	db 01       	movw	r26, r22
    3120:	ed 91       	ld	r30, X+
    3122:	fc 91       	ld	r31, X
    3124:	04 84       	ldd	r0, Z+12	; 0x0c
    3126:	f5 85       	ldd	r31, Z+13	; 0x0d
    3128:	e0 2d       	mov	r30, r0
    312a:	c8 01       	movw	r24, r16
    312c:	19 95       	eicall
    312e:	c8 01       	movw	r24, r16
    3130:	ee 96       	adiw	r28, 0x3e	; 62
    3132:	0f b6       	in	r0, 0x3f	; 63
    3134:	f8 94       	cli
    3136:	de bf       	out	0x3e, r29	; 62
    3138:	0f be       	out	0x3f, r0	; 63
    313a:	cd bf       	out	0x3d, r28	; 61
    313c:	df 91       	pop	r29
    313e:	cf 91       	pop	r28
    3140:	1f 91       	pop	r17
    3142:	0f 91       	pop	r16
    3144:	ff 90       	pop	r15
    3146:	ef 90       	pop	r14
    3148:	df 90       	pop	r13
    314a:	cf 90       	pop	r12
    314c:	bf 90       	pop	r11
    314e:	af 90       	pop	r10
    3150:	08 95       	ret

00003152 <_ZN10LinkedListI13EZUI_PageItemE7unshiftES0_>:
    3152:	cf 92       	push	r12
    3154:	df 92       	push	r13
    3156:	ef 92       	push	r14
    3158:	ff 92       	push	r15
    315a:	0f 93       	push	r16
    315c:	1f 93       	push	r17
    315e:	cf 93       	push	r28
    3160:	df 93       	push	r29
    3162:	cd b7       	in	r28, 0x3d	; 61
    3164:	de b7       	in	r29, 0x3e	; 62
    3166:	ee 97       	sbiw	r28, 0x3e	; 62
    3168:	0f b6       	in	r0, 0x3f	; 63
    316a:	f8 94       	cli
    316c:	de bf       	out	0x3e, r29	; 62
    316e:	0f be       	out	0x3f, r0	; 63
    3170:	cd bf       	out	0x3d, r28	; 61
    3172:	6c 01       	movw	r12, r24
    3174:	8b 01       	movw	r16, r22
    3176:	dc 01       	movw	r26, r24
    3178:	12 96       	adiw	r26, 0x02	; 2
    317a:	8d 91       	ld	r24, X+
    317c:	9c 91       	ld	r25, X
    317e:	13 97       	sbiw	r26, 0x03	; 3
    3180:	89 2b       	or	r24, r25
    3182:	09 f0       	breq	.+2      	; 0x3186 <_ZN10LinkedListI13EZUI_PageItemE7unshiftES0_+0x34>
    3184:	95 c0       	rjmp	.+298    	; 0x32b0 <_ZN10LinkedListI13EZUI_PageItemE7unshiftES0_+0x15e>
    3186:	ed 91       	ld	r30, X+
    3188:	fc 91       	ld	r31, X
    318a:	e4 80       	ldd	r14, Z+4	; 0x04
    318c:	f5 80       	ldd	r15, Z+5	; 0x05
    318e:	fb 01       	movw	r30, r22
    3190:	80 81       	ld	r24, Z
    3192:	89 83       	std	Y+1, r24	; 0x01
    3194:	81 81       	ldd	r24, Z+1	; 0x01
    3196:	8a 83       	std	Y+2, r24	; 0x02
    3198:	82 81       	ldd	r24, Z+2	; 0x02
    319a:	8b 83       	std	Y+3, r24	; 0x03
    319c:	6d 5f       	subi	r22, 0xFD	; 253
    319e:	7f 4f       	sbci	r23, 0xFF	; 255
    31a0:	ce 01       	movw	r24, r28
    31a2:	04 96       	adiw	r24, 0x04	; 4
    31a4:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
    31a8:	f8 01       	movw	r30, r16
    31aa:	81 85       	ldd	r24, Z+9	; 0x09
    31ac:	92 85       	ldd	r25, Z+10	; 0x0a
    31ae:	a3 85       	ldd	r26, Z+11	; 0x0b
    31b0:	b4 85       	ldd	r27, Z+12	; 0x0c
    31b2:	8a 87       	std	Y+10, r24	; 0x0a
    31b4:	9b 87       	std	Y+11, r25	; 0x0b
    31b6:	ac 87       	std	Y+12, r26	; 0x0c
    31b8:	bd 87       	std	Y+13, r27	; 0x0d
    31ba:	85 85       	ldd	r24, Z+13	; 0x0d
    31bc:	96 85       	ldd	r25, Z+14	; 0x0e
    31be:	a7 85       	ldd	r26, Z+15	; 0x0f
    31c0:	b0 89       	ldd	r27, Z+16	; 0x10
    31c2:	8e 87       	std	Y+14, r24	; 0x0e
    31c4:	9f 87       	std	Y+15, r25	; 0x0f
    31c6:	a8 8b       	std	Y+16, r26	; 0x10
    31c8:	b9 8b       	std	Y+17, r27	; 0x11
    31ca:	81 89       	ldd	r24, Z+17	; 0x11
    31cc:	8a 8b       	std	Y+18, r24	; 0x12
    31ce:	82 89       	ldd	r24, Z+18	; 0x12
    31d0:	93 89       	ldd	r25, Z+19	; 0x13
    31d2:	9c 8b       	std	Y+20, r25	; 0x14
    31d4:	8b 8b       	std	Y+19, r24	; 0x13
    31d6:	84 89       	ldd	r24, Z+20	; 0x14
    31d8:	95 89       	ldd	r25, Z+21	; 0x15
    31da:	9e 8b       	std	Y+22, r25	; 0x16
    31dc:	8d 8b       	std	Y+21, r24	; 0x15
    31de:	86 89       	ldd	r24, Z+22	; 0x16
    31e0:	97 89       	ldd	r25, Z+23	; 0x17
    31e2:	98 8f       	std	Y+24, r25	; 0x18
    31e4:	8f 8b       	std	Y+23, r24	; 0x17
    31e6:	80 8d       	ldd	r24, Z+24	; 0x18
    31e8:	91 8d       	ldd	r25, Z+25	; 0x19
    31ea:	9a 8f       	std	Y+26, r25	; 0x1a
    31ec:	89 8f       	std	Y+25, r24	; 0x19
    31ee:	82 8d       	ldd	r24, Z+26	; 0x1a
    31f0:	93 8d       	ldd	r25, Z+27	; 0x1b
    31f2:	9c 8f       	std	Y+28, r25	; 0x1c
    31f4:	8b 8f       	std	Y+27, r24	; 0x1b
    31f6:	b8 01       	movw	r22, r16
    31f8:	64 5e       	subi	r22, 0xE4	; 228
    31fa:	7f 4f       	sbci	r23, 0xFF	; 255
    31fc:	ce 01       	movw	r24, r28
    31fe:	4d 96       	adiw	r24, 0x1d	; 29
    3200:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
    3204:	b8 01       	movw	r22, r16
    3206:	6e 5d       	subi	r22, 0xDE	; 222
    3208:	7f 4f       	sbci	r23, 0xFF	; 255
    320a:	ce 01       	movw	r24, r28
    320c:	83 96       	adiw	r24, 0x23	; 35
    320e:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
    3212:	d8 01       	movw	r26, r16
    3214:	98 96       	adiw	r26, 0x28	; 40
    3216:	8d 91       	ld	r24, X+
    3218:	9c 91       	ld	r25, X
    321a:	99 97       	sbiw	r26, 0x29	; 41
    321c:	9a a7       	std	Y+42, r25	; 0x2a
    321e:	89 a7       	std	Y+41, r24	; 0x29
    3220:	9a 96       	adiw	r26, 0x2a	; 42
    3222:	8d 91       	ld	r24, X+
    3224:	9c 91       	ld	r25, X
    3226:	9b 97       	sbiw	r26, 0x2b	; 43
    3228:	9c a7       	std	Y+44, r25	; 0x2c
    322a:	8b a7       	std	Y+43, r24	; 0x2b
    322c:	9c 96       	adiw	r26, 0x2c	; 44
    322e:	8d 91       	ld	r24, X+
    3230:	9c 91       	ld	r25, X
    3232:	9d 97       	sbiw	r26, 0x2d	; 45
    3234:	9e a7       	std	Y+46, r25	; 0x2e
    3236:	8d a7       	std	Y+45, r24	; 0x2d
    3238:	9e 96       	adiw	r26, 0x2e	; 46
    323a:	8d 91       	ld	r24, X+
    323c:	9c 91       	ld	r25, X
    323e:	9f 97       	sbiw	r26, 0x2f	; 47
    3240:	98 ab       	std	Y+48, r25	; 0x30
    3242:	8f a7       	std	Y+47, r24	; 0x2f
    3244:	d0 96       	adiw	r26, 0x30	; 48
    3246:	8d 91       	ld	r24, X+
    3248:	9c 91       	ld	r25, X
    324a:	d1 97       	sbiw	r26, 0x31	; 49
    324c:	9a ab       	std	Y+50, r25	; 0x32
    324e:	89 ab       	std	Y+49, r24	; 0x31
    3250:	d2 96       	adiw	r26, 0x32	; 50
    3252:	8d 91       	ld	r24, X+
    3254:	9c 91       	ld	r25, X
    3256:	d3 97       	sbiw	r26, 0x33	; 51
    3258:	9c ab       	std	Y+52, r25	; 0x34
    325a:	8b ab       	std	Y+51, r24	; 0x33
    325c:	d4 96       	adiw	r26, 0x34	; 52
    325e:	8d 91       	ld	r24, X+
    3260:	9c 91       	ld	r25, X
    3262:	d5 97       	sbiw	r26, 0x35	; 53
    3264:	9e ab       	std	Y+54, r25	; 0x36
    3266:	8d ab       	std	Y+53, r24	; 0x35
    3268:	d6 96       	adiw	r26, 0x36	; 54
    326a:	8d 91       	ld	r24, X+
    326c:	9c 91       	ld	r25, X
    326e:	d7 97       	sbiw	r26, 0x37	; 55
    3270:	98 af       	std	Y+56, r25	; 0x38
    3272:	8f ab       	std	Y+55, r24	; 0x37
    3274:	d8 96       	adiw	r26, 0x38	; 56
    3276:	8d 91       	ld	r24, X+
    3278:	9c 91       	ld	r25, X
    327a:	d9 97       	sbiw	r26, 0x39	; 57
    327c:	9a af       	std	Y+58, r25	; 0x3a
    327e:	89 af       	std	Y+57, r24	; 0x39
    3280:	da 96       	adiw	r26, 0x3a	; 58
    3282:	8d 91       	ld	r24, X+
    3284:	9c 91       	ld	r25, X
    3286:	db 97       	sbiw	r26, 0x3b	; 59
    3288:	9c af       	std	Y+60, r25	; 0x3c
    328a:	8b af       	std	Y+59, r24	; 0x3b
    328c:	dc 96       	adiw	r26, 0x3c	; 60
    328e:	8d 91       	ld	r24, X+
    3290:	9c 91       	ld	r25, X
    3292:	dd 97       	sbiw	r26, 0x3d	; 61
    3294:	9e af       	std	Y+62, r25	; 0x3e
    3296:	8d af       	std	Y+61, r24	; 0x3d
    3298:	be 01       	movw	r22, r28
    329a:	6f 5f       	subi	r22, 0xFF	; 255
    329c:	7f 4f       	sbci	r23, 0xFF	; 255
    329e:	c6 01       	movw	r24, r12
    32a0:	f7 01       	movw	r30, r14
    32a2:	19 95       	eicall
    32a4:	18 2f       	mov	r17, r24
    32a6:	ce 01       	movw	r24, r28
    32a8:	01 96       	adiw	r24, 0x01	; 1
    32aa:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <_ZN13EZUI_PageItemD1Ev>
    32ae:	b9 c0       	rjmp	.+370    	; 0x3422 <_ZN10LinkedListI13EZUI_PageItemE7unshiftES0_+0x2d0>
    32b0:	80 e4       	ldi	r24, 0x40	; 64
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    32b8:	7c 01       	movw	r14, r24
    32ba:	80 e4       	ldi	r24, 0x40	; 64
    32bc:	d7 01       	movw	r26, r14
    32be:	1d 92       	st	X+, r1
    32c0:	8a 95       	dec	r24
    32c2:	e9 f7       	brne	.-6      	; 0x32be <_ZN10LinkedListI13EZUI_PageItemE7unshiftES0_+0x16c>
    32c4:	c7 01       	movw	r24, r14
    32c6:	0e 94 c5 24 	call	0x498a	; 0x498a <_ZN13EZUI_PageItemC1Ev>
    32ca:	f6 01       	movw	r30, r12
    32cc:	84 81       	ldd	r24, Z+4	; 0x04
    32ce:	95 81       	ldd	r25, Z+5	; 0x05
    32d0:	d7 01       	movw	r26, r14
    32d2:	df 96       	adiw	r26, 0x3f	; 63
    32d4:	9c 93       	st	X, r25
    32d6:	8e 93       	st	-X, r24
    32d8:	de 97       	sbiw	r26, 0x3e	; 62
    32da:	f8 01       	movw	r30, r16
    32dc:	80 81       	ld	r24, Z
    32de:	8c 93       	st	X, r24
    32e0:	81 81       	ldd	r24, Z+1	; 0x01
    32e2:	11 96       	adiw	r26, 0x01	; 1
    32e4:	8c 93       	st	X, r24
    32e6:	11 97       	sbiw	r26, 0x01	; 1
    32e8:	82 81       	ldd	r24, Z+2	; 0x02
    32ea:	12 96       	adiw	r26, 0x02	; 2
    32ec:	8c 93       	st	X, r24
    32ee:	b8 01       	movw	r22, r16
    32f0:	6d 5f       	subi	r22, 0xFD	; 253
    32f2:	7f 4f       	sbci	r23, 0xFF	; 255
    32f4:	c7 01       	movw	r24, r14
    32f6:	03 96       	adiw	r24, 0x03	; 3
    32f8:	0e 94 83 41 	call	0x8306	; 0x8306 <_ZN6StringaSERKS_>
    32fc:	f8 01       	movw	r30, r16
    32fe:	81 85       	ldd	r24, Z+9	; 0x09
    3300:	92 85       	ldd	r25, Z+10	; 0x0a
    3302:	a3 85       	ldd	r26, Z+11	; 0x0b
    3304:	b4 85       	ldd	r27, Z+12	; 0x0c
    3306:	f7 01       	movw	r30, r14
    3308:	81 87       	std	Z+9, r24	; 0x09
    330a:	92 87       	std	Z+10, r25	; 0x0a
    330c:	a3 87       	std	Z+11, r26	; 0x0b
    330e:	b4 87       	std	Z+12, r27	; 0x0c
    3310:	f8 01       	movw	r30, r16
    3312:	85 85       	ldd	r24, Z+13	; 0x0d
    3314:	96 85       	ldd	r25, Z+14	; 0x0e
    3316:	a7 85       	ldd	r26, Z+15	; 0x0f
    3318:	b0 89       	ldd	r27, Z+16	; 0x10
    331a:	f7 01       	movw	r30, r14
    331c:	85 87       	std	Z+13, r24	; 0x0d
    331e:	96 87       	std	Z+14, r25	; 0x0e
    3320:	a7 87       	std	Z+15, r26	; 0x0f
    3322:	b0 8b       	std	Z+16, r27	; 0x10
    3324:	d8 01       	movw	r26, r16
    3326:	51 96       	adiw	r26, 0x11	; 17
    3328:	8c 91       	ld	r24, X
    332a:	51 97       	sbiw	r26, 0x11	; 17
    332c:	81 8b       	std	Z+17, r24	; 0x11
    332e:	52 96       	adiw	r26, 0x12	; 18
    3330:	8d 91       	ld	r24, X+
    3332:	9c 91       	ld	r25, X
    3334:	53 97       	sbiw	r26, 0x13	; 19
    3336:	93 8b       	std	Z+19, r25	; 0x13
    3338:	82 8b       	std	Z+18, r24	; 0x12
    333a:	54 96       	adiw	r26, 0x14	; 20
    333c:	8d 91       	ld	r24, X+
    333e:	9c 91       	ld	r25, X
    3340:	55 97       	sbiw	r26, 0x15	; 21
    3342:	95 8b       	std	Z+21, r25	; 0x15
    3344:	84 8b       	std	Z+20, r24	; 0x14
    3346:	56 96       	adiw	r26, 0x16	; 22
    3348:	8d 91       	ld	r24, X+
    334a:	9c 91       	ld	r25, X
    334c:	57 97       	sbiw	r26, 0x17	; 23
    334e:	97 8b       	std	Z+23, r25	; 0x17
    3350:	86 8b       	std	Z+22, r24	; 0x16
    3352:	58 96       	adiw	r26, 0x18	; 24
    3354:	8d 91       	ld	r24, X+
    3356:	9c 91       	ld	r25, X
    3358:	59 97       	sbiw	r26, 0x19	; 25
    335a:	91 8f       	std	Z+25, r25	; 0x19
    335c:	80 8f       	std	Z+24, r24	; 0x18
    335e:	5a 96       	adiw	r26, 0x1a	; 26
    3360:	8d 91       	ld	r24, X+
    3362:	9c 91       	ld	r25, X
    3364:	5b 97       	sbiw	r26, 0x1b	; 27
    3366:	93 8f       	std	Z+27, r25	; 0x1b
    3368:	82 8f       	std	Z+26, r24	; 0x1a
    336a:	b8 01       	movw	r22, r16
    336c:	64 5e       	subi	r22, 0xE4	; 228
    336e:	7f 4f       	sbci	r23, 0xFF	; 255
    3370:	c7 01       	movw	r24, r14
    3372:	4c 96       	adiw	r24, 0x1c	; 28
    3374:	0e 94 83 41 	call	0x8306	; 0x8306 <_ZN6StringaSERKS_>
    3378:	b8 01       	movw	r22, r16
    337a:	6e 5d       	subi	r22, 0xDE	; 222
    337c:	7f 4f       	sbci	r23, 0xFF	; 255
    337e:	c7 01       	movw	r24, r14
    3380:	82 96       	adiw	r24, 0x22	; 34
    3382:	0e 94 83 41 	call	0x8306	; 0x8306 <_ZN6StringaSERKS_>
    3386:	f8 01       	movw	r30, r16
    3388:	80 a5       	ldd	r24, Z+40	; 0x28
    338a:	91 a5       	ldd	r25, Z+41	; 0x29
    338c:	d7 01       	movw	r26, r14
    338e:	99 96       	adiw	r26, 0x29	; 41
    3390:	9c 93       	st	X, r25
    3392:	8e 93       	st	-X, r24
    3394:	98 97       	sbiw	r26, 0x28	; 40
    3396:	82 a5       	ldd	r24, Z+42	; 0x2a
    3398:	93 a5       	ldd	r25, Z+43	; 0x2b
    339a:	9b 96       	adiw	r26, 0x2b	; 43
    339c:	9c 93       	st	X, r25
    339e:	8e 93       	st	-X, r24
    33a0:	9a 97       	sbiw	r26, 0x2a	; 42
    33a2:	84 a5       	ldd	r24, Z+44	; 0x2c
    33a4:	95 a5       	ldd	r25, Z+45	; 0x2d
    33a6:	9d 96       	adiw	r26, 0x2d	; 45
    33a8:	9c 93       	st	X, r25
    33aa:	8e 93       	st	-X, r24
    33ac:	9c 97       	sbiw	r26, 0x2c	; 44
    33ae:	86 a5       	ldd	r24, Z+46	; 0x2e
    33b0:	97 a5       	ldd	r25, Z+47	; 0x2f
    33b2:	9f 96       	adiw	r26, 0x2f	; 47
    33b4:	9c 93       	st	X, r25
    33b6:	8e 93       	st	-X, r24
    33b8:	9e 97       	sbiw	r26, 0x2e	; 46
    33ba:	80 a9       	ldd	r24, Z+48	; 0x30
    33bc:	91 a9       	ldd	r25, Z+49	; 0x31
    33be:	d1 96       	adiw	r26, 0x31	; 49
    33c0:	9c 93       	st	X, r25
    33c2:	8e 93       	st	-X, r24
    33c4:	d0 97       	sbiw	r26, 0x30	; 48
    33c6:	82 a9       	ldd	r24, Z+50	; 0x32
    33c8:	93 a9       	ldd	r25, Z+51	; 0x33
    33ca:	d3 96       	adiw	r26, 0x33	; 51
    33cc:	9c 93       	st	X, r25
    33ce:	8e 93       	st	-X, r24
    33d0:	d2 97       	sbiw	r26, 0x32	; 50
    33d2:	84 a9       	ldd	r24, Z+52	; 0x34
    33d4:	95 a9       	ldd	r25, Z+53	; 0x35
    33d6:	d5 96       	adiw	r26, 0x35	; 53
    33d8:	9c 93       	st	X, r25
    33da:	8e 93       	st	-X, r24
    33dc:	d4 97       	sbiw	r26, 0x34	; 52
    33de:	86 a9       	ldd	r24, Z+54	; 0x36
    33e0:	97 a9       	ldd	r25, Z+55	; 0x37
    33e2:	d7 96       	adiw	r26, 0x37	; 55
    33e4:	9c 93       	st	X, r25
    33e6:	8e 93       	st	-X, r24
    33e8:	d6 97       	sbiw	r26, 0x36	; 54
    33ea:	80 ad       	ldd	r24, Z+56	; 0x38
    33ec:	91 ad       	ldd	r25, Z+57	; 0x39
    33ee:	d9 96       	adiw	r26, 0x39	; 57
    33f0:	9c 93       	st	X, r25
    33f2:	8e 93       	st	-X, r24
    33f4:	d8 97       	sbiw	r26, 0x38	; 56
    33f6:	82 ad       	ldd	r24, Z+58	; 0x3a
    33f8:	93 ad       	ldd	r25, Z+59	; 0x3b
    33fa:	db 96       	adiw	r26, 0x3b	; 59
    33fc:	9c 93       	st	X, r25
    33fe:	8e 93       	st	-X, r24
    3400:	da 97       	sbiw	r26, 0x3a	; 58
    3402:	84 ad       	ldd	r24, Z+60	; 0x3c
    3404:	95 ad       	ldd	r25, Z+61	; 0x3d
    3406:	dd 96       	adiw	r26, 0x3d	; 61
    3408:	9c 93       	st	X, r25
    340a:	8e 93       	st	-X, r24
    340c:	dc 97       	sbiw	r26, 0x3c	; 60
    340e:	f6 01       	movw	r30, r12
    3410:	f5 82       	std	Z+5, r15	; 0x05
    3412:	e4 82       	std	Z+4, r14	; 0x04
    3414:	82 81       	ldd	r24, Z+2	; 0x02
    3416:	93 81       	ldd	r25, Z+3	; 0x03
    3418:	01 96       	adiw	r24, 0x01	; 1
    341a:	93 83       	std	Z+3, r25	; 0x03
    341c:	82 83       	std	Z+2, r24	; 0x02
    341e:	14 86       	std	Z+12, r1	; 0x0c
    3420:	11 e0       	ldi	r17, 0x01	; 1
    3422:	81 2f       	mov	r24, r17
    3424:	ee 96       	adiw	r28, 0x3e	; 62
    3426:	0f b6       	in	r0, 0x3f	; 63
    3428:	f8 94       	cli
    342a:	de bf       	out	0x3e, r29	; 62
    342c:	0f be       	out	0x3f, r0	; 63
    342e:	cd bf       	out	0x3d, r28	; 61
    3430:	df 91       	pop	r29
    3432:	cf 91       	pop	r28
    3434:	1f 91       	pop	r17
    3436:	0f 91       	pop	r16
    3438:	ff 90       	pop	r15
    343a:	ef 90       	pop	r14
    343c:	df 90       	pop	r13
    343e:	cf 90       	pop	r12
    3440:	08 95       	ret

00003442 <_ZN9EZUI_PageC1E6String>:
    3442:	ef 92       	push	r14
    3444:	ff 92       	push	r15
    3446:	0f 93       	push	r16
    3448:	1f 93       	push	r17
    344a:	cf 93       	push	r28
    344c:	df 93       	push	r29
    344e:	ec 01       	movw	r28, r24
    3450:	7b 01       	movw	r14, r22
    3452:	88 ee       	ldi	r24, 0xE8	; 232
    3454:	93 e0       	ldi	r25, 0x03	; 3
    3456:	fe 01       	movw	r30, r28
    3458:	81 93       	st	Z+, r24
    345a:	91 93       	st	Z+, r25
    345c:	8f 01       	movw	r16, r30
    345e:	60 ee       	ldi	r22, 0xE0	; 224
    3460:	75 e0       	ldi	r23, 0x05	; 5
    3462:	cf 01       	movw	r24, r30
    3464:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    3468:	80 e7       	ldi	r24, 0x70	; 112
    346a:	94 e0       	ldi	r25, 0x04	; 4
    346c:	99 87       	std	Y+9, r25	; 0x09
    346e:	88 87       	std	Y+8, r24	; 0x08
    3470:	1d 86       	std	Y+13, r1	; 0x0d
    3472:	1c 86       	std	Y+12, r1	; 0x0c
    3474:	1f 86       	std	Y+15, r1	; 0x0f
    3476:	1e 86       	std	Y+14, r1	; 0x0e
    3478:	1b 86       	std	Y+11, r1	; 0x0b
    347a:	1a 86       	std	Y+10, r1	; 0x0a
    347c:	19 8a       	std	Y+17, r1	; 0x11
    347e:	18 8a       	std	Y+16, r1	; 0x10
    3480:	1b 8a       	std	Y+19, r1	; 0x13
    3482:	1a 8a       	std	Y+18, r1	; 0x12
    3484:	1c 8a       	std	Y+20, r1	; 0x14
    3486:	88 e8       	ldi	r24, 0x88	; 136
    3488:	94 e0       	ldi	r25, 0x04	; 4
    348a:	9e 8b       	std	Y+22, r25	; 0x16
    348c:	8d 8b       	std	Y+21, r24	; 0x15
    348e:	1a 8e       	std	Y+26, r1	; 0x1a
    3490:	19 8e       	std	Y+25, r1	; 0x19
    3492:	1c 8e       	std	Y+28, r1	; 0x1c
    3494:	1b 8e       	std	Y+27, r1	; 0x1b
    3496:	18 8e       	std	Y+24, r1	; 0x18
    3498:	1f 8a       	std	Y+23, r1	; 0x17
    349a:	1e 8e       	std	Y+30, r1	; 0x1e
    349c:	1d 8e       	std	Y+29, r1	; 0x1d
    349e:	18 a2       	std	Y+32, r1	; 0x20
    34a0:	1f 8e       	std	Y+31, r1	; 0x1f
    34a2:	19 a2       	std	Y+33, r1	; 0x21
    34a4:	1b a2       	std	Y+35, r1	; 0x23
    34a6:	1a a2       	std	Y+34, r1	; 0x22
    34a8:	1d a2       	std	Y+37, r1	; 0x25
    34aa:	1c a2       	std	Y+36, r1	; 0x24
    34ac:	1e a2       	std	Y+38, r1	; 0x26
    34ae:	1f a2       	std	Y+39, r1	; 0x27
    34b0:	18 a6       	std	Y+40, r1	; 0x28
    34b2:	19 a6       	std	Y+41, r1	; 0x29
    34b4:	8f ef       	ldi	r24, 0xFF	; 255
    34b6:	9f ef       	ldi	r25, 0xFF	; 255
    34b8:	9b a7       	std	Y+43, r25	; 0x2b
    34ba:	8a a7       	std	Y+42, r24	; 0x2a
    34bc:	81 e0       	ldi	r24, 0x01	; 1
    34be:	90 e0       	ldi	r25, 0x00	; 0
    34c0:	9d a7       	std	Y+45, r25	; 0x2d
    34c2:	8c a7       	std	Y+44, r24	; 0x2c
    34c4:	b7 01       	movw	r22, r14
    34c6:	c8 01       	movw	r24, r16
    34c8:	0e 94 83 41 	call	0x8306	; 0x8306 <_ZN6StringaSERKS_>
    34cc:	df 91       	pop	r29
    34ce:	cf 91       	pop	r28
    34d0:	1f 91       	pop	r17
    34d2:	0f 91       	pop	r16
    34d4:	ff 90       	pop	r15
    34d6:	ef 90       	pop	r14
    34d8:	08 95       	ret

000034da <_ZN9EZUI_Page7addItemEP13EZUI_PageItem>:
    34da:	ef 92       	push	r14
    34dc:	ff 92       	push	r15
    34de:	0f 93       	push	r16
    34e0:	1f 93       	push	r17
    34e2:	cf 93       	push	r28
    34e4:	df 93       	push	r29
    34e6:	cd b7       	in	r28, 0x3d	; 61
    34e8:	de b7       	in	r29, 0x3e	; 62
    34ea:	ee 97       	sbiw	r28, 0x3e	; 62
    34ec:	0f b6       	in	r0, 0x3f	; 63
    34ee:	f8 94       	cli
    34f0:	de bf       	out	0x3e, r29	; 62
    34f2:	0f be       	out	0x3f, r0	; 63
    34f4:	cd bf       	out	0x3d, r28	; 61
    34f6:	7c 01       	movw	r14, r24
    34f8:	8b 01       	movw	r16, r22
    34fa:	fb 01       	movw	r30, r22
    34fc:	80 81       	ld	r24, Z
    34fe:	89 83       	std	Y+1, r24	; 0x01
    3500:	81 81       	ldd	r24, Z+1	; 0x01
    3502:	8a 83       	std	Y+2, r24	; 0x02
    3504:	82 81       	ldd	r24, Z+2	; 0x02
    3506:	8b 83       	std	Y+3, r24	; 0x03
    3508:	6d 5f       	subi	r22, 0xFD	; 253
    350a:	7f 4f       	sbci	r23, 0xFF	; 255
    350c:	ce 01       	movw	r24, r28
    350e:	04 96       	adiw	r24, 0x04	; 4
    3510:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
    3514:	f8 01       	movw	r30, r16
    3516:	81 85       	ldd	r24, Z+9	; 0x09
    3518:	92 85       	ldd	r25, Z+10	; 0x0a
    351a:	a3 85       	ldd	r26, Z+11	; 0x0b
    351c:	b4 85       	ldd	r27, Z+12	; 0x0c
    351e:	8a 87       	std	Y+10, r24	; 0x0a
    3520:	9b 87       	std	Y+11, r25	; 0x0b
    3522:	ac 87       	std	Y+12, r26	; 0x0c
    3524:	bd 87       	std	Y+13, r27	; 0x0d
    3526:	85 85       	ldd	r24, Z+13	; 0x0d
    3528:	96 85       	ldd	r25, Z+14	; 0x0e
    352a:	a7 85       	ldd	r26, Z+15	; 0x0f
    352c:	b0 89       	ldd	r27, Z+16	; 0x10
    352e:	8e 87       	std	Y+14, r24	; 0x0e
    3530:	9f 87       	std	Y+15, r25	; 0x0f
    3532:	a8 8b       	std	Y+16, r26	; 0x10
    3534:	b9 8b       	std	Y+17, r27	; 0x11
    3536:	81 89       	ldd	r24, Z+17	; 0x11
    3538:	8a 8b       	std	Y+18, r24	; 0x12
    353a:	82 89       	ldd	r24, Z+18	; 0x12
    353c:	93 89       	ldd	r25, Z+19	; 0x13
    353e:	9c 8b       	std	Y+20, r25	; 0x14
    3540:	8b 8b       	std	Y+19, r24	; 0x13
    3542:	84 89       	ldd	r24, Z+20	; 0x14
    3544:	95 89       	ldd	r25, Z+21	; 0x15
    3546:	9e 8b       	std	Y+22, r25	; 0x16
    3548:	8d 8b       	std	Y+21, r24	; 0x15
    354a:	86 89       	ldd	r24, Z+22	; 0x16
    354c:	97 89       	ldd	r25, Z+23	; 0x17
    354e:	98 8f       	std	Y+24, r25	; 0x18
    3550:	8f 8b       	std	Y+23, r24	; 0x17
    3552:	80 8d       	ldd	r24, Z+24	; 0x18
    3554:	91 8d       	ldd	r25, Z+25	; 0x19
    3556:	9a 8f       	std	Y+26, r25	; 0x1a
    3558:	89 8f       	std	Y+25, r24	; 0x19
    355a:	82 8d       	ldd	r24, Z+26	; 0x1a
    355c:	93 8d       	ldd	r25, Z+27	; 0x1b
    355e:	9c 8f       	std	Y+28, r25	; 0x1c
    3560:	8b 8f       	std	Y+27, r24	; 0x1b
    3562:	b8 01       	movw	r22, r16
    3564:	64 5e       	subi	r22, 0xE4	; 228
    3566:	7f 4f       	sbci	r23, 0xFF	; 255
    3568:	ce 01       	movw	r24, r28
    356a:	4d 96       	adiw	r24, 0x1d	; 29
    356c:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
    3570:	b8 01       	movw	r22, r16
    3572:	6e 5d       	subi	r22, 0xDE	; 222
    3574:	7f 4f       	sbci	r23, 0xFF	; 255
    3576:	ce 01       	movw	r24, r28
    3578:	83 96       	adiw	r24, 0x23	; 35
    357a:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
    357e:	f8 01       	movw	r30, r16
    3580:	80 a5       	ldd	r24, Z+40	; 0x28
    3582:	91 a5       	ldd	r25, Z+41	; 0x29
    3584:	9a a7       	std	Y+42, r25	; 0x2a
    3586:	89 a7       	std	Y+41, r24	; 0x29
    3588:	82 a5       	ldd	r24, Z+42	; 0x2a
    358a:	93 a5       	ldd	r25, Z+43	; 0x2b
    358c:	9c a7       	std	Y+44, r25	; 0x2c
    358e:	8b a7       	std	Y+43, r24	; 0x2b
    3590:	84 a5       	ldd	r24, Z+44	; 0x2c
    3592:	95 a5       	ldd	r25, Z+45	; 0x2d
    3594:	9e a7       	std	Y+46, r25	; 0x2e
    3596:	8d a7       	std	Y+45, r24	; 0x2d
    3598:	86 a5       	ldd	r24, Z+46	; 0x2e
    359a:	97 a5       	ldd	r25, Z+47	; 0x2f
    359c:	98 ab       	std	Y+48, r25	; 0x30
    359e:	8f a7       	std	Y+47, r24	; 0x2f
    35a0:	80 a9       	ldd	r24, Z+48	; 0x30
    35a2:	91 a9       	ldd	r25, Z+49	; 0x31
    35a4:	9a ab       	std	Y+50, r25	; 0x32
    35a6:	89 ab       	std	Y+49, r24	; 0x31
    35a8:	82 a9       	ldd	r24, Z+50	; 0x32
    35aa:	93 a9       	ldd	r25, Z+51	; 0x33
    35ac:	9c ab       	std	Y+52, r25	; 0x34
    35ae:	8b ab       	std	Y+51, r24	; 0x33
    35b0:	84 a9       	ldd	r24, Z+52	; 0x34
    35b2:	95 a9       	ldd	r25, Z+53	; 0x35
    35b4:	9e ab       	std	Y+54, r25	; 0x36
    35b6:	8d ab       	std	Y+53, r24	; 0x35
    35b8:	86 a9       	ldd	r24, Z+54	; 0x36
    35ba:	97 a9       	ldd	r25, Z+55	; 0x37
    35bc:	98 af       	std	Y+56, r25	; 0x38
    35be:	8f ab       	std	Y+55, r24	; 0x37
    35c0:	80 ad       	ldd	r24, Z+56	; 0x38
    35c2:	91 ad       	ldd	r25, Z+57	; 0x39
    35c4:	9a af       	std	Y+58, r25	; 0x3a
    35c6:	89 af       	std	Y+57, r24	; 0x39
    35c8:	82 ad       	ldd	r24, Z+58	; 0x3a
    35ca:	93 ad       	ldd	r25, Z+59	; 0x3b
    35cc:	9c af       	std	Y+60, r25	; 0x3c
    35ce:	8b af       	std	Y+59, r24	; 0x3b
    35d0:	84 ad       	ldd	r24, Z+60	; 0x3c
    35d2:	95 ad       	ldd	r25, Z+61	; 0x3d
    35d4:	9e af       	std	Y+62, r25	; 0x3e
    35d6:	8d af       	std	Y+61, r24	; 0x3d
    35d8:	be 01       	movw	r22, r28
    35da:	6f 5f       	subi	r22, 0xFF	; 255
    35dc:	7f 4f       	sbci	r23, 0xFF	; 255
    35de:	c7 01       	movw	r24, r14
    35e0:	08 96       	adiw	r24, 0x08	; 8
    35e2:	7d db       	rcall	.-2310   	; 0x2cde <_ZN10LinkedListI13EZUI_PageItemE3addES0_>
    35e4:	ce 01       	movw	r24, r28
    35e6:	01 96       	adiw	r24, 0x01	; 1
    35e8:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <_ZN13EZUI_PageItemD1Ev>
    35ec:	f8 01       	movw	r30, r16
    35ee:	92 81       	ldd	r25, Z+2	; 0x02
    35f0:	92 51       	subi	r25, 0x12	; 18
    35f2:	92 30       	cpi	r25, 0x02	; 2
    35f4:	88 f4       	brcc	.+34     	; 0x3618 <_ZN9EZUI_Page7addItemEP13EZUI_PageItem+0x13e>
    35f6:	61 e0       	ldi	r22, 0x01	; 1
    35f8:	70 e0       	ldi	r23, 0x00	; 0
    35fa:	c7 01       	movw	r24, r14
    35fc:	45 96       	adiw	r24, 0x15	; 21
    35fe:	45 db       	rcall	.-2422   	; 0x2c8a <_ZN10LinkedListIiE3addEi>
    3600:	f7 01       	movw	r30, r14
    3602:	82 a5       	ldd	r24, Z+42	; 0x2a
    3604:	93 a5       	ldd	r25, Z+43	; 0x2b
    3606:	01 96       	adiw	r24, 0x01	; 1
    3608:	61 f4       	brne	.+24     	; 0x3622 <_ZN9EZUI_Page7addItemEP13EZUI_PageItem+0x148>
    360a:	f7 01       	movw	r30, r14
    360c:	87 89       	ldd	r24, Z+23	; 0x17
    360e:	90 8d       	ldd	r25, Z+24	; 0x18
    3610:	01 97       	sbiw	r24, 0x01	; 1
    3612:	93 a7       	std	Z+43, r25	; 0x2b
    3614:	82 a7       	std	Z+42, r24	; 0x2a
    3616:	05 c0       	rjmp	.+10     	; 0x3622 <_ZN9EZUI_Page7addItemEP13EZUI_PageItem+0x148>
    3618:	60 e0       	ldi	r22, 0x00	; 0
    361a:	70 e0       	ldi	r23, 0x00	; 0
    361c:	c7 01       	movw	r24, r14
    361e:	45 96       	adiw	r24, 0x15	; 21
    3620:	34 db       	rcall	.-2456   	; 0x2c8a <_ZN10LinkedListIiE3addEi>
    3622:	ee 96       	adiw	r28, 0x3e	; 62
    3624:	0f b6       	in	r0, 0x3f	; 63
    3626:	f8 94       	cli
    3628:	de bf       	out	0x3e, r29	; 62
    362a:	0f be       	out	0x3f, r0	; 63
    362c:	cd bf       	out	0x3d, r28	; 61
    362e:	df 91       	pop	r29
    3630:	cf 91       	pop	r28
    3632:	1f 91       	pop	r17
    3634:	0f 91       	pop	r16
    3636:	ff 90       	pop	r15
    3638:	ef 90       	pop	r14
    363a:	08 95       	ret

0000363c <_ZN10LinkedListI13EZUI_PageItemE7getNodeEi>:
    363c:	dc 01       	movw	r26, r24
    363e:	14 96       	adiw	r26, 0x04	; 4
    3640:	ed 91       	ld	r30, X+
    3642:	fc 91       	ld	r31, X
    3644:	15 97       	sbiw	r26, 0x05	; 5
    3646:	1c 96       	adiw	r26, 0x0c	; 12
    3648:	8c 91       	ld	r24, X
    364a:	1c 97       	sbiw	r26, 0x0c	; 12
    364c:	88 23       	and	r24, r24
    364e:	61 f0       	breq	.+24     	; 0x3668 <_ZN10LinkedListI13EZUI_PageItemE7getNodeEi+0x2c>
    3650:	1a 96       	adiw	r26, 0x0a	; 10
    3652:	2d 91       	ld	r18, X+
    3654:	3c 91       	ld	r19, X
    3656:	1b 97       	sbiw	r26, 0x0b	; 11
    3658:	62 17       	cp	r22, r18
    365a:	73 07       	cpc	r23, r19
    365c:	44 f0       	brlt	.+16     	; 0x366e <_ZN10LinkedListI13EZUI_PageItemE7getNodeEi+0x32>
    365e:	18 96       	adiw	r26, 0x08	; 8
    3660:	ed 91       	ld	r30, X+
    3662:	fc 91       	ld	r31, X
    3664:	19 97       	sbiw	r26, 0x09	; 9
    3666:	05 c0       	rjmp	.+10     	; 0x3672 <_ZN10LinkedListI13EZUI_PageItemE7getNodeEi+0x36>
    3668:	20 e0       	ldi	r18, 0x00	; 0
    366a:	30 e0       	ldi	r19, 0x00	; 0
    366c:	02 c0       	rjmp	.+4      	; 0x3672 <_ZN10LinkedListI13EZUI_PageItemE7getNodeEi+0x36>
    366e:	20 e0       	ldi	r18, 0x00	; 0
    3670:	30 e0       	ldi	r19, 0x00	; 0
    3672:	26 17       	cp	r18, r22
    3674:	37 07       	cpc	r19, r23
    3676:	64 f4       	brge	.+24     	; 0x3690 <_ZN10LinkedListI13EZUI_PageItemE7getNodeEi+0x54>
    3678:	30 97       	sbiw	r30, 0x00	; 0
    367a:	51 f0       	breq	.+20     	; 0x3690 <_ZN10LinkedListI13EZUI_PageItemE7getNodeEi+0x54>
    367c:	06 ac       	ldd	r0, Z+62	; 0x3e
    367e:	f7 ad       	ldd	r31, Z+63	; 0x3f
    3680:	e0 2d       	mov	r30, r0
    3682:	2f 5f       	subi	r18, 0xFF	; 255
    3684:	3f 4f       	sbci	r19, 0xFF	; 255
    3686:	26 17       	cp	r18, r22
    3688:	37 07       	cpc	r19, r23
    368a:	14 f4       	brge	.+4      	; 0x3690 <_ZN10LinkedListI13EZUI_PageItemE7getNodeEi+0x54>
    368c:	30 97       	sbiw	r30, 0x00	; 0
    368e:	b1 f7       	brne	.-20     	; 0x367c <_ZN10LinkedListI13EZUI_PageItemE7getNodeEi+0x40>
    3690:	26 17       	cp	r18, r22
    3692:	37 07       	cpc	r19, r23
    3694:	79 f4       	brne	.+30     	; 0x36b4 <_ZN10LinkedListI13EZUI_PageItemE7getNodeEi+0x78>
    3696:	81 e0       	ldi	r24, 0x01	; 1
    3698:	1c 96       	adiw	r26, 0x0c	; 12
    369a:	8c 93       	st	X, r24
    369c:	1c 97       	sbiw	r26, 0x0c	; 12
    369e:	1b 96       	adiw	r26, 0x0b	; 11
    36a0:	3c 93       	st	X, r19
    36a2:	2e 93       	st	-X, r18
    36a4:	1a 97       	sbiw	r26, 0x0a	; 10
    36a6:	19 96       	adiw	r26, 0x09	; 9
    36a8:	fc 93       	st	X, r31
    36aa:	ee 93       	st	-X, r30
    36ac:	18 97       	sbiw	r26, 0x08	; 8
    36ae:	8e 2f       	mov	r24, r30
    36b0:	9f 2f       	mov	r25, r31
    36b2:	08 95       	ret
    36b4:	80 e0       	ldi	r24, 0x00	; 0
    36b6:	90 e0       	ldi	r25, 0x00	; 0
    36b8:	08 95       	ret

000036ba <_ZN10LinkedListI13EZUI_PageItemE3getEi>:
    36ba:	0f 93       	push	r16
    36bc:	1f 93       	push	r17
    36be:	cf 93       	push	r28
    36c0:	df 93       	push	r29
    36c2:	ec 01       	movw	r28, r24
    36c4:	cb 01       	movw	r24, r22
    36c6:	ba 01       	movw	r22, r20
    36c8:	b9 df       	rcall	.-142    	; 0x363c <_ZN10LinkedListI13EZUI_PageItemE7getNodeEi>
    36ca:	8c 01       	movw	r16, r24
    36cc:	00 97       	sbiw	r24, 0x00	; 0
    36ce:	09 f4       	brne	.+2      	; 0x36d2 <_ZN10LinkedListI13EZUI_PageItemE3getEi+0x18>
    36d0:	71 c0       	rjmp	.+226    	; 0x37b4 <_ZN10LinkedListI13EZUI_PageItemE3getEi+0xfa>
    36d2:	fc 01       	movw	r30, r24
    36d4:	80 81       	ld	r24, Z
    36d6:	88 83       	st	Y, r24
    36d8:	81 81       	ldd	r24, Z+1	; 0x01
    36da:	89 83       	std	Y+1, r24	; 0x01
    36dc:	82 81       	ldd	r24, Z+2	; 0x02
    36de:	8a 83       	std	Y+2, r24	; 0x02
    36e0:	b8 01       	movw	r22, r16
    36e2:	6d 5f       	subi	r22, 0xFD	; 253
    36e4:	7f 4f       	sbci	r23, 0xFF	; 255
    36e6:	ce 01       	movw	r24, r28
    36e8:	03 96       	adiw	r24, 0x03	; 3
    36ea:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
    36ee:	f8 01       	movw	r30, r16
    36f0:	81 85       	ldd	r24, Z+9	; 0x09
    36f2:	92 85       	ldd	r25, Z+10	; 0x0a
    36f4:	a3 85       	ldd	r26, Z+11	; 0x0b
    36f6:	b4 85       	ldd	r27, Z+12	; 0x0c
    36f8:	89 87       	std	Y+9, r24	; 0x09
    36fa:	9a 87       	std	Y+10, r25	; 0x0a
    36fc:	ab 87       	std	Y+11, r26	; 0x0b
    36fe:	bc 87       	std	Y+12, r27	; 0x0c
    3700:	85 85       	ldd	r24, Z+13	; 0x0d
    3702:	96 85       	ldd	r25, Z+14	; 0x0e
    3704:	a7 85       	ldd	r26, Z+15	; 0x0f
    3706:	b0 89       	ldd	r27, Z+16	; 0x10
    3708:	8d 87       	std	Y+13, r24	; 0x0d
    370a:	9e 87       	std	Y+14, r25	; 0x0e
    370c:	af 87       	std	Y+15, r26	; 0x0f
    370e:	b8 8b       	std	Y+16, r27	; 0x10
    3710:	81 89       	ldd	r24, Z+17	; 0x11
    3712:	89 8b       	std	Y+17, r24	; 0x11
    3714:	82 89       	ldd	r24, Z+18	; 0x12
    3716:	93 89       	ldd	r25, Z+19	; 0x13
    3718:	9b 8b       	std	Y+19, r25	; 0x13
    371a:	8a 8b       	std	Y+18, r24	; 0x12
    371c:	84 89       	ldd	r24, Z+20	; 0x14
    371e:	95 89       	ldd	r25, Z+21	; 0x15
    3720:	9d 8b       	std	Y+21, r25	; 0x15
    3722:	8c 8b       	std	Y+20, r24	; 0x14
    3724:	86 89       	ldd	r24, Z+22	; 0x16
    3726:	97 89       	ldd	r25, Z+23	; 0x17
    3728:	9f 8b       	std	Y+23, r25	; 0x17
    372a:	8e 8b       	std	Y+22, r24	; 0x16
    372c:	80 8d       	ldd	r24, Z+24	; 0x18
    372e:	91 8d       	ldd	r25, Z+25	; 0x19
    3730:	99 8f       	std	Y+25, r25	; 0x19
    3732:	88 8f       	std	Y+24, r24	; 0x18
    3734:	82 8d       	ldd	r24, Z+26	; 0x1a
    3736:	93 8d       	ldd	r25, Z+27	; 0x1b
    3738:	9b 8f       	std	Y+27, r25	; 0x1b
    373a:	8a 8f       	std	Y+26, r24	; 0x1a
    373c:	b8 01       	movw	r22, r16
    373e:	64 5e       	subi	r22, 0xE4	; 228
    3740:	7f 4f       	sbci	r23, 0xFF	; 255
    3742:	ce 01       	movw	r24, r28
    3744:	4c 96       	adiw	r24, 0x1c	; 28
    3746:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
    374a:	b8 01       	movw	r22, r16
    374c:	6e 5d       	subi	r22, 0xDE	; 222
    374e:	7f 4f       	sbci	r23, 0xFF	; 255
    3750:	ce 01       	movw	r24, r28
    3752:	82 96       	adiw	r24, 0x22	; 34
    3754:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
    3758:	f8 01       	movw	r30, r16
    375a:	80 a5       	ldd	r24, Z+40	; 0x28
    375c:	91 a5       	ldd	r25, Z+41	; 0x29
    375e:	99 a7       	std	Y+41, r25	; 0x29
    3760:	88 a7       	std	Y+40, r24	; 0x28
    3762:	82 a5       	ldd	r24, Z+42	; 0x2a
    3764:	93 a5       	ldd	r25, Z+43	; 0x2b
    3766:	9b a7       	std	Y+43, r25	; 0x2b
    3768:	8a a7       	std	Y+42, r24	; 0x2a
    376a:	84 a5       	ldd	r24, Z+44	; 0x2c
    376c:	95 a5       	ldd	r25, Z+45	; 0x2d
    376e:	9d a7       	std	Y+45, r25	; 0x2d
    3770:	8c a7       	std	Y+44, r24	; 0x2c
    3772:	86 a5       	ldd	r24, Z+46	; 0x2e
    3774:	97 a5       	ldd	r25, Z+47	; 0x2f
    3776:	9f a7       	std	Y+47, r25	; 0x2f
    3778:	8e a7       	std	Y+46, r24	; 0x2e
    377a:	80 a9       	ldd	r24, Z+48	; 0x30
    377c:	91 a9       	ldd	r25, Z+49	; 0x31
    377e:	99 ab       	std	Y+49, r25	; 0x31
    3780:	88 ab       	std	Y+48, r24	; 0x30
    3782:	82 a9       	ldd	r24, Z+50	; 0x32
    3784:	93 a9       	ldd	r25, Z+51	; 0x33
    3786:	9b ab       	std	Y+51, r25	; 0x33
    3788:	8a ab       	std	Y+50, r24	; 0x32
    378a:	84 a9       	ldd	r24, Z+52	; 0x34
    378c:	95 a9       	ldd	r25, Z+53	; 0x35
    378e:	9d ab       	std	Y+53, r25	; 0x35
    3790:	8c ab       	std	Y+52, r24	; 0x34
    3792:	86 a9       	ldd	r24, Z+54	; 0x36
    3794:	97 a9       	ldd	r25, Z+55	; 0x37
    3796:	9f ab       	std	Y+55, r25	; 0x37
    3798:	8e ab       	std	Y+54, r24	; 0x36
    379a:	80 ad       	ldd	r24, Z+56	; 0x38
    379c:	91 ad       	ldd	r25, Z+57	; 0x39
    379e:	99 af       	std	Y+57, r25	; 0x39
    37a0:	88 af       	std	Y+56, r24	; 0x38
    37a2:	82 ad       	ldd	r24, Z+58	; 0x3a
    37a4:	93 ad       	ldd	r25, Z+59	; 0x3b
    37a6:	9b af       	std	Y+59, r25	; 0x3b
    37a8:	8a af       	std	Y+58, r24	; 0x3a
    37aa:	84 ad       	ldd	r24, Z+60	; 0x3c
    37ac:	95 ad       	ldd	r25, Z+61	; 0x3d
    37ae:	9d af       	std	Y+61, r25	; 0x3d
    37b0:	8c af       	std	Y+60, r24	; 0x3c
    37b2:	03 c0       	rjmp	.+6      	; 0x37ba <_ZN10LinkedListI13EZUI_PageItemE3getEi+0x100>
    37b4:	ce 01       	movw	r24, r28
    37b6:	0e 94 c5 24 	call	0x498a	; 0x498a <_ZN13EZUI_PageItemC1Ev>
    37ba:	ce 01       	movw	r24, r28
    37bc:	df 91       	pop	r29
    37be:	cf 91       	pop	r28
    37c0:	1f 91       	pop	r17
    37c2:	0f 91       	pop	r16
    37c4:	08 95       	ret

000037c6 <_ZN9EZUI_Page7displayEP4EZUI>:
    37c6:	5f 92       	push	r5
    37c8:	6f 92       	push	r6
    37ca:	7f 92       	push	r7
    37cc:	8f 92       	push	r8
    37ce:	9f 92       	push	r9
    37d0:	af 92       	push	r10
    37d2:	bf 92       	push	r11
    37d4:	cf 92       	push	r12
    37d6:	df 92       	push	r13
    37d8:	ef 92       	push	r14
    37da:	ff 92       	push	r15
    37dc:	0f 93       	push	r16
    37de:	1f 93       	push	r17
    37e0:	cf 93       	push	r28
    37e2:	df 93       	push	r29
    37e4:	cd b7       	in	r28, 0x3d	; 61
    37e6:	de b7       	in	r29, 0x3e	; 62
    37e8:	cc 57       	subi	r28, 0x7C	; 124
    37ea:	d1 09       	sbc	r29, r1
    37ec:	0f b6       	in	r0, 0x3f	; 63
    37ee:	f8 94       	cli
    37f0:	de bf       	out	0x3e, r29	; 62
    37f2:	0f be       	out	0x3f, r0	; 63
    37f4:	cd bf       	out	0x3d, r28	; 61
    37f6:	7c 01       	movw	r14, r24
    37f8:	8b 01       	movw	r16, r22
    37fa:	0e 94 fa 3e 	call	0x7df4	; 0x7df4 <millis>
    37fe:	f7 01       	movw	r30, r14
    3800:	86 a0       	ldd	r8, Z+38	; 0x26
    3802:	97 a0       	ldd	r9, Z+39	; 0x27
    3804:	a0 a4       	ldd	r10, Z+40	; 0x28
    3806:	b1 a4       	ldd	r11, Z+41	; 0x29
    3808:	ab 01       	movw	r20, r22
    380a:	bc 01       	movw	r22, r24
    380c:	48 19       	sub	r20, r8
    380e:	59 09       	sbc	r21, r9
    3810:	6a 09       	sbc	r22, r10
    3812:	7b 09       	sbc	r23, r11
    3814:	80 81       	ld	r24, Z
    3816:	91 81       	ldd	r25, Z+1	; 0x01
    3818:	09 2e       	mov	r0, r25
    381a:	00 0c       	add	r0, r0
    381c:	aa 0b       	sbc	r26, r26
    381e:	bb 0b       	sbc	r27, r27
    3820:	84 17       	cp	r24, r20
    3822:	95 07       	cpc	r25, r21
    3824:	a6 07       	cpc	r26, r22
    3826:	b7 07       	cpc	r27, r23
    3828:	08 f0       	brcs	.+2      	; 0x382c <_ZN9EZUI_Page7displayEP4EZUI+0x66>
    382a:	66 c0       	rjmp	.+204    	; 0x38f8 <_ZN9EZUI_Page7displayEP4EZUI+0x132>
    382c:	0e 94 fa 3e 	call	0x7df4	; 0x7df4 <millis>
    3830:	f7 01       	movw	r30, r14
    3832:	66 a3       	std	Z+38, r22	; 0x26
    3834:	77 a3       	std	Z+39, r23	; 0x27
    3836:	80 a7       	std	Z+40, r24	; 0x28
    3838:	91 a7       	std	Z+41, r25	; 0x29
    383a:	f8 01       	movw	r30, r16
    383c:	96 84       	ldd	r9, Z+14	; 0x0e
    383e:	87 84       	ldd	r8, Z+15	; 0x0f
    3840:	79 2c       	mov	r7, r9
    3842:	68 2c       	mov	r6, r8
    3844:	89 2d       	mov	r24, r9
    3846:	98 2d       	mov	r25, r8
    3848:	0e 94 3e 30 	call	0x607c	; 0x607c <_ZN3LCD5clearEv>
    384c:	67 01       	movw	r12, r14
    384e:	f8 e0       	ldi	r31, 0x08	; 8
    3850:	cf 0e       	add	r12, r31
    3852:	d1 1c       	adc	r13, r1
    3854:	f7 01       	movw	r30, r14
    3856:	82 85       	ldd	r24, Z+10	; 0x0a
    3858:	93 85       	ldd	r25, Z+11	; 0x0b
    385a:	18 16       	cp	r1, r24
    385c:	19 06       	cpc	r1, r25
    385e:	0c f0       	brlt	.+2      	; 0x3862 <_ZN9EZUI_Page7displayEP4EZUI+0x9c>
    3860:	4b c0       	rjmp	.+150    	; 0x38f8 <_ZN9EZUI_Page7displayEP4EZUI+0x132>
    3862:	00 e0       	ldi	r16, 0x00	; 0
    3864:	10 e0       	ldi	r17, 0x00	; 0
    3866:	a8 01       	movw	r20, r16
    3868:	b6 01       	movw	r22, r12
    386a:	ce 01       	movw	r24, r28
    386c:	01 96       	adiw	r24, 0x01	; 1
    386e:	25 df       	rcall	.-438    	; 0x36ba <_ZN10LinkedListI13EZUI_PageItemE3getEi>
    3870:	41 e0       	ldi	r20, 0x01	; 1
    3872:	69 2d       	mov	r22, r9
    3874:	78 2d       	mov	r23, r8
    3876:	ce 01       	movw	r24, r28
    3878:	01 96       	adiw	r24, 0x01	; 1
    387a:	0e 94 31 26 	call	0x4c62	; 0x4c62 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb>
    387e:	ce 01       	movw	r24, r28
    3880:	01 96       	adiw	r24, 0x01	; 1
    3882:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <_ZN13EZUI_PageItemD1Ev>
    3886:	61 e6       	ldi	r22, 0x61	; 97
    3888:	74 e0       	ldi	r23, 0x04	; 4
    388a:	82 e8       	ldi	r24, 0x82	; 130
    388c:	98 e0       	ldi	r25, 0x08	; 8
    388e:	0e 94 4d 3a 	call	0x749a	; 0x749a <_ZN5Print5printEPKc>
    3892:	f7 01       	movw	r30, r14
    3894:	27 89       	ldd	r18, Z+23	; 0x17
    3896:	30 8d       	ldd	r19, Z+24	; 0x18
    3898:	12 16       	cp	r1, r18
    389a:	13 06       	cpc	r1, r19
    389c:	24 f5       	brge	.+72     	; 0x38e6 <_ZN9EZUI_Page7displayEP4EZUI+0x120>
    389e:	a2 a4       	ldd	r10, Z+42	; 0x2a
    38a0:	b3 a4       	ldd	r11, Z+43	; 0x2b
    38a2:	a0 16       	cp	r10, r16
    38a4:	b1 06       	cpc	r11, r17
    38a6:	f9 f4       	brne	.+62     	; 0x38e6 <_ZN9EZUI_Page7displayEP4EZUI+0x120>
    38a8:	a5 01       	movw	r20, r10
    38aa:	b6 01       	movw	r22, r12
    38ac:	ce 01       	movw	r24, r28
    38ae:	01 96       	adiw	r24, 0x01	; 1
    38b0:	04 df       	rcall	.-504    	; 0x36ba <_ZN10LinkedListI13EZUI_PageItemE3getEi>
    38b2:	5a 80       	ldd	r5, Y+2	; 0x02
    38b4:	a5 01       	movw	r20, r10
    38b6:	b6 01       	movw	r22, r12
    38b8:	ce 01       	movw	r24, r28
    38ba:	cf 96       	adiw	r24, 0x3f	; 63
    38bc:	fe de       	rcall	.-516    	; 0x36ba <_ZN10LinkedListI13EZUI_PageItemE3getEi>
    38be:	45 2d       	mov	r20, r5
    38c0:	6f ad       	ldd	r22, Y+63	; 0x3f
    38c2:	87 2d       	mov	r24, r7
    38c4:	96 2d       	mov	r25, r6
    38c6:	0e 94 45 30 	call	0x608a	; 0x608a <_ZN3LCD9setCursorEhh>
    38ca:	ce 01       	movw	r24, r28
    38cc:	cf 96       	adiw	r24, 0x3f	; 63
    38ce:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <_ZN13EZUI_PageItemD1Ev>
    38d2:	ce 01       	movw	r24, r28
    38d4:	01 96       	adiw	r24, 0x01	; 1
    38d6:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <_ZN13EZUI_PageItemD1Ev>
    38da:	64 e0       	ldi	r22, 0x04	; 4
    38dc:	74 e0       	ldi	r23, 0x04	; 4
    38de:	87 2d       	mov	r24, r7
    38e0:	96 2d       	mov	r25, r6
    38e2:	0e 94 4d 3a 	call	0x749a	; 0x749a <_ZN5Print5printEPKc>
    38e6:	0f 5f       	subi	r16, 0xFF	; 255
    38e8:	1f 4f       	sbci	r17, 0xFF	; 255
    38ea:	f7 01       	movw	r30, r14
    38ec:	22 85       	ldd	r18, Z+10	; 0x0a
    38ee:	33 85       	ldd	r19, Z+11	; 0x0b
    38f0:	02 17       	cp	r16, r18
    38f2:	13 07       	cpc	r17, r19
    38f4:	0c f4       	brge	.+2      	; 0x38f8 <_ZN9EZUI_Page7displayEP4EZUI+0x132>
    38f6:	b7 cf       	rjmp	.-146    	; 0x3866 <_ZN9EZUI_Page7displayEP4EZUI+0xa0>
    38f8:	c4 58       	subi	r28, 0x84	; 132
    38fa:	df 4f       	sbci	r29, 0xFF	; 255
    38fc:	0f b6       	in	r0, 0x3f	; 63
    38fe:	f8 94       	cli
    3900:	de bf       	out	0x3e, r29	; 62
    3902:	0f be       	out	0x3f, r0	; 63
    3904:	cd bf       	out	0x3d, r28	; 61
    3906:	df 91       	pop	r29
    3908:	cf 91       	pop	r28
    390a:	1f 91       	pop	r17
    390c:	0f 91       	pop	r16
    390e:	ff 90       	pop	r15
    3910:	ef 90       	pop	r14
    3912:	df 90       	pop	r13
    3914:	cf 90       	pop	r12
    3916:	bf 90       	pop	r11
    3918:	af 90       	pop	r10
    391a:	9f 90       	pop	r9
    391c:	8f 90       	pop	r8
    391e:	7f 90       	pop	r7
    3920:	6f 90       	pop	r6
    3922:	5f 90       	pop	r5
    3924:	08 95       	ret

00003926 <_ZN9EZUI_Page10selectItemEP4EZUI>:
    3926:	ef 92       	push	r14
    3928:	ff 92       	push	r15
    392a:	0f 93       	push	r16
    392c:	1f 93       	push	r17
    392e:	cf 93       	push	r28
    3930:	df 93       	push	r29
    3932:	cd b7       	in	r28, 0x3d	; 61
    3934:	de b7       	in	r29, 0x3e	; 62
    3936:	ee 97       	sbiw	r28, 0x3e	; 62
    3938:	0f b6       	in	r0, 0x3f	; 63
    393a:	f8 94       	cli
    393c:	de bf       	out	0x3e, r29	; 62
    393e:	0f be       	out	0x3f, r0	; 63
    3940:	cd bf       	out	0x3d, r28	; 61
    3942:	8c 01       	movw	r16, r24
    3944:	7b 01       	movw	r14, r22
    3946:	fc 01       	movw	r30, r24
    3948:	42 a5       	ldd	r20, Z+42	; 0x2a
    394a:	53 a5       	ldd	r21, Z+43	; 0x2b
    394c:	bc 01       	movw	r22, r24
    394e:	68 5f       	subi	r22, 0xF8	; 248
    3950:	7f 4f       	sbci	r23, 0xFF	; 255
    3952:	ce 01       	movw	r24, r28
    3954:	01 96       	adiw	r24, 0x01	; 1
    3956:	b1 de       	rcall	.-670    	; 0x36ba <_ZN10LinkedListI13EZUI_PageItemE3getEi>
    3958:	b7 01       	movw	r22, r14
    395a:	ce 01       	movw	r24, r28
    395c:	01 96       	adiw	r24, 0x01	; 1
    395e:	0e 94 1d 28 	call	0x503a	; 0x503a <_ZN13EZUI_PageItem10ItemSelectEP4EZUI>
    3962:	ce 01       	movw	r24, r28
    3964:	01 96       	adiw	r24, 0x01	; 1
    3966:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <_ZN13EZUI_PageItemD1Ev>
    396a:	81 e0       	ldi	r24, 0x01	; 1
    396c:	90 e0       	ldi	r25, 0x00	; 0
    396e:	f8 01       	movw	r30, r16
    3970:	95 a7       	std	Z+45, r25	; 0x2d
    3972:	84 a7       	std	Z+44, r24	; 0x2c
    3974:	ee 96       	adiw	r28, 0x3e	; 62
    3976:	0f b6       	in	r0, 0x3f	; 63
    3978:	f8 94       	cli
    397a:	de bf       	out	0x3e, r29	; 62
    397c:	0f be       	out	0x3f, r0	; 63
    397e:	cd bf       	out	0x3d, r28	; 61
    3980:	df 91       	pop	r29
    3982:	cf 91       	pop	r28
    3984:	1f 91       	pop	r17
    3986:	0f 91       	pop	r16
    3988:	ff 90       	pop	r15
    398a:	ef 90       	pop	r14
    398c:	08 95       	ret

0000398e <_ZN10LinkedListI13EZUI_PageItemE3popEv>:
    398e:	af 92       	push	r10
    3990:	bf 92       	push	r11
    3992:	cf 92       	push	r12
    3994:	df 92       	push	r13
    3996:	ef 92       	push	r14
    3998:	ff 92       	push	r15
    399a:	0f 93       	push	r16
    399c:	1f 93       	push	r17
    399e:	cf 93       	push	r28
    39a0:	df 93       	push	r29
    39a2:	cd b7       	in	r28, 0x3d	; 61
    39a4:	de b7       	in	r29, 0x3e	; 62
    39a6:	ee 97       	sbiw	r28, 0x3e	; 62
    39a8:	0f b6       	in	r0, 0x3f	; 63
    39aa:	f8 94       	cli
    39ac:	de bf       	out	0x3e, r29	; 62
    39ae:	0f be       	out	0x3f, r0	; 63
    39b0:	cd bf       	out	0x3d, r28	; 61
    39b2:	8c 01       	movw	r16, r24
    39b4:	6b 01       	movw	r12, r22
    39b6:	fb 01       	movw	r30, r22
    39b8:	62 81       	ldd	r22, Z+2	; 0x02
    39ba:	73 81       	ldd	r23, Z+3	; 0x03
    39bc:	16 16       	cp	r1, r22
    39be:	17 06       	cpc	r1, r23
    39c0:	14 f0       	brlt	.+4      	; 0x39c6 <_ZN10LinkedListI13EZUI_PageItemE3popEv+0x38>
    39c2:	e3 d7       	rcall	.+4038   	; 0x498a <_ZN13EZUI_PageItemC1Ev>
    39c4:	00 c2       	rjmp	.+1024   	; 0x3dc6 <_ZN10LinkedListI13EZUI_PageItemE3popEv+0x438>
    39c6:	f6 01       	movw	r30, r12
    39c8:	14 86       	std	Z+12, r1	; 0x0c
    39ca:	62 30       	cpi	r22, 0x02	; 2
    39cc:	71 05       	cpc	r23, r1
    39ce:	0c f4       	brge	.+2      	; 0x39d2 <_ZN10LinkedListI13EZUI_PageItemE3popEv+0x44>
    39d0:	02 c1       	rjmp	.+516    	; 0x3bd6 <_ZN10LinkedListI13EZUI_PageItemE3popEv+0x248>
    39d2:	62 50       	subi	r22, 0x02	; 2
    39d4:	71 09       	sbc	r23, r1
    39d6:	c6 01       	movw	r24, r12
    39d8:	31 de       	rcall	.-926    	; 0x363c <_ZN10LinkedListI13EZUI_PageItemE7getNodeEi>
    39da:	5c 01       	movw	r10, r24
    39dc:	fc 01       	movw	r30, r24
    39de:	e6 ac       	ldd	r14, Z+62	; 0x3e
    39e0:	f7 ac       	ldd	r15, Z+63	; 0x3f
    39e2:	f7 01       	movw	r30, r14
    39e4:	80 81       	ld	r24, Z
    39e6:	89 83       	std	Y+1, r24	; 0x01
    39e8:	81 81       	ldd	r24, Z+1	; 0x01
    39ea:	8a 83       	std	Y+2, r24	; 0x02
    39ec:	82 81       	ldd	r24, Z+2	; 0x02
    39ee:	8b 83       	std	Y+3, r24	; 0x03
    39f0:	b7 01       	movw	r22, r14
    39f2:	6d 5f       	subi	r22, 0xFD	; 253
    39f4:	7f 4f       	sbci	r23, 0xFF	; 255
    39f6:	ce 01       	movw	r24, r28
    39f8:	04 96       	adiw	r24, 0x04	; 4
    39fa:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
    39fe:	f7 01       	movw	r30, r14
    3a00:	81 85       	ldd	r24, Z+9	; 0x09
    3a02:	92 85       	ldd	r25, Z+10	; 0x0a
    3a04:	a3 85       	ldd	r26, Z+11	; 0x0b
    3a06:	b4 85       	ldd	r27, Z+12	; 0x0c
    3a08:	8a 87       	std	Y+10, r24	; 0x0a
    3a0a:	9b 87       	std	Y+11, r25	; 0x0b
    3a0c:	ac 87       	std	Y+12, r26	; 0x0c
    3a0e:	bd 87       	std	Y+13, r27	; 0x0d
    3a10:	85 85       	ldd	r24, Z+13	; 0x0d
    3a12:	96 85       	ldd	r25, Z+14	; 0x0e
    3a14:	a7 85       	ldd	r26, Z+15	; 0x0f
    3a16:	b0 89       	ldd	r27, Z+16	; 0x10
    3a18:	8e 87       	std	Y+14, r24	; 0x0e
    3a1a:	9f 87       	std	Y+15, r25	; 0x0f
    3a1c:	a8 8b       	std	Y+16, r26	; 0x10
    3a1e:	b9 8b       	std	Y+17, r27	; 0x11
    3a20:	81 89       	ldd	r24, Z+17	; 0x11
    3a22:	8a 8b       	std	Y+18, r24	; 0x12
    3a24:	82 89       	ldd	r24, Z+18	; 0x12
    3a26:	93 89       	ldd	r25, Z+19	; 0x13
    3a28:	9c 8b       	std	Y+20, r25	; 0x14
    3a2a:	8b 8b       	std	Y+19, r24	; 0x13
    3a2c:	84 89       	ldd	r24, Z+20	; 0x14
    3a2e:	95 89       	ldd	r25, Z+21	; 0x15
    3a30:	9e 8b       	std	Y+22, r25	; 0x16
    3a32:	8d 8b       	std	Y+21, r24	; 0x15
    3a34:	86 89       	ldd	r24, Z+22	; 0x16
    3a36:	97 89       	ldd	r25, Z+23	; 0x17
    3a38:	98 8f       	std	Y+24, r25	; 0x18
    3a3a:	8f 8b       	std	Y+23, r24	; 0x17
    3a3c:	80 8d       	ldd	r24, Z+24	; 0x18
    3a3e:	91 8d       	ldd	r25, Z+25	; 0x19
    3a40:	9a 8f       	std	Y+26, r25	; 0x1a
    3a42:	89 8f       	std	Y+25, r24	; 0x19
    3a44:	82 8d       	ldd	r24, Z+26	; 0x1a
    3a46:	93 8d       	ldd	r25, Z+27	; 0x1b
    3a48:	9c 8f       	std	Y+28, r25	; 0x1c
    3a4a:	8b 8f       	std	Y+27, r24	; 0x1b
    3a4c:	b7 01       	movw	r22, r14
    3a4e:	64 5e       	subi	r22, 0xE4	; 228
    3a50:	7f 4f       	sbci	r23, 0xFF	; 255
    3a52:	ce 01       	movw	r24, r28
    3a54:	4d 96       	adiw	r24, 0x1d	; 29
    3a56:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
    3a5a:	b7 01       	movw	r22, r14
    3a5c:	6e 5d       	subi	r22, 0xDE	; 222
    3a5e:	7f 4f       	sbci	r23, 0xFF	; 255
    3a60:	ce 01       	movw	r24, r28
    3a62:	83 96       	adiw	r24, 0x23	; 35
    3a64:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
    3a68:	f7 01       	movw	r30, r14
    3a6a:	80 a5       	ldd	r24, Z+40	; 0x28
    3a6c:	91 a5       	ldd	r25, Z+41	; 0x29
    3a6e:	9a a7       	std	Y+42, r25	; 0x2a
    3a70:	89 a7       	std	Y+41, r24	; 0x29
    3a72:	82 a5       	ldd	r24, Z+42	; 0x2a
    3a74:	93 a5       	ldd	r25, Z+43	; 0x2b
    3a76:	9c a7       	std	Y+44, r25	; 0x2c
    3a78:	8b a7       	std	Y+43, r24	; 0x2b
    3a7a:	84 a5       	ldd	r24, Z+44	; 0x2c
    3a7c:	95 a5       	ldd	r25, Z+45	; 0x2d
    3a7e:	9e a7       	std	Y+46, r25	; 0x2e
    3a80:	8d a7       	std	Y+45, r24	; 0x2d
    3a82:	86 a5       	ldd	r24, Z+46	; 0x2e
    3a84:	97 a5       	ldd	r25, Z+47	; 0x2f
    3a86:	98 ab       	std	Y+48, r25	; 0x30
    3a88:	8f a7       	std	Y+47, r24	; 0x2f
    3a8a:	80 a9       	ldd	r24, Z+48	; 0x30
    3a8c:	91 a9       	ldd	r25, Z+49	; 0x31
    3a8e:	9a ab       	std	Y+50, r25	; 0x32
    3a90:	89 ab       	std	Y+49, r24	; 0x31
    3a92:	82 a9       	ldd	r24, Z+50	; 0x32
    3a94:	93 a9       	ldd	r25, Z+51	; 0x33
    3a96:	9c ab       	std	Y+52, r25	; 0x34
    3a98:	8b ab       	std	Y+51, r24	; 0x33
    3a9a:	84 a9       	ldd	r24, Z+52	; 0x34
    3a9c:	95 a9       	ldd	r25, Z+53	; 0x35
    3a9e:	9e ab       	std	Y+54, r25	; 0x36
    3aa0:	8d ab       	std	Y+53, r24	; 0x35
    3aa2:	86 a9       	ldd	r24, Z+54	; 0x36
    3aa4:	97 a9       	ldd	r25, Z+55	; 0x37
    3aa6:	98 af       	std	Y+56, r25	; 0x38
    3aa8:	8f ab       	std	Y+55, r24	; 0x37
    3aaa:	80 ad       	ldd	r24, Z+56	; 0x38
    3aac:	91 ad       	ldd	r25, Z+57	; 0x39
    3aae:	9a af       	std	Y+58, r25	; 0x3a
    3ab0:	89 af       	std	Y+57, r24	; 0x39
    3ab2:	82 ad       	ldd	r24, Z+58	; 0x3a
    3ab4:	93 ad       	ldd	r25, Z+59	; 0x3b
    3ab6:	9c af       	std	Y+60, r25	; 0x3c
    3ab8:	8b af       	std	Y+59, r24	; 0x3b
    3aba:	84 ad       	ldd	r24, Z+60	; 0x3c
    3abc:	95 ad       	ldd	r25, Z+61	; 0x3d
    3abe:	9e af       	std	Y+62, r25	; 0x3e
    3ac0:	8d af       	std	Y+61, r24	; 0x3d
    3ac2:	f5 01       	movw	r30, r10
    3ac4:	e6 ac       	ldd	r14, Z+62	; 0x3e
    3ac6:	f7 ac       	ldd	r15, Z+63	; 0x3f
    3ac8:	e1 14       	cp	r14, r1
    3aca:	f1 04       	cpc	r15, r1
    3acc:	29 f0       	breq	.+10     	; 0x3ad8 <_ZN10LinkedListI13EZUI_PageItemE3popEv+0x14a>
    3ace:	c7 01       	movw	r24, r14
    3ad0:	a3 d7       	rcall	.+3910   	; 0x4a18 <_ZN13EZUI_PageItemD1Ev>
    3ad2:	c7 01       	movw	r24, r14
    3ad4:	0e 94 0e 3a 	call	0x741c	; 0x741c <_ZdlPv>
    3ad8:	f5 01       	movw	r30, r10
    3ada:	17 ae       	std	Z+63, r1	; 0x3f
    3adc:	16 ae       	std	Z+62, r1	; 0x3e
    3ade:	f6 01       	movw	r30, r12
    3ae0:	b7 82       	std	Z+7, r11	; 0x07
    3ae2:	a6 82       	std	Z+6, r10	; 0x06
    3ae4:	82 81       	ldd	r24, Z+2	; 0x02
    3ae6:	93 81       	ldd	r25, Z+3	; 0x03
    3ae8:	01 97       	sbiw	r24, 0x01	; 1
    3aea:	93 83       	std	Z+3, r25	; 0x03
    3aec:	82 83       	std	Z+2, r24	; 0x02
    3aee:	89 81       	ldd	r24, Y+1	; 0x01
    3af0:	f8 01       	movw	r30, r16
    3af2:	80 83       	st	Z, r24
    3af4:	8a 81       	ldd	r24, Y+2	; 0x02
    3af6:	81 83       	std	Z+1, r24	; 0x01
    3af8:	8b 81       	ldd	r24, Y+3	; 0x03
    3afa:	82 83       	std	Z+2, r24	; 0x02
    3afc:	be 01       	movw	r22, r28
    3afe:	6c 5f       	subi	r22, 0xFC	; 252
    3b00:	7f 4f       	sbci	r23, 0xFF	; 255
    3b02:	c8 01       	movw	r24, r16
    3b04:	03 96       	adiw	r24, 0x03	; 3
    3b06:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
    3b0a:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b0c:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b0e:	ac 85       	ldd	r26, Y+12	; 0x0c
    3b10:	bd 85       	ldd	r27, Y+13	; 0x0d
    3b12:	f8 01       	movw	r30, r16
    3b14:	81 87       	std	Z+9, r24	; 0x09
    3b16:	92 87       	std	Z+10, r25	; 0x0a
    3b18:	a3 87       	std	Z+11, r26	; 0x0b
    3b1a:	b4 87       	std	Z+12, r27	; 0x0c
    3b1c:	8e 85       	ldd	r24, Y+14	; 0x0e
    3b1e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3b20:	a8 89       	ldd	r26, Y+16	; 0x10
    3b22:	b9 89       	ldd	r27, Y+17	; 0x11
    3b24:	85 87       	std	Z+13, r24	; 0x0d
    3b26:	96 87       	std	Z+14, r25	; 0x0e
    3b28:	a7 87       	std	Z+15, r26	; 0x0f
    3b2a:	b0 8b       	std	Z+16, r27	; 0x10
    3b2c:	8a 89       	ldd	r24, Y+18	; 0x12
    3b2e:	81 8b       	std	Z+17, r24	; 0x11
    3b30:	8b 89       	ldd	r24, Y+19	; 0x13
    3b32:	9c 89       	ldd	r25, Y+20	; 0x14
    3b34:	93 8b       	std	Z+19, r25	; 0x13
    3b36:	82 8b       	std	Z+18, r24	; 0x12
    3b38:	8d 89       	ldd	r24, Y+21	; 0x15
    3b3a:	9e 89       	ldd	r25, Y+22	; 0x16
    3b3c:	95 8b       	std	Z+21, r25	; 0x15
    3b3e:	84 8b       	std	Z+20, r24	; 0x14
    3b40:	8f 89       	ldd	r24, Y+23	; 0x17
    3b42:	98 8d       	ldd	r25, Y+24	; 0x18
    3b44:	97 8b       	std	Z+23, r25	; 0x17
    3b46:	86 8b       	std	Z+22, r24	; 0x16
    3b48:	89 8d       	ldd	r24, Y+25	; 0x19
    3b4a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3b4c:	91 8f       	std	Z+25, r25	; 0x19
    3b4e:	80 8f       	std	Z+24, r24	; 0x18
    3b50:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b52:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b54:	93 8f       	std	Z+27, r25	; 0x1b
    3b56:	82 8f       	std	Z+26, r24	; 0x1a
    3b58:	be 01       	movw	r22, r28
    3b5a:	63 5e       	subi	r22, 0xE3	; 227
    3b5c:	7f 4f       	sbci	r23, 0xFF	; 255
    3b5e:	c8 01       	movw	r24, r16
    3b60:	4c 96       	adiw	r24, 0x1c	; 28
    3b62:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
    3b66:	be 01       	movw	r22, r28
    3b68:	6d 5d       	subi	r22, 0xDD	; 221
    3b6a:	7f 4f       	sbci	r23, 0xFF	; 255
    3b6c:	c8 01       	movw	r24, r16
    3b6e:	82 96       	adiw	r24, 0x22	; 34
    3b70:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
    3b74:	89 a5       	ldd	r24, Y+41	; 0x29
    3b76:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b78:	f8 01       	movw	r30, r16
    3b7a:	91 a7       	std	Z+41, r25	; 0x29
    3b7c:	80 a7       	std	Z+40, r24	; 0x28
    3b7e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3b80:	9c a5       	ldd	r25, Y+44	; 0x2c
    3b82:	93 a7       	std	Z+43, r25	; 0x2b
    3b84:	82 a7       	std	Z+42, r24	; 0x2a
    3b86:	8d a5       	ldd	r24, Y+45	; 0x2d
    3b88:	9e a5       	ldd	r25, Y+46	; 0x2e
    3b8a:	95 a7       	std	Z+45, r25	; 0x2d
    3b8c:	84 a7       	std	Z+44, r24	; 0x2c
    3b8e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b90:	98 a9       	ldd	r25, Y+48	; 0x30
    3b92:	97 a7       	std	Z+47, r25	; 0x2f
    3b94:	86 a7       	std	Z+46, r24	; 0x2e
    3b96:	89 a9       	ldd	r24, Y+49	; 0x31
    3b98:	9a a9       	ldd	r25, Y+50	; 0x32
    3b9a:	91 ab       	std	Z+49, r25	; 0x31
    3b9c:	80 ab       	std	Z+48, r24	; 0x30
    3b9e:	8b a9       	ldd	r24, Y+51	; 0x33
    3ba0:	9c a9       	ldd	r25, Y+52	; 0x34
    3ba2:	93 ab       	std	Z+51, r25	; 0x33
    3ba4:	82 ab       	std	Z+50, r24	; 0x32
    3ba6:	8d a9       	ldd	r24, Y+53	; 0x35
    3ba8:	9e a9       	ldd	r25, Y+54	; 0x36
    3baa:	95 ab       	std	Z+53, r25	; 0x35
    3bac:	84 ab       	std	Z+52, r24	; 0x34
    3bae:	8f a9       	ldd	r24, Y+55	; 0x37
    3bb0:	98 ad       	ldd	r25, Y+56	; 0x38
    3bb2:	97 ab       	std	Z+55, r25	; 0x37
    3bb4:	86 ab       	std	Z+54, r24	; 0x36
    3bb6:	89 ad       	ldd	r24, Y+57	; 0x39
    3bb8:	9a ad       	ldd	r25, Y+58	; 0x3a
    3bba:	91 af       	std	Z+57, r25	; 0x39
    3bbc:	80 af       	std	Z+56, r24	; 0x38
    3bbe:	8b ad       	ldd	r24, Y+59	; 0x3b
    3bc0:	9c ad       	ldd	r25, Y+60	; 0x3c
    3bc2:	93 af       	std	Z+59, r25	; 0x3b
    3bc4:	82 af       	std	Z+58, r24	; 0x3a
    3bc6:	8d ad       	ldd	r24, Y+61	; 0x3d
    3bc8:	9e ad       	ldd	r25, Y+62	; 0x3e
    3bca:	95 af       	std	Z+61, r25	; 0x3d
    3bcc:	84 af       	std	Z+60, r24	; 0x3c
    3bce:	ce 01       	movw	r24, r28
    3bd0:	01 96       	adiw	r24, 0x01	; 1
    3bd2:	22 d7       	rcall	.+3652   	; 0x4a18 <_ZN13EZUI_PageItemD1Ev>
    3bd4:	f8 c0       	rjmp	.+496    	; 0x3dc6 <_ZN10LinkedListI13EZUI_PageItemE3popEv+0x438>
    3bd6:	f6 01       	movw	r30, r12
    3bd8:	e4 80       	ldd	r14, Z+4	; 0x04
    3bda:	f5 80       	ldd	r15, Z+5	; 0x05
    3bdc:	f7 01       	movw	r30, r14
    3bde:	80 81       	ld	r24, Z
    3be0:	89 83       	std	Y+1, r24	; 0x01
    3be2:	81 81       	ldd	r24, Z+1	; 0x01
    3be4:	8a 83       	std	Y+2, r24	; 0x02
    3be6:	82 81       	ldd	r24, Z+2	; 0x02
    3be8:	8b 83       	std	Y+3, r24	; 0x03
    3bea:	b7 01       	movw	r22, r14
    3bec:	6d 5f       	subi	r22, 0xFD	; 253
    3bee:	7f 4f       	sbci	r23, 0xFF	; 255
    3bf0:	ce 01       	movw	r24, r28
    3bf2:	04 96       	adiw	r24, 0x04	; 4
    3bf4:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
    3bf8:	f7 01       	movw	r30, r14
    3bfa:	81 85       	ldd	r24, Z+9	; 0x09
    3bfc:	92 85       	ldd	r25, Z+10	; 0x0a
    3bfe:	a3 85       	ldd	r26, Z+11	; 0x0b
    3c00:	b4 85       	ldd	r27, Z+12	; 0x0c
    3c02:	8a 87       	std	Y+10, r24	; 0x0a
    3c04:	9b 87       	std	Y+11, r25	; 0x0b
    3c06:	ac 87       	std	Y+12, r26	; 0x0c
    3c08:	bd 87       	std	Y+13, r27	; 0x0d
    3c0a:	85 85       	ldd	r24, Z+13	; 0x0d
    3c0c:	96 85       	ldd	r25, Z+14	; 0x0e
    3c0e:	a7 85       	ldd	r26, Z+15	; 0x0f
    3c10:	b0 89       	ldd	r27, Z+16	; 0x10
    3c12:	8e 87       	std	Y+14, r24	; 0x0e
    3c14:	9f 87       	std	Y+15, r25	; 0x0f
    3c16:	a8 8b       	std	Y+16, r26	; 0x10
    3c18:	b9 8b       	std	Y+17, r27	; 0x11
    3c1a:	81 89       	ldd	r24, Z+17	; 0x11
    3c1c:	8a 8b       	std	Y+18, r24	; 0x12
    3c1e:	82 89       	ldd	r24, Z+18	; 0x12
    3c20:	93 89       	ldd	r25, Z+19	; 0x13
    3c22:	9c 8b       	std	Y+20, r25	; 0x14
    3c24:	8b 8b       	std	Y+19, r24	; 0x13
    3c26:	84 89       	ldd	r24, Z+20	; 0x14
    3c28:	95 89       	ldd	r25, Z+21	; 0x15
    3c2a:	9e 8b       	std	Y+22, r25	; 0x16
    3c2c:	8d 8b       	std	Y+21, r24	; 0x15
    3c2e:	86 89       	ldd	r24, Z+22	; 0x16
    3c30:	97 89       	ldd	r25, Z+23	; 0x17
    3c32:	98 8f       	std	Y+24, r25	; 0x18
    3c34:	8f 8b       	std	Y+23, r24	; 0x17
    3c36:	80 8d       	ldd	r24, Z+24	; 0x18
    3c38:	91 8d       	ldd	r25, Z+25	; 0x19
    3c3a:	9a 8f       	std	Y+26, r25	; 0x1a
    3c3c:	89 8f       	std	Y+25, r24	; 0x19
    3c3e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3c40:	93 8d       	ldd	r25, Z+27	; 0x1b
    3c42:	9c 8f       	std	Y+28, r25	; 0x1c
    3c44:	8b 8f       	std	Y+27, r24	; 0x1b
    3c46:	b7 01       	movw	r22, r14
    3c48:	64 5e       	subi	r22, 0xE4	; 228
    3c4a:	7f 4f       	sbci	r23, 0xFF	; 255
    3c4c:	ce 01       	movw	r24, r28
    3c4e:	4d 96       	adiw	r24, 0x1d	; 29
    3c50:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
    3c54:	b7 01       	movw	r22, r14
    3c56:	6e 5d       	subi	r22, 0xDE	; 222
    3c58:	7f 4f       	sbci	r23, 0xFF	; 255
    3c5a:	ce 01       	movw	r24, r28
    3c5c:	83 96       	adiw	r24, 0x23	; 35
    3c5e:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
    3c62:	f7 01       	movw	r30, r14
    3c64:	80 a5       	ldd	r24, Z+40	; 0x28
    3c66:	91 a5       	ldd	r25, Z+41	; 0x29
    3c68:	9a a7       	std	Y+42, r25	; 0x2a
    3c6a:	89 a7       	std	Y+41, r24	; 0x29
    3c6c:	82 a5       	ldd	r24, Z+42	; 0x2a
    3c6e:	93 a5       	ldd	r25, Z+43	; 0x2b
    3c70:	9c a7       	std	Y+44, r25	; 0x2c
    3c72:	8b a7       	std	Y+43, r24	; 0x2b
    3c74:	84 a5       	ldd	r24, Z+44	; 0x2c
    3c76:	95 a5       	ldd	r25, Z+45	; 0x2d
    3c78:	9e a7       	std	Y+46, r25	; 0x2e
    3c7a:	8d a7       	std	Y+45, r24	; 0x2d
    3c7c:	86 a5       	ldd	r24, Z+46	; 0x2e
    3c7e:	97 a5       	ldd	r25, Z+47	; 0x2f
    3c80:	98 ab       	std	Y+48, r25	; 0x30
    3c82:	8f a7       	std	Y+47, r24	; 0x2f
    3c84:	80 a9       	ldd	r24, Z+48	; 0x30
    3c86:	91 a9       	ldd	r25, Z+49	; 0x31
    3c88:	9a ab       	std	Y+50, r25	; 0x32
    3c8a:	89 ab       	std	Y+49, r24	; 0x31
    3c8c:	82 a9       	ldd	r24, Z+50	; 0x32
    3c8e:	93 a9       	ldd	r25, Z+51	; 0x33
    3c90:	9c ab       	std	Y+52, r25	; 0x34
    3c92:	8b ab       	std	Y+51, r24	; 0x33
    3c94:	84 a9       	ldd	r24, Z+52	; 0x34
    3c96:	95 a9       	ldd	r25, Z+53	; 0x35
    3c98:	9e ab       	std	Y+54, r25	; 0x36
    3c9a:	8d ab       	std	Y+53, r24	; 0x35
    3c9c:	86 a9       	ldd	r24, Z+54	; 0x36
    3c9e:	97 a9       	ldd	r25, Z+55	; 0x37
    3ca0:	98 af       	std	Y+56, r25	; 0x38
    3ca2:	8f ab       	std	Y+55, r24	; 0x37
    3ca4:	80 ad       	ldd	r24, Z+56	; 0x38
    3ca6:	91 ad       	ldd	r25, Z+57	; 0x39
    3ca8:	9a af       	std	Y+58, r25	; 0x3a
    3caa:	89 af       	std	Y+57, r24	; 0x39
    3cac:	82 ad       	ldd	r24, Z+58	; 0x3a
    3cae:	93 ad       	ldd	r25, Z+59	; 0x3b
    3cb0:	9c af       	std	Y+60, r25	; 0x3c
    3cb2:	8b af       	std	Y+59, r24	; 0x3b
    3cb4:	84 ad       	ldd	r24, Z+60	; 0x3c
    3cb6:	95 ad       	ldd	r25, Z+61	; 0x3d
    3cb8:	9e af       	std	Y+62, r25	; 0x3e
    3cba:	8d af       	std	Y+61, r24	; 0x3d
    3cbc:	f6 01       	movw	r30, r12
    3cbe:	e4 80       	ldd	r14, Z+4	; 0x04
    3cc0:	f5 80       	ldd	r15, Z+5	; 0x05
    3cc2:	e1 14       	cp	r14, r1
    3cc4:	f1 04       	cpc	r15, r1
    3cc6:	29 f0       	breq	.+10     	; 0x3cd2 <_ZN10LinkedListI13EZUI_PageItemE3popEv+0x344>
    3cc8:	c7 01       	movw	r24, r14
    3cca:	a6 d6       	rcall	.+3404   	; 0x4a18 <_ZN13EZUI_PageItemD1Ev>
    3ccc:	c7 01       	movw	r24, r14
    3cce:	0e 94 0e 3a 	call	0x741c	; 0x741c <_ZdlPv>
    3cd2:	f6 01       	movw	r30, r12
    3cd4:	15 82       	std	Z+5, r1	; 0x05
    3cd6:	14 82       	std	Z+4, r1	; 0x04
    3cd8:	17 82       	std	Z+7, r1	; 0x07
    3cda:	16 82       	std	Z+6, r1	; 0x06
    3cdc:	13 82       	std	Z+3, r1	; 0x03
    3cde:	12 82       	std	Z+2, r1	; 0x02
    3ce0:	89 81       	ldd	r24, Y+1	; 0x01
    3ce2:	f8 01       	movw	r30, r16
    3ce4:	80 83       	st	Z, r24
    3ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ce8:	81 83       	std	Z+1, r24	; 0x01
    3cea:	8b 81       	ldd	r24, Y+3	; 0x03
    3cec:	82 83       	std	Z+2, r24	; 0x02
    3cee:	be 01       	movw	r22, r28
    3cf0:	6c 5f       	subi	r22, 0xFC	; 252
    3cf2:	7f 4f       	sbci	r23, 0xFF	; 255
    3cf4:	c8 01       	movw	r24, r16
    3cf6:	03 96       	adiw	r24, 0x03	; 3
    3cf8:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
    3cfc:	8a 85       	ldd	r24, Y+10	; 0x0a
    3cfe:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d00:	ac 85       	ldd	r26, Y+12	; 0x0c
    3d02:	bd 85       	ldd	r27, Y+13	; 0x0d
    3d04:	f8 01       	movw	r30, r16
    3d06:	81 87       	std	Z+9, r24	; 0x09
    3d08:	92 87       	std	Z+10, r25	; 0x0a
    3d0a:	a3 87       	std	Z+11, r26	; 0x0b
    3d0c:	b4 87       	std	Z+12, r27	; 0x0c
    3d0e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3d10:	9f 85       	ldd	r25, Y+15	; 0x0f
    3d12:	a8 89       	ldd	r26, Y+16	; 0x10
    3d14:	b9 89       	ldd	r27, Y+17	; 0x11
    3d16:	85 87       	std	Z+13, r24	; 0x0d
    3d18:	96 87       	std	Z+14, r25	; 0x0e
    3d1a:	a7 87       	std	Z+15, r26	; 0x0f
    3d1c:	b0 8b       	std	Z+16, r27	; 0x10
    3d1e:	8a 89       	ldd	r24, Y+18	; 0x12
    3d20:	81 8b       	std	Z+17, r24	; 0x11
    3d22:	8b 89       	ldd	r24, Y+19	; 0x13
    3d24:	9c 89       	ldd	r25, Y+20	; 0x14
    3d26:	93 8b       	std	Z+19, r25	; 0x13
    3d28:	82 8b       	std	Z+18, r24	; 0x12
    3d2a:	8d 89       	ldd	r24, Y+21	; 0x15
    3d2c:	9e 89       	ldd	r25, Y+22	; 0x16
    3d2e:	95 8b       	std	Z+21, r25	; 0x15
    3d30:	84 8b       	std	Z+20, r24	; 0x14
    3d32:	8f 89       	ldd	r24, Y+23	; 0x17
    3d34:	98 8d       	ldd	r25, Y+24	; 0x18
    3d36:	97 8b       	std	Z+23, r25	; 0x17
    3d38:	86 8b       	std	Z+22, r24	; 0x16
    3d3a:	89 8d       	ldd	r24, Y+25	; 0x19
    3d3c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3d3e:	91 8f       	std	Z+25, r25	; 0x19
    3d40:	80 8f       	std	Z+24, r24	; 0x18
    3d42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d46:	93 8f       	std	Z+27, r25	; 0x1b
    3d48:	82 8f       	std	Z+26, r24	; 0x1a
    3d4a:	be 01       	movw	r22, r28
    3d4c:	63 5e       	subi	r22, 0xE3	; 227
    3d4e:	7f 4f       	sbci	r23, 0xFF	; 255
    3d50:	c8 01       	movw	r24, r16
    3d52:	4c 96       	adiw	r24, 0x1c	; 28
    3d54:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
    3d58:	be 01       	movw	r22, r28
    3d5a:	6d 5d       	subi	r22, 0xDD	; 221
    3d5c:	7f 4f       	sbci	r23, 0xFF	; 255
    3d5e:	c8 01       	movw	r24, r16
    3d60:	82 96       	adiw	r24, 0x22	; 34
    3d62:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
    3d66:	89 a5       	ldd	r24, Y+41	; 0x29
    3d68:	9a a5       	ldd	r25, Y+42	; 0x2a
    3d6a:	f8 01       	movw	r30, r16
    3d6c:	91 a7       	std	Z+41, r25	; 0x29
    3d6e:	80 a7       	std	Z+40, r24	; 0x28
    3d70:	8b a5       	ldd	r24, Y+43	; 0x2b
    3d72:	9c a5       	ldd	r25, Y+44	; 0x2c
    3d74:	93 a7       	std	Z+43, r25	; 0x2b
    3d76:	82 a7       	std	Z+42, r24	; 0x2a
    3d78:	8d a5       	ldd	r24, Y+45	; 0x2d
    3d7a:	9e a5       	ldd	r25, Y+46	; 0x2e
    3d7c:	95 a7       	std	Z+45, r25	; 0x2d
    3d7e:	84 a7       	std	Z+44, r24	; 0x2c
    3d80:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d82:	98 a9       	ldd	r25, Y+48	; 0x30
    3d84:	97 a7       	std	Z+47, r25	; 0x2f
    3d86:	86 a7       	std	Z+46, r24	; 0x2e
    3d88:	89 a9       	ldd	r24, Y+49	; 0x31
    3d8a:	9a a9       	ldd	r25, Y+50	; 0x32
    3d8c:	91 ab       	std	Z+49, r25	; 0x31
    3d8e:	80 ab       	std	Z+48, r24	; 0x30
    3d90:	8b a9       	ldd	r24, Y+51	; 0x33
    3d92:	9c a9       	ldd	r25, Y+52	; 0x34
    3d94:	93 ab       	std	Z+51, r25	; 0x33
    3d96:	82 ab       	std	Z+50, r24	; 0x32
    3d98:	8d a9       	ldd	r24, Y+53	; 0x35
    3d9a:	9e a9       	ldd	r25, Y+54	; 0x36
    3d9c:	95 ab       	std	Z+53, r25	; 0x35
    3d9e:	84 ab       	std	Z+52, r24	; 0x34
    3da0:	8f a9       	ldd	r24, Y+55	; 0x37
    3da2:	98 ad       	ldd	r25, Y+56	; 0x38
    3da4:	97 ab       	std	Z+55, r25	; 0x37
    3da6:	86 ab       	std	Z+54, r24	; 0x36
    3da8:	89 ad       	ldd	r24, Y+57	; 0x39
    3daa:	9a ad       	ldd	r25, Y+58	; 0x3a
    3dac:	91 af       	std	Z+57, r25	; 0x39
    3dae:	80 af       	std	Z+56, r24	; 0x38
    3db0:	8b ad       	ldd	r24, Y+59	; 0x3b
    3db2:	9c ad       	ldd	r25, Y+60	; 0x3c
    3db4:	93 af       	std	Z+59, r25	; 0x3b
    3db6:	82 af       	std	Z+58, r24	; 0x3a
    3db8:	8d ad       	ldd	r24, Y+61	; 0x3d
    3dba:	9e ad       	ldd	r25, Y+62	; 0x3e
    3dbc:	95 af       	std	Z+61, r25	; 0x3d
    3dbe:	84 af       	std	Z+60, r24	; 0x3c
    3dc0:	ce 01       	movw	r24, r28
    3dc2:	01 96       	adiw	r24, 0x01	; 1
    3dc4:	29 d6       	rcall	.+3154   	; 0x4a18 <_ZN13EZUI_PageItemD1Ev>
    3dc6:	c8 01       	movw	r24, r16
    3dc8:	ee 96       	adiw	r28, 0x3e	; 62
    3dca:	0f b6       	in	r0, 0x3f	; 63
    3dcc:	f8 94       	cli
    3dce:	de bf       	out	0x3e, r29	; 62
    3dd0:	0f be       	out	0x3f, r0	; 63
    3dd2:	cd bf       	out	0x3d, r28	; 61
    3dd4:	df 91       	pop	r29
    3dd6:	cf 91       	pop	r28
    3dd8:	1f 91       	pop	r17
    3dda:	0f 91       	pop	r16
    3ddc:	ff 90       	pop	r15
    3dde:	ef 90       	pop	r14
    3de0:	df 90       	pop	r13
    3de2:	cf 90       	pop	r12
    3de4:	bf 90       	pop	r11
    3de6:	af 90       	pop	r10
    3de8:	08 95       	ret

00003dea <_ZN10LinkedListI13EZUI_PageItemE6removeEi>:
    3dea:	af 92       	push	r10
    3dec:	bf 92       	push	r11
    3dee:	cf 92       	push	r12
    3df0:	df 92       	push	r13
    3df2:	ef 92       	push	r14
    3df4:	ff 92       	push	r15
    3df6:	0f 93       	push	r16
    3df8:	1f 93       	push	r17
    3dfa:	cf 93       	push	r28
    3dfc:	df 93       	push	r29
    3dfe:	cd b7       	in	r28, 0x3d	; 61
    3e00:	de b7       	in	r29, 0x3e	; 62
    3e02:	ee 97       	sbiw	r28, 0x3e	; 62
    3e04:	0f b6       	in	r0, 0x3f	; 63
    3e06:	f8 94       	cli
    3e08:	de bf       	out	0x3e, r29	; 62
    3e0a:	0f be       	out	0x3f, r0	; 63
    3e0c:	cd bf       	out	0x3d, r28	; 61
    3e0e:	8c 01       	movw	r16, r24
    3e10:	6b 01       	movw	r12, r22
    3e12:	55 23       	and	r21, r21
    3e14:	44 f0       	brlt	.+16     	; 0x3e26 <_ZN10LinkedListI13EZUI_PageItemE6removeEi+0x3c>
    3e16:	db 01       	movw	r26, r22
    3e18:	12 96       	adiw	r26, 0x02	; 2
    3e1a:	8d 91       	ld	r24, X+
    3e1c:	9c 91       	ld	r25, X
    3e1e:	13 97       	sbiw	r26, 0x03	; 3
    3e20:	48 17       	cp	r20, r24
    3e22:	59 07       	cpc	r21, r25
    3e24:	1c f0       	brlt	.+6      	; 0x3e2c <_ZN10LinkedListI13EZUI_PageItemE6removeEi+0x42>
    3e26:	c8 01       	movw	r24, r16
    3e28:	b0 d5       	rcall	.+2912   	; 0x498a <_ZN13EZUI_PageItemC1Ev>
    3e2a:	51 c1       	rjmp	.+674    	; 0x40ce <_ZN10LinkedListI13EZUI_PageItemE6removeEi+0x2e4>
    3e2c:	41 15       	cp	r20, r1
    3e2e:	51 05       	cpc	r21, r1
    3e30:	49 f4       	brne	.+18     	; 0x3e44 <_ZN10LinkedListI13EZUI_PageItemE6removeEi+0x5a>
    3e32:	db 01       	movw	r26, r22
    3e34:	ed 91       	ld	r30, X+
    3e36:	fc 91       	ld	r31, X
    3e38:	06 84       	ldd	r0, Z+14	; 0x0e
    3e3a:	f7 85       	ldd	r31, Z+15	; 0x0f
    3e3c:	e0 2d       	mov	r30, r0
    3e3e:	c8 01       	movw	r24, r16
    3e40:	19 95       	eicall
    3e42:	45 c1       	rjmp	.+650    	; 0x40ce <_ZN10LinkedListI13EZUI_PageItemE6removeEi+0x2e4>
    3e44:	01 97       	sbiw	r24, 0x01	; 1
    3e46:	84 17       	cp	r24, r20
    3e48:	95 07       	cpc	r25, r21
    3e4a:	49 f4       	brne	.+18     	; 0x3e5e <_ZN10LinkedListI13EZUI_PageItemE6removeEi+0x74>
    3e4c:	db 01       	movw	r26, r22
    3e4e:	ed 91       	ld	r30, X+
    3e50:	fc 91       	ld	r31, X
    3e52:	04 84       	ldd	r0, Z+12	; 0x0c
    3e54:	f5 85       	ldd	r31, Z+13	; 0x0d
    3e56:	e0 2d       	mov	r30, r0
    3e58:	c8 01       	movw	r24, r16
    3e5a:	19 95       	eicall
    3e5c:	38 c1       	rjmp	.+624    	; 0x40ce <_ZN10LinkedListI13EZUI_PageItemE6removeEi+0x2e4>
    3e5e:	ba 01       	movw	r22, r20
    3e60:	61 50       	subi	r22, 0x01	; 1
    3e62:	71 09       	sbc	r23, r1
    3e64:	c6 01       	movw	r24, r12
    3e66:	ea db       	rcall	.-2092   	; 0x363c <_ZN10LinkedListI13EZUI_PageItemE7getNodeEi>
    3e68:	5c 01       	movw	r10, r24
    3e6a:	fc 01       	movw	r30, r24
    3e6c:	e6 ac       	ldd	r14, Z+62	; 0x3e
    3e6e:	f7 ac       	ldd	r15, Z+63	; 0x3f
    3e70:	d7 01       	movw	r26, r14
    3e72:	8c 91       	ld	r24, X
    3e74:	89 83       	std	Y+1, r24	; 0x01
    3e76:	11 96       	adiw	r26, 0x01	; 1
    3e78:	8c 91       	ld	r24, X
    3e7a:	11 97       	sbiw	r26, 0x01	; 1
    3e7c:	8a 83       	std	Y+2, r24	; 0x02
    3e7e:	12 96       	adiw	r26, 0x02	; 2
    3e80:	8c 91       	ld	r24, X
    3e82:	8b 83       	std	Y+3, r24	; 0x03
    3e84:	b7 01       	movw	r22, r14
    3e86:	6d 5f       	subi	r22, 0xFD	; 253
    3e88:	7f 4f       	sbci	r23, 0xFF	; 255
    3e8a:	ce 01       	movw	r24, r28
    3e8c:	04 96       	adiw	r24, 0x04	; 4
    3e8e:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
    3e92:	f7 01       	movw	r30, r14
    3e94:	81 85       	ldd	r24, Z+9	; 0x09
    3e96:	92 85       	ldd	r25, Z+10	; 0x0a
    3e98:	a3 85       	ldd	r26, Z+11	; 0x0b
    3e9a:	b4 85       	ldd	r27, Z+12	; 0x0c
    3e9c:	8a 87       	std	Y+10, r24	; 0x0a
    3e9e:	9b 87       	std	Y+11, r25	; 0x0b
    3ea0:	ac 87       	std	Y+12, r26	; 0x0c
    3ea2:	bd 87       	std	Y+13, r27	; 0x0d
    3ea4:	85 85       	ldd	r24, Z+13	; 0x0d
    3ea6:	96 85       	ldd	r25, Z+14	; 0x0e
    3ea8:	a7 85       	ldd	r26, Z+15	; 0x0f
    3eaa:	b0 89       	ldd	r27, Z+16	; 0x10
    3eac:	8e 87       	std	Y+14, r24	; 0x0e
    3eae:	9f 87       	std	Y+15, r25	; 0x0f
    3eb0:	a8 8b       	std	Y+16, r26	; 0x10
    3eb2:	b9 8b       	std	Y+17, r27	; 0x11
    3eb4:	81 89       	ldd	r24, Z+17	; 0x11
    3eb6:	8a 8b       	std	Y+18, r24	; 0x12
    3eb8:	82 89       	ldd	r24, Z+18	; 0x12
    3eba:	93 89       	ldd	r25, Z+19	; 0x13
    3ebc:	9c 8b       	std	Y+20, r25	; 0x14
    3ebe:	8b 8b       	std	Y+19, r24	; 0x13
    3ec0:	84 89       	ldd	r24, Z+20	; 0x14
    3ec2:	95 89       	ldd	r25, Z+21	; 0x15
    3ec4:	9e 8b       	std	Y+22, r25	; 0x16
    3ec6:	8d 8b       	std	Y+21, r24	; 0x15
    3ec8:	86 89       	ldd	r24, Z+22	; 0x16
    3eca:	97 89       	ldd	r25, Z+23	; 0x17
    3ecc:	98 8f       	std	Y+24, r25	; 0x18
    3ece:	8f 8b       	std	Y+23, r24	; 0x17
    3ed0:	80 8d       	ldd	r24, Z+24	; 0x18
    3ed2:	91 8d       	ldd	r25, Z+25	; 0x19
    3ed4:	9a 8f       	std	Y+26, r25	; 0x1a
    3ed6:	89 8f       	std	Y+25, r24	; 0x19
    3ed8:	82 8d       	ldd	r24, Z+26	; 0x1a
    3eda:	93 8d       	ldd	r25, Z+27	; 0x1b
    3edc:	9c 8f       	std	Y+28, r25	; 0x1c
    3ede:	8b 8f       	std	Y+27, r24	; 0x1b
    3ee0:	b7 01       	movw	r22, r14
    3ee2:	64 5e       	subi	r22, 0xE4	; 228
    3ee4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ee6:	ce 01       	movw	r24, r28
    3ee8:	4d 96       	adiw	r24, 0x1d	; 29
    3eea:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
    3eee:	b7 01       	movw	r22, r14
    3ef0:	6e 5d       	subi	r22, 0xDE	; 222
    3ef2:	7f 4f       	sbci	r23, 0xFF	; 255
    3ef4:	ce 01       	movw	r24, r28
    3ef6:	83 96       	adiw	r24, 0x23	; 35
    3ef8:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
    3efc:	d7 01       	movw	r26, r14
    3efe:	98 96       	adiw	r26, 0x28	; 40
    3f00:	8d 91       	ld	r24, X+
    3f02:	9c 91       	ld	r25, X
    3f04:	99 97       	sbiw	r26, 0x29	; 41
    3f06:	9a a7       	std	Y+42, r25	; 0x2a
    3f08:	89 a7       	std	Y+41, r24	; 0x29
    3f0a:	9a 96       	adiw	r26, 0x2a	; 42
    3f0c:	8d 91       	ld	r24, X+
    3f0e:	9c 91       	ld	r25, X
    3f10:	9b 97       	sbiw	r26, 0x2b	; 43
    3f12:	9c a7       	std	Y+44, r25	; 0x2c
    3f14:	8b a7       	std	Y+43, r24	; 0x2b
    3f16:	9c 96       	adiw	r26, 0x2c	; 44
    3f18:	8d 91       	ld	r24, X+
    3f1a:	9c 91       	ld	r25, X
    3f1c:	9d 97       	sbiw	r26, 0x2d	; 45
    3f1e:	9e a7       	std	Y+46, r25	; 0x2e
    3f20:	8d a7       	std	Y+45, r24	; 0x2d
    3f22:	9e 96       	adiw	r26, 0x2e	; 46
    3f24:	8d 91       	ld	r24, X+
    3f26:	9c 91       	ld	r25, X
    3f28:	9f 97       	sbiw	r26, 0x2f	; 47
    3f2a:	98 ab       	std	Y+48, r25	; 0x30
    3f2c:	8f a7       	std	Y+47, r24	; 0x2f
    3f2e:	d0 96       	adiw	r26, 0x30	; 48
    3f30:	8d 91       	ld	r24, X+
    3f32:	9c 91       	ld	r25, X
    3f34:	d1 97       	sbiw	r26, 0x31	; 49
    3f36:	9a ab       	std	Y+50, r25	; 0x32
    3f38:	89 ab       	std	Y+49, r24	; 0x31
    3f3a:	d2 96       	adiw	r26, 0x32	; 50
    3f3c:	8d 91       	ld	r24, X+
    3f3e:	9c 91       	ld	r25, X
    3f40:	d3 97       	sbiw	r26, 0x33	; 51
    3f42:	9c ab       	std	Y+52, r25	; 0x34
    3f44:	8b ab       	std	Y+51, r24	; 0x33
    3f46:	d4 96       	adiw	r26, 0x34	; 52
    3f48:	8d 91       	ld	r24, X+
    3f4a:	9c 91       	ld	r25, X
    3f4c:	d5 97       	sbiw	r26, 0x35	; 53
    3f4e:	9e ab       	std	Y+54, r25	; 0x36
    3f50:	8d ab       	std	Y+53, r24	; 0x35
    3f52:	d6 96       	adiw	r26, 0x36	; 54
    3f54:	8d 91       	ld	r24, X+
    3f56:	9c 91       	ld	r25, X
    3f58:	d7 97       	sbiw	r26, 0x37	; 55
    3f5a:	98 af       	std	Y+56, r25	; 0x38
    3f5c:	8f ab       	std	Y+55, r24	; 0x37
    3f5e:	d8 96       	adiw	r26, 0x38	; 56
    3f60:	8d 91       	ld	r24, X+
    3f62:	9c 91       	ld	r25, X
    3f64:	d9 97       	sbiw	r26, 0x39	; 57
    3f66:	9a af       	std	Y+58, r25	; 0x3a
    3f68:	89 af       	std	Y+57, r24	; 0x39
    3f6a:	da 96       	adiw	r26, 0x3a	; 58
    3f6c:	8d 91       	ld	r24, X+
    3f6e:	9c 91       	ld	r25, X
    3f70:	db 97       	sbiw	r26, 0x3b	; 59
    3f72:	9c af       	std	Y+60, r25	; 0x3c
    3f74:	8b af       	std	Y+59, r24	; 0x3b
    3f76:	dc 96       	adiw	r26, 0x3c	; 60
    3f78:	8d 91       	ld	r24, X+
    3f7a:	9c 91       	ld	r25, X
    3f7c:	dd 97       	sbiw	r26, 0x3d	; 61
    3f7e:	9e af       	std	Y+62, r25	; 0x3e
    3f80:	8d af       	std	Y+61, r24	; 0x3d
    3f82:	d5 01       	movw	r26, r10
    3f84:	de 96       	adiw	r26, 0x3e	; 62
    3f86:	ed 91       	ld	r30, X+
    3f88:	fc 91       	ld	r31, X
    3f8a:	df 97       	sbiw	r26, 0x3f	; 63
    3f8c:	86 ad       	ldd	r24, Z+62	; 0x3e
    3f8e:	97 ad       	ldd	r25, Z+63	; 0x3f
    3f90:	df 96       	adiw	r26, 0x3f	; 63
    3f92:	9c 93       	st	X, r25
    3f94:	8e 93       	st	-X, r24
    3f96:	de 97       	sbiw	r26, 0x3e	; 62
    3f98:	e1 14       	cp	r14, r1
    3f9a:	f1 04       	cpc	r15, r1
    3f9c:	29 f0       	breq	.+10     	; 0x3fa8 <_ZN10LinkedListI13EZUI_PageItemE6removeEi+0x1be>
    3f9e:	c7 01       	movw	r24, r14
    3fa0:	3b d5       	rcall	.+2678   	; 0x4a18 <_ZN13EZUI_PageItemD1Ev>
    3fa2:	c7 01       	movw	r24, r14
    3fa4:	0e 94 0e 3a 	call	0x741c	; 0x741c <_ZdlPv>
    3fa8:	f6 01       	movw	r30, r12
    3faa:	82 81       	ldd	r24, Z+2	; 0x02
    3fac:	93 81       	ldd	r25, Z+3	; 0x03
    3fae:	01 97       	sbiw	r24, 0x01	; 1
    3fb0:	93 83       	std	Z+3, r25	; 0x03
    3fb2:	82 83       	std	Z+2, r24	; 0x02
    3fb4:	14 86       	std	Z+12, r1	; 0x0c
    3fb6:	89 81       	ldd	r24, Y+1	; 0x01
    3fb8:	d8 01       	movw	r26, r16
    3fba:	8c 93       	st	X, r24
    3fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    3fbe:	11 96       	adiw	r26, 0x01	; 1
    3fc0:	8c 93       	st	X, r24
    3fc2:	11 97       	sbiw	r26, 0x01	; 1
    3fc4:	8b 81       	ldd	r24, Y+3	; 0x03
    3fc6:	12 96       	adiw	r26, 0x02	; 2
    3fc8:	8c 93       	st	X, r24
    3fca:	be 01       	movw	r22, r28
    3fcc:	6c 5f       	subi	r22, 0xFC	; 252
    3fce:	7f 4f       	sbci	r23, 0xFF	; 255
    3fd0:	c8 01       	movw	r24, r16
    3fd2:	03 96       	adiw	r24, 0x03	; 3
    3fd4:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
    3fd8:	8a 85       	ldd	r24, Y+10	; 0x0a
    3fda:	9b 85       	ldd	r25, Y+11	; 0x0b
    3fdc:	ac 85       	ldd	r26, Y+12	; 0x0c
    3fde:	bd 85       	ldd	r27, Y+13	; 0x0d
    3fe0:	f8 01       	movw	r30, r16
    3fe2:	81 87       	std	Z+9, r24	; 0x09
    3fe4:	92 87       	std	Z+10, r25	; 0x0a
    3fe6:	a3 87       	std	Z+11, r26	; 0x0b
    3fe8:	b4 87       	std	Z+12, r27	; 0x0c
    3fea:	8e 85       	ldd	r24, Y+14	; 0x0e
    3fec:	9f 85       	ldd	r25, Y+15	; 0x0f
    3fee:	a8 89       	ldd	r26, Y+16	; 0x10
    3ff0:	b9 89       	ldd	r27, Y+17	; 0x11
    3ff2:	85 87       	std	Z+13, r24	; 0x0d
    3ff4:	96 87       	std	Z+14, r25	; 0x0e
    3ff6:	a7 87       	std	Z+15, r26	; 0x0f
    3ff8:	b0 8b       	std	Z+16, r27	; 0x10
    3ffa:	8a 89       	ldd	r24, Y+18	; 0x12
    3ffc:	81 8b       	std	Z+17, r24	; 0x11
    3ffe:	8b 89       	ldd	r24, Y+19	; 0x13
    4000:	9c 89       	ldd	r25, Y+20	; 0x14
    4002:	93 8b       	std	Z+19, r25	; 0x13
    4004:	82 8b       	std	Z+18, r24	; 0x12
    4006:	8d 89       	ldd	r24, Y+21	; 0x15
    4008:	9e 89       	ldd	r25, Y+22	; 0x16
    400a:	95 8b       	std	Z+21, r25	; 0x15
    400c:	84 8b       	std	Z+20, r24	; 0x14
    400e:	8f 89       	ldd	r24, Y+23	; 0x17
    4010:	98 8d       	ldd	r25, Y+24	; 0x18
    4012:	97 8b       	std	Z+23, r25	; 0x17
    4014:	86 8b       	std	Z+22, r24	; 0x16
    4016:	89 8d       	ldd	r24, Y+25	; 0x19
    4018:	9a 8d       	ldd	r25, Y+26	; 0x1a
    401a:	91 8f       	std	Z+25, r25	; 0x19
    401c:	80 8f       	std	Z+24, r24	; 0x18
    401e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4020:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4022:	93 8f       	std	Z+27, r25	; 0x1b
    4024:	82 8f       	std	Z+26, r24	; 0x1a
    4026:	be 01       	movw	r22, r28
    4028:	63 5e       	subi	r22, 0xE3	; 227
    402a:	7f 4f       	sbci	r23, 0xFF	; 255
    402c:	c8 01       	movw	r24, r16
    402e:	4c 96       	adiw	r24, 0x1c	; 28
    4030:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
    4034:	be 01       	movw	r22, r28
    4036:	6d 5d       	subi	r22, 0xDD	; 221
    4038:	7f 4f       	sbci	r23, 0xFF	; 255
    403a:	c8 01       	movw	r24, r16
    403c:	82 96       	adiw	r24, 0x22	; 34
    403e:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
    4042:	89 a5       	ldd	r24, Y+41	; 0x29
    4044:	9a a5       	ldd	r25, Y+42	; 0x2a
    4046:	d8 01       	movw	r26, r16
    4048:	99 96       	adiw	r26, 0x29	; 41
    404a:	9c 93       	st	X, r25
    404c:	8e 93       	st	-X, r24
    404e:	98 97       	sbiw	r26, 0x28	; 40
    4050:	8b a5       	ldd	r24, Y+43	; 0x2b
    4052:	9c a5       	ldd	r25, Y+44	; 0x2c
    4054:	9b 96       	adiw	r26, 0x2b	; 43
    4056:	9c 93       	st	X, r25
    4058:	8e 93       	st	-X, r24
    405a:	9a 97       	sbiw	r26, 0x2a	; 42
    405c:	8d a5       	ldd	r24, Y+45	; 0x2d
    405e:	9e a5       	ldd	r25, Y+46	; 0x2e
    4060:	9d 96       	adiw	r26, 0x2d	; 45
    4062:	9c 93       	st	X, r25
    4064:	8e 93       	st	-X, r24
    4066:	9c 97       	sbiw	r26, 0x2c	; 44
    4068:	8f a5       	ldd	r24, Y+47	; 0x2f
    406a:	98 a9       	ldd	r25, Y+48	; 0x30
    406c:	9f 96       	adiw	r26, 0x2f	; 47
    406e:	9c 93       	st	X, r25
    4070:	8e 93       	st	-X, r24
    4072:	9e 97       	sbiw	r26, 0x2e	; 46
    4074:	89 a9       	ldd	r24, Y+49	; 0x31
    4076:	9a a9       	ldd	r25, Y+50	; 0x32
    4078:	d1 96       	adiw	r26, 0x31	; 49
    407a:	9c 93       	st	X, r25
    407c:	8e 93       	st	-X, r24
    407e:	d0 97       	sbiw	r26, 0x30	; 48
    4080:	8b a9       	ldd	r24, Y+51	; 0x33
    4082:	9c a9       	ldd	r25, Y+52	; 0x34
    4084:	d3 96       	adiw	r26, 0x33	; 51
    4086:	9c 93       	st	X, r25
    4088:	8e 93       	st	-X, r24
    408a:	d2 97       	sbiw	r26, 0x32	; 50
    408c:	8d a9       	ldd	r24, Y+53	; 0x35
    408e:	9e a9       	ldd	r25, Y+54	; 0x36
    4090:	d5 96       	adiw	r26, 0x35	; 53
    4092:	9c 93       	st	X, r25
    4094:	8e 93       	st	-X, r24
    4096:	d4 97       	sbiw	r26, 0x34	; 52
    4098:	8f a9       	ldd	r24, Y+55	; 0x37
    409a:	98 ad       	ldd	r25, Y+56	; 0x38
    409c:	d7 96       	adiw	r26, 0x37	; 55
    409e:	9c 93       	st	X, r25
    40a0:	8e 93       	st	-X, r24
    40a2:	d6 97       	sbiw	r26, 0x36	; 54
    40a4:	89 ad       	ldd	r24, Y+57	; 0x39
    40a6:	9a ad       	ldd	r25, Y+58	; 0x3a
    40a8:	d9 96       	adiw	r26, 0x39	; 57
    40aa:	9c 93       	st	X, r25
    40ac:	8e 93       	st	-X, r24
    40ae:	d8 97       	sbiw	r26, 0x38	; 56
    40b0:	8b ad       	ldd	r24, Y+59	; 0x3b
    40b2:	9c ad       	ldd	r25, Y+60	; 0x3c
    40b4:	db 96       	adiw	r26, 0x3b	; 59
    40b6:	9c 93       	st	X, r25
    40b8:	8e 93       	st	-X, r24
    40ba:	da 97       	sbiw	r26, 0x3a	; 58
    40bc:	8d ad       	ldd	r24, Y+61	; 0x3d
    40be:	9e ad       	ldd	r25, Y+62	; 0x3e
    40c0:	dd 96       	adiw	r26, 0x3d	; 61
    40c2:	9c 93       	st	X, r25
    40c4:	8e 93       	st	-X, r24
    40c6:	dc 97       	sbiw	r26, 0x3c	; 60
    40c8:	ce 01       	movw	r24, r28
    40ca:	01 96       	adiw	r24, 0x01	; 1
    40cc:	a5 d4       	rcall	.+2378   	; 0x4a18 <_ZN13EZUI_PageItemD1Ev>
    40ce:	c8 01       	movw	r24, r16
    40d0:	ee 96       	adiw	r28, 0x3e	; 62
    40d2:	0f b6       	in	r0, 0x3f	; 63
    40d4:	f8 94       	cli
    40d6:	de bf       	out	0x3e, r29	; 62
    40d8:	0f be       	out	0x3f, r0	; 63
    40da:	cd bf       	out	0x3d, r28	; 61
    40dc:	df 91       	pop	r29
    40de:	cf 91       	pop	r28
    40e0:	1f 91       	pop	r17
    40e2:	0f 91       	pop	r16
    40e4:	ff 90       	pop	r15
    40e6:	ef 90       	pop	r14
    40e8:	df 90       	pop	r13
    40ea:	cf 90       	pop	r12
    40ec:	bf 90       	pop	r11
    40ee:	af 90       	pop	r10
    40f0:	08 95       	ret

000040f2 <_ZN10LinkedListI13EZUI_PageItemE3setEiS0_>:
    40f2:	0f 93       	push	r16
    40f4:	1f 93       	push	r17
    40f6:	cf 93       	push	r28
    40f8:	df 93       	push	r29
    40fa:	77 23       	and	r23, r23
    40fc:	0c f4       	brge	.+2      	; 0x4100 <_ZN10LinkedListI13EZUI_PageItemE3setEiS0_+0xe>
    40fe:	7c c0       	rjmp	.+248    	; 0x41f8 <_ZN10LinkedListI13EZUI_PageItemE3setEiS0_+0x106>
    4100:	fc 01       	movw	r30, r24
    4102:	22 81       	ldd	r18, Z+2	; 0x02
    4104:	33 81       	ldd	r19, Z+3	; 0x03
    4106:	62 17       	cp	r22, r18
    4108:	73 07       	cpc	r23, r19
    410a:	0c f0       	brlt	.+2      	; 0x410e <_ZN10LinkedListI13EZUI_PageItemE3setEiS0_+0x1c>
    410c:	77 c0       	rjmp	.+238    	; 0x41fc <_ZN10LinkedListI13EZUI_PageItemE3setEiS0_+0x10a>
    410e:	ea 01       	movw	r28, r20
    4110:	95 da       	rcall	.-2774   	; 0x363c <_ZN10LinkedListI13EZUI_PageItemE7getNodeEi>
    4112:	8c 01       	movw	r16, r24
    4114:	88 81       	ld	r24, Y
    4116:	f8 01       	movw	r30, r16
    4118:	80 83       	st	Z, r24
    411a:	89 81       	ldd	r24, Y+1	; 0x01
    411c:	81 83       	std	Z+1, r24	; 0x01
    411e:	8a 81       	ldd	r24, Y+2	; 0x02
    4120:	82 83       	std	Z+2, r24	; 0x02
    4122:	be 01       	movw	r22, r28
    4124:	6d 5f       	subi	r22, 0xFD	; 253
    4126:	7f 4f       	sbci	r23, 0xFF	; 255
    4128:	c8 01       	movw	r24, r16
    412a:	03 96       	adiw	r24, 0x03	; 3
    412c:	0e 94 83 41 	call	0x8306	; 0x8306 <_ZN6StringaSERKS_>
    4130:	89 85       	ldd	r24, Y+9	; 0x09
    4132:	9a 85       	ldd	r25, Y+10	; 0x0a
    4134:	ab 85       	ldd	r26, Y+11	; 0x0b
    4136:	bc 85       	ldd	r27, Y+12	; 0x0c
    4138:	f8 01       	movw	r30, r16
    413a:	81 87       	std	Z+9, r24	; 0x09
    413c:	92 87       	std	Z+10, r25	; 0x0a
    413e:	a3 87       	std	Z+11, r26	; 0x0b
    4140:	b4 87       	std	Z+12, r27	; 0x0c
    4142:	8d 85       	ldd	r24, Y+13	; 0x0d
    4144:	9e 85       	ldd	r25, Y+14	; 0x0e
    4146:	af 85       	ldd	r26, Y+15	; 0x0f
    4148:	b8 89       	ldd	r27, Y+16	; 0x10
    414a:	85 87       	std	Z+13, r24	; 0x0d
    414c:	96 87       	std	Z+14, r25	; 0x0e
    414e:	a7 87       	std	Z+15, r26	; 0x0f
    4150:	b0 8b       	std	Z+16, r27	; 0x10
    4152:	89 89       	ldd	r24, Y+17	; 0x11
    4154:	81 8b       	std	Z+17, r24	; 0x11
    4156:	8a 89       	ldd	r24, Y+18	; 0x12
    4158:	9b 89       	ldd	r25, Y+19	; 0x13
    415a:	93 8b       	std	Z+19, r25	; 0x13
    415c:	82 8b       	std	Z+18, r24	; 0x12
    415e:	8c 89       	ldd	r24, Y+20	; 0x14
    4160:	9d 89       	ldd	r25, Y+21	; 0x15
    4162:	95 8b       	std	Z+21, r25	; 0x15
    4164:	84 8b       	std	Z+20, r24	; 0x14
    4166:	8e 89       	ldd	r24, Y+22	; 0x16
    4168:	9f 89       	ldd	r25, Y+23	; 0x17
    416a:	97 8b       	std	Z+23, r25	; 0x17
    416c:	86 8b       	std	Z+22, r24	; 0x16
    416e:	88 8d       	ldd	r24, Y+24	; 0x18
    4170:	99 8d       	ldd	r25, Y+25	; 0x19
    4172:	91 8f       	std	Z+25, r25	; 0x19
    4174:	80 8f       	std	Z+24, r24	; 0x18
    4176:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4178:	9b 8d       	ldd	r25, Y+27	; 0x1b
    417a:	93 8f       	std	Z+27, r25	; 0x1b
    417c:	82 8f       	std	Z+26, r24	; 0x1a
    417e:	be 01       	movw	r22, r28
    4180:	64 5e       	subi	r22, 0xE4	; 228
    4182:	7f 4f       	sbci	r23, 0xFF	; 255
    4184:	c8 01       	movw	r24, r16
    4186:	4c 96       	adiw	r24, 0x1c	; 28
    4188:	0e 94 83 41 	call	0x8306	; 0x8306 <_ZN6StringaSERKS_>
    418c:	be 01       	movw	r22, r28
    418e:	6e 5d       	subi	r22, 0xDE	; 222
    4190:	7f 4f       	sbci	r23, 0xFF	; 255
    4192:	c8 01       	movw	r24, r16
    4194:	82 96       	adiw	r24, 0x22	; 34
    4196:	0e 94 83 41 	call	0x8306	; 0x8306 <_ZN6StringaSERKS_>
    419a:	88 a5       	ldd	r24, Y+40	; 0x28
    419c:	99 a5       	ldd	r25, Y+41	; 0x29
    419e:	f8 01       	movw	r30, r16
    41a0:	91 a7       	std	Z+41, r25	; 0x29
    41a2:	80 a7       	std	Z+40, r24	; 0x28
    41a4:	8a a5       	ldd	r24, Y+42	; 0x2a
    41a6:	9b a5       	ldd	r25, Y+43	; 0x2b
    41a8:	93 a7       	std	Z+43, r25	; 0x2b
    41aa:	82 a7       	std	Z+42, r24	; 0x2a
    41ac:	8c a5       	ldd	r24, Y+44	; 0x2c
    41ae:	9d a5       	ldd	r25, Y+45	; 0x2d
    41b0:	95 a7       	std	Z+45, r25	; 0x2d
    41b2:	84 a7       	std	Z+44, r24	; 0x2c
    41b4:	8e a5       	ldd	r24, Y+46	; 0x2e
    41b6:	9f a5       	ldd	r25, Y+47	; 0x2f
    41b8:	97 a7       	std	Z+47, r25	; 0x2f
    41ba:	86 a7       	std	Z+46, r24	; 0x2e
    41bc:	88 a9       	ldd	r24, Y+48	; 0x30
    41be:	99 a9       	ldd	r25, Y+49	; 0x31
    41c0:	91 ab       	std	Z+49, r25	; 0x31
    41c2:	80 ab       	std	Z+48, r24	; 0x30
    41c4:	8a a9       	ldd	r24, Y+50	; 0x32
    41c6:	9b a9       	ldd	r25, Y+51	; 0x33
    41c8:	93 ab       	std	Z+51, r25	; 0x33
    41ca:	82 ab       	std	Z+50, r24	; 0x32
    41cc:	8c a9       	ldd	r24, Y+52	; 0x34
    41ce:	9d a9       	ldd	r25, Y+53	; 0x35
    41d0:	95 ab       	std	Z+53, r25	; 0x35
    41d2:	84 ab       	std	Z+52, r24	; 0x34
    41d4:	8e a9       	ldd	r24, Y+54	; 0x36
    41d6:	9f a9       	ldd	r25, Y+55	; 0x37
    41d8:	97 ab       	std	Z+55, r25	; 0x37
    41da:	86 ab       	std	Z+54, r24	; 0x36
    41dc:	88 ad       	ldd	r24, Y+56	; 0x38
    41de:	99 ad       	ldd	r25, Y+57	; 0x39
    41e0:	91 af       	std	Z+57, r25	; 0x39
    41e2:	80 af       	std	Z+56, r24	; 0x38
    41e4:	8a ad       	ldd	r24, Y+58	; 0x3a
    41e6:	9b ad       	ldd	r25, Y+59	; 0x3b
    41e8:	93 af       	std	Z+59, r25	; 0x3b
    41ea:	82 af       	std	Z+58, r24	; 0x3a
    41ec:	8c ad       	ldd	r24, Y+60	; 0x3c
    41ee:	9d ad       	ldd	r25, Y+61	; 0x3d
    41f0:	95 af       	std	Z+61, r25	; 0x3d
    41f2:	84 af       	std	Z+60, r24	; 0x3c
    41f4:	81 e0       	ldi	r24, 0x01	; 1
    41f6:	03 c0       	rjmp	.+6      	; 0x41fe <_ZN10LinkedListI13EZUI_PageItemE3setEiS0_+0x10c>
    41f8:	80 e0       	ldi	r24, 0x00	; 0
    41fa:	01 c0       	rjmp	.+2      	; 0x41fe <_ZN10LinkedListI13EZUI_PageItemE3setEiS0_+0x10c>
    41fc:	80 e0       	ldi	r24, 0x00	; 0
    41fe:	df 91       	pop	r29
    4200:	cf 91       	pop	r28
    4202:	1f 91       	pop	r17
    4204:	0f 91       	pop	r16
    4206:	08 95       	ret

00004208 <_ZN10LinkedListI13EZUI_PageItemE3addEiS0_>:
    4208:	af 92       	push	r10
    420a:	bf 92       	push	r11
    420c:	cf 92       	push	r12
    420e:	df 92       	push	r13
    4210:	ef 92       	push	r14
    4212:	ff 92       	push	r15
    4214:	0f 93       	push	r16
    4216:	1f 93       	push	r17
    4218:	cf 93       	push	r28
    421a:	df 93       	push	r29
    421c:	cd b7       	in	r28, 0x3d	; 61
    421e:	de b7       	in	r29, 0x3e	; 62
    4220:	ee 97       	sbiw	r28, 0x3e	; 62
    4222:	0f b6       	in	r0, 0x3f	; 63
    4224:	f8 94       	cli
    4226:	de bf       	out	0x3e, r29	; 62
    4228:	0f be       	out	0x3f, r0	; 63
    422a:	cd bf       	out	0x3d, r28	; 61
    422c:	6c 01       	movw	r12, r24
    422e:	5b 01       	movw	r10, r22
    4230:	8a 01       	movw	r16, r20
    4232:	dc 01       	movw	r26, r24
    4234:	12 96       	adiw	r26, 0x02	; 2
    4236:	8d 91       	ld	r24, X+
    4238:	9c 91       	ld	r25, X
    423a:	13 97       	sbiw	r26, 0x03	; 3
    423c:	68 17       	cp	r22, r24
    423e:	79 07       	cpc	r23, r25
    4240:	0c f4       	brge	.+2      	; 0x4244 <_ZN10LinkedListI13EZUI_PageItemE3addEiS0_+0x3c>
    4242:	95 c0       	rjmp	.+298    	; 0x436e <_ZN10LinkedListI13EZUI_PageItemE3addEiS0_+0x166>
    4244:	ed 91       	ld	r30, X+
    4246:	fc 91       	ld	r31, X
    4248:	e4 80       	ldd	r14, Z+4	; 0x04
    424a:	f5 80       	ldd	r15, Z+5	; 0x05
    424c:	fa 01       	movw	r30, r20
    424e:	80 81       	ld	r24, Z
    4250:	89 83       	std	Y+1, r24	; 0x01
    4252:	81 81       	ldd	r24, Z+1	; 0x01
    4254:	8a 83       	std	Y+2, r24	; 0x02
    4256:	82 81       	ldd	r24, Z+2	; 0x02
    4258:	8b 83       	std	Y+3, r24	; 0x03
    425a:	ba 01       	movw	r22, r20
    425c:	6d 5f       	subi	r22, 0xFD	; 253
    425e:	7f 4f       	sbci	r23, 0xFF	; 255
    4260:	ce 01       	movw	r24, r28
    4262:	04 96       	adiw	r24, 0x04	; 4
    4264:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
    4268:	f8 01       	movw	r30, r16
    426a:	81 85       	ldd	r24, Z+9	; 0x09
    426c:	92 85       	ldd	r25, Z+10	; 0x0a
    426e:	a3 85       	ldd	r26, Z+11	; 0x0b
    4270:	b4 85       	ldd	r27, Z+12	; 0x0c
    4272:	8a 87       	std	Y+10, r24	; 0x0a
    4274:	9b 87       	std	Y+11, r25	; 0x0b
    4276:	ac 87       	std	Y+12, r26	; 0x0c
    4278:	bd 87       	std	Y+13, r27	; 0x0d
    427a:	85 85       	ldd	r24, Z+13	; 0x0d
    427c:	96 85       	ldd	r25, Z+14	; 0x0e
    427e:	a7 85       	ldd	r26, Z+15	; 0x0f
    4280:	b0 89       	ldd	r27, Z+16	; 0x10
    4282:	8e 87       	std	Y+14, r24	; 0x0e
    4284:	9f 87       	std	Y+15, r25	; 0x0f
    4286:	a8 8b       	std	Y+16, r26	; 0x10
    4288:	b9 8b       	std	Y+17, r27	; 0x11
    428a:	81 89       	ldd	r24, Z+17	; 0x11
    428c:	8a 8b       	std	Y+18, r24	; 0x12
    428e:	82 89       	ldd	r24, Z+18	; 0x12
    4290:	93 89       	ldd	r25, Z+19	; 0x13
    4292:	9c 8b       	std	Y+20, r25	; 0x14
    4294:	8b 8b       	std	Y+19, r24	; 0x13
    4296:	84 89       	ldd	r24, Z+20	; 0x14
    4298:	95 89       	ldd	r25, Z+21	; 0x15
    429a:	9e 8b       	std	Y+22, r25	; 0x16
    429c:	8d 8b       	std	Y+21, r24	; 0x15
    429e:	86 89       	ldd	r24, Z+22	; 0x16
    42a0:	97 89       	ldd	r25, Z+23	; 0x17
    42a2:	98 8f       	std	Y+24, r25	; 0x18
    42a4:	8f 8b       	std	Y+23, r24	; 0x17
    42a6:	80 8d       	ldd	r24, Z+24	; 0x18
    42a8:	91 8d       	ldd	r25, Z+25	; 0x19
    42aa:	9a 8f       	std	Y+26, r25	; 0x1a
    42ac:	89 8f       	std	Y+25, r24	; 0x19
    42ae:	82 8d       	ldd	r24, Z+26	; 0x1a
    42b0:	93 8d       	ldd	r25, Z+27	; 0x1b
    42b2:	9c 8f       	std	Y+28, r25	; 0x1c
    42b4:	8b 8f       	std	Y+27, r24	; 0x1b
    42b6:	b8 01       	movw	r22, r16
    42b8:	64 5e       	subi	r22, 0xE4	; 228
    42ba:	7f 4f       	sbci	r23, 0xFF	; 255
    42bc:	ce 01       	movw	r24, r28
    42be:	4d 96       	adiw	r24, 0x1d	; 29
    42c0:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
    42c4:	b8 01       	movw	r22, r16
    42c6:	6e 5d       	subi	r22, 0xDE	; 222
    42c8:	7f 4f       	sbci	r23, 0xFF	; 255
    42ca:	ce 01       	movw	r24, r28
    42cc:	83 96       	adiw	r24, 0x23	; 35
    42ce:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
    42d2:	d8 01       	movw	r26, r16
    42d4:	98 96       	adiw	r26, 0x28	; 40
    42d6:	8d 91       	ld	r24, X+
    42d8:	9c 91       	ld	r25, X
    42da:	99 97       	sbiw	r26, 0x29	; 41
    42dc:	9a a7       	std	Y+42, r25	; 0x2a
    42de:	89 a7       	std	Y+41, r24	; 0x29
    42e0:	9a 96       	adiw	r26, 0x2a	; 42
    42e2:	8d 91       	ld	r24, X+
    42e4:	9c 91       	ld	r25, X
    42e6:	9b 97       	sbiw	r26, 0x2b	; 43
    42e8:	9c a7       	std	Y+44, r25	; 0x2c
    42ea:	8b a7       	std	Y+43, r24	; 0x2b
    42ec:	9c 96       	adiw	r26, 0x2c	; 44
    42ee:	8d 91       	ld	r24, X+
    42f0:	9c 91       	ld	r25, X
    42f2:	9d 97       	sbiw	r26, 0x2d	; 45
    42f4:	9e a7       	std	Y+46, r25	; 0x2e
    42f6:	8d a7       	std	Y+45, r24	; 0x2d
    42f8:	9e 96       	adiw	r26, 0x2e	; 46
    42fa:	8d 91       	ld	r24, X+
    42fc:	9c 91       	ld	r25, X
    42fe:	9f 97       	sbiw	r26, 0x2f	; 47
    4300:	98 ab       	std	Y+48, r25	; 0x30
    4302:	8f a7       	std	Y+47, r24	; 0x2f
    4304:	d0 96       	adiw	r26, 0x30	; 48
    4306:	8d 91       	ld	r24, X+
    4308:	9c 91       	ld	r25, X
    430a:	d1 97       	sbiw	r26, 0x31	; 49
    430c:	9a ab       	std	Y+50, r25	; 0x32
    430e:	89 ab       	std	Y+49, r24	; 0x31
    4310:	d2 96       	adiw	r26, 0x32	; 50
    4312:	8d 91       	ld	r24, X+
    4314:	9c 91       	ld	r25, X
    4316:	d3 97       	sbiw	r26, 0x33	; 51
    4318:	9c ab       	std	Y+52, r25	; 0x34
    431a:	8b ab       	std	Y+51, r24	; 0x33
    431c:	d4 96       	adiw	r26, 0x34	; 52
    431e:	8d 91       	ld	r24, X+
    4320:	9c 91       	ld	r25, X
    4322:	d5 97       	sbiw	r26, 0x35	; 53
    4324:	9e ab       	std	Y+54, r25	; 0x36
    4326:	8d ab       	std	Y+53, r24	; 0x35
    4328:	d6 96       	adiw	r26, 0x36	; 54
    432a:	8d 91       	ld	r24, X+
    432c:	9c 91       	ld	r25, X
    432e:	d7 97       	sbiw	r26, 0x37	; 55
    4330:	98 af       	std	Y+56, r25	; 0x38
    4332:	8f ab       	std	Y+55, r24	; 0x37
    4334:	d8 96       	adiw	r26, 0x38	; 56
    4336:	8d 91       	ld	r24, X+
    4338:	9c 91       	ld	r25, X
    433a:	d9 97       	sbiw	r26, 0x39	; 57
    433c:	9a af       	std	Y+58, r25	; 0x3a
    433e:	89 af       	std	Y+57, r24	; 0x39
    4340:	da 96       	adiw	r26, 0x3a	; 58
    4342:	8d 91       	ld	r24, X+
    4344:	9c 91       	ld	r25, X
    4346:	db 97       	sbiw	r26, 0x3b	; 59
    4348:	9c af       	std	Y+60, r25	; 0x3c
    434a:	8b af       	std	Y+59, r24	; 0x3b
    434c:	dc 96       	adiw	r26, 0x3c	; 60
    434e:	8d 91       	ld	r24, X+
    4350:	9c 91       	ld	r25, X
    4352:	dd 97       	sbiw	r26, 0x3d	; 61
    4354:	9e af       	std	Y+62, r25	; 0x3e
    4356:	8d af       	std	Y+61, r24	; 0x3d
    4358:	be 01       	movw	r22, r28
    435a:	6f 5f       	subi	r22, 0xFF	; 255
    435c:	7f 4f       	sbci	r23, 0xFF	; 255
    435e:	c6 01       	movw	r24, r12
    4360:	f7 01       	movw	r30, r14
    4362:	19 95       	eicall
    4364:	18 2f       	mov	r17, r24
    4366:	ce 01       	movw	r24, r28
    4368:	01 96       	adiw	r24, 0x01	; 1
    436a:	56 d3       	rcall	.+1708   	; 0x4a18 <_ZN13EZUI_PageItemD1Ev>
    436c:	5c c1       	rjmp	.+696    	; 0x4626 <_ZN10LinkedListI13EZUI_PageItemE3addEiS0_+0x41e>
    436e:	67 2b       	or	r22, r23
    4370:	09 f0       	breq	.+2      	; 0x4374 <_ZN10LinkedListI13EZUI_PageItemE3addEiS0_+0x16c>
    4372:	96 c0       	rjmp	.+300    	; 0x44a0 <_ZN10LinkedListI13EZUI_PageItemE3addEiS0_+0x298>
    4374:	d6 01       	movw	r26, r12
    4376:	ed 91       	ld	r30, X+
    4378:	fc 91       	ld	r31, X
    437a:	e6 80       	ldd	r14, Z+6	; 0x06
    437c:	f7 80       	ldd	r15, Z+7	; 0x07
    437e:	fa 01       	movw	r30, r20
    4380:	80 81       	ld	r24, Z
    4382:	89 83       	std	Y+1, r24	; 0x01
    4384:	81 81       	ldd	r24, Z+1	; 0x01
    4386:	8a 83       	std	Y+2, r24	; 0x02
    4388:	82 81       	ldd	r24, Z+2	; 0x02
    438a:	8b 83       	std	Y+3, r24	; 0x03
    438c:	ba 01       	movw	r22, r20
    438e:	6d 5f       	subi	r22, 0xFD	; 253
    4390:	7f 4f       	sbci	r23, 0xFF	; 255
    4392:	ce 01       	movw	r24, r28
    4394:	04 96       	adiw	r24, 0x04	; 4
    4396:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
    439a:	f8 01       	movw	r30, r16
    439c:	81 85       	ldd	r24, Z+9	; 0x09
    439e:	92 85       	ldd	r25, Z+10	; 0x0a
    43a0:	a3 85       	ldd	r26, Z+11	; 0x0b
    43a2:	b4 85       	ldd	r27, Z+12	; 0x0c
    43a4:	8a 87       	std	Y+10, r24	; 0x0a
    43a6:	9b 87       	std	Y+11, r25	; 0x0b
    43a8:	ac 87       	std	Y+12, r26	; 0x0c
    43aa:	bd 87       	std	Y+13, r27	; 0x0d
    43ac:	85 85       	ldd	r24, Z+13	; 0x0d
    43ae:	96 85       	ldd	r25, Z+14	; 0x0e
    43b0:	a7 85       	ldd	r26, Z+15	; 0x0f
    43b2:	b0 89       	ldd	r27, Z+16	; 0x10
    43b4:	8e 87       	std	Y+14, r24	; 0x0e
    43b6:	9f 87       	std	Y+15, r25	; 0x0f
    43b8:	a8 8b       	std	Y+16, r26	; 0x10
    43ba:	b9 8b       	std	Y+17, r27	; 0x11
    43bc:	81 89       	ldd	r24, Z+17	; 0x11
    43be:	8a 8b       	std	Y+18, r24	; 0x12
    43c0:	82 89       	ldd	r24, Z+18	; 0x12
    43c2:	93 89       	ldd	r25, Z+19	; 0x13
    43c4:	9c 8b       	std	Y+20, r25	; 0x14
    43c6:	8b 8b       	std	Y+19, r24	; 0x13
    43c8:	84 89       	ldd	r24, Z+20	; 0x14
    43ca:	95 89       	ldd	r25, Z+21	; 0x15
    43cc:	9e 8b       	std	Y+22, r25	; 0x16
    43ce:	8d 8b       	std	Y+21, r24	; 0x15
    43d0:	86 89       	ldd	r24, Z+22	; 0x16
    43d2:	97 89       	ldd	r25, Z+23	; 0x17
    43d4:	98 8f       	std	Y+24, r25	; 0x18
    43d6:	8f 8b       	std	Y+23, r24	; 0x17
    43d8:	80 8d       	ldd	r24, Z+24	; 0x18
    43da:	91 8d       	ldd	r25, Z+25	; 0x19
    43dc:	9a 8f       	std	Y+26, r25	; 0x1a
    43de:	89 8f       	std	Y+25, r24	; 0x19
    43e0:	82 8d       	ldd	r24, Z+26	; 0x1a
    43e2:	93 8d       	ldd	r25, Z+27	; 0x1b
    43e4:	9c 8f       	std	Y+28, r25	; 0x1c
    43e6:	8b 8f       	std	Y+27, r24	; 0x1b
    43e8:	b8 01       	movw	r22, r16
    43ea:	64 5e       	subi	r22, 0xE4	; 228
    43ec:	7f 4f       	sbci	r23, 0xFF	; 255
    43ee:	ce 01       	movw	r24, r28
    43f0:	4d 96       	adiw	r24, 0x1d	; 29
    43f2:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
    43f6:	b8 01       	movw	r22, r16
    43f8:	6e 5d       	subi	r22, 0xDE	; 222
    43fa:	7f 4f       	sbci	r23, 0xFF	; 255
    43fc:	ce 01       	movw	r24, r28
    43fe:	83 96       	adiw	r24, 0x23	; 35
    4400:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
    4404:	d8 01       	movw	r26, r16
    4406:	98 96       	adiw	r26, 0x28	; 40
    4408:	8d 91       	ld	r24, X+
    440a:	9c 91       	ld	r25, X
    440c:	99 97       	sbiw	r26, 0x29	; 41
    440e:	9a a7       	std	Y+42, r25	; 0x2a
    4410:	89 a7       	std	Y+41, r24	; 0x29
    4412:	9a 96       	adiw	r26, 0x2a	; 42
    4414:	8d 91       	ld	r24, X+
    4416:	9c 91       	ld	r25, X
    4418:	9b 97       	sbiw	r26, 0x2b	; 43
    441a:	9c a7       	std	Y+44, r25	; 0x2c
    441c:	8b a7       	std	Y+43, r24	; 0x2b
    441e:	9c 96       	adiw	r26, 0x2c	; 44
    4420:	8d 91       	ld	r24, X+
    4422:	9c 91       	ld	r25, X
    4424:	9d 97       	sbiw	r26, 0x2d	; 45
    4426:	9e a7       	std	Y+46, r25	; 0x2e
    4428:	8d a7       	std	Y+45, r24	; 0x2d
    442a:	9e 96       	adiw	r26, 0x2e	; 46
    442c:	8d 91       	ld	r24, X+
    442e:	9c 91       	ld	r25, X
    4430:	9f 97       	sbiw	r26, 0x2f	; 47
    4432:	98 ab       	std	Y+48, r25	; 0x30
    4434:	8f a7       	std	Y+47, r24	; 0x2f
    4436:	d0 96       	adiw	r26, 0x30	; 48
    4438:	8d 91       	ld	r24, X+
    443a:	9c 91       	ld	r25, X
    443c:	d1 97       	sbiw	r26, 0x31	; 49
    443e:	9a ab       	std	Y+50, r25	; 0x32
    4440:	89 ab       	std	Y+49, r24	; 0x31
    4442:	d2 96       	adiw	r26, 0x32	; 50
    4444:	8d 91       	ld	r24, X+
    4446:	9c 91       	ld	r25, X
    4448:	d3 97       	sbiw	r26, 0x33	; 51
    444a:	9c ab       	std	Y+52, r25	; 0x34
    444c:	8b ab       	std	Y+51, r24	; 0x33
    444e:	d4 96       	adiw	r26, 0x34	; 52
    4450:	8d 91       	ld	r24, X+
    4452:	9c 91       	ld	r25, X
    4454:	d5 97       	sbiw	r26, 0x35	; 53
    4456:	9e ab       	std	Y+54, r25	; 0x36
    4458:	8d ab       	std	Y+53, r24	; 0x35
    445a:	d6 96       	adiw	r26, 0x36	; 54
    445c:	8d 91       	ld	r24, X+
    445e:	9c 91       	ld	r25, X
    4460:	d7 97       	sbiw	r26, 0x37	; 55
    4462:	98 af       	std	Y+56, r25	; 0x38
    4464:	8f ab       	std	Y+55, r24	; 0x37
    4466:	d8 96       	adiw	r26, 0x38	; 56
    4468:	8d 91       	ld	r24, X+
    446a:	9c 91       	ld	r25, X
    446c:	d9 97       	sbiw	r26, 0x39	; 57
    446e:	9a af       	std	Y+58, r25	; 0x3a
    4470:	89 af       	std	Y+57, r24	; 0x39
    4472:	da 96       	adiw	r26, 0x3a	; 58
    4474:	8d 91       	ld	r24, X+
    4476:	9c 91       	ld	r25, X
    4478:	db 97       	sbiw	r26, 0x3b	; 59
    447a:	9c af       	std	Y+60, r25	; 0x3c
    447c:	8b af       	std	Y+59, r24	; 0x3b
    447e:	dc 96       	adiw	r26, 0x3c	; 60
    4480:	8d 91       	ld	r24, X+
    4482:	9c 91       	ld	r25, X
    4484:	dd 97       	sbiw	r26, 0x3d	; 61
    4486:	9e af       	std	Y+62, r25	; 0x3e
    4488:	8d af       	std	Y+61, r24	; 0x3d
    448a:	be 01       	movw	r22, r28
    448c:	6f 5f       	subi	r22, 0xFF	; 255
    448e:	7f 4f       	sbci	r23, 0xFF	; 255
    4490:	c6 01       	movw	r24, r12
    4492:	f7 01       	movw	r30, r14
    4494:	19 95       	eicall
    4496:	18 2f       	mov	r17, r24
    4498:	ce 01       	movw	r24, r28
    449a:	01 96       	adiw	r24, 0x01	; 1
    449c:	bd d2       	rcall	.+1402   	; 0x4a18 <_ZN13EZUI_PageItemD1Ev>
    449e:	c3 c0       	rjmp	.+390    	; 0x4626 <_ZN10LinkedListI13EZUI_PageItemE3addEiS0_+0x41e>
    44a0:	80 e4       	ldi	r24, 0x40	; 64
    44a2:	90 e0       	ldi	r25, 0x00	; 0
    44a4:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    44a8:	7c 01       	movw	r14, r24
    44aa:	80 e4       	ldi	r24, 0x40	; 64
    44ac:	d7 01       	movw	r26, r14
    44ae:	1d 92       	st	X+, r1
    44b0:	8a 95       	dec	r24
    44b2:	e9 f7       	brne	.-6      	; 0x44ae <_ZN10LinkedListI13EZUI_PageItemE3addEiS0_+0x2a6>
    44b4:	c7 01       	movw	r24, r14
    44b6:	69 d2       	rcall	.+1234   	; 0x498a <_ZN13EZUI_PageItemC1Ev>
    44b8:	b5 01       	movw	r22, r10
    44ba:	61 50       	subi	r22, 0x01	; 1
    44bc:	71 09       	sbc	r23, r1
    44be:	c6 01       	movw	r24, r12
    44c0:	bd d8       	rcall	.-3718   	; 0x363c <_ZN10LinkedListI13EZUI_PageItemE7getNodeEi>
    44c2:	5c 01       	movw	r10, r24
    44c4:	f8 01       	movw	r30, r16
    44c6:	80 81       	ld	r24, Z
    44c8:	d7 01       	movw	r26, r14
    44ca:	8c 93       	st	X, r24
    44cc:	81 81       	ldd	r24, Z+1	; 0x01
    44ce:	11 96       	adiw	r26, 0x01	; 1
    44d0:	8c 93       	st	X, r24
    44d2:	11 97       	sbiw	r26, 0x01	; 1
    44d4:	82 81       	ldd	r24, Z+2	; 0x02
    44d6:	12 96       	adiw	r26, 0x02	; 2
    44d8:	8c 93       	st	X, r24
    44da:	b8 01       	movw	r22, r16
    44dc:	6d 5f       	subi	r22, 0xFD	; 253
    44de:	7f 4f       	sbci	r23, 0xFF	; 255
    44e0:	c7 01       	movw	r24, r14
    44e2:	03 96       	adiw	r24, 0x03	; 3
    44e4:	0e 94 83 41 	call	0x8306	; 0x8306 <_ZN6StringaSERKS_>
    44e8:	f8 01       	movw	r30, r16
    44ea:	81 85       	ldd	r24, Z+9	; 0x09
    44ec:	92 85       	ldd	r25, Z+10	; 0x0a
    44ee:	a3 85       	ldd	r26, Z+11	; 0x0b
    44f0:	b4 85       	ldd	r27, Z+12	; 0x0c
    44f2:	f7 01       	movw	r30, r14
    44f4:	81 87       	std	Z+9, r24	; 0x09
    44f6:	92 87       	std	Z+10, r25	; 0x0a
    44f8:	a3 87       	std	Z+11, r26	; 0x0b
    44fa:	b4 87       	std	Z+12, r27	; 0x0c
    44fc:	f8 01       	movw	r30, r16
    44fe:	85 85       	ldd	r24, Z+13	; 0x0d
    4500:	96 85       	ldd	r25, Z+14	; 0x0e
    4502:	a7 85       	ldd	r26, Z+15	; 0x0f
    4504:	b0 89       	ldd	r27, Z+16	; 0x10
    4506:	f7 01       	movw	r30, r14
    4508:	85 87       	std	Z+13, r24	; 0x0d
    450a:	96 87       	std	Z+14, r25	; 0x0e
    450c:	a7 87       	std	Z+15, r26	; 0x0f
    450e:	b0 8b       	std	Z+16, r27	; 0x10
    4510:	d8 01       	movw	r26, r16
    4512:	51 96       	adiw	r26, 0x11	; 17
    4514:	8c 91       	ld	r24, X
    4516:	51 97       	sbiw	r26, 0x11	; 17
    4518:	81 8b       	std	Z+17, r24	; 0x11
    451a:	52 96       	adiw	r26, 0x12	; 18
    451c:	8d 91       	ld	r24, X+
    451e:	9c 91       	ld	r25, X
    4520:	53 97       	sbiw	r26, 0x13	; 19
    4522:	93 8b       	std	Z+19, r25	; 0x13
    4524:	82 8b       	std	Z+18, r24	; 0x12
    4526:	54 96       	adiw	r26, 0x14	; 20
    4528:	8d 91       	ld	r24, X+
    452a:	9c 91       	ld	r25, X
    452c:	55 97       	sbiw	r26, 0x15	; 21
    452e:	95 8b       	std	Z+21, r25	; 0x15
    4530:	84 8b       	std	Z+20, r24	; 0x14
    4532:	56 96       	adiw	r26, 0x16	; 22
    4534:	8d 91       	ld	r24, X+
    4536:	9c 91       	ld	r25, X
    4538:	57 97       	sbiw	r26, 0x17	; 23
    453a:	97 8b       	std	Z+23, r25	; 0x17
    453c:	86 8b       	std	Z+22, r24	; 0x16
    453e:	58 96       	adiw	r26, 0x18	; 24
    4540:	8d 91       	ld	r24, X+
    4542:	9c 91       	ld	r25, X
    4544:	59 97       	sbiw	r26, 0x19	; 25
    4546:	91 8f       	std	Z+25, r25	; 0x19
    4548:	80 8f       	std	Z+24, r24	; 0x18
    454a:	5a 96       	adiw	r26, 0x1a	; 26
    454c:	8d 91       	ld	r24, X+
    454e:	9c 91       	ld	r25, X
    4550:	5b 97       	sbiw	r26, 0x1b	; 27
    4552:	93 8f       	std	Z+27, r25	; 0x1b
    4554:	82 8f       	std	Z+26, r24	; 0x1a
    4556:	b8 01       	movw	r22, r16
    4558:	64 5e       	subi	r22, 0xE4	; 228
    455a:	7f 4f       	sbci	r23, 0xFF	; 255
    455c:	c7 01       	movw	r24, r14
    455e:	4c 96       	adiw	r24, 0x1c	; 28
    4560:	0e 94 83 41 	call	0x8306	; 0x8306 <_ZN6StringaSERKS_>
    4564:	b8 01       	movw	r22, r16
    4566:	6e 5d       	subi	r22, 0xDE	; 222
    4568:	7f 4f       	sbci	r23, 0xFF	; 255
    456a:	c7 01       	movw	r24, r14
    456c:	82 96       	adiw	r24, 0x22	; 34
    456e:	0e 94 83 41 	call	0x8306	; 0x8306 <_ZN6StringaSERKS_>
    4572:	f8 01       	movw	r30, r16
    4574:	80 a5       	ldd	r24, Z+40	; 0x28
    4576:	91 a5       	ldd	r25, Z+41	; 0x29
    4578:	d7 01       	movw	r26, r14
    457a:	99 96       	adiw	r26, 0x29	; 41
    457c:	9c 93       	st	X, r25
    457e:	8e 93       	st	-X, r24
    4580:	98 97       	sbiw	r26, 0x28	; 40
    4582:	82 a5       	ldd	r24, Z+42	; 0x2a
    4584:	93 a5       	ldd	r25, Z+43	; 0x2b
    4586:	9b 96       	adiw	r26, 0x2b	; 43
    4588:	9c 93       	st	X, r25
    458a:	8e 93       	st	-X, r24
    458c:	9a 97       	sbiw	r26, 0x2a	; 42
    458e:	84 a5       	ldd	r24, Z+44	; 0x2c
    4590:	95 a5       	ldd	r25, Z+45	; 0x2d
    4592:	9d 96       	adiw	r26, 0x2d	; 45
    4594:	9c 93       	st	X, r25
    4596:	8e 93       	st	-X, r24
    4598:	9c 97       	sbiw	r26, 0x2c	; 44
    459a:	86 a5       	ldd	r24, Z+46	; 0x2e
    459c:	97 a5       	ldd	r25, Z+47	; 0x2f
    459e:	9f 96       	adiw	r26, 0x2f	; 47
    45a0:	9c 93       	st	X, r25
    45a2:	8e 93       	st	-X, r24
    45a4:	9e 97       	sbiw	r26, 0x2e	; 46
    45a6:	80 a9       	ldd	r24, Z+48	; 0x30
    45a8:	91 a9       	ldd	r25, Z+49	; 0x31
    45aa:	d1 96       	adiw	r26, 0x31	; 49
    45ac:	9c 93       	st	X, r25
    45ae:	8e 93       	st	-X, r24
    45b0:	d0 97       	sbiw	r26, 0x30	; 48
    45b2:	82 a9       	ldd	r24, Z+50	; 0x32
    45b4:	93 a9       	ldd	r25, Z+51	; 0x33
    45b6:	d3 96       	adiw	r26, 0x33	; 51
    45b8:	9c 93       	st	X, r25
    45ba:	8e 93       	st	-X, r24
    45bc:	d2 97       	sbiw	r26, 0x32	; 50
    45be:	84 a9       	ldd	r24, Z+52	; 0x34
    45c0:	95 a9       	ldd	r25, Z+53	; 0x35
    45c2:	d5 96       	adiw	r26, 0x35	; 53
    45c4:	9c 93       	st	X, r25
    45c6:	8e 93       	st	-X, r24
    45c8:	d4 97       	sbiw	r26, 0x34	; 52
    45ca:	86 a9       	ldd	r24, Z+54	; 0x36
    45cc:	97 a9       	ldd	r25, Z+55	; 0x37
    45ce:	d7 96       	adiw	r26, 0x37	; 55
    45d0:	9c 93       	st	X, r25
    45d2:	8e 93       	st	-X, r24
    45d4:	d6 97       	sbiw	r26, 0x36	; 54
    45d6:	80 ad       	ldd	r24, Z+56	; 0x38
    45d8:	91 ad       	ldd	r25, Z+57	; 0x39
    45da:	d9 96       	adiw	r26, 0x39	; 57
    45dc:	9c 93       	st	X, r25
    45de:	8e 93       	st	-X, r24
    45e0:	d8 97       	sbiw	r26, 0x38	; 56
    45e2:	82 ad       	ldd	r24, Z+58	; 0x3a
    45e4:	93 ad       	ldd	r25, Z+59	; 0x3b
    45e6:	db 96       	adiw	r26, 0x3b	; 59
    45e8:	9c 93       	st	X, r25
    45ea:	8e 93       	st	-X, r24
    45ec:	da 97       	sbiw	r26, 0x3a	; 58
    45ee:	84 ad       	ldd	r24, Z+60	; 0x3c
    45f0:	95 ad       	ldd	r25, Z+61	; 0x3d
    45f2:	dd 96       	adiw	r26, 0x3d	; 61
    45f4:	9c 93       	st	X, r25
    45f6:	8e 93       	st	-X, r24
    45f8:	dc 97       	sbiw	r26, 0x3c	; 60
    45fa:	f5 01       	movw	r30, r10
    45fc:	86 ad       	ldd	r24, Z+62	; 0x3e
    45fe:	97 ad       	ldd	r25, Z+63	; 0x3f
    4600:	df 96       	adiw	r26, 0x3f	; 63
    4602:	9c 93       	st	X, r25
    4604:	8e 93       	st	-X, r24
    4606:	de 97       	sbiw	r26, 0x3e	; 62
    4608:	f7 ae       	std	Z+63, r15	; 0x3f
    460a:	e6 ae       	std	Z+62, r14	; 0x3e
    460c:	d6 01       	movw	r26, r12
    460e:	12 96       	adiw	r26, 0x02	; 2
    4610:	8d 91       	ld	r24, X+
    4612:	9c 91       	ld	r25, X
    4614:	13 97       	sbiw	r26, 0x03	; 3
    4616:	01 96       	adiw	r24, 0x01	; 1
    4618:	13 96       	adiw	r26, 0x03	; 3
    461a:	9c 93       	st	X, r25
    461c:	8e 93       	st	-X, r24
    461e:	12 97       	sbiw	r26, 0x02	; 2
    4620:	1c 96       	adiw	r26, 0x0c	; 12
    4622:	1c 92       	st	X, r1
    4624:	11 e0       	ldi	r17, 0x01	; 1
    4626:	81 2f       	mov	r24, r17
    4628:	ee 96       	adiw	r28, 0x3e	; 62
    462a:	0f b6       	in	r0, 0x3f	; 63
    462c:	f8 94       	cli
    462e:	de bf       	out	0x3e, r29	; 62
    4630:	0f be       	out	0x3f, r0	; 63
    4632:	cd bf       	out	0x3d, r28	; 61
    4634:	df 91       	pop	r29
    4636:	cf 91       	pop	r28
    4638:	1f 91       	pop	r17
    463a:	0f 91       	pop	r16
    463c:	ff 90       	pop	r15
    463e:	ef 90       	pop	r14
    4640:	df 90       	pop	r13
    4642:	cf 90       	pop	r12
    4644:	bf 90       	pop	r11
    4646:	af 90       	pop	r10
    4648:	08 95       	ret

0000464a <_ZN10LinkedListIiE7getNodeEi>:
    464a:	dc 01       	movw	r26, r24
    464c:	14 96       	adiw	r26, 0x04	; 4
    464e:	ed 91       	ld	r30, X+
    4650:	fc 91       	ld	r31, X
    4652:	15 97       	sbiw	r26, 0x05	; 5
    4654:	1c 96       	adiw	r26, 0x0c	; 12
    4656:	8c 91       	ld	r24, X
    4658:	1c 97       	sbiw	r26, 0x0c	; 12
    465a:	88 23       	and	r24, r24
    465c:	61 f0       	breq	.+24     	; 0x4676 <_ZN10LinkedListIiE7getNodeEi+0x2c>
    465e:	1a 96       	adiw	r26, 0x0a	; 10
    4660:	2d 91       	ld	r18, X+
    4662:	3c 91       	ld	r19, X
    4664:	1b 97       	sbiw	r26, 0x0b	; 11
    4666:	62 17       	cp	r22, r18
    4668:	73 07       	cpc	r23, r19
    466a:	44 f0       	brlt	.+16     	; 0x467c <_ZN10LinkedListIiE7getNodeEi+0x32>
    466c:	18 96       	adiw	r26, 0x08	; 8
    466e:	ed 91       	ld	r30, X+
    4670:	fc 91       	ld	r31, X
    4672:	19 97       	sbiw	r26, 0x09	; 9
    4674:	05 c0       	rjmp	.+10     	; 0x4680 <_ZN10LinkedListIiE7getNodeEi+0x36>
    4676:	20 e0       	ldi	r18, 0x00	; 0
    4678:	30 e0       	ldi	r19, 0x00	; 0
    467a:	02 c0       	rjmp	.+4      	; 0x4680 <_ZN10LinkedListIiE7getNodeEi+0x36>
    467c:	20 e0       	ldi	r18, 0x00	; 0
    467e:	30 e0       	ldi	r19, 0x00	; 0
    4680:	26 17       	cp	r18, r22
    4682:	37 07       	cpc	r19, r23
    4684:	64 f4       	brge	.+24     	; 0x469e <_ZN10LinkedListIiE7getNodeEi+0x54>
    4686:	30 97       	sbiw	r30, 0x00	; 0
    4688:	51 f0       	breq	.+20     	; 0x469e <_ZN10LinkedListIiE7getNodeEi+0x54>
    468a:	02 80       	ldd	r0, Z+2	; 0x02
    468c:	f3 81       	ldd	r31, Z+3	; 0x03
    468e:	e0 2d       	mov	r30, r0
    4690:	2f 5f       	subi	r18, 0xFF	; 255
    4692:	3f 4f       	sbci	r19, 0xFF	; 255
    4694:	26 17       	cp	r18, r22
    4696:	37 07       	cpc	r19, r23
    4698:	14 f4       	brge	.+4      	; 0x469e <_ZN10LinkedListIiE7getNodeEi+0x54>
    469a:	30 97       	sbiw	r30, 0x00	; 0
    469c:	b1 f7       	brne	.-20     	; 0x468a <_ZN10LinkedListIiE7getNodeEi+0x40>
    469e:	26 17       	cp	r18, r22
    46a0:	37 07       	cpc	r19, r23
    46a2:	79 f4       	brne	.+30     	; 0x46c2 <_ZN10LinkedListIiE7getNodeEi+0x78>
    46a4:	81 e0       	ldi	r24, 0x01	; 1
    46a6:	1c 96       	adiw	r26, 0x0c	; 12
    46a8:	8c 93       	st	X, r24
    46aa:	1c 97       	sbiw	r26, 0x0c	; 12
    46ac:	1b 96       	adiw	r26, 0x0b	; 11
    46ae:	3c 93       	st	X, r19
    46b0:	2e 93       	st	-X, r18
    46b2:	1a 97       	sbiw	r26, 0x0a	; 10
    46b4:	19 96       	adiw	r26, 0x09	; 9
    46b6:	fc 93       	st	X, r31
    46b8:	ee 93       	st	-X, r30
    46ba:	18 97       	sbiw	r26, 0x08	; 8
    46bc:	8e 2f       	mov	r24, r30
    46be:	9f 2f       	mov	r25, r31
    46c0:	08 95       	ret
    46c2:	80 e0       	ldi	r24, 0x00	; 0
    46c4:	90 e0       	ldi	r25, 0x00	; 0
    46c6:	08 95       	ret

000046c8 <_ZN10LinkedListIiE3getEi>:
    46c8:	c0 df       	rcall	.-128    	; 0x464a <_ZN10LinkedListIiE7getNodeEi>
    46ca:	00 97       	sbiw	r24, 0x00	; 0
    46cc:	21 f0       	breq	.+8      	; 0x46d6 <_ZN10LinkedListIiE3getEi+0xe>
    46ce:	fc 01       	movw	r30, r24
    46d0:	80 81       	ld	r24, Z
    46d2:	91 81       	ldd	r25, Z+1	; 0x01
    46d4:	08 95       	ret
    46d6:	80 e0       	ldi	r24, 0x00	; 0
    46d8:	90 e0       	ldi	r25, 0x00	; 0
    46da:	08 95       	ret

000046dc <_ZN9EZUI_Page8nextItemEv>:

void EZUI_Page::nextItem(void){
    46dc:	cf 92       	push	r12
    46de:	df 92       	push	r13
    46e0:	ef 92       	push	r14
    46e2:	ff 92       	push	r15
    46e4:	0f 93       	push	r16
    46e6:	1f 93       	push	r17
    46e8:	cf 93       	push	r28
    46ea:	df 93       	push	r29
    46ec:	00 d0       	rcall	.+0      	; 0x46ee <_ZN9EZUI_Page8nextItemEv+0x12>
    46ee:	00 d0       	rcall	.+0      	; 0x46f0 <_ZN9EZUI_Page8nextItemEv+0x14>
    46f0:	cd b7       	in	r28, 0x3d	; 61
    46f2:	de b7       	in	r29, 0x3e	; 62
    46f4:	7c 01       	movw	r14, r24
	if(currentItem > -1){
    46f6:	fc 01       	movw	r30, r24
    46f8:	02 a5       	ldd	r16, Z+42	; 0x2a
    46fa:	13 a5       	ldd	r17, Z+43	; 0x2b
    46fc:	11 23       	and	r17, r17
    46fe:	f4 f0       	brlt	.+60     	; 0x473c <_ZN9EZUI_Page8nextItemEv+0x60>
		for( int i=currentItem; i<(SelectableItems.size()-1); i++){
    4700:	6c 01       	movw	r12, r24
    4702:	f5 e1       	ldi	r31, 0x15	; 21
    4704:	cf 0e       	add	r12, r31
    4706:	d1 1c       	adc	r13, r1
    4708:	fc 01       	movw	r30, r24
    470a:	87 89       	ldd	r24, Z+23	; 0x17
    470c:	90 8d       	ldd	r25, Z+24	; 0x18
    470e:	01 97       	sbiw	r24, 0x01	; 1
    4710:	08 17       	cp	r16, r24
    4712:	19 07       	cpc	r17, r25
    4714:	9c f4       	brge	.+38     	; 0x473c <_ZN9EZUI_Page8nextItemEv+0x60>
			if (SelectableItems.get(i) == 1){
    4716:	b8 01       	movw	r22, r16
    4718:	c6 01       	movw	r24, r12
    471a:	d6 df       	rcall	.-84     	; 0x46c8 <_ZN10LinkedListIiE3getEi>
    471c:	01 97       	sbiw	r24, 0x01	; 1
    471e:	21 f4       	brne	.+8      	; 0x4728 <_ZN9EZUI_Page8nextItemEv+0x4c>
				currentItem = i;
    4720:	f7 01       	movw	r30, r14
    4722:	13 a7       	std	Z+43, r17	; 0x2b
    4724:	02 a7       	std	Z+42, r16	; 0x2a
				break;
    4726:	0a c0       	rjmp	.+20     	; 0x473c <_ZN9EZUI_Page8nextItemEv+0x60>
	refresh = 1;
}

void EZUI_Page::nextItem(void){
	if(currentItem > -1){
		for( int i=currentItem; i<(SelectableItems.size()-1); i++){
    4728:	0f 5f       	subi	r16, 0xFF	; 255
    472a:	1f 4f       	sbci	r17, 0xFF	; 255
    472c:	f7 01       	movw	r30, r14
    472e:	27 89       	ldd	r18, Z+23	; 0x17
    4730:	30 8d       	ldd	r19, Z+24	; 0x18
    4732:	21 50       	subi	r18, 0x01	; 1
    4734:	31 09       	sbc	r19, r1
    4736:	02 17       	cp	r16, r18
    4738:	13 07       	cpc	r17, r19
    473a:	6c f3       	brlt	.-38     	; 0x4716 <_ZN9EZUI_Page8nextItemEv+0x3a>
				currentItem = i;
				break;
			}
		}
	}
	Serial.println(Name + " - Encoder Item: ");
    473c:	b7 01       	movw	r22, r14
    473e:	6e 5f       	subi	r22, 0xFE	; 254
    4740:	7f 4f       	sbci	r23, 0xFF	; 255
{
public:
	StringSumHelper(const String &s) : String(s) {}
    4742:	ce 01       	movw	r24, r28
    4744:	01 96       	adiw	r24, 0x01	; 1
    4746:	0e 94 98 41 	call	0x8330	; 0x8330 <_ZN6StringC1ERKS_>
    474a:	60 ef       	ldi	r22, 0xF0	; 240
    474c:	73 e0       	ldi	r23, 0x03	; 3
    474e:	ce 01       	movw	r24, r28
    4750:	01 96       	adiw	r24, 0x01	; 1
    4752:	0e 94 ff 41 	call	0x83fe	; 0x83fe <_ZplRK15StringSumHelperPKc>
    4756:	bc 01       	movw	r22, r24
    4758:	82 e8       	ldi	r24, 0x82	; 130
    475a:	98 e0       	ldi	r25, 0x08	; 8
    475c:	0e 94 77 3a 	call	0x74ee	; 0x74ee <_ZN5Print7printlnERK6String>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    4760:	ce 01       	movw	r24, r28
    4762:	01 96       	adiw	r24, 0x01	; 1
    4764:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
	Serial.println(currentItem);
    4768:	f7 01       	movw	r30, r14
    476a:	62 a5       	ldd	r22, Z+42	; 0x2a
    476c:	73 a5       	ldd	r23, Z+43	; 0x2b
    476e:	4a e0       	ldi	r20, 0x0A	; 10
    4770:	50 e0       	ldi	r21, 0x00	; 0
    4772:	82 e8       	ldi	r24, 0x82	; 130
    4774:	98 e0       	ldi	r25, 0x08	; 8
    4776:	0e 94 49 3b 	call	0x7692	; 0x7692 <_ZN5Print7printlnEii>
	refresh = 1;
    477a:	81 e0       	ldi	r24, 0x01	; 1
    477c:	90 e0       	ldi	r25, 0x00	; 0
    477e:	f7 01       	movw	r30, r14
    4780:	95 a7       	std	Z+45, r25	; 0x2d
    4782:	84 a7       	std	Z+44, r24	; 0x2c
}
    4784:	26 96       	adiw	r28, 0x06	; 6
    4786:	0f b6       	in	r0, 0x3f	; 63
    4788:	f8 94       	cli
    478a:	de bf       	out	0x3e, r29	; 62
    478c:	0f be       	out	0x3f, r0	; 63
    478e:	cd bf       	out	0x3d, r28	; 61
    4790:	df 91       	pop	r29
    4792:	cf 91       	pop	r28
    4794:	1f 91       	pop	r17
    4796:	0f 91       	pop	r16
    4798:	ff 90       	pop	r15
    479a:	ef 90       	pop	r14
    479c:	df 90       	pop	r13
    479e:	cf 90       	pop	r12
    47a0:	08 95       	ret

000047a2 <_ZN10LinkedListIiE3popEv>:
	getNode(index)->data = _t;
	return true;
}

template<typename T>
T LinkedList<T>::pop(){
    47a2:	ef 92       	push	r14
    47a4:	ff 92       	push	r15
    47a6:	0f 93       	push	r16
    47a8:	1f 93       	push	r17
    47aa:	cf 93       	push	r28
    47ac:	df 93       	push	r29
	if(_size <= 0)
    47ae:	fc 01       	movw	r30, r24
    47b0:	62 81       	ldd	r22, Z+2	; 0x02
    47b2:	73 81       	ldd	r23, Z+3	; 0x03
    47b4:	16 16       	cp	r1, r22
    47b6:	17 06       	cpc	r1, r23
    47b8:	74 f5       	brge	.+92     	; 0x4816 <_ZN10LinkedListIiE3popEv+0x74>
    47ba:	ec 01       	movw	r28, r24
		return T();
	
	isCached = false;
    47bc:	14 86       	std	Z+12, r1	; 0x0c

	if(_size >= 2){
    47be:	62 30       	cpi	r22, 0x02	; 2
    47c0:	71 05       	cpc	r23, r1
    47c2:	cc f0       	brlt	.+50     	; 0x47f6 <_ZN10LinkedListIiE3popEv+0x54>
		ListNode<T> *tmp = getNode(_size - 2);
    47c4:	62 50       	subi	r22, 0x02	; 2
    47c6:	71 09       	sbc	r23, r1
    47c8:	40 df       	rcall	.-384    	; 0x464a <_ZN10LinkedListIiE7getNodeEi>
    47ca:	7c 01       	movw	r14, r24
		T ret = tmp->next->data;
    47cc:	fc 01       	movw	r30, r24
    47ce:	82 81       	ldd	r24, Z+2	; 0x02
    47d0:	93 81       	ldd	r25, Z+3	; 0x03
    47d2:	fc 01       	movw	r30, r24
    47d4:	00 81       	ld	r16, Z
    47d6:	11 81       	ldd	r17, Z+1	; 0x01
		delete(tmp->next);
    47d8:	0e 94 0e 3a 	call	0x741c	; 0x741c <_ZdlPv>
		tmp->next = false;
    47dc:	f7 01       	movw	r30, r14
    47de:	13 82       	std	Z+3, r1	; 0x03
    47e0:	12 82       	std	Z+2, r1	; 0x02
		last = tmp;
    47e2:	ff 82       	std	Y+7, r15	; 0x07
    47e4:	ee 82       	std	Y+6, r14	; 0x06
		_size--;
    47e6:	8a 81       	ldd	r24, Y+2	; 0x02
    47e8:	9b 81       	ldd	r25, Y+3	; 0x03
    47ea:	01 97       	sbiw	r24, 0x01	; 1
    47ec:	9b 83       	std	Y+3, r25	; 0x03
    47ee:	8a 83       	std	Y+2, r24	; 0x02
		return ret;
    47f0:	80 2f       	mov	r24, r16
    47f2:	91 2f       	mov	r25, r17
    47f4:	12 c0       	rjmp	.+36     	; 0x481a <_ZN10LinkedListIiE3popEv+0x78>
	}else{
		// Only one element left on the list
		T ret = root->data;
    47f6:	84 81       	ldd	r24, Z+4	; 0x04
    47f8:	95 81       	ldd	r25, Z+5	; 0x05
    47fa:	fc 01       	movw	r30, r24
    47fc:	00 81       	ld	r16, Z
    47fe:	11 81       	ldd	r17, Z+1	; 0x01
		delete(root);
    4800:	0e 94 0e 3a 	call	0x741c	; 0x741c <_ZdlPv>
		root = false;
    4804:	1d 82       	std	Y+5, r1	; 0x05
    4806:	1c 82       	std	Y+4, r1	; 0x04
		last = false;
    4808:	1f 82       	std	Y+7, r1	; 0x07
    480a:	1e 82       	std	Y+6, r1	; 0x06
		_size = 0;
    480c:	1b 82       	std	Y+3, r1	; 0x03
    480e:	1a 82       	std	Y+2, r1	; 0x02
		return ret;
    4810:	80 2f       	mov	r24, r16
    4812:	91 2f       	mov	r25, r17
    4814:	02 c0       	rjmp	.+4      	; 0x481a <_ZN10LinkedListIiE3popEv+0x78>
}

template<typename T>
T LinkedList<T>::pop(){
	if(_size <= 0)
		return T();
    4816:	80 e0       	ldi	r24, 0x00	; 0
    4818:	90 e0       	ldi	r25, 0x00	; 0
		root = false;
		last = false;
		_size = 0;
		return ret;
	}
}
    481a:	df 91       	pop	r29
    481c:	cf 91       	pop	r28
    481e:	1f 91       	pop	r17
    4820:	0f 91       	pop	r16
    4822:	ff 90       	pop	r15
    4824:	ef 90       	pop	r14
    4826:	08 95       	ret

00004828 <_ZN10LinkedListIiE6removeEi>:
	}

}

template<typename T>
T LinkedList<T>::remove(int index){
    4828:	0f 93       	push	r16
    482a:	1f 93       	push	r17
    482c:	cf 93       	push	r28
    482e:	df 93       	push	r29
	if (index < 0 || index >= _size)
    4830:	77 23       	and	r23, r23
    4832:	dc f1       	brlt	.+118    	; 0x48aa <_ZN10LinkedListIiE6removeEi+0x82>
    4834:	dc 01       	movw	r26, r24
    4836:	12 96       	adiw	r26, 0x02	; 2
    4838:	2d 91       	ld	r18, X+
    483a:	3c 91       	ld	r19, X
    483c:	13 97       	sbiw	r26, 0x03	; 3
    483e:	62 17       	cp	r22, r18
    4840:	73 07       	cpc	r23, r19
    4842:	b4 f5       	brge	.+108    	; 0x48b0 <_ZN10LinkedListIiE6removeEi+0x88>
    4844:	ec 01       	movw	r28, r24
	{
		return T();
	}

	if(index == 0)
    4846:	61 15       	cp	r22, r1
    4848:	71 05       	cpc	r23, r1
    484a:	39 f4       	brne	.+14     	; 0x485a <_ZN10LinkedListIiE6removeEi+0x32>
		return shift();
    484c:	e8 81       	ld	r30, Y
    484e:	f9 81       	ldd	r31, Y+1	; 0x01
    4850:	06 84       	ldd	r0, Z+14	; 0x0e
    4852:	f7 85       	ldd	r31, Z+15	; 0x0f
    4854:	e0 2d       	mov	r30, r0
    4856:	19 95       	eicall
    4858:	2d c0       	rjmp	.+90     	; 0x48b4 <_ZN10LinkedListIiE6removeEi+0x8c>
	
	if (index == _size-1)
    485a:	21 50       	subi	r18, 0x01	; 1
    485c:	31 09       	sbc	r19, r1
    485e:	26 17       	cp	r18, r22
    4860:	37 07       	cpc	r19, r23
    4862:	39 f4       	brne	.+14     	; 0x4872 <_ZN10LinkedListIiE6removeEi+0x4a>
	{
		return pop();
    4864:	e8 81       	ld	r30, Y
    4866:	f9 81       	ldd	r31, Y+1	; 0x01
    4868:	04 84       	ldd	r0, Z+12	; 0x0c
    486a:	f5 85       	ldd	r31, Z+13	; 0x0d
    486c:	e0 2d       	mov	r30, r0
    486e:	19 95       	eicall
    4870:	21 c0       	rjmp	.+66     	; 0x48b4 <_ZN10LinkedListIiE6removeEi+0x8c>
	}

	ListNode<T> *tmp = getNode(index - 1);
    4872:	61 50       	subi	r22, 0x01	; 1
    4874:	71 09       	sbc	r23, r1
    4876:	e9 de       	rcall	.-558    	; 0x464a <_ZN10LinkedListIiE7getNodeEi>
	ListNode<T> *toDelete = tmp->next;
    4878:	dc 01       	movw	r26, r24
    487a:	12 96       	adiw	r26, 0x02	; 2
    487c:	ed 91       	ld	r30, X+
    487e:	fc 91       	ld	r31, X
    4880:	13 97       	sbiw	r26, 0x03	; 3
	T ret = toDelete->data;
    4882:	00 81       	ld	r16, Z
    4884:	11 81       	ldd	r17, Z+1	; 0x01
	tmp->next = tmp->next->next;
    4886:	22 81       	ldd	r18, Z+2	; 0x02
    4888:	33 81       	ldd	r19, Z+3	; 0x03
    488a:	13 96       	adiw	r26, 0x03	; 3
    488c:	3c 93       	st	X, r19
    488e:	2e 93       	st	-X, r18
    4890:	12 97       	sbiw	r26, 0x02	; 2
	delete(toDelete);
    4892:	cf 01       	movw	r24, r30
    4894:	0e 94 0e 3a 	call	0x741c	; 0x741c <_ZdlPv>
	_size--;
    4898:	8a 81       	ldd	r24, Y+2	; 0x02
    489a:	9b 81       	ldd	r25, Y+3	; 0x03
    489c:	01 97       	sbiw	r24, 0x01	; 1
    489e:	9b 83       	std	Y+3, r25	; 0x03
    48a0:	8a 83       	std	Y+2, r24	; 0x02
	isCached = false;
    48a2:	1c 86       	std	Y+12, r1	; 0x0c
	return ret;
    48a4:	80 2f       	mov	r24, r16
    48a6:	91 2f       	mov	r25, r17
    48a8:	05 c0       	rjmp	.+10     	; 0x48b4 <_ZN10LinkedListIiE6removeEi+0x8c>

template<typename T>
T LinkedList<T>::remove(int index){
	if (index < 0 || index >= _size)
	{
		return T();
    48aa:	80 e0       	ldi	r24, 0x00	; 0
    48ac:	90 e0       	ldi	r25, 0x00	; 0
    48ae:	02 c0       	rjmp	.+4      	; 0x48b4 <_ZN10LinkedListIiE6removeEi+0x8c>
    48b0:	80 e0       	ldi	r24, 0x00	; 0
    48b2:	90 e0       	ldi	r25, 0x00	; 0
	tmp->next = tmp->next->next;
	delete(toDelete);
	_size--;
	isCached = false;
	return ret;
}
    48b4:	df 91       	pop	r29
    48b6:	cf 91       	pop	r28
    48b8:	1f 91       	pop	r17
    48ba:	0f 91       	pop	r16
    48bc:	08 95       	ret

000048be <_ZN10LinkedListIiE3setEii>:
	
	return true;
}

template<typename T>
bool LinkedList<T>::set(int index, T _t){
    48be:	cf 93       	push	r28
    48c0:	df 93       	push	r29
	// Check if index position is in bounds
	if(index < 0 || index >= _size)
    48c2:	77 23       	and	r23, r23
    48c4:	6c f0       	brlt	.+26     	; 0x48e0 <_ZN10LinkedListIiE3setEii+0x22>
    48c6:	fc 01       	movw	r30, r24
    48c8:	22 81       	ldd	r18, Z+2	; 0x02
    48ca:	33 81       	ldd	r19, Z+3	; 0x03
    48cc:	62 17       	cp	r22, r18
    48ce:	73 07       	cpc	r23, r19
    48d0:	4c f4       	brge	.+18     	; 0x48e4 <_ZN10LinkedListIiE3setEii+0x26>
    48d2:	ea 01       	movw	r28, r20
		return false;

	getNode(index)->data = _t;
    48d4:	ba de       	rcall	.-652    	; 0x464a <_ZN10LinkedListIiE7getNodeEi>
    48d6:	fc 01       	movw	r30, r24
    48d8:	d1 83       	std	Z+1, r29	; 0x01
    48da:	c0 83       	st	Z, r28
	return true;
    48dc:	81 e0       	ldi	r24, 0x01	; 1
    48de:	03 c0       	rjmp	.+6      	; 0x48e6 <_ZN10LinkedListIiE3setEii+0x28>

template<typename T>
bool LinkedList<T>::set(int index, T _t){
	// Check if index position is in bounds
	if(index < 0 || index >= _size)
		return false;
    48e0:	80 e0       	ldi	r24, 0x00	; 0
    48e2:	01 c0       	rjmp	.+2      	; 0x48e6 <_ZN10LinkedListIiE3setEii+0x28>
    48e4:	80 e0       	ldi	r24, 0x00	; 0

	getNode(index)->data = _t;
	return true;
}
    48e6:	df 91       	pop	r29
    48e8:	cf 91       	pop	r28
    48ea:	08 95       	ret

000048ec <_ZN10LinkedListIiE3addEii>:
int LinkedList<T>::size(){
	return _size;
}

template<typename T>
bool LinkedList<T>::add(int index, T _t){
    48ec:	cf 92       	push	r12
    48ee:	df 92       	push	r13
    48f0:	ef 92       	push	r14
    48f2:	ff 92       	push	r15
    48f4:	0f 93       	push	r16
    48f6:	1f 93       	push	r17
    48f8:	cf 93       	push	r28
    48fa:	df 93       	push	r29
    48fc:	ec 01       	movw	r28, r24
    48fe:	8b 01       	movw	r16, r22
    4900:	6a 01       	movw	r12, r20

	if(index >= _size)
    4902:	8a 81       	ldd	r24, Y+2	; 0x02
    4904:	9b 81       	ldd	r25, Y+3	; 0x03
    4906:	68 17       	cp	r22, r24
    4908:	79 07       	cpc	r23, r25
    490a:	4c f0       	brlt	.+18     	; 0x491e <_ZN10LinkedListIiE3addEii+0x32>
		return add(_t);
    490c:	e8 81       	ld	r30, Y
    490e:	f9 81       	ldd	r31, Y+1	; 0x01
    4910:	04 80       	ldd	r0, Z+4	; 0x04
    4912:	f5 81       	ldd	r31, Z+5	; 0x05
    4914:	e0 2d       	mov	r30, r0
    4916:	ba 01       	movw	r22, r20
    4918:	ce 01       	movw	r24, r28
    491a:	19 95       	eicall
    491c:	2d c0       	rjmp	.+90     	; 0x4978 <_ZN10LinkedListIiE3addEii+0x8c>

	if(index == 0)
    491e:	67 2b       	or	r22, r23
    4920:	49 f4       	brne	.+18     	; 0x4934 <_ZN10LinkedListIiE3addEii+0x48>
		return unshift(_t);
    4922:	e8 81       	ld	r30, Y
    4924:	f9 81       	ldd	r31, Y+1	; 0x01
    4926:	06 80       	ldd	r0, Z+6	; 0x06
    4928:	f7 81       	ldd	r31, Z+7	; 0x07
    492a:	e0 2d       	mov	r30, r0
    492c:	ba 01       	movw	r22, r20
    492e:	ce 01       	movw	r24, r28
    4930:	19 95       	eicall
    4932:	22 c0       	rjmp	.+68     	; 0x4978 <_ZN10LinkedListIiE3addEii+0x8c>

	ListNode<T> *tmp = new ListNode<T>(),
    4934:	84 e0       	ldi	r24, 0x04	; 4
    4936:	90 e0       	ldi	r25, 0x00	; 0
    4938:	0e 94 0b 3a 	call	0x7416	; 0x7416 <_Znwj>
    493c:	7c 01       	movw	r14, r24
    493e:	fc 01       	movw	r30, r24
    4940:	11 82       	std	Z+1, r1	; 0x01
    4942:	10 82       	st	Z, r1
    4944:	13 82       	std	Z+3, r1	; 0x03
    4946:	12 82       	std	Z+2, r1	; 0x02
				 *_prev = getNode(index-1);
    4948:	b8 01       	movw	r22, r16
    494a:	61 50       	subi	r22, 0x01	; 1
    494c:	71 09       	sbc	r23, r1
    494e:	ce 01       	movw	r24, r28
    4950:	7c de       	rcall	.-776    	; 0x464a <_ZN10LinkedListIiE7getNodeEi>
	tmp->data = _t;
    4952:	f7 01       	movw	r30, r14
    4954:	d1 82       	std	Z+1, r13	; 0x01
    4956:	c0 82       	st	Z, r12
	tmp->next = _prev->next;
    4958:	fc 01       	movw	r30, r24
    495a:	22 81       	ldd	r18, Z+2	; 0x02
    495c:	33 81       	ldd	r19, Z+3	; 0x03
    495e:	f7 01       	movw	r30, r14
    4960:	33 83       	std	Z+3, r19	; 0x03
    4962:	22 83       	std	Z+2, r18	; 0x02
	_prev->next = tmp;
    4964:	fc 01       	movw	r30, r24
    4966:	f3 82       	std	Z+3, r15	; 0x03
    4968:	e2 82       	std	Z+2, r14	; 0x02

	_size++;
    496a:	8a 81       	ldd	r24, Y+2	; 0x02
    496c:	9b 81       	ldd	r25, Y+3	; 0x03
    496e:	01 96       	adiw	r24, 0x01	; 1
    4970:	9b 83       	std	Y+3, r25	; 0x03
    4972:	8a 83       	std	Y+2, r24	; 0x02
	isCached = false;
    4974:	1c 86       	std	Y+12, r1	; 0x0c

	return true;
    4976:	81 e0       	ldi	r24, 0x01	; 1
}
    4978:	df 91       	pop	r29
    497a:	cf 91       	pop	r28
    497c:	1f 91       	pop	r17
    497e:	0f 91       	pop	r16
    4980:	ff 90       	pop	r15
    4982:	ef 90       	pop	r14
    4984:	df 90       	pop	r13
    4986:	cf 90       	pop	r12
    4988:	08 95       	ret

0000498a <_ZN13EZUI_PageItemC1Ev>:
EZUI_PageItem::EZUI_PageItem(uint8_t colIndx, uint8_t rowIndx, EZUI_Control_ToggleOption * TlgOpt){
	col = colIndx;
	row = rowIndx;
	Type = ToggleOption;
	TglOptRef = TglOptRef;
}
    498a:	cf 93       	push	r28
    498c:	df 93       	push	r29
    498e:	ec 01       	movw	r28, r24
    4990:	18 82       	st	Y, r1
    4992:	19 82       	std	Y+1, r1	; 0x01
    4994:	84 e1       	ldi	r24, 0x14	; 20
    4996:	8a 83       	std	Y+2, r24	; 0x02
    4998:	60 ee       	ldi	r22, 0xE0	; 224
    499a:	75 e0       	ldi	r23, 0x05	; 5
    499c:	ce 01       	movw	r24, r28
    499e:	03 96       	adiw	r24, 0x03	; 3
    49a0:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    49a4:	19 86       	std	Y+9, r1	; 0x09
    49a6:	1a 86       	std	Y+10, r1	; 0x0a
    49a8:	1b 86       	std	Y+11, r1	; 0x0b
    49aa:	1c 86       	std	Y+12, r1	; 0x0c
    49ac:	1d 86       	std	Y+13, r1	; 0x0d
    49ae:	1e 86       	std	Y+14, r1	; 0x0e
    49b0:	1f 86       	std	Y+15, r1	; 0x0f
    49b2:	18 8a       	std	Y+16, r1	; 0x10
    49b4:	19 8a       	std	Y+17, r1	; 0x11
    49b6:	1b 8a       	std	Y+19, r1	; 0x13
    49b8:	1a 8a       	std	Y+18, r1	; 0x12
    49ba:	1d 8a       	std	Y+21, r1	; 0x15
    49bc:	1c 8a       	std	Y+20, r1	; 0x14
    49be:	1f 8a       	std	Y+23, r1	; 0x17
    49c0:	1e 8a       	std	Y+22, r1	; 0x16
    49c2:	19 8e       	std	Y+25, r1	; 0x19
    49c4:	18 8e       	std	Y+24, r1	; 0x18
    49c6:	8f ef       	ldi	r24, 0xFF	; 255
    49c8:	9f ef       	ldi	r25, 0xFF	; 255
    49ca:	9b 8f       	std	Y+27, r25	; 0x1b
    49cc:	8a 8f       	std	Y+26, r24	; 0x1a
    49ce:	60 ee       	ldi	r22, 0xE0	; 224
    49d0:	75 e0       	ldi	r23, 0x05	; 5
    49d2:	ce 01       	movw	r24, r28
    49d4:	4c 96       	adiw	r24, 0x1c	; 28
    49d6:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    49da:	60 ee       	ldi	r22, 0xE0	; 224
    49dc:	75 e0       	ldi	r23, 0x05	; 5
    49de:	ce 01       	movw	r24, r28
    49e0:	82 96       	adiw	r24, 0x22	; 34
    49e2:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    49e6:	19 a6       	std	Y+41, r1	; 0x29
    49e8:	18 a6       	std	Y+40, r1	; 0x28
    49ea:	1b a6       	std	Y+43, r1	; 0x2b
    49ec:	1a a6       	std	Y+42, r1	; 0x2a
    49ee:	1d a6       	std	Y+45, r1	; 0x2d
    49f0:	1c a6       	std	Y+44, r1	; 0x2c
    49f2:	1f a6       	std	Y+47, r1	; 0x2f
    49f4:	1e a6       	std	Y+46, r1	; 0x2e
    49f6:	19 aa       	std	Y+49, r1	; 0x31
    49f8:	18 aa       	std	Y+48, r1	; 0x30
    49fa:	1b aa       	std	Y+51, r1	; 0x33
    49fc:	1a aa       	std	Y+50, r1	; 0x32
    49fe:	1d aa       	std	Y+53, r1	; 0x35
    4a00:	1c aa       	std	Y+52, r1	; 0x34
    4a02:	1f aa       	std	Y+55, r1	; 0x37
    4a04:	1e aa       	std	Y+54, r1	; 0x36
    4a06:	19 ae       	std	Y+57, r1	; 0x39
    4a08:	18 ae       	std	Y+56, r1	; 0x38
    4a0a:	1b ae       	std	Y+59, r1	; 0x3b
    4a0c:	1a ae       	std	Y+58, r1	; 0x3a
    4a0e:	1d ae       	std	Y+61, r1	; 0x3d
    4a10:	1c ae       	std	Y+60, r1	; 0x3c
    4a12:	df 91       	pop	r29
    4a14:	cf 91       	pop	r28
    4a16:	08 95       	ret

00004a18 <_ZN13EZUI_PageItemD1Ev>:
    4a18:	cf 93       	push	r28
    4a1a:	df 93       	push	r29
    4a1c:	ec 01       	movw	r28, r24
    4a1e:	82 96       	adiw	r24, 0x22	; 34
    4a20:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
    4a24:	ce 01       	movw	r24, r28
    4a26:	4c 96       	adiw	r24, 0x1c	; 28
    4a28:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
    4a2c:	ce 01       	movw	r24, r28
    4a2e:	03 96       	adiw	r24, 0x03	; 3
    4a30:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
    4a34:	df 91       	pop	r29
    4a36:	cf 91       	pop	r28
    4a38:	08 95       	ret

00004a3a <_ZN13EZUI_PageItemC1Ehh6String>:
    4a3a:	cf 92       	push	r12
    4a3c:	df 92       	push	r13
    4a3e:	ef 92       	push	r14
    4a40:	ff 92       	push	r15
    4a42:	0f 93       	push	r16
    4a44:	1f 93       	push	r17
    4a46:	cf 93       	push	r28
    4a48:	df 93       	push	r29
    4a4a:	ec 01       	movw	r28, r24
    4a4c:	c6 2e       	mov	r12, r22
    4a4e:	d4 2e       	mov	r13, r20
    4a50:	79 01       	movw	r14, r18
    4a52:	18 82       	st	Y, r1
    4a54:	19 82       	std	Y+1, r1	; 0x01
    4a56:	84 e1       	ldi	r24, 0x14	; 20
    4a58:	8a 83       	std	Y+2, r24	; 0x02
    4a5a:	8e 01       	movw	r16, r28
    4a5c:	0d 5f       	subi	r16, 0xFD	; 253
    4a5e:	1f 4f       	sbci	r17, 0xFF	; 255
    4a60:	60 ee       	ldi	r22, 0xE0	; 224
    4a62:	75 e0       	ldi	r23, 0x05	; 5
    4a64:	c8 01       	movw	r24, r16
    4a66:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    4a6a:	19 86       	std	Y+9, r1	; 0x09
    4a6c:	1a 86       	std	Y+10, r1	; 0x0a
    4a6e:	1b 86       	std	Y+11, r1	; 0x0b
    4a70:	1c 86       	std	Y+12, r1	; 0x0c
    4a72:	1d 86       	std	Y+13, r1	; 0x0d
    4a74:	1e 86       	std	Y+14, r1	; 0x0e
    4a76:	1f 86       	std	Y+15, r1	; 0x0f
    4a78:	18 8a       	std	Y+16, r1	; 0x10
    4a7a:	19 8a       	std	Y+17, r1	; 0x11
    4a7c:	1b 8a       	std	Y+19, r1	; 0x13
    4a7e:	1a 8a       	std	Y+18, r1	; 0x12
    4a80:	1d 8a       	std	Y+21, r1	; 0x15
    4a82:	1c 8a       	std	Y+20, r1	; 0x14
    4a84:	1f 8a       	std	Y+23, r1	; 0x17
    4a86:	1e 8a       	std	Y+22, r1	; 0x16
    4a88:	19 8e       	std	Y+25, r1	; 0x19
    4a8a:	18 8e       	std	Y+24, r1	; 0x18
    4a8c:	8f ef       	ldi	r24, 0xFF	; 255
    4a8e:	9f ef       	ldi	r25, 0xFF	; 255
    4a90:	9b 8f       	std	Y+27, r25	; 0x1b
    4a92:	8a 8f       	std	Y+26, r24	; 0x1a
    4a94:	60 ee       	ldi	r22, 0xE0	; 224
    4a96:	75 e0       	ldi	r23, 0x05	; 5
    4a98:	ce 01       	movw	r24, r28
    4a9a:	4c 96       	adiw	r24, 0x1c	; 28
    4a9c:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    4aa0:	60 ee       	ldi	r22, 0xE0	; 224
    4aa2:	75 e0       	ldi	r23, 0x05	; 5
    4aa4:	ce 01       	movw	r24, r28
    4aa6:	82 96       	adiw	r24, 0x22	; 34
    4aa8:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    4aac:	19 a6       	std	Y+41, r1	; 0x29
    4aae:	18 a6       	std	Y+40, r1	; 0x28
    4ab0:	1b a6       	std	Y+43, r1	; 0x2b
    4ab2:	1a a6       	std	Y+42, r1	; 0x2a
    4ab4:	1d a6       	std	Y+45, r1	; 0x2d
    4ab6:	1c a6       	std	Y+44, r1	; 0x2c
    4ab8:	1f a6       	std	Y+47, r1	; 0x2f
    4aba:	1e a6       	std	Y+46, r1	; 0x2e
    4abc:	19 aa       	std	Y+49, r1	; 0x31
    4abe:	18 aa       	std	Y+48, r1	; 0x30
    4ac0:	1b aa       	std	Y+51, r1	; 0x33
    4ac2:	1a aa       	std	Y+50, r1	; 0x32
    4ac4:	1d aa       	std	Y+53, r1	; 0x35
    4ac6:	1c aa       	std	Y+52, r1	; 0x34
    4ac8:	1f aa       	std	Y+55, r1	; 0x37
    4aca:	1e aa       	std	Y+54, r1	; 0x36
    4acc:	19 ae       	std	Y+57, r1	; 0x39
    4ace:	18 ae       	std	Y+56, r1	; 0x38
    4ad0:	1b ae       	std	Y+59, r1	; 0x3b
    4ad2:	1a ae       	std	Y+58, r1	; 0x3a
    4ad4:	1d ae       	std	Y+61, r1	; 0x3d
    4ad6:	1c ae       	std	Y+60, r1	; 0x3c
    4ad8:	c8 82       	st	Y, r12
    4ada:	d9 82       	std	Y+1, r13	; 0x01
    4adc:	1a 82       	std	Y+2, r1	; 0x02
    4ade:	b7 01       	movw	r22, r14
    4ae0:	c8 01       	movw	r24, r16
    4ae2:	0e 94 83 41 	call	0x8306	; 0x8306 <_ZN6StringaSERKS_>
    4ae6:	df 91       	pop	r29
    4ae8:	cf 91       	pop	r28
    4aea:	1f 91       	pop	r17
    4aec:	0f 91       	pop	r16
    4aee:	ff 90       	pop	r15
    4af0:	ef 90       	pop	r14
    4af2:	df 90       	pop	r13
    4af4:	cf 90       	pop	r12
    4af6:	08 95       	ret

00004af8 <_ZN13EZUI_PageItemC1EhhPf>:
    4af8:	ef 92       	push	r14
    4afa:	ff 92       	push	r15
    4afc:	0f 93       	push	r16
    4afe:	1f 93       	push	r17
    4b00:	cf 93       	push	r28
    4b02:	df 93       	push	r29
    4b04:	ec 01       	movw	r28, r24
    4b06:	e6 2e       	mov	r14, r22
    4b08:	f4 2e       	mov	r15, r20
    4b0a:	89 01       	movw	r16, r18
    4b0c:	18 82       	st	Y, r1
    4b0e:	19 82       	std	Y+1, r1	; 0x01
    4b10:	84 e1       	ldi	r24, 0x14	; 20
    4b12:	8a 83       	std	Y+2, r24	; 0x02
    4b14:	60 ee       	ldi	r22, 0xE0	; 224
    4b16:	75 e0       	ldi	r23, 0x05	; 5
    4b18:	ce 01       	movw	r24, r28
    4b1a:	03 96       	adiw	r24, 0x03	; 3
    4b1c:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    4b20:	19 86       	std	Y+9, r1	; 0x09
    4b22:	1a 86       	std	Y+10, r1	; 0x0a
    4b24:	1b 86       	std	Y+11, r1	; 0x0b
    4b26:	1c 86       	std	Y+12, r1	; 0x0c
    4b28:	1d 86       	std	Y+13, r1	; 0x0d
    4b2a:	1e 86       	std	Y+14, r1	; 0x0e
    4b2c:	1f 86       	std	Y+15, r1	; 0x0f
    4b2e:	18 8a       	std	Y+16, r1	; 0x10
    4b30:	19 8a       	std	Y+17, r1	; 0x11
    4b32:	1b 8a       	std	Y+19, r1	; 0x13
    4b34:	1a 8a       	std	Y+18, r1	; 0x12
    4b36:	1d 8a       	std	Y+21, r1	; 0x15
    4b38:	1c 8a       	std	Y+20, r1	; 0x14
    4b3a:	1f 8a       	std	Y+23, r1	; 0x17
    4b3c:	1e 8a       	std	Y+22, r1	; 0x16
    4b3e:	19 8e       	std	Y+25, r1	; 0x19
    4b40:	18 8e       	std	Y+24, r1	; 0x18
    4b42:	8f ef       	ldi	r24, 0xFF	; 255
    4b44:	9f ef       	ldi	r25, 0xFF	; 255
    4b46:	9b 8f       	std	Y+27, r25	; 0x1b
    4b48:	8a 8f       	std	Y+26, r24	; 0x1a
    4b4a:	60 ee       	ldi	r22, 0xE0	; 224
    4b4c:	75 e0       	ldi	r23, 0x05	; 5
    4b4e:	ce 01       	movw	r24, r28
    4b50:	4c 96       	adiw	r24, 0x1c	; 28
    4b52:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    4b56:	60 ee       	ldi	r22, 0xE0	; 224
    4b58:	75 e0       	ldi	r23, 0x05	; 5
    4b5a:	ce 01       	movw	r24, r28
    4b5c:	82 96       	adiw	r24, 0x22	; 34
    4b5e:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    4b62:	19 a6       	std	Y+41, r1	; 0x29
    4b64:	18 a6       	std	Y+40, r1	; 0x28
    4b66:	1d a6       	std	Y+45, r1	; 0x2d
    4b68:	1c a6       	std	Y+44, r1	; 0x2c
    4b6a:	1f a6       	std	Y+47, r1	; 0x2f
    4b6c:	1e a6       	std	Y+46, r1	; 0x2e
    4b6e:	19 aa       	std	Y+49, r1	; 0x31
    4b70:	18 aa       	std	Y+48, r1	; 0x30
    4b72:	1b aa       	std	Y+51, r1	; 0x33
    4b74:	1a aa       	std	Y+50, r1	; 0x32
    4b76:	1d aa       	std	Y+53, r1	; 0x35
    4b78:	1c aa       	std	Y+52, r1	; 0x34
    4b7a:	1f aa       	std	Y+55, r1	; 0x37
    4b7c:	1e aa       	std	Y+54, r1	; 0x36
    4b7e:	19 ae       	std	Y+57, r1	; 0x39
    4b80:	18 ae       	std	Y+56, r1	; 0x38
    4b82:	1b ae       	std	Y+59, r1	; 0x3b
    4b84:	1a ae       	std	Y+58, r1	; 0x3a
    4b86:	1d ae       	std	Y+61, r1	; 0x3d
    4b88:	1c ae       	std	Y+60, r1	; 0x3c
    4b8a:	e8 82       	st	Y, r14
    4b8c:	f9 82       	std	Y+1, r15	; 0x01
    4b8e:	8a e0       	ldi	r24, 0x0A	; 10
    4b90:	8a 83       	std	Y+2, r24	; 0x02
    4b92:	1b a7       	std	Y+43, r17	; 0x2b
    4b94:	0a a7       	std	Y+42, r16	; 0x2a
    4b96:	f8 01       	movw	r30, r16
    4b98:	80 81       	ld	r24, Z
    4b9a:	91 81       	ldd	r25, Z+1	; 0x01
    4b9c:	a2 81       	ldd	r26, Z+2	; 0x02
    4b9e:	b3 81       	ldd	r27, Z+3	; 0x03
    4ba0:	89 87       	std	Y+9, r24	; 0x09
    4ba2:	9a 87       	std	Y+10, r25	; 0x0a
    4ba4:	ab 87       	std	Y+11, r26	; 0x0b
    4ba6:	bc 87       	std	Y+12, r27	; 0x0c
    4ba8:	df 91       	pop	r29
    4baa:	cf 91       	pop	r28
    4bac:	1f 91       	pop	r17
    4bae:	0f 91       	pop	r16
    4bb0:	ff 90       	pop	r15
    4bb2:	ef 90       	pop	r14
    4bb4:	08 95       	ret

00004bb6 <_ZN13EZUI_PageItemC1EhhP17EZUI_Control_Link>:

//Instantiate - Link
EZUI_PageItem::EZUI_PageItem(uint8_t colIndx, uint8_t rowIndx,EZUI_Control_Link * Lnk){
    4bb6:	ef 92       	push	r14
    4bb8:	ff 92       	push	r15
    4bba:	0f 93       	push	r16
    4bbc:	1f 93       	push	r17
    4bbe:	cf 93       	push	r28
    4bc0:	df 93       	push	r29
    4bc2:	ec 01       	movw	r28, r24
    4bc4:	e6 2e       	mov	r14, r22
    4bc6:	f4 2e       	mov	r15, r20
    4bc8:	89 01       	movw	r16, r18
    4bca:	18 82       	st	Y, r1
    4bcc:	19 82       	std	Y+1, r1	; 0x01
    4bce:	84 e1       	ldi	r24, 0x14	; 20
    4bd0:	8a 83       	std	Y+2, r24	; 0x02
    4bd2:	60 ee       	ldi	r22, 0xE0	; 224
    4bd4:	75 e0       	ldi	r23, 0x05	; 5
    4bd6:	ce 01       	movw	r24, r28
    4bd8:	03 96       	adiw	r24, 0x03	; 3
    4bda:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    4bde:	19 86       	std	Y+9, r1	; 0x09
    4be0:	1a 86       	std	Y+10, r1	; 0x0a
    4be2:	1b 86       	std	Y+11, r1	; 0x0b
    4be4:	1c 86       	std	Y+12, r1	; 0x0c
    4be6:	1d 86       	std	Y+13, r1	; 0x0d
    4be8:	1e 86       	std	Y+14, r1	; 0x0e
    4bea:	1f 86       	std	Y+15, r1	; 0x0f
    4bec:	18 8a       	std	Y+16, r1	; 0x10
    4bee:	19 8a       	std	Y+17, r1	; 0x11
    4bf0:	1b 8a       	std	Y+19, r1	; 0x13
    4bf2:	1a 8a       	std	Y+18, r1	; 0x12
    4bf4:	1d 8a       	std	Y+21, r1	; 0x15
    4bf6:	1c 8a       	std	Y+20, r1	; 0x14
    4bf8:	1f 8a       	std	Y+23, r1	; 0x17
    4bfa:	1e 8a       	std	Y+22, r1	; 0x16
    4bfc:	19 8e       	std	Y+25, r1	; 0x19
    4bfe:	18 8e       	std	Y+24, r1	; 0x18
    4c00:	8f ef       	ldi	r24, 0xFF	; 255
    4c02:	9f ef       	ldi	r25, 0xFF	; 255
    4c04:	9b 8f       	std	Y+27, r25	; 0x1b
    4c06:	8a 8f       	std	Y+26, r24	; 0x1a
    4c08:	60 ee       	ldi	r22, 0xE0	; 224
    4c0a:	75 e0       	ldi	r23, 0x05	; 5
    4c0c:	ce 01       	movw	r24, r28
    4c0e:	4c 96       	adiw	r24, 0x1c	; 28
    4c10:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    4c14:	60 ee       	ldi	r22, 0xE0	; 224
    4c16:	75 e0       	ldi	r23, 0x05	; 5
    4c18:	ce 01       	movw	r24, r28
    4c1a:	82 96       	adiw	r24, 0x22	; 34
    4c1c:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    4c20:	19 a6       	std	Y+41, r1	; 0x29
    4c22:	18 a6       	std	Y+40, r1	; 0x28
    4c24:	1b a6       	std	Y+43, r1	; 0x2b
    4c26:	1a a6       	std	Y+42, r1	; 0x2a
    4c28:	1d a6       	std	Y+45, r1	; 0x2d
    4c2a:	1c a6       	std	Y+44, r1	; 0x2c
    4c2c:	1f a6       	std	Y+47, r1	; 0x2f
    4c2e:	1e a6       	std	Y+46, r1	; 0x2e
    4c30:	19 aa       	std	Y+49, r1	; 0x31
    4c32:	18 aa       	std	Y+48, r1	; 0x30
    4c34:	1b aa       	std	Y+51, r1	; 0x33
    4c36:	1a aa       	std	Y+50, r1	; 0x32
    4c38:	1d aa       	std	Y+53, r1	; 0x35
    4c3a:	1c aa       	std	Y+52, r1	; 0x34
    4c3c:	1f aa       	std	Y+55, r1	; 0x37
    4c3e:	1e aa       	std	Y+54, r1	; 0x36
    4c40:	19 ae       	std	Y+57, r1	; 0x39
    4c42:	18 ae       	std	Y+56, r1	; 0x38
    4c44:	1b ae       	std	Y+59, r1	; 0x3b
    4c46:	1a ae       	std	Y+58, r1	; 0x3a
	col = colIndx;
    4c48:	e8 82       	st	Y, r14
	row = rowIndx;
    4c4a:	f9 82       	std	Y+1, r15	; 0x01
	Type = Link;
    4c4c:	83 e1       	ldi	r24, 0x13	; 19
    4c4e:	8a 83       	std	Y+2, r24	; 0x02
	LnkRef = Lnk;
    4c50:	1d af       	std	Y+61, r17	; 0x3d
    4c52:	0c af       	std	Y+60, r16	; 0x3c
}
    4c54:	df 91       	pop	r29
    4c56:	cf 91       	pop	r28
    4c58:	1f 91       	pop	r17
    4c5a:	0f 91       	pop	r16
    4c5c:	ff 90       	pop	r15
    4c5e:	ef 90       	pop	r14
    4c60:	08 95       	ret

00004c62 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb>:

void EZUI_PageItem::print(LiquidCrystal_I2C * LCD, bool refresh){
    4c62:	9f 92       	push	r9
    4c64:	af 92       	push	r10
    4c66:	bf 92       	push	r11
    4c68:	cf 92       	push	r12
    4c6a:	df 92       	push	r13
    4c6c:	ef 92       	push	r14
    4c6e:	ff 92       	push	r15
    4c70:	0f 93       	push	r16
    4c72:	1f 93       	push	r17
    4c74:	cf 93       	push	r28
    4c76:	df 93       	push	r29
    4c78:	cd b7       	in	r28, 0x3d	; 61
    4c7a:	de b7       	in	r29, 0x3e	; 62
    4c7c:	2c 97       	sbiw	r28, 0x0c	; 12
    4c7e:	0f b6       	in	r0, 0x3f	; 63
    4c80:	f8 94       	cli
    4c82:	de bf       	out	0x3e, r29	; 62
    4c84:	0f be       	out	0x3f, r0	; 63
    4c86:	cd bf       	out	0x3d, r28	; 61
    4c88:	8c 01       	movw	r16, r24
    4c8a:	5b 01       	movw	r10, r22
    4c8c:	94 2e       	mov	r9, r20
	LCD->setCursor(col, row);
    4c8e:	dc 01       	movw	r26, r24
    4c90:	11 96       	adiw	r26, 0x01	; 1
    4c92:	4c 91       	ld	r20, X
    4c94:	11 97       	sbiw	r26, 0x01	; 1
    4c96:	6c 91       	ld	r22, X
    4c98:	c5 01       	movw	r24, r10
    4c9a:	0e 94 45 30 	call	0x608a	; 0x608a <_ZN3LCD9setCursorEhh>
	switch(Type){
    4c9e:	f8 01       	movw	r30, r16
    4ca0:	c2 80       	ldd	r12, Z+2	; 0x02
    4ca2:	d1 2c       	mov	r13, r1
    4ca4:	f4 e1       	ldi	r31, 0x14	; 20
    4ca6:	cf 16       	cp	r12, r31
    4ca8:	d1 04       	cpc	r13, r1
    4caa:	08 f0       	brcs	.+2      	; 0x4cae <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x4c>
    4cac:	b4 c1       	rjmp	.+872    	; 0x5016 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x3b4>
    4cae:	f6 01       	movw	r30, r12
    4cb0:	88 27       	eor	r24, r24
    4cb2:	ee 58       	subi	r30, 0x8E	; 142
    4cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    4cb6:	8f 4f       	sbci	r24, 0xFF	; 255
    4cb8:	0c 94 b0 44 	jmp	0x8960	; 0x8960 <__tablejump2__>
			break;
			
		case StaticInt:
			//Serial.println("Printing Static Int");
			//Serial.println(StaticInt);
			LCD->print(IntVal);
    4cbc:	d8 01       	movw	r26, r16
    4cbe:	52 96       	adiw	r26, 0x12	; 18
    4cc0:	6d 91       	ld	r22, X+
    4cc2:	7c 91       	ld	r23, X
    4cc4:	53 97       	sbiw	r26, 0x13	; 19
    4cc6:	4a e0       	ldi	r20, 0x0A	; 10
    4cc8:	50 e0       	ldi	r21, 0x00	; 0
    4cca:	c5 01       	movw	r24, r10
    4ccc:	0e 94 42 3b 	call	0x7684	; 0x7684 <_ZN5Print5printEii>
			break;
    4cd0:	a2 c1       	rjmp	.+836    	; 0x5016 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x3b4>
		
		case StaticUInt:
			//Serial.println("Printing Static UInt");
			//Serial.println(UIntVal);
			LCD->print(UIntVal);
    4cd2:	f8 01       	movw	r30, r16
    4cd4:	64 89       	ldd	r22, Z+20	; 0x14
    4cd6:	75 89       	ldd	r23, Z+21	; 0x15
    4cd8:	4a e0       	ldi	r20, 0x0A	; 10
    4cda:	50 e0       	ldi	r21, 0x00	; 0
    4cdc:	c5 01       	movw	r24, r10
    4cde:	0e 94 42 3b 	call	0x7684	; 0x7684 <_ZN5Print5printEii>
			break;
    4ce2:	99 c1       	rjmp	.+818    	; 0x5016 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x3b4>
		
		case StaticLong:
			//Serial.println("Printing Static Long");
			//Serial.println(LongVal);
			LCD->print(LongVal);
    4ce4:	d8 01       	movw	r26, r16
    4ce6:	56 96       	adiw	r26, 0x16	; 22
    4ce8:	6d 91       	ld	r22, X+
    4cea:	7c 91       	ld	r23, X
    4cec:	57 97       	sbiw	r26, 0x17	; 23
    4cee:	4a e0       	ldi	r20, 0x0A	; 10
    4cf0:	50 e0       	ldi	r21, 0x00	; 0
    4cf2:	c5 01       	movw	r24, r10
    4cf4:	0e 94 42 3b 	call	0x7684	; 0x7684 <_ZN5Print5printEii>
			break;
    4cf8:	8e c1       	rjmp	.+796    	; 0x5016 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x3b4>
		
		case StaticULong:
			//Serial.println("Printing Static ULong");
			//Serial.println(ULongVal);
			LCD->print(ULongVal);
    4cfa:	f8 01       	movw	r30, r16
    4cfc:	60 8d       	ldd	r22, Z+24	; 0x18
    4cfe:	71 8d       	ldd	r23, Z+25	; 0x19
    4d00:	4a e0       	ldi	r20, 0x0A	; 10
    4d02:	50 e0       	ldi	r21, 0x00	; 0
    4d04:	c5 01       	movw	r24, r10
    4d06:	0e 94 42 3b 	call	0x7684	; 0x7684 <_ZN5Print5printEii>
			break;
    4d0a:	85 c1       	rjmp	.+778    	; 0x5016 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x3b4>
		
		case StaticFloat:
			//Serial.println("Printing Static Float");
			//Serial.println(FltVal);
			LCD->print(FltVal);
    4d0c:	d8 01       	movw	r26, r16
    4d0e:	19 96       	adiw	r26, 0x09	; 9
    4d10:	4d 91       	ld	r20, X+
    4d12:	5d 91       	ld	r21, X+
    4d14:	6d 91       	ld	r22, X+
    4d16:	7c 91       	ld	r23, X
    4d18:	1c 97       	sbiw	r26, 0x0c	; 12
    4d1a:	22 e0       	ldi	r18, 0x02	; 2
    4d1c:	30 e0       	ldi	r19, 0x00	; 0
    4d1e:	c5 01       	movw	r24, r10
    4d20:	0e 94 68 3c 	call	0x78d0	; 0x78d0 <_ZN5Print5printEdi>
			break;
    4d24:	78 c1       	rjmp	.+752    	; 0x5016 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x3b4>
		
		case StaticDouble:
			//Serial.println("Printing Static Double");
			//Serial.println(DblVal);
			LCD->print(DblVal);
    4d26:	f8 01       	movw	r30, r16
    4d28:	45 85       	ldd	r20, Z+13	; 0x0d
    4d2a:	56 85       	ldd	r21, Z+14	; 0x0e
    4d2c:	67 85       	ldd	r22, Z+15	; 0x0f
    4d2e:	70 89       	ldd	r23, Z+16	; 0x10
    4d30:	22 e0       	ldi	r18, 0x02	; 2
    4d32:	30 e0       	ldi	r19, 0x00	; 0
    4d34:	c5 01       	movw	r24, r10
    4d36:	0e 94 68 3c 	call	0x78d0	; 0x78d0 <_ZN5Print5printEdi>
			break;
    4d3a:	6d c1       	rjmp	.+730    	; 0x5016 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x3b4>
		
		case StaticBool:
			//Serial.println("Printing Static Bool");
			//Serial.println(BlnVal);
			LCD->print(BlnVal);
    4d3c:	d8 01       	movw	r26, r16
    4d3e:	51 96       	adiw	r26, 0x11	; 17
    4d40:	6c 91       	ld	r22, X
    4d42:	70 e0       	ldi	r23, 0x00	; 0
    4d44:	4a e0       	ldi	r20, 0x0A	; 10
    4d46:	50 e0       	ldi	r21, 0x00	; 0
    4d48:	c5 01       	movw	r24, r10
    4d4a:	0e 94 42 3b 	call	0x7684	; 0x7684 <_ZN5Print5printEii>
			break;
    4d4e:	63 c1       	rjmp	.+710    	; 0x5016 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x3b4>
		
		case StaticBoolWithText:
			//Serial.println("Printing Static Bool with Text");
			//Serial.println(BlnVal);
			if(BlnVal == true){
    4d50:	f8 01       	movw	r30, r16
    4d52:	81 89       	ldd	r24, Z+17	; 0x11
    4d54:	88 23       	and	r24, r24
    4d56:	39 f0       	breq	.+14     	; 0x4d66 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x104>
				LCD->print(BoolTrueText);
    4d58:	b8 01       	movw	r22, r16
    4d5a:	64 5e       	subi	r22, 0xE4	; 228
    4d5c:	7f 4f       	sbci	r23, 0xFF	; 255
    4d5e:	c5 01       	movw	r24, r10
    4d60:	0e 94 3e 3a 	call	0x747c	; 0x747c <_ZN5Print5printERK6String>
    4d64:	58 c1       	rjmp	.+688    	; 0x5016 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x3b4>
			}else{
				LCD->print(BoolFalseText);
    4d66:	b8 01       	movw	r22, r16
    4d68:	6e 5d       	subi	r22, 0xDE	; 222
    4d6a:	7f 4f       	sbci	r23, 0xFF	; 255
    4d6c:	c5 01       	movw	r24, r10
    4d6e:	0e 94 3e 3a 	call	0x747c	; 0x747c <_ZN5Print5printERK6String>
    4d72:	51 c1       	rjmp	.+674    	; 0x5016 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x3b4>
			break;
		
		case StaticString:
			//Serial.println("Printing Static STring");
			//Serial.println(StrVal);
			LCD->print(StrVal);
    4d74:	b8 01       	movw	r22, r16
    4d76:	6d 5f       	subi	r22, 0xFD	; 253
    4d78:	7f 4f       	sbci	r23, 0xFF	; 255
    4d7a:	c5 01       	movw	r24, r10
    4d7c:	0e 94 3e 3a 	call	0x747c	; 0x747c <_ZN5Print5printERK6String>
			break;
    4d80:	4a c1       	rjmp	.+660    	; 0x5016 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x3b4>
		
		case VarInt:
			//Serial.println("Printing Var Int");
			//Serial.println(*IntRef);
			if((IntVal != *IntRef) || refresh){
    4d82:	d8 01       	movw	r26, r16
    4d84:	d0 96       	adiw	r26, 0x30	; 48
    4d86:	ed 91       	ld	r30, X+
    4d88:	fc 91       	ld	r31, X
    4d8a:	d1 97       	sbiw	r26, 0x31	; 49
    4d8c:	60 81       	ld	r22, Z
    4d8e:	71 81       	ldd	r23, Z+1	; 0x01
    4d90:	52 96       	adiw	r26, 0x12	; 18
    4d92:	8d 91       	ld	r24, X+
    4d94:	9c 91       	ld	r25, X
    4d96:	53 97       	sbiw	r26, 0x13	; 19
    4d98:	86 17       	cp	r24, r22
    4d9a:	97 07       	cpc	r25, r23
    4d9c:	19 f4       	brne	.+6      	; 0x4da4 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x142>
    4d9e:	99 20       	and	r9, r9
    4da0:	09 f4       	brne	.+2      	; 0x4da4 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x142>
    4da2:	39 c1       	rjmp	.+626    	; 0x5016 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x3b4>
				IntVal = *IntRef;
    4da4:	f8 01       	movw	r30, r16
    4da6:	73 8b       	std	Z+19, r23	; 0x13
    4da8:	62 8b       	std	Z+18, r22	; 0x12
				LCD->print(IntVal);
    4daa:	4a e0       	ldi	r20, 0x0A	; 10
    4dac:	50 e0       	ldi	r21, 0x00	; 0
    4dae:	c5 01       	movw	r24, r10
    4db0:	0e 94 42 3b 	call	0x7684	; 0x7684 <_ZN5Print5printEii>
    4db4:	30 c1       	rjmp	.+608    	; 0x5016 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x3b4>
			break;
		
		case VarUInt:
			//Serial.println("Printing Var UInt");
			//Serial.println(*UIntRef);
			if((UIntVal != *UIntRef) || refresh ){
    4db6:	d8 01       	movw	r26, r16
    4db8:	d2 96       	adiw	r26, 0x32	; 50
    4dba:	ed 91       	ld	r30, X+
    4dbc:	fc 91       	ld	r31, X
    4dbe:	d3 97       	sbiw	r26, 0x33	; 51
    4dc0:	60 81       	ld	r22, Z
    4dc2:	71 81       	ldd	r23, Z+1	; 0x01
    4dc4:	54 96       	adiw	r26, 0x14	; 20
    4dc6:	8d 91       	ld	r24, X+
    4dc8:	9c 91       	ld	r25, X
    4dca:	55 97       	sbiw	r26, 0x15	; 21
    4dcc:	86 17       	cp	r24, r22
    4dce:	97 07       	cpc	r25, r23
    4dd0:	19 f4       	brne	.+6      	; 0x4dd8 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x176>
    4dd2:	99 20       	and	r9, r9
    4dd4:	09 f4       	brne	.+2      	; 0x4dd8 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x176>
    4dd6:	1f c1       	rjmp	.+574    	; 0x5016 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x3b4>
				UIntVal = *UIntRef;
    4dd8:	f8 01       	movw	r30, r16
    4dda:	75 8b       	std	Z+21, r23	; 0x15
    4ddc:	64 8b       	std	Z+20, r22	; 0x14
				LCD->print(UIntVal);
    4dde:	4a e0       	ldi	r20, 0x0A	; 10
    4de0:	50 e0       	ldi	r21, 0x00	; 0
    4de2:	c5 01       	movw	r24, r10
    4de4:	0e 94 42 3b 	call	0x7684	; 0x7684 <_ZN5Print5printEii>
    4de8:	16 c1       	rjmp	.+556    	; 0x5016 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x3b4>
			break;
		
		case VarLong:
			//Serial.println("Printing Var Long");
			//Serial.println(*LongRef);
			if(( LongVal != *LongRef) || refresh ){
    4dea:	d8 01       	movw	r26, r16
    4dec:	d4 96       	adiw	r26, 0x34	; 52
    4dee:	ed 91       	ld	r30, X+
    4df0:	fc 91       	ld	r31, X
    4df2:	d5 97       	sbiw	r26, 0x35	; 53
    4df4:	c0 80       	ld	r12, Z
    4df6:	d1 80       	ldd	r13, Z+1	; 0x01
    4df8:	e2 80       	ldd	r14, Z+2	; 0x02
    4dfa:	f3 80       	ldd	r15, Z+3	; 0x03
    4dfc:	56 96       	adiw	r26, 0x16	; 22
    4dfe:	8d 91       	ld	r24, X+
    4e00:	9c 91       	ld	r25, X
    4e02:	57 97       	sbiw	r26, 0x17	; 23
    4e04:	09 2e       	mov	r0, r25
    4e06:	00 0c       	add	r0, r0
    4e08:	aa 0b       	sbc	r26, r26
    4e0a:	bb 0b       	sbc	r27, r27
    4e0c:	8c 15       	cp	r24, r12
    4e0e:	9d 05       	cpc	r25, r13
    4e10:	ae 05       	cpc	r26, r14
    4e12:	bf 05       	cpc	r27, r15
    4e14:	19 f4       	brne	.+6      	; 0x4e1c <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x1ba>
    4e16:	99 20       	and	r9, r9
    4e18:	09 f4       	brne	.+2      	; 0x4e1c <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x1ba>
    4e1a:	fd c0       	rjmp	.+506    	; 0x5016 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x3b4>
				LongVal = *LongRef;
    4e1c:	f8 01       	movw	r30, r16
    4e1e:	d7 8a       	std	Z+23, r13	; 0x17
    4e20:	c6 8a       	std	Z+22, r12	; 0x16
				LCD->print(LongVal);
    4e22:	4a e0       	ldi	r20, 0x0A	; 10
    4e24:	50 e0       	ldi	r21, 0x00	; 0
    4e26:	b6 01       	movw	r22, r12
    4e28:	c5 01       	movw	r24, r10
    4e2a:	0e 94 42 3b 	call	0x7684	; 0x7684 <_ZN5Print5printEii>
    4e2e:	f3 c0       	rjmp	.+486    	; 0x5016 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x3b4>
			break;	
		
		case VarULong:
			//Serial.println("Printing Var ULong");
			//Serial.println(*ULongRef);
			if(( ULongVal != *ULongRef) || refresh ){
    4e30:	d8 01       	movw	r26, r16
    4e32:	d6 96       	adiw	r26, 0x36	; 54
    4e34:	ed 91       	ld	r30, X+
    4e36:	fc 91       	ld	r31, X
    4e38:	d7 97       	sbiw	r26, 0x37	; 55
    4e3a:	c0 80       	ld	r12, Z
    4e3c:	d1 80       	ldd	r13, Z+1	; 0x01
    4e3e:	e2 80       	ldd	r14, Z+2	; 0x02
    4e40:	f3 80       	ldd	r15, Z+3	; 0x03
    4e42:	58 96       	adiw	r26, 0x18	; 24
    4e44:	8d 91       	ld	r24, X+
    4e46:	9c 91       	ld	r25, X
    4e48:	59 97       	sbiw	r26, 0x19	; 25
    4e4a:	09 2e       	mov	r0, r25
    4e4c:	00 0c       	add	r0, r0
    4e4e:	aa 0b       	sbc	r26, r26
    4e50:	bb 0b       	sbc	r27, r27
    4e52:	8c 15       	cp	r24, r12
    4e54:	9d 05       	cpc	r25, r13
    4e56:	ae 05       	cpc	r26, r14
    4e58:	bf 05       	cpc	r27, r15
    4e5a:	19 f4       	brne	.+6      	; 0x4e62 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x200>
    4e5c:	99 20       	and	r9, r9
    4e5e:	09 f4       	brne	.+2      	; 0x4e62 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x200>
    4e60:	da c0       	rjmp	.+436    	; 0x5016 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x3b4>
				ULongVal = *ULongRef;
    4e62:	f8 01       	movw	r30, r16
    4e64:	d1 8e       	std	Z+25, r13	; 0x19
    4e66:	c0 8e       	std	Z+24, r12	; 0x18
				LCD->print(ULongVal);
    4e68:	4a e0       	ldi	r20, 0x0A	; 10
    4e6a:	50 e0       	ldi	r21, 0x00	; 0
    4e6c:	b6 01       	movw	r22, r12
    4e6e:	c5 01       	movw	r24, r10
    4e70:	0e 94 42 3b 	call	0x7684	; 0x7684 <_ZN5Print5printEii>
    4e74:	d0 c0       	rjmp	.+416    	; 0x5016 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x3b4>
			break;
			
		case VarFloat:
			//Serial.println("Printing Var Float");
			//Serial.println(*FltRef);
			if((FltVal != *FltRef) || refresh ){
    4e76:	d8 01       	movw	r26, r16
    4e78:	9a 96       	adiw	r26, 0x2a	; 42
    4e7a:	ed 91       	ld	r30, X+
    4e7c:	fc 91       	ld	r31, X
    4e7e:	9b 97       	sbiw	r26, 0x2b	; 43
    4e80:	c0 80       	ld	r12, Z
    4e82:	d1 80       	ldd	r13, Z+1	; 0x01
    4e84:	e2 80       	ldd	r14, Z+2	; 0x02
    4e86:	f3 80       	ldd	r15, Z+3	; 0x03
    4e88:	a7 01       	movw	r20, r14
    4e8a:	96 01       	movw	r18, r12
    4e8c:	19 96       	adiw	r26, 0x09	; 9
    4e8e:	6d 91       	ld	r22, X+
    4e90:	7d 91       	ld	r23, X+
    4e92:	8d 91       	ld	r24, X+
    4e94:	9c 91       	ld	r25, X
    4e96:	1c 97       	sbiw	r26, 0x0c	; 12
    4e98:	0e 94 c1 42 	call	0x8582	; 0x8582 <__cmpsf2>
    4e9c:	81 11       	cpse	r24, r1
    4e9e:	03 c0       	rjmp	.+6      	; 0x4ea6 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x244>
    4ea0:	99 20       	and	r9, r9
    4ea2:	09 f4       	brne	.+2      	; 0x4ea6 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x244>
    4ea4:	b8 c0       	rjmp	.+368    	; 0x5016 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x3b4>
				FltVal = *FltRef;
    4ea6:	f8 01       	movw	r30, r16
    4ea8:	c1 86       	std	Z+9, r12	; 0x09
    4eaa:	d2 86       	std	Z+10, r13	; 0x0a
    4eac:	e3 86       	std	Z+11, r14	; 0x0b
    4eae:	f4 86       	std	Z+12, r15	; 0x0c
				LCD->print(FltVal);
    4eb0:	22 e0       	ldi	r18, 0x02	; 2
    4eb2:	30 e0       	ldi	r19, 0x00	; 0
    4eb4:	b7 01       	movw	r22, r14
    4eb6:	a6 01       	movw	r20, r12
    4eb8:	c5 01       	movw	r24, r10
    4eba:	0e 94 68 3c 	call	0x78d0	; 0x78d0 <_ZN5Print5printEdi>
    4ebe:	ab c0       	rjmp	.+342    	; 0x5016 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x3b4>
			break;
				
		case VarDouble:
			//Serial.println("Printing Var Double");
			//Serial.println(*DblRef);
			if((DblVal != *DblRef) || refresh ){
    4ec0:	d8 01       	movw	r26, r16
    4ec2:	9c 96       	adiw	r26, 0x2c	; 44
    4ec4:	ed 91       	ld	r30, X+
    4ec6:	fc 91       	ld	r31, X
    4ec8:	9d 97       	sbiw	r26, 0x2d	; 45
    4eca:	c0 80       	ld	r12, Z
    4ecc:	d1 80       	ldd	r13, Z+1	; 0x01
    4ece:	e2 80       	ldd	r14, Z+2	; 0x02
    4ed0:	f3 80       	ldd	r15, Z+3	; 0x03
    4ed2:	a7 01       	movw	r20, r14
    4ed4:	96 01       	movw	r18, r12
    4ed6:	1d 96       	adiw	r26, 0x0d	; 13
    4ed8:	6d 91       	ld	r22, X+
    4eda:	7d 91       	ld	r23, X+
    4edc:	8d 91       	ld	r24, X+
    4ede:	9c 91       	ld	r25, X
    4ee0:	50 97       	sbiw	r26, 0x10	; 16
    4ee2:	0e 94 c1 42 	call	0x8582	; 0x8582 <__cmpsf2>
    4ee6:	81 11       	cpse	r24, r1
    4ee8:	03 c0       	rjmp	.+6      	; 0x4ef0 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x28e>
    4eea:	99 20       	and	r9, r9
    4eec:	09 f4       	brne	.+2      	; 0x4ef0 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x28e>
    4eee:	93 c0       	rjmp	.+294    	; 0x5016 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x3b4>
				DblVal = *DblRef;
    4ef0:	f8 01       	movw	r30, r16
    4ef2:	c5 86       	std	Z+13, r12	; 0x0d
    4ef4:	d6 86       	std	Z+14, r13	; 0x0e
    4ef6:	e7 86       	std	Z+15, r14	; 0x0f
    4ef8:	f0 8a       	std	Z+16, r15	; 0x10
				LCD->print(DblVal);
    4efa:	22 e0       	ldi	r18, 0x02	; 2
    4efc:	30 e0       	ldi	r19, 0x00	; 0
    4efe:	b7 01       	movw	r22, r14
    4f00:	a6 01       	movw	r20, r12
    4f02:	c5 01       	movw	r24, r10
    4f04:	0e 94 68 3c 	call	0x78d0	; 0x78d0 <_ZN5Print5printEdi>
    4f08:	86 c0       	rjmp	.+268    	; 0x5016 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x3b4>
			break;
			
		case VarBool:
			//Serial.println("Printing Var Bool");
			//Serial.println(*BlnRef);
			if((BlnVal != *BlnRef) || refresh){
    4f0a:	d8 01       	movw	r26, r16
    4f0c:	9e 96       	adiw	r26, 0x2e	; 46
    4f0e:	ed 91       	ld	r30, X+
    4f10:	fc 91       	ld	r31, X
    4f12:	9f 97       	sbiw	r26, 0x2f	; 47
    4f14:	60 81       	ld	r22, Z
    4f16:	51 96       	adiw	r26, 0x11	; 17
    4f18:	8c 91       	ld	r24, X
    4f1a:	86 13       	cpse	r24, r22
    4f1c:	03 c0       	rjmp	.+6      	; 0x4f24 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x2c2>
    4f1e:	99 20       	and	r9, r9
    4f20:	09 f4       	brne	.+2      	; 0x4f24 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x2c2>
    4f22:	79 c0       	rjmp	.+242    	; 0x5016 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x3b4>
				BlnVal = *BlnRef;
    4f24:	f8 01       	movw	r30, r16
    4f26:	61 8b       	std	Z+17, r22	; 0x11
				LCD->print(BlnVal);
    4f28:	70 e0       	ldi	r23, 0x00	; 0
    4f2a:	4a e0       	ldi	r20, 0x0A	; 10
    4f2c:	50 e0       	ldi	r21, 0x00	; 0
    4f2e:	c5 01       	movw	r24, r10
    4f30:	0e 94 42 3b 	call	0x7684	; 0x7684 <_ZN5Print5printEii>
    4f34:	70 c0       	rjmp	.+224    	; 0x5016 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x3b4>
			break; 
			
		case VarBoolWithText:
			//Serial.println("Printing Var Bool With Text");
			//Serial.println(*BlnRef);
			if((BlnVal != *BlnRef) || refresh){
    4f36:	d8 01       	movw	r26, r16
    4f38:	9e 96       	adiw	r26, 0x2e	; 46
    4f3a:	ed 91       	ld	r30, X+
    4f3c:	fc 91       	ld	r31, X
    4f3e:	9f 97       	sbiw	r26, 0x2f	; 47
    4f40:	51 96       	adiw	r26, 0x11	; 17
    4f42:	9c 91       	ld	r25, X
    4f44:	80 81       	ld	r24, Z
    4f46:	98 13       	cpse	r25, r24
    4f48:	03 c0       	rjmp	.+6      	; 0x4f50 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x2ee>
    4f4a:	99 20       	and	r9, r9
    4f4c:	09 f4       	brne	.+2      	; 0x4f50 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x2ee>
    4f4e:	63 c0       	rjmp	.+198    	; 0x5016 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x3b4>
				BlnVal = BlnRef;
    4f50:	81 e0       	ldi	r24, 0x01	; 1
    4f52:	ef 2b       	or	r30, r31
    4f54:	09 f4       	brne	.+2      	; 0x4f58 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x2f6>
    4f56:	80 e0       	ldi	r24, 0x00	; 0
    4f58:	f8 01       	movw	r30, r16
    4f5a:	81 8b       	std	Z+17, r24	; 0x11
				if(BlnVal == true){
    4f5c:	88 23       	and	r24, r24
    4f5e:	39 f0       	breq	.+14     	; 0x4f6e <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x30c>
					LCD->print(BoolTrueText);
    4f60:	b8 01       	movw	r22, r16
    4f62:	64 5e       	subi	r22, 0xE4	; 228
    4f64:	7f 4f       	sbci	r23, 0xFF	; 255
    4f66:	c5 01       	movw	r24, r10
    4f68:	0e 94 3e 3a 	call	0x747c	; 0x747c <_ZN5Print5printERK6String>
    4f6c:	54 c0       	rjmp	.+168    	; 0x5016 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x3b4>
				}else{
					LCD->print(BoolFalseText);	
    4f6e:	b8 01       	movw	r22, r16
    4f70:	6e 5d       	subi	r22, 0xDE	; 222
    4f72:	7f 4f       	sbci	r23, 0xFF	; 255
    4f74:	c5 01       	movw	r24, r10
    4f76:	0e 94 3e 3a 	call	0x747c	; 0x747c <_ZN5Print5printERK6String>
    4f7a:	4d c0       	rjmp	.+154    	; 0x5016 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x3b4>
			break;
			
		case VarString:
			//Serial.println("Printing Var String");
			//Serial.println(*StrRef);
			if((StrVal != *StrRef ) || refresh){
    4f7c:	78 01       	movw	r14, r16
    4f7e:	f3 e0       	ldi	r31, 0x03	; 3
    4f80:	ef 0e       	add	r14, r31
    4f82:	f1 1c       	adc	r15, r1
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
    4f84:	d8 01       	movw	r26, r16
    4f86:	98 96       	adiw	r26, 0x28	; 40
    4f88:	6d 91       	ld	r22, X+
    4f8a:	7c 91       	ld	r23, X
    4f8c:	99 97       	sbiw	r26, 0x29	; 41
    4f8e:	c7 01       	movw	r24, r14
    4f90:	0e 94 4a 42 	call	0x8494	; 0x8494 <_ZNK6String6equalsERKS_>
    4f94:	88 23       	and	r24, r24
    4f96:	11 f0       	breq	.+4      	; 0x4f9c <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x33a>
    4f98:	99 20       	and	r9, r9
    4f9a:	e9 f1       	breq	.+122    	; 0x5016 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x3b4>
				StrVal = *StrRef;
    4f9c:	f8 01       	movw	r30, r16
    4f9e:	60 a5       	ldd	r22, Z+40	; 0x28
    4fa0:	71 a5       	ldd	r23, Z+41	; 0x29
    4fa2:	c7 01       	movw	r24, r14
    4fa4:	0e 94 83 41 	call	0x8306	; 0x8306 <_ZN6StringaSERKS_>
				LCD->print(StrVal);
    4fa8:	b7 01       	movw	r22, r14
    4faa:	c5 01       	movw	r24, r10
    4fac:	0e 94 3e 3a 	call	0x747c	; 0x747c <_ZN5Print5printERK6String>
    4fb0:	32 c0       	rjmp	.+100    	; 0x5016 <_ZN13EZUI_PageItem5printEP17LiquidCrystal_I2Cb+0x3b4>
			break;
			
		case ToggleOption:
			//Serial.println("Toggle Option");
			//Serial.println(TglOptRef->Label);
			LCD->print(" " + TglOptRef->Label + ":" );
    4fb2:	d8 01       	movw	r26, r16
    4fb4:	da 96       	adiw	r26, 0x3a	; 58
    4fb6:	ed 90       	ld	r14, X+
    4fb8:	fc 90       	ld	r15, X
    4fba:	db 97       	sbiw	r26, 0x3b	; 59

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    4fbc:	65 e5       	ldi	r22, 0x55	; 85
    4fbe:	75 e0       	ldi	r23, 0x05	; 5
    4fc0:	ce 01       	movw	r24, r28
    4fc2:	07 96       	adiw	r24, 0x07	; 7
    4fc4:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    4fc8:	b7 01       	movw	r22, r14
    4fca:	ce 01       	movw	r24, r28
    4fcc:	07 96       	adiw	r24, 0x07	; 7
    4fce:	0e 94 ee 41 	call	0x83dc	; 0x83dc <_ZplRK15StringSumHelperRK6String>
    4fd2:	63 e4       	ldi	r22, 0x43	; 67
    4fd4:	74 e0       	ldi	r23, 0x04	; 4
    4fd6:	0e 94 ff 41 	call	0x83fe	; 0x83fe <_ZplRK15StringSumHelperPKc>
    4fda:	bc 01       	movw	r22, r24
    4fdc:	c5 01       	movw	r24, r10
    4fde:	0e 94 3e 3a 	call	0x747c	; 0x747c <_ZN5Print5printERK6String>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    4fe2:	ce 01       	movw	r24, r28
    4fe4:	07 96       	adiw	r24, 0x07	; 7
    4fe6:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
			break;*/
		
		case Link:
			//Serial.println("Link Option");
			//Serial.println(LnkRef->Label);
			LCD->print(" " + LnkRef->Label);
    4fea:	f8 01       	movw	r30, r16
    4fec:	04 ad       	ldd	r16, Z+60	; 0x3c
    4fee:	15 ad       	ldd	r17, Z+61	; 0x3d
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    4ff0:	65 e5       	ldi	r22, 0x55	; 85
    4ff2:	75 e0       	ldi	r23, 0x05	; 5
    4ff4:	ce 01       	movw	r24, r28
    4ff6:	01 96       	adiw	r24, 0x01	; 1
    4ff8:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    4ffc:	b8 01       	movw	r22, r16
    4ffe:	ce 01       	movw	r24, r28
    5000:	01 96       	adiw	r24, 0x01	; 1
    5002:	0e 94 ee 41 	call	0x83dc	; 0x83dc <_ZplRK15StringSumHelperRK6String>
    5006:	bc 01       	movw	r22, r24
    5008:	c5 01       	movw	r24, r10
    500a:	0e 94 3e 3a 	call	0x747c	; 0x747c <_ZN5Print5printERK6String>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    500e:	ce 01       	movw	r24, r28
    5010:	01 96       	adiw	r24, 0x01	; 1
    5012:	0e 94 e5 40 	call	0x81ca	; 0x81ca <_ZN6StringD1Ev>
			break;
	}
}
    5016:	2c 96       	adiw	r28, 0x0c	; 12
    5018:	0f b6       	in	r0, 0x3f	; 63
    501a:	f8 94       	cli
    501c:	de bf       	out	0x3e, r29	; 62
    501e:	0f be       	out	0x3f, r0	; 63
    5020:	cd bf       	out	0x3d, r28	; 61
    5022:	df 91       	pop	r29
    5024:	cf 91       	pop	r28
    5026:	1f 91       	pop	r17
    5028:	0f 91       	pop	r16
    502a:	ff 90       	pop	r15
    502c:	ef 90       	pop	r14
    502e:	df 90       	pop	r13
    5030:	cf 90       	pop	r12
    5032:	bf 90       	pop	r11
    5034:	af 90       	pop	r10
    5036:	9f 90       	pop	r9
    5038:	08 95       	ret

0000503a <_ZN13EZUI_PageItem10ItemSelectEP4EZUI>:

//Item Select
void EZUI_PageItem::ItemSelect(EZUI *UI){
    503a:	cf 93       	push	r28
    503c:	df 93       	push	r29
    503e:	eb 01       	movw	r28, r22
	switch (Type) {
    5040:	fc 01       	movw	r30, r24
    5042:	22 81       	ldd	r18, Z+2	; 0x02
    5044:	22 31       	cpi	r18, 0x12	; 18
    5046:	19 f0       	breq	.+6      	; 0x504e <_ZN13EZUI_PageItem10ItemSelectEP4EZUI+0x14>
    5048:	23 31       	cpi	r18, 0x13	; 19
    504a:	49 f0       	breq	.+18     	; 0x505e <_ZN13EZUI_PageItem10ItemSelectEP4EZUI+0x24>
    504c:	0e c0       	rjmp	.+28     	; 0x506a <_ZN13EZUI_PageItem10ItemSelectEP4EZUI+0x30>
		case(ToggleOption):
			(*TglOptRef).Toggle();
    504e:	fc 01       	movw	r30, r24
    5050:	82 ad       	ldd	r24, Z+58	; 0x3a
    5052:	93 ad       	ldd	r25, Z+59	; 0x3b
    5054:	0e 94 8c 04 	call	0x918	; 0x918 <_ZN25EZUI_Control_ToggleOption6ToggleEv>
			UI->display();
    5058:	ce 01       	movw	r24, r28
    505a:	aa d0       	rcall	.+340    	; 0x51b0 <_ZN4EZUI7displayEv>
			break;
    505c:	1e c0       	rjmp	.+60     	; 0x509a <_ZN13EZUI_PageItem10ItemSelectEP4EZUI+0x60>
		case(Link):
			//Serial.print("***************************Following Link***************************");
			LnkRef->FollowLink(UI);
    505e:	fc 01       	movw	r30, r24
    5060:	84 ad       	ldd	r24, Z+60	; 0x3c
    5062:	95 ad       	ldd	r25, Z+61	; 0x3d
    5064:	0e 94 01 04 	call	0x802	; 0x802 <_ZN17EZUI_Control_Link10FollowLinkEP4EZUI>
			break;
    5068:	18 c0       	rjmp	.+48     	; 0x509a <_ZN13EZUI_PageItem10ItemSelectEP4EZUI+0x60>
		default:
			UI->LCD->clear();
    506a:	8e 85       	ldd	r24, Y+14	; 0x0e
    506c:	9f 85       	ldd	r25, Y+15	; 0x0f
    506e:	0e 94 3e 30 	call	0x607c	; 0x607c <_ZN3LCD5clearEv>
			UI->LCD->println("ERROR!:");
    5072:	6d e3       	ldi	r22, 0x3D	; 61
    5074:	74 e0       	ldi	r23, 0x04	; 4
    5076:	8e 85       	ldd	r24, Y+14	; 0x0e
    5078:	9f 85       	ldd	r25, Y+15	; 0x0f
    507a:	0e 94 87 3a 	call	0x750e	; 0x750e <_ZN5Print7printlnEPKc>
			UI->LCD->println("Menu Type not yet Supported");
    507e:	65 e4       	ldi	r22, 0x45	; 69
    5080:	74 e0       	ldi	r23, 0x04	; 4
    5082:	8e 85       	ldd	r24, Y+14	; 0x0e
    5084:	9f 85       	ldd	r25, Y+15	; 0x0f
    5086:	0e 94 87 3a 	call	0x750e	; 0x750e <_ZN5Print7printlnEPKc>
			delay(3000);
    508a:	68 eb       	ldi	r22, 0xB8	; 184
    508c:	7b e0       	ldi	r23, 0x0B	; 11
    508e:	80 e0       	ldi	r24, 0x00	; 0
    5090:	90 e0       	ldi	r25, 0x00	; 0
    5092:	0e 94 2c 3f 	call	0x7e58	; 0x7e58 <delay>
			UI->display();
    5096:	ce 01       	movw	r24, r28
    5098:	8b d0       	rcall	.+278    	; 0x51b0 <_ZN4EZUI7displayEv>
			break;
	}
    509a:	df 91       	pop	r29
    509c:	cf 91       	pop	r28
    509e:	08 95       	ret

000050a0 <_ZN4EZUI15EncoderDblClickEv>:

EZUI::EZUI(String _Name){
	Name = _Name;
}

EZUI::~EZUI(){
    50a0:	08 95       	ret

000050a2 <_ZN4EZUI12EncoderClickEv>:
    50a2:	bc 01       	movw	r22, r24
    50a4:	fc 01       	movw	r30, r24
    50a6:	80 81       	ld	r24, Z
    50a8:	91 81       	ldd	r25, Z+1	; 0x01
    50aa:	00 97       	sbiw	r24, 0x00	; 0
    50ac:	19 f0       	breq	.+6      	; 0x50b4 <_ZN4EZUI12EncoderClickEv+0x12>
    50ae:	0c 94 64 12 	jmp	0x24c8	; 0x24c8 <_ZN9EZUI_Menu10selectItemEP4EZUI>
    50b2:	08 95       	ret
    50b4:	fb 01       	movw	r30, r22
    50b6:	82 81       	ldd	r24, Z+2	; 0x02
    50b8:	93 81       	ldd	r25, Z+3	; 0x03
    50ba:	00 97       	sbiw	r24, 0x00	; 0
    50bc:	11 f0       	breq	.+4      	; 0x50c2 <_ZN4EZUI12EncoderClickEv+0x20>
    50be:	0c 94 93 1c 	jmp	0x3926	; 0x3926 <_ZN9EZUI_Page10selectItemEP4EZUI>
    50c2:	08 95       	ret

000050c4 <_ZN4EZUI16EncoderIncrementEv>:
    50c4:	cf 93       	push	r28
    50c6:	df 93       	push	r29
    50c8:	ec 01       	movw	r28, r24
    50ca:	88 81       	ld	r24, Y
    50cc:	99 81       	ldd	r25, Y+1	; 0x01
    50ce:	00 97       	sbiw	r24, 0x00	; 0
    50d0:	11 f0       	breq	.+4      	; 0x50d6 <_ZN4EZUI16EncoderIncrementEv+0x12>
    50d2:	0e 94 18 11 	call	0x2230	; 0x2230 <_ZN9EZUI_Menu8nextItemEv>
    50d6:	8a 81       	ldd	r24, Y+2	; 0x02
    50d8:	9b 81       	ldd	r25, Y+3	; 0x03
    50da:	00 97       	sbiw	r24, 0x00	; 0
    50dc:	09 f0       	breq	.+2      	; 0x50e0 <_ZN4EZUI16EncoderIncrementEv+0x1c>
    50de:	fe da       	rcall	.-2564   	; 0x46dc <_ZN9EZUI_Page8nextItemEv>
    50e0:	df 91       	pop	r29
    50e2:	cf 91       	pop	r28
    50e4:	08 95       	ret

000050e6 <_ZN4EZUI16EncoderDecrementEv>:
    50e6:	fc 01       	movw	r30, r24
    50e8:	80 81       	ld	r24, Z
    50ea:	91 81       	ldd	r25, Z+1	; 0x01
    50ec:	00 97       	sbiw	r24, 0x00	; 0
    50ee:	11 f0       	breq	.+4      	; 0x50f4 <_ZN4EZUI16EncoderDecrementEv+0xe>
    50f0:	0c 94 f2 10 	jmp	0x21e4	; 0x21e4 <_ZN9EZUI_Menu8prevItemEv>
    50f4:	08 95       	ret

000050f6 <_ZN4EZUIC1E6String>:
    50f6:	ef 92       	push	r14
    50f8:	ff 92       	push	r15
    50fa:	0f 93       	push	r16
    50fc:	1f 93       	push	r17
    50fe:	cf 93       	push	r28
    5100:	df 93       	push	r29
    5102:	ec 01       	movw	r28, r24
    5104:	7b 01       	movw	r14, r22
    5106:	19 82       	std	Y+1, r1	; 0x01
    5108:	18 82       	st	Y, r1
    510a:	1b 82       	std	Y+3, r1	; 0x03
    510c:	1a 82       	std	Y+2, r1	; 0x02
    510e:	8c 01       	movw	r16, r24
    5110:	0c 5f       	subi	r16, 0xFC	; 252
    5112:	1f 4f       	sbci	r17, 0xFF	; 255
    5114:	60 ee       	ldi	r22, 0xE0	; 224
    5116:	75 e0       	ldi	r23, 0x05	; 5
    5118:	c8 01       	movw	r24, r16
    511a:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
    511e:	1b 86       	std	Y+11, r1	; 0x0b
    5120:	1a 86       	std	Y+10, r1	; 0x0a
    5122:	1d 86       	std	Y+13, r1	; 0x0d
    5124:	1c 86       	std	Y+12, r1	; 0x0c
    5126:	b7 01       	movw	r22, r14
    5128:	c8 01       	movw	r24, r16
    512a:	0e 94 83 41 	call	0x8306	; 0x8306 <_ZN6StringaSERKS_>
    512e:	df 91       	pop	r29
    5130:	cf 91       	pop	r28
    5132:	1f 91       	pop	r17
    5134:	0f 91       	pop	r16
    5136:	ff 90       	pop	r15
    5138:	ef 90       	pop	r14
    513a:	08 95       	ret

0000513c <_ZN4EZUI14attatchEncoderEP22ClickEncoderWithEvents>:
}

void EZUI::attatchEncoder(ClickEncoderWithEvents *_Encoder){
    513c:	fc 01       	movw	r30, r24
	Encoder = _Encoder;
    513e:	71 8b       	std	Z+17, r23	; 0x11
    5140:	60 8b       	std	Z+16, r22	; 0x10
	//Encoder->ClearHandlers();
	Encoder->UI = this;
    5142:	db 01       	movw	r26, r22
    5144:	1f 96       	adiw	r26, 0x0f	; 15
    5146:	9c 93       	st	X, r25
    5148:	8e 93       	st	-X, r24
    514a:	1e 97       	sbiw	r26, 0x0e	; 14
	Encoder->ClickHandler = &EZUI::EncoderClick;
    514c:	a0 89       	ldd	r26, Z+16	; 0x10
    514e:	b1 89       	ldd	r27, Z+17	; 0x11
    5150:	81 e5       	ldi	r24, 0x51	; 81
    5152:	98 e2       	ldi	r25, 0x28	; 40
    5154:	51 96       	adiw	r26, 0x11	; 17
    5156:	9c 93       	st	X, r25
    5158:	8e 93       	st	-X, r24
    515a:	50 97       	sbiw	r26, 0x10	; 16
    515c:	53 96       	adiw	r26, 0x13	; 19
    515e:	1c 92       	st	X, r1
    5160:	1e 92       	st	-X, r1
    5162:	52 97       	sbiw	r26, 0x12	; 18
	Encoder->DblClickHandler = &EZUI::EncoderDblClick;
    5164:	a0 89       	ldd	r26, Z+16	; 0x10
    5166:	b1 89       	ldd	r27, Z+17	; 0x11
    5168:	80 e5       	ldi	r24, 0x50	; 80
    516a:	98 e2       	ldi	r25, 0x28	; 40
    516c:	55 96       	adiw	r26, 0x15	; 21
    516e:	9c 93       	st	X, r25
    5170:	8e 93       	st	-X, r24
    5172:	54 97       	sbiw	r26, 0x14	; 20
    5174:	57 96       	adiw	r26, 0x17	; 23
    5176:	1c 92       	st	X, r1
    5178:	1e 92       	st	-X, r1
    517a:	56 97       	sbiw	r26, 0x16	; 22
	Encoder->IncrementHandler = &EZUI::EncoderIncrement;
    517c:	a0 89       	ldd	r26, Z+16	; 0x10
    517e:	b1 89       	ldd	r27, Z+17	; 0x11
    5180:	82 e6       	ldi	r24, 0x62	; 98
    5182:	98 e2       	ldi	r25, 0x28	; 40
    5184:	59 96       	adiw	r26, 0x19	; 25
    5186:	9c 93       	st	X, r25
    5188:	8e 93       	st	-X, r24
    518a:	58 97       	sbiw	r26, 0x18	; 24
    518c:	5b 96       	adiw	r26, 0x1b	; 27
    518e:	1c 92       	st	X, r1
    5190:	1e 92       	st	-X, r1
    5192:	5a 97       	sbiw	r26, 0x1a	; 26
	Encoder->DecrementHandler = &EZUI::EncoderDecrement;
    5194:	00 88       	ldd	r0, Z+16	; 0x10
    5196:	f1 89       	ldd	r31, Z+17	; 0x11
    5198:	e0 2d       	mov	r30, r0
    519a:	83 e7       	ldi	r24, 0x73	; 115
    519c:	98 e2       	ldi	r25, 0x28	; 40
    519e:	95 8f       	std	Z+29, r25	; 0x1d
    51a0:	84 8f       	std	Z+28, r24	; 0x1c
    51a2:	17 8e       	std	Z+31, r1	; 0x1f
    51a4:	16 8e       	std	Z+30, r1	; 0x1e
    51a6:	08 95       	ret

000051a8 <_ZN4EZUI10attatchLCDEP17LiquidCrystal_I2C>:
}

void EZUI::attatchLCD( LiquidCrystal_I2C *_LCD ){
	LCD = _LCD;
    51a8:	fc 01       	movw	r30, r24
    51aa:	77 87       	std	Z+15, r23	; 0x0f
    51ac:	66 87       	std	Z+14, r22	; 0x0e
    51ae:	08 95       	ret

000051b0 <_ZN4EZUI7displayEv>:
	if (!( CurrentMenu == NULL)){
		CurrentMenu->prevItem();
	}
}

void EZUI::display(){
    51b0:	0f 93       	push	r16
    51b2:	1f 93       	push	r17
    51b4:	cf 93       	push	r28
    51b6:	df 93       	push	r29
    51b8:	ec 01       	movw	r28, r24
	//Attatch all event handlers
	if (CurrentPage != NULL){
    51ba:	8a 81       	ldd	r24, Y+2	; 0x02
    51bc:	9b 81       	ldd	r25, Y+3	; 0x03
    51be:	89 2b       	or	r24, r25
    51c0:	61 f0       	breq	.+24     	; 0x51da <_ZN4EZUI7displayEv+0x2a>
		lastDisplayMillis = millis();
    51c2:	0e 94 fa 3e 	call	0x7df4	; 0x7df4 <millis>
    51c6:	6a 8b       	std	Y+18, r22	; 0x12
    51c8:	7b 8b       	std	Y+19, r23	; 0x13
    51ca:	8c 8b       	std	Y+20, r24	; 0x14
    51cc:	9d 8b       	std	Y+21, r25	; 0x15
		CurrentPage->display(this);
    51ce:	be 01       	movw	r22, r28
    51d0:	8a 81       	ldd	r24, Y+2	; 0x02
    51d2:	9b 81       	ldd	r25, Y+3	; 0x03
    51d4:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <_ZN9EZUI_Page7displayEP4EZUI>
    51d8:	36 c0       	rjmp	.+108    	; 0x5246 <_ZN4EZUI7displayEv+0x96>
	}else if (CurrentMenu != NULL){
    51da:	88 81       	ld	r24, Y
    51dc:	99 81       	ldd	r25, Y+1	; 0x01
    51de:	89 2b       	or	r24, r25
    51e0:	61 f0       	breq	.+24     	; 0x51fa <_ZN4EZUI7displayEv+0x4a>
		lastDisplayMillis = millis();
    51e2:	0e 94 fa 3e 	call	0x7df4	; 0x7df4 <millis>
    51e6:	6a 8b       	std	Y+18, r22	; 0x12
    51e8:	7b 8b       	std	Y+19, r23	; 0x13
    51ea:	8c 8b       	std	Y+20, r24	; 0x14
    51ec:	9d 8b       	std	Y+21, r25	; 0x15
		CurrentMenu->display(this);
    51ee:	be 01       	movw	r22, r28
    51f0:	88 81       	ld	r24, Y
    51f2:	99 81       	ldd	r25, Y+1	; 0x01
    51f4:	0e 94 98 11 	call	0x2330	; 0x2330 <_ZN9EZUI_Menu7displayEP4EZUI>
    51f8:	26 c0       	rjmp	.+76     	; 0x5246 <_ZN4EZUI7displayEv+0x96>
	}else{
		//display nothing
		if((millis() - lastDisplayMillis) > 3000){
    51fa:	0e 94 fa 3e 	call	0x7df4	; 0x7df4 <millis>
    51fe:	0a 89       	ldd	r16, Y+18	; 0x12
    5200:	1b 89       	ldd	r17, Y+19	; 0x13
    5202:	2c 89       	ldd	r18, Y+20	; 0x14
    5204:	3d 89       	ldd	r19, Y+21	; 0x15
    5206:	dc 01       	movw	r26, r24
    5208:	cb 01       	movw	r24, r22
    520a:	80 1b       	sub	r24, r16
    520c:	91 0b       	sbc	r25, r17
    520e:	a2 0b       	sbc	r26, r18
    5210:	b3 0b       	sbc	r27, r19
    5212:	89 3b       	cpi	r24, 0xB9	; 185
    5214:	9b 40       	sbci	r25, 0x0B	; 11
    5216:	a1 05       	cpc	r26, r1
    5218:	b1 05       	cpc	r27, r1
    521a:	a8 f0       	brcs	.+42     	; 0x5246 <_ZN4EZUI7displayEv+0x96>
			lastDisplayMillis = millis();
    521c:	0e 94 fa 3e 	call	0x7df4	; 0x7df4 <millis>
    5220:	6a 8b       	std	Y+18, r22	; 0x12
    5222:	7b 8b       	std	Y+19, r23	; 0x13
    5224:	8c 8b       	std	Y+20, r24	; 0x14
    5226:	9d 8b       	std	Y+21, r25	; 0x15
			LCD->clear();
    5228:	8e 85       	ldd	r24, Y+14	; 0x0e
    522a:	9f 85       	ldd	r25, Y+15	; 0x0f
    522c:	27 d7       	rcall	.+3662   	; 0x607c <_ZN3LCD5clearEv>
			LCD->println("ERROR!");
    522e:	6c e9       	ldi	r22, 0x9C	; 156
    5230:	74 e0       	ldi	r23, 0x04	; 4
    5232:	8e 85       	ldd	r24, Y+14	; 0x0e
    5234:	9f 85       	ldd	r25, Y+15	; 0x0f
    5236:	0e 94 87 3a 	call	0x750e	; 0x750e <_ZN5Print7printlnEPKc>
			LCD->println("  No Page or Menu");
    523a:	63 ea       	ldi	r22, 0xA3	; 163
    523c:	74 e0       	ldi	r23, 0x04	; 4
    523e:	8e 85       	ldd	r24, Y+14	; 0x0e
    5240:	9f 85       	ldd	r25, Y+15	; 0x0f
    5242:	0e 94 87 3a 	call	0x750e	; 0x750e <_ZN5Print7printlnEPKc>
		}
	}
}
    5246:	df 91       	pop	r29
    5248:	cf 91       	pop	r28
    524a:	1f 91       	pop	r17
    524c:	0f 91       	pop	r16
    524e:	08 95       	ret

00005250 <_ZN4EZUI10setDisplayEP9EZUI_Menu>:

void EZUI::setDisplay(EZUI_Menu *Menu){
	CurrentMenu = Menu;
    5250:	fc 01       	movw	r30, r24
    5252:	71 83       	std	Z+1, r23	; 0x01
    5254:	60 83       	st	Z, r22
	CurrentPage = NULL;
    5256:	13 82       	std	Z+3, r1	; 0x03
    5258:	12 82       	std	Z+2, r1	; 0x02
    525a:	08 95       	ret

0000525c <_ZN4EZUI10setDisplayEP9EZUI_Page>:
		Serial.println( "  " + Name + "-UI-" + "-DisplayMenu->" + CurrentMenu->Name);
	#endif
}

void EZUI::setDisplay(EZUI_Page *Page){
	CurrentMenu = NULL;
    525c:	fc 01       	movw	r30, r24
    525e:	11 82       	std	Z+1, r1	; 0x01
    5260:	10 82       	st	Z, r1
	CurrentPage = Page;
    5262:	73 83       	std	Z+3, r23	; 0x03
    5264:	62 83       	std	Z+2, r22	; 0x02
    5266:	08 95       	ret

00005268 <_ZN9Executive11exec_frame1Ev>:
	analog13 = (5.0*(float)analogRead(A13))/1023.0;
	analog14 = (5.0*(float)analogRead(A14))/1023.0;
	analog15 = (5.0*(float)analogRead(A15))/1023.0;
}

void Executive::exec_frame2(){
    5268:	80 91 40 06 	lds	r24, 0x0640
    526c:	90 91 41 06 	lds	r25, 0x0641
    5270:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <_ZN22ClickEncoderWithEvents4ReadEv>
    5274:	80 91 0a 06 	lds	r24, 0x060A
    5278:	90 91 0b 06 	lds	r25, 0x060B
    527c:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <_ZN22ClickEncoderWithEvents4ReadEv>
    5280:	80 91 26 06 	lds	r24, 0x0626
    5284:	90 91 27 06 	lds	r25, 0x0627
    5288:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <_ZN22ClickEncoderWithEvents4ReadEv>
    528c:	80 91 f0 05 	lds	r24, 0x05F0
    5290:	90 91 f1 05 	lds	r25, 0x05F1
    5294:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <_ZN22ClickEncoderWithEvents4ReadEv>
    5298:	80 91 24 06 	lds	r24, 0x0624
    529c:	90 91 25 06 	lds	r25, 0x0625
    52a0:	01 d4       	rcall	.+2050   	; 0x5aa4 <_ZN16WheatstoneBridge6UpdateEv>
    52a2:	86 e3       	ldi	r24, 0x36	; 54
    52a4:	0e 94 c2 3f 	call	0x7f84	; 0x7f84 <analogRead>
    52a8:	bc 01       	movw	r22, r24
    52aa:	99 0f       	add	r25, r25
    52ac:	88 0b       	sbc	r24, r24
    52ae:	99 0b       	sbc	r25, r25
    52b0:	0e 94 60 43 	call	0x86c0	; 0x86c0 <__floatsisf>
    52b4:	20 e0       	ldi	r18, 0x00	; 0
    52b6:	30 e0       	ldi	r19, 0x00	; 0
    52b8:	40 ea       	ldi	r20, 0xA0	; 160
    52ba:	50 e4       	ldi	r21, 0x40	; 64
    52bc:	0e 94 14 44 	call	0x8828	; 0x8828 <__mulsf3>
    52c0:	20 e0       	ldi	r18, 0x00	; 0
    52c2:	30 ec       	ldi	r19, 0xC0	; 192
    52c4:	4f e7       	ldi	r20, 0x7F	; 127
    52c6:	54 e4       	ldi	r21, 0x44	; 68
    52c8:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    52cc:	60 93 a6 07 	sts	0x07A6, r22
    52d0:	70 93 a7 07 	sts	0x07A7, r23
    52d4:	80 93 a8 07 	sts	0x07A8, r24
    52d8:	90 93 a9 07 	sts	0x07A9, r25
    52dc:	87 e3       	ldi	r24, 0x37	; 55
    52de:	0e 94 c2 3f 	call	0x7f84	; 0x7f84 <analogRead>
    52e2:	bc 01       	movw	r22, r24
    52e4:	99 0f       	add	r25, r25
    52e6:	88 0b       	sbc	r24, r24
    52e8:	99 0b       	sbc	r25, r25
    52ea:	0e 94 60 43 	call	0x86c0	; 0x86c0 <__floatsisf>
    52ee:	20 e0       	ldi	r18, 0x00	; 0
    52f0:	30 e0       	ldi	r19, 0x00	; 0
    52f2:	40 ea       	ldi	r20, 0xA0	; 160
    52f4:	50 e4       	ldi	r21, 0x40	; 64
    52f6:	0e 94 14 44 	call	0x8828	; 0x8828 <__mulsf3>
    52fa:	20 e0       	ldi	r18, 0x00	; 0
    52fc:	30 ec       	ldi	r19, 0xC0	; 192
    52fe:	4f e7       	ldi	r20, 0x7F	; 127
    5300:	54 e4       	ldi	r21, 0x44	; 68
    5302:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    5306:	60 93 a2 07 	sts	0x07A2, r22
    530a:	70 93 a3 07 	sts	0x07A3, r23
    530e:	80 93 a4 07 	sts	0x07A4, r24
    5312:	90 93 a5 07 	sts	0x07A5, r25
    5316:	88 e3       	ldi	r24, 0x38	; 56
    5318:	0e 94 c2 3f 	call	0x7f84	; 0x7f84 <analogRead>
    531c:	bc 01       	movw	r22, r24
    531e:	99 0f       	add	r25, r25
    5320:	88 0b       	sbc	r24, r24
    5322:	99 0b       	sbc	r25, r25
    5324:	0e 94 60 43 	call	0x86c0	; 0x86c0 <__floatsisf>
    5328:	20 e0       	ldi	r18, 0x00	; 0
    532a:	30 e0       	ldi	r19, 0x00	; 0
    532c:	40 ea       	ldi	r20, 0xA0	; 160
    532e:	50 e4       	ldi	r21, 0x40	; 64
    5330:	0e 94 14 44 	call	0x8828	; 0x8828 <__mulsf3>
    5334:	20 e0       	ldi	r18, 0x00	; 0
    5336:	30 ec       	ldi	r19, 0xC0	; 192
    5338:	4f e7       	ldi	r20, 0x7F	; 127
    533a:	54 e4       	ldi	r21, 0x44	; 68
    533c:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    5340:	60 93 9e 07 	sts	0x079E, r22
    5344:	70 93 9f 07 	sts	0x079F, r23
    5348:	80 93 a0 07 	sts	0x07A0, r24
    534c:	90 93 a1 07 	sts	0x07A1, r25
    5350:	89 e3       	ldi	r24, 0x39	; 57
    5352:	0e 94 c2 3f 	call	0x7f84	; 0x7f84 <analogRead>
    5356:	bc 01       	movw	r22, r24
    5358:	99 0f       	add	r25, r25
    535a:	88 0b       	sbc	r24, r24
    535c:	99 0b       	sbc	r25, r25
    535e:	0e 94 60 43 	call	0x86c0	; 0x86c0 <__floatsisf>
    5362:	20 e0       	ldi	r18, 0x00	; 0
    5364:	30 e0       	ldi	r19, 0x00	; 0
    5366:	40 ea       	ldi	r20, 0xA0	; 160
    5368:	50 e4       	ldi	r21, 0x40	; 64
    536a:	0e 94 14 44 	call	0x8828	; 0x8828 <__mulsf3>
    536e:	20 e0       	ldi	r18, 0x00	; 0
    5370:	30 ec       	ldi	r19, 0xC0	; 192
    5372:	4f e7       	ldi	r20, 0x7F	; 127
    5374:	54 e4       	ldi	r21, 0x44	; 68
    5376:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    537a:	60 93 9a 07 	sts	0x079A, r22
    537e:	70 93 9b 07 	sts	0x079B, r23
    5382:	80 93 9c 07 	sts	0x079C, r24
    5386:	90 93 9d 07 	sts	0x079D, r25
    538a:	8a e3       	ldi	r24, 0x3A	; 58
    538c:	0e 94 c2 3f 	call	0x7f84	; 0x7f84 <analogRead>
    5390:	bc 01       	movw	r22, r24
    5392:	99 0f       	add	r25, r25
    5394:	88 0b       	sbc	r24, r24
    5396:	99 0b       	sbc	r25, r25
    5398:	0e 94 60 43 	call	0x86c0	; 0x86c0 <__floatsisf>
    539c:	20 e0       	ldi	r18, 0x00	; 0
    539e:	30 e0       	ldi	r19, 0x00	; 0
    53a0:	40 ea       	ldi	r20, 0xA0	; 160
    53a2:	50 e4       	ldi	r21, 0x40	; 64
    53a4:	0e 94 14 44 	call	0x8828	; 0x8828 <__mulsf3>
    53a8:	20 e0       	ldi	r18, 0x00	; 0
    53aa:	30 ec       	ldi	r19, 0xC0	; 192
    53ac:	4f e7       	ldi	r20, 0x7F	; 127
    53ae:	54 e4       	ldi	r21, 0x44	; 68
    53b0:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    53b4:	60 93 96 07 	sts	0x0796, r22
    53b8:	70 93 97 07 	sts	0x0797, r23
    53bc:	80 93 98 07 	sts	0x0798, r24
    53c0:	90 93 99 07 	sts	0x0799, r25
    53c4:	8b e3       	ldi	r24, 0x3B	; 59
    53c6:	0e 94 c2 3f 	call	0x7f84	; 0x7f84 <analogRead>
    53ca:	bc 01       	movw	r22, r24
    53cc:	99 0f       	add	r25, r25
    53ce:	88 0b       	sbc	r24, r24
    53d0:	99 0b       	sbc	r25, r25
    53d2:	0e 94 60 43 	call	0x86c0	; 0x86c0 <__floatsisf>
    53d6:	20 e0       	ldi	r18, 0x00	; 0
    53d8:	30 e0       	ldi	r19, 0x00	; 0
    53da:	40 ea       	ldi	r20, 0xA0	; 160
    53dc:	50 e4       	ldi	r21, 0x40	; 64
    53de:	0e 94 14 44 	call	0x8828	; 0x8828 <__mulsf3>
    53e2:	20 e0       	ldi	r18, 0x00	; 0
    53e4:	30 ec       	ldi	r19, 0xC0	; 192
    53e6:	4f e7       	ldi	r20, 0x7F	; 127
    53e8:	54 e4       	ldi	r21, 0x44	; 68
    53ea:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    53ee:	60 93 92 07 	sts	0x0792, r22
    53f2:	70 93 93 07 	sts	0x0793, r23
    53f6:	80 93 94 07 	sts	0x0794, r24
    53fa:	90 93 95 07 	sts	0x0795, r25
    53fe:	8c e3       	ldi	r24, 0x3C	; 60
    5400:	0e 94 c2 3f 	call	0x7f84	; 0x7f84 <analogRead>
    5404:	bc 01       	movw	r22, r24
    5406:	99 0f       	add	r25, r25
    5408:	88 0b       	sbc	r24, r24
    540a:	99 0b       	sbc	r25, r25
    540c:	0e 94 60 43 	call	0x86c0	; 0x86c0 <__floatsisf>
    5410:	20 e0       	ldi	r18, 0x00	; 0
    5412:	30 e0       	ldi	r19, 0x00	; 0
    5414:	40 ea       	ldi	r20, 0xA0	; 160
    5416:	50 e4       	ldi	r21, 0x40	; 64
    5418:	0e 94 14 44 	call	0x8828	; 0x8828 <__mulsf3>
    541c:	20 e0       	ldi	r18, 0x00	; 0
    541e:	30 ec       	ldi	r19, 0xC0	; 192
    5420:	4f e7       	ldi	r20, 0x7F	; 127
    5422:	54 e4       	ldi	r21, 0x44	; 68
    5424:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    5428:	60 93 8e 07 	sts	0x078E, r22
    542c:	70 93 8f 07 	sts	0x078F, r23
    5430:	80 93 90 07 	sts	0x0790, r24
    5434:	90 93 91 07 	sts	0x0791, r25
    5438:	8d e3       	ldi	r24, 0x3D	; 61
    543a:	0e 94 c2 3f 	call	0x7f84	; 0x7f84 <analogRead>
    543e:	bc 01       	movw	r22, r24
    5440:	99 0f       	add	r25, r25
    5442:	88 0b       	sbc	r24, r24
    5444:	99 0b       	sbc	r25, r25
    5446:	0e 94 60 43 	call	0x86c0	; 0x86c0 <__floatsisf>
    544a:	20 e0       	ldi	r18, 0x00	; 0
    544c:	30 e0       	ldi	r19, 0x00	; 0
    544e:	40 ea       	ldi	r20, 0xA0	; 160
    5450:	50 e4       	ldi	r21, 0x40	; 64
    5452:	0e 94 14 44 	call	0x8828	; 0x8828 <__mulsf3>
    5456:	20 e0       	ldi	r18, 0x00	; 0
    5458:	30 ec       	ldi	r19, 0xC0	; 192
    545a:	4f e7       	ldi	r20, 0x7F	; 127
    545c:	54 e4       	ldi	r21, 0x44	; 68
    545e:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    5462:	60 93 8a 07 	sts	0x078A, r22
    5466:	70 93 8b 07 	sts	0x078B, r23
    546a:	80 93 8c 07 	sts	0x078C, r24
    546e:	90 93 8d 07 	sts	0x078D, r25
    5472:	8e e3       	ldi	r24, 0x3E	; 62
    5474:	0e 94 c2 3f 	call	0x7f84	; 0x7f84 <analogRead>
    5478:	bc 01       	movw	r22, r24
    547a:	99 0f       	add	r25, r25
    547c:	88 0b       	sbc	r24, r24
    547e:	99 0b       	sbc	r25, r25
    5480:	0e 94 60 43 	call	0x86c0	; 0x86c0 <__floatsisf>
    5484:	20 e0       	ldi	r18, 0x00	; 0
    5486:	30 e0       	ldi	r19, 0x00	; 0
    5488:	40 ea       	ldi	r20, 0xA0	; 160
    548a:	50 e4       	ldi	r21, 0x40	; 64
    548c:	0e 94 14 44 	call	0x8828	; 0x8828 <__mulsf3>
    5490:	20 e0       	ldi	r18, 0x00	; 0
    5492:	30 ec       	ldi	r19, 0xC0	; 192
    5494:	4f e7       	ldi	r20, 0x7F	; 127
    5496:	54 e4       	ldi	r21, 0x44	; 68
    5498:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    549c:	60 93 86 07 	sts	0x0786, r22
    54a0:	70 93 87 07 	sts	0x0787, r23
    54a4:	80 93 88 07 	sts	0x0788, r24
    54a8:	90 93 89 07 	sts	0x0789, r25
    54ac:	8f e3       	ldi	r24, 0x3F	; 63
    54ae:	0e 94 c2 3f 	call	0x7f84	; 0x7f84 <analogRead>
    54b2:	bc 01       	movw	r22, r24
    54b4:	99 0f       	add	r25, r25
    54b6:	88 0b       	sbc	r24, r24
    54b8:	99 0b       	sbc	r25, r25
    54ba:	0e 94 60 43 	call	0x86c0	; 0x86c0 <__floatsisf>
    54be:	20 e0       	ldi	r18, 0x00	; 0
    54c0:	30 e0       	ldi	r19, 0x00	; 0
    54c2:	40 ea       	ldi	r20, 0xA0	; 160
    54c4:	50 e4       	ldi	r21, 0x40	; 64
    54c6:	0e 94 14 44 	call	0x8828	; 0x8828 <__mulsf3>
    54ca:	20 e0       	ldi	r18, 0x00	; 0
    54cc:	30 ec       	ldi	r19, 0xC0	; 192
    54ce:	4f e7       	ldi	r20, 0x7F	; 127
    54d0:	54 e4       	ldi	r21, 0x44	; 68
    54d2:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    54d6:	60 93 82 07 	sts	0x0782, r22
    54da:	70 93 83 07 	sts	0x0783, r23
    54de:	80 93 84 07 	sts	0x0784, r24
    54e2:	90 93 85 07 	sts	0x0785, r25
    54e6:	80 e4       	ldi	r24, 0x40	; 64
    54e8:	0e 94 c2 3f 	call	0x7f84	; 0x7f84 <analogRead>
    54ec:	bc 01       	movw	r22, r24
    54ee:	99 0f       	add	r25, r25
    54f0:	88 0b       	sbc	r24, r24
    54f2:	99 0b       	sbc	r25, r25
    54f4:	0e 94 60 43 	call	0x86c0	; 0x86c0 <__floatsisf>
    54f8:	20 e0       	ldi	r18, 0x00	; 0
    54fa:	30 e0       	ldi	r19, 0x00	; 0
    54fc:	40 ea       	ldi	r20, 0xA0	; 160
    54fe:	50 e4       	ldi	r21, 0x40	; 64
    5500:	0e 94 14 44 	call	0x8828	; 0x8828 <__mulsf3>
    5504:	20 e0       	ldi	r18, 0x00	; 0
    5506:	30 ec       	ldi	r19, 0xC0	; 192
    5508:	4f e7       	ldi	r20, 0x7F	; 127
    550a:	54 e4       	ldi	r21, 0x44	; 68
    550c:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    5510:	60 93 7e 07 	sts	0x077E, r22
    5514:	70 93 7f 07 	sts	0x077F, r23
    5518:	80 93 80 07 	sts	0x0780, r24
    551c:	90 93 81 07 	sts	0x0781, r25
    5520:	81 e4       	ldi	r24, 0x41	; 65
    5522:	0e 94 c2 3f 	call	0x7f84	; 0x7f84 <analogRead>
    5526:	bc 01       	movw	r22, r24
    5528:	99 0f       	add	r25, r25
    552a:	88 0b       	sbc	r24, r24
    552c:	99 0b       	sbc	r25, r25
    552e:	0e 94 60 43 	call	0x86c0	; 0x86c0 <__floatsisf>
    5532:	20 e0       	ldi	r18, 0x00	; 0
    5534:	30 e0       	ldi	r19, 0x00	; 0
    5536:	40 ea       	ldi	r20, 0xA0	; 160
    5538:	50 e4       	ldi	r21, 0x40	; 64
    553a:	0e 94 14 44 	call	0x8828	; 0x8828 <__mulsf3>
    553e:	20 e0       	ldi	r18, 0x00	; 0
    5540:	30 ec       	ldi	r19, 0xC0	; 192
    5542:	4f e7       	ldi	r20, 0x7F	; 127
    5544:	54 e4       	ldi	r21, 0x44	; 68
    5546:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    554a:	60 93 7a 07 	sts	0x077A, r22
    554e:	70 93 7b 07 	sts	0x077B, r23
    5552:	80 93 7c 07 	sts	0x077C, r24
    5556:	90 93 7d 07 	sts	0x077D, r25
    555a:	82 e4       	ldi	r24, 0x42	; 66
    555c:	0e 94 c2 3f 	call	0x7f84	; 0x7f84 <analogRead>
    5560:	bc 01       	movw	r22, r24
    5562:	99 0f       	add	r25, r25
    5564:	88 0b       	sbc	r24, r24
    5566:	99 0b       	sbc	r25, r25
    5568:	0e 94 60 43 	call	0x86c0	; 0x86c0 <__floatsisf>
    556c:	20 e0       	ldi	r18, 0x00	; 0
    556e:	30 e0       	ldi	r19, 0x00	; 0
    5570:	40 ea       	ldi	r20, 0xA0	; 160
    5572:	50 e4       	ldi	r21, 0x40	; 64
    5574:	0e 94 14 44 	call	0x8828	; 0x8828 <__mulsf3>
    5578:	20 e0       	ldi	r18, 0x00	; 0
    557a:	30 ec       	ldi	r19, 0xC0	; 192
    557c:	4f e7       	ldi	r20, 0x7F	; 127
    557e:	54 e4       	ldi	r21, 0x44	; 68
    5580:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    5584:	60 93 76 07 	sts	0x0776, r22
    5588:	70 93 77 07 	sts	0x0777, r23
    558c:	80 93 78 07 	sts	0x0778, r24
    5590:	90 93 79 07 	sts	0x0779, r25
    5594:	83 e4       	ldi	r24, 0x43	; 67
    5596:	0e 94 c2 3f 	call	0x7f84	; 0x7f84 <analogRead>
    559a:	bc 01       	movw	r22, r24
    559c:	99 0f       	add	r25, r25
    559e:	88 0b       	sbc	r24, r24
    55a0:	99 0b       	sbc	r25, r25
    55a2:	0e 94 60 43 	call	0x86c0	; 0x86c0 <__floatsisf>
    55a6:	20 e0       	ldi	r18, 0x00	; 0
    55a8:	30 e0       	ldi	r19, 0x00	; 0
    55aa:	40 ea       	ldi	r20, 0xA0	; 160
    55ac:	50 e4       	ldi	r21, 0x40	; 64
    55ae:	0e 94 14 44 	call	0x8828	; 0x8828 <__mulsf3>
    55b2:	20 e0       	ldi	r18, 0x00	; 0
    55b4:	30 ec       	ldi	r19, 0xC0	; 192
    55b6:	4f e7       	ldi	r20, 0x7F	; 127
    55b8:	54 e4       	ldi	r21, 0x44	; 68
    55ba:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    55be:	60 93 72 07 	sts	0x0772, r22
    55c2:	70 93 73 07 	sts	0x0773, r23
    55c6:	80 93 74 07 	sts	0x0774, r24
    55ca:	90 93 75 07 	sts	0x0775, r25
    55ce:	84 e4       	ldi	r24, 0x44	; 68
    55d0:	0e 94 c2 3f 	call	0x7f84	; 0x7f84 <analogRead>
    55d4:	bc 01       	movw	r22, r24
    55d6:	99 0f       	add	r25, r25
    55d8:	88 0b       	sbc	r24, r24
    55da:	99 0b       	sbc	r25, r25
    55dc:	0e 94 60 43 	call	0x86c0	; 0x86c0 <__floatsisf>
    55e0:	20 e0       	ldi	r18, 0x00	; 0
    55e2:	30 e0       	ldi	r19, 0x00	; 0
    55e4:	40 ea       	ldi	r20, 0xA0	; 160
    55e6:	50 e4       	ldi	r21, 0x40	; 64
    55e8:	0e 94 14 44 	call	0x8828	; 0x8828 <__mulsf3>
    55ec:	20 e0       	ldi	r18, 0x00	; 0
    55ee:	30 ec       	ldi	r19, 0xC0	; 192
    55f0:	4f e7       	ldi	r20, 0x7F	; 127
    55f2:	54 e4       	ldi	r21, 0x44	; 68
    55f4:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    55f8:	60 93 6e 07 	sts	0x076E, r22
    55fc:	70 93 6f 07 	sts	0x076F, r23
    5600:	80 93 70 07 	sts	0x0770, r24
    5604:	90 93 71 07 	sts	0x0771, r25
    5608:	85 e4       	ldi	r24, 0x45	; 69
    560a:	0e 94 c2 3f 	call	0x7f84	; 0x7f84 <analogRead>
    560e:	bc 01       	movw	r22, r24
    5610:	99 0f       	add	r25, r25
    5612:	88 0b       	sbc	r24, r24
    5614:	99 0b       	sbc	r25, r25
    5616:	0e 94 60 43 	call	0x86c0	; 0x86c0 <__floatsisf>
    561a:	20 e0       	ldi	r18, 0x00	; 0
    561c:	30 e0       	ldi	r19, 0x00	; 0
    561e:	40 ea       	ldi	r20, 0xA0	; 160
    5620:	50 e4       	ldi	r21, 0x40	; 64
    5622:	0e 94 14 44 	call	0x8828	; 0x8828 <__mulsf3>
    5626:	20 e0       	ldi	r18, 0x00	; 0
    5628:	30 ec       	ldi	r19, 0xC0	; 192
    562a:	4f e7       	ldi	r20, 0x7F	; 127
    562c:	54 e4       	ldi	r21, 0x44	; 68
    562e:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    5632:	60 93 6a 07 	sts	0x076A, r22
    5636:	70 93 6b 07 	sts	0x076B, r23
    563a:	80 93 6c 07 	sts	0x076C, r24
    563e:	90 93 6d 07 	sts	0x076D, r25
    5642:	08 95       	ret

00005644 <_ZN9Executive11exec_frame3Ev>:
	
}

void Executive::exec_frame3(){
	//Update the UI
	MAIN_UI->display();
    5644:	80 91 ac 07 	lds	r24, 0x07AC
    5648:	90 91 ad 07 	lds	r25, 0x07AD
    564c:	b1 dd       	rcall	.-1182   	; 0x51b0 <_ZN4EZUI7displayEv>
	MLT_UI->display();
    564e:	80 91 ae 07 	lds	r24, 0x07AE
    5652:	90 91 af 07 	lds	r25, 0x07AF
    5656:	ac dd       	rcall	.-1192   	; 0x51b0 <_ZN4EZUI7displayEv>
	HLT_UI->display();
    5658:	80 91 aa 07 	lds	r24, 0x07AA
    565c:	90 91 ab 07 	lds	r25, 0x07AB
    5660:	a7 dd       	rcall	.-1202   	; 0x51b0 <_ZN4EZUI7displayEv>
	BK_UI->display();
    5662:	80 91 ee 05 	lds	r24, 0x05EE
    5666:	90 91 ef 05 	lds	r25, 0x05EF
    566a:	a2 cd       	rjmp	.-1212   	; 0x51b0 <_ZN4EZUI7displayEv>
    566c:	08 95       	ret

0000566e <_ZN9Executive3runEv>:
 * ----------------------------------------------------------------
 */

#include "Executive.h"

void Executive::run(){
    566e:	8f 92       	push	r8
    5670:	9f 92       	push	r9
    5672:	af 92       	push	r10
    5674:	bf 92       	push	r11
    5676:	cf 92       	push	r12
    5678:	df 92       	push	r13
    567a:	ef 92       	push	r14
    567c:	ff 92       	push	r15
    567e:	0f 93       	push	r16
    5680:	1f 93       	push	r17
    5682:	cf 93       	push	r28
    5684:	df 93       	push	r29
    5686:	ec 01       	movw	r28, r24
	frame_count++;
    5688:	8c 81       	ldd	r24, Y+4	; 0x04
    568a:	9d 81       	ldd	r25, Y+5	; 0x05
    568c:	01 96       	adiw	r24, 0x01	; 1
    568e:	9d 83       	std	Y+5, r25	; 0x05
    5690:	8c 83       	std	Y+4, r24	; 0x04
	time = millis();
    5692:	0e 94 fa 3e 	call	0x7df4	; 0x7df4 <millis>
    5696:	68 83       	st	Y, r22
    5698:	79 83       	std	Y+1, r23	; 0x01
    569a:	8a 83       	std	Y+2, r24	; 0x02
    569c:	9b 83       	std	Y+3, r25	; 0x03
	exec_frame1();
    569e:	ce 01       	movw	r24, r28
    56a0:	e3 dd       	rcall	.-1082   	; 0x5268 <_ZN9Executive11exec_frame1Ev>
	exec_frame2();
	exec_frame3();
    56a2:	ce 01       	movw	r24, r28
    56a4:	cf df       	rcall	.-98     	; 0x5644 <_ZN9Executive11exec_frame3Ev>
	exec_frame4();
	
	//Execution rate
	temp_frame_count++;
    56a6:	8e 81       	ldd	r24, Y+6	; 0x06
    56a8:	9f 81       	ldd	r25, Y+7	; 0x07
    56aa:	a8 85       	ldd	r26, Y+8	; 0x08
    56ac:	b9 85       	ldd	r27, Y+9	; 0x09
    56ae:	bc 01       	movw	r22, r24
    56b0:	cd 01       	movw	r24, r26
    56b2:	6f 5f       	subi	r22, 0xFF	; 255
    56b4:	7f 4f       	sbci	r23, 0xFF	; 255
    56b6:	8f 4f       	sbci	r24, 0xFF	; 255
    56b8:	9f 4f       	sbci	r25, 0xFF	; 255
    56ba:	6e 83       	std	Y+6, r22	; 0x06
    56bc:	7f 83       	std	Y+7, r23	; 0x07
    56be:	88 87       	std	Y+8, r24	; 0x08
    56c0:	99 87       	std	Y+9, r25	; 0x09
	if((time - temp_time)>3000){
    56c2:	c8 80       	ld	r12, Y
    56c4:	d9 80       	ldd	r13, Y+1	; 0x01
    56c6:	ea 80       	ldd	r14, Y+2	; 0x02
    56c8:	fb 80       	ldd	r15, Y+3	; 0x03
    56ca:	0a 85       	ldd	r16, Y+10	; 0x0a
    56cc:	1b 85       	ldd	r17, Y+11	; 0x0b
    56ce:	2c 85       	ldd	r18, Y+12	; 0x0c
    56d0:	3d 85       	ldd	r19, Y+13	; 0x0d
    56d2:	c0 1a       	sub	r12, r16
    56d4:	d1 0a       	sbc	r13, r17
    56d6:	e2 0a       	sbc	r14, r18
    56d8:	f3 0a       	sbc	r15, r19
    56da:	29 eb       	ldi	r18, 0xB9	; 185
    56dc:	c2 16       	cp	r12, r18
    56de:	2b e0       	ldi	r18, 0x0B	; 11
    56e0:	d2 06       	cpc	r13, r18
    56e2:	e1 04       	cpc	r14, r1
    56e4:	f1 04       	cpc	r15, r1
    56e6:	08 f4       	brcc	.+2      	; 0x56ea <_ZN9Executive3runEv+0x7c>
    56e8:	5e c0       	rjmp	.+188    	; 0x57a6 <_ZN9Executive3runEv+0x138>
		float Hz = (((float)temp_frame_count) / ((float)(time-temp_time)/1000));
    56ea:	0e 94 60 43 	call	0x86c0	; 0x86c0 <__floatsisf>
    56ee:	4b 01       	movw	r8, r22
    56f0:	5c 01       	movw	r10, r24
    56f2:	c7 01       	movw	r24, r14
    56f4:	b6 01       	movw	r22, r12
    56f6:	0e 94 5e 43 	call	0x86bc	; 0x86bc <__floatunsisf>
    56fa:	20 e0       	ldi	r18, 0x00	; 0
    56fc:	30 e0       	ldi	r19, 0x00	; 0
    56fe:	4a e7       	ldi	r20, 0x7A	; 122
    5700:	54 e4       	ldi	r21, 0x44	; 68
    5702:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    5706:	9b 01       	movw	r18, r22
    5708:	ac 01       	movw	r20, r24
    570a:	c5 01       	movw	r24, r10
    570c:	b4 01       	movw	r22, r8
    570e:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    5712:	6b 01       	movw	r12, r22
    5714:	7c 01       	movw	r14, r24
		Serial.print("Running at ");
    5716:	65 eb       	ldi	r22, 0xB5	; 181
    5718:	74 e0       	ldi	r23, 0x04	; 4
    571a:	82 e8       	ldi	r24, 0x82	; 130
    571c:	98 e0       	ldi	r25, 0x08	; 8
    571e:	0e 94 4d 3a 	call	0x749a	; 0x749a <_ZN5Print5printEPKc>
		Serial.print(Hz);
    5722:	22 e0       	ldi	r18, 0x02	; 2
    5724:	30 e0       	ldi	r19, 0x00	; 0
    5726:	b7 01       	movw	r22, r14
    5728:	a6 01       	movw	r20, r12
    572a:	82 e8       	ldi	r24, 0x82	; 130
    572c:	98 e0       	ldi	r25, 0x08	; 8
    572e:	0e 94 68 3c 	call	0x78d0	; 0x78d0 <_ZN5Print5printEdi>
		Serial.print(" Hertz (");
    5732:	61 ec       	ldi	r22, 0xC1	; 193
    5734:	74 e0       	ldi	r23, 0x04	; 4
    5736:	82 e8       	ldi	r24, 0x82	; 130
    5738:	98 e0       	ldi	r25, 0x08	; 8
    573a:	0e 94 4d 3a 	call	0x749a	; 0x749a <_ZN5Print5printEPKc>
		Serial.print(temp_frame_count);
    573e:	4e 81       	ldd	r20, Y+6	; 0x06
    5740:	5f 81       	ldd	r21, Y+7	; 0x07
    5742:	68 85       	ldd	r22, Y+8	; 0x08
    5744:	79 85       	ldd	r23, Y+9	; 0x09
    5746:	2a e0       	ldi	r18, 0x0A	; 10
    5748:	30 e0       	ldi	r19, 0x00	; 0
    574a:	82 e8       	ldi	r24, 0x82	; 130
    574c:	98 e0       	ldi	r25, 0x08	; 8
    574e:	0e 94 0a 3b 	call	0x7614	; 0x7614 <_ZN5Print5printEli>
		Serial.print(" frames / ");
    5752:	6a ec       	ldi	r22, 0xCA	; 202
    5754:	74 e0       	ldi	r23, 0x04	; 4
    5756:	82 e8       	ldi	r24, 0x82	; 130
    5758:	98 e0       	ldi	r25, 0x08	; 8
    575a:	0e 94 4d 3a 	call	0x749a	; 0x749a <_ZN5Print5printEPKc>
		Serial.print(time-temp_time);
    575e:	48 81       	ld	r20, Y
    5760:	59 81       	ldd	r21, Y+1	; 0x01
    5762:	6a 81       	ldd	r22, Y+2	; 0x02
    5764:	7b 81       	ldd	r23, Y+3	; 0x03
    5766:	8a 85       	ldd	r24, Y+10	; 0x0a
    5768:	9b 85       	ldd	r25, Y+11	; 0x0b
    576a:	ac 85       	ldd	r26, Y+12	; 0x0c
    576c:	bd 85       	ldd	r27, Y+13	; 0x0d
    576e:	48 1b       	sub	r20, r24
    5770:	59 0b       	sbc	r21, r25
    5772:	6a 0b       	sbc	r22, r26
    5774:	7b 0b       	sbc	r23, r27
    5776:	2a e0       	ldi	r18, 0x0A	; 10
    5778:	30 e0       	ldi	r19, 0x00	; 0
    577a:	82 e8       	ldi	r24, 0x82	; 130
    577c:	98 e0       	ldi	r25, 0x08	; 8
    577e:	0e 94 5e 3b 	call	0x76bc	; 0x76bc <_ZN5Print5printEmi>
		Serial.println(" ms )");
    5782:	65 ed       	ldi	r22, 0xD5	; 213
    5784:	74 e0       	ldi	r23, 0x04	; 4
    5786:	82 e8       	ldi	r24, 0x82	; 130
    5788:	98 e0       	ldi	r25, 0x08	; 8
    578a:	0e 94 87 3a 	call	0x750e	; 0x750e <_ZN5Print7printlnEPKc>
		
		//reset counters
		temp_time = time;
    578e:	88 81       	ld	r24, Y
    5790:	99 81       	ldd	r25, Y+1	; 0x01
    5792:	aa 81       	ldd	r26, Y+2	; 0x02
    5794:	bb 81       	ldd	r27, Y+3	; 0x03
    5796:	8a 87       	std	Y+10, r24	; 0x0a
    5798:	9b 87       	std	Y+11, r25	; 0x0b
    579a:	ac 87       	std	Y+12, r26	; 0x0c
    579c:	bd 87       	std	Y+13, r27	; 0x0d
		temp_frame_count=0;
    579e:	1e 82       	std	Y+6, r1	; 0x06
    57a0:	1f 82       	std	Y+7, r1	; 0x07
    57a2:	18 86       	std	Y+8, r1	; 0x08
    57a4:	19 86       	std	Y+9, r1	; 0x09
	}
	
	//global::timems = time;
	//global::timsec = (float)(time/1000);
}
    57a6:	df 91       	pop	r29
    57a8:	cf 91       	pop	r28
    57aa:	1f 91       	pop	r17
    57ac:	0f 91       	pop	r16
    57ae:	ff 90       	pop	r15
    57b0:	ef 90       	pop	r14
    57b2:	df 90       	pop	r13
    57b4:	cf 90       	pop	r12
    57b6:	bf 90       	pop	r11
    57b8:	af 90       	pop	r10
    57ba:	9f 90       	pop	r9
    57bc:	8f 90       	pop	r8
    57be:	08 95       	ret

000057c0 <_ZN5LUT1DC1EiPfS0_>:
*	LUT1D
**************************/

//---Constructor-----

LUT1D::LUT1D(int lenx, float *xvals, float *zvals){
    57c0:	fc 01       	movw	r30, r24
	//Copy the X data
	_lenx=lenx;
    57c2:	75 83       	std	Z+5, r23	; 0x05
    57c4:	64 83       	std	Z+4, r22	; 0x04
	float xvals_temp[lenx];
	_x = xvals_temp;
	memcpy(&_x, &xvals, sizeof xvals);
    57c6:	51 83       	std	Z+1, r21	; 0x01
    57c8:	40 83       	st	Z, r20

	//Copy the z data
	float zvals_temp[lenx];
	_z=zvals_temp;
	memcpy(&_z, &zvals, sizeof zvals);
    57ca:	33 83       	std	Z+3, r19	; 0x03
    57cc:	22 83       	std	Z+2, r18	; 0x02
    57ce:	08 95       	ret

000057d0 <_ZN5LUT1D6lookupEf>:
}

//---lookup-----

float LUT1D::lookup(float xval){
    57d0:	2f 92       	push	r2
    57d2:	3f 92       	push	r3
    57d4:	4f 92       	push	r4
    57d6:	5f 92       	push	r5
    57d8:	6f 92       	push	r6
    57da:	7f 92       	push	r7
    57dc:	8f 92       	push	r8
    57de:	9f 92       	push	r9
    57e0:	af 92       	push	r10
    57e2:	bf 92       	push	r11
    57e4:	cf 92       	push	r12
    57e6:	df 92       	push	r13
    57e8:	ef 92       	push	r14
    57ea:	ff 92       	push	r15
    57ec:	0f 93       	push	r16
    57ee:	1f 93       	push	r17
    57f0:	cf 93       	push	r28
    57f2:	df 93       	push	r29
    57f4:	00 d0       	rcall	.+0      	; 0x57f6 <_ZN5LUT1D6lookupEf+0x26>
    57f6:	1f 92       	push	r1
    57f8:	cd b7       	in	r28, 0x3d	; 61
    57fa:	de b7       	in	r29, 0x3e	; 62
    57fc:	3c 01       	movw	r6, r24
    57fe:	4a 01       	movw	r8, r20
    5800:	5b 01       	movw	r10, r22
  if( xval <= _x[0]){
    5802:	dc 01       	movw	r26, r24
    5804:	0d 91       	ld	r16, X+
    5806:	1c 91       	ld	r17, X
    5808:	9a 01       	movw	r18, r20
    580a:	ab 01       	movw	r20, r22
    580c:	f8 01       	movw	r30, r16
    580e:	60 81       	ld	r22, Z
    5810:	71 81       	ldd	r23, Z+1	; 0x01
    5812:	82 81       	ldd	r24, Z+2	; 0x02
    5814:	93 81       	ldd	r25, Z+3	; 0x03
    5816:	0e 94 10 44 	call	0x8820	; 0x8820 <__gesf2>
    581a:	88 23       	and	r24, r24
    581c:	54 f0       	brlt	.+20     	; 0x5832 <_ZN5LUT1D6lookupEf+0x62>
     return _z[0]; 
    581e:	d3 01       	movw	r26, r6
    5820:	12 96       	adiw	r26, 0x02	; 2
    5822:	ed 91       	ld	r30, X+
    5824:	fc 91       	ld	r31, X
    5826:	13 97       	sbiw	r26, 0x03	; 3
    5828:	60 81       	ld	r22, Z
    582a:	71 81       	ldd	r23, Z+1	; 0x01
    582c:	82 81       	ldd	r24, Z+2	; 0x02
    582e:	93 81       	ldd	r25, Z+3	; 0x03
    5830:	a5 c0       	rjmp	.+330    	; 0x597c <_ZN5LUT1D6lookupEf+0x1ac>
  }else{
    if( xval >= _x[_lenx-1]){
    5832:	f3 01       	movw	r30, r6
    5834:	c4 80       	ldd	r12, Z+4	; 0x04
    5836:	d5 80       	ldd	r13, Z+5	; 0x05
    5838:	76 01       	movw	r14, r12
    583a:	f1 e0       	ldi	r31, 0x01	; 1
    583c:	ef 1a       	sub	r14, r31
    583e:	f0 ec       	ldi	r31, 0xC0	; 192
    5840:	ff 0a       	sbc	r15, r31
    5842:	ee 0c       	add	r14, r14
    5844:	ff 1c       	adc	r15, r15
    5846:	ee 0c       	add	r14, r14
    5848:	ff 1c       	adc	r15, r15
    584a:	f8 01       	movw	r30, r16
    584c:	ee 0d       	add	r30, r14
    584e:	ff 1d       	adc	r31, r15
    5850:	20 81       	ld	r18, Z
    5852:	31 81       	ldd	r19, Z+1	; 0x01
    5854:	42 81       	ldd	r20, Z+2	; 0x02
    5856:	53 81       	ldd	r21, Z+3	; 0x03
    5858:	c5 01       	movw	r24, r10
    585a:	b4 01       	movw	r22, r8
    585c:	0e 94 10 44 	call	0x8820	; 0x8820 <__gesf2>
    5860:	88 23       	and	r24, r24
    5862:	4c f4       	brge	.+18     	; 0x5876 <_ZN5LUT1D6lookupEf+0xa6>
      return _z[_lenx-1];
    }else{
      // In the Middel of Table, interpolate to find value.
      int ix = 0;
      for ( ix = 0; ix < _lenx - 1 ; ix++ )
    5864:	21 e0       	ldi	r18, 0x01	; 1
    5866:	c2 1a       	sub	r12, r18
    5868:	d1 08       	sbc	r13, r1
    586a:	1c 14       	cp	r1, r12
    586c:	1d 04       	cpc	r1, r13
    586e:	84 f0       	brlt	.+32     	; 0x5890 <_ZN5LUT1D6lookupEf+0xc0>
    5870:	e1 2c       	mov	r14, r1
    5872:	f1 2c       	mov	r15, r1
    5874:	2d c0       	rjmp	.+90     	; 0x58d0 <_ZN5LUT1D6lookupEf+0x100>
float LUT1D::lookup(float xval){
  if( xval <= _x[0]){
     return _z[0]; 
  }else{
    if( xval >= _x[_lenx-1]){
      return _z[_lenx-1];
    5876:	d3 01       	movw	r26, r6
    5878:	12 96       	adiw	r26, 0x02	; 2
    587a:	8d 91       	ld	r24, X+
    587c:	9c 91       	ld	r25, X
    587e:	13 97       	sbiw	r26, 0x03	; 3
    5880:	8e 0d       	add	r24, r14
    5882:	9f 1d       	adc	r25, r15
    5884:	fc 01       	movw	r30, r24
    5886:	60 81       	ld	r22, Z
    5888:	71 81       	ldd	r23, Z+1	; 0x01
    588a:	82 81       	ldd	r24, Z+2	; 0x02
    588c:	93 81       	ldd	r25, Z+3	; 0x03
    588e:	76 c0       	rjmp	.+236    	; 0x597c <_ZN5LUT1D6lookupEf+0x1ac>
    5890:	28 01       	movw	r4, r16
    }else{
      // In the Middel of Table, interpolate to find value.
      int ix = 0;
      for ( ix = 0; ix < _lenx - 1 ; ix++ )
    5892:	e1 2c       	mov	r14, r1
    5894:	f1 2c       	mov	r15, r1
      {
          //Find the location we are in the table.
          if( (xval >= _x[ix]) && (xval < _x[ix+1])){
    5896:	d2 01       	movw	r26, r4
    5898:	2d 91       	ld	r18, X+
    589a:	3d 91       	ld	r19, X+
    589c:	4d 91       	ld	r20, X+
    589e:	5d 91       	ld	r21, X+
    58a0:	2d 01       	movw	r4, r26
    58a2:	c5 01       	movw	r24, r10
    58a4:	b4 01       	movw	r22, r8
    58a6:	0e 94 10 44 	call	0x8820	; 0x8820 <__gesf2>
    58aa:	88 23       	and	r24, r24
    58ac:	5c f0       	brlt	.+22     	; 0x58c4 <_ZN5LUT1D6lookupEf+0xf4>
    58ae:	f2 01       	movw	r30, r4
    58b0:	20 81       	ld	r18, Z
    58b2:	31 81       	ldd	r19, Z+1	; 0x01
    58b4:	42 81       	ldd	r20, Z+2	; 0x02
    58b6:	53 81       	ldd	r21, Z+3	; 0x03
    58b8:	c5 01       	movw	r24, r10
    58ba:	b4 01       	movw	r22, r8
    58bc:	0e 94 c1 42 	call	0x8582	; 0x8582 <__cmpsf2>
    58c0:	88 23       	and	r24, r24
    58c2:	34 f0       	brlt	.+12     	; 0x58d0 <_ZN5LUT1D6lookupEf+0x100>
    if( xval >= _x[_lenx-1]){
      return _z[_lenx-1];
    }else{
      // In the Middel of Table, interpolate to find value.
      int ix = 0;
      for ( ix = 0; ix < _lenx - 1 ; ix++ )
    58c4:	ff ef       	ldi	r31, 0xFF	; 255
    58c6:	ef 1a       	sub	r14, r31
    58c8:	ff 0a       	sbc	r15, r31
    58ca:	ec 14       	cp	r14, r12
    58cc:	fd 04       	cpc	r15, r13
    58ce:	1c f3       	brlt	.-58     	; 0x5896 <_ZN5LUT1D6lookupEf+0xc6>
              break;
          }
      }
      
      //Interpolate z value
      return ((xval - _x[ix])*((_z[ix+1] - _z[ix])/(_x[ix+1]-_x[ix])) + _z[ix]);
    58d0:	c7 01       	movw	r24, r14
    58d2:	88 0f       	add	r24, r24
    58d4:	99 1f       	adc	r25, r25
    58d6:	88 0f       	add	r24, r24
    58d8:	99 1f       	adc	r25, r25
    58da:	f8 01       	movw	r30, r16
    58dc:	e8 0f       	add	r30, r24
    58de:	f9 1f       	adc	r31, r25
    58e0:	c0 80       	ld	r12, Z
    58e2:	d1 80       	ldd	r13, Z+1	; 0x01
    58e4:	e2 80       	ldd	r14, Z+2	; 0x02
    58e6:	f3 80       	ldd	r15, Z+3	; 0x03
    58e8:	d3 01       	movw	r26, r6
    58ea:	12 96       	adiw	r26, 0x02	; 2
    58ec:	0d 90       	ld	r0, X+
    58ee:	bc 91       	ld	r27, X
    58f0:	a0 2d       	mov	r26, r0
    58f2:	ba 83       	std	Y+2, r27	; 0x02
    58f4:	a9 83       	std	Y+1, r26	; 0x01
    58f6:	1c 01       	movw	r2, r24
    58f8:	b4 e0       	ldi	r27, 0x04	; 4
    58fa:	2b 0e       	add	r2, r27
    58fc:	31 1c       	adc	r3, r1
    58fe:	e9 81       	ldd	r30, Y+1	; 0x01
    5900:	fa 81       	ldd	r31, Y+2	; 0x02
    5902:	e8 0f       	add	r30, r24
    5904:	f9 1f       	adc	r31, r25
    5906:	40 80       	ld	r4, Z
    5908:	51 80       	ldd	r5, Z+1	; 0x01
    590a:	62 80       	ldd	r6, Z+2	; 0x02
    590c:	73 80       	ldd	r7, Z+3	; 0x03
    590e:	a7 01       	movw	r20, r14
    5910:	96 01       	movw	r18, r12
    5912:	c5 01       	movw	r24, r10
    5914:	b4 01       	movw	r22, r8
    5916:	0e 94 5c 42 	call	0x84b8	; 0x84b8 <__subsf3>
    591a:	4b 01       	movw	r8, r22
    591c:	5c 01       	movw	r10, r24
    591e:	e9 81       	ldd	r30, Y+1	; 0x01
    5920:	fa 81       	ldd	r31, Y+2	; 0x02
    5922:	e2 0d       	add	r30, r2
    5924:	f3 1d       	adc	r31, r3
    5926:	a3 01       	movw	r20, r6
    5928:	92 01       	movw	r18, r4
    592a:	60 81       	ld	r22, Z
    592c:	71 81       	ldd	r23, Z+1	; 0x01
    592e:	82 81       	ldd	r24, Z+2	; 0x02
    5930:	93 81       	ldd	r25, Z+3	; 0x03
    5932:	0e 94 5c 42 	call	0x84b8	; 0x84b8 <__subsf3>
    5936:	69 83       	std	Y+1, r22	; 0x01
    5938:	7a 83       	std	Y+2, r23	; 0x02
    593a:	8b 83       	std	Y+3, r24	; 0x03
    593c:	9c 83       	std	Y+4, r25	; 0x04
    593e:	f8 01       	movw	r30, r16
    5940:	e2 0d       	add	r30, r2
    5942:	f3 1d       	adc	r31, r3
    5944:	a7 01       	movw	r20, r14
    5946:	96 01       	movw	r18, r12
    5948:	60 81       	ld	r22, Z
    594a:	71 81       	ldd	r23, Z+1	; 0x01
    594c:	82 81       	ldd	r24, Z+2	; 0x02
    594e:	93 81       	ldd	r25, Z+3	; 0x03
    5950:	0e 94 5c 42 	call	0x84b8	; 0x84b8 <__subsf3>
    5954:	9b 01       	movw	r18, r22
    5956:	ac 01       	movw	r20, r24
    5958:	69 81       	ldd	r22, Y+1	; 0x01
    595a:	7a 81       	ldd	r23, Y+2	; 0x02
    595c:	8b 81       	ldd	r24, Y+3	; 0x03
    595e:	9c 81       	ldd	r25, Y+4	; 0x04
    5960:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    5964:	9b 01       	movw	r18, r22
    5966:	ac 01       	movw	r20, r24
    5968:	c5 01       	movw	r24, r10
    596a:	b4 01       	movw	r22, r8
    596c:	0e 94 14 44 	call	0x8828	; 0x8828 <__mulsf3>
    5970:	9b 01       	movw	r18, r22
    5972:	ac 01       	movw	r20, r24
    5974:	c3 01       	movw	r24, r6
    5976:	b2 01       	movw	r22, r4
    5978:	0e 94 5d 42 	call	0x84ba	; 0x84ba <__addsf3>
    }
  }
}
    597c:	0f 90       	pop	r0
    597e:	0f 90       	pop	r0
    5980:	0f 90       	pop	r0
    5982:	0f 90       	pop	r0
    5984:	df 91       	pop	r29
    5986:	cf 91       	pop	r28
    5988:	1f 91       	pop	r17
    598a:	0f 91       	pop	r16
    598c:	ff 90       	pop	r15
    598e:	ef 90       	pop	r14
    5990:	df 90       	pop	r13
    5992:	cf 90       	pop	r12
    5994:	bf 90       	pop	r11
    5996:	af 90       	pop	r10
    5998:	9f 90       	pop	r9
    599a:	8f 90       	pop	r8
    599c:	7f 90       	pop	r7
    599e:	6f 90       	pop	r6
    59a0:	5f 90       	pop	r5
    59a2:	4f 90       	pop	r4
    59a4:	3f 90       	pop	r3
    59a6:	2f 90       	pop	r2
    59a8:	08 95       	ret

000059aa <_ZN16WheatstoneBridgeC1E6Stringii5LUT1Dfffff>:
	AN_Vs = _AnalogIn_Vs;
	AN_Vo = _AnalogIn_V;
}

//Class Instantiation
WheatstoneBridge::WheatstoneBridge(String _Name, int _AnalogIn_Vs, int _AnalogIn_V, LUT1D _LUT_R2DEGC, float _R2, float _R3, float _R4, float _AmpGain, float _Rs){
    59aa:	2f 92       	push	r2
    59ac:	3f 92       	push	r3
    59ae:	4f 92       	push	r4
    59b0:	5f 92       	push	r5
    59b2:	6f 92       	push	r6
    59b4:	7f 92       	push	r7
    59b6:	8f 92       	push	r8
    59b8:	9f 92       	push	r9
    59ba:	af 92       	push	r10
    59bc:	bf 92       	push	r11
    59be:	cf 92       	push	r12
    59c0:	df 92       	push	r13
    59c2:	ef 92       	push	r14
    59c4:	ff 92       	push	r15
    59c6:	0f 93       	push	r16
    59c8:	1f 93       	push	r17
    59ca:	cf 93       	push	r28
    59cc:	df 93       	push	r29
    59ce:	cd b7       	in	r28, 0x3d	; 61
    59d0:	de b7       	in	r29, 0x3e	; 62
    59d2:	28 97       	sbiw	r28, 0x08	; 8
    59d4:	0f b6       	in	r0, 0x3f	; 63
    59d6:	f8 94       	cli
    59d8:	de bf       	out	0x3e, r29	; 62
    59da:	0f be       	out	0x3f, r0	; 63
    59dc:	cd bf       	out	0x3d, r28	; 61
    59de:	3c 01       	movw	r6, r24
    59e0:	78 87       	std	Y+8, r23	; 0x08
    59e2:	6f 83       	std	Y+7, r22	; 0x07
    59e4:	1a 01       	movw	r2, r20
    59e6:	29 01       	movw	r4, r18
    59e8:	c9 82       	std	Y+1, r12	; 0x01
    59ea:	da 82       	std	Y+2, r13	; 0x02
    59ec:	eb 82       	std	Y+3, r14	; 0x03
    59ee:	fc 82       	std	Y+4, r15	; 0x04
    59f0:	0d 83       	std	Y+5, r16	; 0x05
    59f2:	1e 83       	std	Y+6, r17	; 0x06
    59f4:	fc 01       	movw	r30, r24
    59f6:	14 82       	std	Z+4, r1	; 0x04
    59f8:	15 82       	std	Z+5, r1	; 0x05
    59fa:	16 82       	std	Z+6, r1	; 0x06
    59fc:	17 82       	std	Z+7, r1	; 0x07
    59fe:	8c 01       	movw	r16, r24
    5a00:	08 5f       	subi	r16, 0xF8	; 248
    5a02:	1f 4f       	sbci	r17, 0xFF	; 255
    5a04:	60 ee       	ldi	r22, 0xE0	; 224
    5a06:	75 e0       	ldi	r23, 0x05	; 5
    5a08:	c8 01       	movw	r24, r16
    5a0a:	0e 94 51 41 	call	0x82a2	; 0x82a2 <_ZN6StringC1EPKc>
	Name = _Name;
    5a0e:	6f 81       	ldd	r22, Y+7	; 0x07
    5a10:	78 85       	ldd	r23, Y+8	; 0x08
    5a12:	c8 01       	movw	r24, r16
    5a14:	0e 94 83 41 	call	0x8306	; 0x8306 <_ZN6StringaSERKS_>
	LUT_R2DEGC = &_LUT_R2DEGC;
    5a18:	ce 01       	movw	r24, r28
    5a1a:	01 96       	adiw	r24, 0x01	; 1
    5a1c:	f3 01       	movw	r30, r6
    5a1e:	93 a7       	std	Z+43, r25	; 0x2b
    5a20:	82 a7       	std	Z+42, r24	; 0x2a
	R2 = _R2;
    5a22:	86 8e       	std	Z+30, r8	; 0x1e
    5a24:	97 8e       	std	Z+31, r9	; 0x1f
    5a26:	a0 a2       	std	Z+32, r10	; 0x20
    5a28:	b1 a2       	std	Z+33, r11	; 0x21
	R3 = _R3;
    5a2a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5a2c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5a2e:	a8 a1       	ldd	r26, Y+32	; 0x20
    5a30:	b9 a1       	ldd	r27, Y+33	; 0x21
    5a32:	82 a3       	std	Z+34, r24	; 0x22
    5a34:	93 a3       	std	Z+35, r25	; 0x23
    5a36:	a4 a3       	std	Z+36, r26	; 0x24
    5a38:	b5 a3       	std	Z+37, r27	; 0x25
	R4 = _R4;
    5a3a:	8a a1       	ldd	r24, Y+34	; 0x22
    5a3c:	9b a1       	ldd	r25, Y+35	; 0x23
    5a3e:	ac a1       	ldd	r26, Y+36	; 0x24
    5a40:	bd a1       	ldd	r27, Y+37	; 0x25
    5a42:	86 a3       	std	Z+38, r24	; 0x26
    5a44:	97 a3       	std	Z+39, r25	; 0x27
    5a46:	a0 a7       	std	Z+40, r26	; 0x28
    5a48:	b1 a7       	std	Z+41, r27	; 0x29
	Rs = _Rs;
    5a4a:	8a a5       	ldd	r24, Y+42	; 0x2a
    5a4c:	9b a5       	ldd	r25, Y+43	; 0x2b
    5a4e:	ac a5       	ldd	r26, Y+44	; 0x2c
    5a50:	bd a5       	ldd	r27, Y+45	; 0x2d
    5a52:	82 8f       	std	Z+26, r24	; 0x1a
    5a54:	93 8f       	std	Z+27, r25	; 0x1b
    5a56:	a4 8f       	std	Z+28, r26	; 0x1c
    5a58:	b5 8f       	std	Z+29, r27	; 0x1d
	AmpGain = _AmpGain;
    5a5a:	8e a1       	ldd	r24, Y+38	; 0x26
    5a5c:	9f a1       	ldd	r25, Y+39	; 0x27
    5a5e:	a8 a5       	ldd	r26, Y+40	; 0x28
    5a60:	b9 a5       	ldd	r27, Y+41	; 0x29
    5a62:	86 8b       	std	Z+22, r24	; 0x16
    5a64:	97 8b       	std	Z+23, r25	; 0x17
    5a66:	a0 8f       	std	Z+24, r26	; 0x18
    5a68:	b1 8f       	std	Z+25, r27	; 0x19
	AN_Vs = _AnalogIn_Vs;
    5a6a:	33 82       	std	Z+3, r3	; 0x03
    5a6c:	22 82       	std	Z+2, r2	; 0x02
	AN_Vo = _AnalogIn_V;
    5a6e:	51 82       	std	Z+1, r5	; 0x01
    5a70:	40 82       	st	Z, r4
}
    5a72:	28 96       	adiw	r28, 0x08	; 8
    5a74:	0f b6       	in	r0, 0x3f	; 63
    5a76:	f8 94       	cli
    5a78:	de bf       	out	0x3e, r29	; 62
    5a7a:	0f be       	out	0x3f, r0	; 63
    5a7c:	cd bf       	out	0x3d, r28	; 61
    5a7e:	df 91       	pop	r29
    5a80:	cf 91       	pop	r28
    5a82:	1f 91       	pop	r17
    5a84:	0f 91       	pop	r16
    5a86:	ff 90       	pop	r15
    5a88:	ef 90       	pop	r14
    5a8a:	df 90       	pop	r13
    5a8c:	cf 90       	pop	r12
    5a8e:	bf 90       	pop	r11
    5a90:	af 90       	pop	r10
    5a92:	9f 90       	pop	r9
    5a94:	8f 90       	pop	r8
    5a96:	7f 90       	pop	r7
    5a98:	6f 90       	pop	r6
    5a9a:	5f 90       	pop	r5
    5a9c:	4f 90       	pop	r4
    5a9e:	3f 90       	pop	r3
    5aa0:	2f 90       	pop	r2
    5aa2:	08 95       	ret

00005aa4 <_ZN16WheatstoneBridge6UpdateEv>:

//Read RTD resistance
float WheatstoneBridge::Update(){
    5aa4:	4f 92       	push	r4
    5aa6:	5f 92       	push	r5
    5aa8:	6f 92       	push	r6
    5aaa:	7f 92       	push	r7
    5aac:	8f 92       	push	r8
    5aae:	9f 92       	push	r9
    5ab0:	af 92       	push	r10
    5ab2:	bf 92       	push	r11
    5ab4:	cf 92       	push	r12
    5ab6:	df 92       	push	r13
    5ab8:	ef 92       	push	r14
    5aba:	ff 92       	push	r15
    5abc:	0f 93       	push	r16
    5abe:	1f 93       	push	r17
    5ac0:	cf 93       	push	r28
    5ac2:	df 93       	push	r29
    5ac4:	cd b7       	in	r28, 0x3d	; 61
    5ac6:	de b7       	in	r29, 0x3e	; 62
    5ac8:	28 97       	sbiw	r28, 0x08	; 8
    5aca:	0f b6       	in	r0, 0x3f	; 63
    5acc:	f8 94       	cli
    5ace:	de bf       	out	0x3e, r29	; 62
    5ad0:	0f be       	out	0x3f, r0	; 63
    5ad2:	cd bf       	out	0x3d, r28	; 61
    5ad4:	8c 01       	movw	r16, r24
	
	Vs = (5.0*(float)analogRead(AN_Vs))/1023.0;
    5ad6:	fc 01       	movw	r30, r24
    5ad8:	82 81       	ldd	r24, Z+2	; 0x02
    5ada:	0e 94 c2 3f 	call	0x7f84	; 0x7f84 <analogRead>
    5ade:	bc 01       	movw	r22, r24
    5ae0:	99 0f       	add	r25, r25
    5ae2:	88 0b       	sbc	r24, r24
    5ae4:	99 0b       	sbc	r25, r25
    5ae6:	0e 94 60 43 	call	0x86c0	; 0x86c0 <__floatsisf>
    5aea:	20 e0       	ldi	r18, 0x00	; 0
    5aec:	30 e0       	ldi	r19, 0x00	; 0
    5aee:	40 ea       	ldi	r20, 0xA0	; 160
    5af0:	50 e4       	ldi	r21, 0x40	; 64
    5af2:	0e 94 14 44 	call	0x8828	; 0x8828 <__mulsf3>
    5af6:	20 e0       	ldi	r18, 0x00	; 0
    5af8:	30 ec       	ldi	r19, 0xC0	; 192
    5afa:	4f e7       	ldi	r20, 0x7F	; 127
    5afc:	54 e4       	ldi	r21, 0x44	; 68
    5afe:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    5b02:	f8 01       	movw	r30, r16
    5b04:	62 8b       	std	Z+18, r22	; 0x12
    5b06:	73 8b       	std	Z+19, r23	; 0x13
    5b08:	84 8b       	std	Z+20, r24	; 0x14
    5b0a:	95 8b       	std	Z+21, r25	; 0x15
	Vo = (5.0*(float)analogRead(AN_Vo))/1023.0;
    5b0c:	80 81       	ld	r24, Z
    5b0e:	0e 94 c2 3f 	call	0x7f84	; 0x7f84 <analogRead>
    5b12:	bc 01       	movw	r22, r24
    5b14:	99 0f       	add	r25, r25
    5b16:	88 0b       	sbc	r24, r24
    5b18:	99 0b       	sbc	r25, r25
    5b1a:	0e 94 60 43 	call	0x86c0	; 0x86c0 <__floatsisf>
    5b1e:	20 e0       	ldi	r18, 0x00	; 0
    5b20:	30 e0       	ldi	r19, 0x00	; 0
    5b22:	40 ea       	ldi	r20, 0xA0	; 160
    5b24:	50 e4       	ldi	r21, 0x40	; 64
    5b26:	0e 94 14 44 	call	0x8828	; 0x8828 <__mulsf3>
    5b2a:	20 e0       	ldi	r18, 0x00	; 0
    5b2c:	30 ec       	ldi	r19, 0xC0	; 192
    5b2e:	4f e7       	ldi	r20, 0x7F	; 127
    5b30:	54 e4       	ldi	r21, 0x44	; 68
    5b32:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    5b36:	4b 01       	movw	r8, r22
    5b38:	5c 01       	movw	r10, r24
    5b3a:	f8 01       	movw	r30, r16
    5b3c:	66 87       	std	Z+14, r22	; 0x0e
    5b3e:	77 87       	std	Z+15, r23	; 0x0f
    5b40:	80 8b       	std	Z+16, r24	; 0x10
    5b42:	91 8b       	std	Z+17, r25	; 0x11
	float Vbridge = Vo / max(AmpGain,0.001);
    5b44:	c6 88       	ldd	r12, Z+22	; 0x16
    5b46:	d7 88       	ldd	r13, Z+23	; 0x17
    5b48:	e0 8c       	ldd	r14, Z+24	; 0x18
    5b4a:	f1 8c       	ldd	r15, Z+25	; 0x19
    5b4c:	2f e6       	ldi	r18, 0x6F	; 111
    5b4e:	32 e1       	ldi	r19, 0x12	; 18
    5b50:	43 e8       	ldi	r20, 0x83	; 131
    5b52:	5a e3       	ldi	r21, 0x3A	; 58
    5b54:	6c 2d       	mov	r22, r12
    5b56:	7d 2d       	mov	r23, r13
    5b58:	8e 2d       	mov	r24, r14
    5b5a:	9f 2d       	mov	r25, r15
    5b5c:	0e 94 10 44 	call	0x8820	; 0x8820 <__gesf2>
    5b60:	18 16       	cp	r1, r24
    5b62:	2c f4       	brge	.+10     	; 0x5b6e <_ZN16WheatstoneBridge6UpdateEv+0xca>
    5b64:	7c 2d       	mov	r23, r12
    5b66:	6d 2d       	mov	r22, r13
    5b68:	9e 2d       	mov	r25, r14
    5b6a:	8f 2d       	mov	r24, r15
    5b6c:	04 c0       	rjmp	.+8      	; 0x5b76 <_ZN16WheatstoneBridge6UpdateEv+0xd2>
    5b6e:	7f e6       	ldi	r23, 0x6F	; 111
    5b70:	62 e1       	ldi	r22, 0x12	; 18
    5b72:	93 e8       	ldi	r25, 0x83	; 131
    5b74:	8a e3       	ldi	r24, 0x3A	; 58
    5b76:	27 2f       	mov	r18, r23
    5b78:	36 2f       	mov	r19, r22
    5b7a:	49 2f       	mov	r20, r25
    5b7c:	58 2f       	mov	r21, r24
    5b7e:	c5 01       	movw	r24, r10
    5b80:	b4 01       	movw	r22, r8
    5b82:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
	float Vb_q_Vs = Vbridge / Vs;
    5b86:	f8 01       	movw	r30, r16
    5b88:	22 89       	ldd	r18, Z+18	; 0x12
    5b8a:	33 89       	ldd	r19, Z+19	; 0x13
    5b8c:	44 89       	ldd	r20, Z+20	; 0x14
    5b8e:	55 89       	ldd	r21, Z+21	; 0x15
    5b90:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    5b94:	69 83       	std	Y+1, r22	; 0x01
    5b96:	7a 83       	std	Y+2, r23	; 0x02
    5b98:	8b 83       	std	Y+3, r24	; 0x03
    5b9a:	9c 83       	std	Y+4, r25	; 0x04

	float Rcalc_num = (R2*R4 + (Vb_q_Vs)*(R2*(R3 + R4)));
    5b9c:	f8 01       	movw	r30, r16
    5b9e:	86 8c       	ldd	r8, Z+30	; 0x1e
    5ba0:	97 8c       	ldd	r9, Z+31	; 0x1f
    5ba2:	a0 a0       	ldd	r10, Z+32	; 0x20
    5ba4:	b1 a0       	ldd	r11, Z+33	; 0x21
    5ba6:	46 a0       	ldd	r4, Z+38	; 0x26
    5ba8:	57 a0       	ldd	r5, Z+39	; 0x27
    5baa:	60 a4       	ldd	r6, Z+40	; 0x28
    5bac:	71 a4       	ldd	r7, Z+41	; 0x29
    5bae:	c2 a0       	ldd	r12, Z+34	; 0x22
    5bb0:	d3 a0       	ldd	r13, Z+35	; 0x23
    5bb2:	e4 a0       	ldd	r14, Z+36	; 0x24
    5bb4:	f5 a0       	ldd	r15, Z+37	; 0x25
    5bb6:	a7 01       	movw	r20, r14
    5bb8:	96 01       	movw	r18, r12
    5bba:	c3 01       	movw	r24, r6
    5bbc:	b2 01       	movw	r22, r4
    5bbe:	0e 94 5d 42 	call	0x84ba	; 0x84ba <__addsf3>
    5bc2:	6d 83       	std	Y+5, r22	; 0x05
    5bc4:	7e 83       	std	Y+6, r23	; 0x06
    5bc6:	8f 83       	std	Y+7, r24	; 0x07
    5bc8:	98 87       	std	Y+8, r25	; 0x08
    5bca:	a3 01       	movw	r20, r6
    5bcc:	92 01       	movw	r18, r4
    5bce:	c5 01       	movw	r24, r10
    5bd0:	b4 01       	movw	r22, r8
    5bd2:	0e 94 14 44 	call	0x8828	; 0x8828 <__mulsf3>
    5bd6:	2b 01       	movw	r4, r22
    5bd8:	3c 01       	movw	r6, r24
    5bda:	2d 81       	ldd	r18, Y+5	; 0x05
    5bdc:	3e 81       	ldd	r19, Y+6	; 0x06
    5bde:	4f 81       	ldd	r20, Y+7	; 0x07
    5be0:	58 85       	ldd	r21, Y+8	; 0x08
    5be2:	c5 01       	movw	r24, r10
    5be4:	b4 01       	movw	r22, r8
    5be6:	0e 94 14 44 	call	0x8828	; 0x8828 <__mulsf3>
    5bea:	29 81       	ldd	r18, Y+1	; 0x01
    5bec:	3a 81       	ldd	r19, Y+2	; 0x02
    5bee:	4b 81       	ldd	r20, Y+3	; 0x03
    5bf0:	5c 81       	ldd	r21, Y+4	; 0x04
    5bf2:	0e 94 14 44 	call	0x8828	; 0x8828 <__mulsf3>
    5bf6:	9b 01       	movw	r18, r22
    5bf8:	ac 01       	movw	r20, r24
    5bfa:	c3 01       	movw	r24, r6
    5bfc:	b2 01       	movw	r22, r4
    5bfe:	0e 94 5d 42 	call	0x84ba	; 0x84ba <__addsf3>
    5c02:	4b 01       	movw	r8, r22
    5c04:	5c 01       	movw	r10, r24
	float Rcalc_den = (R3 - (Vb_q_Vs)*(R3+R4));
    5c06:	2d 81       	ldd	r18, Y+5	; 0x05
    5c08:	3e 81       	ldd	r19, Y+6	; 0x06
    5c0a:	4f 81       	ldd	r20, Y+7	; 0x07
    5c0c:	58 85       	ldd	r21, Y+8	; 0x08
    5c0e:	69 81       	ldd	r22, Y+1	; 0x01
    5c10:	7a 81       	ldd	r23, Y+2	; 0x02
    5c12:	8b 81       	ldd	r24, Y+3	; 0x03
    5c14:	9c 81       	ldd	r25, Y+4	; 0x04
    5c16:	0e 94 14 44 	call	0x8828	; 0x8828 <__mulsf3>
    5c1a:	9b 01       	movw	r18, r22
    5c1c:	ac 01       	movw	r20, r24
    5c1e:	c7 01       	movw	r24, r14
    5c20:	b6 01       	movw	r22, r12
    5c22:	0e 94 5c 42 	call	0x84b8	; 0x84b8 <__subsf3>
	Rcalc = Rcalc_num / max(Rcalc_den - Rs,0.01);
    5c26:	f8 01       	movw	r30, r16
    5c28:	22 8d       	ldd	r18, Z+26	; 0x1a
    5c2a:	33 8d       	ldd	r19, Z+27	; 0x1b
    5c2c:	44 8d       	ldd	r20, Z+28	; 0x1c
    5c2e:	55 8d       	ldd	r21, Z+29	; 0x1d
    5c30:	0e 94 5c 42 	call	0x84b8	; 0x84b8 <__subsf3>
    5c34:	c6 2e       	mov	r12, r22
    5c36:	d7 2e       	mov	r13, r23
    5c38:	e8 2e       	mov	r14, r24
    5c3a:	f9 2e       	mov	r15, r25
    5c3c:	2a e0       	ldi	r18, 0x0A	; 10
    5c3e:	37 ed       	ldi	r19, 0xD7	; 215
    5c40:	43 e2       	ldi	r20, 0x23	; 35
    5c42:	5c e3       	ldi	r21, 0x3C	; 60
    5c44:	0e 94 10 44 	call	0x8820	; 0x8820 <__gesf2>
    5c48:	18 16       	cp	r1, r24
    5c4a:	2c f4       	brge	.+10     	; 0x5c56 <_ZN16WheatstoneBridge6UpdateEv+0x1b2>
    5c4c:	7c 2d       	mov	r23, r12
    5c4e:	6d 2d       	mov	r22, r13
    5c50:	9e 2d       	mov	r25, r14
    5c52:	8f 2d       	mov	r24, r15
    5c54:	04 c0       	rjmp	.+8      	; 0x5c5e <_ZN16WheatstoneBridge6UpdateEv+0x1ba>
    5c56:	7a e0       	ldi	r23, 0x0A	; 10
    5c58:	67 ed       	ldi	r22, 0xD7	; 215
    5c5a:	93 e2       	ldi	r25, 0x23	; 35
    5c5c:	8c e3       	ldi	r24, 0x3C	; 60
    5c5e:	27 2f       	mov	r18, r23
    5c60:	36 2f       	mov	r19, r22
    5c62:	49 2f       	mov	r20, r25
    5c64:	58 2f       	mov	r21, r24
    5c66:	c5 01       	movw	r24, r10
    5c68:	b4 01       	movw	r22, r8
    5c6a:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    5c6e:	ab 01       	movw	r20, r22
    5c70:	bc 01       	movw	r22, r24
    5c72:	f8 01       	movw	r30, r16
    5c74:	44 a7       	std	Z+44, r20	; 0x2c
    5c76:	55 a7       	std	Z+45, r21	; 0x2d
    5c78:	66 a7       	std	Z+46, r22	; 0x2e
    5c7a:	77 a7       	std	Z+47, r23	; 0x2f
	degC = LUT_R2DEGC->lookup(Rcalc);
    5c7c:	82 a5       	ldd	r24, Z+42	; 0x2a
    5c7e:	93 a5       	ldd	r25, Z+43	; 0x2b
    5c80:	a7 dd       	rcall	.-1202   	; 0x57d0 <_ZN5LUT1D6lookupEf>
    5c82:	f8 01       	movw	r30, r16
    5c84:	60 ab       	std	Z+48, r22	; 0x30
    5c86:	71 ab       	std	Z+49, r23	; 0x31
    5c88:	82 ab       	std	Z+50, r24	; 0x32
    5c8a:	93 ab       	std	Z+51, r25	; 0x33
	degF = degC * 9/5 + 32;
    5c8c:	20 e0       	ldi	r18, 0x00	; 0
    5c8e:	30 e0       	ldi	r19, 0x00	; 0
    5c90:	40 e1       	ldi	r20, 0x10	; 16
    5c92:	51 e4       	ldi	r21, 0x41	; 65
    5c94:	0e 94 14 44 	call	0x8828	; 0x8828 <__mulsf3>
    5c98:	20 e0       	ldi	r18, 0x00	; 0
    5c9a:	30 e0       	ldi	r19, 0x00	; 0
    5c9c:	40 ea       	ldi	r20, 0xA0	; 160
    5c9e:	50 e4       	ldi	r21, 0x40	; 64
    5ca0:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    5ca4:	20 e0       	ldi	r18, 0x00	; 0
    5ca6:	30 e0       	ldi	r19, 0x00	; 0
    5ca8:	40 e0       	ldi	r20, 0x00	; 0
    5caa:	52 e4       	ldi	r21, 0x42	; 66
    5cac:	0e 94 5d 42 	call	0x84ba	; 0x84ba <__addsf3>
    5cb0:	f8 01       	movw	r30, r16
    5cb2:	64 ab       	std	Z+52, r22	; 0x34
    5cb4:	75 ab       	std	Z+53, r23	; 0x35
    5cb6:	86 ab       	std	Z+54, r24	; 0x36
    5cb8:	97 ab       	std	Z+55, r25	; 0x37
	//	if((millis() - lastSerialPrint)>2000){
	//		lastSerialPrint = millis();
	//		Serial.println("  RTD:" + Name + " Vo:" + Vo + " Vs:" + Vs + " Rc:" + Rcalc + " Tc:" + degC + " Tf:" + degF);
	//	}
	//#endif
}
    5cba:	28 96       	adiw	r28, 0x08	; 8
    5cbc:	0f b6       	in	r0, 0x3f	; 63
    5cbe:	f8 94       	cli
    5cc0:	de bf       	out	0x3e, r29	; 62
    5cc2:	0f be       	out	0x3f, r0	; 63
    5cc4:	cd bf       	out	0x3d, r28	; 61
    5cc6:	df 91       	pop	r29
    5cc8:	cf 91       	pop	r28
    5cca:	1f 91       	pop	r17
    5ccc:	0f 91       	pop	r16
    5cce:	ff 90       	pop	r15
    5cd0:	ef 90       	pop	r14
    5cd2:	df 90       	pop	r13
    5cd4:	cf 90       	pop	r12
    5cd6:	bf 90       	pop	r11
    5cd8:	af 90       	pop	r10
    5cda:	9f 90       	pop	r9
    5cdc:	8f 90       	pop	r8
    5cde:	7f 90       	pop	r7
    5ce0:	6f 90       	pop	r6
    5ce2:	5f 90       	pop	r5
    5ce4:	4f 90       	pop	r4
    5ce6:	08 95       	ret

00005ce8 <_ZN12ClickEncoderC1Ehhhhb>:
#  endif
#endif

// ----------------------------------------------------------------------------

ClickEncoder::ClickEncoder(uint8_t A, uint8_t B, uint8_t BTN, uint8_t stepsPerNotch, bool active)
    5ce8:	ef 92       	push	r14
    5cea:	0f 93       	push	r16
    5cec:	1f 93       	push	r17
    5cee:	cf 93       	push	r28
    5cf0:	df 93       	push	r29
    5cf2:	ec 01       	movw	r28, r24
    5cf4:	86 2f       	mov	r24, r22
  : doubleClickEnabled(true), accelerationEnabled(true),
    delta(0), last(0), acceleration(0),
    button(Open), steps(stepsPerNotch),
    pinA(A), pinB(B), pinBTN(BTN), pinsActive(active)
    5cf6:	68 83       	st	Y, r22
    5cf8:	49 83       	std	Y+1, r20	; 0x01
    5cfa:	2a 83       	std	Y+2, r18	; 0x02
    5cfc:	eb 82       	std	Y+3, r14	; 0x03
    5cfe:	1d 82       	std	Y+5, r1	; 0x05
    5d00:	1c 82       	std	Y+4, r1	; 0x04
    5d02:	1f 82       	std	Y+7, r1	; 0x07
    5d04:	1e 82       	std	Y+6, r1	; 0x06
    5d06:	08 87       	std	Y+8, r16	; 0x08
    5d08:	1a 86       	std	Y+10, r1	; 0x0a
    5d0a:	19 86       	std	Y+9, r1	; 0x09
    5d0c:	1b 86       	std	Y+11, r1	; 0x0b
    5d0e:	91 e0       	ldi	r25, 0x01	; 1
    5d10:	9c 87       	std	Y+12, r25	; 0x0c
    5d12:	9d 87       	std	Y+13, r25	; 0x0d
{
  uint8_t configType = (pinsActive == LOW) ? INPUT_PULLUP : INPUT;
    5d14:	ee 20       	and	r14, r14
    5d16:	11 f0       	breq	.+4      	; 0x5d1c <_ZN12ClickEncoderC1Ehhhhb+0x34>
    5d18:	10 e0       	ldi	r17, 0x00	; 0
    5d1a:	01 c0       	rjmp	.+2      	; 0x5d1e <_ZN12ClickEncoderC1Ehhhhb+0x36>
    5d1c:	12 e0       	ldi	r17, 0x02	; 2
  pinMode(pinA, configType);
    5d1e:	61 2f       	mov	r22, r17
    5d20:	0e 94 4e 40 	call	0x809c	; 0x809c <pinMode>
  pinMode(pinB, configType);
    5d24:	61 2f       	mov	r22, r17
    5d26:	89 81       	ldd	r24, Y+1	; 0x01
    5d28:	0e 94 4e 40 	call	0x809c	; 0x809c <pinMode>
  pinMode(pinBTN, configType);
    5d2c:	61 2f       	mov	r22, r17
    5d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    5d30:	0e 94 4e 40 	call	0x809c	; 0x809c <pinMode>
  
  if (digitalRead(pinA) == pinsActive) {
    5d34:	88 81       	ld	r24, Y
    5d36:	0e 94 bd 40 	call	0x817a	; 0x817a <digitalRead>
    5d3a:	2b 81       	ldd	r18, Y+3	; 0x03
    5d3c:	30 e0       	ldi	r19, 0x00	; 0
    5d3e:	82 17       	cp	r24, r18
    5d40:	93 07       	cpc	r25, r19
    5d42:	21 f4       	brne	.+8      	; 0x5d4c <_ZN12ClickEncoderC1Ehhhhb+0x64>
    last = 3;
    5d44:	83 e0       	ldi	r24, 0x03	; 3
    5d46:	90 e0       	ldi	r25, 0x00	; 0
    5d48:	9f 83       	std	Y+7, r25	; 0x07
    5d4a:	8e 83       	std	Y+6, r24	; 0x06
  }

  if (digitalRead(pinB) == pinsActive) {
    5d4c:	89 81       	ldd	r24, Y+1	; 0x01
    5d4e:	0e 94 bd 40 	call	0x817a	; 0x817a <digitalRead>
    5d52:	2b 81       	ldd	r18, Y+3	; 0x03
    5d54:	30 e0       	ldi	r19, 0x00	; 0
    5d56:	82 17       	cp	r24, r18
    5d58:	93 07       	cpc	r25, r19
    5d5a:	31 f4       	brne	.+12     	; 0x5d68 <_ZN12ClickEncoderC1Ehhhhb+0x80>
    last ^=1;
    5d5c:	8e 81       	ldd	r24, Y+6	; 0x06
    5d5e:	9f 81       	ldd	r25, Y+7	; 0x07
    5d60:	21 e0       	ldi	r18, 0x01	; 1
    5d62:	82 27       	eor	r24, r18
    5d64:	9f 83       	std	Y+7, r25	; 0x07
    5d66:	8e 83       	std	Y+6, r24	; 0x06
  }
}
    5d68:	df 91       	pop	r29
    5d6a:	cf 91       	pop	r28
    5d6c:	1f 91       	pop	r17
    5d6e:	0f 91       	pop	r16
    5d70:	ef 90       	pop	r14
    5d72:	08 95       	ret

00005d74 <_ZN12ClickEncoder7serviceEv>:

// ----------------------------------------------------------------------------
// call this every 1 millisecond via timer ISR
//
void ClickEncoder::service(void)
{
    5d74:	cf 92       	push	r12
    5d76:	df 92       	push	r13
    5d78:	ef 92       	push	r14
    5d7a:	ff 92       	push	r15
    5d7c:	0f 93       	push	r16
    5d7e:	1f 93       	push	r17
    5d80:	cf 93       	push	r28
    5d82:	df 93       	push	r29
    5d84:	ec 01       	movw	r28, r24
  bool moved = false;
  unsigned long now = millis();
    5d86:	0e 94 fa 3e 	call	0x7df4	; 0x7df4 <millis>
    5d8a:	6b 01       	movw	r12, r22
    5d8c:	7c 01       	movw	r14, r24

  if (accelerationEnabled) { // decelerate every tick
    5d8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5d90:	88 23       	and	r24, r24
    5d92:	59 f0       	breq	.+22     	; 0x5daa <_ZN12ClickEncoder7serviceEv+0x36>
    acceleration -= ENC_ACCEL_DEC;
    5d94:	89 85       	ldd	r24, Y+9	; 0x09
    5d96:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d98:	02 97       	sbiw	r24, 0x02	; 2
    5d9a:	9a 87       	std	Y+10, r25	; 0x0a
    5d9c:	89 87       	std	Y+9, r24	; 0x09
    if (acceleration & 0x8000) { // handle overflow of MSB is set
    5d9e:	89 85       	ldd	r24, Y+9	; 0x09
    5da0:	9a 85       	ldd	r25, Y+10	; 0x0a
    5da2:	99 23       	and	r25, r25
    5da4:	14 f4       	brge	.+4      	; 0x5daa <_ZN12ClickEncoder7serviceEv+0x36>
      acceleration = 0;
    5da6:	1a 86       	std	Y+10, r1	; 0x0a
    5da8:	19 86       	std	Y+9, r1	; 0x09
    moved = true;
  }
#elif ENC_DECODER == ENC_NORMAL
  int8_t curr = 0;

  if (digitalRead(pinA) == pinsActive) {
    5daa:	88 81       	ld	r24, Y
    5dac:	0e 94 bd 40 	call	0x817a	; 0x817a <digitalRead>
    5db0:	2b 81       	ldd	r18, Y+3	; 0x03
    5db2:	30 e0       	ldi	r19, 0x00	; 0
    5db4:	82 17       	cp	r24, r18
    5db6:	93 07       	cpc	r25, r19
    5db8:	11 f4       	brne	.+4      	; 0x5dbe <_ZN12ClickEncoder7serviceEv+0x4a>
    curr = 3;
    5dba:	13 e0       	ldi	r17, 0x03	; 3
    5dbc:	01 c0       	rjmp	.+2      	; 0x5dc0 <_ZN12ClickEncoder7serviceEv+0x4c>
  if (tbl) {
    delta += tbl;
    moved = true;
  }
#elif ENC_DECODER == ENC_NORMAL
  int8_t curr = 0;
    5dbe:	10 e0       	ldi	r17, 0x00	; 0

  if (digitalRead(pinA) == pinsActive) {
    curr = 3;
  }

  if (digitalRead(pinB) == pinsActive) {
    5dc0:	89 81       	ldd	r24, Y+1	; 0x01
    5dc2:	0e 94 bd 40 	call	0x817a	; 0x817a <digitalRead>
    5dc6:	2b 81       	ldd	r18, Y+3	; 0x03
    5dc8:	30 e0       	ldi	r19, 0x00	; 0
    5dca:	82 17       	cp	r24, r18
    5dcc:	93 07       	cpc	r25, r19
    5dce:	11 f4       	brne	.+4      	; 0x5dd4 <_ZN12ClickEncoder7serviceEv+0x60>
    curr ^= 1;
    5dd0:	81 e0       	ldi	r24, 0x01	; 1
    5dd2:	18 27       	eor	r17, r24
  }
  
  int8_t diff = last - curr;
    5dd4:	8e 81       	ldd	r24, Y+6	; 0x06
    5dd6:	9f 81       	ldd	r25, Y+7	; 0x07
    5dd8:	81 1b       	sub	r24, r17

  if (diff & 1) {            // bit 0 = step
    5dda:	80 ff       	sbrs	r24, 0
    5ddc:	1d c0       	rjmp	.+58     	; 0x5e18 <_ZN12ClickEncoder7serviceEv+0xa4>
    last = curr;
    5dde:	21 2f       	mov	r18, r17
    5de0:	11 0f       	add	r17, r17
    5de2:	33 0b       	sbc	r19, r19
    5de4:	3f 83       	std	Y+7, r19	; 0x07
    5de6:	2e 83       	std	Y+6, r18	; 0x06
    delta += (diff & 2) - 1; // bit 1 = direction (+/-)
    5de8:	2c 81       	ldd	r18, Y+4	; 0x04
    5dea:	3d 81       	ldd	r19, Y+5	; 0x05
    5dec:	82 70       	andi	r24, 0x02	; 2
    5dee:	08 2e       	mov	r0, r24
    5df0:	00 0c       	add	r0, r0
    5df2:	99 0b       	sbc	r25, r25
    5df4:	01 97       	sbiw	r24, 0x01	; 1
    5df6:	82 0f       	add	r24, r18
    5df8:	93 1f       	adc	r25, r19
    5dfa:	9d 83       	std	Y+5, r25	; 0x05
    5dfc:	8c 83       	std	Y+4, r24	; 0x04
  }
#else
# error "Error: define ENC_DECODER to ENC_NORMAL or ENC_FLAKY"
#endif

  if (accelerationEnabled && moved) {
    5dfe:	8d 85       	ldd	r24, Y+13	; 0x0d
    5e00:	88 23       	and	r24, r24
    5e02:	51 f0       	breq	.+20     	; 0x5e18 <_ZN12ClickEncoder7serviceEv+0xa4>
    // increment accelerator if encoder has been moved
    if (acceleration <= (ENC_ACCEL_TOP - ENC_ACCEL_INC)) {
    5e04:	89 85       	ldd	r24, Y+9	; 0x09
    5e06:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e08:	88 3e       	cpi	r24, 0xE8	; 232
    5e0a:	9b 40       	sbci	r25, 0x0B	; 11
    5e0c:	28 f4       	brcc	.+10     	; 0x5e18 <_ZN12ClickEncoder7serviceEv+0xa4>
      acceleration += ENC_ACCEL_INC;
    5e0e:	89 85       	ldd	r24, Y+9	; 0x09
    5e10:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e12:	49 96       	adiw	r24, 0x19	; 25
    5e14:	9a 87       	std	Y+10, r25	; 0x0a
    5e16:	89 87       	std	Y+9, r24	; 0x09
#ifndef WITHOUT_BUTTON
  static uint16_t keyDownTicks = 0;
  static uint8_t doubleClickTicks = 0;
  static unsigned long lastButtonCheck = 0;

  if (pinBTN > 0 // check button only, if a pin has been provided
    5e18:	8a 81       	ldd	r24, Y+2	; 0x02
    5e1a:	88 23       	and	r24, r24
    5e1c:	09 f4       	brne	.+2      	; 0x5e20 <_ZN12ClickEncoder7serviceEv+0xac>
    5e1e:	6b c0       	rjmp	.+214    	; 0x5ef6 <_ZN12ClickEncoder7serviceEv+0x182>
      && (now - lastButtonCheck) >= ENC_BUTTONINTERVAL) // checking button is sufficient every 10-30ms
    5e20:	40 91 b3 07 	lds	r20, 0x07B3
    5e24:	50 91 b4 07 	lds	r21, 0x07B4
    5e28:	60 91 b5 07 	lds	r22, 0x07B5
    5e2c:	70 91 b6 07 	lds	r23, 0x07B6
    5e30:	97 01       	movw	r18, r14
    5e32:	86 01       	movw	r16, r12
    5e34:	04 1b       	sub	r16, r20
    5e36:	15 0b       	sbc	r17, r21
    5e38:	26 0b       	sbc	r18, r22
    5e3a:	37 0b       	sbc	r19, r23
    5e3c:	0a 30       	cpi	r16, 0x0A	; 10
    5e3e:	11 05       	cpc	r17, r1
    5e40:	21 05       	cpc	r18, r1
    5e42:	31 05       	cpc	r19, r1
    5e44:	08 f4       	brcc	.+2      	; 0x5e48 <_ZN12ClickEncoder7serviceEv+0xd4>
    5e46:	57 c0       	rjmp	.+174    	; 0x5ef6 <_ZN12ClickEncoder7serviceEv+0x182>
  { 
    lastButtonCheck = now;
    5e48:	c0 92 b3 07 	sts	0x07B3, r12
    5e4c:	d0 92 b4 07 	sts	0x07B4, r13
    5e50:	e0 92 b5 07 	sts	0x07B5, r14
    5e54:	f0 92 b6 07 	sts	0x07B6, r15
    
    if (digitalRead(pinBTN) == pinsActive) { // key is down
    5e58:	0e 94 bd 40 	call	0x817a	; 0x817a <digitalRead>
    5e5c:	2b 81       	ldd	r18, Y+3	; 0x03
    5e5e:	30 e0       	ldi	r19, 0x00	; 0
    5e60:	82 17       	cp	r24, r18
    5e62:	93 07       	cpc	r25, r19
    5e64:	71 f4       	brne	.+28     	; 0x5e82 <_ZN12ClickEncoder7serviceEv+0x10e>
      keyDownTicks++;
    5e66:	80 91 b1 07 	lds	r24, 0x07B1
    5e6a:	90 91 b2 07 	lds	r25, 0x07B2
    5e6e:	01 96       	adiw	r24, 0x01	; 1
    5e70:	90 93 b2 07 	sts	0x07B2, r25
    5e74:	80 93 b1 07 	sts	0x07B1, r24
      if (keyDownTicks > (ENC_HOLDTIME / ENC_BUTTONINTERVAL)) {
    5e78:	89 37       	cpi	r24, 0x79	; 121
    5e7a:	91 05       	cpc	r25, r1
    5e7c:	10 f0       	brcs	.+4      	; 0x5e82 <_ZN12ClickEncoder7serviceEv+0x10e>
        button = Held;
    5e7e:	83 e0       	ldi	r24, 0x03	; 3
    5e80:	8b 87       	std	Y+11, r24	; 0x0b
      }
    }

    if (digitalRead(pinBTN) == !pinsActive) { // key is now up
    5e82:	8a 81       	ldd	r24, Y+2	; 0x02
    5e84:	0e 94 bd 40 	call	0x817a	; 0x817a <digitalRead>
    5e88:	3b 81       	ldd	r19, Y+3	; 0x03
    5e8a:	21 e0       	ldi	r18, 0x01	; 1
    5e8c:	23 27       	eor	r18, r19
    5e8e:	30 e0       	ldi	r19, 0x00	; 0
    5e90:	82 17       	cp	r24, r18
    5e92:	93 07       	cpc	r25, r19
    5e94:	29 f5       	brne	.+74     	; 0x5ee0 <_ZN12ClickEncoder7serviceEv+0x16c>
      if (keyDownTicks /*> ENC_BUTTONINTERVAL*/) {
    5e96:	80 91 b1 07 	lds	r24, 0x07B1
    5e9a:	90 91 b2 07 	lds	r25, 0x07B2
    5e9e:	89 2b       	or	r24, r25
    5ea0:	d9 f0       	breq	.+54     	; 0x5ed8 <_ZN12ClickEncoder7serviceEv+0x164>
        if (button == Held) {
    5ea2:	8b 85       	ldd	r24, Y+11	; 0x0b
    5ea4:	83 30       	cpi	r24, 0x03	; 3
    5ea6:	29 f4       	brne	.+10     	; 0x5eb2 <_ZN12ClickEncoder7serviceEv+0x13e>
          button = Released;
    5ea8:	84 e0       	ldi	r24, 0x04	; 4
    5eaa:	8b 87       	std	Y+11, r24	; 0x0b
          doubleClickTicks = 0;
    5eac:	10 92 b0 07 	sts	0x07B0, r1
    5eb0:	13 c0       	rjmp	.+38     	; 0x5ed8 <_ZN12ClickEncoder7serviceEv+0x164>
        }
        else {
          #define ENC_SINGLECLICKONLY 1
          if (doubleClickTicks > ENC_SINGLECLICKONLY) {   // prevent trigger in single click mode
    5eb2:	80 91 b0 07 	lds	r24, 0x07B0
    5eb6:	82 30       	cpi	r24, 0x02	; 2
    5eb8:	38 f0       	brcs	.+14     	; 0x5ec8 <_ZN12ClickEncoder7serviceEv+0x154>
            if (doubleClickTicks < (ENC_DOUBLECLICKTIME / ENC_BUTTONINTERVAL)) {
    5eba:	8c 33       	cpi	r24, 0x3C	; 60
    5ebc:	68 f4       	brcc	.+26     	; 0x5ed8 <_ZN12ClickEncoder7serviceEv+0x164>
              button = DoubleClicked;
    5ebe:	86 e0       	ldi	r24, 0x06	; 6
    5ec0:	8b 87       	std	Y+11, r24	; 0x0b
              doubleClickTicks = 0;
    5ec2:	10 92 b0 07 	sts	0x07B0, r1
    5ec6:	08 c0       	rjmp	.+16     	; 0x5ed8 <_ZN12ClickEncoder7serviceEv+0x164>
            }
          }
          else {
            doubleClickTicks = (doubleClickEnabled) ? (ENC_DOUBLECLICKTIME / ENC_BUTTONINTERVAL) : ENC_SINGLECLICKONLY;
    5ec8:	8c 85       	ldd	r24, Y+12	; 0x0c
    5eca:	81 11       	cpse	r24, r1
    5ecc:	02 c0       	rjmp	.+4      	; 0x5ed2 <_ZN12ClickEncoder7serviceEv+0x15e>
    5ece:	81 e0       	ldi	r24, 0x01	; 1
    5ed0:	01 c0       	rjmp	.+2      	; 0x5ed4 <_ZN12ClickEncoder7serviceEv+0x160>
    5ed2:	8c e3       	ldi	r24, 0x3C	; 60
    5ed4:	80 93 b0 07 	sts	0x07B0, r24
          }
        }
      }

      keyDownTicks = 0;
    5ed8:	10 92 b2 07 	sts	0x07B2, r1
    5edc:	10 92 b1 07 	sts	0x07B1, r1
    }
  
    if (doubleClickTicks > 0) {
    5ee0:	80 91 b0 07 	lds	r24, 0x07B0
    5ee4:	88 23       	and	r24, r24
    5ee6:	39 f0       	breq	.+14     	; 0x5ef6 <_ZN12ClickEncoder7serviceEv+0x182>
      doubleClickTicks--;
      if (--doubleClickTicks == 0) {
    5ee8:	82 50       	subi	r24, 0x02	; 2
    5eea:	80 93 b0 07 	sts	0x07B0, r24
    5eee:	81 11       	cpse	r24, r1
    5ef0:	02 c0       	rjmp	.+4      	; 0x5ef6 <_ZN12ClickEncoder7serviceEv+0x182>
        button = Clicked;
    5ef2:	85 e0       	ldi	r24, 0x05	; 5
    5ef4:	8b 87       	std	Y+11, r24	; 0x0b
      }
    }
  }
#endif // WITHOUT_BUTTON

}
    5ef6:	df 91       	pop	r29
    5ef8:	cf 91       	pop	r28
    5efa:	1f 91       	pop	r17
    5efc:	0f 91       	pop	r16
    5efe:	ff 90       	pop	r15
    5f00:	ef 90       	pop	r14
    5f02:	df 90       	pop	r13
    5f04:	cf 90       	pop	r12
    5f06:	08 95       	ret

00005f08 <_ZN12ClickEncoder8getValueEv>:

// ----------------------------------------------------------------------------

int16_t ClickEncoder::getValue(void)
{
    5f08:	fc 01       	movw	r30, r24
  int16_t val;
  
  cli();
    5f0a:	f8 94       	cli
  val = delta;
    5f0c:	24 81       	ldd	r18, Z+4	; 0x04
    5f0e:	35 81       	ldd	r19, Z+5	; 0x05

  if (steps == 2) delta = val & 1;
    5f10:	80 85       	ldd	r24, Z+8	; 0x08
    5f12:	82 30       	cpi	r24, 0x02	; 2
    5f14:	31 f4       	brne	.+12     	; 0x5f22 <_ZN12ClickEncoder8getValueEv+0x1a>
    5f16:	c9 01       	movw	r24, r18
    5f18:	81 70       	andi	r24, 0x01	; 1
    5f1a:	99 27       	eor	r25, r25
    5f1c:	95 83       	std	Z+5, r25	; 0x05
    5f1e:	84 83       	std	Z+4, r24	; 0x04
    5f20:	0a c0       	rjmp	.+20     	; 0x5f36 <_ZN12ClickEncoder8getValueEv+0x2e>
  else if (steps == 4) delta = val & 3;
    5f22:	84 30       	cpi	r24, 0x04	; 4
    5f24:	31 f4       	brne	.+12     	; 0x5f32 <_ZN12ClickEncoder8getValueEv+0x2a>
    5f26:	c9 01       	movw	r24, r18
    5f28:	83 70       	andi	r24, 0x03	; 3
    5f2a:	99 27       	eor	r25, r25
    5f2c:	95 83       	std	Z+5, r25	; 0x05
    5f2e:	84 83       	std	Z+4, r24	; 0x04
    5f30:	02 c0       	rjmp	.+4      	; 0x5f36 <_ZN12ClickEncoder8getValueEv+0x2e>
  else delta = 0; // default to 1 step per notch
    5f32:	15 82       	std	Z+5, r1	; 0x05
    5f34:	14 82       	std	Z+4, r1	; 0x04

  sei();
    5f36:	78 94       	sei
  
  if (steps == 4) val >>= 2;
    5f38:	80 85       	ldd	r24, Z+8	; 0x08
    5f3a:	84 30       	cpi	r24, 0x04	; 4
    5f3c:	29 f4       	brne	.+10     	; 0x5f48 <_ZN12ClickEncoder8getValueEv+0x40>
    5f3e:	35 95       	asr	r19
    5f40:	27 95       	ror	r18
    5f42:	35 95       	asr	r19
    5f44:	27 95       	ror	r18
    5f46:	04 c0       	rjmp	.+8      	; 0x5f50 <_ZN12ClickEncoder8getValueEv+0x48>
  if (steps == 2) val >>= 1;
    5f48:	82 30       	cpi	r24, 0x02	; 2
    5f4a:	11 f4       	brne	.+4      	; 0x5f50 <_ZN12ClickEncoder8getValueEv+0x48>
    5f4c:	35 95       	asr	r19
    5f4e:	27 95       	ror	r18

  int16_t r = 0;
  int16_t accel = ((accelerationEnabled) ? (acceleration >> 8) : 0);
    5f50:	85 85       	ldd	r24, Z+13	; 0x0d
    5f52:	88 23       	and	r24, r24
    5f54:	29 f0       	breq	.+10     	; 0x5f60 <_ZN12ClickEncoder8getValueEv+0x58>
    5f56:	81 85       	ldd	r24, Z+9	; 0x09
    5f58:	92 85       	ldd	r25, Z+10	; 0x0a
    5f5a:	89 2f       	mov	r24, r25
    5f5c:	99 27       	eor	r25, r25
    5f5e:	02 c0       	rjmp	.+4      	; 0x5f64 <_ZN12ClickEncoder8getValueEv+0x5c>
    5f60:	80 e0       	ldi	r24, 0x00	; 0
    5f62:	90 e0       	ldi	r25, 0x00	; 0

  if (val < 0) {
    5f64:	33 23       	and	r19, r19
    5f66:	1c f4       	brge	.+6      	; 0x5f6e <_ZN12ClickEncoder8getValueEv+0x66>
    r -= 1 + accel;
    5f68:	80 95       	com	r24
    5f6a:	90 95       	com	r25
    5f6c:	08 95       	ret
  }
  else if (val > 0) {
    5f6e:	12 16       	cp	r1, r18
    5f70:	13 06       	cpc	r1, r19
    5f72:	14 f4       	brge	.+4      	; 0x5f78 <_ZN12ClickEncoder8getValueEv+0x70>
    r += 1 + accel;
    5f74:	01 96       	adiw	r24, 0x01	; 1
    5f76:	08 95       	ret
  sei();
  
  if (steps == 4) val >>= 2;
  if (steps == 2) val >>= 1;

  int16_t r = 0;
    5f78:	80 e0       	ldi	r24, 0x00	; 0
    5f7a:	90 e0       	ldi	r25, 0x00	; 0
  else if (val > 0) {
    r += 1 + accel;
  }

  return r;
}
    5f7c:	08 95       	ret

00005f7e <_ZN12ClickEncoder9getButtonEv>:

// ----------------------------------------------------------------------------

#ifndef WITHOUT_BUTTON
ClickEncoder::Button ClickEncoder::getButton(void)
{
    5f7e:	fc 01       	movw	r30, r24
  ClickEncoder::Button ret = button;
    5f80:	83 85       	ldd	r24, Z+11	; 0x0b
  if (button != ClickEncoder::Held) {
    5f82:	93 85       	ldd	r25, Z+11	; 0x0b
    5f84:	93 30       	cpi	r25, 0x03	; 3
    5f86:	09 f0       	breq	.+2      	; 0x5f8a <_ZN12ClickEncoder9getButtonEv+0xc>
    button = ClickEncoder::Open; // reset
    5f88:	13 86       	std	Z+11, r1	; 0x0b
  }
  return ret;
}
    5f8a:	08 95       	ret

00005f8c <_ZN5I2CIOC1Ev>:
      // Remove the values which are not inputs and get the value of the pin
      pinVal = this->read() & _dirMask;
      pinVal = ( pinVal >> pin ) & 0x01; // Get the pin value
   }
   return (pinVal);
}
    5f8c:	fc 01       	movw	r30, r24
    5f8e:	12 82       	std	Z+2, r1	; 0x02
    5f90:	8f ef       	ldi	r24, 0xFF	; 255
    5f92:	81 83       	std	Z+1, r24	; 0x01
    5f94:	10 82       	st	Z, r1
    5f96:	13 82       	std	Z+3, r1	; 0x03
    5f98:	08 95       	ret

00005f9a <_ZN5I2CIO8portModeEh>:
    5f9a:	fc 01       	movw	r30, r24
    5f9c:	23 81       	ldd	r18, Z+3	; 0x03
    5f9e:	22 23       	and	r18, r18
    5fa0:	39 f0       	breq	.+14     	; 0x5fb0 <_ZN5I2CIO8portModeEh+0x16>
    5fa2:	61 11       	cpse	r22, r1
    5fa4:	03 c0       	rjmp	.+6      	; 0x5fac <_ZN5I2CIO8portModeEh+0x12>
    5fa6:	2f ef       	ldi	r18, 0xFF	; 255
    5fa8:	21 83       	std	Z+1, r18	; 0x01
    5faa:	08 95       	ret
    5fac:	fc 01       	movw	r30, r24
    5fae:	11 82       	std	Z+1, r1	; 0x01
    5fb0:	08 95       	ret

00005fb2 <_ZN5I2CIO5beginEh>:
    5fb2:	cf 93       	push	r28
    5fb4:	df 93       	push	r29
    5fb6:	ec 01       	movw	r28, r24
    5fb8:	6a 83       	std	Y+2, r22	; 0x02
    5fba:	8a e2       	ldi	r24, 0x2A	; 42
    5fbc:	98 e0       	ldi	r25, 0x08	; 8
    5fbe:	06 d5       	rcall	.+2572   	; 0x69cc <_ZN7TwoWire5beginEv>
    5fc0:	41 e0       	ldi	r20, 0x01	; 1
    5fc2:	6a 81       	ldd	r22, Y+2	; 0x02
    5fc4:	8a e2       	ldi	r24, 0x2A	; 42
    5fc6:	98 e0       	ldi	r25, 0x08	; 8
    5fc8:	17 d5       	rcall	.+2606   	; 0x69f8 <_ZN7TwoWire11requestFromEhh>
    5fca:	91 e0       	ldi	r25, 0x01	; 1
    5fcc:	81 11       	cpse	r24, r1
    5fce:	01 c0       	rjmp	.+2      	; 0x5fd2 <_ZN5I2CIO5beginEh+0x20>
    5fd0:	90 e0       	ldi	r25, 0x00	; 0
    5fd2:	9b 83       	std	Y+3, r25	; 0x03
    5fd4:	8a e2       	ldi	r24, 0x2A	; 42
    5fd6:	98 e0       	ldi	r25, 0x08	; 8
    5fd8:	66 d4       	rcall	.+2252   	; 0x68a6 <_ZN7TwoWire4readEv>
    5fda:	88 83       	st	Y, r24
    5fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    5fde:	90 e0       	ldi	r25, 0x00	; 0
    5fe0:	df 91       	pop	r29
    5fe2:	cf 91       	pop	r28
    5fe4:	08 95       	ret

00005fe6 <_ZN5I2CIO5writeEh>:
}

//
// write
int I2CIO::write ( uint8_t value )
{
    5fe6:	cf 93       	push	r28
    5fe8:	df 93       	push	r29
   int status = 0;
   
   if ( _initialised )
    5fea:	fc 01       	movw	r30, r24
    5fec:	23 81       	ldd	r18, Z+3	; 0x03
    5fee:	22 23       	and	r18, r18
    5ff0:	99 f0       	breq	.+38     	; 0x6018 <_ZN5I2CIO5writeEh+0x32>
    5ff2:	ec 01       	movw	r28, r24
   {
      // Only write HIGH the values of the ports that have been initialised as
      // outputs updating the output shadow of the device
      _shadow = ( value & ~(_dirMask) );
    5ff4:	81 81       	ldd	r24, Z+1	; 0x01
    5ff6:	80 95       	com	r24
    5ff8:	68 23       	and	r22, r24
    5ffa:	60 83       	st	Z, r22
   
      Wire.beginTransmission ( _i2cAddr );
    5ffc:	62 81       	ldd	r22, Z+2	; 0x02
    5ffe:	8a e2       	ldi	r24, 0x2A	; 42
    6000:	98 e0       	ldi	r25, 0x08	; 8
    6002:	fd d4       	rcall	.+2554   	; 0x69fe <_ZN7TwoWire17beginTransmissionEh>
#if (ARDUINO <  100)
      Wire.send ( _shadow );
#else
      Wire.write ( _shadow );
    6004:	68 81       	ld	r22, Y
    6006:	8a e2       	ldi	r24, 0x2A	; 42
    6008:	98 e0       	ldi	r25, 0x08	; 8
    600a:	a0 d4       	rcall	.+2368   	; 0x694c <_ZN7TwoWire5writeEh>
#endif  
      status = Wire.endTransmission ();
    600c:	8a e2       	ldi	r24, 0x2A	; 42
    600e:	98 e0       	ldi	r25, 0x08	; 8
    6010:	12 d5       	rcall	.+2596   	; 0x6a36 <_ZN7TwoWire15endTransmissionEv>
    6012:	28 2f       	mov	r18, r24
    6014:	30 e0       	ldi	r19, 0x00	; 0
    6016:	02 c0       	rjmp	.+4      	; 0x601c <_ZN5I2CIO5writeEh+0x36>

//
// write
int I2CIO::write ( uint8_t value )
{
   int status = 0;
    6018:	20 e0       	ldi	r18, 0x00	; 0
    601a:	30 e0       	ldi	r19, 0x00	; 0
#else
      Wire.write ( _shadow );
#endif  
      status = Wire.endTransmission ();
   }
   return ( (status == 0) );
    601c:	81 e0       	ldi	r24, 0x01	; 1
    601e:	90 e0       	ldi	r25, 0x00	; 0
    6020:	23 2b       	or	r18, r19
    6022:	11 f0       	breq	.+4      	; 0x6028 <_ZN5I2CIO5writeEh+0x42>
    6024:	80 e0       	ldi	r24, 0x00	; 0
    6026:	90 e0       	ldi	r25, 0x00	; 0
}
    6028:	df 91       	pop	r29
    602a:	cf 91       	pop	r28
    602c:	08 95       	ret

0000602e <_ZN3LCD15setBacklightPinEh13t_backlighPol>:
// Switch fully on the LCD (backlight and LCD)
void LCD::on ( void )
{
   display();
   backlight();
}
    602e:	08 95       	ret

00006030 <_ZN3LCD12setBacklightEh>:
    6030:	08 95       	ret

00006032 <_ZN3LCD5writeEh>:
    6032:	dc 01       	movw	r26, r24
    6034:	ed 91       	ld	r30, X+
    6036:	fc 91       	ld	r31, X
    6038:	02 84       	ldd	r0, Z+10	; 0x0a
    603a:	f3 85       	ldd	r31, Z+11	; 0x0b
    603c:	e0 2d       	mov	r30, r0
    603e:	41 e0       	ldi	r20, 0x01	; 1
    6040:	19 95       	eicall
    6042:	81 e0       	ldi	r24, 0x01	; 1
    6044:	90 e0       	ldi	r25, 0x00	; 0
    6046:	08 95       	ret

00006048 <_ZN3LCDC1Ev>:
    6048:	fc 01       	movw	r30, r24
    604a:	13 82       	std	Z+3, r1	; 0x03
    604c:	12 82       	std	Z+2, r1	; 0x02
    604e:	2f ed       	ldi	r18, 0xDF	; 223
    6050:	34 e0       	ldi	r19, 0x04	; 4
    6052:	31 83       	std	Z+1, r19	; 0x01
    6054:	20 83       	st	Z, r18
    6056:	08 95       	ret

00006058 <_ZN3LCD9backlightEv>:
    6058:	dc 01       	movw	r26, r24
    605a:	ed 91       	ld	r30, X+
    605c:	fc 91       	ld	r31, X
    605e:	00 84       	ldd	r0, Z+8	; 0x08
    6060:	f1 85       	ldd	r31, Z+9	; 0x09
    6062:	e0 2d       	mov	r30, r0
    6064:	6f ef       	ldi	r22, 0xFF	; 255
    6066:	19 95       	eicall
    6068:	08 95       	ret

0000606a <_ZN3LCD7commandEh>:
    606a:	dc 01       	movw	r26, r24
    606c:	ed 91       	ld	r30, X+
    606e:	fc 91       	ld	r31, X
    6070:	02 84       	ldd	r0, Z+10	; 0x0a
    6072:	f3 85       	ldd	r31, Z+11	; 0x0b
    6074:	e0 2d       	mov	r30, r0
    6076:	40 e0       	ldi	r20, 0x00	; 0
    6078:	19 95       	eicall
    607a:	08 95       	ret

0000607c <_ZN3LCD5clearEv>:
    607c:	61 e0       	ldi	r22, 0x01	; 1
    607e:	f5 df       	rcall	.-22     	; 0x606a <_ZN3LCD7commandEh>
    6080:	80 ed       	ldi	r24, 0xD0	; 208
    6082:	97 e0       	ldi	r25, 0x07	; 7
    6084:	0c 94 55 3f 	jmp	0x7eaa	; 0x7eaa <delayMicroseconds>
    6088:	08 95       	ret

0000608a <_ZN3LCD9setCursorEhh>:
    608a:	cf 93       	push	r28
    608c:	df 93       	push	r29
    608e:	cd b7       	in	r28, 0x3d	; 61
    6090:	de b7       	in	r29, 0x3e	; 62
    6092:	28 97       	sbiw	r28, 0x08	; 8
    6094:	0f b6       	in	r0, 0x3f	; 63
    6096:	f8 94       	cli
    6098:	de bf       	out	0x3e, r29	; 62
    609a:	0f be       	out	0x3f, r0	; 63
    609c:	cd bf       	out	0x3d, r28	; 61
    609e:	fc 01       	movw	r30, r24
    60a0:	1d 82       	std	Y+5, r1	; 0x05
    60a2:	80 e4       	ldi	r24, 0x40	; 64
    60a4:	8e 83       	std	Y+6, r24	; 0x06
    60a6:	94 e1       	ldi	r25, 0x14	; 20
    60a8:	9f 83       	std	Y+7, r25	; 0x07
    60aa:	94 e5       	ldi	r25, 0x54	; 84
    60ac:	98 87       	std	Y+8, r25	; 0x08
    60ae:	19 82       	std	Y+1, r1	; 0x01
    60b0:	8a 83       	std	Y+2, r24	; 0x02
    60b2:	80 e1       	ldi	r24, 0x10	; 16
    60b4:	8b 83       	std	Y+3, r24	; 0x03
    60b6:	80 e5       	ldi	r24, 0x50	; 80
    60b8:	8c 83       	std	Y+4, r24	; 0x04
    60ba:	87 81       	ldd	r24, Z+7	; 0x07
    60bc:	48 17       	cp	r20, r24
    60be:	10 f0       	brcs	.+4      	; 0x60c4 <_ZN3LCD9setCursorEhh+0x3a>
    60c0:	4f ef       	ldi	r20, 0xFF	; 255
    60c2:	48 0f       	add	r20, r24
    60c4:	90 85       	ldd	r25, Z+8	; 0x08
    60c6:	90 31       	cpi	r25, 0x10	; 16
    60c8:	61 f4       	brne	.+24     	; 0x60e2 <_ZN3LCD9setCursorEhh+0x58>
    60ca:	84 30       	cpi	r24, 0x04	; 4
    60cc:	51 f4       	brne	.+20     	; 0x60e2 <_ZN3LCD9setCursorEhh+0x58>
    60ce:	de 01       	movw	r26, r28
    60d0:	a4 0f       	add	r26, r20
    60d2:	b1 1d       	adc	r27, r1
    60d4:	11 96       	adiw	r26, 0x01	; 1
    60d6:	8c 91       	ld	r24, X
    60d8:	68 0f       	add	r22, r24
    60da:	60 68       	ori	r22, 0x80	; 128
    60dc:	cf 01       	movw	r24, r30
    60de:	c5 df       	rcall	.-118    	; 0x606a <_ZN3LCD7commandEh>
    60e0:	09 c0       	rjmp	.+18     	; 0x60f4 <_ZN3LCD9setCursorEhh+0x6a>
    60e2:	de 01       	movw	r26, r28
    60e4:	a4 0f       	add	r26, r20
    60e6:	b1 1d       	adc	r27, r1
    60e8:	15 96       	adiw	r26, 0x05	; 5
    60ea:	9c 91       	ld	r25, X
    60ec:	69 0f       	add	r22, r25
    60ee:	60 68       	ori	r22, 0x80	; 128
    60f0:	cf 01       	movw	r24, r30
    60f2:	bb df       	rcall	.-138    	; 0x606a <_ZN3LCD7commandEh>
    60f4:	28 96       	adiw	r28, 0x08	; 8
    60f6:	0f b6       	in	r0, 0x3f	; 63
    60f8:	f8 94       	cli
    60fa:	de bf       	out	0x3e, r29	; 62
    60fc:	0f be       	out	0x3f, r0	; 63
    60fe:	cd bf       	out	0x3d, r28	; 61
    6100:	df 91       	pop	r29
    6102:	cf 91       	pop	r28
    6104:	08 95       	ret

00006106 <_ZN3LCD7displayEv>:
    6106:	fc 01       	movw	r30, r24
    6108:	65 81       	ldd	r22, Z+5	; 0x05
    610a:	26 2f       	mov	r18, r22
    610c:	24 60       	ori	r18, 0x04	; 4
    610e:	25 83       	std	Z+5, r18	; 0x05
    6110:	6c 60       	ori	r22, 0x0C	; 12
    6112:	ab cf       	rjmp	.-170    	; 0x606a <_ZN3LCD7commandEh>
    6114:	08 95       	ret

00006116 <_ZN3LCD5beginEhhh>:
// can't assume that its in that state when a sketch starts (and the
// LiquidCrystal constructor is called).
// A call to begin() will reinitialize the LCD.
//
void LCD::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
    6116:	cf 93       	push	r28
    6118:	df 93       	push	r29
    611a:	ec 01       	movw	r28, r24
   if (lines > 1) 
    611c:	42 30       	cpi	r20, 0x02	; 2
    611e:	18 f0       	brcs	.+6      	; 0x6126 <_ZN3LCD5beginEhhh+0x10>
   {
      _displayfunction |= LCD_2LINE;
    6120:	8c 81       	ldd	r24, Y+4	; 0x04
    6122:	88 60       	ori	r24, 0x08	; 8
    6124:	8c 83       	std	Y+4, r24	; 0x04
   }
   _numlines = lines;
    6126:	4f 83       	std	Y+7, r20	; 0x07
   _cols = cols;
    6128:	68 87       	std	Y+8, r22	; 0x08
   
   // for some 1 line displays you can select a 10 pixel high font
   // ------------------------------------------------------------
   if ((dotsize != LCD_5x8DOTS) && (lines == 1)) 
    612a:	22 23       	and	r18, r18
    612c:	29 f0       	breq	.+10     	; 0x6138 <_ZN3LCD5beginEhhh+0x22>
    612e:	41 30       	cpi	r20, 0x01	; 1
    6130:	19 f4       	brne	.+6      	; 0x6138 <_ZN3LCD5beginEhhh+0x22>
   {
      _displayfunction |= LCD_5x10DOTS;
    6132:	8c 81       	ldd	r24, Y+4	; 0x04
    6134:	84 60       	ori	r24, 0x04	; 4
    6136:	8c 83       	std	Y+4, r24	; 0x04
   // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
   // according to datasheet, we need at least 40ms after power rises above 2.7V
   // before sending commands. Arduino can turn on way before 4.5V so we'll wait 
   // 50
   // ---------------------------------------------------------------------------
   delay (100); // 100ms delay
    6138:	64 e6       	ldi	r22, 0x64	; 100
    613a:	70 e0       	ldi	r23, 0x00	; 0
    613c:	80 e0       	ldi	r24, 0x00	; 0
    613e:	90 e0       	ldi	r25, 0x00	; 0
    6140:	0e 94 2c 3f 	call	0x7e58	; 0x7e58 <delay>
   
   //put the LCD into 4 bit or 8 bit mode
   // -------------------------------------
   if (! (_displayfunction & LCD_8BITMODE)) 
    6144:	6c 81       	ldd	r22, Y+4	; 0x04
    6146:	64 fd       	sbrc	r22, 4
    6148:	31 c0       	rjmp	.+98     	; 0x61ac <_ZN3LCD5beginEhhh+0x96>
   {
      // this is according to the hitachi HD44780 datasheet
      // figure 24, pg 46
      
      // we start in 8bit mode, try to set 4 bit mode
      send(0x03, FOUR_BITS);
    614a:	e8 81       	ld	r30, Y
    614c:	f9 81       	ldd	r31, Y+1	; 0x01
    614e:	02 84       	ldd	r0, Z+10	; 0x0a
    6150:	f3 85       	ldd	r31, Z+11	; 0x0b
    6152:	e0 2d       	mov	r30, r0
    6154:	42 e0       	ldi	r20, 0x02	; 2
    6156:	63 e0       	ldi	r22, 0x03	; 3
    6158:	ce 01       	movw	r24, r28
    615a:	19 95       	eicall
      delayMicroseconds(4500); // wait min 4.1ms
    615c:	84 e9       	ldi	r24, 0x94	; 148
    615e:	91 e1       	ldi	r25, 0x11	; 17
    6160:	0e 94 55 3f 	call	0x7eaa	; 0x7eaa <delayMicroseconds>
      
      // second try
      send ( 0x03, FOUR_BITS );
    6164:	e8 81       	ld	r30, Y
    6166:	f9 81       	ldd	r31, Y+1	; 0x01
    6168:	02 84       	ldd	r0, Z+10	; 0x0a
    616a:	f3 85       	ldd	r31, Z+11	; 0x0b
    616c:	e0 2d       	mov	r30, r0
    616e:	42 e0       	ldi	r20, 0x02	; 2
    6170:	63 e0       	ldi	r22, 0x03	; 3
    6172:	ce 01       	movw	r24, r28
    6174:	19 95       	eicall
      delayMicroseconds(4500); // wait min 4.1ms
    6176:	84 e9       	ldi	r24, 0x94	; 148
    6178:	91 e1       	ldi	r25, 0x11	; 17
    617a:	0e 94 55 3f 	call	0x7eaa	; 0x7eaa <delayMicroseconds>
      
      // third go!
      send( 0x03, FOUR_BITS );
    617e:	e8 81       	ld	r30, Y
    6180:	f9 81       	ldd	r31, Y+1	; 0x01
    6182:	02 84       	ldd	r0, Z+10	; 0x0a
    6184:	f3 85       	ldd	r31, Z+11	; 0x0b
    6186:	e0 2d       	mov	r30, r0
    6188:	42 e0       	ldi	r20, 0x02	; 2
    618a:	63 e0       	ldi	r22, 0x03	; 3
    618c:	ce 01       	movw	r24, r28
    618e:	19 95       	eicall
      delayMicroseconds(150);
    6190:	86 e9       	ldi	r24, 0x96	; 150
    6192:	90 e0       	ldi	r25, 0x00	; 0
    6194:	0e 94 55 3f 	call	0x7eaa	; 0x7eaa <delayMicroseconds>
      
      // finally, set to 4-bit interface
      send ( 0x02, FOUR_BITS ); 
    6198:	e8 81       	ld	r30, Y
    619a:	f9 81       	ldd	r31, Y+1	; 0x01
    619c:	02 84       	ldd	r0, Z+10	; 0x0a
    619e:	f3 85       	ldd	r31, Z+11	; 0x0b
    61a0:	e0 2d       	mov	r30, r0
    61a2:	42 e0       	ldi	r20, 0x02	; 2
    61a4:	62 e0       	ldi	r22, 0x02	; 2
    61a6:	ce 01       	movw	r24, r28
    61a8:	19 95       	eicall
    61aa:	13 c0       	rjmp	.+38     	; 0x61d2 <_ZN3LCD5beginEhhh+0xbc>
   {
      // this is according to the hitachi HD44780 datasheet
      // page 45 figure 23
      
      // Send function set command sequence
      command(LCD_FUNCTIONSET | _displayfunction);
    61ac:	60 62       	ori	r22, 0x20	; 32
    61ae:	ce 01       	movw	r24, r28
    61b0:	5c df       	rcall	.-328    	; 0x606a <_ZN3LCD7commandEh>
      delayMicroseconds(4500);  // wait more than 4.1ms
    61b2:	84 e9       	ldi	r24, 0x94	; 148
    61b4:	91 e1       	ldi	r25, 0x11	; 17
    61b6:	0e 94 55 3f 	call	0x7eaa	; 0x7eaa <delayMicroseconds>
      
      // second try
      command(LCD_FUNCTIONSET | _displayfunction);
    61ba:	6c 81       	ldd	r22, Y+4	; 0x04
    61bc:	60 62       	ori	r22, 0x20	; 32
    61be:	ce 01       	movw	r24, r28
    61c0:	54 df       	rcall	.-344    	; 0x606a <_ZN3LCD7commandEh>
      delayMicroseconds(150);
    61c2:	86 e9       	ldi	r24, 0x96	; 150
    61c4:	90 e0       	ldi	r25, 0x00	; 0
    61c6:	0e 94 55 3f 	call	0x7eaa	; 0x7eaa <delayMicroseconds>
      
      // third go
      command(LCD_FUNCTIONSET | _displayfunction);
    61ca:	6c 81       	ldd	r22, Y+4	; 0x04
    61cc:	60 62       	ori	r22, 0x20	; 32
    61ce:	ce 01       	movw	r24, r28
    61d0:	4c df       	rcall	.-360    	; 0x606a <_ZN3LCD7commandEh>
   }
   
   // finally, set # lines, font size, etc.
   command(LCD_FUNCTIONSET | _displayfunction);  
    61d2:	6c 81       	ldd	r22, Y+4	; 0x04
    61d4:	60 62       	ori	r22, 0x20	; 32
    61d6:	ce 01       	movw	r24, r28
    61d8:	48 df       	rcall	.-368    	; 0x606a <_ZN3LCD7commandEh>
   
   // turn the display on with no cursor or blinking default
   _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
    61da:	84 e0       	ldi	r24, 0x04	; 4
    61dc:	8d 83       	std	Y+5, r24	; 0x05
   display();
    61de:	ce 01       	movw	r24, r28
    61e0:	92 df       	rcall	.-220    	; 0x6106 <_ZN3LCD7displayEv>
   
   // clear the LCD
   clear();
    61e2:	ce 01       	movw	r24, r28
    61e4:	4b df       	rcall	.-362    	; 0x607c <_ZN3LCD5clearEv>
   
   // Initialize to default text direction (for romance languages)
   _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    61e6:	82 e0       	ldi	r24, 0x02	; 2
    61e8:	8e 83       	std	Y+6, r24	; 0x06
   // set the entry mode
   command(LCD_ENTRYMODESET | _displaymode);
    61ea:	66 e0       	ldi	r22, 0x06	; 6
    61ec:	ce 01       	movw	r24, r28
    61ee:	3d df       	rcall	.-390    	; 0x606a <_ZN3LCD7commandEh>

   backlight();
    61f0:	ce 01       	movw	r24, r28
    61f2:	32 df       	rcall	.-412    	; 0x6058 <_ZN3LCD9backlightEv>

}
    61f4:	df 91       	pop	r29
    61f6:	cf 91       	pop	r28
    61f8:	08 95       	ret

000061fa <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>:
   // Initialise pin mapping
   _data_pins[0] = ( 1 << d4 );
   _data_pins[1] = ( 1 << d5 );
   _data_pins[2] = ( 1 << d6 );
   _data_pins[3] = ( 1 << d7 );   
}
    61fa:	21 e0       	ldi	r18, 0x01	; 1
    61fc:	01 c0       	rjmp	.+2      	; 0x6200 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x6>
    61fe:	22 0f       	add	r18, r18
    6200:	6a 95       	dec	r22
    6202:	ea f7       	brpl	.-6      	; 0x61fe <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x4>
    6204:	dc 01       	movw	r26, r24
    6206:	1b 96       	adiw	r26, 0x0b	; 11
    6208:	2c 93       	st	X, r18
    620a:	1b 97       	sbiw	r26, 0x0b	; 11
    620c:	19 96       	adiw	r26, 0x09	; 9
    620e:	4c 93       	st	X, r20
    6210:	19 97       	sbiw	r26, 0x09	; 9
    6212:	ed 91       	ld	r30, X+
    6214:	fc 91       	ld	r31, X
    6216:	00 84       	ldd	r0, Z+8	; 0x08
    6218:	f1 85       	ldd	r31, Z+9	; 0x09
    621a:	e0 2d       	mov	r30, r0
    621c:	60 e0       	ldi	r22, 0x00	; 0
    621e:	19 95       	eicall
    6220:	08 95       	ret

00006222 <_ZN17LiquidCrystal_I2C12setBacklightEh>:
    6222:	fc 01       	movw	r30, r24
    6224:	83 85       	ldd	r24, Z+11	; 0x0b
    6226:	88 23       	and	r24, r24
    6228:	89 f0       	breq	.+34     	; 0x624c <_ZN17LiquidCrystal_I2C12setBacklightEh+0x2a>
    622a:	91 85       	ldd	r25, Z+9	; 0x09
    622c:	91 11       	cpse	r25, r1
    622e:	03 c0       	rjmp	.+6      	; 0x6236 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x14>
    6230:	61 11       	cpse	r22, r1
    6232:	05 c0       	rjmp	.+10     	; 0x623e <_ZN17LiquidCrystal_I2C12setBacklightEh+0x1c>
    6234:	06 c0       	rjmp	.+12     	; 0x6242 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    6236:	91 30       	cpi	r25, 0x01	; 1
    6238:	21 f4       	brne	.+8      	; 0x6242 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    623a:	61 11       	cpse	r22, r1
    623c:	02 c0       	rjmp	.+4      	; 0x6242 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    623e:	84 87       	std	Z+12, r24	; 0x0c
    6240:	01 c0       	rjmp	.+2      	; 0x6244 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x22>
    6242:	14 86       	std	Z+12, r1	; 0x0c
    6244:	64 85       	ldd	r22, Z+12	; 0x0c
    6246:	cf 01       	movw	r24, r30
    6248:	0d 96       	adiw	r24, 0x0d	; 13
    624a:	cd ce       	rjmp	.-614    	; 0x5fe6 <_ZN5I2CIO5writeEh>
    624c:	08 95       	ret

0000624e <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh>:
    624e:	6f 92       	push	r6
    6250:	7f 92       	push	r7
    6252:	8f 92       	push	r8
    6254:	af 92       	push	r10
    6256:	cf 92       	push	r12
    6258:	df 92       	push	r13
    625a:	ef 92       	push	r14
    625c:	ff 92       	push	r15
    625e:	0f 93       	push	r16
    6260:	1f 93       	push	r17
    6262:	cf 93       	push	r28
    6264:	df 93       	push	r29
    6266:	cd b7       	in	r28, 0x3d	; 61
    6268:	de b7       	in	r29, 0x3e	; 62
    626a:	3c 01       	movw	r6, r24
    626c:	d6 2e       	mov	r13, r22
    626e:	f4 2e       	mov	r15, r20
    6270:	12 2f       	mov	r17, r18
    6272:	ea de       	rcall	.-556    	; 0x6048 <_ZN3LCDC1Ev>
    6274:	8f ee       	ldi	r24, 0xEF	; 239
    6276:	94 e0       	ldi	r25, 0x04	; 4
    6278:	f3 01       	movw	r30, r6
    627a:	91 83       	std	Z+1, r25	; 0x01
    627c:	80 83       	st	Z, r24
    627e:	c3 01       	movw	r24, r6
    6280:	0d 96       	adiw	r24, 0x0d	; 13
    6282:	84 de       	rcall	.-760    	; 0x5f8c <_ZN5I2CIOC1Ev>
    6284:	f3 01       	movw	r30, r6
    6286:	d2 86       	std	Z+10, r13	; 0x0a
    6288:	13 86       	std	Z+11, r1	; 0x0b
    628a:	14 86       	std	Z+12, r1	; 0x0c
    628c:	11 86       	std	Z+9, r1	; 0x09
    628e:	81 e0       	ldi	r24, 0x01	; 1
    6290:	98 2f       	mov	r25, r24
    6292:	01 c0       	rjmp	.+2      	; 0x6296 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x48>
    6294:	99 0f       	add	r25, r25
    6296:	fa 94       	dec	r15
    6298:	ea f7       	brpl	.-6      	; 0x6294 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x46>
    629a:	91 8b       	std	Z+17, r25	; 0x11
    629c:	98 2f       	mov	r25, r24
    629e:	01 c0       	rjmp	.+2      	; 0x62a2 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x54>
    62a0:	99 0f       	add	r25, r25
    62a2:	1a 95       	dec	r17
    62a4:	ea f7       	brpl	.-6      	; 0x62a0 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x52>
    62a6:	92 8b       	std	Z+18, r25	; 0x12
    62a8:	98 2f       	mov	r25, r24
    62aa:	01 c0       	rjmp	.+2      	; 0x62ae <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x60>
    62ac:	99 0f       	add	r25, r25
    62ae:	0a 95       	dec	r16
    62b0:	ea f7       	brpl	.-6      	; 0x62ac <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x5e>
    62b2:	93 8b       	std	Z+19, r25	; 0x13
    62b4:	98 2f       	mov	r25, r24
    62b6:	01 c0       	rjmp	.+2      	; 0x62ba <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x6c>
    62b8:	99 0f       	add	r25, r25
    62ba:	ea 94       	dec	r14
    62bc:	ea f7       	brpl	.-6      	; 0x62b8 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x6a>
    62be:	94 8b       	std	Z+20, r25	; 0x14
    62c0:	98 2f       	mov	r25, r24
    62c2:	01 c0       	rjmp	.+2      	; 0x62c6 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x78>
    62c4:	99 0f       	add	r25, r25
    62c6:	ca 94       	dec	r12
    62c8:	ea f7       	brpl	.-6      	; 0x62c4 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x76>
    62ca:	95 8b       	std	Z+21, r25	; 0x15
    62cc:	98 2f       	mov	r25, r24
    62ce:	01 c0       	rjmp	.+2      	; 0x62d2 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x84>
    62d0:	99 0f       	add	r25, r25
    62d2:	aa 94       	dec	r10
    62d4:	ea f7       	brpl	.-6      	; 0x62d0 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x82>
    62d6:	96 8b       	std	Z+22, r25	; 0x16
    62d8:	01 c0       	rjmp	.+2      	; 0x62dc <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x8e>
    62da:	88 0f       	add	r24, r24
    62dc:	8a 94       	dec	r8
    62de:	ea f7       	brpl	.-6      	; 0x62da <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x8c>
    62e0:	87 8b       	std	Z+23, r24	; 0x17
    62e2:	df 91       	pop	r29
    62e4:	cf 91       	pop	r28
    62e6:	1f 91       	pop	r17
    62e8:	0f 91       	pop	r16
    62ea:	ff 90       	pop	r15
    62ec:	ef 90       	pop	r14
    62ee:	df 90       	pop	r13
    62f0:	cf 90       	pop	r12
    62f2:	af 90       	pop	r10
    62f4:	8f 90       	pop	r8
    62f6:	7f 90       	pop	r7
    62f8:	6f 90       	pop	r6
    62fa:	08 95       	ret

000062fc <_ZN17LiquidCrystal_I2C4initEv>:
    62fc:	0f 93       	push	r16
    62fe:	1f 93       	push	r17
    6300:	cf 93       	push	r28
    6302:	df 93       	push	r29
    6304:	ec 01       	movw	r28, r24
    6306:	8c 01       	movw	r16, r24
    6308:	03 5f       	subi	r16, 0xF3	; 243
    630a:	1f 4f       	sbci	r17, 0xFF	; 255
    630c:	6a 85       	ldd	r22, Y+10	; 0x0a
    630e:	c8 01       	movw	r24, r16
    6310:	50 de       	rcall	.-864    	; 0x5fb2 <_ZN5I2CIO5beginEh>
    6312:	01 97       	sbiw	r24, 0x01	; 1
    6314:	51 f4       	brne	.+20     	; 0x632a <_ZN17LiquidCrystal_I2C4initEv+0x2e>
    6316:	61 e0       	ldi	r22, 0x01	; 1
    6318:	c8 01       	movw	r24, r16
    631a:	3f de       	rcall	.-898    	; 0x5f9a <_ZN5I2CIO8portModeEh>
    631c:	1c 82       	std	Y+4, r1	; 0x04
    631e:	60 e0       	ldi	r22, 0x00	; 0
    6320:	c8 01       	movw	r24, r16
    6322:	61 de       	rcall	.-830    	; 0x5fe6 <_ZN5I2CIO5writeEh>
    6324:	81 e0       	ldi	r24, 0x01	; 1
    6326:	90 e0       	ldi	r25, 0x00	; 0
    6328:	02 c0       	rjmp	.+4      	; 0x632e <_ZN17LiquidCrystal_I2C4initEv+0x32>
    632a:	80 e0       	ldi	r24, 0x00	; 0
    632c:	90 e0       	ldi	r25, 0x00	; 0
    632e:	df 91       	pop	r29
    6330:	cf 91       	pop	r28
    6332:	1f 91       	pop	r17
    6334:	0f 91       	pop	r16
    6336:	08 95       	ret

00006338 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
}

//
// pulseEnable
void LiquidCrystal_I2C::pulseEnable (uint8_t data)
{
    6338:	ff 92       	push	r15
    633a:	0f 93       	push	r16
    633c:	1f 93       	push	r17
    633e:	cf 93       	push	r28
    6340:	df 93       	push	r29
    6342:	ec 01       	movw	r28, r24
    6344:	f6 2e       	mov	r15, r22
   _i2cio.write (data | _En);   // En HIGH
    6346:	8c 01       	movw	r16, r24
    6348:	03 5f       	subi	r16, 0xF3	; 243
    634a:	1f 4f       	sbci	r17, 0xFF	; 255
    634c:	99 89       	ldd	r25, Y+17	; 0x11
    634e:	69 2b       	or	r22, r25
    6350:	c8 01       	movw	r24, r16
    6352:	49 de       	rcall	.-878    	; 0x5fe6 <_ZN5I2CIO5writeEh>
   _i2cio.write (data & ~_En);  // En LOW
    6354:	99 89       	ldd	r25, Y+17	; 0x11
    6356:	90 95       	com	r25
    6358:	6f 2d       	mov	r22, r15
    635a:	69 23       	and	r22, r25
    635c:	c8 01       	movw	r24, r16
    635e:	43 de       	rcall	.-890    	; 0x5fe6 <_ZN5I2CIO5writeEh>
    6360:	df 91       	pop	r29
    6362:	cf 91       	pop	r28
    6364:	1f 91       	pop	r17
    6366:	0f 91       	pop	r16
    6368:	ff 90       	pop	r15
    636a:	08 95       	ret

0000636c <_ZN17LiquidCrystal_I2C10write4bitsEhh>:
}

//
// write4bits
void LiquidCrystal_I2C::write4bits ( uint8_t value, uint8_t mode ) 
{
    636c:	dc 01       	movw	r26, r24
    636e:	fc 01       	movw	r30, r24
    6370:	74 96       	adiw	r30, 0x14	; 20
    6372:	9c 01       	movw	r18, r24
    6374:	28 5e       	subi	r18, 0xE8	; 232
    6376:	3f 4f       	sbci	r19, 0xFF	; 255
   uint8_t pinMapValue = 0;
    6378:	90 e0       	ldi	r25, 0x00	; 0
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
   {
      if ( ( value & 0x1 ) == 1 )
    637a:	60 ff       	sbrs	r22, 0
    637c:	02 c0       	rjmp	.+4      	; 0x6382 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x16>
      {
         pinMapValue |= _data_pins[i];
    637e:	80 81       	ld	r24, Z
    6380:	98 2b       	or	r25, r24
      }
      value = ( value >> 1 );
    6382:	66 95       	lsr	r22
    6384:	31 96       	adiw	r30, 0x01	; 1
{
   uint8_t pinMapValue = 0;
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
    6386:	e2 17       	cp	r30, r18
    6388:	f3 07       	cpc	r31, r19
    638a:	b9 f7       	brne	.-18     	; 0x637a <_ZN17LiquidCrystal_I2C10write4bitsEhh+0xe>
      value = ( value >> 1 );
   }
   
   // Is it a command or data
   // -----------------------
   if ( mode == DATA )
    638c:	41 30       	cpi	r20, 0x01	; 1
    638e:	19 f4       	brne	.+6      	; 0x6396 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x2a>
   {
      mode = _Rs;
    6390:	53 96       	adiw	r26, 0x13	; 19
    6392:	4c 91       	ld	r20, X
    6394:	53 97       	sbiw	r26, 0x13	; 19
    6396:	1c 96       	adiw	r26, 0x0c	; 12
    6398:	6c 91       	ld	r22, X
    639a:	1c 97       	sbiw	r26, 0x0c	; 12
    639c:	69 2b       	or	r22, r25
   }
   
   pinMapValue |= mode | _backlightStsMask;
    639e:	64 2b       	or	r22, r20
   pulseEnable ( pinMapValue );
    63a0:	cd 01       	movw	r24, r26
    63a2:	ca cf       	rjmp	.-108    	; 0x6338 <_ZN17LiquidCrystal_I2C11pulseEnableEh>
    63a4:	08 95       	ret

000063a6 <_ZN17LiquidCrystal_I2C4sendEhh>:
//----------------------------------------------------------------------------

//
// send - write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) 
{
    63a6:	0f 93       	push	r16
    63a8:	1f 93       	push	r17
    63aa:	cf 93       	push	r28
    63ac:	df 93       	push	r29
    63ae:	8c 01       	movw	r16, r24
    63b0:	c6 2f       	mov	r28, r22
    63b2:	d4 2f       	mov	r29, r20
   // No need to use the delay routines since the time taken to write takes
   // longer that what is needed both for toggling and enable pin an to execute
   // the command.
   
   if ( mode == FOUR_BITS )
    63b4:	42 30       	cpi	r20, 0x02	; 2
    63b6:	21 f4       	brne	.+8      	; 0x63c0 <_ZN17LiquidCrystal_I2C4sendEhh+0x1a>
   {
      write4bits( (value & 0x0F), COMMAND );
    63b8:	6f 70       	andi	r22, 0x0F	; 15
    63ba:	40 e0       	ldi	r20, 0x00	; 0
    63bc:	d7 df       	rcall	.-82     	; 0x636c <_ZN17LiquidCrystal_I2C10write4bitsEhh>
    63be:	0f c0       	rjmp	.+30     	; 0x63de <_ZN17LiquidCrystal_I2C4sendEhh+0x38>
   }
   else 
   {
      write4bits( (value >> 4), mode );
    63c0:	70 e0       	ldi	r23, 0x00	; 0
    63c2:	75 95       	asr	r23
    63c4:	67 95       	ror	r22
    63c6:	75 95       	asr	r23
    63c8:	67 95       	ror	r22
    63ca:	75 95       	asr	r23
    63cc:	67 95       	ror	r22
    63ce:	75 95       	asr	r23
    63d0:	67 95       	ror	r22
    63d2:	cc df       	rcall	.-104    	; 0x636c <_ZN17LiquidCrystal_I2C10write4bitsEhh>
      write4bits( (value & 0x0F), mode);
    63d4:	6c 2f       	mov	r22, r28
    63d6:	6f 70       	andi	r22, 0x0F	; 15
    63d8:	4d 2f       	mov	r20, r29
    63da:	c8 01       	movw	r24, r16
    63dc:	c7 df       	rcall	.-114    	; 0x636c <_ZN17LiquidCrystal_I2C10write4bitsEhh>
   }
}
    63de:	df 91       	pop	r29
    63e0:	cf 91       	pop	r28
    63e2:	1f 91       	pop	r17
    63e4:	0f 91       	pop	r16
    63e6:	08 95       	ret

000063e8 <_ZN17LiquidCrystal_I2C5beginEhhh>:
// ---------------------------------------------------------------------------

//
// begin
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
    63e8:	ff 92       	push	r15
    63ea:	0f 93       	push	r16
    63ec:	1f 93       	push	r17
    63ee:	cf 93       	push	r28
    63f0:	df 93       	push	r29
    63f2:	ec 01       	movw	r28, r24
    63f4:	16 2f       	mov	r17, r22
    63f6:	04 2f       	mov	r16, r20
    63f8:	f2 2e       	mov	r15, r18
   
   init();     // Initialise the I2C expander interface
    63fa:	80 df       	rcall	.-256    	; 0x62fc <_ZN17LiquidCrystal_I2C4initEv>
   LCD::begin ( cols, lines, dotsize );   
    63fc:	2f 2d       	mov	r18, r15
    63fe:	40 2f       	mov	r20, r16
    6400:	61 2f       	mov	r22, r17
    6402:	ce 01       	movw	r24, r28
    6404:	88 de       	rcall	.-752    	; 0x6116 <_ZN3LCD5beginEhhh>
}
    6406:	df 91       	pop	r29
    6408:	cf 91       	pop	r28
    640a:	1f 91       	pop	r17
    640c:	0f 91       	pop	r16
    640e:	ff 90       	pop	r15
    6410:	08 95       	ret

00006412 <__vector_20>:
void (*TimerOne::isrCallback)() = NULL;

// interrupt service routine that wraps a user defined function supplied by attachInterrupt
#if defined(__AVR__)
ISR(TIMER1_OVF_vect)
{
    6412:	1f 92       	push	r1
    6414:	0f 92       	push	r0
    6416:	0f b6       	in	r0, 0x3f	; 63
    6418:	0f 92       	push	r0
    641a:	11 24       	eor	r1, r1
    641c:	0b b6       	in	r0, 0x3b	; 59
    641e:	0f 92       	push	r0
    6420:	2f 93       	push	r18
    6422:	3f 93       	push	r19
    6424:	4f 93       	push	r20
    6426:	5f 93       	push	r21
    6428:	6f 93       	push	r22
    642a:	7f 93       	push	r23
    642c:	8f 93       	push	r24
    642e:	9f 93       	push	r25
    6430:	af 93       	push	r26
    6432:	bf 93       	push	r27
    6434:	ef 93       	push	r30
    6436:	ff 93       	push	r31
  Timer1.isrCallback();
    6438:	e0 91 b7 07 	lds	r30, 0x07B7
    643c:	f0 91 b8 07 	lds	r31, 0x07B8
    6440:	19 95       	eicall
}
    6442:	ff 91       	pop	r31
    6444:	ef 91       	pop	r30
    6446:	bf 91       	pop	r27
    6448:	af 91       	pop	r26
    644a:	9f 91       	pop	r25
    644c:	8f 91       	pop	r24
    644e:	7f 91       	pop	r23
    6450:	6f 91       	pop	r22
    6452:	5f 91       	pop	r21
    6454:	4f 91       	pop	r20
    6456:	3f 91       	pop	r19
    6458:	2f 91       	pop	r18
    645a:	0f 90       	pop	r0
    645c:	0b be       	out	0x3b, r0	; 59
    645e:	0f 90       	pop	r0
    6460:	0f be       	out	0x3f, r0	; 63
    6462:	0f 90       	pop	r0
    6464:	1f 90       	pop	r1
    6466:	18 95       	reti

00006468 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    6468:	10 92 29 08 	sts	0x0829, r1
    646c:	81 e0       	ldi	r24, 0x01	; 1
    646e:	80 93 27 08 	sts	0x0827, r24
    6472:	10 92 26 08 	sts	0x0826, r1
    6476:	61 e0       	ldi	r22, 0x01	; 1
    6478:	84 e1       	ldi	r24, 0x14	; 20
    647a:	0e 94 8d 40 	call	0x811a	; 0x811a <digitalWrite>
    647e:	61 e0       	ldi	r22, 0x01	; 1
    6480:	85 e1       	ldi	r24, 0x15	; 21
    6482:	0e 94 8d 40 	call	0x811a	; 0x811a <digitalWrite>
    6486:	e9 eb       	ldi	r30, 0xB9	; 185
    6488:	f0 e0       	ldi	r31, 0x00	; 0
    648a:	80 81       	ld	r24, Z
    648c:	8e 7f       	andi	r24, 0xFE	; 254
    648e:	80 83       	st	Z, r24
    6490:	80 81       	ld	r24, Z
    6492:	8d 7f       	andi	r24, 0xFD	; 253
    6494:	80 83       	st	Z, r24
    6496:	88 e4       	ldi	r24, 0x48	; 72
    6498:	80 93 b8 00 	sts	0x00B8, r24
    649c:	85 e4       	ldi	r24, 0x45	; 69
    649e:	80 93 bc 00 	sts	0x00BC, r24
    64a2:	08 95       	ret

000064a4 <twi_readFrom>:
    64a4:	41 32       	cpi	r20, 0x21	; 33
    64a6:	08 f0       	brcs	.+2      	; 0x64aa <twi_readFrom+0x6>
    64a8:	46 c0       	rjmp	.+140    	; 0x6536 <twi_readFrom+0x92>
    64aa:	90 91 29 08 	lds	r25, 0x0829
    64ae:	91 11       	cpse	r25, r1
    64b0:	fc cf       	rjmp	.-8      	; 0x64aa <twi_readFrom+0x6>
    64b2:	31 e0       	ldi	r19, 0x01	; 1
    64b4:	30 93 29 08 	sts	0x0829, r19
    64b8:	20 93 27 08 	sts	0x0827, r18
    64bc:	2f ef       	ldi	r18, 0xFF	; 255
    64be:	20 93 bc 07 	sts	0x07BC, r18
    64c2:	10 92 01 08 	sts	0x0801, r1
    64c6:	24 0f       	add	r18, r20
    64c8:	20 93 00 08 	sts	0x0800, r18
    64cc:	30 93 28 08 	sts	0x0828, r19
    64d0:	20 91 28 08 	lds	r18, 0x0828
    64d4:	88 0f       	add	r24, r24
    64d6:	82 2b       	or	r24, r18
    64d8:	80 93 28 08 	sts	0x0828, r24
    64dc:	80 91 26 08 	lds	r24, 0x0826
    64e0:	81 30       	cpi	r24, 0x01	; 1
    64e2:	51 f4       	brne	.+20     	; 0x64f8 <twi_readFrom+0x54>
    64e4:	10 92 26 08 	sts	0x0826, r1
    64e8:	80 91 28 08 	lds	r24, 0x0828
    64ec:	80 93 bb 00 	sts	0x00BB, r24
    64f0:	85 ec       	ldi	r24, 0xC5	; 197
    64f2:	80 93 bc 00 	sts	0x00BC, r24
    64f6:	03 c0       	rjmp	.+6      	; 0x64fe <twi_readFrom+0x5a>
    64f8:	85 ee       	ldi	r24, 0xE5	; 229
    64fa:	80 93 bc 00 	sts	0x00BC, r24
    64fe:	80 91 29 08 	lds	r24, 0x0829
    6502:	81 30       	cpi	r24, 0x01	; 1
    6504:	e1 f3       	breq	.-8      	; 0x64fe <twi_readFrom+0x5a>
    6506:	80 91 01 08 	lds	r24, 0x0801
    650a:	84 17       	cp	r24, r20
    650c:	10 f4       	brcc	.+4      	; 0x6512 <twi_readFrom+0x6e>
    650e:	40 91 01 08 	lds	r20, 0x0801
    6512:	44 23       	and	r20, r20
    6514:	89 f0       	breq	.+34     	; 0x6538 <twi_readFrom+0x94>
    6516:	a2 e0       	ldi	r26, 0x02	; 2
    6518:	b8 e0       	ldi	r27, 0x08	; 8
    651a:	fb 01       	movw	r30, r22
    651c:	8f ef       	ldi	r24, 0xFF	; 255
    651e:	84 0f       	add	r24, r20
    6520:	90 e0       	ldi	r25, 0x00	; 0
    6522:	01 96       	adiw	r24, 0x01	; 1
    6524:	68 0f       	add	r22, r24
    6526:	79 1f       	adc	r23, r25
    6528:	8d 91       	ld	r24, X+
    652a:	81 93       	st	Z+, r24
    652c:	e6 17       	cp	r30, r22
    652e:	f7 07       	cpc	r31, r23
    6530:	d9 f7       	brne	.-10     	; 0x6528 <twi_readFrom+0x84>
    6532:	94 2f       	mov	r25, r20
    6534:	01 c0       	rjmp	.+2      	; 0x6538 <twi_readFrom+0x94>
    6536:	90 e0       	ldi	r25, 0x00	; 0
    6538:	89 2f       	mov	r24, r25
    653a:	08 95       	ret

0000653c <twi_writeTo>:
    653c:	0f 93       	push	r16
    653e:	41 32       	cpi	r20, 0x21	; 33
    6540:	08 f0       	brcs	.+2      	; 0x6544 <twi_writeTo+0x8>
    6542:	51 c0       	rjmp	.+162    	; 0x65e6 <twi_writeTo+0xaa>
    6544:	30 91 29 08 	lds	r19, 0x0829
    6548:	31 11       	cpse	r19, r1
    654a:	fc cf       	rjmp	.-8      	; 0x6544 <twi_writeTo+0x8>
    654c:	92 e0       	ldi	r25, 0x02	; 2
    654e:	90 93 29 08 	sts	0x0829, r25
    6552:	00 93 27 08 	sts	0x0827, r16
    6556:	9f ef       	ldi	r25, 0xFF	; 255
    6558:	90 93 bc 07 	sts	0x07BC, r25
    655c:	10 92 01 08 	sts	0x0801, r1
    6560:	40 93 00 08 	sts	0x0800, r20
    6564:	44 23       	and	r20, r20
    6566:	71 f0       	breq	.+28     	; 0x6584 <twi_writeTo+0x48>
    6568:	fb 01       	movw	r30, r22
    656a:	a2 e0       	ldi	r26, 0x02	; 2
    656c:	b8 e0       	ldi	r27, 0x08	; 8
    656e:	41 50       	subi	r20, 0x01	; 1
    6570:	50 e0       	ldi	r21, 0x00	; 0
    6572:	4f 5f       	subi	r20, 0xFF	; 255
    6574:	5f 4f       	sbci	r21, 0xFF	; 255
    6576:	64 0f       	add	r22, r20
    6578:	75 1f       	adc	r23, r21
    657a:	91 91       	ld	r25, Z+
    657c:	9d 93       	st	X+, r25
    657e:	e6 17       	cp	r30, r22
    6580:	f7 07       	cpc	r31, r23
    6582:	d9 f7       	brne	.-10     	; 0x657a <twi_writeTo+0x3e>
    6584:	10 92 28 08 	sts	0x0828, r1
    6588:	90 91 28 08 	lds	r25, 0x0828
    658c:	88 0f       	add	r24, r24
    658e:	89 2b       	or	r24, r25
    6590:	80 93 28 08 	sts	0x0828, r24
    6594:	80 91 26 08 	lds	r24, 0x0826
    6598:	81 30       	cpi	r24, 0x01	; 1
    659a:	51 f4       	brne	.+20     	; 0x65b0 <twi_writeTo+0x74>
    659c:	10 92 26 08 	sts	0x0826, r1
    65a0:	80 91 28 08 	lds	r24, 0x0828
    65a4:	80 93 bb 00 	sts	0x00BB, r24
    65a8:	85 ec       	ldi	r24, 0xC5	; 197
    65aa:	80 93 bc 00 	sts	0x00BC, r24
    65ae:	03 c0       	rjmp	.+6      	; 0x65b6 <twi_writeTo+0x7a>
    65b0:	85 ee       	ldi	r24, 0xE5	; 229
    65b2:	80 93 bc 00 	sts	0x00BC, r24
    65b6:	22 23       	and	r18, r18
    65b8:	41 f0       	breq	.+16     	; 0x65ca <twi_writeTo+0x8e>
    65ba:	80 91 29 08 	lds	r24, 0x0829
    65be:	82 30       	cpi	r24, 0x02	; 2
    65c0:	21 f4       	brne	.+8      	; 0x65ca <twi_writeTo+0x8e>
    65c2:	80 91 29 08 	lds	r24, 0x0829
    65c6:	82 30       	cpi	r24, 0x02	; 2
    65c8:	e1 f3       	breq	.-8      	; 0x65c2 <twi_writeTo+0x86>
    65ca:	80 91 bc 07 	lds	r24, 0x07BC
    65ce:	8f 3f       	cpi	r24, 0xFF	; 255
    65d0:	79 f0       	breq	.+30     	; 0x65f0 <twi_writeTo+0xb4>
    65d2:	80 91 bc 07 	lds	r24, 0x07BC
    65d6:	80 32       	cpi	r24, 0x20	; 32
    65d8:	41 f0       	breq	.+16     	; 0x65ea <twi_writeTo+0xae>
    65da:	80 91 bc 07 	lds	r24, 0x07BC
    65de:	80 33       	cpi	r24, 0x30	; 48
    65e0:	31 f0       	breq	.+12     	; 0x65ee <twi_writeTo+0xb2>
    65e2:	34 e0       	ldi	r19, 0x04	; 4
    65e4:	05 c0       	rjmp	.+10     	; 0x65f0 <twi_writeTo+0xb4>
    65e6:	31 e0       	ldi	r19, 0x01	; 1
    65e8:	03 c0       	rjmp	.+6      	; 0x65f0 <twi_writeTo+0xb4>
    65ea:	32 e0       	ldi	r19, 0x02	; 2
    65ec:	01 c0       	rjmp	.+2      	; 0x65f0 <twi_writeTo+0xb4>
    65ee:	33 e0       	ldi	r19, 0x03	; 3
    65f0:	83 2f       	mov	r24, r19
    65f2:	0f 91       	pop	r16
    65f4:	08 95       	ret

000065f6 <twi_transmit>:
    65f6:	61 32       	cpi	r22, 0x21	; 33
    65f8:	c8 f4       	brcc	.+50     	; 0x662c <twi_transmit+0x36>
    65fa:	20 91 29 08 	lds	r18, 0x0829
    65fe:	24 30       	cpi	r18, 0x04	; 4
    6600:	b9 f4       	brne	.+46     	; 0x6630 <twi_transmit+0x3a>
    6602:	60 93 de 07 	sts	0x07DE, r22
    6606:	66 23       	and	r22, r22
    6608:	a9 f0       	breq	.+42     	; 0x6634 <twi_transmit+0x3e>
    660a:	fc 01       	movw	r30, r24
    660c:	a0 ee       	ldi	r26, 0xE0	; 224
    660e:	b7 e0       	ldi	r27, 0x07	; 7
    6610:	61 50       	subi	r22, 0x01	; 1
    6612:	26 2f       	mov	r18, r22
    6614:	30 e0       	ldi	r19, 0x00	; 0
    6616:	2f 5f       	subi	r18, 0xFF	; 255
    6618:	3f 4f       	sbci	r19, 0xFF	; 255
    661a:	28 0f       	add	r18, r24
    661c:	39 1f       	adc	r19, r25
    661e:	91 91       	ld	r25, Z+
    6620:	9d 93       	st	X+, r25
    6622:	e2 17       	cp	r30, r18
    6624:	f3 07       	cpc	r31, r19
    6626:	d9 f7       	brne	.-10     	; 0x661e <twi_transmit+0x28>
    6628:	80 e0       	ldi	r24, 0x00	; 0
    662a:	08 95       	ret
    662c:	81 e0       	ldi	r24, 0x01	; 1
    662e:	08 95       	ret
    6630:	82 e0       	ldi	r24, 0x02	; 2
    6632:	08 95       	ret
    6634:	80 e0       	ldi	r24, 0x00	; 0
    6636:	08 95       	ret

00006638 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    6638:	85 ed       	ldi	r24, 0xD5	; 213
    663a:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    663e:	ec eb       	ldi	r30, 0xBC	; 188
    6640:	f0 e0       	ldi	r31, 0x00	; 0
    6642:	80 81       	ld	r24, Z
    6644:	84 fd       	sbrc	r24, 4
    6646:	fd cf       	rjmp	.-6      	; 0x6642 <twi_stop+0xa>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    6648:	10 92 29 08 	sts	0x0829, r1
    664c:	08 95       	ret

0000664e <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    664e:	85 ec       	ldi	r24, 0xC5	; 197
    6650:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
    6654:	10 92 29 08 	sts	0x0829, r1
    6658:	08 95       	ret

0000665a <__vector_39>:
}

ISR(TWI_vect)
{
    665a:	1f 92       	push	r1
    665c:	0f 92       	push	r0
    665e:	0f b6       	in	r0, 0x3f	; 63
    6660:	0f 92       	push	r0
    6662:	11 24       	eor	r1, r1
    6664:	0b b6       	in	r0, 0x3b	; 59
    6666:	0f 92       	push	r0
    6668:	2f 93       	push	r18
    666a:	3f 93       	push	r19
    666c:	4f 93       	push	r20
    666e:	5f 93       	push	r21
    6670:	6f 93       	push	r22
    6672:	7f 93       	push	r23
    6674:	8f 93       	push	r24
    6676:	9f 93       	push	r25
    6678:	af 93       	push	r26
    667a:	bf 93       	push	r27
    667c:	ef 93       	push	r30
    667e:	ff 93       	push	r31
  switch(TW_STATUS){
    6680:	80 91 b9 00 	lds	r24, 0x00B9
    6684:	88 7f       	andi	r24, 0xF8	; 248
    6686:	90 e0       	ldi	r25, 0x00	; 0
    6688:	89 3c       	cpi	r24, 0xC9	; 201
    668a:	91 05       	cpc	r25, r1
    668c:	08 f0       	brcs	.+2      	; 0x6690 <__vector_39+0x36>
    668e:	f0 c0       	rjmp	.+480    	; 0x6870 <__vector_39+0x216>
    6690:	fc 01       	movw	r30, r24
    6692:	88 27       	eor	r24, r24
    6694:	ea 57       	subi	r30, 0x7A	; 122
    6696:	ff 4f       	sbci	r31, 0xFF	; 255
    6698:	8f 4f       	sbci	r24, 0xFF	; 255
    669a:	0c 94 b0 44 	jmp	0x8960	; 0x8960 <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    669e:	80 91 28 08 	lds	r24, 0x0828
    66a2:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    66a6:	85 ec       	ldi	r24, 0xC5	; 197
    66a8:	80 93 bc 00 	sts	0x00BC, r24
    66ac:	e1 c0       	rjmp	.+450    	; 0x6870 <__vector_39+0x216>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    66ae:	90 91 01 08 	lds	r25, 0x0801
    66b2:	80 91 00 08 	lds	r24, 0x0800
    66b6:	98 17       	cp	r25, r24
    66b8:	80 f4       	brcc	.+32     	; 0x66da <__vector_39+0x80>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    66ba:	e0 91 01 08 	lds	r30, 0x0801
    66be:	81 e0       	ldi	r24, 0x01	; 1
    66c0:	8e 0f       	add	r24, r30
    66c2:	80 93 01 08 	sts	0x0801, r24
    66c6:	f0 e0       	ldi	r31, 0x00	; 0
    66c8:	ee 5f       	subi	r30, 0xFE	; 254
    66ca:	f7 4f       	sbci	r31, 0xF7	; 247
    66cc:	80 81       	ld	r24, Z
    66ce:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    66d2:	85 ec       	ldi	r24, 0xC5	; 197
    66d4:	80 93 bc 00 	sts	0x00BC, r24
    66d8:	cb c0       	rjmp	.+406    	; 0x6870 <__vector_39+0x216>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
    66da:	80 91 27 08 	lds	r24, 0x0827
    66de:	88 23       	and	r24, r24
    66e0:	11 f0       	breq	.+4      	; 0x66e6 <__vector_39+0x8c>
          twi_stop();
    66e2:	aa df       	rcall	.-172    	; 0x6638 <twi_stop>
    66e4:	c5 c0       	rjmp	.+394    	; 0x6870 <__vector_39+0x216>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    66e6:	81 e0       	ldi	r24, 0x01	; 1
    66e8:	80 93 26 08 	sts	0x0826, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    66ec:	84 ea       	ldi	r24, 0xA4	; 164
    66ee:	80 93 bc 00 	sts	0x00BC, r24
	  twi_state = TWI_READY;
    66f2:	10 92 29 08 	sts	0x0829, r1
    66f6:	bc c0       	rjmp	.+376    	; 0x6870 <__vector_39+0x216>
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    66f8:	80 e2       	ldi	r24, 0x20	; 32
    66fa:	80 93 bc 07 	sts	0x07BC, r24
      twi_stop();
    66fe:	9c df       	rcall	.-200    	; 0x6638 <twi_stop>
      break;
    6700:	b7 c0       	rjmp	.+366    	; 0x6870 <__vector_39+0x216>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    6702:	80 e3       	ldi	r24, 0x30	; 48
    6704:	80 93 bc 07 	sts	0x07BC, r24
      twi_stop();
    6708:	97 df       	rcall	.-210    	; 0x6638 <twi_stop>
      break;
    670a:	b2 c0       	rjmp	.+356    	; 0x6870 <__vector_39+0x216>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    670c:	88 e3       	ldi	r24, 0x38	; 56
    670e:	80 93 bc 07 	sts	0x07BC, r24
      twi_releaseBus();
    6712:	9d df       	rcall	.-198    	; 0x664e <twi_releaseBus>
      break;
    6714:	ad c0       	rjmp	.+346    	; 0x6870 <__vector_39+0x216>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    6716:	e0 91 01 08 	lds	r30, 0x0801
    671a:	81 e0       	ldi	r24, 0x01	; 1
    671c:	8e 0f       	add	r24, r30
    671e:	80 93 01 08 	sts	0x0801, r24
    6722:	80 91 bb 00 	lds	r24, 0x00BB
    6726:	f0 e0       	ldi	r31, 0x00	; 0
    6728:	ee 5f       	subi	r30, 0xFE	; 254
    672a:	f7 4f       	sbci	r31, 0xF7	; 247
    672c:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    672e:	90 91 01 08 	lds	r25, 0x0801
    6732:	80 91 00 08 	lds	r24, 0x0800
    6736:	98 17       	cp	r25, r24
    6738:	20 f4       	brcc	.+8      	; 0x6742 <__vector_39+0xe8>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    673a:	85 ec       	ldi	r24, 0xC5	; 197
    673c:	80 93 bc 00 	sts	0x00BC, r24
    6740:	97 c0       	rjmp	.+302    	; 0x6870 <__vector_39+0x216>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    6742:	85 e8       	ldi	r24, 0x85	; 133
    6744:	80 93 bc 00 	sts	0x00BC, r24
    6748:	93 c0       	rjmp	.+294    	; 0x6870 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    674a:	e0 91 01 08 	lds	r30, 0x0801
    674e:	81 e0       	ldi	r24, 0x01	; 1
    6750:	8e 0f       	add	r24, r30
    6752:	80 93 01 08 	sts	0x0801, r24
    6756:	80 91 bb 00 	lds	r24, 0x00BB
    675a:	f0 e0       	ldi	r31, 0x00	; 0
    675c:	ee 5f       	subi	r30, 0xFE	; 254
    675e:	f7 4f       	sbci	r31, 0xF7	; 247
    6760:	80 83       	st	Z, r24
	if (twi_sendStop)
    6762:	80 91 27 08 	lds	r24, 0x0827
    6766:	88 23       	and	r24, r24
    6768:	11 f0       	breq	.+4      	; 0x676e <__vector_39+0x114>
          twi_stop();
    676a:	66 df       	rcall	.-308    	; 0x6638 <twi_stop>
    676c:	81 c0       	rjmp	.+258    	; 0x6870 <__vector_39+0x216>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    676e:	81 e0       	ldi	r24, 0x01	; 1
    6770:	80 93 26 08 	sts	0x0826, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    6774:	84 ea       	ldi	r24, 0xA4	; 164
    6776:	80 93 bc 00 	sts	0x00BC, r24
	  twi_state = TWI_READY;
    677a:	10 92 29 08 	sts	0x0829, r1
    677e:	78 c0       	rjmp	.+240    	; 0x6870 <__vector_39+0x216>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    6780:	5b df       	rcall	.-330    	; 0x6638 <twi_stop>
      break;
    6782:	76 c0       	rjmp	.+236    	; 0x6870 <__vector_39+0x216>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    6784:	83 e0       	ldi	r24, 0x03	; 3
    6786:	80 93 29 08 	sts	0x0829, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    678a:	10 92 bd 07 	sts	0x07BD, r1
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    678e:	85 ec       	ldi	r24, 0xC5	; 197
    6790:	80 93 bc 00 	sts	0x00BC, r24
    6794:	6d c0       	rjmp	.+218    	; 0x6870 <__vector_39+0x216>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    6796:	80 91 bd 07 	lds	r24, 0x07BD
    679a:	80 32       	cpi	r24, 0x20	; 32
    679c:	80 f4       	brcc	.+32     	; 0x67be <__vector_39+0x164>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    679e:	e0 91 bd 07 	lds	r30, 0x07BD
    67a2:	81 e0       	ldi	r24, 0x01	; 1
    67a4:	8e 0f       	add	r24, r30
    67a6:	80 93 bd 07 	sts	0x07BD, r24
    67aa:	80 91 bb 00 	lds	r24, 0x00BB
    67ae:	f0 e0       	ldi	r31, 0x00	; 0
    67b0:	e2 54       	subi	r30, 0x42	; 66
    67b2:	f8 4f       	sbci	r31, 0xF8	; 248
    67b4:	80 83       	st	Z, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    67b6:	85 ec       	ldi	r24, 0xC5	; 197
    67b8:	80 93 bc 00 	sts	0x00BC, r24
    67bc:	59 c0       	rjmp	.+178    	; 0x6870 <__vector_39+0x216>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    67be:	85 e8       	ldi	r24, 0x85	; 133
    67c0:	80 93 bc 00 	sts	0x00BC, r24
    67c4:	55 c0       	rjmp	.+170    	; 0x6870 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    67c6:	80 91 bd 07 	lds	r24, 0x07BD
    67ca:	80 32       	cpi	r24, 0x20	; 32
    67cc:	30 f4       	brcc	.+12     	; 0x67da <__vector_39+0x180>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    67ce:	e0 91 bd 07 	lds	r30, 0x07BD
    67d2:	f0 e0       	ldi	r31, 0x00	; 0
    67d4:	e2 54       	subi	r30, 0x42	; 66
    67d6:	f8 4f       	sbci	r31, 0xF8	; 248
    67d8:	10 82       	st	Z, r1
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
    67da:	2e df       	rcall	.-420    	; 0x6638 <twi_stop>
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    67dc:	60 91 bd 07 	lds	r22, 0x07BD
    67e0:	70 e0       	ldi	r23, 0x00	; 0
    67e2:	e0 91 22 08 	lds	r30, 0x0822
    67e6:	f0 91 23 08 	lds	r31, 0x0823
    67ea:	8e eb       	ldi	r24, 0xBE	; 190
    67ec:	97 e0       	ldi	r25, 0x07	; 7
    67ee:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    67f0:	10 92 bd 07 	sts	0x07BD, r1
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    67f4:	2c df       	rcall	.-424    	; 0x664e <twi_releaseBus>
      break;
    67f6:	3c c0       	rjmp	.+120    	; 0x6870 <__vector_39+0x216>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    67f8:	85 e8       	ldi	r24, 0x85	; 133
    67fa:	80 93 bc 00 	sts	0x00BC, r24
    67fe:	38 c0       	rjmp	.+112    	; 0x6870 <__vector_39+0x216>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    6800:	84 e0       	ldi	r24, 0x04	; 4
    6802:	80 93 29 08 	sts	0x0829, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    6806:	10 92 df 07 	sts	0x07DF, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    680a:	10 92 de 07 	sts	0x07DE, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    680e:	e0 91 24 08 	lds	r30, 0x0824
    6812:	f0 91 25 08 	lds	r31, 0x0825
    6816:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    6818:	80 91 de 07 	lds	r24, 0x07DE
    681c:	81 11       	cpse	r24, r1
    681e:	05 c0       	rjmp	.+10     	; 0x682a <__vector_39+0x1d0>
        twi_txBufferLength = 1;
    6820:	81 e0       	ldi	r24, 0x01	; 1
    6822:	80 93 de 07 	sts	0x07DE, r24
        twi_txBuffer[0] = 0x00;
    6826:	10 92 e0 07 	sts	0x07E0, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    682a:	e0 91 df 07 	lds	r30, 0x07DF
    682e:	81 e0       	ldi	r24, 0x01	; 1
    6830:	8e 0f       	add	r24, r30
    6832:	80 93 df 07 	sts	0x07DF, r24
    6836:	f0 e0       	ldi	r31, 0x00	; 0
    6838:	e0 52       	subi	r30, 0x20	; 32
    683a:	f8 4f       	sbci	r31, 0xF8	; 248
    683c:	80 81       	ld	r24, Z
    683e:	80 93 bb 00 	sts	0x00BB, r24
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    6842:	90 91 df 07 	lds	r25, 0x07DF
    6846:	80 91 de 07 	lds	r24, 0x07DE
    684a:	98 17       	cp	r25, r24
    684c:	20 f4       	brcc	.+8      	; 0x6856 <__vector_39+0x1fc>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    684e:	85 ec       	ldi	r24, 0xC5	; 197
    6850:	80 93 bc 00 	sts	0x00BC, r24
    6854:	0d c0       	rjmp	.+26     	; 0x6870 <__vector_39+0x216>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    6856:	85 e8       	ldi	r24, 0x85	; 133
    6858:	80 93 bc 00 	sts	0x00BC, r24
    685c:	09 c0       	rjmp	.+18     	; 0x6870 <__vector_39+0x216>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    685e:	85 ec       	ldi	r24, 0xC5	; 197
    6860:	80 93 bc 00 	sts	0x00BC, r24
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    6864:	10 92 29 08 	sts	0x0829, r1
      break;
    6868:	03 c0       	rjmp	.+6      	; 0x6870 <__vector_39+0x216>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    686a:	10 92 bc 07 	sts	0x07BC, r1
      twi_stop();
    686e:	e4 de       	rcall	.-568    	; 0x6638 <twi_stop>
      break;
  }
}
    6870:	ff 91       	pop	r31
    6872:	ef 91       	pop	r30
    6874:	bf 91       	pop	r27
    6876:	af 91       	pop	r26
    6878:	9f 91       	pop	r25
    687a:	8f 91       	pop	r24
    687c:	7f 91       	pop	r23
    687e:	6f 91       	pop	r22
    6880:	5f 91       	pop	r21
    6882:	4f 91       	pop	r20
    6884:	3f 91       	pop	r19
    6886:	2f 91       	pop	r18
    6888:	0f 90       	pop	r0
    688a:	0b be       	out	0x3b, r0	; 59
    688c:	0f 90       	pop	r0
    688e:	0f be       	out	0x3f, r0	; 63
    6890:	0f 90       	pop	r0
    6892:	1f 90       	pop	r1
    6894:	18 95       	reti

00006896 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    6896:	80 91 5a 08 	lds	r24, 0x085A
    689a:	90 e0       	ldi	r25, 0x00	; 0
    689c:	20 91 5b 08 	lds	r18, 0x085B
    68a0:	82 1b       	sub	r24, r18
    68a2:	91 09       	sbc	r25, r1
    68a4:	08 95       	ret

000068a6 <_ZN7TwoWire4readEv>:
    68a6:	90 91 5b 08 	lds	r25, 0x085B
    68aa:	80 91 5a 08 	lds	r24, 0x085A
    68ae:	98 17       	cp	r25, r24
    68b0:	50 f4       	brcc	.+20     	; 0x68c6 <_ZN7TwoWire4readEv+0x20>
    68b2:	e9 2f       	mov	r30, r25
    68b4:	f0 e0       	ldi	r31, 0x00	; 0
    68b6:	e4 5a       	subi	r30, 0xA4	; 164
    68b8:	f7 4f       	sbci	r31, 0xF7	; 247
    68ba:	20 81       	ld	r18, Z
    68bc:	30 e0       	ldi	r19, 0x00	; 0
    68be:	9f 5f       	subi	r25, 0xFF	; 255
    68c0:	90 93 5b 08 	sts	0x085B, r25
    68c4:	02 c0       	rjmp	.+4      	; 0x68ca <_ZN7TwoWire4readEv+0x24>
    68c6:	2f ef       	ldi	r18, 0xFF	; 255
    68c8:	3f ef       	ldi	r19, 0xFF	; 255
    68ca:	c9 01       	movw	r24, r18
    68cc:	08 95       	ret

000068ce <_ZN7TwoWire4peekEv>:
    68ce:	e0 91 5b 08 	lds	r30, 0x085B
    68d2:	80 91 5a 08 	lds	r24, 0x085A
    68d6:	e8 17       	cp	r30, r24
    68d8:	30 f4       	brcc	.+12     	; 0x68e6 <_ZN7TwoWire4peekEv+0x18>
    68da:	f0 e0       	ldi	r31, 0x00	; 0
    68dc:	e4 5a       	subi	r30, 0xA4	; 164
    68de:	f7 4f       	sbci	r31, 0xF7	; 247
    68e0:	80 81       	ld	r24, Z
    68e2:	90 e0       	ldi	r25, 0x00	; 0
    68e4:	08 95       	ret
    68e6:	8f ef       	ldi	r24, 0xFF	; 255
    68e8:	9f ef       	ldi	r25, 0xFF	; 255
    68ea:	08 95       	ret

000068ec <_ZN7TwoWire5flushEv>:
    68ec:	08 95       	ret

000068ee <_ZN7TwoWire5writeEPKhj>:
    68ee:	cf 92       	push	r12
    68f0:	df 92       	push	r13
    68f2:	ef 92       	push	r14
    68f4:	ff 92       	push	r15
    68f6:	0f 93       	push	r16
    68f8:	1f 93       	push	r17
    68fa:	cf 93       	push	r28
    68fc:	df 93       	push	r29
    68fe:	8c 01       	movw	r16, r24
    6900:	cb 01       	movw	r24, r22
    6902:	6a 01       	movw	r12, r20
    6904:	20 91 36 08 	lds	r18, 0x0836
    6908:	22 23       	and	r18, r18
    690a:	a1 f0       	breq	.+40     	; 0x6934 <_ZN7TwoWire5writeEPKhj+0x46>
    690c:	41 15       	cp	r20, r1
    690e:	51 05       	cpc	r21, r1
    6910:	99 f0       	breq	.+38     	; 0x6938 <_ZN7TwoWire5writeEPKhj+0x4a>
    6912:	eb 01       	movw	r28, r22
    6914:	7b 01       	movw	r14, r22
    6916:	e4 0e       	add	r14, r20
    6918:	f5 1e       	adc	r15, r21
    691a:	69 91       	ld	r22, Y+
    691c:	d8 01       	movw	r26, r16
    691e:	ed 91       	ld	r30, X+
    6920:	fc 91       	ld	r31, X
    6922:	01 90       	ld	r0, Z+
    6924:	f0 81       	ld	r31, Z
    6926:	e0 2d       	mov	r30, r0
    6928:	c8 01       	movw	r24, r16
    692a:	19 95       	eicall
    692c:	ce 15       	cp	r28, r14
    692e:	df 05       	cpc	r29, r15
    6930:	a1 f7       	brne	.-24     	; 0x691a <_ZN7TwoWire5writeEPKhj+0x2c>
    6932:	02 c0       	rjmp	.+4      	; 0x6938 <_ZN7TwoWire5writeEPKhj+0x4a>
    6934:	64 2f       	mov	r22, r20
    6936:	5f de       	rcall	.-834    	; 0x65f6 <twi_transmit>
    6938:	c6 01       	movw	r24, r12
    693a:	df 91       	pop	r29
    693c:	cf 91       	pop	r28
    693e:	1f 91       	pop	r17
    6940:	0f 91       	pop	r16
    6942:	ff 90       	pop	r15
    6944:	ef 90       	pop	r14
    6946:	df 90       	pop	r13
    6948:	cf 90       	pop	r12
    694a:	08 95       	ret

0000694c <_ZN7TwoWire5writeEh>:
    694c:	cf 93       	push	r28
    694e:	df 93       	push	r29
    6950:	1f 92       	push	r1
    6952:	cd b7       	in	r28, 0x3d	; 61
    6954:	de b7       	in	r29, 0x3e	; 62
    6956:	fc 01       	movw	r30, r24
    6958:	69 83       	std	Y+1, r22	; 0x01
    695a:	90 91 36 08 	lds	r25, 0x0836
    695e:	99 23       	and	r25, r25
    6960:	d9 f0       	breq	.+54     	; 0x6998 <_ZN7TwoWire5writeEh+0x4c>
    6962:	90 91 37 08 	lds	r25, 0x0837
    6966:	90 32       	cpi	r25, 0x20	; 32
    6968:	38 f0       	brcs	.+14     	; 0x6978 <_ZN7TwoWire5writeEh+0x2c>
    696a:	81 e0       	ldi	r24, 0x01	; 1
    696c:	90 e0       	ldi	r25, 0x00	; 0
    696e:	93 83       	std	Z+3, r25	; 0x03
    6970:	82 83       	std	Z+2, r24	; 0x02
    6972:	80 e0       	ldi	r24, 0x00	; 0
    6974:	90 e0       	ldi	r25, 0x00	; 0
    6976:	16 c0       	rjmp	.+44     	; 0x69a4 <_ZN7TwoWire5writeEh+0x58>
    6978:	80 91 38 08 	lds	r24, 0x0838
    697c:	e8 2f       	mov	r30, r24
    697e:	f0 e0       	ldi	r31, 0x00	; 0
    6980:	e7 5c       	subi	r30, 0xC7	; 199
    6982:	f7 4f       	sbci	r31, 0xF7	; 247
    6984:	99 81       	ldd	r25, Y+1	; 0x01
    6986:	90 83       	st	Z, r25
    6988:	8f 5f       	subi	r24, 0xFF	; 255
    698a:	80 93 38 08 	sts	0x0838, r24
    698e:	80 93 37 08 	sts	0x0837, r24
    6992:	81 e0       	ldi	r24, 0x01	; 1
    6994:	90 e0       	ldi	r25, 0x00	; 0
    6996:	06 c0       	rjmp	.+12     	; 0x69a4 <_ZN7TwoWire5writeEh+0x58>
    6998:	61 e0       	ldi	r22, 0x01	; 1
    699a:	ce 01       	movw	r24, r28
    699c:	01 96       	adiw	r24, 0x01	; 1
    699e:	2b de       	rcall	.-938    	; 0x65f6 <twi_transmit>
    69a0:	81 e0       	ldi	r24, 0x01	; 1
    69a2:	90 e0       	ldi	r25, 0x00	; 0
    69a4:	0f 90       	pop	r0
    69a6:	df 91       	pop	r29
    69a8:	cf 91       	pop	r28
    69aa:	08 95       	ret

000069ac <_ZN7TwoWireC1Ev>:
    69ac:	fc 01       	movw	r30, r24
    69ae:	13 82       	std	Z+3, r1	; 0x03
    69b0:	12 82       	std	Z+2, r1	; 0x02
    69b2:	88 ee       	ldi	r24, 0xE8	; 232
    69b4:	93 e0       	ldi	r25, 0x03	; 3
    69b6:	a0 e0       	ldi	r26, 0x00	; 0
    69b8:	b0 e0       	ldi	r27, 0x00	; 0
    69ba:	84 83       	std	Z+4, r24	; 0x04
    69bc:	95 83       	std	Z+5, r25	; 0x05
    69be:	a6 83       	std	Z+6, r26	; 0x06
    69c0:	b7 83       	std	Z+7, r27	; 0x07
    69c2:	8f ef       	ldi	r24, 0xFF	; 255
    69c4:	94 e0       	ldi	r25, 0x04	; 4
    69c6:	91 83       	std	Z+1, r25	; 0x01
    69c8:	80 83       	st	Z, r24
    69ca:	08 95       	ret

000069cc <_ZN7TwoWire5beginEv>:
    69cc:	10 92 5b 08 	sts	0x085B, r1
    69d0:	10 92 5a 08 	sts	0x085A, r1
    69d4:	10 92 38 08 	sts	0x0838, r1
    69d8:	10 92 37 08 	sts	0x0837, r1
    69dc:	45 cd       	rjmp	.-1398   	; 0x6468 <twi_init>
    69de:	08 95       	ret

000069e0 <_ZN7TwoWire11requestFromEhhh>:
    69e0:	86 2f       	mov	r24, r22
    69e2:	41 32       	cpi	r20, 0x21	; 33
    69e4:	08 f0       	brcs	.+2      	; 0x69e8 <_ZN7TwoWire11requestFromEhhh+0x8>
    69e6:	40 e2       	ldi	r20, 0x20	; 32
    69e8:	6c e5       	ldi	r22, 0x5C	; 92
    69ea:	78 e0       	ldi	r23, 0x08	; 8
    69ec:	5b dd       	rcall	.-1354   	; 0x64a4 <twi_readFrom>
    69ee:	10 92 5b 08 	sts	0x085B, r1
    69f2:	80 93 5a 08 	sts	0x085A, r24
    69f6:	08 95       	ret

000069f8 <_ZN7TwoWire11requestFromEhh>:
    69f8:	21 e0       	ldi	r18, 0x01	; 1
    69fa:	f2 cf       	rjmp	.-28     	; 0x69e0 <_ZN7TwoWire11requestFromEhhh>
    69fc:	08 95       	ret

000069fe <_ZN7TwoWire17beginTransmissionEh>:
    69fe:	81 e0       	ldi	r24, 0x01	; 1
    6a00:	80 93 36 08 	sts	0x0836, r24
    6a04:	60 93 59 08 	sts	0x0859, r22
    6a08:	10 92 38 08 	sts	0x0838, r1
    6a0c:	10 92 37 08 	sts	0x0837, r1
    6a10:	08 95       	ret

00006a12 <_ZN7TwoWire15endTransmissionEh>:
    6a12:	0f 93       	push	r16
    6a14:	06 2f       	mov	r16, r22
    6a16:	21 e0       	ldi	r18, 0x01	; 1
    6a18:	40 91 37 08 	lds	r20, 0x0837
    6a1c:	69 e3       	ldi	r22, 0x39	; 57
    6a1e:	78 e0       	ldi	r23, 0x08	; 8
    6a20:	80 91 59 08 	lds	r24, 0x0859
    6a24:	8b dd       	rcall	.-1258   	; 0x653c <twi_writeTo>
    6a26:	10 92 38 08 	sts	0x0838, r1
    6a2a:	10 92 37 08 	sts	0x0837, r1
    6a2e:	10 92 36 08 	sts	0x0836, r1
    6a32:	0f 91       	pop	r16
    6a34:	08 95       	ret

00006a36 <_ZN7TwoWire15endTransmissionEv>:
    6a36:	61 e0       	ldi	r22, 0x01	; 1
    6a38:	ec cf       	rjmp	.-40     	; 0x6a12 <_ZN7TwoWire15endTransmissionEh>
    6a3a:	08 95       	ret

00006a3c <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    6a3c:	8a e2       	ldi	r24, 0x2A	; 42
    6a3e:	98 e0       	ldi	r25, 0x08	; 8
    6a40:	b5 cf       	rjmp	.-150    	; 0x69ac <_ZN7TwoWireC1Ev>
    6a42:	08 95       	ret

00006a44 <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    6a44:	26 e0       	ldi	r18, 0x06	; 6
    6a46:	40 e8       	ldi	r20, 0x80	; 128
    6a48:	55 e2       	ldi	r21, 0x25	; 37
    6a4a:	60 e0       	ldi	r22, 0x00	; 0
    6a4c:	70 e0       	ldi	r23, 0x00	; 0
    6a4e:	82 e8       	ldi	r24, 0x82	; 130
    6a50:	98 e0       	ldi	r25, 0x08	; 8
    6a52:	b6 d1       	rcall	.+876    	; 0x6dc0 <_ZN14HardwareSerial5beginEmh>
void setup() {
	//Setup the Hardware
	Serial.begin(9600);      // open the serial port at 9600 bps:
	
	//Print out the version
	Serial.println("*************************************");
    6a54:	6b e0       	ldi	r22, 0x0B	; 11
    6a56:	75 e0       	ldi	r23, 0x05	; 5
    6a58:	82 e8       	ldi	r24, 0x82	; 130
    6a5a:	98 e0       	ldi	r25, 0x08	; 8
    6a5c:	58 d5       	rcall	.+2736   	; 0x750e <_ZN5Print7printlnEPKc>
	Serial.println("  Project Narwhal Estd. 2015         ");
    6a5e:	61 e3       	ldi	r22, 0x31	; 49
    6a60:	75 e0       	ldi	r23, 0x05	; 5
    6a62:	82 e8       	ldi	r24, 0x82	; 130
    6a64:	98 e0       	ldi	r25, 0x08	; 8
    6a66:	53 d5       	rcall	.+2726   	; 0x750e <_ZN5Print7printlnEPKc>
	Serial.println("*************************************");
    6a68:	6b e0       	ldi	r22, 0x0B	; 11
    6a6a:	75 e0       	ldi	r23, 0x05	; 5
    6a6c:	82 e8       	ldi	r24, 0x82	; 130
    6a6e:	98 e0       	ldi	r25, 0x08	; 8
    6a70:	4e d5       	rcall	.+2716   	; 0x750e <_ZN5Print7printlnEPKc>
	Serial.print("  Version: ");
    6a72:	67 e5       	ldi	r22, 0x57	; 87
    6a74:	75 e0       	ldi	r23, 0x05	; 5
    6a76:	82 e8       	ldi	r24, 0x82	; 130
    6a78:	98 e0       	ldi	r25, 0x08	; 8
    6a7a:	0f d5       	rcall	.+2590   	; 0x749a <_ZN5Print5printEPKc>
	Serial.println(VERSION);
    6a7c:	22 e0       	ldi	r18, 0x02	; 2
    6a7e:	30 e0       	ldi	r19, 0x00	; 0
    6a80:	4d ec       	ldi	r20, 0xCD	; 205
    6a82:	5c ec       	ldi	r21, 0xCC	; 204
    6a84:	6c ec       	ldi	r22, 0xCC	; 204
    6a86:	7d e3       	ldi	r23, 0x3D	; 61
    6a88:	82 e8       	ldi	r24, 0x82	; 130
    6a8a:	98 e0       	ldi	r25, 0x08	; 8
    6a8c:	23 d7       	rcall	.+3654   	; 0x78d4 <_ZN5Print7printlnEdi>
	Serial.println("");
    6a8e:	60 ee       	ldi	r22, 0xE0	; 224
    6a90:	75 e0       	ldi	r23, 0x05	; 5
    6a92:	82 e8       	ldi	r24, 0x82	; 130
    6a94:	98 e0       	ldi	r25, 0x08	; 8
    6a96:	3b d5       	rcall	.+2678   	; 0x750e <_ZN5Print7printlnEPKc>
		
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.println("-INITIALIZING-");
    6a98:	63 e6       	ldi	r22, 0x63	; 99
    6a9a:	75 e0       	ldi	r23, 0x05	; 5
    6a9c:	82 e8       	ldi	r24, 0x82	; 130
    6a9e:	98 e0       	ldi	r25, 0x08	; 8
    6aa0:	36 d5       	rcall	.+2668   	; 0x750e <_ZN5Print7printlnEPKc>
	#endif
	
	//Initialize Hardware
	hardware_init();
    6aa2:	0e 94 6e 08 	call	0x10dc	; 0x10dc <_Z13hardware_initv>

	//Display the Boot screens	
	BootScreenTime = millis();
    6aa6:	0e 94 fa 3e 	call	0x7df4	; 0x7df4 <millis>
    6aaa:	60 93 7e 08 	sts	0x087E, r22
    6aae:	70 93 7f 08 	sts	0x087F, r23
    6ab2:	80 93 80 08 	sts	0x0880, r24
    6ab6:	90 93 81 08 	sts	0x0881, r25
	
	MAIN_LCD.setCursor(3,1);
    6aba:	41 e0       	ldi	r20, 0x01	; 1
    6abc:	63 e0       	ldi	r22, 0x03	; 3
    6abe:	82 e4       	ldi	r24, 0x42	; 66
    6ac0:	96 e0       	ldi	r25, 0x06	; 6
    6ac2:	e3 da       	rcall	.-2618   	; 0x608a <_ZN3LCD9setCursorEhh>
	MAIN_LCD.print("Narwhal v");
    6ac4:	62 e7       	ldi	r22, 0x72	; 114
    6ac6:	75 e0       	ldi	r23, 0x05	; 5
    6ac8:	82 e4       	ldi	r24, 0x42	; 66
    6aca:	96 e0       	ldi	r25, 0x06	; 6
    6acc:	e6 d4       	rcall	.+2508   	; 0x749a <_ZN5Print5printEPKc>
	MAIN_LCD.print(VERSION);
    6ace:	22 e0       	ldi	r18, 0x02	; 2
    6ad0:	30 e0       	ldi	r19, 0x00	; 0
    6ad2:	4d ec       	ldi	r20, 0xCD	; 205
    6ad4:	5c ec       	ldi	r21, 0xCC	; 204
    6ad6:	6c ec       	ldi	r22, 0xCC	; 204
    6ad8:	7d e3       	ldi	r23, 0x3D	; 61
    6ada:	82 e4       	ldi	r24, 0x42	; 66
    6adc:	96 e0       	ldi	r25, 0x06	; 6
    6ade:	f8 d6       	rcall	.+3568   	; 0x78d0 <_ZN5Print5printEdi>
	MAIN_LCD.setCursor(2,2);
    6ae0:	42 e0       	ldi	r20, 0x02	; 2
    6ae2:	62 e0       	ldi	r22, 0x02	; 2
    6ae4:	82 e4       	ldi	r24, 0x42	; 66
    6ae6:	96 e0       	ldi	r25, 0x06	; 6
    6ae8:	d0 da       	rcall	.-2656   	; 0x608a <_ZN3LCD9setCursorEhh>
	MAIN_LCD.print("Established 2015");
    6aea:	6c e7       	ldi	r22, 0x7C	; 124
    6aec:	75 e0       	ldi	r23, 0x05	; 5
    6aee:	82 e4       	ldi	r24, 0x42	; 66
    6af0:	96 e0       	ldi	r25, 0x06	; 6
    6af2:	d3 d4       	rcall	.+2470   	; 0x749a <_ZN5Print5printEPKc>
		
	HLT_LCD.setCursor(2,1);
    6af4:	41 e0       	ldi	r20, 0x01	; 1
    6af6:	62 e0       	ldi	r22, 0x02	; 2
    6af8:	88 e2       	ldi	r24, 0x28	; 40
    6afa:	96 e0       	ldi	r25, 0x06	; 6
    6afc:	c6 da       	rcall	.-2676   	; 0x608a <_ZN3LCD9setCursorEhh>
	HLT_LCD.print("Hot Liquor Tank");
    6afe:	6d e8       	ldi	r22, 0x8D	; 141
    6b00:	75 e0       	ldi	r23, 0x05	; 5
    6b02:	88 e2       	ldi	r24, 0x28	; 40
    6b04:	96 e0       	ldi	r25, 0x06	; 6
    6b06:	c9 d4       	rcall	.+2450   	; 0x749a <_ZN5Print5printEPKc>
		
	MLT_LCD.setCursor(2,1);
    6b08:	41 e0       	ldi	r20, 0x01	; 1
    6b0a:	62 e0       	ldi	r22, 0x02	; 2
    6b0c:	8c e0       	ldi	r24, 0x0C	; 12
    6b0e:	96 e0       	ldi	r25, 0x06	; 6
    6b10:	bc da       	rcall	.-2696   	; 0x608a <_ZN3LCD9setCursorEhh>
	MLT_LCD.print("Mash/Lauter Tun");
    6b12:	6d e9       	ldi	r22, 0x9D	; 157
    6b14:	75 e0       	ldi	r23, 0x05	; 5
    6b16:	8c e0       	ldi	r24, 0x0C	; 12
    6b18:	96 e0       	ldi	r25, 0x06	; 6
    6b1a:	bf d4       	rcall	.+2430   	; 0x749a <_ZN5Print5printEPKc>
		
	BK_LCD.setCursor(2,1);
    6b1c:	41 e0       	ldi	r20, 0x01	; 1
    6b1e:	62 e0       	ldi	r22, 0x02	; 2
    6b20:	82 ef       	ldi	r24, 0xF2	; 242
    6b22:	95 e0       	ldi	r25, 0x05	; 5
    6b24:	b2 da       	rcall	.-2716   	; 0x608a <_ZN3LCD9setCursorEhh>
	BK_LCD.print("Boil Kettle");
    6b26:	6d ea       	ldi	r22, 0xAD	; 173
    6b28:	75 e0       	ldi	r23, 0x05	; 5
    6b2a:	82 ef       	ldi	r24, 0xF2	; 242
    6b2c:	95 e0       	ldi	r25, 0x05	; 5
    6b2e:	b5 d4       	rcall	.+2410   	; 0x749a <_ZN5Print5printEPKc>

	//Initialize the rest of the programs
	MAIN_UI_init();
    6b30:	0e 94 76 0a 	call	0x14ec	; 0x14ec <_Z12MAIN_UI_initv>
	HLT_UI_init();
    6b34:	0e 94 74 09 	call	0x12e8	; 0x12e8 <_Z11HLT_UI_initv>
	MLT_UI_init();
    6b38:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <_Z11MLT_UI_initv>
	BK_UI_init();
    6b3c:	0e 94 39 02 	call	0x472	; 0x472 <_Z10BK_UI_initv>
	delay(3000);
    6b40:	68 eb       	ldi	r22, 0xB8	; 184
    6b42:	7b e0       	ldi	r23, 0x0B	; 11
    6b44:	80 e0       	ldi	r24, 0x00	; 0
    6b46:	90 e0       	ldi	r25, 0x00	; 0
    6b48:	0c 94 2c 3f 	jmp	0x7e58	; 0x7e58 <delay>
    6b4c:	08 95       	ret

00006b4e <loop>:
}

void loop() {
    6b4e:	0f 93       	push	r16
    6b50:	1f 93       	push	r17
	
	//On first pass print out a verbose message
	if(firstpass){
    6b52:	80 91 96 02 	lds	r24, 0x0296
    6b56:	88 23       	and	r24, r24
    6b58:	29 f0       	breq	.+10     	; 0x6b64 <loop+0x16>
		#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
			Serial.println("-MAIN-PROGRAM-");
    6b5a:	69 eb       	ldi	r22, 0xB9	; 185
    6b5c:	75 e0       	ldi	r23, 0x05	; 5
    6b5e:	82 e8       	ldi	r24, 0x82	; 130
    6b60:	98 e0       	ldi	r25, 0x08	; 8
    6b62:	d5 d4       	rcall	.+2474   	; 0x750e <_ZN5Print7printlnEPKc>
		#endif
	}
	firstpass = false;
    6b64:	10 92 96 02 	sts	0x0296, r1
	
	//Make sure boot screens display for atleast 3 seconds (3000ms)
	while((millis()-BootScreenTime)<3000){
    6b68:	06 c0       	rjmp	.+12     	; 0x6b76 <loop+0x28>
		//Wait
		delay(500);
    6b6a:	64 ef       	ldi	r22, 0xF4	; 244
    6b6c:	71 e0       	ldi	r23, 0x01	; 1
    6b6e:	80 e0       	ldi	r24, 0x00	; 0
    6b70:	90 e0       	ldi	r25, 0x00	; 0
    6b72:	0e 94 2c 3f 	call	0x7e58	; 0x7e58 <delay>
		#endif
	}
	firstpass = false;
	
	//Make sure boot screens display for atleast 3 seconds (3000ms)
	while((millis()-BootScreenTime)<3000){
    6b76:	0e 94 fa 3e 	call	0x7df4	; 0x7df4 <millis>
    6b7a:	00 91 7e 08 	lds	r16, 0x087E
    6b7e:	10 91 7f 08 	lds	r17, 0x087F
    6b82:	20 91 80 08 	lds	r18, 0x0880
    6b86:	30 91 81 08 	lds	r19, 0x0881
    6b8a:	dc 01       	movw	r26, r24
    6b8c:	cb 01       	movw	r24, r22
    6b8e:	80 1b       	sub	r24, r16
    6b90:	91 0b       	sbc	r25, r17
    6b92:	a2 0b       	sbc	r26, r18
    6b94:	b3 0b       	sbc	r27, r19
    6b96:	88 3b       	cpi	r24, 0xB8	; 184
    6b98:	9b 40       	sbci	r25, 0x0B	; 11
    6b9a:	a1 05       	cpc	r26, r1
    6b9c:	b1 05       	cpc	r27, r1
    6b9e:	28 f3       	brcs	.-54     	; 0x6b6a <loop+0x1c>
		//Wait
		delay(500);
	}
	
	//Run the Executive
	Exec->run();
    6ba0:	80 91 7c 08 	lds	r24, 0x087C
    6ba4:	90 91 7d 08 	lds	r25, 0x087D
    6ba8:	0e 94 37 2b 	call	0x566e	; 0x566e <_ZN9Executive3runEv>
}
    6bac:	1f 91       	pop	r17
    6bae:	0f 91       	pop	r16
    6bb0:	08 95       	ret

00006bb2 <_GLOBAL__sub_I_BootScreenTime>:

//typedef FastDelegate2<int, char *> EvtHandler;
unsigned long BootScreenTime = 0;
bool firstpass = true;

Executive *Exec = new Executive();
    6bb2:	8e e0       	ldi	r24, 0x0E	; 14
    6bb4:	90 e0       	ldi	r25, 0x00	; 0
    6bb6:	2f d4       	rcall	.+2142   	; 0x7416 <_Znwj>
    6bb8:	2e e0       	ldi	r18, 0x0E	; 14
    6bba:	fc 01       	movw	r30, r24
    6bbc:	11 92       	st	Z+, r1
    6bbe:	2a 95       	dec	r18
    6bc0:	e9 f7       	brne	.-6      	; 0x6bbc <_GLOBAL__sub_I_BootScreenTime+0xa>
    6bc2:	90 93 7d 08 	sts	0x087D, r25
    6bc6:	80 93 7c 08 	sts	0x087C, r24
    6bca:	08 95       	ret

00006bcc <__cxa_pure_virtual>:
void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this 
  
  
  //std::terminate();
  abort();
    6bcc:	0e 94 dd 46 	call	0x8dba	; 0x8dba <abort>

00006bd0 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    6bd0:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    6bd2:	91 8d       	ldd	r25, Z+25	; 0x19
    6bd4:	22 8d       	ldd	r18, Z+26	; 0x1a
    6bd6:	89 2f       	mov	r24, r25
    6bd8:	90 e0       	ldi	r25, 0x00	; 0
    6bda:	80 5c       	subi	r24, 0xC0	; 192
    6bdc:	9f 4f       	sbci	r25, 0xFF	; 255
    6bde:	82 1b       	sub	r24, r18
    6be0:	91 09       	sbc	r25, r1
}
    6be2:	8f 73       	andi	r24, 0x3F	; 63
    6be4:	99 27       	eor	r25, r25
    6be6:	08 95       	ret

00006be8 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    6be8:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    6bea:	91 8d       	ldd	r25, Z+25	; 0x19
    6bec:	82 8d       	ldd	r24, Z+26	; 0x1a
    6bee:	98 17       	cp	r25, r24
    6bf0:	31 f0       	breq	.+12     	; 0x6bfe <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    6bf2:	82 8d       	ldd	r24, Z+26	; 0x1a
    6bf4:	e8 0f       	add	r30, r24
    6bf6:	f1 1d       	adc	r31, r1
    6bf8:	85 8d       	ldd	r24, Z+29	; 0x1d
    6bfa:	90 e0       	ldi	r25, 0x00	; 0
    6bfc:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    6bfe:	8f ef       	ldi	r24, 0xFF	; 255
    6c00:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    6c02:	08 95       	ret

00006c04 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    6c04:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    6c06:	91 8d       	ldd	r25, Z+25	; 0x19
    6c08:	82 8d       	ldd	r24, Z+26	; 0x1a
    6c0a:	98 17       	cp	r25, r24
    6c0c:	61 f0       	breq	.+24     	; 0x6c26 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    6c0e:	82 8d       	ldd	r24, Z+26	; 0x1a
    6c10:	df 01       	movw	r26, r30
    6c12:	a8 0f       	add	r26, r24
    6c14:	b1 1d       	adc	r27, r1
    6c16:	5d 96       	adiw	r26, 0x1d	; 29
    6c18:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    6c1a:	92 8d       	ldd	r25, Z+26	; 0x1a
    6c1c:	9f 5f       	subi	r25, 0xFF	; 255
    6c1e:	9f 73       	andi	r25, 0x3F	; 63
    6c20:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    6c22:	90 e0       	ldi	r25, 0x00	; 0
    6c24:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    6c26:	8f ef       	ldi	r24, 0xFF	; 255
    6c28:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    6c2a:	08 95       	ret

00006c2c <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    6c2c:	8e ea       	ldi	r24, 0xAE	; 174
    6c2e:	97 e3       	ldi	r25, 0x37	; 55
    6c30:	89 2b       	or	r24, r25
    6c32:	41 f0       	breq	.+16     	; 0x6c44 <_Z14serialEventRunv+0x18>
    6c34:	80 e0       	ldi	r24, 0x00	; 0
    6c36:	90 e0       	ldi	r25, 0x00	; 0
    6c38:	89 2b       	or	r24, r25
    6c3a:	21 f0       	breq	.+8      	; 0x6c44 <_Z14serialEventRunv+0x18>
    6c3c:	8f d1       	rcall	.+798    	; 0x6f5c <_Z17Serial0_availablev>
    6c3e:	81 11       	cpse	r24, r1
    6c40:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    6c44:	89 e4       	ldi	r24, 0x49	; 73
    6c46:	98 e3       	ldi	r25, 0x38	; 56
    6c48:	89 2b       	or	r24, r25
    6c4a:	41 f0       	breq	.+16     	; 0x6c5c <_Z14serialEventRunv+0x30>
    6c4c:	80 e0       	ldi	r24, 0x00	; 0
    6c4e:	90 e0       	ldi	r25, 0x00	; 0
    6c50:	89 2b       	or	r24, r25
    6c52:	21 f0       	breq	.+8      	; 0x6c5c <_Z14serialEventRunv+0x30>
    6c54:	1e d2       	rcall	.+1084   	; 0x7092 <_Z17Serial1_availablev>
    6c56:	81 11       	cpse	r24, r1
    6c58:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    6c5c:	84 ee       	ldi	r24, 0xE4	; 228
    6c5e:	98 e3       	ldi	r25, 0x38	; 56
    6c60:	89 2b       	or	r24, r25
    6c62:	41 f0       	breq	.+16     	; 0x6c74 <_Z14serialEventRunv+0x48>
    6c64:	80 e0       	ldi	r24, 0x00	; 0
    6c66:	90 e0       	ldi	r25, 0x00	; 0
    6c68:	89 2b       	or	r24, r25
    6c6a:	21 f0       	breq	.+8      	; 0x6c74 <_Z14serialEventRunv+0x48>
    6c6c:	ad d2       	rcall	.+1370   	; 0x71c8 <_Z17Serial2_availablev>
    6c6e:	81 11       	cpse	r24, r1
    6c70:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    6c74:	8f e7       	ldi	r24, 0x7F	; 127
    6c76:	99 e3       	ldi	r25, 0x39	; 57
    6c78:	89 2b       	or	r24, r25
    6c7a:	41 f0       	breq	.+16     	; 0x6c8c <_Z14serialEventRunv+0x60>
    6c7c:	80 e0       	ldi	r24, 0x00	; 0
    6c7e:	90 e0       	ldi	r25, 0x00	; 0
    6c80:	89 2b       	or	r24, r25
    6c82:	21 f0       	breq	.+8      	; 0x6c8c <_Z14serialEventRunv+0x60>
    6c84:	3c d3       	rcall	.+1656   	; 0x72fe <_Z17Serial3_availablev>
    6c86:	81 11       	cpse	r24, r1
    6c88:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    6c8c:	08 95       	ret

00006c8e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    6c8e:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    6c90:	84 8d       	ldd	r24, Z+28	; 0x1c
    6c92:	df 01       	movw	r26, r30
    6c94:	a8 0f       	add	r26, r24
    6c96:	b1 1d       	adc	r27, r1
    6c98:	a3 5a       	subi	r26, 0xA3	; 163
    6c9a:	bf 4f       	sbci	r27, 0xFF	; 255
    6c9c:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    6c9e:	24 8d       	ldd	r18, Z+28	; 0x1c
    6ca0:	30 e0       	ldi	r19, 0x00	; 0
    6ca2:	2f 5f       	subi	r18, 0xFF	; 255
    6ca4:	3f 4f       	sbci	r19, 0xFF	; 255
    6ca6:	2f 73       	andi	r18, 0x3F	; 63
    6ca8:	30 78       	andi	r19, 0x80	; 128
    6caa:	33 23       	and	r19, r19
    6cac:	34 f4       	brge	.+12     	; 0x6cba <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
    6cae:	21 50       	subi	r18, 0x01	; 1
    6cb0:	31 09       	sbc	r19, r1
    6cb2:	20 6c       	ori	r18, 0xC0	; 192
    6cb4:	3f 6f       	ori	r19, 0xFF	; 255
    6cb6:	2f 5f       	subi	r18, 0xFF	; 255
    6cb8:	3f 4f       	sbci	r19, 0xFF	; 255
    6cba:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
    6cbc:	a6 89       	ldd	r26, Z+22	; 0x16
    6cbe:	b7 89       	ldd	r27, Z+23	; 0x17
    6cc0:	8c 93       	st	X, r24

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    6cc2:	a0 89       	ldd	r26, Z+16	; 0x10
    6cc4:	b1 89       	ldd	r27, Z+17	; 0x11
    6cc6:	8c 91       	ld	r24, X
    6cc8:	80 64       	ori	r24, 0x40	; 64
    6cca:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    6ccc:	93 8d       	ldd	r25, Z+27	; 0x1b
    6cce:	84 8d       	ldd	r24, Z+28	; 0x1c
    6cd0:	98 13       	cpse	r25, r24
    6cd2:	06 c0       	rjmp	.+12     	; 0x6ce0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x52>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    6cd4:	02 88       	ldd	r0, Z+18	; 0x12
    6cd6:	f3 89       	ldd	r31, Z+19	; 0x13
    6cd8:	e0 2d       	mov	r30, r0
    6cda:	80 81       	ld	r24, Z
    6cdc:	8f 7d       	andi	r24, 0xDF	; 223
    6cde:	80 83       	st	Z, r24
    6ce0:	08 95       	ret

00006ce2 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    6ce2:	cf 93       	push	r28
    6ce4:	df 93       	push	r29
    6ce6:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    6ce8:	88 8d       	ldd	r24, Y+24	; 0x18
    6cea:	81 11       	cpse	r24, r1
    6cec:	0e c0       	rjmp	.+28     	; 0x6d0a <_ZN14HardwareSerial5flushEv+0x28>
    6cee:	17 c0       	rjmp	.+46     	; 0x6d1e <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    6cf0:	0f b6       	in	r0, 0x3f	; 63
    6cf2:	07 fc       	sbrc	r0, 7
    6cf4:	0c c0       	rjmp	.+24     	; 0x6d0e <_ZN14HardwareSerial5flushEv+0x2c>
    6cf6:	90 81       	ld	r25, Z
    6cf8:	95 ff       	sbrs	r25, 5
    6cfa:	09 c0       	rjmp	.+18     	; 0x6d0e <_ZN14HardwareSerial5flushEv+0x2c>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    6cfc:	a8 89       	ldd	r26, Y+16	; 0x10
    6cfe:	b9 89       	ldd	r27, Y+17	; 0x11
    6d00:	8c 91       	ld	r24, X
    6d02:	85 ff       	sbrs	r24, 5
    6d04:	04 c0       	rjmp	.+8      	; 0x6d0e <_ZN14HardwareSerial5flushEv+0x2c>
	  _tx_udr_empty_irq();
    6d06:	ce 01       	movw	r24, r28
    6d08:	c2 df       	rcall	.-124    	; 0x6c8e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    6d0a:	ea 89       	ldd	r30, Y+18	; 0x12
    6d0c:	fb 89       	ldd	r31, Y+19	; 0x13
    6d0e:	90 81       	ld	r25, Z
    6d10:	95 fd       	sbrc	r25, 5
    6d12:	ee cf       	rjmp	.-36     	; 0x6cf0 <_ZN14HardwareSerial5flushEv+0xe>
    6d14:	a8 89       	ldd	r26, Y+16	; 0x10
    6d16:	b9 89       	ldd	r27, Y+17	; 0x11
    6d18:	8c 91       	ld	r24, X
    6d1a:	86 ff       	sbrs	r24, 6
    6d1c:	e9 cf       	rjmp	.-46     	; 0x6cf0 <_ZN14HardwareSerial5flushEv+0xe>
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    6d1e:	df 91       	pop	r29
    6d20:	cf 91       	pop	r28
    6d22:	08 95       	ret

00006d24 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    6d24:	0f 93       	push	r16
    6d26:	1f 93       	push	r17
    6d28:	cf 93       	push	r28
    6d2a:	df 93       	push	r29
    6d2c:	fc 01       	movw	r30, r24
  _written = true;
    6d2e:	81 e0       	ldi	r24, 0x01	; 1
    6d30:	80 8f       	std	Z+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    6d32:	93 8d       	ldd	r25, Z+27	; 0x1b
    6d34:	84 8d       	ldd	r24, Z+28	; 0x1c
    6d36:	98 13       	cpse	r25, r24
    6d38:	21 c0       	rjmp	.+66     	; 0x6d7c <_ZN14HardwareSerial5writeEh+0x58>
    6d3a:	a0 89       	ldd	r26, Z+16	; 0x10
    6d3c:	b1 89       	ldd	r27, Z+17	; 0x11
    6d3e:	8c 91       	ld	r24, X
    6d40:	85 fd       	sbrc	r24, 5
    6d42:	2e c0       	rjmp	.+92     	; 0x6da0 <_ZN14HardwareSerial5writeEh+0x7c>
    6d44:	1b c0       	rjmp	.+54     	; 0x6d7c <_ZN14HardwareSerial5writeEh+0x58>
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    if (bit_is_clear(SREG, SREG_I)) {
    6d46:	0f b6       	in	r0, 0x3f	; 63
    6d48:	07 fc       	sbrc	r0, 7
    6d4a:	07 c0       	rjmp	.+14     	; 0x6d5a <_ZN14HardwareSerial5writeEh+0x36>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    6d4c:	e8 89       	ldd	r30, Y+16	; 0x10
    6d4e:	f9 89       	ldd	r31, Y+17	; 0x11
    6d50:	80 81       	ld	r24, Z
    6d52:	85 ff       	sbrs	r24, 5
    6d54:	02 c0       	rjmp	.+4      	; 0x6d5a <_ZN14HardwareSerial5writeEh+0x36>
	_tx_udr_empty_irq();
    6d56:	ce 01       	movw	r24, r28
    6d58:	9a df       	rcall	.-204    	; 0x6c8e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    6d5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6d5c:	09 17       	cp	r16, r25
    6d5e:	99 f3       	breq	.-26     	; 0x6d46 <_ZN14HardwareSerial5writeEh+0x22>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    6d60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6d62:	fe 01       	movw	r30, r28
    6d64:	e8 0f       	add	r30, r24
    6d66:	f1 1d       	adc	r31, r1
    6d68:	e3 5a       	subi	r30, 0xA3	; 163
    6d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    6d6c:	10 83       	st	Z, r17
  _tx_buffer_head = i;
    6d6e:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    6d70:	ea 89       	ldd	r30, Y+18	; 0x12
    6d72:	fb 89       	ldd	r31, Y+19	; 0x13
    6d74:	80 81       	ld	r24, Z
    6d76:	80 62       	ori	r24, 0x20	; 32
    6d78:	80 83       	st	Z, r24
  
  return 1;
    6d7a:	1b c0       	rjmp	.+54     	; 0x6db2 <_ZN14HardwareSerial5writeEh+0x8e>
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    6d7c:	23 8d       	ldd	r18, Z+27	; 0x1b
    6d7e:	30 e0       	ldi	r19, 0x00	; 0
    6d80:	2f 5f       	subi	r18, 0xFF	; 255
    6d82:	3f 4f       	sbci	r19, 0xFF	; 255
    6d84:	2f 73       	andi	r18, 0x3F	; 63
    6d86:	30 78       	andi	r19, 0x80	; 128
    6d88:	33 23       	and	r19, r19
    6d8a:	34 f4       	brge	.+12     	; 0x6d98 <_ZN14HardwareSerial5writeEh+0x74>
    6d8c:	21 50       	subi	r18, 0x01	; 1
    6d8e:	31 09       	sbc	r19, r1
    6d90:	20 6c       	ori	r18, 0xC0	; 192
    6d92:	3f 6f       	ori	r19, 0xFF	; 255
    6d94:	2f 5f       	subi	r18, 0xFF	; 255
    6d96:	3f 4f       	sbci	r19, 0xFF	; 255
    6d98:	16 2f       	mov	r17, r22
    6d9a:	ef 01       	movw	r28, r30
    6d9c:	02 2f       	mov	r16, r18
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    6d9e:	dd cf       	rjmp	.-70     	; 0x6d5a <_ZN14HardwareSerial5writeEh+0x36>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    6da0:	a6 89       	ldd	r26, Z+22	; 0x16
    6da2:	b7 89       	ldd	r27, Z+23	; 0x17
    6da4:	6c 93       	st	X, r22
    sbi(*_ucsra, TXC0);
    6da6:	00 88       	ldd	r0, Z+16	; 0x10
    6da8:	f1 89       	ldd	r31, Z+17	; 0x11
    6daa:	e0 2d       	mov	r30, r0
    6dac:	80 81       	ld	r24, Z
    6dae:	80 64       	ori	r24, 0x40	; 64
    6db0:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    6db2:	81 e0       	ldi	r24, 0x01	; 1
    6db4:	90 e0       	ldi	r25, 0x00	; 0
    6db6:	df 91       	pop	r29
    6db8:	cf 91       	pop	r28
    6dba:	1f 91       	pop	r17
    6dbc:	0f 91       	pop	r16
    6dbe:	08 95       	ret

00006dc0 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    6dc0:	bf 92       	push	r11
    6dc2:	cf 92       	push	r12
    6dc4:	df 92       	push	r13
    6dc6:	ef 92       	push	r14
    6dc8:	ff 92       	push	r15
    6dca:	0f 93       	push	r16
    6dcc:	1f 93       	push	r17
    6dce:	cf 93       	push	r28
    6dd0:	df 93       	push	r29
    6dd2:	ec 01       	movw	r28, r24
    6dd4:	6a 01       	movw	r12, r20
    6dd6:	7b 01       	movw	r14, r22
    6dd8:	b2 2e       	mov	r11, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    6dda:	e8 89       	ldd	r30, Y+16	; 0x10
    6ddc:	f9 89       	ldd	r31, Y+17	; 0x11
    6dde:	82 e0       	ldi	r24, 0x02	; 2
    6de0:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    6de2:	41 15       	cp	r20, r1
    6de4:	51 4e       	sbci	r21, 0xE1	; 225
    6de6:	61 05       	cpc	r22, r1
    6de8:	71 05       	cpc	r23, r1
    6dea:	b1 f0       	breq	.+44     	; 0x6e18 <_ZN14HardwareSerial5beginEmh+0x58>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    6dec:	60 e0       	ldi	r22, 0x00	; 0
    6dee:	79 e0       	ldi	r23, 0x09	; 9
    6df0:	8d e3       	ldi	r24, 0x3D	; 61
    6df2:	90 e0       	ldi	r25, 0x00	; 0
    6df4:	a7 01       	movw	r20, r14
    6df6:	96 01       	movw	r18, r12
    6df8:	0e 94 8e 44 	call	0x891c	; 0x891c <__udivmodsi4>
    6dfc:	89 01       	movw	r16, r18
    6dfe:	9a 01       	movw	r18, r20
    6e00:	01 50       	subi	r16, 0x01	; 1
    6e02:	11 09       	sbc	r17, r1
    6e04:	21 09       	sbc	r18, r1
    6e06:	31 09       	sbc	r19, r1
    6e08:	36 95       	lsr	r19
    6e0a:	27 95       	ror	r18
    6e0c:	17 95       	ror	r17
    6e0e:	07 95       	ror	r16
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    6e10:	01 15       	cp	r16, r1
    6e12:	80 e1       	ldi	r24, 0x10	; 16
    6e14:	18 07       	cpc	r17, r24
    6e16:	a8 f0       	brcs	.+42     	; 0x6e42 <_ZN14HardwareSerial5beginEmh+0x82>
  {
    *_ucsra = 0;
    6e18:	e8 89       	ldd	r30, Y+16	; 0x10
    6e1a:	f9 89       	ldd	r31, Y+17	; 0x11
    6e1c:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    6e1e:	60 e8       	ldi	r22, 0x80	; 128
    6e20:	74 e8       	ldi	r23, 0x84	; 132
    6e22:	8e e1       	ldi	r24, 0x1E	; 30
    6e24:	90 e0       	ldi	r25, 0x00	; 0
    6e26:	a7 01       	movw	r20, r14
    6e28:	96 01       	movw	r18, r12
    6e2a:	0e 94 8e 44 	call	0x891c	; 0x891c <__udivmodsi4>
    6e2e:	da 01       	movw	r26, r20
    6e30:	c9 01       	movw	r24, r18
    6e32:	01 97       	sbiw	r24, 0x01	; 1
    6e34:	a1 09       	sbc	r26, r1
    6e36:	b1 09       	sbc	r27, r1
    6e38:	b6 95       	lsr	r27
    6e3a:	a7 95       	ror	r26
    6e3c:	97 95       	ror	r25
    6e3e:	87 95       	ror	r24
    6e40:	8c 01       	movw	r16, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    6e42:	ec 85       	ldd	r30, Y+12	; 0x0c
    6e44:	fd 85       	ldd	r31, Y+13	; 0x0d
    6e46:	10 83       	st	Z, r17
  *_ubrrl = baud_setting;
    6e48:	ee 85       	ldd	r30, Y+14	; 0x0e
    6e4a:	ff 85       	ldd	r31, Y+15	; 0x0f
    6e4c:	00 83       	st	Z, r16

  _written = false;
    6e4e:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    6e50:	ec 89       	ldd	r30, Y+20	; 0x14
    6e52:	fd 89       	ldd	r31, Y+21	; 0x15
    6e54:	b0 82       	st	Z, r11
  
  sbi(*_ucsrb, RXEN0);
    6e56:	ea 89       	ldd	r30, Y+18	; 0x12
    6e58:	fb 89       	ldd	r31, Y+19	; 0x13
    6e5a:	80 81       	ld	r24, Z
    6e5c:	80 61       	ori	r24, 0x10	; 16
    6e5e:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    6e60:	ea 89       	ldd	r30, Y+18	; 0x12
    6e62:	fb 89       	ldd	r31, Y+19	; 0x13
    6e64:	80 81       	ld	r24, Z
    6e66:	88 60       	ori	r24, 0x08	; 8
    6e68:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    6e6a:	ea 89       	ldd	r30, Y+18	; 0x12
    6e6c:	fb 89       	ldd	r31, Y+19	; 0x13
    6e6e:	80 81       	ld	r24, Z
    6e70:	80 68       	ori	r24, 0x80	; 128
    6e72:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    6e74:	ea 89       	ldd	r30, Y+18	; 0x12
    6e76:	fb 89       	ldd	r31, Y+19	; 0x13
    6e78:	80 81       	ld	r24, Z
    6e7a:	8f 7d       	andi	r24, 0xDF	; 223
    6e7c:	80 83       	st	Z, r24
}
    6e7e:	df 91       	pop	r29
    6e80:	cf 91       	pop	r28
    6e82:	1f 91       	pop	r17
    6e84:	0f 91       	pop	r16
    6e86:	ff 90       	pop	r15
    6e88:	ef 90       	pop	r14
    6e8a:	df 90       	pop	r13
    6e8c:	cf 90       	pop	r12
    6e8e:	bf 90       	pop	r11
    6e90:	08 95       	ret

00006e92 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    6e92:	1f 92       	push	r1
    6e94:	0f 92       	push	r0
    6e96:	0f b6       	in	r0, 0x3f	; 63
    6e98:	0f 92       	push	r0
    6e9a:	11 24       	eor	r1, r1
    6e9c:	0b b6       	in	r0, 0x3b	; 59
    6e9e:	0f 92       	push	r0
    6ea0:	2f 93       	push	r18
    6ea2:	8f 93       	push	r24
    6ea4:	9f 93       	push	r25
    6ea6:	af 93       	push	r26
    6ea8:	bf 93       	push	r27
    6eaa:	ef 93       	push	r30
    6eac:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    6eae:	e0 91 92 08 	lds	r30, 0x0892
    6eb2:	f0 91 93 08 	lds	r31, 0x0893
    6eb6:	80 81       	ld	r24, Z
    6eb8:	82 fd       	sbrc	r24, 2
    6eba:	14 c0       	rjmp	.+40     	; 0x6ee4 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    6ebc:	e2 e8       	ldi	r30, 0x82	; 130
    6ebe:	f8 e0       	ldi	r31, 0x08	; 8
    6ec0:	a6 89       	ldd	r26, Z+22	; 0x16
    6ec2:	b7 89       	ldd	r27, Z+23	; 0x17
    6ec4:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    6ec6:	81 8d       	ldd	r24, Z+25	; 0x19
    6ec8:	8f 5f       	subi	r24, 0xFF	; 255
    6eca:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    6ecc:	92 8d       	ldd	r25, Z+26	; 0x1a
    6ece:	89 17       	cp	r24, r25
    6ed0:	71 f0       	breq	.+28     	; 0x6eee <__vector_25+0x5c>
      _rx_buffer[_rx_buffer_head] = c;
    6ed2:	df 01       	movw	r26, r30
    6ed4:	e1 8d       	ldd	r30, Z+25	; 0x19
    6ed6:	f0 e0       	ldi	r31, 0x00	; 0
    6ed8:	ee 57       	subi	r30, 0x7E	; 126
    6eda:	f7 4f       	sbci	r31, 0xF7	; 247
    6edc:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
    6ede:	59 96       	adiw	r26, 0x19	; 25
    6ee0:	8c 93       	st	X, r24
    6ee2:	05 c0       	rjmp	.+10     	; 0x6eee <__vector_25+0x5c>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    6ee4:	e0 91 98 08 	lds	r30, 0x0898
    6ee8:	f0 91 99 08 	lds	r31, 0x0899
    6eec:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    6eee:	ff 91       	pop	r31
    6ef0:	ef 91       	pop	r30
    6ef2:	bf 91       	pop	r27
    6ef4:	af 91       	pop	r26
    6ef6:	9f 91       	pop	r25
    6ef8:	8f 91       	pop	r24
    6efa:	2f 91       	pop	r18
    6efc:	0f 90       	pop	r0
    6efe:	0b be       	out	0x3b, r0	; 59
    6f00:	0f 90       	pop	r0
    6f02:	0f be       	out	0x3f, r0	; 63
    6f04:	0f 90       	pop	r0
    6f06:	1f 90       	pop	r1
    6f08:	18 95       	reti

00006f0a <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    6f0a:	1f 92       	push	r1
    6f0c:	0f 92       	push	r0
    6f0e:	0f b6       	in	r0, 0x3f	; 63
    6f10:	0f 92       	push	r0
    6f12:	11 24       	eor	r1, r1
    6f14:	0b b6       	in	r0, 0x3b	; 59
    6f16:	0f 92       	push	r0
    6f18:	2f 93       	push	r18
    6f1a:	3f 93       	push	r19
    6f1c:	4f 93       	push	r20
    6f1e:	5f 93       	push	r21
    6f20:	6f 93       	push	r22
    6f22:	7f 93       	push	r23
    6f24:	8f 93       	push	r24
    6f26:	9f 93       	push	r25
    6f28:	af 93       	push	r26
    6f2a:	bf 93       	push	r27
    6f2c:	ef 93       	push	r30
    6f2e:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    6f30:	82 e8       	ldi	r24, 0x82	; 130
    6f32:	98 e0       	ldi	r25, 0x08	; 8
    6f34:	ac de       	rcall	.-680    	; 0x6c8e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    6f36:	ff 91       	pop	r31
    6f38:	ef 91       	pop	r30
    6f3a:	bf 91       	pop	r27
    6f3c:	af 91       	pop	r26
    6f3e:	9f 91       	pop	r25
    6f40:	8f 91       	pop	r24
    6f42:	7f 91       	pop	r23
    6f44:	6f 91       	pop	r22
    6f46:	5f 91       	pop	r21
    6f48:	4f 91       	pop	r20
    6f4a:	3f 91       	pop	r19
    6f4c:	2f 91       	pop	r18
    6f4e:	0f 90       	pop	r0
    6f50:	0b be       	out	0x3b, r0	; 59
    6f52:	0f 90       	pop	r0
    6f54:	0f be       	out	0x3f, r0	; 63
    6f56:	0f 90       	pop	r0
    6f58:	1f 90       	pop	r1
    6f5a:	18 95       	reti

00006f5c <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    6f5c:	82 e8       	ldi	r24, 0x82	; 130
    6f5e:	98 e0       	ldi	r25, 0x08	; 8
    6f60:	37 de       	rcall	.-914    	; 0x6bd0 <_ZN14HardwareSerial9availableEv>
    6f62:	21 e0       	ldi	r18, 0x01	; 1
    6f64:	89 2b       	or	r24, r25
    6f66:	09 f4       	brne	.+2      	; 0x6f6a <_Z17Serial0_availablev+0xe>
    6f68:	20 e0       	ldi	r18, 0x00	; 0
}
    6f6a:	82 2f       	mov	r24, r18
    6f6c:	08 95       	ret

00006f6e <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    6f6e:	e2 e8       	ldi	r30, 0x82	; 130
    6f70:	f8 e0       	ldi	r31, 0x08	; 8
    6f72:	13 82       	std	Z+3, r1	; 0x03
    6f74:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    6f76:	88 ee       	ldi	r24, 0xE8	; 232
    6f78:	93 e0       	ldi	r25, 0x03	; 3
    6f7a:	a0 e0       	ldi	r26, 0x00	; 0
    6f7c:	b0 e0       	ldi	r27, 0x00	; 0
    6f7e:	84 83       	std	Z+4, r24	; 0x04
    6f80:	95 83       	std	Z+5, r25	; 0x05
    6f82:	a6 83       	std	Z+6, r26	; 0x06
    6f84:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    6f86:	8c ec       	ldi	r24, 0xCC	; 204
    6f88:	95 e0       	ldi	r25, 0x05	; 5
    6f8a:	91 83       	std	Z+1, r25	; 0x01
    6f8c:	80 83       	st	Z, r24
    6f8e:	85 ec       	ldi	r24, 0xC5	; 197
    6f90:	90 e0       	ldi	r25, 0x00	; 0
    6f92:	95 87       	std	Z+13, r25	; 0x0d
    6f94:	84 87       	std	Z+12, r24	; 0x0c
    6f96:	84 ec       	ldi	r24, 0xC4	; 196
    6f98:	90 e0       	ldi	r25, 0x00	; 0
    6f9a:	97 87       	std	Z+15, r25	; 0x0f
    6f9c:	86 87       	std	Z+14, r24	; 0x0e
    6f9e:	80 ec       	ldi	r24, 0xC0	; 192
    6fa0:	90 e0       	ldi	r25, 0x00	; 0
    6fa2:	91 8b       	std	Z+17, r25	; 0x11
    6fa4:	80 8b       	std	Z+16, r24	; 0x10
    6fa6:	81 ec       	ldi	r24, 0xC1	; 193
    6fa8:	90 e0       	ldi	r25, 0x00	; 0
    6faa:	93 8b       	std	Z+19, r25	; 0x13
    6fac:	82 8b       	std	Z+18, r24	; 0x12
    6fae:	82 ec       	ldi	r24, 0xC2	; 194
    6fb0:	90 e0       	ldi	r25, 0x00	; 0
    6fb2:	95 8b       	std	Z+21, r25	; 0x15
    6fb4:	84 8b       	std	Z+20, r24	; 0x14
    6fb6:	86 ec       	ldi	r24, 0xC6	; 198
    6fb8:	90 e0       	ldi	r25, 0x00	; 0
    6fba:	97 8b       	std	Z+23, r25	; 0x17
    6fbc:	86 8b       	std	Z+22, r24	; 0x16
    6fbe:	11 8e       	std	Z+25, r1	; 0x19
    6fc0:	12 8e       	std	Z+26, r1	; 0x1a
    6fc2:	13 8e       	std	Z+27, r1	; 0x1b
    6fc4:	14 8e       	std	Z+28, r1	; 0x1c
    6fc6:	08 95       	ret

00006fc8 <__vector_36>:
#elif defined(USART1_RX_vect)
ISR(USART1_RX_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    6fc8:	1f 92       	push	r1
    6fca:	0f 92       	push	r0
    6fcc:	0f b6       	in	r0, 0x3f	; 63
    6fce:	0f 92       	push	r0
    6fd0:	11 24       	eor	r1, r1
    6fd2:	0b b6       	in	r0, 0x3b	; 59
    6fd4:	0f 92       	push	r0
    6fd6:	2f 93       	push	r18
    6fd8:	8f 93       	push	r24
    6fda:	9f 93       	push	r25
    6fdc:	af 93       	push	r26
    6fde:	bf 93       	push	r27
    6fe0:	ef 93       	push	r30
    6fe2:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    6fe4:	e0 91 2f 09 	lds	r30, 0x092F
    6fe8:	f0 91 30 09 	lds	r31, 0x0930
    6fec:	80 81       	ld	r24, Z
    6fee:	82 fd       	sbrc	r24, 2
    6ff0:	14 c0       	rjmp	.+40     	; 0x701a <__vector_36+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    6ff2:	ef e1       	ldi	r30, 0x1F	; 31
    6ff4:	f9 e0       	ldi	r31, 0x09	; 9
    6ff6:	a6 89       	ldd	r26, Z+22	; 0x16
    6ff8:	b7 89       	ldd	r27, Z+23	; 0x17
    6ffa:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    6ffc:	81 8d       	ldd	r24, Z+25	; 0x19
    6ffe:	8f 5f       	subi	r24, 0xFF	; 255
    7000:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    7002:	92 8d       	ldd	r25, Z+26	; 0x1a
    7004:	89 17       	cp	r24, r25
    7006:	71 f0       	breq	.+28     	; 0x7024 <__vector_36+0x5c>
      _rx_buffer[_rx_buffer_head] = c;
    7008:	df 01       	movw	r26, r30
    700a:	e1 8d       	ldd	r30, Z+25	; 0x19
    700c:	f0 e0       	ldi	r31, 0x00	; 0
    700e:	e1 5e       	subi	r30, 0xE1	; 225
    7010:	f6 4f       	sbci	r31, 0xF6	; 246
    7012:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
    7014:	59 96       	adiw	r26, 0x19	; 25
    7016:	8c 93       	st	X, r24
    7018:	05 c0       	rjmp	.+10     	; 0x7024 <__vector_36+0x5c>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    701a:	e0 91 35 09 	lds	r30, 0x0935
    701e:	f0 91 36 09 	lds	r31, 0x0936
    7022:	80 81       	ld	r24, Z
  Serial1._rx_complete_irq();
}
    7024:	ff 91       	pop	r31
    7026:	ef 91       	pop	r30
    7028:	bf 91       	pop	r27
    702a:	af 91       	pop	r26
    702c:	9f 91       	pop	r25
    702e:	8f 91       	pop	r24
    7030:	2f 91       	pop	r18
    7032:	0f 90       	pop	r0
    7034:	0b be       	out	0x3b, r0	; 59
    7036:	0f 90       	pop	r0
    7038:	0f be       	out	0x3f, r0	; 63
    703a:	0f 90       	pop	r0
    703c:	1f 90       	pop	r1
    703e:	18 95       	reti

00007040 <__vector_37>:
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    7040:	1f 92       	push	r1
    7042:	0f 92       	push	r0
    7044:	0f b6       	in	r0, 0x3f	; 63
    7046:	0f 92       	push	r0
    7048:	11 24       	eor	r1, r1
    704a:	0b b6       	in	r0, 0x3b	; 59
    704c:	0f 92       	push	r0
    704e:	2f 93       	push	r18
    7050:	3f 93       	push	r19
    7052:	4f 93       	push	r20
    7054:	5f 93       	push	r21
    7056:	6f 93       	push	r22
    7058:	7f 93       	push	r23
    705a:	8f 93       	push	r24
    705c:	9f 93       	push	r25
    705e:	af 93       	push	r26
    7060:	bf 93       	push	r27
    7062:	ef 93       	push	r30
    7064:	ff 93       	push	r31
  Serial1._tx_udr_empty_irq();
    7066:	8f e1       	ldi	r24, 0x1F	; 31
    7068:	99 e0       	ldi	r25, 0x09	; 9
    706a:	11 de       	rcall	.-990    	; 0x6c8e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    706c:	ff 91       	pop	r31
    706e:	ef 91       	pop	r30
    7070:	bf 91       	pop	r27
    7072:	af 91       	pop	r26
    7074:	9f 91       	pop	r25
    7076:	8f 91       	pop	r24
    7078:	7f 91       	pop	r23
    707a:	6f 91       	pop	r22
    707c:	5f 91       	pop	r21
    707e:	4f 91       	pop	r20
    7080:	3f 91       	pop	r19
    7082:	2f 91       	pop	r18
    7084:	0f 90       	pop	r0
    7086:	0b be       	out	0x3b, r0	; 59
    7088:	0f 90       	pop	r0
    708a:	0f be       	out	0x3f, r0	; 63
    708c:	0f 90       	pop	r0
    708e:	1f 90       	pop	r1
    7090:	18 95       	reti

00007092 <_Z17Serial1_availablev>:
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
    7092:	8f e1       	ldi	r24, 0x1F	; 31
    7094:	99 e0       	ldi	r25, 0x09	; 9
    7096:	9c dd       	rcall	.-1224   	; 0x6bd0 <_ZN14HardwareSerial9availableEv>
    7098:	21 e0       	ldi	r18, 0x01	; 1
    709a:	89 2b       	or	r24, r25
    709c:	09 f4       	brne	.+2      	; 0x70a0 <_Z17Serial1_availablev+0xe>
    709e:	20 e0       	ldi	r18, 0x00	; 0
}
    70a0:	82 2f       	mov	r24, r18
    70a2:	08 95       	ret

000070a4 <_GLOBAL__sub_I___vector_36>:
    70a4:	ef e1       	ldi	r30, 0x1F	; 31
    70a6:	f9 e0       	ldi	r31, 0x09	; 9
    70a8:	13 82       	std	Z+3, r1	; 0x03
    70aa:	12 82       	std	Z+2, r1	; 0x02
    70ac:	88 ee       	ldi	r24, 0xE8	; 232
    70ae:	93 e0       	ldi	r25, 0x03	; 3
    70b0:	a0 e0       	ldi	r26, 0x00	; 0
    70b2:	b0 e0       	ldi	r27, 0x00	; 0
    70b4:	84 83       	std	Z+4, r24	; 0x04
    70b6:	95 83       	std	Z+5, r25	; 0x05
    70b8:	a6 83       	std	Z+6, r26	; 0x06
    70ba:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    70bc:	8c ec       	ldi	r24, 0xCC	; 204
    70be:	95 e0       	ldi	r25, 0x05	; 5
    70c0:	91 83       	std	Z+1, r25	; 0x01
    70c2:	80 83       	st	Z, r24
    70c4:	8d ec       	ldi	r24, 0xCD	; 205
    70c6:	90 e0       	ldi	r25, 0x00	; 0
    70c8:	95 87       	std	Z+13, r25	; 0x0d
    70ca:	84 87       	std	Z+12, r24	; 0x0c
    70cc:	8c ec       	ldi	r24, 0xCC	; 204
    70ce:	90 e0       	ldi	r25, 0x00	; 0
    70d0:	97 87       	std	Z+15, r25	; 0x0f
    70d2:	86 87       	std	Z+14, r24	; 0x0e
    70d4:	88 ec       	ldi	r24, 0xC8	; 200
    70d6:	90 e0       	ldi	r25, 0x00	; 0
    70d8:	91 8b       	std	Z+17, r25	; 0x11
    70da:	80 8b       	std	Z+16, r24	; 0x10
    70dc:	89 ec       	ldi	r24, 0xC9	; 201
    70de:	90 e0       	ldi	r25, 0x00	; 0
    70e0:	93 8b       	std	Z+19, r25	; 0x13
    70e2:	82 8b       	std	Z+18, r24	; 0x12
    70e4:	8a ec       	ldi	r24, 0xCA	; 202
    70e6:	90 e0       	ldi	r25, 0x00	; 0
    70e8:	95 8b       	std	Z+21, r25	; 0x15
    70ea:	84 8b       	std	Z+20, r24	; 0x14
    70ec:	8e ec       	ldi	r24, 0xCE	; 206
    70ee:	90 e0       	ldi	r25, 0x00	; 0
    70f0:	97 8b       	std	Z+23, r25	; 0x17
    70f2:	86 8b       	std	Z+22, r24	; 0x16
    70f4:	11 8e       	std	Z+25, r1	; 0x19
    70f6:	12 8e       	std	Z+26, r1	; 0x1a
    70f8:	13 8e       	std	Z+27, r1	; 0x1b
    70fa:	14 8e       	std	Z+28, r1	; 0x1c
    70fc:	08 95       	ret

000070fe <__vector_51>:
// first place.

#if defined(HAVE_HWSERIAL2)

ISR(USART2_RX_vect)
{
    70fe:	1f 92       	push	r1
    7100:	0f 92       	push	r0
    7102:	0f b6       	in	r0, 0x3f	; 63
    7104:	0f 92       	push	r0
    7106:	11 24       	eor	r1, r1
    7108:	0b b6       	in	r0, 0x3b	; 59
    710a:	0f 92       	push	r0
    710c:	2f 93       	push	r18
    710e:	8f 93       	push	r24
    7110:	9f 93       	push	r25
    7112:	af 93       	push	r26
    7114:	bf 93       	push	r27
    7116:	ef 93       	push	r30
    7118:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    711a:	e0 91 cc 09 	lds	r30, 0x09CC
    711e:	f0 91 cd 09 	lds	r31, 0x09CD
    7122:	80 81       	ld	r24, Z
    7124:	82 fd       	sbrc	r24, 2
    7126:	14 c0       	rjmp	.+40     	; 0x7150 <__vector_51+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    7128:	ec eb       	ldi	r30, 0xBC	; 188
    712a:	f9 e0       	ldi	r31, 0x09	; 9
    712c:	a6 89       	ldd	r26, Z+22	; 0x16
    712e:	b7 89       	ldd	r27, Z+23	; 0x17
    7130:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    7132:	81 8d       	ldd	r24, Z+25	; 0x19
    7134:	8f 5f       	subi	r24, 0xFF	; 255
    7136:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    7138:	92 8d       	ldd	r25, Z+26	; 0x1a
    713a:	89 17       	cp	r24, r25
    713c:	71 f0       	breq	.+28     	; 0x715a <__vector_51+0x5c>
      _rx_buffer[_rx_buffer_head] = c;
    713e:	df 01       	movw	r26, r30
    7140:	e1 8d       	ldd	r30, Z+25	; 0x19
    7142:	f0 e0       	ldi	r31, 0x00	; 0
    7144:	e4 54       	subi	r30, 0x44	; 68
    7146:	f6 4f       	sbci	r31, 0xF6	; 246
    7148:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
    714a:	59 96       	adiw	r26, 0x19	; 25
    714c:	8c 93       	st	X, r24
    714e:	05 c0       	rjmp	.+10     	; 0x715a <__vector_51+0x5c>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    7150:	e0 91 d2 09 	lds	r30, 0x09D2
    7154:	f0 91 d3 09 	lds	r31, 0x09D3
    7158:	80 81       	ld	r24, Z
  Serial2._rx_complete_irq();
}
    715a:	ff 91       	pop	r31
    715c:	ef 91       	pop	r30
    715e:	bf 91       	pop	r27
    7160:	af 91       	pop	r26
    7162:	9f 91       	pop	r25
    7164:	8f 91       	pop	r24
    7166:	2f 91       	pop	r18
    7168:	0f 90       	pop	r0
    716a:	0b be       	out	0x3b, r0	; 59
    716c:	0f 90       	pop	r0
    716e:	0f be       	out	0x3f, r0	; 63
    7170:	0f 90       	pop	r0
    7172:	1f 90       	pop	r1
    7174:	18 95       	reti

00007176 <__vector_52>:

ISR(USART2_UDRE_vect)
{
    7176:	1f 92       	push	r1
    7178:	0f 92       	push	r0
    717a:	0f b6       	in	r0, 0x3f	; 63
    717c:	0f 92       	push	r0
    717e:	11 24       	eor	r1, r1
    7180:	0b b6       	in	r0, 0x3b	; 59
    7182:	0f 92       	push	r0
    7184:	2f 93       	push	r18
    7186:	3f 93       	push	r19
    7188:	4f 93       	push	r20
    718a:	5f 93       	push	r21
    718c:	6f 93       	push	r22
    718e:	7f 93       	push	r23
    7190:	8f 93       	push	r24
    7192:	9f 93       	push	r25
    7194:	af 93       	push	r26
    7196:	bf 93       	push	r27
    7198:	ef 93       	push	r30
    719a:	ff 93       	push	r31
  Serial2._tx_udr_empty_irq();
    719c:	8c eb       	ldi	r24, 0xBC	; 188
    719e:	99 e0       	ldi	r25, 0x09	; 9
    71a0:	76 dd       	rcall	.-1300   	; 0x6c8e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    71a2:	ff 91       	pop	r31
    71a4:	ef 91       	pop	r30
    71a6:	bf 91       	pop	r27
    71a8:	af 91       	pop	r26
    71aa:	9f 91       	pop	r25
    71ac:	8f 91       	pop	r24
    71ae:	7f 91       	pop	r23
    71b0:	6f 91       	pop	r22
    71b2:	5f 91       	pop	r21
    71b4:	4f 91       	pop	r20
    71b6:	3f 91       	pop	r19
    71b8:	2f 91       	pop	r18
    71ba:	0f 90       	pop	r0
    71bc:	0b be       	out	0x3b, r0	; 59
    71be:	0f 90       	pop	r0
    71c0:	0f be       	out	0x3f, r0	; 63
    71c2:	0f 90       	pop	r0
    71c4:	1f 90       	pop	r1
    71c6:	18 95       	reti

000071c8 <_Z17Serial2_availablev>:
HardwareSerial Serial2(&UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial2_available() {
  return Serial2.available();
    71c8:	8c eb       	ldi	r24, 0xBC	; 188
    71ca:	99 e0       	ldi	r25, 0x09	; 9
    71cc:	01 dd       	rcall	.-1534   	; 0x6bd0 <_ZN14HardwareSerial9availableEv>
    71ce:	21 e0       	ldi	r18, 0x01	; 1
    71d0:	89 2b       	or	r24, r25
    71d2:	09 f4       	brne	.+2      	; 0x71d6 <_Z17Serial2_availablev+0xe>
    71d4:	20 e0       	ldi	r18, 0x00	; 0
}
    71d6:	82 2f       	mov	r24, r18
    71d8:	08 95       	ret

000071da <_GLOBAL__sub_I___vector_51>:
    71da:	ec eb       	ldi	r30, 0xBC	; 188
    71dc:	f9 e0       	ldi	r31, 0x09	; 9
    71de:	13 82       	std	Z+3, r1	; 0x03
    71e0:	12 82       	std	Z+2, r1	; 0x02
    71e2:	88 ee       	ldi	r24, 0xE8	; 232
    71e4:	93 e0       	ldi	r25, 0x03	; 3
    71e6:	a0 e0       	ldi	r26, 0x00	; 0
    71e8:	b0 e0       	ldi	r27, 0x00	; 0
    71ea:	84 83       	std	Z+4, r24	; 0x04
    71ec:	95 83       	std	Z+5, r25	; 0x05
    71ee:	a6 83       	std	Z+6, r26	; 0x06
    71f0:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    71f2:	8c ec       	ldi	r24, 0xCC	; 204
    71f4:	95 e0       	ldi	r25, 0x05	; 5
    71f6:	91 83       	std	Z+1, r25	; 0x01
    71f8:	80 83       	st	Z, r24
    71fa:	85 ed       	ldi	r24, 0xD5	; 213
    71fc:	90 e0       	ldi	r25, 0x00	; 0
    71fe:	95 87       	std	Z+13, r25	; 0x0d
    7200:	84 87       	std	Z+12, r24	; 0x0c
    7202:	84 ed       	ldi	r24, 0xD4	; 212
    7204:	90 e0       	ldi	r25, 0x00	; 0
    7206:	97 87       	std	Z+15, r25	; 0x0f
    7208:	86 87       	std	Z+14, r24	; 0x0e
    720a:	80 ed       	ldi	r24, 0xD0	; 208
    720c:	90 e0       	ldi	r25, 0x00	; 0
    720e:	91 8b       	std	Z+17, r25	; 0x11
    7210:	80 8b       	std	Z+16, r24	; 0x10
    7212:	81 ed       	ldi	r24, 0xD1	; 209
    7214:	90 e0       	ldi	r25, 0x00	; 0
    7216:	93 8b       	std	Z+19, r25	; 0x13
    7218:	82 8b       	std	Z+18, r24	; 0x12
    721a:	82 ed       	ldi	r24, 0xD2	; 210
    721c:	90 e0       	ldi	r25, 0x00	; 0
    721e:	95 8b       	std	Z+21, r25	; 0x15
    7220:	84 8b       	std	Z+20, r24	; 0x14
    7222:	86 ed       	ldi	r24, 0xD6	; 214
    7224:	90 e0       	ldi	r25, 0x00	; 0
    7226:	97 8b       	std	Z+23, r25	; 0x17
    7228:	86 8b       	std	Z+22, r24	; 0x16
    722a:	11 8e       	std	Z+25, r1	; 0x19
    722c:	12 8e       	std	Z+26, r1	; 0x1a
    722e:	13 8e       	std	Z+27, r1	; 0x1b
    7230:	14 8e       	std	Z+28, r1	; 0x1c
    7232:	08 95       	ret

00007234 <__vector_54>:
// first place.

#if defined(HAVE_HWSERIAL3)

ISR(USART3_RX_vect)
{
    7234:	1f 92       	push	r1
    7236:	0f 92       	push	r0
    7238:	0f b6       	in	r0, 0x3f	; 63
    723a:	0f 92       	push	r0
    723c:	11 24       	eor	r1, r1
    723e:	0b b6       	in	r0, 0x3b	; 59
    7240:	0f 92       	push	r0
    7242:	2f 93       	push	r18
    7244:	8f 93       	push	r24
    7246:	9f 93       	push	r25
    7248:	af 93       	push	r26
    724a:	bf 93       	push	r27
    724c:	ef 93       	push	r30
    724e:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    7250:	e0 91 69 0a 	lds	r30, 0x0A69
    7254:	f0 91 6a 0a 	lds	r31, 0x0A6A
    7258:	80 81       	ld	r24, Z
    725a:	82 fd       	sbrc	r24, 2
    725c:	14 c0       	rjmp	.+40     	; 0x7286 <__vector_54+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    725e:	e9 e5       	ldi	r30, 0x59	; 89
    7260:	fa e0       	ldi	r31, 0x0A	; 10
    7262:	a6 89       	ldd	r26, Z+22	; 0x16
    7264:	b7 89       	ldd	r27, Z+23	; 0x17
    7266:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    7268:	81 8d       	ldd	r24, Z+25	; 0x19
    726a:	8f 5f       	subi	r24, 0xFF	; 255
    726c:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    726e:	92 8d       	ldd	r25, Z+26	; 0x1a
    7270:	89 17       	cp	r24, r25
    7272:	71 f0       	breq	.+28     	; 0x7290 <__vector_54+0x5c>
      _rx_buffer[_rx_buffer_head] = c;
    7274:	df 01       	movw	r26, r30
    7276:	e1 8d       	ldd	r30, Z+25	; 0x19
    7278:	f0 e0       	ldi	r31, 0x00	; 0
    727a:	e7 5a       	subi	r30, 0xA7	; 167
    727c:	f5 4f       	sbci	r31, 0xF5	; 245
    727e:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
    7280:	59 96       	adiw	r26, 0x19	; 25
    7282:	8c 93       	st	X, r24
    7284:	05 c0       	rjmp	.+10     	; 0x7290 <__vector_54+0x5c>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    7286:	e0 91 6f 0a 	lds	r30, 0x0A6F
    728a:	f0 91 70 0a 	lds	r31, 0x0A70
    728e:	80 81       	ld	r24, Z
  Serial3._rx_complete_irq();
}
    7290:	ff 91       	pop	r31
    7292:	ef 91       	pop	r30
    7294:	bf 91       	pop	r27
    7296:	af 91       	pop	r26
    7298:	9f 91       	pop	r25
    729a:	8f 91       	pop	r24
    729c:	2f 91       	pop	r18
    729e:	0f 90       	pop	r0
    72a0:	0b be       	out	0x3b, r0	; 59
    72a2:	0f 90       	pop	r0
    72a4:	0f be       	out	0x3f, r0	; 63
    72a6:	0f 90       	pop	r0
    72a8:	1f 90       	pop	r1
    72aa:	18 95       	reti

000072ac <__vector_55>:

ISR(USART3_UDRE_vect)
{
    72ac:	1f 92       	push	r1
    72ae:	0f 92       	push	r0
    72b0:	0f b6       	in	r0, 0x3f	; 63
    72b2:	0f 92       	push	r0
    72b4:	11 24       	eor	r1, r1
    72b6:	0b b6       	in	r0, 0x3b	; 59
    72b8:	0f 92       	push	r0
    72ba:	2f 93       	push	r18
    72bc:	3f 93       	push	r19
    72be:	4f 93       	push	r20
    72c0:	5f 93       	push	r21
    72c2:	6f 93       	push	r22
    72c4:	7f 93       	push	r23
    72c6:	8f 93       	push	r24
    72c8:	9f 93       	push	r25
    72ca:	af 93       	push	r26
    72cc:	bf 93       	push	r27
    72ce:	ef 93       	push	r30
    72d0:	ff 93       	push	r31
  Serial3._tx_udr_empty_irq();
    72d2:	89 e5       	ldi	r24, 0x59	; 89
    72d4:	9a e0       	ldi	r25, 0x0A	; 10
    72d6:	db dc       	rcall	.-1610   	; 0x6c8e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    72d8:	ff 91       	pop	r31
    72da:	ef 91       	pop	r30
    72dc:	bf 91       	pop	r27
    72de:	af 91       	pop	r26
    72e0:	9f 91       	pop	r25
    72e2:	8f 91       	pop	r24
    72e4:	7f 91       	pop	r23
    72e6:	6f 91       	pop	r22
    72e8:	5f 91       	pop	r21
    72ea:	4f 91       	pop	r20
    72ec:	3f 91       	pop	r19
    72ee:	2f 91       	pop	r18
    72f0:	0f 90       	pop	r0
    72f2:	0b be       	out	0x3b, r0	; 59
    72f4:	0f 90       	pop	r0
    72f6:	0f be       	out	0x3f, r0	; 63
    72f8:	0f 90       	pop	r0
    72fa:	1f 90       	pop	r1
    72fc:	18 95       	reti

000072fe <_Z17Serial3_availablev>:
HardwareSerial Serial3(&UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial3_available() {
  return Serial3.available();
    72fe:	89 e5       	ldi	r24, 0x59	; 89
    7300:	9a e0       	ldi	r25, 0x0A	; 10
    7302:	66 dc       	rcall	.-1844   	; 0x6bd0 <_ZN14HardwareSerial9availableEv>
    7304:	21 e0       	ldi	r18, 0x01	; 1
    7306:	89 2b       	or	r24, r25
    7308:	09 f4       	brne	.+2      	; 0x730c <_Z17Serial3_availablev+0xe>
    730a:	20 e0       	ldi	r18, 0x00	; 0
}
    730c:	82 2f       	mov	r24, r18
    730e:	08 95       	ret

00007310 <_GLOBAL__sub_I___vector_54>:
    7310:	e9 e5       	ldi	r30, 0x59	; 89
    7312:	fa e0       	ldi	r31, 0x0A	; 10
    7314:	13 82       	std	Z+3, r1	; 0x03
    7316:	12 82       	std	Z+2, r1	; 0x02
    7318:	88 ee       	ldi	r24, 0xE8	; 232
    731a:	93 e0       	ldi	r25, 0x03	; 3
    731c:	a0 e0       	ldi	r26, 0x00	; 0
    731e:	b0 e0       	ldi	r27, 0x00	; 0
    7320:	84 83       	std	Z+4, r24	; 0x04
    7322:	95 83       	std	Z+5, r25	; 0x05
    7324:	a6 83       	std	Z+6, r26	; 0x06
    7326:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    7328:	8c ec       	ldi	r24, 0xCC	; 204
    732a:	95 e0       	ldi	r25, 0x05	; 5
    732c:	91 83       	std	Z+1, r25	; 0x01
    732e:	80 83       	st	Z, r24
    7330:	85 e3       	ldi	r24, 0x35	; 53
    7332:	91 e0       	ldi	r25, 0x01	; 1
    7334:	95 87       	std	Z+13, r25	; 0x0d
    7336:	84 87       	std	Z+12, r24	; 0x0c
    7338:	84 e3       	ldi	r24, 0x34	; 52
    733a:	91 e0       	ldi	r25, 0x01	; 1
    733c:	97 87       	std	Z+15, r25	; 0x0f
    733e:	86 87       	std	Z+14, r24	; 0x0e
    7340:	80 e3       	ldi	r24, 0x30	; 48
    7342:	91 e0       	ldi	r25, 0x01	; 1
    7344:	91 8b       	std	Z+17, r25	; 0x11
    7346:	80 8b       	std	Z+16, r24	; 0x10
    7348:	81 e3       	ldi	r24, 0x31	; 49
    734a:	91 e0       	ldi	r25, 0x01	; 1
    734c:	93 8b       	std	Z+19, r25	; 0x13
    734e:	82 8b       	std	Z+18, r24	; 0x12
    7350:	82 e3       	ldi	r24, 0x32	; 50
    7352:	91 e0       	ldi	r25, 0x01	; 1
    7354:	95 8b       	std	Z+21, r25	; 0x15
    7356:	84 8b       	std	Z+20, r24	; 0x14
    7358:	86 e3       	ldi	r24, 0x36	; 54
    735a:	91 e0       	ldi	r25, 0x01	; 1
    735c:	97 8b       	std	Z+23, r25	; 0x17
    735e:	86 8b       	std	Z+22, r24	; 0x16
    7360:	11 8e       	std	Z+25, r1	; 0x19
    7362:	12 8e       	std	Z+26, r1	; 0x1a
    7364:	13 8e       	std	Z+27, r1	; 0x1b
    7366:	14 8e       	std	Z+28, r1	; 0x1c
    7368:	08 95       	ret

0000736a <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    736a:	08 95       	ret

0000736c <_ZNK9IPAddress7printToER5Print>:
}

bool IPAddress::operator==(const uint8_t* addr) const
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}
    736c:	8f 92       	push	r8
    736e:	9f 92       	push	r9
    7370:	af 92       	push	r10
    7372:	bf 92       	push	r11
    7374:	cf 92       	push	r12
    7376:	df 92       	push	r13
    7378:	ef 92       	push	r14
    737a:	ff 92       	push	r15
    737c:	0f 93       	push	r16
    737e:	1f 93       	push	r17
    7380:	cf 93       	push	r28
    7382:	df 93       	push	r29
    7384:	5c 01       	movw	r10, r24
    7386:	7b 01       	movw	r14, r22
    7388:	4c 01       	movw	r8, r24
    738a:	82 e0       	ldi	r24, 0x02	; 2
    738c:	88 0e       	add	r8, r24
    738e:	91 1c       	adc	r9, r1
    7390:	65 01       	movw	r12, r10
    7392:	e5 e0       	ldi	r30, 0x05	; 5
    7394:	ce 0e       	add	r12, r30
    7396:	d1 1c       	adc	r13, r1
    7398:	00 e0       	ldi	r16, 0x00	; 0
    739a:	10 e0       	ldi	r17, 0x00	; 0
    739c:	f4 01       	movw	r30, r8
    739e:	61 91       	ld	r22, Z+
    73a0:	4f 01       	movw	r8, r30
    73a2:	4a e0       	ldi	r20, 0x0A	; 10
    73a4:	50 e0       	ldi	r21, 0x00	; 0
    73a6:	c7 01       	movw	r24, r14
    73a8:	97 d1       	rcall	.+814    	; 0x76d8 <_ZN5Print5printEhi>
    73aa:	ec 01       	movw	r28, r24
    73ac:	6e e2       	ldi	r22, 0x2E	; 46
    73ae:	c7 01       	movw	r24, r14
    73b0:	8a d0       	rcall	.+276    	; 0x74c6 <_ZN5Print5printEc>
    73b2:	8c 0f       	add	r24, r28
    73b4:	9d 1f       	adc	r25, r29
    73b6:	08 0f       	add	r16, r24
    73b8:	19 1f       	adc	r17, r25
    73ba:	8c 14       	cp	r8, r12
    73bc:	9d 04       	cpc	r9, r13
    73be:	71 f7       	brne	.-36     	; 0x739c <_ZNK9IPAddress7printToER5Print+0x30>
    73c0:	4a e0       	ldi	r20, 0x0A	; 10
    73c2:	50 e0       	ldi	r21, 0x00	; 0
    73c4:	f5 01       	movw	r30, r10
    73c6:	65 81       	ldd	r22, Z+5	; 0x05
    73c8:	c7 01       	movw	r24, r14
    73ca:	86 d1       	rcall	.+780    	; 0x76d8 <_ZN5Print5printEhi>
    73cc:	80 0f       	add	r24, r16
    73ce:	91 1f       	adc	r25, r17
    73d0:	df 91       	pop	r29
    73d2:	cf 91       	pop	r28
    73d4:	1f 91       	pop	r17
    73d6:	0f 91       	pop	r16
    73d8:	ff 90       	pop	r15
    73da:	ef 90       	pop	r14
    73dc:	df 90       	pop	r13
    73de:	cf 90       	pop	r12
    73e0:	bf 90       	pop	r11
    73e2:	af 90       	pop	r10
    73e4:	9f 90       	pop	r9
    73e6:	8f 90       	pop	r8
    73e8:	08 95       	ret

000073ea <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    73ea:	e6 ef       	ldi	r30, 0xF6	; 246
    73ec:	fa e0       	ldi	r31, 0x0A	; 10
    73ee:	8c ed       	ldi	r24, 0xDC	; 220
    73f0:	95 e0       	ldi	r25, 0x05	; 5
    73f2:	91 83       	std	Z+1, r25	; 0x01
    73f4:	80 83       	st	Z, r24
{
    _address.bytes[0] = first_octet;
    73f6:	12 82       	std	Z+2, r1	; 0x02
    _address.bytes[1] = second_octet;
    73f8:	13 82       	std	Z+3, r1	; 0x03
    _address.bytes[2] = third_octet;
    73fa:	14 82       	std	Z+4, r1	; 0x04
    _address.bytes[3] = fourth_octet;
    73fc:	15 82       	std	Z+5, r1	; 0x05
    73fe:	08 95       	ret

00007400 <initVariant>:
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    7400:	08 95       	ret

00007402 <main>:

int main(void)
{
	init();
    7402:	5e d5       	rcall	.+2748   	; 0x7ec0 <init>

	initVariant();
    7404:	fd df       	rcall	.-6      	; 0x7400 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    7406:	1e db       	rcall	.-2500   	; 0x6a44 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    7408:	c6 e1       	ldi	r28, 0x16	; 22
    740a:	d6 e3       	ldi	r29, 0x36	; 54
#endif
	
	setup();
    
	for (;;) {
		loop();
    740c:	a0 db       	rcall	.-2240   	; 0x6b4e <loop>
		if (serialEventRun) serialEventRun();
    740e:	20 97       	sbiw	r28, 0x00	; 0
    7410:	e9 f3       	breq	.-6      	; 0x740c <main+0xa>
    7412:	0c dc       	rcall	.-2024   	; 0x6c2c <_Z14serialEventRunv>
    7414:	fb cf       	rjmp	.-10     	; 0x740c <main+0xa>

00007416 <_Znwj>:
  return malloc(size);
}

void *operator new[](size_t size) {
  return malloc(size);
}
    7416:	0c 94 cc 44 	jmp	0x8998	; 0x8998 <malloc>
    741a:	08 95       	ret

0000741c <_ZdlPv>:

void operator delete(void * ptr) {
  free(ptr);
    741c:	0c 94 61 45 	jmp	0x8ac2	; 0x8ac2 <free>
    7420:	08 95       	ret

00007422 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
  return n;
}
    7422:	cf 92       	push	r12
    7424:	df 92       	push	r13
    7426:	ef 92       	push	r14
    7428:	ff 92       	push	r15
    742a:	0f 93       	push	r16
    742c:	1f 93       	push	r17
    742e:	cf 93       	push	r28
    7430:	df 93       	push	r29
    7432:	41 15       	cp	r20, r1
    7434:	51 05       	cpc	r21, r1
    7436:	b1 f0       	breq	.+44     	; 0x7464 <_ZN5Print5writeEPKhj+0x42>
    7438:	8c 01       	movw	r16, r24
    743a:	e6 2e       	mov	r14, r22
    743c:	f7 2e       	mov	r15, r23
    743e:	ea 01       	movw	r28, r20
    7440:	c1 2c       	mov	r12, r1
    7442:	d1 2c       	mov	r13, r1
    7444:	d7 01       	movw	r26, r14
    7446:	6d 91       	ld	r22, X+
    7448:	7d 01       	movw	r14, r26
    744a:	d8 01       	movw	r26, r16
    744c:	ed 91       	ld	r30, X+
    744e:	fc 91       	ld	r31, X
    7450:	01 90       	ld	r0, Z+
    7452:	f0 81       	ld	r31, Z
    7454:	e0 2d       	mov	r30, r0
    7456:	c8 01       	movw	r24, r16
    7458:	19 95       	eicall
    745a:	c8 0e       	add	r12, r24
    745c:	d9 1e       	adc	r13, r25
    745e:	21 97       	sbiw	r28, 0x01	; 1
    7460:	89 f7       	brne	.-30     	; 0x7444 <_ZN5Print5writeEPKhj+0x22>
    7462:	02 c0       	rjmp	.+4      	; 0x7468 <_ZN5Print5writeEPKhj+0x46>
    7464:	c1 2c       	mov	r12, r1
    7466:	d1 2c       	mov	r13, r1
    7468:	c6 01       	movw	r24, r12
    746a:	df 91       	pop	r29
    746c:	cf 91       	pop	r28
    746e:	1f 91       	pop	r17
    7470:	0f 91       	pop	r16
    7472:	ff 90       	pop	r15
    7474:	ef 90       	pop	r14
    7476:	df 90       	pop	r13
    7478:	cf 90       	pop	r12
    747a:	08 95       	ret

0000747c <_ZN5Print5printERK6String>:
    747c:	dc 01       	movw	r26, r24
    747e:	ed 91       	ld	r30, X+
    7480:	fc 91       	ld	r31, X
    7482:	db 01       	movw	r26, r22
    7484:	14 96       	adiw	r26, 0x04	; 4
    7486:	4d 91       	ld	r20, X+
    7488:	5c 91       	ld	r21, X
    748a:	15 97       	sbiw	r26, 0x05	; 5
    748c:	6d 91       	ld	r22, X+
    748e:	7c 91       	ld	r23, X
    7490:	02 80       	ldd	r0, Z+2	; 0x02
    7492:	f3 81       	ldd	r31, Z+3	; 0x03
    7494:	e0 2d       	mov	r30, r0
    7496:	19 95       	eicall
    7498:	08 95       	ret

0000749a <_ZN5Print5printEPKc>:
    749a:	61 15       	cp	r22, r1
    749c:	71 05       	cpc	r23, r1
    749e:	81 f0       	breq	.+32     	; 0x74c0 <_ZN5Print5printEPKc+0x26>
    74a0:	fb 01       	movw	r30, r22
    74a2:	01 90       	ld	r0, Z+
    74a4:	00 20       	and	r0, r0
    74a6:	e9 f7       	brne	.-6      	; 0x74a2 <_ZN5Print5printEPKc+0x8>
    74a8:	31 97       	sbiw	r30, 0x01	; 1
    74aa:	af 01       	movw	r20, r30
    74ac:	46 1b       	sub	r20, r22
    74ae:	57 0b       	sbc	r21, r23
    74b0:	dc 01       	movw	r26, r24
    74b2:	ed 91       	ld	r30, X+
    74b4:	fc 91       	ld	r31, X
    74b6:	02 80       	ldd	r0, Z+2	; 0x02
    74b8:	f3 81       	ldd	r31, Z+3	; 0x03
    74ba:	e0 2d       	mov	r30, r0
    74bc:	19 95       	eicall
    74be:	08 95       	ret
    74c0:	80 e0       	ldi	r24, 0x00	; 0
    74c2:	90 e0       	ldi	r25, 0x00	; 0
    74c4:	08 95       	ret

000074c6 <_ZN5Print5printEc>:
    74c6:	dc 01       	movw	r26, r24
    74c8:	ed 91       	ld	r30, X+
    74ca:	fc 91       	ld	r31, X
    74cc:	01 90       	ld	r0, Z+
    74ce:	f0 81       	ld	r31, Z
    74d0:	e0 2d       	mov	r30, r0
    74d2:	19 95       	eicall
    74d4:	08 95       	ret

000074d6 <_ZN5Print7printlnEv>:
    74d6:	dc 01       	movw	r26, r24
    74d8:	ed 91       	ld	r30, X+
    74da:	fc 91       	ld	r31, X
    74dc:	02 80       	ldd	r0, Z+2	; 0x02
    74de:	f3 81       	ldd	r31, Z+3	; 0x03
    74e0:	e0 2d       	mov	r30, r0
    74e2:	42 e0       	ldi	r20, 0x02	; 2
    74e4:	50 e0       	ldi	r21, 0x00	; 0
    74e6:	6e ed       	ldi	r22, 0xDE	; 222
    74e8:	75 e0       	ldi	r23, 0x05	; 5
    74ea:	19 95       	eicall
    74ec:	08 95       	ret

000074ee <_ZN5Print7printlnERK6String>:
    74ee:	0f 93       	push	r16
    74f0:	1f 93       	push	r17
    74f2:	cf 93       	push	r28
    74f4:	df 93       	push	r29
    74f6:	ec 01       	movw	r28, r24
    74f8:	c1 df       	rcall	.-126    	; 0x747c <_ZN5Print5printERK6String>
    74fa:	8c 01       	movw	r16, r24
    74fc:	ce 01       	movw	r24, r28
    74fe:	eb df       	rcall	.-42     	; 0x74d6 <_ZN5Print7printlnEv>
    7500:	80 0f       	add	r24, r16
    7502:	91 1f       	adc	r25, r17
    7504:	df 91       	pop	r29
    7506:	cf 91       	pop	r28
    7508:	1f 91       	pop	r17
    750a:	0f 91       	pop	r16
    750c:	08 95       	ret

0000750e <_ZN5Print7printlnEPKc>:
    750e:	0f 93       	push	r16
    7510:	1f 93       	push	r17
    7512:	cf 93       	push	r28
    7514:	df 93       	push	r29
    7516:	ec 01       	movw	r28, r24
    7518:	c0 df       	rcall	.-128    	; 0x749a <_ZN5Print5printEPKc>
    751a:	8c 01       	movw	r16, r24
    751c:	ce 01       	movw	r24, r28
    751e:	db df       	rcall	.-74     	; 0x74d6 <_ZN5Print7printlnEv>
    7520:	80 0f       	add	r24, r16
    7522:	91 1f       	adc	r25, r17
    7524:	df 91       	pop	r29
    7526:	cf 91       	pop	r28
    7528:	1f 91       	pop	r17
    752a:	0f 91       	pop	r16
    752c:	08 95       	ret

0000752e <_ZN5Print11printNumberEmh>:
    752e:	4f 92       	push	r4
    7530:	5f 92       	push	r5
    7532:	6f 92       	push	r6
    7534:	7f 92       	push	r7
    7536:	9f 92       	push	r9
    7538:	af 92       	push	r10
    753a:	bf 92       	push	r11
    753c:	cf 92       	push	r12
    753e:	df 92       	push	r13
    7540:	ef 92       	push	r14
    7542:	ff 92       	push	r15
    7544:	0f 93       	push	r16
    7546:	1f 93       	push	r17
    7548:	cf 93       	push	r28
    754a:	df 93       	push	r29
    754c:	cd b7       	in	r28, 0x3d	; 61
    754e:	de b7       	in	r29, 0x3e	; 62
    7550:	a1 97       	sbiw	r28, 0x21	; 33
    7552:	0f b6       	in	r0, 0x3f	; 63
    7554:	f8 94       	cli
    7556:	de bf       	out	0x3e, r29	; 62
    7558:	0f be       	out	0x3f, r0	; 63
    755a:	cd bf       	out	0x3d, r28	; 61
    755c:	5c 01       	movw	r10, r24
    755e:	6a 01       	movw	r12, r20
    7560:	7b 01       	movw	r14, r22
    7562:	92 2e       	mov	r9, r18
    7564:	19 a2       	std	Y+33, r1	; 0x21
    7566:	81 e0       	ldi	r24, 0x01	; 1
    7568:	82 17       	cp	r24, r18
    756a:	20 f0       	brcs	.+8      	; 0x7574 <_ZN5Print11printNumberEmh+0x46>
    756c:	0f 2e       	mov	r0, r31
    756e:	fa e0       	ldi	r31, 0x0A	; 10
    7570:	9f 2e       	mov	r9, r31
    7572:	f0 2d       	mov	r31, r0
    7574:	8e 01       	movw	r16, r28
    7576:	0f 5d       	subi	r16, 0xDF	; 223
    7578:	1f 4f       	sbci	r17, 0xFF	; 255
    757a:	49 2c       	mov	r4, r9
    757c:	51 2c       	mov	r5, r1
    757e:	61 2c       	mov	r6, r1
    7580:	71 2c       	mov	r7, r1
    7582:	c7 01       	movw	r24, r14
    7584:	b6 01       	movw	r22, r12
    7586:	a3 01       	movw	r20, r6
    7588:	92 01       	movw	r18, r4
    758a:	0e 94 8e 44 	call	0x891c	; 0x891c <__udivmodsi4>
    758e:	8c 2d       	mov	r24, r12
    7590:	92 9e       	mul	r9, r18
    7592:	80 19       	sub	r24, r0
    7594:	11 24       	eor	r1, r1
    7596:	01 50       	subi	r16, 0x01	; 1
    7598:	11 09       	sbc	r17, r1
    759a:	8a 30       	cpi	r24, 0x0A	; 10
    759c:	10 f4       	brcc	.+4      	; 0x75a2 <_ZN5Print11printNumberEmh+0x74>
    759e:	80 5d       	subi	r24, 0xD0	; 208
    75a0:	01 c0       	rjmp	.+2      	; 0x75a4 <_ZN5Print11printNumberEmh+0x76>
    75a2:	89 5c       	subi	r24, 0xC9	; 201
    75a4:	d8 01       	movw	r26, r16
    75a6:	8c 93       	st	X, r24
    75a8:	c2 2e       	mov	r12, r18
    75aa:	d3 2e       	mov	r13, r19
    75ac:	e4 2e       	mov	r14, r20
    75ae:	f5 2e       	mov	r15, r21
    75b0:	c1 14       	cp	r12, r1
    75b2:	d1 04       	cpc	r13, r1
    75b4:	e1 04       	cpc	r14, r1
    75b6:	f1 04       	cpc	r15, r1
    75b8:	21 f7       	brne	.-56     	; 0x7582 <_ZN5Print11printNumberEmh+0x54>
    75ba:	01 15       	cp	r16, r1
    75bc:	11 05       	cpc	r17, r1
    75be:	91 f0       	breq	.+36     	; 0x75e4 <_ZN5Print11printNumberEmh+0xb6>
    75c0:	f8 01       	movw	r30, r16
    75c2:	01 90       	ld	r0, Z+
    75c4:	00 20       	and	r0, r0
    75c6:	e9 f7       	brne	.-6      	; 0x75c2 <_ZN5Print11printNumberEmh+0x94>
    75c8:	31 97       	sbiw	r30, 0x01	; 1
    75ca:	af 01       	movw	r20, r30
    75cc:	40 1b       	sub	r20, r16
    75ce:	51 0b       	sbc	r21, r17
    75d0:	d5 01       	movw	r26, r10
    75d2:	ed 91       	ld	r30, X+
    75d4:	fc 91       	ld	r31, X
    75d6:	02 80       	ldd	r0, Z+2	; 0x02
    75d8:	f3 81       	ldd	r31, Z+3	; 0x03
    75da:	e0 2d       	mov	r30, r0
    75dc:	b8 01       	movw	r22, r16
    75de:	c5 01       	movw	r24, r10
    75e0:	19 95       	eicall
    75e2:	02 c0       	rjmp	.+4      	; 0x75e8 <_ZN5Print11printNumberEmh+0xba>
    75e4:	80 e0       	ldi	r24, 0x00	; 0
    75e6:	90 e0       	ldi	r25, 0x00	; 0
    75e8:	a1 96       	adiw	r28, 0x21	; 33
    75ea:	0f b6       	in	r0, 0x3f	; 63
    75ec:	f8 94       	cli
    75ee:	de bf       	out	0x3e, r29	; 62
    75f0:	0f be       	out	0x3f, r0	; 63
    75f2:	cd bf       	out	0x3d, r28	; 61
    75f4:	df 91       	pop	r29
    75f6:	cf 91       	pop	r28
    75f8:	1f 91       	pop	r17
    75fa:	0f 91       	pop	r16
    75fc:	ff 90       	pop	r15
    75fe:	ef 90       	pop	r14
    7600:	df 90       	pop	r13
    7602:	cf 90       	pop	r12
    7604:	bf 90       	pop	r11
    7606:	af 90       	pop	r10
    7608:	9f 90       	pop	r9
    760a:	7f 90       	pop	r7
    760c:	6f 90       	pop	r6
    760e:	5f 90       	pop	r5
    7610:	4f 90       	pop	r4
    7612:	08 95       	ret

00007614 <_ZN5Print5printEli>:
    7614:	cf 92       	push	r12
    7616:	df 92       	push	r13
    7618:	ef 92       	push	r14
    761a:	ff 92       	push	r15
    761c:	0f 93       	push	r16
    761e:	1f 93       	push	r17
    7620:	cf 93       	push	r28
    7622:	df 93       	push	r29
    7624:	ec 01       	movw	r28, r24
    7626:	6a 01       	movw	r12, r20
    7628:	7b 01       	movw	r14, r22
    762a:	21 15       	cp	r18, r1
    762c:	31 05       	cpc	r19, r1
    762e:	41 f4       	brne	.+16     	; 0x7640 <_ZN5Print5printEli+0x2c>
    7630:	e8 81       	ld	r30, Y
    7632:	f9 81       	ldd	r31, Y+1	; 0x01
    7634:	01 90       	ld	r0, Z+
    7636:	f0 81       	ld	r31, Z
    7638:	e0 2d       	mov	r30, r0
    763a:	64 2f       	mov	r22, r20
    763c:	19 95       	eicall
    763e:	19 c0       	rjmp	.+50     	; 0x7672 <_ZN5Print5printEli+0x5e>
    7640:	2a 30       	cpi	r18, 0x0A	; 10
    7642:	31 05       	cpc	r19, r1
    7644:	a9 f4       	brne	.+42     	; 0x7670 <_ZN5Print5printEli+0x5c>
    7646:	77 23       	and	r23, r23
    7648:	84 f4       	brge	.+32     	; 0x766a <_ZN5Print5printEli+0x56>
    764a:	6d e2       	ldi	r22, 0x2D	; 45
    764c:	3c df       	rcall	.-392    	; 0x74c6 <_ZN5Print5printEc>
    764e:	8c 01       	movw	r16, r24
    7650:	44 27       	eor	r20, r20
    7652:	55 27       	eor	r21, r21
    7654:	ba 01       	movw	r22, r20
    7656:	4c 19       	sub	r20, r12
    7658:	5d 09       	sbc	r21, r13
    765a:	6e 09       	sbc	r22, r14
    765c:	7f 09       	sbc	r23, r15
    765e:	2a e0       	ldi	r18, 0x0A	; 10
    7660:	ce 01       	movw	r24, r28
    7662:	65 df       	rcall	.-310    	; 0x752e <_ZN5Print11printNumberEmh>
    7664:	80 0f       	add	r24, r16
    7666:	91 1f       	adc	r25, r17
    7668:	04 c0       	rjmp	.+8      	; 0x7672 <_ZN5Print5printEli+0x5e>
    766a:	2a e0       	ldi	r18, 0x0A	; 10
    766c:	60 df       	rcall	.-320    	; 0x752e <_ZN5Print11printNumberEmh>
    766e:	01 c0       	rjmp	.+2      	; 0x7672 <_ZN5Print5printEli+0x5e>
    7670:	5e df       	rcall	.-324    	; 0x752e <_ZN5Print11printNumberEmh>
    7672:	df 91       	pop	r29
    7674:	cf 91       	pop	r28
    7676:	1f 91       	pop	r17
    7678:	0f 91       	pop	r16
    767a:	ff 90       	pop	r15
    767c:	ef 90       	pop	r14
    767e:	df 90       	pop	r13
    7680:	cf 90       	pop	r12
    7682:	08 95       	ret

00007684 <_ZN5Print5printEii>:
    7684:	9a 01       	movw	r18, r20
    7686:	ab 01       	movw	r20, r22
    7688:	77 0f       	add	r23, r23
    768a:	66 0b       	sbc	r22, r22
    768c:	77 0b       	sbc	r23, r23
    768e:	c2 cf       	rjmp	.-124    	; 0x7614 <_ZN5Print5printEli>
    7690:	08 95       	ret

00007692 <_ZN5Print7printlnEii>:
    7692:	0f 93       	push	r16
    7694:	1f 93       	push	r17
    7696:	cf 93       	push	r28
    7698:	df 93       	push	r29
    769a:	ec 01       	movw	r28, r24
    769c:	9a 01       	movw	r18, r20
    769e:	ab 01       	movw	r20, r22
    76a0:	77 0f       	add	r23, r23
    76a2:	66 0b       	sbc	r22, r22
    76a4:	77 0b       	sbc	r23, r23
    76a6:	b6 df       	rcall	.-148    	; 0x7614 <_ZN5Print5printEli>
    76a8:	8c 01       	movw	r16, r24
    76aa:	ce 01       	movw	r24, r28
    76ac:	14 df       	rcall	.-472    	; 0x74d6 <_ZN5Print7printlnEv>
    76ae:	80 0f       	add	r24, r16
    76b0:	91 1f       	adc	r25, r17
    76b2:	df 91       	pop	r29
    76b4:	cf 91       	pop	r28
    76b6:	1f 91       	pop	r17
    76b8:	0f 91       	pop	r16
    76ba:	08 95       	ret

000076bc <_ZN5Print5printEmi>:
    76bc:	21 15       	cp	r18, r1
    76be:	31 05       	cpc	r19, r1
    76c0:	49 f4       	brne	.+18     	; 0x76d4 <_ZN5Print5printEmi+0x18>
    76c2:	dc 01       	movw	r26, r24
    76c4:	ed 91       	ld	r30, X+
    76c6:	fc 91       	ld	r31, X
    76c8:	01 90       	ld	r0, Z+
    76ca:	f0 81       	ld	r31, Z
    76cc:	e0 2d       	mov	r30, r0
    76ce:	64 2f       	mov	r22, r20
    76d0:	19 95       	eicall
    76d2:	08 95       	ret
    76d4:	2c cf       	rjmp	.-424    	; 0x752e <_ZN5Print11printNumberEmh>
    76d6:	08 95       	ret

000076d8 <_ZN5Print5printEhi>:
    76d8:	9a 01       	movw	r18, r20
    76da:	46 2f       	mov	r20, r22
    76dc:	50 e0       	ldi	r21, 0x00	; 0
    76de:	60 e0       	ldi	r22, 0x00	; 0
    76e0:	70 e0       	ldi	r23, 0x00	; 0
    76e2:	ec cf       	rjmp	.-40     	; 0x76bc <_ZN5Print5printEmi>
    76e4:	08 95       	ret

000076e6 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    76e6:	4f 92       	push	r4
    76e8:	5f 92       	push	r5
    76ea:	7f 92       	push	r7
    76ec:	8f 92       	push	r8
    76ee:	9f 92       	push	r9
    76f0:	af 92       	push	r10
    76f2:	bf 92       	push	r11
    76f4:	cf 92       	push	r12
    76f6:	df 92       	push	r13
    76f8:	ef 92       	push	r14
    76fa:	ff 92       	push	r15
    76fc:	0f 93       	push	r16
    76fe:	1f 93       	push	r17
    7700:	cf 93       	push	r28
    7702:	df 93       	push	r29
    7704:	00 d0       	rcall	.+0      	; 0x7706 <_ZN5Print10printFloatEdh+0x20>
    7706:	1f 92       	push	r1
    7708:	cd b7       	in	r28, 0x3d	; 61
    770a:	de b7       	in	r29, 0x3e	; 62
    770c:	8c 01       	movw	r16, r24
    770e:	4a 01       	movw	r8, r20
    7710:	5b 01       	movw	r10, r22
    7712:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    7714:	9a 01       	movw	r18, r20
    7716:	ab 01       	movw	r20, r22
    7718:	c5 01       	movw	r24, r10
    771a:	b4 01       	movw	r22, r8
    771c:	0e 94 77 44 	call	0x88ee	; 0x88ee <__unordsf2>
    7720:	88 23       	and	r24, r24
    7722:	29 f0       	breq	.+10     	; 0x772e <_ZN5Print10printFloatEdh+0x48>
    7724:	61 ee       	ldi	r22, 0xE1	; 225
    7726:	75 e0       	ldi	r23, 0x05	; 5
    7728:	c8 01       	movw	r24, r16
    772a:	b7 de       	rcall	.-658    	; 0x749a <_ZN5Print5printEPKc>
    772c:	bd c0       	rjmp	.+378    	; 0x78a8 <_ZN5Print10printFloatEdh+0x1c2>
  if (isinf(number)) return print("inf");
    772e:	75 01       	movw	r14, r10
    7730:	64 01       	movw	r12, r8
    7732:	e8 94       	clt
    7734:	f7 f8       	bld	r15, 7
    7736:	2f ef       	ldi	r18, 0xFF	; 255
    7738:	3f ef       	ldi	r19, 0xFF	; 255
    773a:	4f e7       	ldi	r20, 0x7F	; 127
    773c:	5f e7       	ldi	r21, 0x7F	; 127
    773e:	c7 01       	movw	r24, r14
    7740:	b6 01       	movw	r22, r12
    7742:	0e 94 77 44 	call	0x88ee	; 0x88ee <__unordsf2>
    7746:	81 11       	cpse	r24, r1
    7748:	0e c0       	rjmp	.+28     	; 0x7766 <_ZN5Print10printFloatEdh+0x80>
    774a:	2f ef       	ldi	r18, 0xFF	; 255
    774c:	3f ef       	ldi	r19, 0xFF	; 255
    774e:	4f e7       	ldi	r20, 0x7F	; 127
    7750:	5f e7       	ldi	r21, 0x7F	; 127
    7752:	c7 01       	movw	r24, r14
    7754:	b6 01       	movw	r22, r12
    7756:	15 d7       	rcall	.+3626   	; 0x8582 <__cmpsf2>
    7758:	18 16       	cp	r1, r24
    775a:	2c f4       	brge	.+10     	; 0x7766 <_ZN5Print10printFloatEdh+0x80>
    775c:	65 ee       	ldi	r22, 0xE5	; 229
    775e:	75 e0       	ldi	r23, 0x05	; 5
    7760:	c8 01       	movw	r24, r16
    7762:	9b de       	rcall	.-714    	; 0x749a <_ZN5Print5printEPKc>
    7764:	a1 c0       	rjmp	.+322    	; 0x78a8 <_ZN5Print10printFloatEdh+0x1c2>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    7766:	2f ef       	ldi	r18, 0xFF	; 255
    7768:	3f ef       	ldi	r19, 0xFF	; 255
    776a:	4f e7       	ldi	r20, 0x7F	; 127
    776c:	5f e4       	ldi	r21, 0x4F	; 79
    776e:	c5 01       	movw	r24, r10
    7770:	b4 01       	movw	r22, r8
    7772:	0e 94 10 44 	call	0x8820	; 0x8820 <__gesf2>
    7776:	18 16       	cp	r1, r24
    7778:	2c f4       	brge	.+10     	; 0x7784 <_ZN5Print10printFloatEdh+0x9e>
    777a:	69 ee       	ldi	r22, 0xE9	; 233
    777c:	75 e0       	ldi	r23, 0x05	; 5
    777e:	c8 01       	movw	r24, r16
    7780:	8c de       	rcall	.-744    	; 0x749a <_ZN5Print5printEPKc>
    7782:	92 c0       	rjmp	.+292    	; 0x78a8 <_ZN5Print10printFloatEdh+0x1c2>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    7784:	2f ef       	ldi	r18, 0xFF	; 255
    7786:	3f ef       	ldi	r19, 0xFF	; 255
    7788:	4f e7       	ldi	r20, 0x7F	; 127
    778a:	5f ec       	ldi	r21, 0xCF	; 207
    778c:	c5 01       	movw	r24, r10
    778e:	b4 01       	movw	r22, r8
    7790:	f8 d6       	rcall	.+3568   	; 0x8582 <__cmpsf2>
    7792:	88 23       	and	r24, r24
    7794:	2c f4       	brge	.+10     	; 0x77a0 <_ZN5Print10printFloatEdh+0xba>
    7796:	69 ee       	ldi	r22, 0xE9	; 233
    7798:	75 e0       	ldi	r23, 0x05	; 5
    779a:	c8 01       	movw	r24, r16
    779c:	7e de       	rcall	.-772    	; 0x749a <_ZN5Print5printEPKc>
    779e:	84 c0       	rjmp	.+264    	; 0x78a8 <_ZN5Print10printFloatEdh+0x1c2>
  
  // Handle negative numbers
  if (number < 0.0)
    77a0:	20 e0       	ldi	r18, 0x00	; 0
    77a2:	30 e0       	ldi	r19, 0x00	; 0
    77a4:	a9 01       	movw	r20, r18
    77a6:	c5 01       	movw	r24, r10
    77a8:	b4 01       	movw	r22, r8
    77aa:	eb d6       	rcall	.+3542   	; 0x8582 <__cmpsf2>
    77ac:	88 23       	and	r24, r24
    77ae:	4c f4       	brge	.+18     	; 0x77c2 <_ZN5Print10printFloatEdh+0xdc>
  {
     n += print('-');
    77b0:	6d e2       	ldi	r22, 0x2D	; 45
    77b2:	c8 01       	movw	r24, r16
    77b4:	88 de       	rcall	.-752    	; 0x74c6 <_ZN5Print5printEc>
    77b6:	7c 01       	movw	r14, r24
     number = -number;
    77b8:	b7 fa       	bst	r11, 7
    77ba:	b0 94       	com	r11
    77bc:	b7 f8       	bld	r11, 7
    77be:	b0 94       	com	r11
    77c0:	02 c0       	rjmp	.+4      	; 0x77c6 <_ZN5Print10printFloatEdh+0xe0>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    77c2:	e1 2c       	mov	r14, r1
    77c4:	f1 2c       	mov	r15, r1
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    77c6:	77 20       	and	r7, r7
    77c8:	09 f4       	brne	.+2      	; 0x77cc <_ZN5Print10printFloatEdh+0xe6>
    77ca:	5c c0       	rjmp	.+184    	; 0x7884 <_ZN5Print10printFloatEdh+0x19e>
    77cc:	d1 2c       	mov	r13, r1
    77ce:	60 e0       	ldi	r22, 0x00	; 0
    77d0:	70 e0       	ldi	r23, 0x00	; 0
    77d2:	80 e0       	ldi	r24, 0x00	; 0
    77d4:	9f e3       	ldi	r25, 0x3F	; 63
    rounding /= 10.0;
    77d6:	20 e0       	ldi	r18, 0x00	; 0
    77d8:	30 e0       	ldi	r19, 0x00	; 0
    77da:	40 e2       	ldi	r20, 0x20	; 32
    77dc:	51 e4       	ldi	r21, 0x41	; 65
    77de:	d5 d6       	rcall	.+3498   	; 0x858a <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    77e0:	d3 94       	inc	r13
    77e2:	d7 10       	cpse	r13, r7
    77e4:	f8 cf       	rjmp	.-16     	; 0x77d6 <_ZN5Print10printFloatEdh+0xf0>
    77e6:	27 c0       	rjmp	.+78     	; 0x7836 <_ZN5Print10printFloatEdh+0x150>
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    77e8:	20 e0       	ldi	r18, 0x00	; 0
    77ea:	30 e0       	ldi	r19, 0x00	; 0
    77ec:	40 e2       	ldi	r20, 0x20	; 32
    77ee:	51 e4       	ldi	r21, 0x41	; 65
    77f0:	c5 01       	movw	r24, r10
    77f2:	b4 01       	movw	r22, r8
    77f4:	0e 94 14 44 	call	0x8828	; 0x8828 <__mulsf3>
    77f8:	4b 01       	movw	r8, r22
    77fa:	5c 01       	movw	r10, r24
    int toPrint = int(remainder);
    77fc:	2e d7       	rcall	.+3676   	; 0x865a <__fixsfsi>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    77fe:	6b 01       	movw	r12, r22
    7800:	77 0f       	add	r23, r23
    7802:	ee 08       	sbc	r14, r14
    7804:	ff 08       	sbc	r15, r15
    7806:	2a e0       	ldi	r18, 0x0A	; 10
    7808:	30 e0       	ldi	r19, 0x00	; 0
    780a:	b7 01       	movw	r22, r14
    780c:	a6 01       	movw	r20, r12
    780e:	c8 01       	movw	r24, r16
    7810:	01 df       	rcall	.-510    	; 0x7614 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    7812:	48 0e       	add	r4, r24
    7814:	59 1e       	adc	r5, r25
    remainder -= toPrint; 
    7816:	c7 01       	movw	r24, r14
    7818:	b6 01       	movw	r22, r12
    781a:	52 d7       	rcall	.+3748   	; 0x86c0 <__floatsisf>
    781c:	9b 01       	movw	r18, r22
    781e:	ac 01       	movw	r20, r24
    7820:	c5 01       	movw	r24, r10
    7822:	b4 01       	movw	r22, r8
    7824:	49 d6       	rcall	.+3218   	; 0x84b8 <__subsf3>
    7826:	4b 01       	movw	r8, r22
    7828:	5c 01       	movw	r10, r24
    782a:	7a 94       	dec	r7
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    782c:	71 10       	cpse	r7, r1
    782e:	dc cf       	rjmp	.-72     	; 0x77e8 <_ZN5Print10printFloatEdh+0x102>
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
    7830:	84 2d       	mov	r24, r4
    7832:	95 2d       	mov	r25, r5
    7834:	39 c0       	rjmp	.+114    	; 0x78a8 <_ZN5Print10printFloatEdh+0x1c2>
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
  
  number += rounding;
    7836:	9b 01       	movw	r18, r22
    7838:	ac 01       	movw	r20, r24
    783a:	c5 01       	movw	r24, r10
    783c:	b4 01       	movw	r22, r8
    783e:	3d d6       	rcall	.+3194   	; 0x84ba <__addsf3>
    7840:	4b 01       	movw	r8, r22
    7842:	5c 01       	movw	r10, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    7844:	0f d7       	rcall	.+3614   	; 0x8664 <__fixunssfsi>
    7846:	69 83       	std	Y+1, r22	; 0x01
    7848:	7a 83       	std	Y+2, r23	; 0x02
    784a:	8b 83       	std	Y+3, r24	; 0x03
    784c:	9c 83       	std	Y+4, r25	; 0x04
  double remainder = number - (double)int_part;
    784e:	36 d7       	rcall	.+3692   	; 0x86bc <__floatunsisf>
    7850:	9b 01       	movw	r18, r22
    7852:	ac 01       	movw	r20, r24
    7854:	c5 01       	movw	r24, r10
    7856:	b4 01       	movw	r22, r8
    7858:	2f d6       	rcall	.+3166   	; 0x84b8 <__subsf3>
    785a:	4b 01       	movw	r8, r22
    785c:	5c 01       	movw	r10, r24
  n += print(int_part);
    785e:	2a e0       	ldi	r18, 0x0A	; 10
    7860:	30 e0       	ldi	r19, 0x00	; 0
    7862:	49 81       	ldd	r20, Y+1	; 0x01
    7864:	5a 81       	ldd	r21, Y+2	; 0x02
    7866:	6b 81       	ldd	r22, Y+3	; 0x03
    7868:	7c 81       	ldd	r23, Y+4	; 0x04
    786a:	c8 01       	movw	r24, r16
    786c:	27 df       	rcall	.-434    	; 0x76bc <_ZN5Print5printEmi>
    786e:	6c 01       	movw	r12, r24

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    7870:	6a e6       	ldi	r22, 0x6A	; 106
    7872:	74 e0       	ldi	r23, 0x04	; 4
    7874:	c8 01       	movw	r24, r16
    7876:	11 de       	rcall	.-990    	; 0x749a <_ZN5Print5printEPKc>
    7878:	8c 0d       	add	r24, r12
    787a:	9d 1d       	adc	r25, r13
    787c:	2c 01       	movw	r4, r24
    787e:	4e 0c       	add	r4, r14
    7880:	5f 1c       	adc	r5, r15
    7882:	b2 cf       	rjmp	.-156    	; 0x77e8 <_ZN5Print10printFloatEdh+0x102>
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
  
  number += rounding;
    7884:	20 e0       	ldi	r18, 0x00	; 0
    7886:	30 e0       	ldi	r19, 0x00	; 0
    7888:	40 e0       	ldi	r20, 0x00	; 0
    788a:	5f e3       	ldi	r21, 0x3F	; 63
    788c:	c5 01       	movw	r24, r10
    788e:	b4 01       	movw	r22, r8
    7890:	14 d6       	rcall	.+3112   	; 0x84ba <__addsf3>

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    7892:	e8 d6       	rcall	.+3536   	; 0x8664 <__fixunssfsi>
    7894:	ab 01       	movw	r20, r22
    7896:	bc 01       	movw	r22, r24
  double remainder = number - (double)int_part;
  n += print(int_part);
    7898:	2a e0       	ldi	r18, 0x0A	; 10
    789a:	30 e0       	ldi	r19, 0x00	; 0
    789c:	c8 01       	movw	r24, r16
    789e:	0e df       	rcall	.-484    	; 0x76bc <_ZN5Print5printEmi>
    78a0:	2c 01       	movw	r4, r24
    78a2:	4e 0c       	add	r4, r14
    78a4:	5f 1c       	adc	r5, r15
    78a6:	c4 cf       	rjmp	.-120    	; 0x7830 <_ZN5Print10printFloatEdh+0x14a>
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    78a8:	0f 90       	pop	r0
    78aa:	0f 90       	pop	r0
    78ac:	0f 90       	pop	r0
    78ae:	0f 90       	pop	r0
    78b0:	df 91       	pop	r29
    78b2:	cf 91       	pop	r28
    78b4:	1f 91       	pop	r17
    78b6:	0f 91       	pop	r16
    78b8:	ff 90       	pop	r15
    78ba:	ef 90       	pop	r14
    78bc:	df 90       	pop	r13
    78be:	cf 90       	pop	r12
    78c0:	bf 90       	pop	r11
    78c2:	af 90       	pop	r10
    78c4:	9f 90       	pop	r9
    78c6:	8f 90       	pop	r8
    78c8:	7f 90       	pop	r7
    78ca:	5f 90       	pop	r5
    78cc:	4f 90       	pop	r4
    78ce:	08 95       	ret

000078d0 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    78d0:	0a cf       	rjmp	.-492    	; 0x76e6 <_ZN5Print10printFloatEdh>
}
    78d2:	08 95       	ret

000078d4 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    78d4:	0f 93       	push	r16
    78d6:	1f 93       	push	r17
    78d8:	cf 93       	push	r28
    78da:	df 93       	push	r29
    78dc:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    78de:	03 df       	rcall	.-506    	; 0x76e6 <_ZN5Print10printFloatEdh>
    78e0:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    78e2:	ce 01       	movw	r24, r28
    78e4:	f8 dd       	rcall	.-1040   	; 0x74d6 <_ZN5Print7printlnEv>
  return n;
}
    78e6:	80 0f       	add	r24, r16
    78e8:	91 1f       	adc	r25, r17
    78ea:	df 91       	pop	r29
    78ec:	cf 91       	pop	r28
    78ee:	1f 91       	pop	r17
    78f0:	0f 91       	pop	r16
    78f2:	08 95       	ret

000078f4 <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
    78f4:	82 30       	cpi	r24, 0x02	; 2
    78f6:	a9 f0       	breq	.+42     	; 0x7922 <_Z12disableTimerh+0x2e>
    78f8:	28 f4       	brcc	.+10     	; 0x7904 <_Z12disableTimerh+0x10>
    78fa:	88 23       	and	r24, r24
    78fc:	49 f0       	breq	.+18     	; 0x7910 <_Z12disableTimerh+0x1c>
    78fe:	81 30       	cpi	r24, 0x01	; 1
    7900:	51 f0       	breq	.+20     	; 0x7916 <_Z12disableTimerh+0x22>
    7902:	08 95       	ret
    7904:	84 30       	cpi	r24, 0x04	; 4
    7906:	21 f1       	breq	.+72     	; 0x7950 <_Z12disableTimerh+0x5c>
    7908:	e8 f0       	brcs	.+58     	; 0x7944 <_Z12disableTimerh+0x50>
    790a:	85 30       	cpi	r24, 0x05	; 5
    790c:	39 f1       	breq	.+78     	; 0x795c <_Z12disableTimerh+0x68>
    790e:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
    7910:	10 92 6e 00 	sts	0x006E, r1
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
    7914:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
    7916:	ef e6       	ldi	r30, 0x6F	; 111
    7918:	f0 e0       	ldi	r31, 0x00	; 0
    791a:	80 81       	ld	r24, Z
    791c:	8d 7f       	andi	r24, 0xFD	; 253
    791e:	80 83       	st	Z, r24
      break;
    7920:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
    7922:	e0 e7       	ldi	r30, 0x70	; 112
    7924:	f0 e0       	ldi	r31, 0x00	; 0
    7926:	80 81       	ld	r24, Z
    7928:	8d 7f       	andi	r24, 0xFD	; 253
    792a:	80 83       	st	Z, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
    792c:	81 e0       	ldi	r24, 0x01	; 1
    792e:	80 93 b0 00 	sts	0x00B0, r24
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
    7932:	e1 eb       	ldi	r30, 0xB1	; 177
    7934:	f0 e0       	ldi	r31, 0x00	; 0
    7936:	80 81       	ld	r24, Z
    7938:	88 7f       	andi	r24, 0xF8	; 248
    793a:	84 60       	ori	r24, 0x04	; 4
    793c:	80 83       	st	Z, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
    793e:	10 92 b3 00 	sts	0x00B3, r1
      #endif
      break;
    7942:	08 95       	ret

#if defined(TIMSK3) && defined(OCIE3A)
    case 3:
      bitWrite(TIMSK3, OCIE3A, 0);
    7944:	e1 e7       	ldi	r30, 0x71	; 113
    7946:	f0 e0       	ldi	r31, 0x00	; 0
    7948:	80 81       	ld	r24, Z
    794a:	8d 7f       	andi	r24, 0xFD	; 253
    794c:	80 83       	st	Z, r24
      break;
    794e:	08 95       	ret
#endif

#if defined(TIMSK4) && defined(OCIE4A)
    case 4:
      bitWrite(TIMSK4, OCIE4A, 0);
    7950:	e2 e7       	ldi	r30, 0x72	; 114
    7952:	f0 e0       	ldi	r31, 0x00	; 0
    7954:	80 81       	ld	r24, Z
    7956:	8d 7f       	andi	r24, 0xFD	; 253
    7958:	80 83       	st	Z, r24
      break;
    795a:	08 95       	ret
#endif

#if defined(TIMSK5) && defined(OCIE5A)
    case 5:
      bitWrite(TIMSK5, OCIE5A, 0);
    795c:	e3 e7       	ldi	r30, 0x73	; 115
    795e:	f0 e0       	ldi	r31, 0x00	; 0
    7960:	80 81       	ld	r24, Z
    7962:	8d 7f       	andi	r24, 0xFD	; 253
    7964:	80 83       	st	Z, r24
    7966:	08 95       	ret

00007968 <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
    7968:	cf 93       	push	r28
    796a:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    796c:	80 91 97 02 	lds	r24, 0x0297
    7970:	8c 13       	cpse	r24, r28
    7972:	08 c0       	rjmp	.+16     	; 0x7984 <_Z6noToneh+0x1c>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    7974:	e2 ed       	ldi	r30, 0xD2	; 210
    7976:	f2 e0       	ldi	r31, 0x02	; 2
    7978:	e4 91       	lpm	r30, Z
    797a:	8e 2f       	mov	r24, r30
      tone_pins[i] = 255;
    797c:	9f ef       	ldi	r25, 0xFF	; 255
    797e:	90 93 97 02 	sts	0x0297, r25
    7982:	01 c0       	rjmp	.+2      	; 0x7986 <_Z6noToneh+0x1e>
    7984:	8f ef       	ldi	r24, 0xFF	; 255
    }
  }
  
  disableTimer(_timer);
    7986:	b6 df       	rcall	.-148    	; 0x78f4 <_Z12disableTimerh>

  digitalWrite(_pin, 0);
    7988:	60 e0       	ldi	r22, 0x00	; 0
    798a:	8c 2f       	mov	r24, r28
    798c:	c6 d3       	rcall	.+1932   	; 0x811a <digitalWrite>
}
    798e:	cf 91       	pop	r28
    7990:	08 95       	ret

00007992 <__vector_13>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
    7992:	1f 92       	push	r1
    7994:	0f 92       	push	r0
    7996:	0f b6       	in	r0, 0x3f	; 63
    7998:	0f 92       	push	r0
    799a:	11 24       	eor	r1, r1
    799c:	0b b6       	in	r0, 0x3b	; 59
    799e:	0f 92       	push	r0
    79a0:	2f 93       	push	r18
    79a2:	3f 93       	push	r19
    79a4:	4f 93       	push	r20
    79a6:	5f 93       	push	r21
    79a8:	6f 93       	push	r22
    79aa:	7f 93       	push	r23
    79ac:	8f 93       	push	r24
    79ae:	9f 93       	push	r25
    79b0:	af 93       	push	r26
    79b2:	bf 93       	push	r27
    79b4:	ef 93       	push	r30
    79b6:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
    79b8:	80 91 ff 0a 	lds	r24, 0x0AFF
    79bc:	90 91 00 0b 	lds	r25, 0x0B00
    79c0:	a0 91 01 0b 	lds	r26, 0x0B01
    79c4:	b0 91 02 0b 	lds	r27, 0x0B02
    79c8:	89 2b       	or	r24, r25
    79ca:	8a 2b       	or	r24, r26
    79cc:	8b 2b       	or	r24, r27
    79ce:	51 f1       	breq	.+84     	; 0x7a24 <__vector_13+0x92>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
    79d0:	80 91 fc 0a 	lds	r24, 0x0AFC
    79d4:	e0 91 fd 0a 	lds	r30, 0x0AFD
    79d8:	f0 91 fe 0a 	lds	r31, 0x0AFE
    79dc:	90 81       	ld	r25, Z
    79de:	89 27       	eor	r24, r25
    79e0:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
    79e2:	80 91 ff 0a 	lds	r24, 0x0AFF
    79e6:	90 91 00 0b 	lds	r25, 0x0B00
    79ea:	a0 91 01 0b 	lds	r26, 0x0B01
    79ee:	b0 91 02 0b 	lds	r27, 0x0B02
    79f2:	18 16       	cp	r1, r24
    79f4:	19 06       	cpc	r1, r25
    79f6:	1a 06       	cpc	r1, r26
    79f8:	1b 06       	cpc	r1, r27
    79fa:	bc f4       	brge	.+46     	; 0x7a2a <__vector_13+0x98>
      timer2_toggle_count--;
    79fc:	80 91 ff 0a 	lds	r24, 0x0AFF
    7a00:	90 91 00 0b 	lds	r25, 0x0B00
    7a04:	a0 91 01 0b 	lds	r26, 0x0B01
    7a08:	b0 91 02 0b 	lds	r27, 0x0B02
    7a0c:	01 97       	sbiw	r24, 0x01	; 1
    7a0e:	a1 09       	sbc	r26, r1
    7a10:	b1 09       	sbc	r27, r1
    7a12:	80 93 ff 0a 	sts	0x0AFF, r24
    7a16:	90 93 00 0b 	sts	0x0B00, r25
    7a1a:	a0 93 01 0b 	sts	0x0B01, r26
    7a1e:	b0 93 02 0b 	sts	0x0B02, r27
    7a22:	03 c0       	rjmp	.+6      	; 0x7a2a <__vector_13+0x98>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
    7a24:	80 91 97 02 	lds	r24, 0x0297
    7a28:	9f df       	rcall	.-194    	; 0x7968 <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    7a2a:	ff 91       	pop	r31
    7a2c:	ef 91       	pop	r30
    7a2e:	bf 91       	pop	r27
    7a30:	af 91       	pop	r26
    7a32:	9f 91       	pop	r25
    7a34:	8f 91       	pop	r24
    7a36:	7f 91       	pop	r23
    7a38:	6f 91       	pop	r22
    7a3a:	5f 91       	pop	r21
    7a3c:	4f 91       	pop	r20
    7a3e:	3f 91       	pop	r19
    7a40:	2f 91       	pop	r18
    7a42:	0f 90       	pop	r0
    7a44:	0b be       	out	0x3b, r0	; 59
    7a46:	0f 90       	pop	r0
    7a48:	0f be       	out	0x3f, r0	; 63
    7a4a:	0f 90       	pop	r0
    7a4c:	1f 90       	pop	r1
    7a4e:	18 95       	reti

00007a50 <__vector_1>:
		intFunc[EXTERNAL_INT_4]();
}

#elif defined(EICRA) && defined(EICRB)

ISR(INT0_vect) {
    7a50:	1f 92       	push	r1
    7a52:	0f 92       	push	r0
    7a54:	0f b6       	in	r0, 0x3f	; 63
    7a56:	0f 92       	push	r0
    7a58:	11 24       	eor	r1, r1
    7a5a:	0b b6       	in	r0, 0x3b	; 59
    7a5c:	0f 92       	push	r0
    7a5e:	2f 93       	push	r18
    7a60:	3f 93       	push	r19
    7a62:	4f 93       	push	r20
    7a64:	5f 93       	push	r21
    7a66:	6f 93       	push	r22
    7a68:	7f 93       	push	r23
    7a6a:	8f 93       	push	r24
    7a6c:	9f 93       	push	r25
    7a6e:	af 93       	push	r26
    7a70:	bf 93       	push	r27
    7a72:	ef 93       	push	r30
    7a74:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_2])
    7a76:	80 91 07 0b 	lds	r24, 0x0B07
    7a7a:	90 91 08 0b 	lds	r25, 0x0B08
    7a7e:	89 2b       	or	r24, r25
    7a80:	29 f0       	breq	.+10     	; 0x7a8c <__vector_1+0x3c>
    intFunc[EXTERNAL_INT_2]();
    7a82:	e0 91 07 0b 	lds	r30, 0x0B07
    7a86:	f0 91 08 0b 	lds	r31, 0x0B08
    7a8a:	19 95       	eicall
}
    7a8c:	ff 91       	pop	r31
    7a8e:	ef 91       	pop	r30
    7a90:	bf 91       	pop	r27
    7a92:	af 91       	pop	r26
    7a94:	9f 91       	pop	r25
    7a96:	8f 91       	pop	r24
    7a98:	7f 91       	pop	r23
    7a9a:	6f 91       	pop	r22
    7a9c:	5f 91       	pop	r21
    7a9e:	4f 91       	pop	r20
    7aa0:	3f 91       	pop	r19
    7aa2:	2f 91       	pop	r18
    7aa4:	0f 90       	pop	r0
    7aa6:	0b be       	out	0x3b, r0	; 59
    7aa8:	0f 90       	pop	r0
    7aaa:	0f be       	out	0x3f, r0	; 63
    7aac:	0f 90       	pop	r0
    7aae:	1f 90       	pop	r1
    7ab0:	18 95       	reti

00007ab2 <__vector_2>:

ISR(INT1_vect) {
    7ab2:	1f 92       	push	r1
    7ab4:	0f 92       	push	r0
    7ab6:	0f b6       	in	r0, 0x3f	; 63
    7ab8:	0f 92       	push	r0
    7aba:	11 24       	eor	r1, r1
    7abc:	0b b6       	in	r0, 0x3b	; 59
    7abe:	0f 92       	push	r0
    7ac0:	2f 93       	push	r18
    7ac2:	3f 93       	push	r19
    7ac4:	4f 93       	push	r20
    7ac6:	5f 93       	push	r21
    7ac8:	6f 93       	push	r22
    7aca:	7f 93       	push	r23
    7acc:	8f 93       	push	r24
    7ace:	9f 93       	push	r25
    7ad0:	af 93       	push	r26
    7ad2:	bf 93       	push	r27
    7ad4:	ef 93       	push	r30
    7ad6:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_3])
    7ad8:	80 91 09 0b 	lds	r24, 0x0B09
    7adc:	90 91 0a 0b 	lds	r25, 0x0B0A
    7ae0:	89 2b       	or	r24, r25
    7ae2:	29 f0       	breq	.+10     	; 0x7aee <__vector_2+0x3c>
    intFunc[EXTERNAL_INT_3]();
    7ae4:	e0 91 09 0b 	lds	r30, 0x0B09
    7ae8:	f0 91 0a 0b 	lds	r31, 0x0B0A
    7aec:	19 95       	eicall
}
    7aee:	ff 91       	pop	r31
    7af0:	ef 91       	pop	r30
    7af2:	bf 91       	pop	r27
    7af4:	af 91       	pop	r26
    7af6:	9f 91       	pop	r25
    7af8:	8f 91       	pop	r24
    7afa:	7f 91       	pop	r23
    7afc:	6f 91       	pop	r22
    7afe:	5f 91       	pop	r21
    7b00:	4f 91       	pop	r20
    7b02:	3f 91       	pop	r19
    7b04:	2f 91       	pop	r18
    7b06:	0f 90       	pop	r0
    7b08:	0b be       	out	0x3b, r0	; 59
    7b0a:	0f 90       	pop	r0
    7b0c:	0f be       	out	0x3f, r0	; 63
    7b0e:	0f 90       	pop	r0
    7b10:	1f 90       	pop	r1
    7b12:	18 95       	reti

00007b14 <__vector_3>:

ISR(INT2_vect) {
    7b14:	1f 92       	push	r1
    7b16:	0f 92       	push	r0
    7b18:	0f b6       	in	r0, 0x3f	; 63
    7b1a:	0f 92       	push	r0
    7b1c:	11 24       	eor	r1, r1
    7b1e:	0b b6       	in	r0, 0x3b	; 59
    7b20:	0f 92       	push	r0
    7b22:	2f 93       	push	r18
    7b24:	3f 93       	push	r19
    7b26:	4f 93       	push	r20
    7b28:	5f 93       	push	r21
    7b2a:	6f 93       	push	r22
    7b2c:	7f 93       	push	r23
    7b2e:	8f 93       	push	r24
    7b30:	9f 93       	push	r25
    7b32:	af 93       	push	r26
    7b34:	bf 93       	push	r27
    7b36:	ef 93       	push	r30
    7b38:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_4])
    7b3a:	80 91 0b 0b 	lds	r24, 0x0B0B
    7b3e:	90 91 0c 0b 	lds	r25, 0x0B0C
    7b42:	89 2b       	or	r24, r25
    7b44:	29 f0       	breq	.+10     	; 0x7b50 <__vector_3+0x3c>
    intFunc[EXTERNAL_INT_4]();
    7b46:	e0 91 0b 0b 	lds	r30, 0x0B0B
    7b4a:	f0 91 0c 0b 	lds	r31, 0x0B0C
    7b4e:	19 95       	eicall
}
    7b50:	ff 91       	pop	r31
    7b52:	ef 91       	pop	r30
    7b54:	bf 91       	pop	r27
    7b56:	af 91       	pop	r26
    7b58:	9f 91       	pop	r25
    7b5a:	8f 91       	pop	r24
    7b5c:	7f 91       	pop	r23
    7b5e:	6f 91       	pop	r22
    7b60:	5f 91       	pop	r21
    7b62:	4f 91       	pop	r20
    7b64:	3f 91       	pop	r19
    7b66:	2f 91       	pop	r18
    7b68:	0f 90       	pop	r0
    7b6a:	0b be       	out	0x3b, r0	; 59
    7b6c:	0f 90       	pop	r0
    7b6e:	0f be       	out	0x3f, r0	; 63
    7b70:	0f 90       	pop	r0
    7b72:	1f 90       	pop	r1
    7b74:	18 95       	reti

00007b76 <__vector_4>:

ISR(INT3_vect) {
    7b76:	1f 92       	push	r1
    7b78:	0f 92       	push	r0
    7b7a:	0f b6       	in	r0, 0x3f	; 63
    7b7c:	0f 92       	push	r0
    7b7e:	11 24       	eor	r1, r1
    7b80:	0b b6       	in	r0, 0x3b	; 59
    7b82:	0f 92       	push	r0
    7b84:	2f 93       	push	r18
    7b86:	3f 93       	push	r19
    7b88:	4f 93       	push	r20
    7b8a:	5f 93       	push	r21
    7b8c:	6f 93       	push	r22
    7b8e:	7f 93       	push	r23
    7b90:	8f 93       	push	r24
    7b92:	9f 93       	push	r25
    7b94:	af 93       	push	r26
    7b96:	bf 93       	push	r27
    7b98:	ef 93       	push	r30
    7b9a:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_5])
    7b9c:	80 91 0d 0b 	lds	r24, 0x0B0D
    7ba0:	90 91 0e 0b 	lds	r25, 0x0B0E
    7ba4:	89 2b       	or	r24, r25
    7ba6:	29 f0       	breq	.+10     	; 0x7bb2 <__vector_4+0x3c>
    intFunc[EXTERNAL_INT_5]();
    7ba8:	e0 91 0d 0b 	lds	r30, 0x0B0D
    7bac:	f0 91 0e 0b 	lds	r31, 0x0B0E
    7bb0:	19 95       	eicall
}
    7bb2:	ff 91       	pop	r31
    7bb4:	ef 91       	pop	r30
    7bb6:	bf 91       	pop	r27
    7bb8:	af 91       	pop	r26
    7bba:	9f 91       	pop	r25
    7bbc:	8f 91       	pop	r24
    7bbe:	7f 91       	pop	r23
    7bc0:	6f 91       	pop	r22
    7bc2:	5f 91       	pop	r21
    7bc4:	4f 91       	pop	r20
    7bc6:	3f 91       	pop	r19
    7bc8:	2f 91       	pop	r18
    7bca:	0f 90       	pop	r0
    7bcc:	0b be       	out	0x3b, r0	; 59
    7bce:	0f 90       	pop	r0
    7bd0:	0f be       	out	0x3f, r0	; 63
    7bd2:	0f 90       	pop	r0
    7bd4:	1f 90       	pop	r1
    7bd6:	18 95       	reti

00007bd8 <__vector_5>:

ISR(INT4_vect) {
    7bd8:	1f 92       	push	r1
    7bda:	0f 92       	push	r0
    7bdc:	0f b6       	in	r0, 0x3f	; 63
    7bde:	0f 92       	push	r0
    7be0:	11 24       	eor	r1, r1
    7be2:	0b b6       	in	r0, 0x3b	; 59
    7be4:	0f 92       	push	r0
    7be6:	2f 93       	push	r18
    7be8:	3f 93       	push	r19
    7bea:	4f 93       	push	r20
    7bec:	5f 93       	push	r21
    7bee:	6f 93       	push	r22
    7bf0:	7f 93       	push	r23
    7bf2:	8f 93       	push	r24
    7bf4:	9f 93       	push	r25
    7bf6:	af 93       	push	r26
    7bf8:	bf 93       	push	r27
    7bfa:	ef 93       	push	r30
    7bfc:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
    7bfe:	80 91 03 0b 	lds	r24, 0x0B03
    7c02:	90 91 04 0b 	lds	r25, 0x0B04
    7c06:	89 2b       	or	r24, r25
    7c08:	29 f0       	breq	.+10     	; 0x7c14 <__vector_5+0x3c>
    intFunc[EXTERNAL_INT_0]();
    7c0a:	e0 91 03 0b 	lds	r30, 0x0B03
    7c0e:	f0 91 04 0b 	lds	r31, 0x0B04
    7c12:	19 95       	eicall
}
    7c14:	ff 91       	pop	r31
    7c16:	ef 91       	pop	r30
    7c18:	bf 91       	pop	r27
    7c1a:	af 91       	pop	r26
    7c1c:	9f 91       	pop	r25
    7c1e:	8f 91       	pop	r24
    7c20:	7f 91       	pop	r23
    7c22:	6f 91       	pop	r22
    7c24:	5f 91       	pop	r21
    7c26:	4f 91       	pop	r20
    7c28:	3f 91       	pop	r19
    7c2a:	2f 91       	pop	r18
    7c2c:	0f 90       	pop	r0
    7c2e:	0b be       	out	0x3b, r0	; 59
    7c30:	0f 90       	pop	r0
    7c32:	0f be       	out	0x3f, r0	; 63
    7c34:	0f 90       	pop	r0
    7c36:	1f 90       	pop	r1
    7c38:	18 95       	reti

00007c3a <__vector_6>:

ISR(INT5_vect) {
    7c3a:	1f 92       	push	r1
    7c3c:	0f 92       	push	r0
    7c3e:	0f b6       	in	r0, 0x3f	; 63
    7c40:	0f 92       	push	r0
    7c42:	11 24       	eor	r1, r1
    7c44:	0b b6       	in	r0, 0x3b	; 59
    7c46:	0f 92       	push	r0
    7c48:	2f 93       	push	r18
    7c4a:	3f 93       	push	r19
    7c4c:	4f 93       	push	r20
    7c4e:	5f 93       	push	r21
    7c50:	6f 93       	push	r22
    7c52:	7f 93       	push	r23
    7c54:	8f 93       	push	r24
    7c56:	9f 93       	push	r25
    7c58:	af 93       	push	r26
    7c5a:	bf 93       	push	r27
    7c5c:	ef 93       	push	r30
    7c5e:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
    7c60:	80 91 05 0b 	lds	r24, 0x0B05
    7c64:	90 91 06 0b 	lds	r25, 0x0B06
    7c68:	89 2b       	or	r24, r25
    7c6a:	29 f0       	breq	.+10     	; 0x7c76 <__vector_6+0x3c>
    intFunc[EXTERNAL_INT_1]();
    7c6c:	e0 91 05 0b 	lds	r30, 0x0B05
    7c70:	f0 91 06 0b 	lds	r31, 0x0B06
    7c74:	19 95       	eicall
}
    7c76:	ff 91       	pop	r31
    7c78:	ef 91       	pop	r30
    7c7a:	bf 91       	pop	r27
    7c7c:	af 91       	pop	r26
    7c7e:	9f 91       	pop	r25
    7c80:	8f 91       	pop	r24
    7c82:	7f 91       	pop	r23
    7c84:	6f 91       	pop	r22
    7c86:	5f 91       	pop	r21
    7c88:	4f 91       	pop	r20
    7c8a:	3f 91       	pop	r19
    7c8c:	2f 91       	pop	r18
    7c8e:	0f 90       	pop	r0
    7c90:	0b be       	out	0x3b, r0	; 59
    7c92:	0f 90       	pop	r0
    7c94:	0f be       	out	0x3f, r0	; 63
    7c96:	0f 90       	pop	r0
    7c98:	1f 90       	pop	r1
    7c9a:	18 95       	reti

00007c9c <__vector_7>:

ISR(INT6_vect) {
    7c9c:	1f 92       	push	r1
    7c9e:	0f 92       	push	r0
    7ca0:	0f b6       	in	r0, 0x3f	; 63
    7ca2:	0f 92       	push	r0
    7ca4:	11 24       	eor	r1, r1
    7ca6:	0b b6       	in	r0, 0x3b	; 59
    7ca8:	0f 92       	push	r0
    7caa:	2f 93       	push	r18
    7cac:	3f 93       	push	r19
    7cae:	4f 93       	push	r20
    7cb0:	5f 93       	push	r21
    7cb2:	6f 93       	push	r22
    7cb4:	7f 93       	push	r23
    7cb6:	8f 93       	push	r24
    7cb8:	9f 93       	push	r25
    7cba:	af 93       	push	r26
    7cbc:	bf 93       	push	r27
    7cbe:	ef 93       	push	r30
    7cc0:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_6])
    7cc2:	80 91 0f 0b 	lds	r24, 0x0B0F
    7cc6:	90 91 10 0b 	lds	r25, 0x0B10
    7cca:	89 2b       	or	r24, r25
    7ccc:	29 f0       	breq	.+10     	; 0x7cd8 <__vector_7+0x3c>
    intFunc[EXTERNAL_INT_6]();
    7cce:	e0 91 0f 0b 	lds	r30, 0x0B0F
    7cd2:	f0 91 10 0b 	lds	r31, 0x0B10
    7cd6:	19 95       	eicall
}
    7cd8:	ff 91       	pop	r31
    7cda:	ef 91       	pop	r30
    7cdc:	bf 91       	pop	r27
    7cde:	af 91       	pop	r26
    7ce0:	9f 91       	pop	r25
    7ce2:	8f 91       	pop	r24
    7ce4:	7f 91       	pop	r23
    7ce6:	6f 91       	pop	r22
    7ce8:	5f 91       	pop	r21
    7cea:	4f 91       	pop	r20
    7cec:	3f 91       	pop	r19
    7cee:	2f 91       	pop	r18
    7cf0:	0f 90       	pop	r0
    7cf2:	0b be       	out	0x3b, r0	; 59
    7cf4:	0f 90       	pop	r0
    7cf6:	0f be       	out	0x3f, r0	; 63
    7cf8:	0f 90       	pop	r0
    7cfa:	1f 90       	pop	r1
    7cfc:	18 95       	reti

00007cfe <__vector_8>:

ISR(INT7_vect) {
    7cfe:	1f 92       	push	r1
    7d00:	0f 92       	push	r0
    7d02:	0f b6       	in	r0, 0x3f	; 63
    7d04:	0f 92       	push	r0
    7d06:	11 24       	eor	r1, r1
    7d08:	0b b6       	in	r0, 0x3b	; 59
    7d0a:	0f 92       	push	r0
    7d0c:	2f 93       	push	r18
    7d0e:	3f 93       	push	r19
    7d10:	4f 93       	push	r20
    7d12:	5f 93       	push	r21
    7d14:	6f 93       	push	r22
    7d16:	7f 93       	push	r23
    7d18:	8f 93       	push	r24
    7d1a:	9f 93       	push	r25
    7d1c:	af 93       	push	r26
    7d1e:	bf 93       	push	r27
    7d20:	ef 93       	push	r30
    7d22:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_7])
    7d24:	80 91 11 0b 	lds	r24, 0x0B11
    7d28:	90 91 12 0b 	lds	r25, 0x0B12
    7d2c:	89 2b       	or	r24, r25
    7d2e:	29 f0       	breq	.+10     	; 0x7d3a <__vector_8+0x3c>
    intFunc[EXTERNAL_INT_7]();
    7d30:	e0 91 11 0b 	lds	r30, 0x0B11
    7d34:	f0 91 12 0b 	lds	r31, 0x0B12
    7d38:	19 95       	eicall
}
    7d3a:	ff 91       	pop	r31
    7d3c:	ef 91       	pop	r30
    7d3e:	bf 91       	pop	r27
    7d40:	af 91       	pop	r26
    7d42:	9f 91       	pop	r25
    7d44:	8f 91       	pop	r24
    7d46:	7f 91       	pop	r23
    7d48:	6f 91       	pop	r22
    7d4a:	5f 91       	pop	r21
    7d4c:	4f 91       	pop	r20
    7d4e:	3f 91       	pop	r19
    7d50:	2f 91       	pop	r18
    7d52:	0f 90       	pop	r0
    7d54:	0b be       	out	0x3b, r0	; 59
    7d56:	0f 90       	pop	r0
    7d58:	0f be       	out	0x3f, r0	; 63
    7d5a:	0f 90       	pop	r0
    7d5c:	1f 90       	pop	r1
    7d5e:	18 95       	reti

00007d60 <__vector_23>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    7d60:	1f 92       	push	r1
    7d62:	0f 92       	push	r0
    7d64:	0f b6       	in	r0, 0x3f	; 63
    7d66:	0f 92       	push	r0
    7d68:	11 24       	eor	r1, r1
    7d6a:	2f 93       	push	r18
    7d6c:	3f 93       	push	r19
    7d6e:	8f 93       	push	r24
    7d70:	9f 93       	push	r25
    7d72:	af 93       	push	r26
    7d74:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    7d76:	80 91 14 0b 	lds	r24, 0x0B14
    7d7a:	90 91 15 0b 	lds	r25, 0x0B15
    7d7e:	a0 91 16 0b 	lds	r26, 0x0B16
    7d82:	b0 91 17 0b 	lds	r27, 0x0B17
	unsigned char f = timer0_fract;
    7d86:	30 91 13 0b 	lds	r19, 0x0B13

	m += MILLIS_INC;
	f += FRACT_INC;
    7d8a:	23 e0       	ldi	r18, 0x03	; 3
    7d8c:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    7d8e:	2d 37       	cpi	r18, 0x7D	; 125
    7d90:	20 f4       	brcc	.+8      	; 0x7d9a <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    7d92:	01 96       	adiw	r24, 0x01	; 1
    7d94:	a1 1d       	adc	r26, r1
    7d96:	b1 1d       	adc	r27, r1
    7d98:	05 c0       	rjmp	.+10     	; 0x7da4 <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    7d9a:	26 e8       	ldi	r18, 0x86	; 134
    7d9c:	23 0f       	add	r18, r19
		m += 1;
    7d9e:	02 96       	adiw	r24, 0x02	; 2
    7da0:	a1 1d       	adc	r26, r1
    7da2:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    7da4:	20 93 13 0b 	sts	0x0B13, r18
	timer0_millis = m;
    7da8:	80 93 14 0b 	sts	0x0B14, r24
    7dac:	90 93 15 0b 	sts	0x0B15, r25
    7db0:	a0 93 16 0b 	sts	0x0B16, r26
    7db4:	b0 93 17 0b 	sts	0x0B17, r27
	timer0_overflow_count++;
    7db8:	80 91 18 0b 	lds	r24, 0x0B18
    7dbc:	90 91 19 0b 	lds	r25, 0x0B19
    7dc0:	a0 91 1a 0b 	lds	r26, 0x0B1A
    7dc4:	b0 91 1b 0b 	lds	r27, 0x0B1B
    7dc8:	01 96       	adiw	r24, 0x01	; 1
    7dca:	a1 1d       	adc	r26, r1
    7dcc:	b1 1d       	adc	r27, r1
    7dce:	80 93 18 0b 	sts	0x0B18, r24
    7dd2:	90 93 19 0b 	sts	0x0B19, r25
    7dd6:	a0 93 1a 0b 	sts	0x0B1A, r26
    7dda:	b0 93 1b 0b 	sts	0x0B1B, r27
}
    7dde:	bf 91       	pop	r27
    7de0:	af 91       	pop	r26
    7de2:	9f 91       	pop	r25
    7de4:	8f 91       	pop	r24
    7de6:	3f 91       	pop	r19
    7de8:	2f 91       	pop	r18
    7dea:	0f 90       	pop	r0
    7dec:	0f be       	out	0x3f, r0	; 63
    7dee:	0f 90       	pop	r0
    7df0:	1f 90       	pop	r1
    7df2:	18 95       	reti

00007df4 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    7df4:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    7df6:	f8 94       	cli
	m = timer0_millis;
    7df8:	60 91 14 0b 	lds	r22, 0x0B14
    7dfc:	70 91 15 0b 	lds	r23, 0x0B15
    7e00:	80 91 16 0b 	lds	r24, 0x0B16
    7e04:	90 91 17 0b 	lds	r25, 0x0B17
	SREG = oldSREG;
    7e08:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    7e0a:	08 95       	ret

00007e0c <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    7e0c:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    7e0e:	f8 94       	cli
	m = timer0_overflow_count;
    7e10:	80 91 18 0b 	lds	r24, 0x0B18
    7e14:	90 91 19 0b 	lds	r25, 0x0B19
    7e18:	a0 91 1a 0b 	lds	r26, 0x0B1A
    7e1c:	b0 91 1b 0b 	lds	r27, 0x0B1B
#if defined(TCNT0)
	t = TCNT0;
    7e20:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    7e22:	a8 9b       	sbis	0x15, 0	; 21
    7e24:	05 c0       	rjmp	.+10     	; 0x7e30 <micros+0x24>
    7e26:	2f 3f       	cpi	r18, 0xFF	; 255
    7e28:	19 f0       	breq	.+6      	; 0x7e30 <micros+0x24>
		m++;
    7e2a:	01 96       	adiw	r24, 0x01	; 1
    7e2c:	a1 1d       	adc	r26, r1
    7e2e:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    7e30:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    7e32:	ba 2f       	mov	r27, r26
    7e34:	a9 2f       	mov	r26, r25
    7e36:	98 2f       	mov	r25, r24
    7e38:	88 27       	eor	r24, r24
    7e3a:	82 0f       	add	r24, r18
    7e3c:	91 1d       	adc	r25, r1
    7e3e:	a1 1d       	adc	r26, r1
    7e40:	b1 1d       	adc	r27, r1
    7e42:	bc 01       	movw	r22, r24
    7e44:	cd 01       	movw	r24, r26
    7e46:	66 0f       	add	r22, r22
    7e48:	77 1f       	adc	r23, r23
    7e4a:	88 1f       	adc	r24, r24
    7e4c:	99 1f       	adc	r25, r25
    7e4e:	66 0f       	add	r22, r22
    7e50:	77 1f       	adc	r23, r23
    7e52:	88 1f       	adc	r24, r24
    7e54:	99 1f       	adc	r25, r25
}
    7e56:	08 95       	ret

00007e58 <delay>:

void delay(unsigned long ms)
{
    7e58:	cf 92       	push	r12
    7e5a:	df 92       	push	r13
    7e5c:	ef 92       	push	r14
    7e5e:	ff 92       	push	r15
    7e60:	cf 93       	push	r28
    7e62:	df 93       	push	r29
    7e64:	6b 01       	movw	r12, r22
    7e66:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
    7e68:	d1 df       	rcall	.-94     	; 0x7e0c <micros>
    7e6a:	eb 01       	movw	r28, r22

	while (ms > 0) {
    7e6c:	c1 14       	cp	r12, r1
    7e6e:	d1 04       	cpc	r13, r1
    7e70:	e1 04       	cpc	r14, r1
    7e72:	f1 04       	cpc	r15, r1
    7e74:	99 f0       	breq	.+38     	; 0x7e9c <delay+0x44>
		yield();
    7e76:	79 da       	rcall	.-2830   	; 0x736a <yield>
		if (((uint16_t)micros() - start) >= 1000) {
    7e78:	c9 df       	rcall	.-110    	; 0x7e0c <micros>
    7e7a:	6c 1b       	sub	r22, r28
    7e7c:	7d 0b       	sbc	r23, r29
    7e7e:	68 3e       	cpi	r22, 0xE8	; 232
    7e80:	73 40       	sbci	r23, 0x03	; 3
    7e82:	38 f0       	brcs	.+14     	; 0x7e92 <delay+0x3a>
			ms--;
    7e84:	81 e0       	ldi	r24, 0x01	; 1
    7e86:	c8 1a       	sub	r12, r24
    7e88:	d1 08       	sbc	r13, r1
    7e8a:	e1 08       	sbc	r14, r1
    7e8c:	f1 08       	sbc	r15, r1
			start += 1000;
    7e8e:	c8 51       	subi	r28, 0x18	; 24
    7e90:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    7e92:	c1 14       	cp	r12, r1
    7e94:	d1 04       	cpc	r13, r1
    7e96:	e1 04       	cpc	r14, r1
    7e98:	f1 04       	cpc	r15, r1
    7e9a:	69 f7       	brne	.-38     	; 0x7e76 <delay+0x1e>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    7e9c:	df 91       	pop	r29
    7e9e:	cf 91       	pop	r28
    7ea0:	ff 90       	pop	r15
    7ea2:	ef 90       	pop	r14
    7ea4:	df 90       	pop	r13
    7ea6:	cf 90       	pop	r12
    7ea8:	08 95       	ret

00007eaa <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    7eaa:	82 30       	cpi	r24, 0x02	; 2
    7eac:	91 05       	cpc	r25, r1
    7eae:	38 f0       	brcs	.+14     	; 0x7ebe <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    7eb0:	88 0f       	add	r24, r24
    7eb2:	99 1f       	adc	r25, r25
    7eb4:	88 0f       	add	r24, r24
    7eb6:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    7eb8:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    7eba:	01 97       	sbiw	r24, 0x01	; 1
    7ebc:	f1 f7       	brne	.-4      	; 0x7eba <delayMicroseconds+0x10>
    7ebe:	08 95       	ret

00007ec0 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    7ec0:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    7ec2:	84 b5       	in	r24, 0x24	; 36
    7ec4:	82 60       	ori	r24, 0x02	; 2
    7ec6:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    7ec8:	84 b5       	in	r24, 0x24	; 36
    7eca:	81 60       	ori	r24, 0x01	; 1
    7ecc:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    7ece:	85 b5       	in	r24, 0x25	; 37
    7ed0:	82 60       	ori	r24, 0x02	; 2
    7ed2:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    7ed4:	85 b5       	in	r24, 0x25	; 37
    7ed6:	81 60       	ori	r24, 0x01	; 1
    7ed8:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    7eda:	ee e6       	ldi	r30, 0x6E	; 110
    7edc:	f0 e0       	ldi	r31, 0x00	; 0
    7ede:	80 81       	ld	r24, Z
    7ee0:	81 60       	ori	r24, 0x01	; 1
    7ee2:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    7ee4:	e1 e8       	ldi	r30, 0x81	; 129
    7ee6:	f0 e0       	ldi	r31, 0x00	; 0
    7ee8:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    7eea:	80 81       	ld	r24, Z
    7eec:	82 60       	ori	r24, 0x02	; 2
    7eee:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    7ef0:	80 81       	ld	r24, Z
    7ef2:	81 60       	ori	r24, 0x01	; 1
    7ef4:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    7ef6:	e0 e8       	ldi	r30, 0x80	; 128
    7ef8:	f0 e0       	ldi	r31, 0x00	; 0
    7efa:	80 81       	ld	r24, Z
    7efc:	81 60       	ori	r24, 0x01	; 1
    7efe:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    7f00:	e1 eb       	ldi	r30, 0xB1	; 177
    7f02:	f0 e0       	ldi	r31, 0x00	; 0
    7f04:	80 81       	ld	r24, Z
    7f06:	84 60       	ori	r24, 0x04	; 4
    7f08:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    7f0a:	e0 eb       	ldi	r30, 0xB0	; 176
    7f0c:	f0 e0       	ldi	r31, 0x00	; 0
    7f0e:	80 81       	ld	r24, Z
    7f10:	81 60       	ori	r24, 0x01	; 1
    7f12:	80 83       	st	Z, r24
#else
	#warning Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    7f14:	e1 e9       	ldi	r30, 0x91	; 145
    7f16:	f0 e0       	ldi	r31, 0x00	; 0
    7f18:	80 81       	ld	r24, Z
    7f1a:	82 60       	ori	r24, 0x02	; 2
    7f1c:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    7f1e:	80 81       	ld	r24, Z
    7f20:	81 60       	ori	r24, 0x01	; 1
    7f22:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    7f24:	e0 e9       	ldi	r30, 0x90	; 144
    7f26:	f0 e0       	ldi	r31, 0x00	; 0
    7f28:	80 81       	ld	r24, Z
    7f2a:	81 60       	ori	r24, 0x01	; 1
    7f2c:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    7f2e:	e1 ea       	ldi	r30, 0xA1	; 161
    7f30:	f0 e0       	ldi	r31, 0x00	; 0
    7f32:	80 81       	ld	r24, Z
    7f34:	82 60       	ori	r24, 0x02	; 2
    7f36:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    7f38:	80 81       	ld	r24, Z
    7f3a:	81 60       	ori	r24, 0x01	; 1
    7f3c:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    7f3e:	e0 ea       	ldi	r30, 0xA0	; 160
    7f40:	f0 e0       	ldi	r31, 0x00	; 0
    7f42:	80 81       	ld	r24, Z
    7f44:	81 60       	ori	r24, 0x01	; 1
    7f46:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    7f48:	e1 e2       	ldi	r30, 0x21	; 33
    7f4a:	f1 e0       	ldi	r31, 0x01	; 1
    7f4c:	80 81       	ld	r24, Z
    7f4e:	82 60       	ori	r24, 0x02	; 2
    7f50:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    7f52:	80 81       	ld	r24, Z
    7f54:	81 60       	ori	r24, 0x01	; 1
    7f56:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    7f58:	e0 e2       	ldi	r30, 0x20	; 32
    7f5a:	f1 e0       	ldi	r31, 0x01	; 1
    7f5c:	80 81       	ld	r24, Z
    7f5e:	81 60       	ori	r24, 0x01	; 1
    7f60:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    7f62:	ea e7       	ldi	r30, 0x7A	; 122
    7f64:	f0 e0       	ldi	r31, 0x00	; 0
    7f66:	80 81       	ld	r24, Z
    7f68:	84 60       	ori	r24, 0x04	; 4
    7f6a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    7f6c:	80 81       	ld	r24, Z
    7f6e:	82 60       	ori	r24, 0x02	; 2
    7f70:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    7f72:	80 81       	ld	r24, Z
    7f74:	81 60       	ori	r24, 0x01	; 1
    7f76:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    7f78:	80 81       	ld	r24, Z
    7f7a:	80 68       	ori	r24, 0x80	; 128
    7f7c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    7f7e:	10 92 c1 00 	sts	0x00C1, r1
    7f82:	08 95       	ret

00007f84 <analogRead>:
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#endif
	pin = analogPinToChannel(pin);
#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
    7f84:	86 33       	cpi	r24, 0x36	; 54
    7f86:	08 f0       	brcs	.+2      	; 0x7f8a <analogRead+0x6>
    7f88:	86 53       	subi	r24, 0x36	; 54
#endif

#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    7f8a:	eb e7       	ldi	r30, 0x7B	; 123
    7f8c:	f0 e0       	ldi	r31, 0x00	; 0
    7f8e:	90 81       	ld	r25, Z
    7f90:	28 2f       	mov	r18, r24
    7f92:	28 70       	andi	r18, 0x08	; 8
    7f94:	97 7f       	andi	r25, 0xF7	; 247
    7f96:	92 2b       	or	r25, r18
    7f98:	90 83       	st	Z, r25
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    7f9a:	87 70       	andi	r24, 0x07	; 7
    7f9c:	20 91 98 02 	lds	r18, 0x0298
    7fa0:	90 e4       	ldi	r25, 0x40	; 64
    7fa2:	29 9f       	mul	r18, r25
    7fa4:	90 01       	movw	r18, r0
    7fa6:	11 24       	eor	r1, r1
    7fa8:	82 2b       	or	r24, r18
    7faa:	80 93 7c 00 	sts	0x007C, r24
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    7fae:	ea e7       	ldi	r30, 0x7A	; 122
    7fb0:	f0 e0       	ldi	r31, 0x00	; 0
    7fb2:	80 81       	ld	r24, Z
    7fb4:	80 64       	ori	r24, 0x40	; 64
    7fb6:	80 83       	st	Z, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    7fb8:	80 81       	ld	r24, Z
    7fba:	86 fd       	sbrc	r24, 6
    7fbc:	fd cf       	rjmp	.-6      	; 0x7fb8 <analogRead+0x34>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    7fbe:	80 91 78 00 	lds	r24, 0x0078
	high = ADCH;
    7fc2:	20 91 79 00 	lds	r18, 0x0079
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    7fc6:	90 e0       	ldi	r25, 0x00	; 0
}
    7fc8:	92 2b       	or	r25, r18
    7fca:	08 95       	ret

00007fcc <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    7fcc:	90 e0       	ldi	r25, 0x00	; 0
    7fce:	fc 01       	movw	r30, r24
    7fd0:	31 97       	sbiw	r30, 0x01	; 1
    7fd2:	e2 31       	cpi	r30, 0x12	; 18
    7fd4:	f1 05       	cpc	r31, r1
    7fd6:	08 f0       	brcs	.+2      	; 0x7fda <turnOffPWM+0xe>
    7fd8:	60 c0       	rjmp	.+192    	; 0x809a <turnOffPWM+0xce>
    7fda:	88 27       	eor	r24, r24
    7fdc:	e1 5b       	subi	r30, 0xB1	; 177
    7fde:	fe 4f       	sbci	r31, 0xFE	; 254
    7fe0:	8f 4f       	sbci	r24, 0xFF	; 255
    7fe2:	be c4       	rjmp	.+2428   	; 0x8960 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    7fe4:	e0 e8       	ldi	r30, 0x80	; 128
    7fe6:	f0 e0       	ldi	r31, 0x00	; 0
    7fe8:	80 81       	ld	r24, Z
    7fea:	8f 77       	andi	r24, 0x7F	; 127
    7fec:	80 83       	st	Z, r24
    7fee:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    7ff0:	e0 e8       	ldi	r30, 0x80	; 128
    7ff2:	f0 e0       	ldi	r31, 0x00	; 0
    7ff4:	80 81       	ld	r24, Z
    7ff6:	8f 7d       	andi	r24, 0xDF	; 223
    7ff8:	80 83       	st	Z, r24
    7ffa:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    7ffc:	e0 e8       	ldi	r30, 0x80	; 128
    7ffe:	f0 e0       	ldi	r31, 0x00	; 0
    8000:	80 81       	ld	r24, Z
    8002:	87 7f       	andi	r24, 0xF7	; 247
    8004:	80 83       	st	Z, r24
    8006:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    8008:	84 b5       	in	r24, 0x24	; 36
    800a:	8f 77       	andi	r24, 0x7F	; 127
    800c:	84 bd       	out	0x24, r24	; 36
    800e:	08 95       	ret
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    8010:	84 b5       	in	r24, 0x24	; 36
    8012:	8f 7d       	andi	r24, 0xDF	; 223
    8014:	84 bd       	out	0x24, r24	; 36
    8016:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    8018:	e0 eb       	ldi	r30, 0xB0	; 176
    801a:	f0 e0       	ldi	r31, 0x00	; 0
    801c:	80 81       	ld	r24, Z
    801e:	8f 77       	andi	r24, 0x7F	; 127
    8020:	80 83       	st	Z, r24
    8022:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    8024:	e0 eb       	ldi	r30, 0xB0	; 176
    8026:	f0 e0       	ldi	r31, 0x00	; 0
    8028:	80 81       	ld	r24, Z
    802a:	8f 7d       	andi	r24, 0xDF	; 223
    802c:	80 83       	st	Z, r24
    802e:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    8030:	e0 e9       	ldi	r30, 0x90	; 144
    8032:	f0 e0       	ldi	r31, 0x00	; 0
    8034:	80 81       	ld	r24, Z
    8036:	8f 77       	andi	r24, 0x7F	; 127
    8038:	80 83       	st	Z, r24
    803a:	08 95       	ret
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    803c:	e0 e9       	ldi	r30, 0x90	; 144
    803e:	f0 e0       	ldi	r31, 0x00	; 0
    8040:	80 81       	ld	r24, Z
    8042:	8f 7d       	andi	r24, 0xDF	; 223
    8044:	80 83       	st	Z, r24
    8046:	08 95       	ret
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    8048:	e0 e9       	ldi	r30, 0x90	; 144
    804a:	f0 e0       	ldi	r31, 0x00	; 0
    804c:	80 81       	ld	r24, Z
    804e:	87 7f       	andi	r24, 0xF7	; 247
    8050:	80 83       	st	Z, r24
    8052:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    8054:	e0 ea       	ldi	r30, 0xA0	; 160
    8056:	f0 e0       	ldi	r31, 0x00	; 0
    8058:	80 81       	ld	r24, Z
    805a:	8f 77       	andi	r24, 0x7F	; 127
    805c:	80 83       	st	Z, r24
    805e:	08 95       	ret
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    8060:	e0 ea       	ldi	r30, 0xA0	; 160
    8062:	f0 e0       	ldi	r31, 0x00	; 0
    8064:	80 81       	ld	r24, Z
    8066:	8f 7d       	andi	r24, 0xDF	; 223
    8068:	80 83       	st	Z, r24
    806a:	08 95       	ret
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    806c:	e0 ea       	ldi	r30, 0xA0	; 160
    806e:	f0 e0       	ldi	r31, 0x00	; 0
    8070:	80 81       	ld	r24, Z
    8072:	87 7f       	andi	r24, 0xF7	; 247
    8074:	80 83       	st	Z, r24
    8076:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    8078:	e0 e2       	ldi	r30, 0x20	; 32
    807a:	f1 e0       	ldi	r31, 0x01	; 1
    807c:	80 81       	ld	r24, Z
    807e:	8f 77       	andi	r24, 0x7F	; 127
    8080:	80 83       	st	Z, r24
    8082:	08 95       	ret
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    8084:	e0 e2       	ldi	r30, 0x20	; 32
    8086:	f1 e0       	ldi	r31, 0x01	; 1
    8088:	80 81       	ld	r24, Z
    808a:	8f 7d       	andi	r24, 0xDF	; 223
    808c:	80 83       	st	Z, r24
    808e:	08 95       	ret
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    8090:	e0 e2       	ldi	r30, 0x20	; 32
    8092:	f1 e0       	ldi	r31, 0x01	; 1
    8094:	80 81       	ld	r24, Z
    8096:	87 7f       	andi	r24, 0xF7	; 247
    8098:	80 83       	st	Z, r24
    809a:	08 95       	ret

0000809c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    809c:	cf 93       	push	r28
    809e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    80a0:	90 e0       	ldi	r25, 0x00	; 0
    80a2:	fc 01       	movw	r30, r24
    80a4:	e7 5e       	subi	r30, 0xE7	; 231
    80a6:	fc 4f       	sbci	r31, 0xFC	; 252
    80a8:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    80aa:	fc 01       	movw	r30, r24
    80ac:	e1 5a       	subi	r30, 0xA1	; 161
    80ae:	fc 4f       	sbci	r31, 0xFC	; 252
    80b0:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    80b2:	88 23       	and	r24, r24
    80b4:	79 f1       	breq	.+94     	; 0x8114 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    80b6:	90 e0       	ldi	r25, 0x00	; 0
    80b8:	88 0f       	add	r24, r24
    80ba:	99 1f       	adc	r25, r25
    80bc:	fc 01       	movw	r30, r24
    80be:	e7 52       	subi	r30, 0x27	; 39
    80c0:	fc 4f       	sbci	r31, 0xFC	; 252
    80c2:	a5 91       	lpm	r26, Z+
    80c4:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    80c6:	fc 01       	movw	r30, r24
    80c8:	e1 54       	subi	r30, 0x41	; 65
    80ca:	fc 4f       	sbci	r31, 0xFC	; 252
    80cc:	c5 91       	lpm	r28, Z+
    80ce:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
    80d0:	61 11       	cpse	r22, r1
    80d2:	0c c0       	rjmp	.+24     	; 0x80ec <pinMode+0x50>
		uint8_t oldSREG = SREG;
    80d4:	9f b7       	in	r25, 0x3f	; 63
                cli();
    80d6:	f8 94       	cli
		*reg &= ~bit;
    80d8:	8c 91       	ld	r24, X
    80da:	e2 2f       	mov	r30, r18
    80dc:	e0 95       	com	r30
    80de:	8e 23       	and	r24, r30
    80e0:	8c 93       	st	X, r24
		*out &= ~bit;
    80e2:	28 81       	ld	r18, Y
    80e4:	e2 23       	and	r30, r18
    80e6:	e8 83       	st	Y, r30
		SREG = oldSREG;
    80e8:	9f bf       	out	0x3f, r25	; 63
    80ea:	14 c0       	rjmp	.+40     	; 0x8114 <pinMode+0x78>
	} else if (mode == INPUT_PULLUP) {
    80ec:	62 30       	cpi	r22, 0x02	; 2
    80ee:	61 f4       	brne	.+24     	; 0x8108 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    80f0:	9f b7       	in	r25, 0x3f	; 63
                cli();
    80f2:	f8 94       	cli
		*reg &= ~bit;
    80f4:	3c 91       	ld	r19, X
    80f6:	82 2f       	mov	r24, r18
    80f8:	80 95       	com	r24
    80fa:	83 23       	and	r24, r19
    80fc:	8c 93       	st	X, r24
		*out |= bit;
    80fe:	e8 81       	ld	r30, Y
    8100:	e2 2b       	or	r30, r18
    8102:	e8 83       	st	Y, r30
		SREG = oldSREG;
    8104:	9f bf       	out	0x3f, r25	; 63
    8106:	06 c0       	rjmp	.+12     	; 0x8114 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    8108:	8f b7       	in	r24, 0x3f	; 63
                cli();
    810a:	f8 94       	cli
		*reg |= bit;
    810c:	ec 91       	ld	r30, X
    810e:	e2 2b       	or	r30, r18
    8110:	ec 93       	st	X, r30
		SREG = oldSREG;
    8112:	8f bf       	out	0x3f, r24	; 63
	}
}
    8114:	df 91       	pop	r29
    8116:	cf 91       	pop	r28
    8118:	08 95       	ret

0000811a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    811a:	1f 93       	push	r17
    811c:	cf 93       	push	r28
    811e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    8120:	28 2f       	mov	r18, r24
    8122:	30 e0       	ldi	r19, 0x00	; 0
    8124:	f9 01       	movw	r30, r18
    8126:	ed 52       	subi	r30, 0x2D	; 45
    8128:	fd 4f       	sbci	r31, 0xFD	; 253
    812a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    812c:	f9 01       	movw	r30, r18
    812e:	e7 5e       	subi	r30, 0xE7	; 231
    8130:	fc 4f       	sbci	r31, 0xFC	; 252
    8132:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
    8134:	f9 01       	movw	r30, r18
    8136:	e1 5a       	subi	r30, 0xA1	; 161
    8138:	fc 4f       	sbci	r31, 0xFC	; 252
    813a:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    813c:	cc 23       	and	r28, r28
    813e:	c9 f0       	breq	.+50     	; 0x8172 <digitalWrite+0x58>
    8140:	d6 2f       	mov	r29, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    8142:	81 11       	cpse	r24, r1
    8144:	43 df       	rcall	.-378    	; 0x7fcc <turnOffPWM>

	out = portOutputRegister(port);
    8146:	ec 2f       	mov	r30, r28
    8148:	f0 e0       	ldi	r31, 0x00	; 0
    814a:	ee 0f       	add	r30, r30
    814c:	ff 1f       	adc	r31, r31
    814e:	e1 54       	subi	r30, 0x41	; 65
    8150:	fc 4f       	sbci	r31, 0xFC	; 252
    8152:	a5 91       	lpm	r26, Z+
    8154:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    8156:	8f b7       	in	r24, 0x3f	; 63
	cli();
    8158:	f8 94       	cli

	if (val == LOW) {
    815a:	d1 11       	cpse	r29, r1
    815c:	06 c0       	rjmp	.+12     	; 0x816a <digitalWrite+0x50>
		*out &= ~bit;
    815e:	9c 91       	ld	r25, X
    8160:	e1 2f       	mov	r30, r17
    8162:	e0 95       	com	r30
    8164:	e9 23       	and	r30, r25
    8166:	ec 93       	st	X, r30
    8168:	03 c0       	rjmp	.+6      	; 0x8170 <digitalWrite+0x56>
	} else {
		*out |= bit;
    816a:	ec 91       	ld	r30, X
    816c:	e1 2b       	or	r30, r17
    816e:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    8170:	8f bf       	out	0x3f, r24	; 63
}
    8172:	df 91       	pop	r29
    8174:	cf 91       	pop	r28
    8176:	1f 91       	pop	r17
    8178:	08 95       	ret

0000817a <digitalRead>:

int digitalRead(uint8_t pin)
{
    817a:	cf 93       	push	r28
    817c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    817e:	28 2f       	mov	r18, r24
    8180:	30 e0       	ldi	r19, 0x00	; 0
    8182:	f9 01       	movw	r30, r18
    8184:	ed 52       	subi	r30, 0x2D	; 45
    8186:	fd 4f       	sbci	r31, 0xFD	; 253
    8188:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    818a:	f9 01       	movw	r30, r18
    818c:	e7 5e       	subi	r30, 0xE7	; 231
    818e:	fc 4f       	sbci	r31, 0xFC	; 252
    8190:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    8192:	f9 01       	movw	r30, r18
    8194:	e1 5a       	subi	r30, 0xA1	; 161
    8196:	fc 4f       	sbci	r31, 0xFC	; 252
    8198:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    819a:	cc 23       	and	r28, r28
    819c:	89 f0       	breq	.+34     	; 0x81c0 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    819e:	81 11       	cpse	r24, r1
    81a0:	15 df       	rcall	.-470    	; 0x7fcc <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    81a2:	ec 2f       	mov	r30, r28
    81a4:	f0 e0       	ldi	r31, 0x00	; 0
    81a6:	ee 0f       	add	r30, r30
    81a8:	ff 1f       	adc	r31, r31
    81aa:	eb 55       	subi	r30, 0x5B	; 91
    81ac:	fc 4f       	sbci	r31, 0xFC	; 252
    81ae:	a5 91       	lpm	r26, Z+
    81b0:	b4 91       	lpm	r27, Z
    81b2:	ec 91       	ld	r30, X
    81b4:	ed 23       	and	r30, r29
    81b6:	81 e0       	ldi	r24, 0x01	; 1
    81b8:	90 e0       	ldi	r25, 0x00	; 0
    81ba:	21 f4       	brne	.+8      	; 0x81c4 <digitalRead+0x4a>
    81bc:	80 e0       	ldi	r24, 0x00	; 0
    81be:	02 c0       	rjmp	.+4      	; 0x81c4 <digitalRead+0x4a>
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    81c0:	80 e0       	ldi	r24, 0x00	; 0
    81c2:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    81c4:	df 91       	pop	r29
    81c6:	cf 91       	pop	r28
    81c8:	08 95       	ret

000081ca <_ZN6StringD1Ev>:
StringSumHelper & operator + (const StringSumHelper &lhs, const __FlashStringHelper *rhs)
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs))	a.invalidate();
	return a;
}
    81ca:	fc 01       	movw	r30, r24
    81cc:	80 81       	ld	r24, Z
    81ce:	91 81       	ldd	r25, Z+1	; 0x01
    81d0:	78 c4       	rjmp	.+2288   	; 0x8ac2 <free>
    81d2:	08 95       	ret

000081d4 <_ZN6String10invalidateEv>:
    81d4:	cf 93       	push	r28
    81d6:	df 93       	push	r29
    81d8:	ec 01       	movw	r28, r24
    81da:	88 81       	ld	r24, Y
    81dc:	99 81       	ldd	r25, Y+1	; 0x01
    81de:	00 97       	sbiw	r24, 0x00	; 0
    81e0:	09 f0       	breq	.+2      	; 0x81e4 <_ZN6String10invalidateEv+0x10>
    81e2:	6f d4       	rcall	.+2270   	; 0x8ac2 <free>
    81e4:	19 82       	std	Y+1, r1	; 0x01
    81e6:	18 82       	st	Y, r1
    81e8:	1d 82       	std	Y+5, r1	; 0x05
    81ea:	1c 82       	std	Y+4, r1	; 0x04
    81ec:	1b 82       	std	Y+3, r1	; 0x03
    81ee:	1a 82       	std	Y+2, r1	; 0x02
    81f0:	df 91       	pop	r29
    81f2:	cf 91       	pop	r28
    81f4:	08 95       	ret

000081f6 <_ZN6String12changeBufferEj>:
    81f6:	0f 93       	push	r16
    81f8:	1f 93       	push	r17
    81fa:	cf 93       	push	r28
    81fc:	df 93       	push	r29
    81fe:	ec 01       	movw	r28, r24
    8200:	8b 01       	movw	r16, r22
    8202:	6f 5f       	subi	r22, 0xFF	; 255
    8204:	7f 4f       	sbci	r23, 0xFF	; 255
    8206:	88 81       	ld	r24, Y
    8208:	99 81       	ldd	r25, Y+1	; 0x01
    820a:	f3 d4       	rcall	.+2534   	; 0x8bf2 <realloc>
    820c:	00 97       	sbiw	r24, 0x00	; 0
    820e:	31 f0       	breq	.+12     	; 0x821c <_ZN6String12changeBufferEj+0x26>
    8210:	99 83       	std	Y+1, r25	; 0x01
    8212:	88 83       	st	Y, r24
    8214:	1b 83       	std	Y+3, r17	; 0x03
    8216:	0a 83       	std	Y+2, r16	; 0x02
    8218:	81 e0       	ldi	r24, 0x01	; 1
    821a:	01 c0       	rjmp	.+2      	; 0x821e <_ZN6String12changeBufferEj+0x28>
    821c:	80 e0       	ldi	r24, 0x00	; 0
    821e:	df 91       	pop	r29
    8220:	cf 91       	pop	r28
    8222:	1f 91       	pop	r17
    8224:	0f 91       	pop	r16
    8226:	08 95       	ret

00008228 <_ZN6String7reserveEj>:
    8228:	cf 93       	push	r28
    822a:	df 93       	push	r29
    822c:	fc 01       	movw	r30, r24
    822e:	20 81       	ld	r18, Z
    8230:	31 81       	ldd	r19, Z+1	; 0x01
    8232:	23 2b       	or	r18, r19
    8234:	29 f0       	breq	.+10     	; 0x8240 <_ZN6String7reserveEj+0x18>
    8236:	22 81       	ldd	r18, Z+2	; 0x02
    8238:	33 81       	ldd	r19, Z+3	; 0x03
    823a:	26 17       	cp	r18, r22
    823c:	37 07       	cpc	r19, r23
    823e:	68 f4       	brcc	.+26     	; 0x825a <_ZN6String7reserveEj+0x32>
    8240:	ec 01       	movw	r28, r24
    8242:	d9 df       	rcall	.-78     	; 0x81f6 <_ZN6String12changeBufferEj>
    8244:	88 23       	and	r24, r24
    8246:	61 f0       	breq	.+24     	; 0x8260 <_ZN6String7reserveEj+0x38>
    8248:	8c 81       	ldd	r24, Y+4	; 0x04
    824a:	9d 81       	ldd	r25, Y+5	; 0x05
    824c:	89 2b       	or	r24, r25
    824e:	39 f4       	brne	.+14     	; 0x825e <_ZN6String7reserveEj+0x36>
    8250:	e8 81       	ld	r30, Y
    8252:	f9 81       	ldd	r31, Y+1	; 0x01
    8254:	10 82       	st	Z, r1
    8256:	81 e0       	ldi	r24, 0x01	; 1
    8258:	03 c0       	rjmp	.+6      	; 0x8260 <_ZN6String7reserveEj+0x38>
    825a:	81 e0       	ldi	r24, 0x01	; 1
    825c:	01 c0       	rjmp	.+2      	; 0x8260 <_ZN6String7reserveEj+0x38>
    825e:	81 e0       	ldi	r24, 0x01	; 1
    8260:	df 91       	pop	r29
    8262:	cf 91       	pop	r28
    8264:	08 95       	ret

00008266 <_ZN6String4copyEPKcj>:
    8266:	ef 92       	push	r14
    8268:	ff 92       	push	r15
    826a:	0f 93       	push	r16
    826c:	1f 93       	push	r17
    826e:	cf 93       	push	r28
    8270:	df 93       	push	r29
    8272:	ec 01       	movw	r28, r24
    8274:	7b 01       	movw	r14, r22
    8276:	8a 01       	movw	r16, r20
    8278:	ba 01       	movw	r22, r20
    827a:	d6 df       	rcall	.-84     	; 0x8228 <_ZN6String7reserveEj>
    827c:	81 11       	cpse	r24, r1
    827e:	03 c0       	rjmp	.+6      	; 0x8286 <_ZN6String4copyEPKcj+0x20>
    8280:	ce 01       	movw	r24, r28
    8282:	a8 df       	rcall	.-176    	; 0x81d4 <_ZN6String10invalidateEv>
    8284:	06 c0       	rjmp	.+12     	; 0x8292 <_ZN6String4copyEPKcj+0x2c>
    8286:	1d 83       	std	Y+5, r17	; 0x05
    8288:	0c 83       	std	Y+4, r16	; 0x04
    828a:	b7 01       	movw	r22, r14
    828c:	88 81       	ld	r24, Y
    828e:	99 81       	ldd	r25, Y+1	; 0x01
    8290:	ba d5       	rcall	.+2932   	; 0x8e06 <strcpy>
    8292:	ce 01       	movw	r24, r28
    8294:	df 91       	pop	r29
    8296:	cf 91       	pop	r28
    8298:	1f 91       	pop	r17
    829a:	0f 91       	pop	r16
    829c:	ff 90       	pop	r15
    829e:	ef 90       	pop	r14
    82a0:	08 95       	ret

000082a2 <_ZN6StringC1EPKc>:
    82a2:	fc 01       	movw	r30, r24
    82a4:	11 82       	std	Z+1, r1	; 0x01
    82a6:	10 82       	st	Z, r1
    82a8:	13 82       	std	Z+3, r1	; 0x03
    82aa:	12 82       	std	Z+2, r1	; 0x02
    82ac:	15 82       	std	Z+5, r1	; 0x05
    82ae:	14 82       	std	Z+4, r1	; 0x04
    82b0:	61 15       	cp	r22, r1
    82b2:	71 05       	cpc	r23, r1
    82b4:	49 f0       	breq	.+18     	; 0x82c8 <_ZN6StringC1EPKc+0x26>
    82b6:	fb 01       	movw	r30, r22
    82b8:	01 90       	ld	r0, Z+
    82ba:	00 20       	and	r0, r0
    82bc:	e9 f7       	brne	.-6      	; 0x82b8 <_ZN6StringC1EPKc+0x16>
    82be:	31 97       	sbiw	r30, 0x01	; 1
    82c0:	af 01       	movw	r20, r30
    82c2:	46 1b       	sub	r20, r22
    82c4:	57 0b       	sbc	r21, r23
    82c6:	cf cf       	rjmp	.-98     	; 0x8266 <_ZN6String4copyEPKcj>
    82c8:	08 95       	ret

000082ca <_ZN6String4copyEPK19__FlashStringHelperj>:
    82ca:	ef 92       	push	r14
    82cc:	ff 92       	push	r15
    82ce:	0f 93       	push	r16
    82d0:	1f 93       	push	r17
    82d2:	cf 93       	push	r28
    82d4:	df 93       	push	r29
    82d6:	ec 01       	movw	r28, r24
    82d8:	7b 01       	movw	r14, r22
    82da:	8a 01       	movw	r16, r20
    82dc:	ba 01       	movw	r22, r20
    82de:	a4 df       	rcall	.-184    	; 0x8228 <_ZN6String7reserveEj>
    82e0:	81 11       	cpse	r24, r1
    82e2:	03 c0       	rjmp	.+6      	; 0x82ea <_ZN6String4copyEPK19__FlashStringHelperj+0x20>
    82e4:	ce 01       	movw	r24, r28
    82e6:	76 df       	rcall	.-276    	; 0x81d4 <_ZN6String10invalidateEv>
    82e8:	06 c0       	rjmp	.+12     	; 0x82f6 <_ZN6String4copyEPK19__FlashStringHelperj+0x2c>
    82ea:	1d 83       	std	Y+5, r17	; 0x05
    82ec:	0c 83       	std	Y+4, r16	; 0x04
    82ee:	b7 01       	movw	r22, r14
    82f0:	88 81       	ld	r24, Y
    82f2:	99 81       	ldd	r25, Y+1	; 0x01
    82f4:	66 d5       	rcall	.+2764   	; 0x8dc2 <strcpy_P>
    82f6:	ce 01       	movw	r24, r28
    82f8:	df 91       	pop	r29
    82fa:	cf 91       	pop	r28
    82fc:	1f 91       	pop	r17
    82fe:	0f 91       	pop	r16
    8300:	ff 90       	pop	r15
    8302:	ef 90       	pop	r14
    8304:	08 95       	ret

00008306 <_ZN6StringaSERKS_>:
    8306:	cf 93       	push	r28
    8308:	df 93       	push	r29
    830a:	ec 01       	movw	r28, r24
    830c:	fb 01       	movw	r30, r22
    830e:	86 17       	cp	r24, r22
    8310:	97 07       	cpc	r25, r23
    8312:	51 f0       	breq	.+20     	; 0x8328 <_ZN6StringaSERKS_+0x22>
    8314:	60 81       	ld	r22, Z
    8316:	71 81       	ldd	r23, Z+1	; 0x01
    8318:	61 15       	cp	r22, r1
    831a:	71 05       	cpc	r23, r1
    831c:	21 f0       	breq	.+8      	; 0x8326 <_ZN6StringaSERKS_+0x20>
    831e:	44 81       	ldd	r20, Z+4	; 0x04
    8320:	55 81       	ldd	r21, Z+5	; 0x05
    8322:	a1 df       	rcall	.-190    	; 0x8266 <_ZN6String4copyEPKcj>
    8324:	01 c0       	rjmp	.+2      	; 0x8328 <_ZN6StringaSERKS_+0x22>
    8326:	56 df       	rcall	.-340    	; 0x81d4 <_ZN6String10invalidateEv>
    8328:	ce 01       	movw	r24, r28
    832a:	df 91       	pop	r29
    832c:	cf 91       	pop	r28
    832e:	08 95       	ret

00008330 <_ZN6StringC1ERKS_>:
    8330:	fc 01       	movw	r30, r24
    8332:	11 82       	std	Z+1, r1	; 0x01
    8334:	10 82       	st	Z, r1
    8336:	13 82       	std	Z+3, r1	; 0x03
    8338:	12 82       	std	Z+2, r1	; 0x02
    833a:	15 82       	std	Z+5, r1	; 0x05
    833c:	14 82       	std	Z+4, r1	; 0x04
    833e:	e3 cf       	rjmp	.-58     	; 0x8306 <_ZN6StringaSERKS_>
    8340:	08 95       	ret

00008342 <_ZN6StringaSEPK19__FlashStringHelper>:
    8342:	0f 93       	push	r16
    8344:	1f 93       	push	r17
    8346:	cf 93       	push	r28
    8348:	df 93       	push	r29
    834a:	8c 01       	movw	r16, r24
    834c:	eb 01       	movw	r28, r22
    834e:	20 97       	sbiw	r28, 0x00	; 0
    8350:	39 f0       	breq	.+14     	; 0x8360 <_ZN6StringaSEPK19__FlashStringHelper+0x1e>
    8352:	cb 01       	movw	r24, r22
    8354:	3d d5       	rcall	.+2682   	; 0x8dd0 <__strlen_P>
    8356:	ac 01       	movw	r20, r24
    8358:	be 01       	movw	r22, r28
    835a:	c8 01       	movw	r24, r16
    835c:	b6 df       	rcall	.-148    	; 0x82ca <_ZN6String4copyEPK19__FlashStringHelperj>
    835e:	01 c0       	rjmp	.+2      	; 0x8362 <_ZN6StringaSEPK19__FlashStringHelper+0x20>
    8360:	39 df       	rcall	.-398    	; 0x81d4 <_ZN6String10invalidateEv>
    8362:	c8 01       	movw	r24, r16
    8364:	df 91       	pop	r29
    8366:	cf 91       	pop	r28
    8368:	1f 91       	pop	r17
    836a:	0f 91       	pop	r16
    836c:	08 95       	ret

0000836e <_ZN6StringC1EPK19__FlashStringHelper>:
    836e:	fc 01       	movw	r30, r24
    8370:	11 82       	std	Z+1, r1	; 0x01
    8372:	10 82       	st	Z, r1
    8374:	13 82       	std	Z+3, r1	; 0x03
    8376:	12 82       	std	Z+2, r1	; 0x02
    8378:	15 82       	std	Z+5, r1	; 0x05
    837a:	14 82       	std	Z+4, r1	; 0x04
    837c:	e2 cf       	rjmp	.-60     	; 0x8342 <_ZN6StringaSEPK19__FlashStringHelper>
    837e:	08 95       	ret

00008380 <_ZN6String6concatEPKcj>:
    8380:	ef 92       	push	r14
    8382:	ff 92       	push	r15
    8384:	0f 93       	push	r16
    8386:	1f 93       	push	r17
    8388:	cf 93       	push	r28
    838a:	df 93       	push	r29
    838c:	fc 01       	movw	r30, r24
    838e:	24 81       	ldd	r18, Z+4	; 0x04
    8390:	35 81       	ldd	r19, Z+5	; 0x05
    8392:	61 15       	cp	r22, r1
    8394:	71 05       	cpc	r23, r1
    8396:	c1 f0       	breq	.+48     	; 0x83c8 <_ZN6String6concatEPKcj+0x48>
    8398:	41 15       	cp	r20, r1
    839a:	51 05       	cpc	r21, r1
    839c:	b9 f0       	breq	.+46     	; 0x83cc <_ZN6String6concatEPKcj+0x4c>
    839e:	8b 01       	movw	r16, r22
    83a0:	ec 01       	movw	r28, r24
    83a2:	7a 01       	movw	r14, r20
    83a4:	e2 0e       	add	r14, r18
    83a6:	f3 1e       	adc	r15, r19
    83a8:	b7 01       	movw	r22, r14
    83aa:	3e df       	rcall	.-388    	; 0x8228 <_ZN6String7reserveEj>
    83ac:	88 23       	and	r24, r24
    83ae:	79 f0       	breq	.+30     	; 0x83ce <_ZN6String6concatEPKcj+0x4e>
    83b0:	28 81       	ld	r18, Y
    83b2:	39 81       	ldd	r19, Y+1	; 0x01
    83b4:	8c 81       	ldd	r24, Y+4	; 0x04
    83b6:	9d 81       	ldd	r25, Y+5	; 0x05
    83b8:	b8 01       	movw	r22, r16
    83ba:	82 0f       	add	r24, r18
    83bc:	93 1f       	adc	r25, r19
    83be:	23 d5       	rcall	.+2630   	; 0x8e06 <strcpy>
    83c0:	fd 82       	std	Y+5, r15	; 0x05
    83c2:	ec 82       	std	Y+4, r14	; 0x04
    83c4:	81 e0       	ldi	r24, 0x01	; 1
    83c6:	03 c0       	rjmp	.+6      	; 0x83ce <_ZN6String6concatEPKcj+0x4e>
    83c8:	80 e0       	ldi	r24, 0x00	; 0
    83ca:	01 c0       	rjmp	.+2      	; 0x83ce <_ZN6String6concatEPKcj+0x4e>
    83cc:	81 e0       	ldi	r24, 0x01	; 1
    83ce:	df 91       	pop	r29
    83d0:	cf 91       	pop	r28
    83d2:	1f 91       	pop	r17
    83d4:	0f 91       	pop	r16
    83d6:	ff 90       	pop	r15
    83d8:	ef 90       	pop	r14
    83da:	08 95       	ret

000083dc <_ZplRK15StringSumHelperRK6String>:
    83dc:	cf 93       	push	r28
    83de:	df 93       	push	r29
    83e0:	ec 01       	movw	r28, r24
    83e2:	fb 01       	movw	r30, r22
    83e4:	44 81       	ldd	r20, Z+4	; 0x04
    83e6:	55 81       	ldd	r21, Z+5	; 0x05
    83e8:	60 81       	ld	r22, Z
    83ea:	71 81       	ldd	r23, Z+1	; 0x01
    83ec:	c9 df       	rcall	.-110    	; 0x8380 <_ZN6String6concatEPKcj>
    83ee:	81 11       	cpse	r24, r1
    83f0:	02 c0       	rjmp	.+4      	; 0x83f6 <_ZplRK15StringSumHelperRK6String+0x1a>
    83f2:	ce 01       	movw	r24, r28
    83f4:	ef de       	rcall	.-546    	; 0x81d4 <_ZN6String10invalidateEv>
    83f6:	ce 01       	movw	r24, r28
    83f8:	df 91       	pop	r29
    83fa:	cf 91       	pop	r28
    83fc:	08 95       	ret

000083fe <_ZplRK15StringSumHelperPKc>:
    83fe:	cf 93       	push	r28
    8400:	df 93       	push	r29
    8402:	ec 01       	movw	r28, r24
    8404:	61 15       	cp	r22, r1
    8406:	71 05       	cpc	r23, r1
    8408:	59 f0       	breq	.+22     	; 0x8420 <_ZplRK15StringSumHelperPKc+0x22>
    840a:	fb 01       	movw	r30, r22
    840c:	01 90       	ld	r0, Z+
    840e:	00 20       	and	r0, r0
    8410:	e9 f7       	brne	.-6      	; 0x840c <_ZplRK15StringSumHelperPKc+0xe>
    8412:	31 97       	sbiw	r30, 0x01	; 1
    8414:	af 01       	movw	r20, r30
    8416:	46 1b       	sub	r20, r22
    8418:	57 0b       	sbc	r21, r23
    841a:	b2 df       	rcall	.-156    	; 0x8380 <_ZN6String6concatEPKcj>
    841c:	81 11       	cpse	r24, r1
    841e:	02 c0       	rjmp	.+4      	; 0x8424 <_ZplRK15StringSumHelperPKc+0x26>
    8420:	ce 01       	movw	r24, r28
    8422:	d8 de       	rcall	.-592    	; 0x81d4 <_ZN6String10invalidateEv>
    8424:	ce 01       	movw	r24, r28
    8426:	df 91       	pop	r29
    8428:	cf 91       	pop	r28
    842a:	08 95       	ret

0000842c <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
    842c:	dc 01       	movw	r26, r24
    842e:	ed 91       	ld	r30, X+
    8430:	fc 91       	ld	r31, X
    8432:	30 97       	sbiw	r30, 0x00	; 0
    8434:	39 f1       	breq	.+78     	; 0x8484 <_ZNK6String9compareToERKS_+0x58>
    8436:	db 01       	movw	r26, r22
    8438:	6d 91       	ld	r22, X+
    843a:	7c 91       	ld	r23, X
    843c:	61 15       	cp	r22, r1
    843e:	71 05       	cpc	r23, r1
    8440:	c1 f4       	brne	.+48     	; 0x8472 <_ZNK6String9compareToERKS_+0x46>
    8442:	0d c0       	rjmp	.+26     	; 0x845e <_ZNK6String9compareToERKS_+0x32>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
    8444:	db 01       	movw	r26, r22
    8446:	14 96       	adiw	r26, 0x04	; 4
    8448:	8d 91       	ld	r24, X+
    844a:	9c 91       	ld	r25, X
    844c:	15 97       	sbiw	r26, 0x05	; 5
    844e:	89 2b       	or	r24, r25
    8450:	99 f0       	breq	.+38     	; 0x8478 <_ZNK6String9compareToERKS_+0x4c>
    8452:	80 81       	ld	r24, Z
    8454:	90 e0       	ldi	r25, 0x00	; 0
    8456:	91 95       	neg	r25
    8458:	81 95       	neg	r24
    845a:	91 09       	sbc	r25, r1
    845c:	08 95       	ret
		if (buffer && len > 0) return *(unsigned char *)buffer;
    845e:	dc 01       	movw	r26, r24
    8460:	14 96       	adiw	r26, 0x04	; 4
    8462:	8d 91       	ld	r24, X+
    8464:	9c 91       	ld	r25, X
    8466:	15 97       	sbiw	r26, 0x05	; 5
    8468:	89 2b       	or	r24, r25
    846a:	49 f0       	breq	.+18     	; 0x847e <_ZNK6String9compareToERKS_+0x52>
    846c:	80 81       	ld	r24, Z
    846e:	90 e0       	ldi	r25, 0x00	; 0
    8470:	08 95       	ret
		return 0;
	}
	return strcmp(buffer, s.buffer);
    8472:	cf 01       	movw	r24, r30
    8474:	bf c4       	rjmp	.+2430   	; 0x8df4 <strcmp>
    8476:	08 95       	ret
int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
		return 0;
    8478:	80 e0       	ldi	r24, 0x00	; 0
    847a:	90 e0       	ldi	r25, 0x00	; 0
    847c:	08 95       	ret
    847e:	80 e0       	ldi	r24, 0x00	; 0
    8480:	90 e0       	ldi	r25, 0x00	; 0
    8482:	08 95       	ret
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
    8484:	db 01       	movw	r26, r22
    8486:	ed 91       	ld	r30, X+
    8488:	fc 91       	ld	r31, X
    848a:	30 97       	sbiw	r30, 0x00	; 0
    848c:	d9 f6       	brne	.-74     	; 0x8444 <_ZNK6String9compareToERKS_+0x18>
		if (buffer && len > 0) return *(unsigned char *)buffer;
		return 0;
    848e:	80 e0       	ldi	r24, 0x00	; 0
    8490:	90 e0       	ldi	r25, 0x00	; 0
	}
	return strcmp(buffer, s.buffer);
}
    8492:	08 95       	ret

00008494 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
    8494:	fc 01       	movw	r30, r24
    8496:	44 81       	ldd	r20, Z+4	; 0x04
    8498:	55 81       	ldd	r21, Z+5	; 0x05
    849a:	fb 01       	movw	r30, r22
    849c:	24 81       	ldd	r18, Z+4	; 0x04
    849e:	35 81       	ldd	r19, Z+5	; 0x05
    84a0:	42 17       	cp	r20, r18
    84a2:	53 07       	cpc	r21, r19
    84a4:	31 f4       	brne	.+12     	; 0x84b2 <_ZNK6String6equalsERKS_+0x1e>
    84a6:	c2 df       	rcall	.-124    	; 0x842c <_ZNK6String9compareToERKS_>
    84a8:	21 e0       	ldi	r18, 0x01	; 1
    84aa:	89 2b       	or	r24, r25
    84ac:	19 f0       	breq	.+6      	; 0x84b4 <_ZNK6String6equalsERKS_+0x20>
    84ae:	20 e0       	ldi	r18, 0x00	; 0
    84b0:	01 c0       	rjmp	.+2      	; 0x84b4 <_ZNK6String6equalsERKS_+0x20>
    84b2:	20 e0       	ldi	r18, 0x00	; 0
}
    84b4:	82 2f       	mov	r24, r18
    84b6:	08 95       	ret

000084b8 <__subsf3>:
    84b8:	50 58       	subi	r21, 0x80	; 128

000084ba <__addsf3>:
    84ba:	bb 27       	eor	r27, r27
    84bc:	aa 27       	eor	r26, r26
    84be:	0e d0       	rcall	.+28     	; 0x84dc <__addsf3x>
    84c0:	75 c1       	rjmp	.+746    	; 0x87ac <__fp_round>
    84c2:	66 d1       	rcall	.+716    	; 0x8790 <__fp_pscA>
    84c4:	30 f0       	brcs	.+12     	; 0x84d2 <__addsf3+0x18>
    84c6:	6b d1       	rcall	.+726    	; 0x879e <__fp_pscB>
    84c8:	20 f0       	brcs	.+8      	; 0x84d2 <__addsf3+0x18>
    84ca:	31 f4       	brne	.+12     	; 0x84d8 <__addsf3+0x1e>
    84cc:	9f 3f       	cpi	r25, 0xFF	; 255
    84ce:	11 f4       	brne	.+4      	; 0x84d4 <__addsf3+0x1a>
    84d0:	1e f4       	brtc	.+6      	; 0x84d8 <__addsf3+0x1e>
    84d2:	5b c1       	rjmp	.+694    	; 0x878a <__fp_nan>
    84d4:	0e f4       	brtc	.+2      	; 0x84d8 <__addsf3+0x1e>
    84d6:	e0 95       	com	r30
    84d8:	e7 fb       	bst	r30, 7
    84da:	51 c1       	rjmp	.+674    	; 0x877e <__fp_inf>

000084dc <__addsf3x>:
    84dc:	e9 2f       	mov	r30, r25
    84de:	77 d1       	rcall	.+750    	; 0x87ce <__fp_split3>
    84e0:	80 f3       	brcs	.-32     	; 0x84c2 <__addsf3+0x8>
    84e2:	ba 17       	cp	r27, r26
    84e4:	62 07       	cpc	r22, r18
    84e6:	73 07       	cpc	r23, r19
    84e8:	84 07       	cpc	r24, r20
    84ea:	95 07       	cpc	r25, r21
    84ec:	18 f0       	brcs	.+6      	; 0x84f4 <__addsf3x+0x18>
    84ee:	71 f4       	brne	.+28     	; 0x850c <__addsf3x+0x30>
    84f0:	9e f5       	brtc	.+102    	; 0x8558 <__addsf3x+0x7c>
    84f2:	8f c1       	rjmp	.+798    	; 0x8812 <__fp_zero>
    84f4:	0e f4       	brtc	.+2      	; 0x84f8 <__addsf3x+0x1c>
    84f6:	e0 95       	com	r30
    84f8:	0b 2e       	mov	r0, r27
    84fa:	ba 2f       	mov	r27, r26
    84fc:	a0 2d       	mov	r26, r0
    84fe:	0b 01       	movw	r0, r22
    8500:	b9 01       	movw	r22, r18
    8502:	90 01       	movw	r18, r0
    8504:	0c 01       	movw	r0, r24
    8506:	ca 01       	movw	r24, r20
    8508:	a0 01       	movw	r20, r0
    850a:	11 24       	eor	r1, r1
    850c:	ff 27       	eor	r31, r31
    850e:	59 1b       	sub	r21, r25
    8510:	99 f0       	breq	.+38     	; 0x8538 <__addsf3x+0x5c>
    8512:	59 3f       	cpi	r21, 0xF9	; 249
    8514:	50 f4       	brcc	.+20     	; 0x852a <__addsf3x+0x4e>
    8516:	50 3e       	cpi	r21, 0xE0	; 224
    8518:	68 f1       	brcs	.+90     	; 0x8574 <__addsf3x+0x98>
    851a:	1a 16       	cp	r1, r26
    851c:	f0 40       	sbci	r31, 0x00	; 0
    851e:	a2 2f       	mov	r26, r18
    8520:	23 2f       	mov	r18, r19
    8522:	34 2f       	mov	r19, r20
    8524:	44 27       	eor	r20, r20
    8526:	58 5f       	subi	r21, 0xF8	; 248
    8528:	f3 cf       	rjmp	.-26     	; 0x8510 <__addsf3x+0x34>
    852a:	46 95       	lsr	r20
    852c:	37 95       	ror	r19
    852e:	27 95       	ror	r18
    8530:	a7 95       	ror	r26
    8532:	f0 40       	sbci	r31, 0x00	; 0
    8534:	53 95       	inc	r21
    8536:	c9 f7       	brne	.-14     	; 0x852a <__addsf3x+0x4e>
    8538:	7e f4       	brtc	.+30     	; 0x8558 <__addsf3x+0x7c>
    853a:	1f 16       	cp	r1, r31
    853c:	ba 0b       	sbc	r27, r26
    853e:	62 0b       	sbc	r22, r18
    8540:	73 0b       	sbc	r23, r19
    8542:	84 0b       	sbc	r24, r20
    8544:	ba f0       	brmi	.+46     	; 0x8574 <__addsf3x+0x98>
    8546:	91 50       	subi	r25, 0x01	; 1
    8548:	a1 f0       	breq	.+40     	; 0x8572 <__addsf3x+0x96>
    854a:	ff 0f       	add	r31, r31
    854c:	bb 1f       	adc	r27, r27
    854e:	66 1f       	adc	r22, r22
    8550:	77 1f       	adc	r23, r23
    8552:	88 1f       	adc	r24, r24
    8554:	c2 f7       	brpl	.-16     	; 0x8546 <__addsf3x+0x6a>
    8556:	0e c0       	rjmp	.+28     	; 0x8574 <__addsf3x+0x98>
    8558:	ba 0f       	add	r27, r26
    855a:	62 1f       	adc	r22, r18
    855c:	73 1f       	adc	r23, r19
    855e:	84 1f       	adc	r24, r20
    8560:	48 f4       	brcc	.+18     	; 0x8574 <__addsf3x+0x98>
    8562:	87 95       	ror	r24
    8564:	77 95       	ror	r23
    8566:	67 95       	ror	r22
    8568:	b7 95       	ror	r27
    856a:	f7 95       	ror	r31
    856c:	9e 3f       	cpi	r25, 0xFE	; 254
    856e:	08 f0       	brcs	.+2      	; 0x8572 <__addsf3x+0x96>
    8570:	b3 cf       	rjmp	.-154    	; 0x84d8 <__addsf3+0x1e>
    8572:	93 95       	inc	r25
    8574:	88 0f       	add	r24, r24
    8576:	08 f0       	brcs	.+2      	; 0x857a <__addsf3x+0x9e>
    8578:	99 27       	eor	r25, r25
    857a:	ee 0f       	add	r30, r30
    857c:	97 95       	ror	r25
    857e:	87 95       	ror	r24
    8580:	08 95       	ret

00008582 <__cmpsf2>:
    8582:	d9 d0       	rcall	.+434    	; 0x8736 <__fp_cmp>
    8584:	08 f4       	brcc	.+2      	; 0x8588 <__cmpsf2+0x6>
    8586:	81 e0       	ldi	r24, 0x01	; 1
    8588:	08 95       	ret

0000858a <__divsf3>:
    858a:	0c d0       	rcall	.+24     	; 0x85a4 <__divsf3x>
    858c:	0f c1       	rjmp	.+542    	; 0x87ac <__fp_round>
    858e:	07 d1       	rcall	.+526    	; 0x879e <__fp_pscB>
    8590:	40 f0       	brcs	.+16     	; 0x85a2 <__divsf3+0x18>
    8592:	fe d0       	rcall	.+508    	; 0x8790 <__fp_pscA>
    8594:	30 f0       	brcs	.+12     	; 0x85a2 <__divsf3+0x18>
    8596:	21 f4       	brne	.+8      	; 0x85a0 <__divsf3+0x16>
    8598:	5f 3f       	cpi	r21, 0xFF	; 255
    859a:	19 f0       	breq	.+6      	; 0x85a2 <__divsf3+0x18>
    859c:	f0 c0       	rjmp	.+480    	; 0x877e <__fp_inf>
    859e:	51 11       	cpse	r21, r1
    85a0:	39 c1       	rjmp	.+626    	; 0x8814 <__fp_szero>
    85a2:	f3 c0       	rjmp	.+486    	; 0x878a <__fp_nan>

000085a4 <__divsf3x>:
    85a4:	14 d1       	rcall	.+552    	; 0x87ce <__fp_split3>
    85a6:	98 f3       	brcs	.-26     	; 0x858e <__divsf3+0x4>

000085a8 <__divsf3_pse>:
    85a8:	99 23       	and	r25, r25
    85aa:	c9 f3       	breq	.-14     	; 0x859e <__divsf3+0x14>
    85ac:	55 23       	and	r21, r21
    85ae:	b1 f3       	breq	.-20     	; 0x859c <__divsf3+0x12>
    85b0:	95 1b       	sub	r25, r21
    85b2:	55 0b       	sbc	r21, r21
    85b4:	bb 27       	eor	r27, r27
    85b6:	aa 27       	eor	r26, r26
    85b8:	62 17       	cp	r22, r18
    85ba:	73 07       	cpc	r23, r19
    85bc:	84 07       	cpc	r24, r20
    85be:	38 f0       	brcs	.+14     	; 0x85ce <__divsf3_pse+0x26>
    85c0:	9f 5f       	subi	r25, 0xFF	; 255
    85c2:	5f 4f       	sbci	r21, 0xFF	; 255
    85c4:	22 0f       	add	r18, r18
    85c6:	33 1f       	adc	r19, r19
    85c8:	44 1f       	adc	r20, r20
    85ca:	aa 1f       	adc	r26, r26
    85cc:	a9 f3       	breq	.-22     	; 0x85b8 <__divsf3_pse+0x10>
    85ce:	33 d0       	rcall	.+102    	; 0x8636 <__divsf3_pse+0x8e>
    85d0:	0e 2e       	mov	r0, r30
    85d2:	3a f0       	brmi	.+14     	; 0x85e2 <__divsf3_pse+0x3a>
    85d4:	e0 e8       	ldi	r30, 0x80	; 128
    85d6:	30 d0       	rcall	.+96     	; 0x8638 <__divsf3_pse+0x90>
    85d8:	91 50       	subi	r25, 0x01	; 1
    85da:	50 40       	sbci	r21, 0x00	; 0
    85dc:	e6 95       	lsr	r30
    85de:	00 1c       	adc	r0, r0
    85e0:	ca f7       	brpl	.-14     	; 0x85d4 <__divsf3_pse+0x2c>
    85e2:	29 d0       	rcall	.+82     	; 0x8636 <__divsf3_pse+0x8e>
    85e4:	fe 2f       	mov	r31, r30
    85e6:	27 d0       	rcall	.+78     	; 0x8636 <__divsf3_pse+0x8e>
    85e8:	66 0f       	add	r22, r22
    85ea:	77 1f       	adc	r23, r23
    85ec:	88 1f       	adc	r24, r24
    85ee:	bb 1f       	adc	r27, r27
    85f0:	26 17       	cp	r18, r22
    85f2:	37 07       	cpc	r19, r23
    85f4:	48 07       	cpc	r20, r24
    85f6:	ab 07       	cpc	r26, r27
    85f8:	b0 e8       	ldi	r27, 0x80	; 128
    85fa:	09 f0       	breq	.+2      	; 0x85fe <__divsf3_pse+0x56>
    85fc:	bb 0b       	sbc	r27, r27
    85fe:	80 2d       	mov	r24, r0
    8600:	bf 01       	movw	r22, r30
    8602:	ff 27       	eor	r31, r31
    8604:	93 58       	subi	r25, 0x83	; 131
    8606:	5f 4f       	sbci	r21, 0xFF	; 255
    8608:	2a f0       	brmi	.+10     	; 0x8614 <__divsf3_pse+0x6c>
    860a:	9e 3f       	cpi	r25, 0xFE	; 254
    860c:	51 05       	cpc	r21, r1
    860e:	68 f0       	brcs	.+26     	; 0x862a <__divsf3_pse+0x82>
    8610:	b6 c0       	rjmp	.+364    	; 0x877e <__fp_inf>
    8612:	00 c1       	rjmp	.+512    	; 0x8814 <__fp_szero>
    8614:	5f 3f       	cpi	r21, 0xFF	; 255
    8616:	ec f3       	brlt	.-6      	; 0x8612 <__divsf3_pse+0x6a>
    8618:	98 3e       	cpi	r25, 0xE8	; 232
    861a:	dc f3       	brlt	.-10     	; 0x8612 <__divsf3_pse+0x6a>
    861c:	86 95       	lsr	r24
    861e:	77 95       	ror	r23
    8620:	67 95       	ror	r22
    8622:	b7 95       	ror	r27
    8624:	f7 95       	ror	r31
    8626:	9f 5f       	subi	r25, 0xFF	; 255
    8628:	c9 f7       	brne	.-14     	; 0x861c <__divsf3_pse+0x74>
    862a:	88 0f       	add	r24, r24
    862c:	91 1d       	adc	r25, r1
    862e:	96 95       	lsr	r25
    8630:	87 95       	ror	r24
    8632:	97 f9       	bld	r25, 7
    8634:	08 95       	ret
    8636:	e1 e0       	ldi	r30, 0x01	; 1
    8638:	66 0f       	add	r22, r22
    863a:	77 1f       	adc	r23, r23
    863c:	88 1f       	adc	r24, r24
    863e:	bb 1f       	adc	r27, r27
    8640:	62 17       	cp	r22, r18
    8642:	73 07       	cpc	r23, r19
    8644:	84 07       	cpc	r24, r20
    8646:	ba 07       	cpc	r27, r26
    8648:	20 f0       	brcs	.+8      	; 0x8652 <__divsf3_pse+0xaa>
    864a:	62 1b       	sub	r22, r18
    864c:	73 0b       	sbc	r23, r19
    864e:	84 0b       	sbc	r24, r20
    8650:	ba 0b       	sbc	r27, r26
    8652:	ee 1f       	adc	r30, r30
    8654:	88 f7       	brcc	.-30     	; 0x8638 <__divsf3_pse+0x90>
    8656:	e0 95       	com	r30
    8658:	08 95       	ret

0000865a <__fixsfsi>:
    865a:	04 d0       	rcall	.+8      	; 0x8664 <__fixunssfsi>
    865c:	68 94       	set
    865e:	b1 11       	cpse	r27, r1
    8660:	d9 c0       	rjmp	.+434    	; 0x8814 <__fp_szero>
    8662:	08 95       	ret

00008664 <__fixunssfsi>:
    8664:	bc d0       	rcall	.+376    	; 0x87de <__fp_splitA>
    8666:	88 f0       	brcs	.+34     	; 0x868a <__fixunssfsi+0x26>
    8668:	9f 57       	subi	r25, 0x7F	; 127
    866a:	90 f0       	brcs	.+36     	; 0x8690 <__fixunssfsi+0x2c>
    866c:	b9 2f       	mov	r27, r25
    866e:	99 27       	eor	r25, r25
    8670:	b7 51       	subi	r27, 0x17	; 23
    8672:	a0 f0       	brcs	.+40     	; 0x869c <__fixunssfsi+0x38>
    8674:	d1 f0       	breq	.+52     	; 0x86aa <__fixunssfsi+0x46>
    8676:	66 0f       	add	r22, r22
    8678:	77 1f       	adc	r23, r23
    867a:	88 1f       	adc	r24, r24
    867c:	99 1f       	adc	r25, r25
    867e:	1a f0       	brmi	.+6      	; 0x8686 <__fixunssfsi+0x22>
    8680:	ba 95       	dec	r27
    8682:	c9 f7       	brne	.-14     	; 0x8676 <__fixunssfsi+0x12>
    8684:	12 c0       	rjmp	.+36     	; 0x86aa <__fixunssfsi+0x46>
    8686:	b1 30       	cpi	r27, 0x01	; 1
    8688:	81 f0       	breq	.+32     	; 0x86aa <__fixunssfsi+0x46>
    868a:	c3 d0       	rcall	.+390    	; 0x8812 <__fp_zero>
    868c:	b1 e0       	ldi	r27, 0x01	; 1
    868e:	08 95       	ret
    8690:	c0 c0       	rjmp	.+384    	; 0x8812 <__fp_zero>
    8692:	67 2f       	mov	r22, r23
    8694:	78 2f       	mov	r23, r24
    8696:	88 27       	eor	r24, r24
    8698:	b8 5f       	subi	r27, 0xF8	; 248
    869a:	39 f0       	breq	.+14     	; 0x86aa <__fixunssfsi+0x46>
    869c:	b9 3f       	cpi	r27, 0xF9	; 249
    869e:	cc f3       	brlt	.-14     	; 0x8692 <__fixunssfsi+0x2e>
    86a0:	86 95       	lsr	r24
    86a2:	77 95       	ror	r23
    86a4:	67 95       	ror	r22
    86a6:	b3 95       	inc	r27
    86a8:	d9 f7       	brne	.-10     	; 0x86a0 <__fixunssfsi+0x3c>
    86aa:	3e f4       	brtc	.+14     	; 0x86ba <__fixunssfsi+0x56>
    86ac:	90 95       	com	r25
    86ae:	80 95       	com	r24
    86b0:	70 95       	com	r23
    86b2:	61 95       	neg	r22
    86b4:	7f 4f       	sbci	r23, 0xFF	; 255
    86b6:	8f 4f       	sbci	r24, 0xFF	; 255
    86b8:	9f 4f       	sbci	r25, 0xFF	; 255
    86ba:	08 95       	ret

000086bc <__floatunsisf>:
    86bc:	e8 94       	clt
    86be:	09 c0       	rjmp	.+18     	; 0x86d2 <__floatsisf+0x12>

000086c0 <__floatsisf>:
    86c0:	97 fb       	bst	r25, 7
    86c2:	3e f4       	brtc	.+14     	; 0x86d2 <__floatsisf+0x12>
    86c4:	90 95       	com	r25
    86c6:	80 95       	com	r24
    86c8:	70 95       	com	r23
    86ca:	61 95       	neg	r22
    86cc:	7f 4f       	sbci	r23, 0xFF	; 255
    86ce:	8f 4f       	sbci	r24, 0xFF	; 255
    86d0:	9f 4f       	sbci	r25, 0xFF	; 255
    86d2:	99 23       	and	r25, r25
    86d4:	a9 f0       	breq	.+42     	; 0x8700 <__floatsisf+0x40>
    86d6:	f9 2f       	mov	r31, r25
    86d8:	96 e9       	ldi	r25, 0x96	; 150
    86da:	bb 27       	eor	r27, r27
    86dc:	93 95       	inc	r25
    86de:	f6 95       	lsr	r31
    86e0:	87 95       	ror	r24
    86e2:	77 95       	ror	r23
    86e4:	67 95       	ror	r22
    86e6:	b7 95       	ror	r27
    86e8:	f1 11       	cpse	r31, r1
    86ea:	f8 cf       	rjmp	.-16     	; 0x86dc <__floatsisf+0x1c>
    86ec:	fa f4       	brpl	.+62     	; 0x872c <__floatsisf+0x6c>
    86ee:	bb 0f       	add	r27, r27
    86f0:	11 f4       	brne	.+4      	; 0x86f6 <__floatsisf+0x36>
    86f2:	60 ff       	sbrs	r22, 0
    86f4:	1b c0       	rjmp	.+54     	; 0x872c <__floatsisf+0x6c>
    86f6:	6f 5f       	subi	r22, 0xFF	; 255
    86f8:	7f 4f       	sbci	r23, 0xFF	; 255
    86fa:	8f 4f       	sbci	r24, 0xFF	; 255
    86fc:	9f 4f       	sbci	r25, 0xFF	; 255
    86fe:	16 c0       	rjmp	.+44     	; 0x872c <__floatsisf+0x6c>
    8700:	88 23       	and	r24, r24
    8702:	11 f0       	breq	.+4      	; 0x8708 <__floatsisf+0x48>
    8704:	96 e9       	ldi	r25, 0x96	; 150
    8706:	11 c0       	rjmp	.+34     	; 0x872a <__floatsisf+0x6a>
    8708:	77 23       	and	r23, r23
    870a:	21 f0       	breq	.+8      	; 0x8714 <__floatsisf+0x54>
    870c:	9e e8       	ldi	r25, 0x8E	; 142
    870e:	87 2f       	mov	r24, r23
    8710:	76 2f       	mov	r23, r22
    8712:	05 c0       	rjmp	.+10     	; 0x871e <__floatsisf+0x5e>
    8714:	66 23       	and	r22, r22
    8716:	71 f0       	breq	.+28     	; 0x8734 <__floatsisf+0x74>
    8718:	96 e8       	ldi	r25, 0x86	; 134
    871a:	86 2f       	mov	r24, r22
    871c:	70 e0       	ldi	r23, 0x00	; 0
    871e:	60 e0       	ldi	r22, 0x00	; 0
    8720:	2a f0       	brmi	.+10     	; 0x872c <__floatsisf+0x6c>
    8722:	9a 95       	dec	r25
    8724:	66 0f       	add	r22, r22
    8726:	77 1f       	adc	r23, r23
    8728:	88 1f       	adc	r24, r24
    872a:	da f7       	brpl	.-10     	; 0x8722 <__floatsisf+0x62>
    872c:	88 0f       	add	r24, r24
    872e:	96 95       	lsr	r25
    8730:	87 95       	ror	r24
    8732:	97 f9       	bld	r25, 7
    8734:	08 95       	ret

00008736 <__fp_cmp>:
    8736:	99 0f       	add	r25, r25
    8738:	00 08       	sbc	r0, r0
    873a:	55 0f       	add	r21, r21
    873c:	aa 0b       	sbc	r26, r26
    873e:	e0 e8       	ldi	r30, 0x80	; 128
    8740:	fe ef       	ldi	r31, 0xFE	; 254
    8742:	16 16       	cp	r1, r22
    8744:	17 06       	cpc	r1, r23
    8746:	e8 07       	cpc	r30, r24
    8748:	f9 07       	cpc	r31, r25
    874a:	c0 f0       	brcs	.+48     	; 0x877c <__fp_cmp+0x46>
    874c:	12 16       	cp	r1, r18
    874e:	13 06       	cpc	r1, r19
    8750:	e4 07       	cpc	r30, r20
    8752:	f5 07       	cpc	r31, r21
    8754:	98 f0       	brcs	.+38     	; 0x877c <__fp_cmp+0x46>
    8756:	62 1b       	sub	r22, r18
    8758:	73 0b       	sbc	r23, r19
    875a:	84 0b       	sbc	r24, r20
    875c:	95 0b       	sbc	r25, r21
    875e:	39 f4       	brne	.+14     	; 0x876e <__fp_cmp+0x38>
    8760:	0a 26       	eor	r0, r26
    8762:	61 f0       	breq	.+24     	; 0x877c <__fp_cmp+0x46>
    8764:	23 2b       	or	r18, r19
    8766:	24 2b       	or	r18, r20
    8768:	25 2b       	or	r18, r21
    876a:	21 f4       	brne	.+8      	; 0x8774 <__fp_cmp+0x3e>
    876c:	08 95       	ret
    876e:	0a 26       	eor	r0, r26
    8770:	09 f4       	brne	.+2      	; 0x8774 <__fp_cmp+0x3e>
    8772:	a1 40       	sbci	r26, 0x01	; 1
    8774:	a6 95       	lsr	r26
    8776:	8f ef       	ldi	r24, 0xFF	; 255
    8778:	81 1d       	adc	r24, r1
    877a:	81 1d       	adc	r24, r1
    877c:	08 95       	ret

0000877e <__fp_inf>:
    877e:	97 f9       	bld	r25, 7
    8780:	9f 67       	ori	r25, 0x7F	; 127
    8782:	80 e8       	ldi	r24, 0x80	; 128
    8784:	70 e0       	ldi	r23, 0x00	; 0
    8786:	60 e0       	ldi	r22, 0x00	; 0
    8788:	08 95       	ret

0000878a <__fp_nan>:
    878a:	9f ef       	ldi	r25, 0xFF	; 255
    878c:	80 ec       	ldi	r24, 0xC0	; 192
    878e:	08 95       	ret

00008790 <__fp_pscA>:
    8790:	00 24       	eor	r0, r0
    8792:	0a 94       	dec	r0
    8794:	16 16       	cp	r1, r22
    8796:	17 06       	cpc	r1, r23
    8798:	18 06       	cpc	r1, r24
    879a:	09 06       	cpc	r0, r25
    879c:	08 95       	ret

0000879e <__fp_pscB>:
    879e:	00 24       	eor	r0, r0
    87a0:	0a 94       	dec	r0
    87a2:	12 16       	cp	r1, r18
    87a4:	13 06       	cpc	r1, r19
    87a6:	14 06       	cpc	r1, r20
    87a8:	05 06       	cpc	r0, r21
    87aa:	08 95       	ret

000087ac <__fp_round>:
    87ac:	09 2e       	mov	r0, r25
    87ae:	03 94       	inc	r0
    87b0:	00 0c       	add	r0, r0
    87b2:	11 f4       	brne	.+4      	; 0x87b8 <__fp_round+0xc>
    87b4:	88 23       	and	r24, r24
    87b6:	52 f0       	brmi	.+20     	; 0x87cc <__fp_round+0x20>
    87b8:	bb 0f       	add	r27, r27
    87ba:	40 f4       	brcc	.+16     	; 0x87cc <__fp_round+0x20>
    87bc:	bf 2b       	or	r27, r31
    87be:	11 f4       	brne	.+4      	; 0x87c4 <__fp_round+0x18>
    87c0:	60 ff       	sbrs	r22, 0
    87c2:	04 c0       	rjmp	.+8      	; 0x87cc <__fp_round+0x20>
    87c4:	6f 5f       	subi	r22, 0xFF	; 255
    87c6:	7f 4f       	sbci	r23, 0xFF	; 255
    87c8:	8f 4f       	sbci	r24, 0xFF	; 255
    87ca:	9f 4f       	sbci	r25, 0xFF	; 255
    87cc:	08 95       	ret

000087ce <__fp_split3>:
    87ce:	57 fd       	sbrc	r21, 7
    87d0:	90 58       	subi	r25, 0x80	; 128
    87d2:	44 0f       	add	r20, r20
    87d4:	55 1f       	adc	r21, r21
    87d6:	59 f0       	breq	.+22     	; 0x87ee <__fp_splitA+0x10>
    87d8:	5f 3f       	cpi	r21, 0xFF	; 255
    87da:	71 f0       	breq	.+28     	; 0x87f8 <__fp_splitA+0x1a>
    87dc:	47 95       	ror	r20

000087de <__fp_splitA>:
    87de:	88 0f       	add	r24, r24
    87e0:	97 fb       	bst	r25, 7
    87e2:	99 1f       	adc	r25, r25
    87e4:	61 f0       	breq	.+24     	; 0x87fe <__fp_splitA+0x20>
    87e6:	9f 3f       	cpi	r25, 0xFF	; 255
    87e8:	79 f0       	breq	.+30     	; 0x8808 <__fp_splitA+0x2a>
    87ea:	87 95       	ror	r24
    87ec:	08 95       	ret
    87ee:	12 16       	cp	r1, r18
    87f0:	13 06       	cpc	r1, r19
    87f2:	14 06       	cpc	r1, r20
    87f4:	55 1f       	adc	r21, r21
    87f6:	f2 cf       	rjmp	.-28     	; 0x87dc <__fp_split3+0xe>
    87f8:	46 95       	lsr	r20
    87fa:	f1 df       	rcall	.-30     	; 0x87de <__fp_splitA>
    87fc:	08 c0       	rjmp	.+16     	; 0x880e <__fp_splitA+0x30>
    87fe:	16 16       	cp	r1, r22
    8800:	17 06       	cpc	r1, r23
    8802:	18 06       	cpc	r1, r24
    8804:	99 1f       	adc	r25, r25
    8806:	f1 cf       	rjmp	.-30     	; 0x87ea <__fp_splitA+0xc>
    8808:	86 95       	lsr	r24
    880a:	71 05       	cpc	r23, r1
    880c:	61 05       	cpc	r22, r1
    880e:	08 94       	sec
    8810:	08 95       	ret

00008812 <__fp_zero>:
    8812:	e8 94       	clt

00008814 <__fp_szero>:
    8814:	bb 27       	eor	r27, r27
    8816:	66 27       	eor	r22, r22
    8818:	77 27       	eor	r23, r23
    881a:	cb 01       	movw	r24, r22
    881c:	97 f9       	bld	r25, 7
    881e:	08 95       	ret

00008820 <__gesf2>:
    8820:	8a df       	rcall	.-236    	; 0x8736 <__fp_cmp>
    8822:	08 f4       	brcc	.+2      	; 0x8826 <__gesf2+0x6>
    8824:	8f ef       	ldi	r24, 0xFF	; 255
    8826:	08 95       	ret

00008828 <__mulsf3>:
    8828:	0b d0       	rcall	.+22     	; 0x8840 <__mulsf3x>
    882a:	c0 cf       	rjmp	.-128    	; 0x87ac <__fp_round>
    882c:	b1 df       	rcall	.-158    	; 0x8790 <__fp_pscA>
    882e:	28 f0       	brcs	.+10     	; 0x883a <__mulsf3+0x12>
    8830:	b6 df       	rcall	.-148    	; 0x879e <__fp_pscB>
    8832:	18 f0       	brcs	.+6      	; 0x883a <__mulsf3+0x12>
    8834:	95 23       	and	r25, r21
    8836:	09 f0       	breq	.+2      	; 0x883a <__mulsf3+0x12>
    8838:	a2 cf       	rjmp	.-188    	; 0x877e <__fp_inf>
    883a:	a7 cf       	rjmp	.-178    	; 0x878a <__fp_nan>
    883c:	11 24       	eor	r1, r1
    883e:	ea cf       	rjmp	.-44     	; 0x8814 <__fp_szero>

00008840 <__mulsf3x>:
    8840:	c6 df       	rcall	.-116    	; 0x87ce <__fp_split3>
    8842:	a0 f3       	brcs	.-24     	; 0x882c <__mulsf3+0x4>

00008844 <__mulsf3_pse>:
    8844:	95 9f       	mul	r25, r21
    8846:	d1 f3       	breq	.-12     	; 0x883c <__mulsf3+0x14>
    8848:	95 0f       	add	r25, r21
    884a:	50 e0       	ldi	r21, 0x00	; 0
    884c:	55 1f       	adc	r21, r21
    884e:	62 9f       	mul	r22, r18
    8850:	f0 01       	movw	r30, r0
    8852:	72 9f       	mul	r23, r18
    8854:	bb 27       	eor	r27, r27
    8856:	f0 0d       	add	r31, r0
    8858:	b1 1d       	adc	r27, r1
    885a:	63 9f       	mul	r22, r19
    885c:	aa 27       	eor	r26, r26
    885e:	f0 0d       	add	r31, r0
    8860:	b1 1d       	adc	r27, r1
    8862:	aa 1f       	adc	r26, r26
    8864:	64 9f       	mul	r22, r20
    8866:	66 27       	eor	r22, r22
    8868:	b0 0d       	add	r27, r0
    886a:	a1 1d       	adc	r26, r1
    886c:	66 1f       	adc	r22, r22
    886e:	82 9f       	mul	r24, r18
    8870:	22 27       	eor	r18, r18
    8872:	b0 0d       	add	r27, r0
    8874:	a1 1d       	adc	r26, r1
    8876:	62 1f       	adc	r22, r18
    8878:	73 9f       	mul	r23, r19
    887a:	b0 0d       	add	r27, r0
    887c:	a1 1d       	adc	r26, r1
    887e:	62 1f       	adc	r22, r18
    8880:	83 9f       	mul	r24, r19
    8882:	a0 0d       	add	r26, r0
    8884:	61 1d       	adc	r22, r1
    8886:	22 1f       	adc	r18, r18
    8888:	74 9f       	mul	r23, r20
    888a:	33 27       	eor	r19, r19
    888c:	a0 0d       	add	r26, r0
    888e:	61 1d       	adc	r22, r1
    8890:	23 1f       	adc	r18, r19
    8892:	84 9f       	mul	r24, r20
    8894:	60 0d       	add	r22, r0
    8896:	21 1d       	adc	r18, r1
    8898:	82 2f       	mov	r24, r18
    889a:	76 2f       	mov	r23, r22
    889c:	6a 2f       	mov	r22, r26
    889e:	11 24       	eor	r1, r1
    88a0:	9f 57       	subi	r25, 0x7F	; 127
    88a2:	50 40       	sbci	r21, 0x00	; 0
    88a4:	8a f0       	brmi	.+34     	; 0x88c8 <__mulsf3_pse+0x84>
    88a6:	e1 f0       	breq	.+56     	; 0x88e0 <__mulsf3_pse+0x9c>
    88a8:	88 23       	and	r24, r24
    88aa:	4a f0       	brmi	.+18     	; 0x88be <__mulsf3_pse+0x7a>
    88ac:	ee 0f       	add	r30, r30
    88ae:	ff 1f       	adc	r31, r31
    88b0:	bb 1f       	adc	r27, r27
    88b2:	66 1f       	adc	r22, r22
    88b4:	77 1f       	adc	r23, r23
    88b6:	88 1f       	adc	r24, r24
    88b8:	91 50       	subi	r25, 0x01	; 1
    88ba:	50 40       	sbci	r21, 0x00	; 0
    88bc:	a9 f7       	brne	.-22     	; 0x88a8 <__mulsf3_pse+0x64>
    88be:	9e 3f       	cpi	r25, 0xFE	; 254
    88c0:	51 05       	cpc	r21, r1
    88c2:	70 f0       	brcs	.+28     	; 0x88e0 <__mulsf3_pse+0x9c>
    88c4:	5c cf       	rjmp	.-328    	; 0x877e <__fp_inf>
    88c6:	a6 cf       	rjmp	.-180    	; 0x8814 <__fp_szero>
    88c8:	5f 3f       	cpi	r21, 0xFF	; 255
    88ca:	ec f3       	brlt	.-6      	; 0x88c6 <__mulsf3_pse+0x82>
    88cc:	98 3e       	cpi	r25, 0xE8	; 232
    88ce:	dc f3       	brlt	.-10     	; 0x88c6 <__mulsf3_pse+0x82>
    88d0:	86 95       	lsr	r24
    88d2:	77 95       	ror	r23
    88d4:	67 95       	ror	r22
    88d6:	b7 95       	ror	r27
    88d8:	f7 95       	ror	r31
    88da:	e7 95       	ror	r30
    88dc:	9f 5f       	subi	r25, 0xFF	; 255
    88de:	c1 f7       	brne	.-16     	; 0x88d0 <__mulsf3_pse+0x8c>
    88e0:	fe 2b       	or	r31, r30
    88e2:	88 0f       	add	r24, r24
    88e4:	91 1d       	adc	r25, r1
    88e6:	96 95       	lsr	r25
    88e8:	87 95       	ror	r24
    88ea:	97 f9       	bld	r25, 7
    88ec:	08 95       	ret

000088ee <__unordsf2>:
    88ee:	23 df       	rcall	.-442    	; 0x8736 <__fp_cmp>
    88f0:	88 0b       	sbc	r24, r24
    88f2:	99 0b       	sbc	r25, r25
    88f4:	08 95       	ret

000088f6 <__divmodhi4>:
    88f6:	97 fb       	bst	r25, 7
    88f8:	07 2e       	mov	r0, r23
    88fa:	16 f4       	brtc	.+4      	; 0x8900 <__divmodhi4+0xa>
    88fc:	00 94       	com	r0
    88fe:	06 d0       	rcall	.+12     	; 0x890c <__divmodhi4_neg1>
    8900:	77 fd       	sbrc	r23, 7
    8902:	08 d0       	rcall	.+16     	; 0x8914 <__divmodhi4_neg2>
    8904:	35 d0       	rcall	.+106    	; 0x8970 <__udivmodhi4>
    8906:	07 fc       	sbrc	r0, 7
    8908:	05 d0       	rcall	.+10     	; 0x8914 <__divmodhi4_neg2>
    890a:	3e f4       	brtc	.+14     	; 0x891a <__divmodhi4_exit>

0000890c <__divmodhi4_neg1>:
    890c:	90 95       	com	r25
    890e:	81 95       	neg	r24
    8910:	9f 4f       	sbci	r25, 0xFF	; 255
    8912:	08 95       	ret

00008914 <__divmodhi4_neg2>:
    8914:	70 95       	com	r23
    8916:	61 95       	neg	r22
    8918:	7f 4f       	sbci	r23, 0xFF	; 255

0000891a <__divmodhi4_exit>:
    891a:	08 95       	ret

0000891c <__udivmodsi4>:
    891c:	a1 e2       	ldi	r26, 0x21	; 33
    891e:	1a 2e       	mov	r1, r26
    8920:	aa 1b       	sub	r26, r26
    8922:	bb 1b       	sub	r27, r27
    8924:	fd 01       	movw	r30, r26
    8926:	0d c0       	rjmp	.+26     	; 0x8942 <__udivmodsi4_ep>

00008928 <__udivmodsi4_loop>:
    8928:	aa 1f       	adc	r26, r26
    892a:	bb 1f       	adc	r27, r27
    892c:	ee 1f       	adc	r30, r30
    892e:	ff 1f       	adc	r31, r31
    8930:	a2 17       	cp	r26, r18
    8932:	b3 07       	cpc	r27, r19
    8934:	e4 07       	cpc	r30, r20
    8936:	f5 07       	cpc	r31, r21
    8938:	20 f0       	brcs	.+8      	; 0x8942 <__udivmodsi4_ep>
    893a:	a2 1b       	sub	r26, r18
    893c:	b3 0b       	sbc	r27, r19
    893e:	e4 0b       	sbc	r30, r20
    8940:	f5 0b       	sbc	r31, r21

00008942 <__udivmodsi4_ep>:
    8942:	66 1f       	adc	r22, r22
    8944:	77 1f       	adc	r23, r23
    8946:	88 1f       	adc	r24, r24
    8948:	99 1f       	adc	r25, r25
    894a:	1a 94       	dec	r1
    894c:	69 f7       	brne	.-38     	; 0x8928 <__udivmodsi4_loop>
    894e:	60 95       	com	r22
    8950:	70 95       	com	r23
    8952:	80 95       	com	r24
    8954:	90 95       	com	r25
    8956:	9b 01       	movw	r18, r22
    8958:	ac 01       	movw	r20, r24
    895a:	bd 01       	movw	r22, r26
    895c:	cf 01       	movw	r24, r30
    895e:	08 95       	ret

00008960 <__tablejump2__>:
    8960:	ee 0f       	add	r30, r30
    8962:	ff 1f       	adc	r31, r31
    8964:	88 1f       	adc	r24, r24
    8966:	8b bf       	out	0x3b, r24	; 59
    8968:	07 90       	elpm	r0, Z+
    896a:	f6 91       	elpm	r31, Z
    896c:	e0 2d       	mov	r30, r0
    896e:	19 94       	eijmp

00008970 <__udivmodhi4>:
    8970:	aa 1b       	sub	r26, r26
    8972:	bb 1b       	sub	r27, r27
    8974:	51 e1       	ldi	r21, 0x11	; 17
    8976:	07 c0       	rjmp	.+14     	; 0x8986 <__udivmodhi4_ep>

00008978 <__udivmodhi4_loop>:
    8978:	aa 1f       	adc	r26, r26
    897a:	bb 1f       	adc	r27, r27
    897c:	a6 17       	cp	r26, r22
    897e:	b7 07       	cpc	r27, r23
    8980:	10 f0       	brcs	.+4      	; 0x8986 <__udivmodhi4_ep>
    8982:	a6 1b       	sub	r26, r22
    8984:	b7 0b       	sbc	r27, r23

00008986 <__udivmodhi4_ep>:
    8986:	88 1f       	adc	r24, r24
    8988:	99 1f       	adc	r25, r25
    898a:	5a 95       	dec	r21
    898c:	a9 f7       	brne	.-22     	; 0x8978 <__udivmodhi4_loop>
    898e:	80 95       	com	r24
    8990:	90 95       	com	r25
    8992:	bc 01       	movw	r22, r24
    8994:	cd 01       	movw	r24, r26
    8996:	08 95       	ret

00008998 <malloc>:
    8998:	cf 93       	push	r28
    899a:	df 93       	push	r29
    899c:	82 30       	cpi	r24, 0x02	; 2
    899e:	91 05       	cpc	r25, r1
    89a0:	10 f4       	brcc	.+4      	; 0x89a6 <malloc+0xe>
    89a2:	82 e0       	ldi	r24, 0x02	; 2
    89a4:	90 e0       	ldi	r25, 0x00	; 0
    89a6:	e0 91 1e 0b 	lds	r30, 0x0B1E
    89aa:	f0 91 1f 0b 	lds	r31, 0x0B1F
    89ae:	20 e0       	ldi	r18, 0x00	; 0
    89b0:	30 e0       	ldi	r19, 0x00	; 0
    89b2:	c0 e0       	ldi	r28, 0x00	; 0
    89b4:	d0 e0       	ldi	r29, 0x00	; 0
    89b6:	30 97       	sbiw	r30, 0x00	; 0
    89b8:	11 f1       	breq	.+68     	; 0x89fe <malloc+0x66>
    89ba:	40 81       	ld	r20, Z
    89bc:	51 81       	ldd	r21, Z+1	; 0x01
    89be:	48 17       	cp	r20, r24
    89c0:	59 07       	cpc	r21, r25
    89c2:	c0 f0       	brcs	.+48     	; 0x89f4 <malloc+0x5c>
    89c4:	48 17       	cp	r20, r24
    89c6:	59 07       	cpc	r21, r25
    89c8:	61 f4       	brne	.+24     	; 0x89e2 <malloc+0x4a>
    89ca:	82 81       	ldd	r24, Z+2	; 0x02
    89cc:	93 81       	ldd	r25, Z+3	; 0x03
    89ce:	20 97       	sbiw	r28, 0x00	; 0
    89d0:	19 f0       	breq	.+6      	; 0x89d8 <malloc+0x40>
    89d2:	9b 83       	std	Y+3, r25	; 0x03
    89d4:	8a 83       	std	Y+2, r24	; 0x02
    89d6:	2b c0       	rjmp	.+86     	; 0x8a2e <malloc+0x96>
    89d8:	90 93 1f 0b 	sts	0x0B1F, r25
    89dc:	80 93 1e 0b 	sts	0x0B1E, r24
    89e0:	26 c0       	rjmp	.+76     	; 0x8a2e <malloc+0x96>
    89e2:	21 15       	cp	r18, r1
    89e4:	31 05       	cpc	r19, r1
    89e6:	19 f0       	breq	.+6      	; 0x89ee <malloc+0x56>
    89e8:	42 17       	cp	r20, r18
    89ea:	53 07       	cpc	r21, r19
    89ec:	18 f4       	brcc	.+6      	; 0x89f4 <malloc+0x5c>
    89ee:	9a 01       	movw	r18, r20
    89f0:	be 01       	movw	r22, r28
    89f2:	df 01       	movw	r26, r30
    89f4:	ef 01       	movw	r28, r30
    89f6:	02 80       	ldd	r0, Z+2	; 0x02
    89f8:	f3 81       	ldd	r31, Z+3	; 0x03
    89fa:	e0 2d       	mov	r30, r0
    89fc:	dc cf       	rjmp	.-72     	; 0x89b6 <malloc+0x1e>
    89fe:	21 15       	cp	r18, r1
    8a00:	31 05       	cpc	r19, r1
    8a02:	09 f1       	breq	.+66     	; 0x8a46 <malloc+0xae>
    8a04:	28 1b       	sub	r18, r24
    8a06:	39 0b       	sbc	r19, r25
    8a08:	24 30       	cpi	r18, 0x04	; 4
    8a0a:	31 05       	cpc	r19, r1
    8a0c:	90 f4       	brcc	.+36     	; 0x8a32 <malloc+0x9a>
    8a0e:	12 96       	adiw	r26, 0x02	; 2
    8a10:	8d 91       	ld	r24, X+
    8a12:	9c 91       	ld	r25, X
    8a14:	13 97       	sbiw	r26, 0x03	; 3
    8a16:	61 15       	cp	r22, r1
    8a18:	71 05       	cpc	r23, r1
    8a1a:	21 f0       	breq	.+8      	; 0x8a24 <malloc+0x8c>
    8a1c:	fb 01       	movw	r30, r22
    8a1e:	93 83       	std	Z+3, r25	; 0x03
    8a20:	82 83       	std	Z+2, r24	; 0x02
    8a22:	04 c0       	rjmp	.+8      	; 0x8a2c <malloc+0x94>
    8a24:	90 93 1f 0b 	sts	0x0B1F, r25
    8a28:	80 93 1e 0b 	sts	0x0B1E, r24
    8a2c:	fd 01       	movw	r30, r26
    8a2e:	32 96       	adiw	r30, 0x02	; 2
    8a30:	44 c0       	rjmp	.+136    	; 0x8aba <malloc+0x122>
    8a32:	fd 01       	movw	r30, r26
    8a34:	e2 0f       	add	r30, r18
    8a36:	f3 1f       	adc	r31, r19
    8a38:	81 93       	st	Z+, r24
    8a3a:	91 93       	st	Z+, r25
    8a3c:	22 50       	subi	r18, 0x02	; 2
    8a3e:	31 09       	sbc	r19, r1
    8a40:	2d 93       	st	X+, r18
    8a42:	3c 93       	st	X, r19
    8a44:	3a c0       	rjmp	.+116    	; 0x8aba <malloc+0x122>
    8a46:	20 91 1c 0b 	lds	r18, 0x0B1C
    8a4a:	30 91 1d 0b 	lds	r19, 0x0B1D
    8a4e:	23 2b       	or	r18, r19
    8a50:	41 f4       	brne	.+16     	; 0x8a62 <malloc+0xca>
    8a52:	20 91 02 02 	lds	r18, 0x0202
    8a56:	30 91 03 02 	lds	r19, 0x0203
    8a5a:	30 93 1d 0b 	sts	0x0B1D, r19
    8a5e:	20 93 1c 0b 	sts	0x0B1C, r18
    8a62:	20 91 00 02 	lds	r18, 0x0200
    8a66:	30 91 01 02 	lds	r19, 0x0201
    8a6a:	21 15       	cp	r18, r1
    8a6c:	31 05       	cpc	r19, r1
    8a6e:	41 f4       	brne	.+16     	; 0x8a80 <malloc+0xe8>
    8a70:	2d b7       	in	r18, 0x3d	; 61
    8a72:	3e b7       	in	r19, 0x3e	; 62
    8a74:	40 91 04 02 	lds	r20, 0x0204
    8a78:	50 91 05 02 	lds	r21, 0x0205
    8a7c:	24 1b       	sub	r18, r20
    8a7e:	35 0b       	sbc	r19, r21
    8a80:	e0 91 1c 0b 	lds	r30, 0x0B1C
    8a84:	f0 91 1d 0b 	lds	r31, 0x0B1D
    8a88:	e2 17       	cp	r30, r18
    8a8a:	f3 07       	cpc	r31, r19
    8a8c:	a0 f4       	brcc	.+40     	; 0x8ab6 <malloc+0x11e>
    8a8e:	2e 1b       	sub	r18, r30
    8a90:	3f 0b       	sbc	r19, r31
    8a92:	28 17       	cp	r18, r24
    8a94:	39 07       	cpc	r19, r25
    8a96:	78 f0       	brcs	.+30     	; 0x8ab6 <malloc+0x11e>
    8a98:	ac 01       	movw	r20, r24
    8a9a:	4e 5f       	subi	r20, 0xFE	; 254
    8a9c:	5f 4f       	sbci	r21, 0xFF	; 255
    8a9e:	24 17       	cp	r18, r20
    8aa0:	35 07       	cpc	r19, r21
    8aa2:	48 f0       	brcs	.+18     	; 0x8ab6 <malloc+0x11e>
    8aa4:	4e 0f       	add	r20, r30
    8aa6:	5f 1f       	adc	r21, r31
    8aa8:	50 93 1d 0b 	sts	0x0B1D, r21
    8aac:	40 93 1c 0b 	sts	0x0B1C, r20
    8ab0:	81 93       	st	Z+, r24
    8ab2:	91 93       	st	Z+, r25
    8ab4:	02 c0       	rjmp	.+4      	; 0x8aba <malloc+0x122>
    8ab6:	e0 e0       	ldi	r30, 0x00	; 0
    8ab8:	f0 e0       	ldi	r31, 0x00	; 0
    8aba:	cf 01       	movw	r24, r30
    8abc:	df 91       	pop	r29
    8abe:	cf 91       	pop	r28
    8ac0:	08 95       	ret

00008ac2 <free>:
    8ac2:	0f 93       	push	r16
    8ac4:	1f 93       	push	r17
    8ac6:	cf 93       	push	r28
    8ac8:	df 93       	push	r29
    8aca:	00 97       	sbiw	r24, 0x00	; 0
    8acc:	09 f4       	brne	.+2      	; 0x8ad0 <free+0xe>
    8ace:	8c c0       	rjmp	.+280    	; 0x8be8 <free+0x126>
    8ad0:	fc 01       	movw	r30, r24
    8ad2:	32 97       	sbiw	r30, 0x02	; 2
    8ad4:	13 82       	std	Z+3, r1	; 0x03
    8ad6:	12 82       	std	Z+2, r1	; 0x02
    8ad8:	00 91 1e 0b 	lds	r16, 0x0B1E
    8adc:	10 91 1f 0b 	lds	r17, 0x0B1F
    8ae0:	01 15       	cp	r16, r1
    8ae2:	11 05       	cpc	r17, r1
    8ae4:	81 f4       	brne	.+32     	; 0x8b06 <free+0x44>
    8ae6:	20 81       	ld	r18, Z
    8ae8:	31 81       	ldd	r19, Z+1	; 0x01
    8aea:	82 0f       	add	r24, r18
    8aec:	93 1f       	adc	r25, r19
    8aee:	20 91 1c 0b 	lds	r18, 0x0B1C
    8af2:	30 91 1d 0b 	lds	r19, 0x0B1D
    8af6:	28 17       	cp	r18, r24
    8af8:	39 07       	cpc	r19, r25
    8afa:	79 f5       	brne	.+94     	; 0x8b5a <free+0x98>
    8afc:	f0 93 1d 0b 	sts	0x0B1D, r31
    8b00:	e0 93 1c 0b 	sts	0x0B1C, r30
    8b04:	71 c0       	rjmp	.+226    	; 0x8be8 <free+0x126>
    8b06:	d8 01       	movw	r26, r16
    8b08:	40 e0       	ldi	r20, 0x00	; 0
    8b0a:	50 e0       	ldi	r21, 0x00	; 0
    8b0c:	ae 17       	cp	r26, r30
    8b0e:	bf 07       	cpc	r27, r31
    8b10:	50 f4       	brcc	.+20     	; 0x8b26 <free+0x64>
    8b12:	12 96       	adiw	r26, 0x02	; 2
    8b14:	2d 91       	ld	r18, X+
    8b16:	3c 91       	ld	r19, X
    8b18:	13 97       	sbiw	r26, 0x03	; 3
    8b1a:	ad 01       	movw	r20, r26
    8b1c:	21 15       	cp	r18, r1
    8b1e:	31 05       	cpc	r19, r1
    8b20:	09 f1       	breq	.+66     	; 0x8b64 <free+0xa2>
    8b22:	d9 01       	movw	r26, r18
    8b24:	f3 cf       	rjmp	.-26     	; 0x8b0c <free+0x4a>
    8b26:	9d 01       	movw	r18, r26
    8b28:	da 01       	movw	r26, r20
    8b2a:	33 83       	std	Z+3, r19	; 0x03
    8b2c:	22 83       	std	Z+2, r18	; 0x02
    8b2e:	60 81       	ld	r22, Z
    8b30:	71 81       	ldd	r23, Z+1	; 0x01
    8b32:	86 0f       	add	r24, r22
    8b34:	97 1f       	adc	r25, r23
    8b36:	82 17       	cp	r24, r18
    8b38:	93 07       	cpc	r25, r19
    8b3a:	69 f4       	brne	.+26     	; 0x8b56 <free+0x94>
    8b3c:	ec 01       	movw	r28, r24
    8b3e:	28 81       	ld	r18, Y
    8b40:	39 81       	ldd	r19, Y+1	; 0x01
    8b42:	26 0f       	add	r18, r22
    8b44:	37 1f       	adc	r19, r23
    8b46:	2e 5f       	subi	r18, 0xFE	; 254
    8b48:	3f 4f       	sbci	r19, 0xFF	; 255
    8b4a:	31 83       	std	Z+1, r19	; 0x01
    8b4c:	20 83       	st	Z, r18
    8b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    8b50:	9b 81       	ldd	r25, Y+3	; 0x03
    8b52:	93 83       	std	Z+3, r25	; 0x03
    8b54:	82 83       	std	Z+2, r24	; 0x02
    8b56:	45 2b       	or	r20, r21
    8b58:	29 f4       	brne	.+10     	; 0x8b64 <free+0xa2>
    8b5a:	f0 93 1f 0b 	sts	0x0B1F, r31
    8b5e:	e0 93 1e 0b 	sts	0x0B1E, r30
    8b62:	42 c0       	rjmp	.+132    	; 0x8be8 <free+0x126>
    8b64:	13 96       	adiw	r26, 0x03	; 3
    8b66:	fc 93       	st	X, r31
    8b68:	ee 93       	st	-X, r30
    8b6a:	12 97       	sbiw	r26, 0x02	; 2
    8b6c:	ed 01       	movw	r28, r26
    8b6e:	49 91       	ld	r20, Y+
    8b70:	59 91       	ld	r21, Y+
    8b72:	9e 01       	movw	r18, r28
    8b74:	24 0f       	add	r18, r20
    8b76:	35 1f       	adc	r19, r21
    8b78:	e2 17       	cp	r30, r18
    8b7a:	f3 07       	cpc	r31, r19
    8b7c:	71 f4       	brne	.+28     	; 0x8b9a <free+0xd8>
    8b7e:	80 81       	ld	r24, Z
    8b80:	91 81       	ldd	r25, Z+1	; 0x01
    8b82:	84 0f       	add	r24, r20
    8b84:	95 1f       	adc	r25, r21
    8b86:	02 96       	adiw	r24, 0x02	; 2
    8b88:	11 96       	adiw	r26, 0x01	; 1
    8b8a:	9c 93       	st	X, r25
    8b8c:	8e 93       	st	-X, r24
    8b8e:	82 81       	ldd	r24, Z+2	; 0x02
    8b90:	93 81       	ldd	r25, Z+3	; 0x03
    8b92:	13 96       	adiw	r26, 0x03	; 3
    8b94:	9c 93       	st	X, r25
    8b96:	8e 93       	st	-X, r24
    8b98:	12 97       	sbiw	r26, 0x02	; 2
    8b9a:	e0 e0       	ldi	r30, 0x00	; 0
    8b9c:	f0 e0       	ldi	r31, 0x00	; 0
    8b9e:	d8 01       	movw	r26, r16
    8ba0:	12 96       	adiw	r26, 0x02	; 2
    8ba2:	8d 91       	ld	r24, X+
    8ba4:	9c 91       	ld	r25, X
    8ba6:	13 97       	sbiw	r26, 0x03	; 3
    8ba8:	00 97       	sbiw	r24, 0x00	; 0
    8baa:	19 f0       	breq	.+6      	; 0x8bb2 <free+0xf0>
    8bac:	f8 01       	movw	r30, r16
    8bae:	8c 01       	movw	r16, r24
    8bb0:	f6 cf       	rjmp	.-20     	; 0x8b9e <free+0xdc>
    8bb2:	8d 91       	ld	r24, X+
    8bb4:	9c 91       	ld	r25, X
    8bb6:	98 01       	movw	r18, r16
    8bb8:	2e 5f       	subi	r18, 0xFE	; 254
    8bba:	3f 4f       	sbci	r19, 0xFF	; 255
    8bbc:	82 0f       	add	r24, r18
    8bbe:	93 1f       	adc	r25, r19
    8bc0:	20 91 1c 0b 	lds	r18, 0x0B1C
    8bc4:	30 91 1d 0b 	lds	r19, 0x0B1D
    8bc8:	28 17       	cp	r18, r24
    8bca:	39 07       	cpc	r19, r25
    8bcc:	69 f4       	brne	.+26     	; 0x8be8 <free+0x126>
    8bce:	30 97       	sbiw	r30, 0x00	; 0
    8bd0:	29 f4       	brne	.+10     	; 0x8bdc <free+0x11a>
    8bd2:	10 92 1f 0b 	sts	0x0B1F, r1
    8bd6:	10 92 1e 0b 	sts	0x0B1E, r1
    8bda:	02 c0       	rjmp	.+4      	; 0x8be0 <free+0x11e>
    8bdc:	13 82       	std	Z+3, r1	; 0x03
    8bde:	12 82       	std	Z+2, r1	; 0x02
    8be0:	10 93 1d 0b 	sts	0x0B1D, r17
    8be4:	00 93 1c 0b 	sts	0x0B1C, r16
    8be8:	df 91       	pop	r29
    8bea:	cf 91       	pop	r28
    8bec:	1f 91       	pop	r17
    8bee:	0f 91       	pop	r16
    8bf0:	08 95       	ret

00008bf2 <realloc>:
    8bf2:	6f 92       	push	r6
    8bf4:	7f 92       	push	r7
    8bf6:	8f 92       	push	r8
    8bf8:	9f 92       	push	r9
    8bfa:	af 92       	push	r10
    8bfc:	bf 92       	push	r11
    8bfe:	cf 92       	push	r12
    8c00:	df 92       	push	r13
    8c02:	ef 92       	push	r14
    8c04:	ff 92       	push	r15
    8c06:	0f 93       	push	r16
    8c08:	1f 93       	push	r17
    8c0a:	cf 93       	push	r28
    8c0c:	df 93       	push	r29
    8c0e:	ec 01       	movw	r28, r24
    8c10:	00 97       	sbiw	r24, 0x00	; 0
    8c12:	81 f4       	brne	.+32     	; 0x8c34 <realloc+0x42>
    8c14:	cb 01       	movw	r24, r22
    8c16:	df 91       	pop	r29
    8c18:	cf 91       	pop	r28
    8c1a:	1f 91       	pop	r17
    8c1c:	0f 91       	pop	r16
    8c1e:	ff 90       	pop	r15
    8c20:	ef 90       	pop	r14
    8c22:	df 90       	pop	r13
    8c24:	cf 90       	pop	r12
    8c26:	bf 90       	pop	r11
    8c28:	af 90       	pop	r10
    8c2a:	9f 90       	pop	r9
    8c2c:	8f 90       	pop	r8
    8c2e:	7f 90       	pop	r7
    8c30:	6f 90       	pop	r6
    8c32:	b2 ce       	rjmp	.-668    	; 0x8998 <malloc>
    8c34:	fc 01       	movw	r30, r24
    8c36:	e6 0f       	add	r30, r22
    8c38:	f7 1f       	adc	r31, r23
    8c3a:	9c 01       	movw	r18, r24
    8c3c:	22 50       	subi	r18, 0x02	; 2
    8c3e:	31 09       	sbc	r19, r1
    8c40:	e2 17       	cp	r30, r18
    8c42:	f3 07       	cpc	r31, r19
    8c44:	08 f4       	brcc	.+2      	; 0x8c48 <realloc+0x56>
    8c46:	a8 c0       	rjmp	.+336    	; 0x8d98 <realloc+0x1a6>
    8c48:	d9 01       	movw	r26, r18
    8c4a:	0d 91       	ld	r16, X+
    8c4c:	1c 91       	ld	r17, X
    8c4e:	11 97       	sbiw	r26, 0x01	; 1
    8c50:	06 17       	cp	r16, r22
    8c52:	17 07       	cpc	r17, r23
    8c54:	a8 f0       	brcs	.+42     	; 0x8c80 <realloc+0x8e>
    8c56:	05 30       	cpi	r16, 0x05	; 5
    8c58:	11 05       	cpc	r17, r1
    8c5a:	08 f4       	brcc	.+2      	; 0x8c5e <realloc+0x6c>
    8c5c:	9b c0       	rjmp	.+310    	; 0x8d94 <realloc+0x1a2>
    8c5e:	c8 01       	movw	r24, r16
    8c60:	04 97       	sbiw	r24, 0x04	; 4
    8c62:	86 17       	cp	r24, r22
    8c64:	97 07       	cpc	r25, r23
    8c66:	08 f4       	brcc	.+2      	; 0x8c6a <realloc+0x78>
    8c68:	95 c0       	rjmp	.+298    	; 0x8d94 <realloc+0x1a2>
    8c6a:	02 50       	subi	r16, 0x02	; 2
    8c6c:	11 09       	sbc	r17, r1
    8c6e:	06 1b       	sub	r16, r22
    8c70:	17 0b       	sbc	r17, r23
    8c72:	01 93       	st	Z+, r16
    8c74:	11 93       	st	Z+, r17
    8c76:	6d 93       	st	X+, r22
    8c78:	7c 93       	st	X, r23
    8c7a:	cf 01       	movw	r24, r30
    8c7c:	22 df       	rcall	.-444    	; 0x8ac2 <free>
    8c7e:	8a c0       	rjmp	.+276    	; 0x8d94 <realloc+0x1a2>
    8c80:	5b 01       	movw	r10, r22
    8c82:	a0 1a       	sub	r10, r16
    8c84:	b1 0a       	sbc	r11, r17
    8c86:	4c 01       	movw	r8, r24
    8c88:	80 0e       	add	r8, r16
    8c8a:	91 1e       	adc	r9, r17
    8c8c:	a0 91 1e 0b 	lds	r26, 0x0B1E
    8c90:	b0 91 1f 0b 	lds	r27, 0x0B1F
    8c94:	40 e0       	ldi	r20, 0x00	; 0
    8c96:	50 e0       	ldi	r21, 0x00	; 0
    8c98:	e1 2c       	mov	r14, r1
    8c9a:	f1 2c       	mov	r15, r1
    8c9c:	10 97       	sbiw	r26, 0x00	; 0
    8c9e:	09 f4       	brne	.+2      	; 0x8ca2 <realloc+0xb0>
    8ca0:	4a c0       	rjmp	.+148    	; 0x8d36 <realloc+0x144>
    8ca2:	a8 15       	cp	r26, r8
    8ca4:	b9 05       	cpc	r27, r9
    8ca6:	d1 f5       	brne	.+116    	; 0x8d1c <realloc+0x12a>
    8ca8:	6d 90       	ld	r6, X+
    8caa:	7c 90       	ld	r7, X
    8cac:	11 97       	sbiw	r26, 0x01	; 1
    8cae:	63 01       	movw	r12, r6
    8cb0:	82 e0       	ldi	r24, 0x02	; 2
    8cb2:	c8 0e       	add	r12, r24
    8cb4:	d1 1c       	adc	r13, r1
    8cb6:	ca 14       	cp	r12, r10
    8cb8:	db 04       	cpc	r13, r11
    8cba:	80 f1       	brcs	.+96     	; 0x8d1c <realloc+0x12a>
    8cbc:	a3 01       	movw	r20, r6
    8cbe:	4a 19       	sub	r20, r10
    8cc0:	5b 09       	sbc	r21, r11
    8cc2:	6a 01       	movw	r12, r20
    8cc4:	82 e0       	ldi	r24, 0x02	; 2
    8cc6:	c8 0e       	add	r12, r24
    8cc8:	d1 1c       	adc	r13, r1
    8cca:	12 96       	adiw	r26, 0x02	; 2
    8ccc:	bc 90       	ld	r11, X
    8cce:	12 97       	sbiw	r26, 0x02	; 2
    8cd0:	13 96       	adiw	r26, 0x03	; 3
    8cd2:	ac 91       	ld	r26, X
    8cd4:	b5 e0       	ldi	r27, 0x05	; 5
    8cd6:	cb 16       	cp	r12, r27
    8cd8:	d1 04       	cpc	r13, r1
    8cda:	40 f0       	brcs	.+16     	; 0x8cec <realloc+0xfa>
    8cdc:	b2 82       	std	Z+2, r11	; 0x02
    8cde:	a3 83       	std	Z+3, r26	; 0x03
    8ce0:	51 83       	std	Z+1, r21	; 0x01
    8ce2:	40 83       	st	Z, r20
    8ce4:	d9 01       	movw	r26, r18
    8ce6:	6d 93       	st	X+, r22
    8ce8:	7c 93       	st	X, r23
    8cea:	0a c0       	rjmp	.+20     	; 0x8d00 <realloc+0x10e>
    8cec:	0e 5f       	subi	r16, 0xFE	; 254
    8cee:	1f 4f       	sbci	r17, 0xFF	; 255
    8cf0:	c3 01       	movw	r24, r6
    8cf2:	80 0f       	add	r24, r16
    8cf4:	91 1f       	adc	r25, r17
    8cf6:	f9 01       	movw	r30, r18
    8cf8:	91 83       	std	Z+1, r25	; 0x01
    8cfa:	80 83       	st	Z, r24
    8cfc:	eb 2d       	mov	r30, r11
    8cfe:	fa 2f       	mov	r31, r26
    8d00:	e1 14       	cp	r14, r1
    8d02:	f1 04       	cpc	r15, r1
    8d04:	31 f0       	breq	.+12     	; 0x8d12 <realloc+0x120>
    8d06:	d7 01       	movw	r26, r14
    8d08:	13 96       	adiw	r26, 0x03	; 3
    8d0a:	fc 93       	st	X, r31
    8d0c:	ee 93       	st	-X, r30
    8d0e:	12 97       	sbiw	r26, 0x02	; 2
    8d10:	41 c0       	rjmp	.+130    	; 0x8d94 <realloc+0x1a2>
    8d12:	f0 93 1f 0b 	sts	0x0B1F, r31
    8d16:	e0 93 1e 0b 	sts	0x0B1E, r30
    8d1a:	3c c0       	rjmp	.+120    	; 0x8d94 <realloc+0x1a2>
    8d1c:	8d 91       	ld	r24, X+
    8d1e:	9c 91       	ld	r25, X
    8d20:	11 97       	sbiw	r26, 0x01	; 1
    8d22:	48 17       	cp	r20, r24
    8d24:	59 07       	cpc	r21, r25
    8d26:	08 f4       	brcc	.+2      	; 0x8d2a <realloc+0x138>
    8d28:	ac 01       	movw	r20, r24
    8d2a:	7d 01       	movw	r14, r26
    8d2c:	12 96       	adiw	r26, 0x02	; 2
    8d2e:	0d 90       	ld	r0, X+
    8d30:	bc 91       	ld	r27, X
    8d32:	a0 2d       	mov	r26, r0
    8d34:	b3 cf       	rjmp	.-154    	; 0x8c9c <realloc+0xaa>
    8d36:	80 91 1c 0b 	lds	r24, 0x0B1C
    8d3a:	90 91 1d 0b 	lds	r25, 0x0B1D
    8d3e:	88 15       	cp	r24, r8
    8d40:	99 05       	cpc	r25, r9
    8d42:	e1 f4       	brne	.+56     	; 0x8d7c <realloc+0x18a>
    8d44:	46 17       	cp	r20, r22
    8d46:	57 07       	cpc	r21, r23
    8d48:	c8 f4       	brcc	.+50     	; 0x8d7c <realloc+0x18a>
    8d4a:	80 91 00 02 	lds	r24, 0x0200
    8d4e:	90 91 01 02 	lds	r25, 0x0201
    8d52:	00 97       	sbiw	r24, 0x00	; 0
    8d54:	41 f4       	brne	.+16     	; 0x8d66 <realloc+0x174>
    8d56:	8d b7       	in	r24, 0x3d	; 61
    8d58:	9e b7       	in	r25, 0x3e	; 62
    8d5a:	40 91 04 02 	lds	r20, 0x0204
    8d5e:	50 91 05 02 	lds	r21, 0x0205
    8d62:	84 1b       	sub	r24, r20
    8d64:	95 0b       	sbc	r25, r21
    8d66:	e8 17       	cp	r30, r24
    8d68:	f9 07       	cpc	r31, r25
    8d6a:	b0 f4       	brcc	.+44     	; 0x8d98 <realloc+0x1a6>
    8d6c:	f0 93 1d 0b 	sts	0x0B1D, r31
    8d70:	e0 93 1c 0b 	sts	0x0B1C, r30
    8d74:	f9 01       	movw	r30, r18
    8d76:	71 83       	std	Z+1, r23	; 0x01
    8d78:	60 83       	st	Z, r22
    8d7a:	0c c0       	rjmp	.+24     	; 0x8d94 <realloc+0x1a2>
    8d7c:	cb 01       	movw	r24, r22
    8d7e:	0c de       	rcall	.-1000   	; 0x8998 <malloc>
    8d80:	7c 01       	movw	r14, r24
    8d82:	00 97       	sbiw	r24, 0x00	; 0
    8d84:	49 f0       	breq	.+18     	; 0x8d98 <realloc+0x1a6>
    8d86:	a8 01       	movw	r20, r16
    8d88:	be 01       	movw	r22, r28
    8d8a:	2b d0       	rcall	.+86     	; 0x8de2 <memcpy>
    8d8c:	ce 01       	movw	r24, r28
    8d8e:	99 de       	rcall	.-718    	; 0x8ac2 <free>
    8d90:	c7 01       	movw	r24, r14
    8d92:	04 c0       	rjmp	.+8      	; 0x8d9c <realloc+0x1aa>
    8d94:	ce 01       	movw	r24, r28
    8d96:	02 c0       	rjmp	.+4      	; 0x8d9c <realloc+0x1aa>
    8d98:	80 e0       	ldi	r24, 0x00	; 0
    8d9a:	90 e0       	ldi	r25, 0x00	; 0
    8d9c:	df 91       	pop	r29
    8d9e:	cf 91       	pop	r28
    8da0:	1f 91       	pop	r17
    8da2:	0f 91       	pop	r16
    8da4:	ff 90       	pop	r15
    8da6:	ef 90       	pop	r14
    8da8:	df 90       	pop	r13
    8daa:	cf 90       	pop	r12
    8dac:	bf 90       	pop	r11
    8dae:	af 90       	pop	r10
    8db0:	9f 90       	pop	r9
    8db2:	8f 90       	pop	r8
    8db4:	7f 90       	pop	r7
    8db6:	6f 90       	pop	r6
    8db8:	08 95       	ret

00008dba <abort>:
    8dba:	81 e0       	ldi	r24, 0x01	; 1
    8dbc:	90 e0       	ldi	r25, 0x00	; 0
    8dbe:	f8 94       	cli
    8dc0:	29 c0       	rjmp	.+82     	; 0x8e14 <__do_global_dtors>

00008dc2 <strcpy_P>:
    8dc2:	fb 01       	movw	r30, r22
    8dc4:	dc 01       	movw	r26, r24
    8dc6:	05 90       	lpm	r0, Z+
    8dc8:	0d 92       	st	X+, r0
    8dca:	00 20       	and	r0, r0
    8dcc:	e1 f7       	brne	.-8      	; 0x8dc6 <strcpy_P+0x4>
    8dce:	08 95       	ret

00008dd0 <__strlen_P>:
    8dd0:	fc 01       	movw	r30, r24
    8dd2:	05 90       	lpm	r0, Z+
    8dd4:	00 20       	and	r0, r0
    8dd6:	e9 f7       	brne	.-6      	; 0x8dd2 <__strlen_P+0x2>
    8dd8:	80 95       	com	r24
    8dda:	90 95       	com	r25
    8ddc:	8e 0f       	add	r24, r30
    8dde:	9f 1f       	adc	r25, r31
    8de0:	08 95       	ret

00008de2 <memcpy>:
    8de2:	fb 01       	movw	r30, r22
    8de4:	dc 01       	movw	r26, r24
    8de6:	02 c0       	rjmp	.+4      	; 0x8dec <memcpy+0xa>
    8de8:	01 90       	ld	r0, Z+
    8dea:	0d 92       	st	X+, r0
    8dec:	41 50       	subi	r20, 0x01	; 1
    8dee:	50 40       	sbci	r21, 0x00	; 0
    8df0:	d8 f7       	brcc	.-10     	; 0x8de8 <memcpy+0x6>
    8df2:	08 95       	ret

00008df4 <strcmp>:
    8df4:	fb 01       	movw	r30, r22
    8df6:	dc 01       	movw	r26, r24
    8df8:	8d 91       	ld	r24, X+
    8dfa:	01 90       	ld	r0, Z+
    8dfc:	80 19       	sub	r24, r0
    8dfe:	01 10       	cpse	r0, r1
    8e00:	d9 f3       	breq	.-10     	; 0x8df8 <strcmp+0x4>
    8e02:	99 0b       	sbc	r25, r25
    8e04:	08 95       	ret

00008e06 <strcpy>:
    8e06:	fb 01       	movw	r30, r22
    8e08:	dc 01       	movw	r26, r24
    8e0a:	01 90       	ld	r0, Z+
    8e0c:	0d 92       	st	X+, r0
    8e0e:	00 20       	and	r0, r0
    8e10:	e1 f7       	brne	.-8      	; 0x8e0a <strcpy+0x4>
    8e12:	08 95       	ret

00008e14 <__do_global_dtors>:
    8e14:	12 e0       	ldi	r17, 0x02	; 2
    8e16:	c6 e0       	ldi	r28, 0x06	; 6
    8e18:	d2 e0       	ldi	r29, 0x02	; 2
    8e1a:	00 e0       	ldi	r16, 0x00	; 0
    8e1c:	05 c0       	rjmp	.+10     	; 0x8e28 <__do_global_dtors+0x14>
    8e1e:	80 2f       	mov	r24, r16
    8e20:	fe 01       	movw	r30, r28
    8e22:	9e dd       	rcall	.-1220   	; 0x8960 <__tablejump2__>
    8e24:	21 96       	adiw	r28, 0x01	; 1
    8e26:	01 1d       	adc	r16, r1
    8e28:	c7 30       	cpi	r28, 0x07	; 7
    8e2a:	d1 07       	cpc	r29, r17
    8e2c:	80 e0       	ldi	r24, 0x00	; 0
    8e2e:	08 07       	cpc	r16, r24
    8e30:	b1 f7       	brne	.-20     	; 0x8e1e <__do_global_dtors+0xa>
    8e32:	f8 94       	cli

00008e34 <__stop_program>:
    8e34:	ff cf       	rjmp	.-2      	; 0x8e34 <__stop_program>
