
ProjectNarwhal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000324  00800200  00006bb4  00006c48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006bb4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000007df  00800524  00800524  00006f6c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00006f6c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006f9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001138  00000000  00000000  00006fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00043124  00000000  00000000  00008114  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000086a4  00000000  00000000  0004b238  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000bc32  00000000  00000000  000538dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000381c  00000000  00000000  0005f510  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000058c2  00000000  00000000  00062d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00011d74  00000000  00000000  000685ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000f20  00000000  00000000  0007a362  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	d5 c3       	rjmp	.+1962   	; 0x7ac <__dtors_end>
       2:	00 00       	nop
       4:	0c 94 b0 28 	jmp	0x5160	; 0x5160 <__vector_1>
       8:	0c 94 e1 28 	jmp	0x51c2	; 0x51c2 <__vector_2>
       c:	0c 94 12 29 	jmp	0x5224	; 0x5224 <__vector_3>
      10:	0c 94 43 29 	jmp	0x5286	; 0x5286 <__vector_4>
      14:	0c 94 74 29 	jmp	0x52e8	; 0x52e8 <__vector_5>
      18:	0c 94 a5 29 	jmp	0x534a	; 0x534a <__vector_6>
      1c:	0c 94 d6 29 	jmp	0x53ac	; 0x53ac <__vector_7>
      20:	0c 94 07 2a 	jmp	0x540e	; 0x540e <__vector_8>
      24:	f4 c3       	rjmp	.+2024   	; 0x80e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c3       	rjmp	.+2020   	; 0x80e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c3       	rjmp	.+2016   	; 0x80e <__bad_interrupt>
      2e:	00 00       	nop
      30:	ee c3       	rjmp	.+2012   	; 0x80e <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 51 28 	jmp	0x50a2	; 0x50a2 <__vector_13>
      38:	ea c3       	rjmp	.+2004   	; 0x80e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c3       	rjmp	.+2000   	; 0x80e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c3       	rjmp	.+1996   	; 0x80e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c3       	rjmp	.+1992   	; 0x80e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c3       	rjmp	.+1988   	; 0x80e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c3       	rjmp	.+1984   	; 0x80e <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 57 1d 	jmp	0x3aae	; 0x3aae <__vector_20>
      54:	dc c3       	rjmp	.+1976   	; 0x80e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c3       	rjmp	.+1972   	; 0x80e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 38 2a 	jmp	0x5470	; 0x5470 <__vector_23>
      60:	d6 c3       	rjmp	.+1964   	; 0x80e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 e8 22 	jmp	0x45d0	; 0x45d0 <__vector_25>
      68:	0c 94 24 23 	jmp	0x4648	; 0x4648 <__vector_26>
      6c:	d0 c3       	rjmp	.+1952   	; 0x80e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c3       	rjmp	.+1948   	; 0x80e <__bad_interrupt>
      72:	00 00       	nop
      74:	cc c3       	rjmp	.+1944   	; 0x80e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c3       	rjmp	.+1940   	; 0x80e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c3       	rjmp	.+1936   	; 0x80e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c3       	rjmp	.+1932   	; 0x80e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c3       	rjmp	.+1928   	; 0x80e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c3       	rjmp	.+1924   	; 0x80e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c3       	rjmp	.+1920   	; 0x80e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 83 23 	jmp	0x4706	; 0x4706 <__vector_36>
      94:	0c 94 bf 23 	jmp	0x477e	; 0x477e <__vector_37>
      98:	ba c3       	rjmp	.+1908   	; 0x80e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 7b 1e 	jmp	0x3cf6	; 0x3cf6 <__vector_39>
      a0:	b6 c3       	rjmp	.+1900   	; 0x80e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c3       	rjmp	.+1896   	; 0x80e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c3       	rjmp	.+1892   	; 0x80e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c3       	rjmp	.+1888   	; 0x80e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c3       	rjmp	.+1884   	; 0x80e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c3       	rjmp	.+1880   	; 0x80e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c3       	rjmp	.+1876   	; 0x80e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c3       	rjmp	.+1872   	; 0x80e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c3       	rjmp	.+1868   	; 0x80e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c3       	rjmp	.+1864   	; 0x80e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c3       	rjmp	.+1860   	; 0x80e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 1e 24 	jmp	0x483c	; 0x483c <__vector_51>
      d0:	0c 94 5a 24 	jmp	0x48b4	; 0x48b4 <__vector_52>
      d4:	9c c3       	rjmp	.+1848   	; 0x80e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 b9 24 	jmp	0x4972	; 0x4972 <__vector_54>
      dc:	0c 94 f5 24 	jmp	0x49ea	; 0x49ea <__vector_55>
      e0:	96 c3       	rjmp	.+1836   	; 0x80e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b2 06       	cpc	r11, r18
      e6:	b9 06       	cpc	r11, r25
      e8:	d4 06       	cpc	r13, r20
      ea:	ef 06       	cpc	r14, r31
      ec:	08 07       	cpc	r16, r24
      ee:	1f 07       	cpc	r17, r31
      f0:	38 07       	cpc	r19, r24
      f2:	51 07       	cpc	r21, r17
      f4:	68 07       	cpc	r22, r24
      f6:	6f 07       	cpc	r22, r31
      f8:	88 07       	cpc	r24, r24
      fa:	a1 07       	cpc	r26, r17
      fc:	b8 07       	cpc	r27, r24
      fe:	cf 07       	cpc	r28, r31
     100:	e8 07       	cpc	r30, r24
     102:	01 08       	sbc	r0, r1
     104:	83 1f       	adc	r24, r19
     106:	86 1f       	adc	r24, r22
     108:	86 1f       	adc	r24, r22
     10a:	86 1f       	adc	r24, r22
     10c:	86 1f       	adc	r24, r22
     10e:	86 1f       	adc	r24, r22
     110:	86 1f       	adc	r24, r22
     112:	86 1f       	adc	r24, r22
     114:	9d 1e       	adc	r9, r29
     116:	86 1f       	adc	r24, r22
     118:	86 1f       	adc	r24, r22
     11a:	86 1f       	adc	r24, r22
     11c:	86 1f       	adc	r24, r22
     11e:	86 1f       	adc	r24, r22
     120:	86 1f       	adc	r24, r22
     122:	86 1f       	adc	r24, r22
     124:	9d 1e       	adc	r9, r29
     126:	86 1f       	adc	r24, r22
     128:	86 1f       	adc	r24, r22
     12a:	86 1f       	adc	r24, r22
     12c:	86 1f       	adc	r24, r22
     12e:	86 1f       	adc	r24, r22
     130:	86 1f       	adc	r24, r22
     132:	86 1f       	adc	r24, r22
     134:	a5 1e       	adc	r10, r21
     136:	86 1f       	adc	r24, r22
     138:	86 1f       	adc	r24, r22
     13a:	86 1f       	adc	r24, r22
     13c:	86 1f       	adc	r24, r22
     13e:	86 1f       	adc	r24, r22
     140:	86 1f       	adc	r24, r22
     142:	86 1f       	adc	r24, r22
     144:	ca 1e       	adc	r12, r26
     146:	86 1f       	adc	r24, r22
     148:	86 1f       	adc	r24, r22
     14a:	86 1f       	adc	r24, r22
     14c:	86 1f       	adc	r24, r22
     14e:	86 1f       	adc	r24, r22
     150:	86 1f       	adc	r24, r22
     152:	86 1f       	adc	r24, r22
     154:	a5 1e       	adc	r10, r21
     156:	86 1f       	adc	r24, r22
     158:	86 1f       	adc	r24, r22
     15a:	86 1f       	adc	r24, r22
     15c:	86 1f       	adc	r24, r22
     15e:	86 1f       	adc	r24, r22
     160:	86 1f       	adc	r24, r22
     162:	86 1f       	adc	r24, r22
     164:	cf 1e       	adc	r12, r31
     166:	86 1f       	adc	r24, r22
     168:	86 1f       	adc	r24, r22
     16a:	86 1f       	adc	r24, r22
     16c:	86 1f       	adc	r24, r22
     16e:	86 1f       	adc	r24, r22
     170:	86 1f       	adc	r24, r22
     172:	86 1f       	adc	r24, r22
     174:	d4 1e       	adc	r13, r20
     176:	86 1f       	adc	r24, r22
     178:	86 1f       	adc	r24, r22
     17a:	86 1f       	adc	r24, r22
     17c:	86 1f       	adc	r24, r22
     17e:	86 1f       	adc	r24, r22
     180:	86 1f       	adc	r24, r22
     182:	86 1f       	adc	r24, r22
     184:	e5 1e       	adc	r14, r21
     186:	86 1f       	adc	r24, r22
     188:	86 1f       	adc	r24, r22
     18a:	86 1f       	adc	r24, r22
     18c:	86 1f       	adc	r24, r22
     18e:	86 1f       	adc	r24, r22
     190:	86 1f       	adc	r24, r22
     192:	86 1f       	adc	r24, r22
     194:	0e 1f       	adc	r16, r30
     196:	86 1f       	adc	r24, r22
     198:	86 1f       	adc	r24, r22
     19a:	86 1f       	adc	r24, r22
     19c:	86 1f       	adc	r24, r22
     19e:	86 1f       	adc	r24, r22
     1a0:	86 1f       	adc	r24, r22
     1a2:	86 1f       	adc	r24, r22
     1a4:	d9 1e       	adc	r13, r25
     1a6:	86 1f       	adc	r24, r22
     1a8:	86 1f       	adc	r24, r22
     1aa:	86 1f       	adc	r24, r22
     1ac:	86 1f       	adc	r24, r22
     1ae:	86 1f       	adc	r24, r22
     1b0:	86 1f       	adc	r24, r22
     1b2:	86 1f       	adc	r24, r22
     1b4:	f3 1e       	adc	r15, r19
     1b6:	86 1f       	adc	r24, r22
     1b8:	86 1f       	adc	r24, r22
     1ba:	86 1f       	adc	r24, r22
     1bc:	86 1f       	adc	r24, r22
     1be:	86 1f       	adc	r24, r22
     1c0:	86 1f       	adc	r24, r22
     1c2:	86 1f       	adc	r24, r22
     1c4:	10 1f       	adc	r17, r16
     1c6:	86 1f       	adc	r24, r22
     1c8:	86 1f       	adc	r24, r22
     1ca:	86 1f       	adc	r24, r22
     1cc:	86 1f       	adc	r24, r22
     1ce:	86 1f       	adc	r24, r22
     1d0:	86 1f       	adc	r24, r22
     1d2:	86 1f       	adc	r24, r22
     1d4:	10 1f       	adc	r17, r16
     1d6:	86 1f       	adc	r24, r22
     1d8:	86 1f       	adc	r24, r22
     1da:	86 1f       	adc	r24, r22
     1dc:	86 1f       	adc	r24, r22
     1de:	86 1f       	adc	r24, r22
     1e0:	86 1f       	adc	r24, r22
     1e2:	86 1f       	adc	r24, r22
     1e4:	10 1f       	adc	r17, r16
     1e6:	86 1f       	adc	r24, r22
     1e8:	86 1f       	adc	r24, r22
     1ea:	86 1f       	adc	r24, r22
     1ec:	86 1f       	adc	r24, r22
     1ee:	86 1f       	adc	r24, r22
     1f0:	86 1f       	adc	r24, r22
     1f2:	86 1f       	adc	r24, r22
     1f4:	10 1f       	adc	r17, r16
     1f6:	86 1f       	adc	r24, r22
     1f8:	86 1f       	adc	r24, r22
     1fa:	86 1f       	adc	r24, r22
     1fc:	86 1f       	adc	r24, r22
     1fe:	86 1f       	adc	r24, r22
     200:	86 1f       	adc	r24, r22
     202:	86 1f       	adc	r24, r22
     204:	19 1f       	adc	r17, r25
     206:	86 1f       	adc	r24, r22
     208:	86 1f       	adc	r24, r22
     20a:	86 1f       	adc	r24, r22
     20c:	86 1f       	adc	r24, r22
     20e:	86 1f       	adc	r24, r22
     210:	86 1f       	adc	r24, r22
     212:	86 1f       	adc	r24, r22
     214:	4a 1f       	adc	r20, r26
     216:	86 1f       	adc	r24, r22
     218:	86 1f       	adc	r24, r22
     21a:	86 1f       	adc	r24, r22
     21c:	86 1f       	adc	r24, r22
     21e:	86 1f       	adc	r24, r22
     220:	86 1f       	adc	r24, r22
     222:	86 1f       	adc	r24, r22
     224:	19 1f       	adc	r17, r25
     226:	86 1f       	adc	r24, r22
     228:	86 1f       	adc	r24, r22
     22a:	86 1f       	adc	r24, r22
     22c:	86 1f       	adc	r24, r22
     22e:	86 1f       	adc	r24, r22
     230:	86 1f       	adc	r24, r22
     232:	86 1f       	adc	r24, r22
     234:	4a 1f       	adc	r20, r26
     236:	86 1f       	adc	r24, r22
     238:	86 1f       	adc	r24, r22
     23a:	86 1f       	adc	r24, r22
     23c:	86 1f       	adc	r24, r22
     23e:	86 1f       	adc	r24, r22
     240:	86 1f       	adc	r24, r22
     242:	86 1f       	adc	r24, r22
     244:	31 1f       	adc	r19, r17
     246:	86 1f       	adc	r24, r22
     248:	86 1f       	adc	r24, r22
     24a:	86 1f       	adc	r24, r22
     24c:	86 1f       	adc	r24, r22
     24e:	86 1f       	adc	r24, r22
     250:	86 1f       	adc	r24, r22
     252:	86 1f       	adc	r24, r22
     254:	4e 1f       	adc	r20, r30
     256:	86 1f       	adc	r24, r22
     258:	86 1f       	adc	r24, r22
     25a:	86 1f       	adc	r24, r22
     25c:	86 1f       	adc	r24, r22
     25e:	86 1f       	adc	r24, r22
     260:	86 1f       	adc	r24, r22
     262:	86 1f       	adc	r24, r22
     264:	4e 1f       	adc	r20, r30
     266:	86 1f       	adc	r24, r22
     268:	86 1f       	adc	r24, r22
     26a:	86 1f       	adc	r24, r22
     26c:	86 1f       	adc	r24, r22
     26e:	86 1f       	adc	r24, r22
     270:	86 1f       	adc	r24, r22
     272:	86 1f       	adc	r24, r22
     274:	63 1f       	adc	r22, r19
     276:	86 1f       	adc	r24, r22
     278:	86 1f       	adc	r24, r22
     27a:	86 1f       	adc	r24, r22
     27c:	86 1f       	adc	r24, r22
     27e:	86 1f       	adc	r24, r22
     280:	86 1f       	adc	r24, r22
     282:	86 1f       	adc	r24, r22
     284:	7d 1f       	adc	r23, r29
     286:	86 1f       	adc	r24, r22
     288:	86 1f       	adc	r24, r22
     28a:	86 1f       	adc	r24, r22
     28c:	86 1f       	adc	r24, r22
     28e:	86 1f       	adc	r24, r22
     290:	86 1f       	adc	r24, r22
     292:	86 1f       	adc	r24, r22
     294:	7d 1f       	adc	r23, r29
     296:	8c 2b       	or	r24, r28
     298:	90 2b       	or	r25, r16
     29a:	7a 2b       	or	r23, r26
     29c:	80 2b       	or	r24, r16
     29e:	86 2b       	or	r24, r22
     2a0:	d5 2b       	or	r29, r21
     2a2:	94 2b       	or	r25, r20
     2a4:	9a 2b       	or	r25, r26
     2a6:	a0 2b       	or	r26, r16
     2a8:	a6 2b       	or	r26, r22
     2aa:	ac 2b       	or	r26, r28
     2ac:	b2 2b       	or	r27, r18
     2ae:	b8 2b       	or	r27, r24
     2b0:	be 2b       	or	r27, r30
     2b2:	d5 2b       	or	r29, r21
     2b4:	c4 2b       	or	r28, r20
     2b6:	ca 2b       	or	r28, r26
     2b8:	d0 2b       	or	r29, r16

000002ba <__trampolines_end>:
     2ba:	00 00       	nop
     2bc:	48 c2       	rjmp	.+1168   	; 0x74e <port_to_mode_PGM+0xd7>
     2be:	00 00       	nop
     2c0:	20 c2       	rjmp	.+1088   	; 0x702 <port_to_mode_PGM+0x8b>
     2c2:	00 00       	nop
     2c4:	f0 c1       	rjmp	.+992    	; 0x6a6 <port_to_mode_PGM+0x2f>
     2c6:	00 00       	nop
     2c8:	a0 c1       	rjmp	.+832    	; 0x60a <digital_pin_to_port_PGM+0xd>
     2ca:	00 00       	nop
     2cc:	20 c1       	rjmp	.+576    	; 0x50e <_ZL15Lnk_RTDs_HLT_BP+0x8>
     2ce:	00 00       	nop
     2d0:	00 00       	nop
     2d2:	00 00       	nop
     2d4:	20 41       	sbci	r18, 0x10	; 16
     2d6:	00 00       	nop
     2d8:	a0 41       	sbci	r26, 0x10	; 16
     2da:	00 00       	nop
     2dc:	f0 41       	sbci	r31, 0x10	; 16
     2de:	00 00       	nop
     2e0:	20 42       	sbci	r18, 0x20	; 32
     2e2:	00 00       	nop
     2e4:	48 42       	sbci	r20, 0x28	; 40
     2e6:	00 00       	nop
     2e8:	70 42       	sbci	r23, 0x20	; 32
     2ea:	00 00       	nop
     2ec:	8c 42       	sbci	r24, 0x2C	; 44
     2ee:	00 00       	nop
     2f0:	a0 42       	sbci	r26, 0x20	; 32
     2f2:	00 00       	nop
     2f4:	b4 42       	sbci	r27, 0x24	; 36
     2f6:	00 00       	nop
     2f8:	c8 42       	sbci	r28, 0x28	; 40
     2fa:	00 00       	nop
     2fc:	dc 42       	sbci	r29, 0x2C	; 44
     2fe:	00 00       	nop
     300:	f0 42       	sbci	r31, 0x20	; 32
     302:	00 00       	nop
     304:	02 43       	sbci	r16, 0x32	; 50
     306:	00 00       	nop
     308:	0c 43       	sbci	r16, 0x3C	; 60
     30a:	00 00       	nop
     30c:	16 43       	sbci	r17, 0x36	; 54
     30e:	00 00       	nop
     310:	20 43       	sbci	r18, 0x30	; 48
     312:	00 00       	nop
     314:	2a 43       	sbci	r18, 0x3A	; 58
     316:	00 00       	nop
     318:	34 43       	sbci	r19, 0x34	; 52
     31a:	00 00       	nop
     31c:	3e 43       	sbci	r19, 0x3E	; 62
     31e:	00 00       	nop
     320:	48 43       	sbci	r20, 0x38	; 56
     322:	00 00       	nop
     324:	52 43       	sbci	r21, 0x32	; 50
     326:	00 00       	nop
     328:	5c 43       	sbci	r21, 0x3C	; 60
     32a:	00 00       	nop
     32c:	66 43       	sbci	r22, 0x36	; 54
     32e:	00 00       	nop
     330:	70 43       	sbci	r23, 0x30	; 48
     332:	00 00       	nop
     334:	7a 43       	sbci	r23, 0x3A	; 58
     336:	00 00       	nop
     338:	82 43       	sbci	r24, 0x32	; 50
     33a:	00 00       	nop
     33c:	87 43       	sbci	r24, 0x37	; 55
     33e:	00 00       	nop
     340:	8c 43       	sbci	r24, 0x3C	; 60
     342:	00 00       	nop
     344:	91 43       	sbci	r25, 0x31	; 49
     346:	00 00       	nop
     348:	96 43       	sbci	r25, 0x36	; 54

0000034a <_ZL8WB_R2C_X>:
     34a:	b8 9e a0 42 3d 8a a8 42 a4 70 b0 42 ec 51 b8 42     ...B=..B.p.B.Q.B
     35a:	14 2e c0 42 00 00 c8 42 cd cc cf 42 7b 94 d7 42     ...B...B...B{..B
     36a:	0a 57 df 42 7b 14 e7 42 cd cc ee 42 e1 7a f6 42     .W.B{..B...B.z.B
     37a:	f6 28 fe 42 66 e6 02 43 c3 b5 06 43 8f 82 0a 43     .(.Bf..C...C...C
     38a:	3d 4a 0e 43 ec 11 12 43 7b d4 15 43 7b 94 19 43     =J.C...C{..C{..C
     39a:	7b 54 1d 43 cd 0c 21 43 1f c5 24 43 e1 7a 28 43     {T.C..!C..$C.z(C
     3aa:	85 2b 2c 43 29 dc 2f 43 ae 87 33 43 a4 30 37 43     .+,C)./C..3C.07C
     3ba:	0a d7 3a 43 52 78 3e 43 9a 19 42 43 c3 b5 45 43     ..:CRx>C..BC..EC
     3ca:	5c 4f 49 43 66 e6 4c 43 e1 7a 50 43 cd 0c 54 43     \OICf.LC.zPC..TC

000003da <_ZL6RTDLUT>:
     3da:	00 00 00 00 00 00                                   ......

000003e0 <_ZL12Lnk_Settings>:
	...

000003ec <_ZL8Tgl_Sol2>:
	...

00000403 <_ZL8Tgl_Sol1>:
	...

0000041a <_ZL11Lnk_Monitor>:
	...

00000426 <_ZL12Lnk_HLT_Main>:
	...

00000432 <_ZL22Lbl_RTD_HLT_OP_degFVal>:
	...

0000043c <_ZL22Lbl_RTD_HLT_OP_degFLbl>:
	...

00000446 <_ZL22Lbl_RTD_HLT_OP_degCVal>:
	...

00000450 <_ZL22Lbl_RTD_HLT_OP_degCLbl>:
	...

0000045a <_ZL19Lbl_RTD_HLT_OP_RVal>:
	...

00000464 <_ZL19Lbl_RTD_HLT_OP_RLbl>:
	...

0000046e <_ZL20Lbl_RTD_HLT_OP_VsVal>:
	...

00000478 <_ZL20Lbl_RTD_HLT_OP_VsLbl>:
	...

00000482 <_ZL22Lbl_RTD_HLT_OP_VoutVal>:
	...

0000048c <_ZL22Lbl_RTD_HLT_OP_VoutLbl>:
	...

00000496 <_ZL15Lnk_RTDs_HLT_OP>:
	...

000004a2 <_ZL22Lbl_RTD_HLT_BP_degFVal>:
	...

000004ac <_ZL22Lbl_RTD_HLT_BP_degFLbl>:
	...

000004b6 <_ZL22Lbl_RTD_HLT_BP_degCVal>:
	...

000004c0 <_ZL22Lbl_RTD_HLT_BP_degCLbl>:
	...

000004ca <_ZL19Lbl_RTD_HLT_BP_RVal>:
	...

000004d4 <_ZL19Lbl_RTD_HLT_BP_RLbl>:
	...

000004de <_ZL20Lbl_RTD_HLT_BP_VsVal>:
	...

000004e8 <_ZL20Lbl_RTD_HLT_BP_VsLbl>:
	...

000004f2 <_ZL22Lbl_RTD_HLT_BP_VoutVal>:
	...

000004fc <_ZL22Lbl_RTD_HLT_BP_VoutLbl>:
	...

00000506 <_ZL15Lnk_RTDs_HLT_BP>:
	...

00000512 <_ZL17Lnk_RTDs_BackLink>:
	...

0000051e <_ZL16Lnk_RTDs_Monitor>:
	...

0000052a <_ZL16Tgl_TempAlarmDIO>:
	...

00000541 <_ZL17Tgl_TimerAlarmDIO>:
	...

00000558 <_ZL17Lnk_MenuAlarmTest>:
	...

00000564 <_ZL17Lnk_Back_MainMenu>:
	...

00000570 <_ZL21tone_pin_to_timer_PGM>:
     570:	02                                                  .

00000571 <digital_pin_to_timer_PGM>:
     571:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
     59d:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

000005b7 <digital_pin_to_bit_mask_PGM>:
     5b7:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     5c7:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     5d7:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     5e7:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     5f7:	04 08 10 20 40 80                                   ... @.

000005fd <digital_pin_to_port_PGM>:
     5fd:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     60d:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     61d:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     62d:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     63d:	0b 0b 0b 0b 0b 0b                                   ......

00000643 <port_to_input_PGM>:
     643:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     653:	00 01 00 00 03 01 06 01 09 01                       ..........

0000065d <port_to_output_PGM>:
     65d:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     66d:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000677 <port_to_mode_PGM>:
     677:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     687:	01 01 00 00 04 01 07 01 0a 01 00 40 7a 10 f3 5a     ...........@z..Z
     697:	00 a0 72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48     ..rN..........vH
     6a7:	17 00 00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1     .....T.....;....
     6b7:	f5 05 00 00 80 96 98 00 00 00 40 42 0f 00 00 00     ..........@B....
     6c7:	a0 86 01 00 00 00 10 27 00 00 00 00 e8 03 00 00     .......'........
     6d7:	00 00 64 00 00 00 00 00 0a 00 00 00 00 00 01 00     ..d.............
     6e7:	00 00 00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df     ....,v...gO.#...
     6f7:	ae 59 e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76     .Y.......S.:.Q.v
     707:	96 e8 e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc     .....&....b.@|o.
     717:	ef bc 9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7     ....@...o....Z*.
     727:	5c 93 6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5     \.kl.gm......G..
     737:	20 e6 b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80      ..........5w...
     747:	84 1e 08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33     ..... N......333
     757:	33 0f 98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55     3..n...A..!..;.U
     767:	16 cf fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d     ........K8..|...
     777:	a4 bb e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec     ...$ 2.r^"....$.
     787:	a1 e5 3d 27 00                                      ..='.

0000078c <__ctors_start>:
     78c:	e2 09       	sbc	r30, r2
     78e:	13 0f       	add	r17, r19
     790:	4d 0f       	add	r20, r29
     792:	2d 10       	cpse	r2, r13
     794:	0d 12       	cpse	r0, r29
     796:	6c 20       	and	r6, r12
     798:	a6 20       	and	r10, r6
     79a:	56 23       	and	r21, r22
     79c:	f1 23       	and	r31, r17
     79e:	8c 24       	eor	r8, r12
     7a0:	27 25       	eor	r18, r7
     7a2:	94 25       	eor	r25, r4

000007a4 <__ctors_end>:
     7a4:	9d 0d       	add	r25, r13
     7a6:	25 0f       	add	r18, r21
     7a8:	ec 0f       	add	r30, r28
     7aa:	5d 11       	cpse	r21, r13

000007ac <__dtors_end>:
     7ac:	11 24       	eor	r1, r1
     7ae:	1f be       	out	0x3f, r1	; 63
     7b0:	cf ef       	ldi	r28, 0xFF	; 255
     7b2:	d1 e2       	ldi	r29, 0x21	; 33
     7b4:	de bf       	out	0x3e, r29	; 62
     7b6:	cd bf       	out	0x3d, r28	; 61
     7b8:	00 e0       	ldi	r16, 0x00	; 0
     7ba:	0c bf       	out	0x3c, r16	; 60

000007bc <__do_copy_data>:
     7bc:	15 e0       	ldi	r17, 0x05	; 5
     7be:	a0 e0       	ldi	r26, 0x00	; 0
     7c0:	b2 e0       	ldi	r27, 0x02	; 2
     7c2:	e4 eb       	ldi	r30, 0xB4	; 180
     7c4:	fb e6       	ldi	r31, 0x6B	; 107
     7c6:	00 e0       	ldi	r16, 0x00	; 0
     7c8:	0b bf       	out	0x3b, r16	; 59
     7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <__do_copy_data+0x14>
     7cc:	07 90       	elpm	r0, Z+
     7ce:	0d 92       	st	X+, r0
     7d0:	a4 32       	cpi	r26, 0x24	; 36
     7d2:	b1 07       	cpc	r27, r17
     7d4:	d9 f7       	brne	.-10     	; 0x7cc <__do_copy_data+0x10>

000007d6 <__do_clear_bss>:
     7d6:	2d e0       	ldi	r18, 0x0D	; 13
     7d8:	a4 e2       	ldi	r26, 0x24	; 36
     7da:	b5 e0       	ldi	r27, 0x05	; 5
     7dc:	01 c0       	rjmp	.+2      	; 0x7e0 <.do_clear_bss_start>

000007de <.do_clear_bss_loop>:
     7de:	1d 92       	st	X+, r1

000007e0 <.do_clear_bss_start>:
     7e0:	a3 30       	cpi	r26, 0x03	; 3
     7e2:	b2 07       	cpc	r27, r18
     7e4:	e1 f7       	brne	.-8      	; 0x7de <.do_clear_bss_loop>

000007e6 <__do_global_ctors>:
     7e6:	13 e0       	ldi	r17, 0x03	; 3
     7e8:	c2 ed       	ldi	r28, 0xD2	; 210
     7ea:	d3 e0       	ldi	r29, 0x03	; 3
     7ec:	00 e0       	ldi	r16, 0x00	; 0
     7ee:	06 c0       	rjmp	.+12     	; 0x7fc <__do_global_ctors+0x16>
     7f0:	21 97       	sbiw	r28, 0x01	; 1
     7f2:	01 09       	sbc	r16, r1
     7f4:	80 2f       	mov	r24, r16
     7f6:	fe 01       	movw	r30, r28
     7f8:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__tablejump2__>
     7fc:	c6 3c       	cpi	r28, 0xC6	; 198
     7fe:	d1 07       	cpc	r29, r17
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	08 07       	cpc	r16, r24
     804:	a9 f7       	brne	.-22     	; 0x7f0 <__do_global_ctors+0xa>
     806:	0e 94 a0 25 	call	0x4b40	; 0x4b40 <main>
     80a:	0c 94 c9 35 	jmp	0x6b92	; 0x6b92 <__do_global_dtors>

0000080e <__bad_interrupt>:
     80e:	f8 cb       	rjmp	.-2064   	; 0x0 <__vectors>

00000810 <_ZN10LinkedListIiE4sizeEv>:
      //Serial.println(middle_indx);
      //Serial.println(sorted_samples.get(middle_indx));
      //Serial.println(this->value);
    }
  }
}
     810:	fc 01       	movw	r30, r24
     812:	82 81       	ldd	r24, Z+2	; 0x02
     814:	93 81       	ldd	r25, Z+3	; 0x03
     816:	08 95       	ret

00000818 <_ZN10LinkedListIiE5clearEv>:
     818:	cf 93       	push	r28
     81a:	df 93       	push	r29
     81c:	ec 01       	movw	r28, r24
     81e:	07 c0       	rjmp	.+14     	; 0x82e <_ZN10LinkedListIiE5clearEv+0x16>
     820:	e8 81       	ld	r30, Y
     822:	f9 81       	ldd	r31, Y+1	; 0x01
     824:	06 84       	ldd	r0, Z+14	; 0x0e
     826:	f7 85       	ldd	r31, Z+15	; 0x0f
     828:	e0 2d       	mov	r30, r0
     82a:	ce 01       	movw	r24, r28
     82c:	19 95       	eicall
     82e:	e8 81       	ld	r30, Y
     830:	f9 81       	ldd	r31, Y+1	; 0x01
     832:	01 90       	ld	r0, Z+
     834:	f0 81       	ld	r31, Z
     836:	e0 2d       	mov	r30, r0
     838:	ce 01       	movw	r24, r28
     83a:	19 95       	eicall
     83c:	18 16       	cp	r1, r24
     83e:	19 06       	cpc	r1, r25
     840:	7c f3       	brlt	.-34     	; 0x820 <_ZN10LinkedListIiE5clearEv+0x8>
     842:	df 91       	pop	r29
     844:	cf 91       	pop	r28
     846:	08 95       	ret

00000848 <_ZN10LinkedListIiE5shiftEv>:
     848:	ef 92       	push	r14
     84a:	ff 92       	push	r15
     84c:	0f 93       	push	r16
     84e:	1f 93       	push	r17
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	fc 01       	movw	r30, r24
     856:	22 81       	ldd	r18, Z+2	; 0x02
     858:	33 81       	ldd	r19, Z+3	; 0x03
     85a:	12 16       	cp	r1, r18
     85c:	13 06       	cpc	r1, r19
     85e:	0c f5       	brge	.+66     	; 0x8a2 <_ZN10LinkedListIiE5shiftEv+0x5a>
     860:	ec 01       	movw	r28, r24
     862:	22 30       	cpi	r18, 0x02	; 2
     864:	31 05       	cpc	r19, r1
     866:	ac f0       	brlt	.+42     	; 0x892 <_ZN10LinkedListIiE5shiftEv+0x4a>
     868:	04 80       	ldd	r0, Z+4	; 0x04
     86a:	f5 81       	ldd	r31, Z+5	; 0x05
     86c:	e0 2d       	mov	r30, r0
     86e:	e2 80       	ldd	r14, Z+2	; 0x02
     870:	f3 80       	ldd	r15, Z+3	; 0x03
     872:	00 81       	ld	r16, Z
     874:	11 81       	ldd	r17, Z+1	; 0x01
     876:	cf 01       	movw	r24, r30
     878:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <_ZdlPv>
     87c:	fd 82       	std	Y+5, r15	; 0x05
     87e:	ec 82       	std	Y+4, r14	; 0x04
     880:	8a 81       	ldd	r24, Y+2	; 0x02
     882:	9b 81       	ldd	r25, Y+3	; 0x03
     884:	01 97       	sbiw	r24, 0x01	; 1
     886:	9b 83       	std	Y+3, r25	; 0x03
     888:	8a 83       	std	Y+2, r24	; 0x02
     88a:	1c 86       	std	Y+12, r1	; 0x0c
     88c:	80 2f       	mov	r24, r16
     88e:	91 2f       	mov	r25, r17
     890:	0a c0       	rjmp	.+20     	; 0x8a6 <_ZN10LinkedListIiE5shiftEv+0x5e>
     892:	01 90       	ld	r0, Z+
     894:	f0 81       	ld	r31, Z
     896:	e0 2d       	mov	r30, r0
     898:	04 84       	ldd	r0, Z+12	; 0x0c
     89a:	f5 85       	ldd	r31, Z+13	; 0x0d
     89c:	e0 2d       	mov	r30, r0
     89e:	19 95       	eicall
     8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <_ZN10LinkedListIiE5shiftEv+0x5e>
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	1f 91       	pop	r17
     8ac:	0f 91       	pop	r16
     8ae:	ff 90       	pop	r15
     8b0:	ef 90       	pop	r14
     8b2:	08 95       	ret

000008b4 <_ZN10LinkedListIiE7unshiftEi>:
     8b4:	0f 93       	push	r16
     8b6:	1f 93       	push	r17
     8b8:	cf 93       	push	r28
     8ba:	df 93       	push	r29
     8bc:	ec 01       	movw	r28, r24
     8be:	8b 01       	movw	r16, r22
     8c0:	8a 81       	ldd	r24, Y+2	; 0x02
     8c2:	9b 81       	ldd	r25, Y+3	; 0x03
     8c4:	89 2b       	or	r24, r25
     8c6:	41 f4       	brne	.+16     	; 0x8d8 <_ZN10LinkedListIiE7unshiftEi+0x24>
     8c8:	e8 81       	ld	r30, Y
     8ca:	f9 81       	ldd	r31, Y+1	; 0x01
     8cc:	04 80       	ldd	r0, Z+4	; 0x04
     8ce:	f5 81       	ldd	r31, Z+5	; 0x05
     8d0:	e0 2d       	mov	r30, r0
     8d2:	ce 01       	movw	r24, r28
     8d4:	19 95       	eicall
     8d6:	18 c0       	rjmp	.+48     	; 0x908 <_ZN10LinkedListIiE7unshiftEi+0x54>
     8d8:	84 e0       	ldi	r24, 0x04	; 4
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <_Znwj>
     8e0:	fc 01       	movw	r30, r24
     8e2:	11 82       	std	Z+1, r1	; 0x01
     8e4:	10 82       	st	Z, r1
     8e6:	13 82       	std	Z+3, r1	; 0x03
     8e8:	12 82       	std	Z+2, r1	; 0x02
     8ea:	8c 81       	ldd	r24, Y+4	; 0x04
     8ec:	9d 81       	ldd	r25, Y+5	; 0x05
     8ee:	93 83       	std	Z+3, r25	; 0x03
     8f0:	82 83       	std	Z+2, r24	; 0x02
     8f2:	11 83       	std	Z+1, r17	; 0x01
     8f4:	00 83       	st	Z, r16
     8f6:	fd 83       	std	Y+5, r31	; 0x05
     8f8:	ec 83       	std	Y+4, r30	; 0x04
     8fa:	8a 81       	ldd	r24, Y+2	; 0x02
     8fc:	9b 81       	ldd	r25, Y+3	; 0x03
     8fe:	01 96       	adiw	r24, 0x01	; 1
     900:	9b 83       	std	Y+3, r25	; 0x03
     902:	8a 83       	std	Y+2, r24	; 0x02
     904:	1c 86       	std	Y+12, r1	; 0x0c
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	df 91       	pop	r29
     90a:	cf 91       	pop	r28
     90c:	1f 91       	pop	r17
     90e:	0f 91       	pop	r16
     910:	08 95       	ret

00000912 <_ZN10LinkedListIiE3addEi>:
     912:	0f 93       	push	r16
     914:	1f 93       	push	r17
     916:	cf 93       	push	r28
     918:	df 93       	push	r29
     91a:	ec 01       	movw	r28, r24
     91c:	8b 01       	movw	r16, r22
     91e:	84 e0       	ldi	r24, 0x04	; 4
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <_Znwj>
     926:	fc 01       	movw	r30, r24
     928:	13 82       	std	Z+3, r1	; 0x03
     92a:	12 82       	std	Z+2, r1	; 0x02
     92c:	11 83       	std	Z+1, r17	; 0x01
     92e:	00 83       	st	Z, r16
     930:	2c 81       	ldd	r18, Y+4	; 0x04
     932:	3d 81       	ldd	r19, Y+5	; 0x05
     934:	23 2b       	or	r18, r19
     936:	39 f0       	breq	.+14     	; 0x946 <_ZN10LinkedListIiE3addEi+0x34>
     938:	ee 81       	ldd	r30, Y+6	; 0x06
     93a:	ff 81       	ldd	r31, Y+7	; 0x07
     93c:	93 83       	std	Z+3, r25	; 0x03
     93e:	82 83       	std	Z+2, r24	; 0x02
     940:	9f 83       	std	Y+7, r25	; 0x07
     942:	8e 83       	std	Y+6, r24	; 0x06
     944:	04 c0       	rjmp	.+8      	; 0x94e <_ZN10LinkedListIiE3addEi+0x3c>
     946:	9d 83       	std	Y+5, r25	; 0x05
     948:	8c 83       	std	Y+4, r24	; 0x04
     94a:	9f 83       	std	Y+7, r25	; 0x07
     94c:	8e 83       	std	Y+6, r24	; 0x06
     94e:	8a 81       	ldd	r24, Y+2	; 0x02
     950:	9b 81       	ldd	r25, Y+3	; 0x03
     952:	01 96       	adiw	r24, 0x01	; 1
     954:	9b 83       	std	Y+3, r25	; 0x03
     956:	8a 83       	std	Y+2, r24	; 0x02
     958:	1c 86       	std	Y+12, r1	; 0x0c
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	df 91       	pop	r29
     95e:	cf 91       	pop	r28
     960:	1f 91       	pop	r17
     962:	0f 91       	pop	r16
     964:	08 95       	ret

00000966 <_ZN10LinkedListIiE7getNodeEi>:
     966:	dc 01       	movw	r26, r24
     968:	14 96       	adiw	r26, 0x04	; 4
     96a:	ed 91       	ld	r30, X+
     96c:	fc 91       	ld	r31, X
     96e:	15 97       	sbiw	r26, 0x05	; 5
     970:	1c 96       	adiw	r26, 0x0c	; 12
     972:	8c 91       	ld	r24, X
     974:	1c 97       	sbiw	r26, 0x0c	; 12
     976:	88 23       	and	r24, r24
     978:	61 f0       	breq	.+24     	; 0x992 <_ZN10LinkedListIiE7getNodeEi+0x2c>
     97a:	1a 96       	adiw	r26, 0x0a	; 10
     97c:	2d 91       	ld	r18, X+
     97e:	3c 91       	ld	r19, X
     980:	1b 97       	sbiw	r26, 0x0b	; 11
     982:	62 17       	cp	r22, r18
     984:	73 07       	cpc	r23, r19
     986:	44 f0       	brlt	.+16     	; 0x998 <_ZN10LinkedListIiE7getNodeEi+0x32>
     988:	18 96       	adiw	r26, 0x08	; 8
     98a:	ed 91       	ld	r30, X+
     98c:	fc 91       	ld	r31, X
     98e:	19 97       	sbiw	r26, 0x09	; 9
     990:	05 c0       	rjmp	.+10     	; 0x99c <_ZN10LinkedListIiE7getNodeEi+0x36>
     992:	20 e0       	ldi	r18, 0x00	; 0
     994:	30 e0       	ldi	r19, 0x00	; 0
     996:	02 c0       	rjmp	.+4      	; 0x99c <_ZN10LinkedListIiE7getNodeEi+0x36>
     998:	20 e0       	ldi	r18, 0x00	; 0
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	26 17       	cp	r18, r22
     99e:	37 07       	cpc	r19, r23
     9a0:	64 f4       	brge	.+24     	; 0x9ba <_ZN10LinkedListIiE7getNodeEi+0x54>
     9a2:	30 97       	sbiw	r30, 0x00	; 0
     9a4:	51 f0       	breq	.+20     	; 0x9ba <_ZN10LinkedListIiE7getNodeEi+0x54>
     9a6:	02 80       	ldd	r0, Z+2	; 0x02
     9a8:	f3 81       	ldd	r31, Z+3	; 0x03
     9aa:	e0 2d       	mov	r30, r0
     9ac:	2f 5f       	subi	r18, 0xFF	; 255
     9ae:	3f 4f       	sbci	r19, 0xFF	; 255
     9b0:	26 17       	cp	r18, r22
     9b2:	37 07       	cpc	r19, r23
     9b4:	14 f4       	brge	.+4      	; 0x9ba <_ZN10LinkedListIiE7getNodeEi+0x54>
     9b6:	30 97       	sbiw	r30, 0x00	; 0
     9b8:	b1 f7       	brne	.-20     	; 0x9a6 <_ZN10LinkedListIiE7getNodeEi+0x40>
     9ba:	26 17       	cp	r18, r22
     9bc:	37 07       	cpc	r19, r23
     9be:	79 f4       	brne	.+30     	; 0x9de <_ZN10LinkedListIiE7getNodeEi+0x78>
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	1c 96       	adiw	r26, 0x0c	; 12
     9c4:	8c 93       	st	X, r24
     9c6:	1c 97       	sbiw	r26, 0x0c	; 12
     9c8:	1b 96       	adiw	r26, 0x0b	; 11
     9ca:	3c 93       	st	X, r19
     9cc:	2e 93       	st	-X, r18
     9ce:	1a 97       	sbiw	r26, 0x0a	; 10
     9d0:	19 96       	adiw	r26, 0x09	; 9
     9d2:	fc 93       	st	X, r31
     9d4:	ee 93       	st	-X, r30
     9d6:	18 97       	sbiw	r26, 0x08	; 8
     9d8:	8e 2f       	mov	r24, r30
     9da:	9f 2f       	mov	r25, r31
     9dc:	08 95       	ret
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	08 95       	ret

000009e4 <_ZN10LinkedListIiE3getEi>:
     9e4:	c0 df       	rcall	.-128    	; 0x966 <_ZN10LinkedListIiE7getNodeEi>
     9e6:	00 97       	sbiw	r24, 0x00	; 0
     9e8:	21 f0       	breq	.+8      	; 0x9f2 <_ZN10LinkedListIiE3getEi+0xe>
     9ea:	fc 01       	movw	r30, r24
     9ec:	80 81       	ld	r24, Z
     9ee:	91 81       	ldd	r25, Z+1	; 0x01
     9f0:	08 95       	ret
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	08 95       	ret

000009f8 <_ZN10LinkedListIiE3popEv>:
     9f8:	ef 92       	push	r14
     9fa:	ff 92       	push	r15
     9fc:	0f 93       	push	r16
     9fe:	1f 93       	push	r17
     a00:	cf 93       	push	r28
     a02:	df 93       	push	r29
     a04:	fc 01       	movw	r30, r24
     a06:	62 81       	ldd	r22, Z+2	; 0x02
     a08:	73 81       	ldd	r23, Z+3	; 0x03
     a0a:	16 16       	cp	r1, r22
     a0c:	17 06       	cpc	r1, r23
     a0e:	74 f5       	brge	.+92     	; 0xa6c <_ZN10LinkedListIiE3popEv+0x74>
     a10:	ec 01       	movw	r28, r24
     a12:	14 86       	std	Z+12, r1	; 0x0c
     a14:	62 30       	cpi	r22, 0x02	; 2
     a16:	71 05       	cpc	r23, r1
     a18:	cc f0       	brlt	.+50     	; 0xa4c <_ZN10LinkedListIiE3popEv+0x54>
     a1a:	62 50       	subi	r22, 0x02	; 2
     a1c:	71 09       	sbc	r23, r1
     a1e:	a3 df       	rcall	.-186    	; 0x966 <_ZN10LinkedListIiE7getNodeEi>
     a20:	7c 01       	movw	r14, r24
     a22:	fc 01       	movw	r30, r24
     a24:	82 81       	ldd	r24, Z+2	; 0x02
     a26:	93 81       	ldd	r25, Z+3	; 0x03
     a28:	fc 01       	movw	r30, r24
     a2a:	00 81       	ld	r16, Z
     a2c:	11 81       	ldd	r17, Z+1	; 0x01
     a2e:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <_ZdlPv>
     a32:	f7 01       	movw	r30, r14
     a34:	13 82       	std	Z+3, r1	; 0x03
     a36:	12 82       	std	Z+2, r1	; 0x02
     a38:	ff 82       	std	Y+7, r15	; 0x07
     a3a:	ee 82       	std	Y+6, r14	; 0x06
     a3c:	8a 81       	ldd	r24, Y+2	; 0x02
     a3e:	9b 81       	ldd	r25, Y+3	; 0x03
     a40:	01 97       	sbiw	r24, 0x01	; 1
     a42:	9b 83       	std	Y+3, r25	; 0x03
     a44:	8a 83       	std	Y+2, r24	; 0x02
     a46:	80 2f       	mov	r24, r16
     a48:	91 2f       	mov	r25, r17
     a4a:	12 c0       	rjmp	.+36     	; 0xa70 <_ZN10LinkedListIiE3popEv+0x78>
     a4c:	84 81       	ldd	r24, Z+4	; 0x04
     a4e:	95 81       	ldd	r25, Z+5	; 0x05
     a50:	fc 01       	movw	r30, r24
     a52:	00 81       	ld	r16, Z
     a54:	11 81       	ldd	r17, Z+1	; 0x01
     a56:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <_ZdlPv>
     a5a:	1d 82       	std	Y+5, r1	; 0x05
     a5c:	1c 82       	std	Y+4, r1	; 0x04
     a5e:	1f 82       	std	Y+7, r1	; 0x07
     a60:	1e 82       	std	Y+6, r1	; 0x06
     a62:	1b 82       	std	Y+3, r1	; 0x03
     a64:	1a 82       	std	Y+2, r1	; 0x02
     a66:	80 2f       	mov	r24, r16
     a68:	91 2f       	mov	r25, r17
     a6a:	02 c0       	rjmp	.+4      	; 0xa70 <_ZN10LinkedListIiE3popEv+0x78>
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	df 91       	pop	r29
     a72:	cf 91       	pop	r28
     a74:	1f 91       	pop	r17
     a76:	0f 91       	pop	r16
     a78:	ff 90       	pop	r15
     a7a:	ef 90       	pop	r14
     a7c:	08 95       	ret

00000a7e <_ZN10LinkedListIiE6removeEi>:
     a7e:	0f 93       	push	r16
     a80:	1f 93       	push	r17
     a82:	cf 93       	push	r28
     a84:	df 93       	push	r29
     a86:	77 23       	and	r23, r23
     a88:	dc f1       	brlt	.+118    	; 0xb00 <_ZN10LinkedListIiE6removeEi+0x82>
     a8a:	dc 01       	movw	r26, r24
     a8c:	12 96       	adiw	r26, 0x02	; 2
     a8e:	2d 91       	ld	r18, X+
     a90:	3c 91       	ld	r19, X
     a92:	13 97       	sbiw	r26, 0x03	; 3
     a94:	62 17       	cp	r22, r18
     a96:	73 07       	cpc	r23, r19
     a98:	b4 f5       	brge	.+108    	; 0xb06 <_ZN10LinkedListIiE6removeEi+0x88>
     a9a:	ec 01       	movw	r28, r24
     a9c:	61 15       	cp	r22, r1
     a9e:	71 05       	cpc	r23, r1
     aa0:	39 f4       	brne	.+14     	; 0xab0 <_ZN10LinkedListIiE6removeEi+0x32>
     aa2:	e8 81       	ld	r30, Y
     aa4:	f9 81       	ldd	r31, Y+1	; 0x01
     aa6:	06 84       	ldd	r0, Z+14	; 0x0e
     aa8:	f7 85       	ldd	r31, Z+15	; 0x0f
     aaa:	e0 2d       	mov	r30, r0
     aac:	19 95       	eicall
     aae:	2d c0       	rjmp	.+90     	; 0xb0a <_ZN10LinkedListIiE6removeEi+0x8c>
     ab0:	21 50       	subi	r18, 0x01	; 1
     ab2:	31 09       	sbc	r19, r1
     ab4:	26 17       	cp	r18, r22
     ab6:	37 07       	cpc	r19, r23
     ab8:	39 f4       	brne	.+14     	; 0xac8 <_ZN10LinkedListIiE6removeEi+0x4a>
     aba:	e8 81       	ld	r30, Y
     abc:	f9 81       	ldd	r31, Y+1	; 0x01
     abe:	04 84       	ldd	r0, Z+12	; 0x0c
     ac0:	f5 85       	ldd	r31, Z+13	; 0x0d
     ac2:	e0 2d       	mov	r30, r0
     ac4:	19 95       	eicall
     ac6:	21 c0       	rjmp	.+66     	; 0xb0a <_ZN10LinkedListIiE6removeEi+0x8c>
     ac8:	61 50       	subi	r22, 0x01	; 1
     aca:	71 09       	sbc	r23, r1
     acc:	4c df       	rcall	.-360    	; 0x966 <_ZN10LinkedListIiE7getNodeEi>
     ace:	dc 01       	movw	r26, r24
     ad0:	12 96       	adiw	r26, 0x02	; 2
     ad2:	ed 91       	ld	r30, X+
     ad4:	fc 91       	ld	r31, X
     ad6:	13 97       	sbiw	r26, 0x03	; 3
     ad8:	00 81       	ld	r16, Z
     ada:	11 81       	ldd	r17, Z+1	; 0x01
     adc:	22 81       	ldd	r18, Z+2	; 0x02
     ade:	33 81       	ldd	r19, Z+3	; 0x03
     ae0:	13 96       	adiw	r26, 0x03	; 3
     ae2:	3c 93       	st	X, r19
     ae4:	2e 93       	st	-X, r18
     ae6:	12 97       	sbiw	r26, 0x02	; 2
     ae8:	cf 01       	movw	r24, r30
     aea:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <_ZdlPv>
     aee:	8a 81       	ldd	r24, Y+2	; 0x02
     af0:	9b 81       	ldd	r25, Y+3	; 0x03
     af2:	01 97       	sbiw	r24, 0x01	; 1
     af4:	9b 83       	std	Y+3, r25	; 0x03
     af6:	8a 83       	std	Y+2, r24	; 0x02
     af8:	1c 86       	std	Y+12, r1	; 0x0c
     afa:	80 2f       	mov	r24, r16
     afc:	91 2f       	mov	r25, r17
     afe:	05 c0       	rjmp	.+10     	; 0xb0a <_ZN10LinkedListIiE6removeEi+0x8c>
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	02 c0       	rjmp	.+4      	; 0xb0a <_ZN10LinkedListIiE6removeEi+0x8c>
     b06:	80 e0       	ldi	r24, 0x00	; 0
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	df 91       	pop	r29
     b0c:	cf 91       	pop	r28
     b0e:	1f 91       	pop	r17
     b10:	0f 91       	pop	r16
     b12:	08 95       	ret

00000b14 <_ZN10LinkedListIiE3setEii>:
	
	return true;
}

template<typename T>
bool LinkedList<T>::set(int index, T _t){
     b14:	cf 93       	push	r28
     b16:	df 93       	push	r29
	// Check if index position is in bounds
	if(index < 0 || index >= _size)
     b18:	77 23       	and	r23, r23
     b1a:	6c f0       	brlt	.+26     	; 0xb36 <_ZN10LinkedListIiE3setEii+0x22>
     b1c:	fc 01       	movw	r30, r24
     b1e:	22 81       	ldd	r18, Z+2	; 0x02
     b20:	33 81       	ldd	r19, Z+3	; 0x03
     b22:	62 17       	cp	r22, r18
     b24:	73 07       	cpc	r23, r19
     b26:	4c f4       	brge	.+18     	; 0xb3a <_ZN10LinkedListIiE3setEii+0x26>
     b28:	ea 01       	movw	r28, r20
		return false;

	getNode(index)->data = _t;
     b2a:	1d df       	rcall	.-454    	; 0x966 <_ZN10LinkedListIiE7getNodeEi>
     b2c:	fc 01       	movw	r30, r24
     b2e:	d1 83       	std	Z+1, r29	; 0x01
     b30:	c0 83       	st	Z, r28
	return true;
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	03 c0       	rjmp	.+6      	; 0xb3c <_ZN10LinkedListIiE3setEii+0x28>

template<typename T>
bool LinkedList<T>::set(int index, T _t){
	// Check if index position is in bounds
	if(index < 0 || index >= _size)
		return false;
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	01 c0       	rjmp	.+2      	; 0xb3c <_ZN10LinkedListIiE3setEii+0x28>
     b3a:	80 e0       	ldi	r24, 0x00	; 0

	getNode(index)->data = _t;
	return true;
}
     b3c:	df 91       	pop	r29
     b3e:	cf 91       	pop	r28
     b40:	08 95       	ret

00000b42 <_ZN10LinkedListIiE3addEii>:
int LinkedList<T>::size(){
	return _size;
}

template<typename T>
bool LinkedList<T>::add(int index, T _t){
     b42:	cf 92       	push	r12
     b44:	df 92       	push	r13
     b46:	ef 92       	push	r14
     b48:	ff 92       	push	r15
     b4a:	0f 93       	push	r16
     b4c:	1f 93       	push	r17
     b4e:	cf 93       	push	r28
     b50:	df 93       	push	r29
     b52:	ec 01       	movw	r28, r24
     b54:	8b 01       	movw	r16, r22
     b56:	6a 01       	movw	r12, r20

	if(index >= _size)
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	9b 81       	ldd	r25, Y+3	; 0x03
     b5c:	68 17       	cp	r22, r24
     b5e:	79 07       	cpc	r23, r25
     b60:	4c f0       	brlt	.+18     	; 0xb74 <_ZN10LinkedListIiE3addEii+0x32>
		return add(_t);
     b62:	e8 81       	ld	r30, Y
     b64:	f9 81       	ldd	r31, Y+1	; 0x01
     b66:	04 80       	ldd	r0, Z+4	; 0x04
     b68:	f5 81       	ldd	r31, Z+5	; 0x05
     b6a:	e0 2d       	mov	r30, r0
     b6c:	ba 01       	movw	r22, r20
     b6e:	ce 01       	movw	r24, r28
     b70:	19 95       	eicall
     b72:	2d c0       	rjmp	.+90     	; 0xbce <_ZN10LinkedListIiE3addEii+0x8c>

	if(index == 0)
     b74:	67 2b       	or	r22, r23
     b76:	49 f4       	brne	.+18     	; 0xb8a <_ZN10LinkedListIiE3addEii+0x48>
		return unshift(_t);
     b78:	e8 81       	ld	r30, Y
     b7a:	f9 81       	ldd	r31, Y+1	; 0x01
     b7c:	06 80       	ldd	r0, Z+6	; 0x06
     b7e:	f7 81       	ldd	r31, Z+7	; 0x07
     b80:	e0 2d       	mov	r30, r0
     b82:	ba 01       	movw	r22, r20
     b84:	ce 01       	movw	r24, r28
     b86:	19 95       	eicall
     b88:	22 c0       	rjmp	.+68     	; 0xbce <_ZN10LinkedListIiE3addEii+0x8c>

	ListNode<T> *tmp = new ListNode<T>(),
     b8a:	84 e0       	ldi	r24, 0x04	; 4
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <_Znwj>
     b92:	7c 01       	movw	r14, r24
     b94:	fc 01       	movw	r30, r24
     b96:	11 82       	std	Z+1, r1	; 0x01
     b98:	10 82       	st	Z, r1
     b9a:	13 82       	std	Z+3, r1	; 0x03
     b9c:	12 82       	std	Z+2, r1	; 0x02
				 *_prev = getNode(index-1);
     b9e:	b8 01       	movw	r22, r16
     ba0:	61 50       	subi	r22, 0x01	; 1
     ba2:	71 09       	sbc	r23, r1
     ba4:	ce 01       	movw	r24, r28
     ba6:	df de       	rcall	.-578    	; 0x966 <_ZN10LinkedListIiE7getNodeEi>
	tmp->data = _t;
     ba8:	f7 01       	movw	r30, r14
     baa:	d1 82       	std	Z+1, r13	; 0x01
     bac:	c0 82       	st	Z, r12
	tmp->next = _prev->next;
     bae:	fc 01       	movw	r30, r24
     bb0:	22 81       	ldd	r18, Z+2	; 0x02
     bb2:	33 81       	ldd	r19, Z+3	; 0x03
     bb4:	f7 01       	movw	r30, r14
     bb6:	33 83       	std	Z+3, r19	; 0x03
     bb8:	22 83       	std	Z+2, r18	; 0x02
	_prev->next = tmp;
     bba:	fc 01       	movw	r30, r24
     bbc:	f3 82       	std	Z+3, r15	; 0x03
     bbe:	e2 82       	std	Z+2, r14	; 0x02

	_size++;
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	9b 81       	ldd	r25, Y+3	; 0x03
     bc4:	01 96       	adiw	r24, 0x01	; 1
     bc6:	9b 83       	std	Y+3, r25	; 0x03
     bc8:	8a 83       	std	Y+2, r24	; 0x02
	isCached = false;
     bca:	1c 86       	std	Y+12, r1	; 0x0c

	return true;
     bcc:	81 e0       	ldi	r24, 0x01	; 1
}
     bce:	df 91       	pop	r29
     bd0:	cf 91       	pop	r28
     bd2:	1f 91       	pop	r17
     bd4:	0f 91       	pop	r16
     bd6:	ff 90       	pop	r15
     bd8:	ef 90       	pop	r14
     bda:	df 90       	pop	r13
     bdc:	cf 90       	pop	r12
     bde:	08 95       	ret

00000be0 <_ZN9DigitalIOD1Ev>:
}
	
DigitalIO::DigitalIO(int _Pin, DigitalIO::PinModes _Mode){
	Pin = _Pin;
	Mode = _Mode;
}
     be0:	cf 93       	push	r28
     be2:	df 93       	push	r29
     be4:	ec 01       	movw	r28, r24
     be6:	09 96       	adiw	r24, 0x09	; 9
     be8:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
     bec:	ce 01       	movw	r24, r28
     bee:	03 96       	adiw	r24, 0x03	; 3
     bf0:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
     bf4:	df 91       	pop	r29
     bf6:	cf 91       	pop	r28
     bf8:	08 95       	ret

00000bfa <_ZN9DigitalIO5ValueEv>:
     bfa:	cf 93       	push	r28
     bfc:	df 93       	push	r29
     bfe:	ec 01       	movw	r28, r24
     c00:	8a 81       	ldd	r24, Y+2	; 0x02
     c02:	88 23       	and	r24, r24
     c04:	19 f0       	breq	.+6      	; 0xc0c <_ZN9DigitalIO5ValueEv+0x12>
     c06:	82 30       	cpi	r24, 0x02	; 2
     c08:	39 f0       	breq	.+14     	; 0xc18 <_ZN9DigitalIO5ValueEv+0x1e>
     c0a:	0b c0       	rjmp	.+22     	; 0xc22 <_ZN9DigitalIO5ValueEv+0x28>
     c0c:	88 81       	ld	r24, Y
     c0e:	0e 94 45 2c 	call	0x588a	; 0x588a <digitalRead>
     c12:	98 8b       	std	Y+16, r25	; 0x10
     c14:	8f 87       	std	Y+15, r24	; 0x0f
     c16:	05 c0       	rjmp	.+10     	; 0xc22 <_ZN9DigitalIO5ValueEv+0x28>
     c18:	88 81       	ld	r24, Y
     c1a:	0e 94 45 2c 	call	0x588a	; 0x588a <digitalRead>
     c1e:	98 8b       	std	Y+16, r25	; 0x10
     c20:	8f 87       	std	Y+15, r24	; 0x0f
     c22:	8f 85       	ldd	r24, Y+15	; 0x0f
     c24:	98 89       	ldd	r25, Y+16	; 0x10
     c26:	df 91       	pop	r29
     c28:	cf 91       	pop	r28
     c2a:	08 95       	ret

00000c2c <_ZN9DigitalIO5WriteEi>:
     c2c:	0f 93       	push	r16
     c2e:	1f 93       	push	r17
     c30:	cf 93       	push	r28
     c32:	df 93       	push	r29
     c34:	ec 01       	movw	r28, r24
     c36:	8b 01       	movw	r16, r22
     c38:	8a 81       	ldd	r24, Y+2	; 0x02
     c3a:	81 30       	cpi	r24, 0x01	; 1
     c3c:	21 f0       	breq	.+8      	; 0xc46 <_ZN9DigitalIO5WriteEi+0x1a>
     c3e:	61 e0       	ldi	r22, 0x01	; 1
     c40:	88 81       	ld	r24, Y
     c42:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <pinMode>
     c46:	18 8b       	std	Y+16, r17	; 0x10
     c48:	0f 87       	std	Y+15, r16	; 0x0f
     c4a:	61 e0       	ldi	r22, 0x01	; 1
     c4c:	88 81       	ld	r24, Y
     c4e:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <pinMode>
     c52:	6f 85       	ldd	r22, Y+15	; 0x0f
     c54:	88 81       	ld	r24, Y
     c56:	0e 94 15 2c 	call	0x582a	; 0x582a <digitalWrite>
     c5a:	df 91       	pop	r29
     c5c:	cf 91       	pop	r28
     c5e:	1f 91       	pop	r17
     c60:	0f 91       	pop	r16
     c62:	08 95       	ret

00000c64 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>:

DigitalIO::DigitalIO(int _Pin, DigitalIO::PinModes _Mode, String _TrueLabel, String _FalseLabel){
     c64:	7f 92       	push	r7
     c66:	8f 92       	push	r8
     c68:	9f 92       	push	r9
     c6a:	af 92       	push	r10
     c6c:	bf 92       	push	r11
     c6e:	cf 92       	push	r12
     c70:	df 92       	push	r13
     c72:	ef 92       	push	r14
     c74:	ff 92       	push	r15
     c76:	0f 93       	push	r16
     c78:	1f 93       	push	r17
     c7a:	cf 93       	push	r28
     c7c:	df 93       	push	r29
     c7e:	ec 01       	movw	r28, r24
     c80:	5b 01       	movw	r10, r22
     c82:	74 2e       	mov	r7, r20
     c84:	69 01       	movw	r12, r18
     c86:	48 01       	movw	r8, r16
     c88:	8f ef       	ldi	r24, 0xFF	; 255
     c8a:	9f ef       	ldi	r25, 0xFF	; 255
     c8c:	99 83       	std	Y+1, r25	; 0x01
     c8e:	88 83       	st	Y, r24
     c90:	1a 82       	std	Y+2, r1	; 0x02
     c92:	7e 01       	movw	r14, r28
     c94:	83 e0       	ldi	r24, 0x03	; 3
     c96:	e8 0e       	add	r14, r24
     c98:	f1 1c       	adc	r15, r1
     c9a:	65 e2       	ldi	r22, 0x25	; 37
     c9c:	72 e0       	ldi	r23, 0x02	; 2
     c9e:	c7 01       	movw	r24, r14
     ca0:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
     ca4:	8e 01       	movw	r16, r28
     ca6:	07 5f       	subi	r16, 0xF7	; 247
     ca8:	1f 4f       	sbci	r17, 0xFF	; 255
     caa:	6a e2       	ldi	r22, 0x2A	; 42
     cac:	72 e0       	ldi	r23, 0x02	; 2
     cae:	c8 01       	movw	r24, r16
     cb0:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
	Pin = _Pin;
     cb4:	b9 82       	std	Y+1, r11	; 0x01
     cb6:	a8 82       	st	Y, r10
	Mode = _Mode;
     cb8:	7a 82       	std	Y+2, r7	; 0x02
	TrueLabel = _TrueLabel;
     cba:	b6 01       	movw	r22, r12
     cbc:	c7 01       	movw	r24, r14
     cbe:	0e 94 ed 2c 	call	0x59da	; 0x59da <_ZN6StringaSERKS_>
	FalseLabel = _FalseLabel;
     cc2:	b4 01       	movw	r22, r8
     cc4:	c8 01       	movw	r24, r16
     cc6:	0e 94 ed 2c 	call	0x59da	; 0x59da <_ZN6StringaSERKS_>
}
     cca:	df 91       	pop	r29
     ccc:	cf 91       	pop	r28
     cce:	1f 91       	pop	r17
     cd0:	0f 91       	pop	r16
     cd2:	ff 90       	pop	r15
     cd4:	ef 90       	pop	r14
     cd6:	df 90       	pop	r13
     cd8:	cf 90       	pop	r12
     cda:	bf 90       	pop	r11
     cdc:	af 90       	pop	r10
     cde:	9f 90       	pop	r9
     ce0:	8f 90       	pop	r8
     ce2:	7f 90       	pop	r7
     ce4:	08 95       	ret

00000ce6 <_ZNK12EZUI_Control12isSelectableEv>:
protected:
private:

//functions
public:
	virtual boolean isSelectable()  const { return false; };
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	08 95       	ret

00000cea <_ZNK12EZUI_Control6SelectEP4EZUI>:
	virtual void Select(EZUI *UI) const { /* Do Nothing */ };
     cea:	08 95       	ret

00000cec <_ZNK12EZUI_Control4TextEv>:
	virtual String Text()  const { return "";};
     cec:	cf 93       	push	r28
     cee:	df 93       	push	r29
     cf0:	ec 01       	movw	r28, r24
     cf2:	67 e1       	ldi	r22, 0x17	; 23
     cf4:	75 e0       	ldi	r23, 0x05	; 5
     cf6:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
     cfa:	ce 01       	movw	r24, r28
     cfc:	df 91       	pop	r29
     cfe:	cf 91       	pop	r28
     d00:	08 95       	ret

00000d02 <_ZN12EZUI_ControlC1Ev>:


#include "EZUI_Control.h"

// default constructor
EZUI_Control::EZUI_Control()
     d02:	24 e3       	ldi	r18, 0x34	; 52
     d04:	32 e0       	ldi	r19, 0x02	; 2
     d06:	fc 01       	movw	r30, r24
     d08:	31 83       	std	Z+1, r19	; 0x01
     d0a:	20 83       	st	Z, r18
     d0c:	12 82       	std	Z+2, r1	; 0x02
     d0e:	08 95       	ret

00000d10 <_ZN12EZUI_ControlD1Ev>:
{
} //EZUI_Control

// default destructor
EZUI_Control::~EZUI_Control()
     d10:	08 95       	ret

00000d12 <_ZNK18EZUI_Control_Label12isSelectableEv>:
*****************************************************************************/

EZUI_Control_Label::EZUI_Control_Label(String *val){
	Type = DynamicString;
	this->ItemRef = val;
}
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	08 95       	ret

00000d16 <_ZNK18EZUI_Control_Label6SelectEP4EZUI>:
     d16:	08 95       	ret

00000d18 <_ZNK18EZUI_Control_Label4TextEv>:
     d18:	ef 92       	push	r14
     d1a:	ff 92       	push	r15
     d1c:	0f 93       	push	r16
     d1e:	1f 93       	push	r17
     d20:	cf 93       	push	r28
     d22:	df 93       	push	r29
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
     d28:	c4 55       	subi	r28, 0x54	; 84
     d2a:	d1 09       	sbc	r29, r1
     d2c:	0f b6       	in	r0, 0x3f	; 63
     d2e:	f8 94       	cli
     d30:	de bf       	out	0x3e, r29	; 62
     d32:	0f be       	out	0x3f, r0	; 63
     d34:	cd bf       	out	0x3d, r28	; 61
     d36:	7c 01       	movw	r14, r24
     d38:	8b 01       	movw	r16, r22
     d3a:	67 e1       	ldi	r22, 0x17	; 23
     d3c:	75 e0       	ldi	r23, 0x05	; 5
     d3e:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
     d42:	d8 01       	movw	r26, r16
     d44:	13 96       	adiw	r26, 0x03	; 3
     d46:	ec 91       	ld	r30, X
     d48:	4e 2f       	mov	r20, r30
     d4a:	50 e0       	ldi	r21, 0x00	; 0
     d4c:	fa 01       	movw	r30, r20
     d4e:	31 97       	sbiw	r30, 0x01	; 1
     d50:	e0 31       	cpi	r30, 0x10	; 16
     d52:	f1 05       	cpc	r31, r1
     d54:	08 f0       	brcs	.+2      	; 0xd58 <_ZNK18EZUI_Control_Label4TextEv+0x40>
     d56:	6b c1       	rjmp	.+726    	; 0x102e <_ZNK18EZUI_Control_Label4TextEv+0x316>
     d58:	88 27       	eor	r24, r24
     d5a:	ee 58       	subi	r30, 0x8E	; 142
     d5c:	ff 4f       	sbci	r31, 0xFF	; 255
     d5e:	8f 4f       	sbci	r24, 0xFF	; 255
     d60:	0c 94 7a 30 	jmp	0x60f4	; 0x60f4 <__tablejump2__>
     d64:	f8 01       	movw	r30, r16
     d66:	60 85       	ldd	r22, Z+8	; 0x08
     d68:	71 85       	ldd	r23, Z+9	; 0x09
     d6a:	c7 01       	movw	r24, r14
     d6c:	0e 94 ed 2c 	call	0x59da	; 0x59da <_ZN6StringaSERKS_>
     d70:	5e c1       	rjmp	.+700    	; 0x102e <_ZNK18EZUI_Control_Label4TextEv+0x316>
     d72:	d8 01       	movw	r26, r16
     d74:	18 96       	adiw	r26, 0x08	; 8
     d76:	ed 91       	ld	r30, X+
     d78:	fc 91       	ld	r31, X
     d7a:	19 97       	sbiw	r26, 0x09	; 9
     d7c:	40 81       	ld	r20, Z
     d7e:	51 81       	ldd	r21, Z+1	; 0x01
     d80:	62 81       	ldd	r22, Z+2	; 0x02
     d82:	73 81       	ldd	r23, Z+3	; 0x03
     d84:	22 e0       	ldi	r18, 0x02	; 2
     d86:	ce 01       	movw	r24, r28
     d88:	81 5b       	subi	r24, 0xB1	; 177
     d8a:	9f 4f       	sbci	r25, 0xFF	; 255
     d8c:	0e 94 ca 2d 	call	0x5b94	; 0x5b94 <_ZN6StringC1Efh>
     d90:	be 01       	movw	r22, r28
     d92:	61 5b       	subi	r22, 0xB1	; 177
     d94:	7f 4f       	sbci	r23, 0xFF	; 255
     d96:	c7 01       	movw	r24, r14
     d98:	0e 94 ed 2c 	call	0x59da	; 0x59da <_ZN6StringaSERKS_>
     d9c:	ce 01       	movw	r24, r28
     d9e:	81 5b       	subi	r24, 0xB1	; 177
     da0:	9f 4f       	sbci	r25, 0xFF	; 255
     da2:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
     da6:	43 c1       	rjmp	.+646    	; 0x102e <_ZNK18EZUI_Control_Label4TextEv+0x316>
     da8:	d8 01       	movw	r26, r16
     daa:	18 96       	adiw	r26, 0x08	; 8
     dac:	ed 91       	ld	r30, X+
     dae:	fc 91       	ld	r31, X
     db0:	19 97       	sbiw	r26, 0x09	; 9
     db2:	40 81       	ld	r20, Z
     db4:	51 81       	ldd	r21, Z+1	; 0x01
     db6:	62 81       	ldd	r22, Z+2	; 0x02
     db8:	73 81       	ldd	r23, Z+3	; 0x03
     dba:	22 e0       	ldi	r18, 0x02	; 2
     dbc:	ce 01       	movw	r24, r28
     dbe:	87 5b       	subi	r24, 0xB7	; 183
     dc0:	9f 4f       	sbci	r25, 0xFF	; 255
     dc2:	0e 94 f8 2d 	call	0x5bf0	; 0x5bf0 <_ZN6StringC1Edh>
     dc6:	be 01       	movw	r22, r28
     dc8:	67 5b       	subi	r22, 0xB7	; 183
     dca:	7f 4f       	sbci	r23, 0xFF	; 255
     dcc:	c7 01       	movw	r24, r14
     dce:	0e 94 ed 2c 	call	0x59da	; 0x59da <_ZN6StringaSERKS_>
     dd2:	ce 01       	movw	r24, r28
     dd4:	87 5b       	subi	r24, 0xB7	; 183
     dd6:	9f 4f       	sbci	r25, 0xFF	; 255
     dd8:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
     ddc:	28 c1       	rjmp	.+592    	; 0x102e <_ZNK18EZUI_Control_Label4TextEv+0x316>
     dde:	d8 01       	movw	r26, r16
     de0:	18 96       	adiw	r26, 0x08	; 8
     de2:	ed 91       	ld	r30, X+
     de4:	fc 91       	ld	r31, X
     de6:	19 97       	sbiw	r26, 0x09	; 9
     de8:	60 81       	ld	r22, Z
     dea:	71 81       	ldd	r23, Z+1	; 0x01
     dec:	4a e0       	ldi	r20, 0x0A	; 10
     dee:	ce 01       	movw	r24, r28
     df0:	8d 5b       	subi	r24, 0xBD	; 189
     df2:	9f 4f       	sbci	r25, 0xFF	; 255
     df4:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <_ZN6StringC1Eih>
     df8:	be 01       	movw	r22, r28
     dfa:	6d 5b       	subi	r22, 0xBD	; 189
     dfc:	7f 4f       	sbci	r23, 0xFF	; 255
     dfe:	c7 01       	movw	r24, r14
     e00:	0e 94 ed 2c 	call	0x59da	; 0x59da <_ZN6StringaSERKS_>
     e04:	ce 01       	movw	r24, r28
     e06:	8d 5b       	subi	r24, 0xBD	; 189
     e08:	9f 4f       	sbci	r25, 0xFF	; 255
     e0a:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
     e0e:	0f c1       	rjmp	.+542    	; 0x102e <_ZNK18EZUI_Control_Label4TextEv+0x316>
     e10:	d8 01       	movw	r26, r16
     e12:	18 96       	adiw	r26, 0x08	; 8
     e14:	ed 91       	ld	r30, X+
     e16:	fc 91       	ld	r31, X
     e18:	19 97       	sbiw	r26, 0x09	; 9
     e1a:	60 81       	ld	r22, Z
     e1c:	71 81       	ldd	r23, Z+1	; 0x01
     e1e:	4a e0       	ldi	r20, 0x0A	; 10
     e20:	ce 01       	movw	r24, r28
     e22:	cd 96       	adiw	r24, 0x3d	; 61
     e24:	0e 94 4a 2d 	call	0x5a94	; 0x5a94 <_ZN6StringC1Ejh>
     e28:	be 01       	movw	r22, r28
     e2a:	63 5c       	subi	r22, 0xC3	; 195
     e2c:	7f 4f       	sbci	r23, 0xFF	; 255
     e2e:	c7 01       	movw	r24, r14
     e30:	0e 94 ed 2c 	call	0x59da	; 0x59da <_ZN6StringaSERKS_>
     e34:	ce 01       	movw	r24, r28
     e36:	cd 96       	adiw	r24, 0x3d	; 61
     e38:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
     e3c:	f8 c0       	rjmp	.+496    	; 0x102e <_ZNK18EZUI_Control_Label4TextEv+0x316>
     e3e:	d8 01       	movw	r26, r16
     e40:	18 96       	adiw	r26, 0x08	; 8
     e42:	ed 91       	ld	r30, X+
     e44:	fc 91       	ld	r31, X
     e46:	19 97       	sbiw	r26, 0x09	; 9
     e48:	40 81       	ld	r20, Z
     e4a:	51 81       	ldd	r21, Z+1	; 0x01
     e4c:	62 81       	ldd	r22, Z+2	; 0x02
     e4e:	73 81       	ldd	r23, Z+3	; 0x03
     e50:	2a e0       	ldi	r18, 0x0A	; 10
     e52:	ce 01       	movw	r24, r28
     e54:	c7 96       	adiw	r24, 0x37	; 55
     e56:	0e 94 74 2d 	call	0x5ae8	; 0x5ae8 <_ZN6StringC1Elh>
     e5a:	be 01       	movw	r22, r28
     e5c:	69 5c       	subi	r22, 0xC9	; 201
     e5e:	7f 4f       	sbci	r23, 0xFF	; 255
     e60:	c7 01       	movw	r24, r14
     e62:	0e 94 ed 2c 	call	0x59da	; 0x59da <_ZN6StringaSERKS_>
     e66:	ce 01       	movw	r24, r28
     e68:	c7 96       	adiw	r24, 0x37	; 55
     e6a:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
     e6e:	df c0       	rjmp	.+446    	; 0x102e <_ZNK18EZUI_Control_Label4TextEv+0x316>
     e70:	d8 01       	movw	r26, r16
     e72:	18 96       	adiw	r26, 0x08	; 8
     e74:	ed 91       	ld	r30, X+
     e76:	fc 91       	ld	r31, X
     e78:	19 97       	sbiw	r26, 0x09	; 9
     e7a:	40 81       	ld	r20, Z
     e7c:	51 81       	ldd	r21, Z+1	; 0x01
     e7e:	62 81       	ldd	r22, Z+2	; 0x02
     e80:	73 81       	ldd	r23, Z+3	; 0x03
     e82:	2a e0       	ldi	r18, 0x0A	; 10
     e84:	ce 01       	movw	r24, r28
     e86:	c1 96       	adiw	r24, 0x31	; 49
     e88:	0e 94 9f 2d 	call	0x5b3e	; 0x5b3e <_ZN6StringC1Emh>
     e8c:	be 01       	movw	r22, r28
     e8e:	6f 5c       	subi	r22, 0xCF	; 207
     e90:	7f 4f       	sbci	r23, 0xFF	; 255
     e92:	c7 01       	movw	r24, r14
     e94:	0e 94 ed 2c 	call	0x59da	; 0x59da <_ZN6StringaSERKS_>
     e98:	ce 01       	movw	r24, r28
     e9a:	c1 96       	adiw	r24, 0x31	; 49
     e9c:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
     ea0:	c6 c0       	rjmp	.+396    	; 0x102e <_ZNK18EZUI_Control_Label4TextEv+0x316>
     ea2:	d8 01       	movw	r26, r16
     ea4:	18 96       	adiw	r26, 0x08	; 8
     ea6:	ed 91       	ld	r30, X+
     ea8:	fc 91       	ld	r31, X
     eaa:	19 97       	sbiw	r26, 0x09	; 9
     eac:	60 81       	ld	r22, Z
     eae:	70 e0       	ldi	r23, 0x00	; 0
     eb0:	4a e0       	ldi	r20, 0x0A	; 10
     eb2:	ce 01       	movw	r24, r28
     eb4:	8b 96       	adiw	r24, 0x2b	; 43
     eb6:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <_ZN6StringC1Eih>
     eba:	be 01       	movw	r22, r28
     ebc:	65 5d       	subi	r22, 0xD5	; 213
     ebe:	7f 4f       	sbci	r23, 0xFF	; 255
     ec0:	c7 01       	movw	r24, r14
     ec2:	0e 94 ed 2c 	call	0x59da	; 0x59da <_ZN6StringaSERKS_>
     ec6:	ce 01       	movw	r24, r28
     ec8:	8b 96       	adiw	r24, 0x2b	; 43
     eca:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
     ece:	af c0       	rjmp	.+350    	; 0x102e <_ZNK18EZUI_Control_Label4TextEv+0x316>
     ed0:	f8 01       	movw	r30, r16
     ed2:	60 85       	ldd	r22, Z+8	; 0x08
     ed4:	71 85       	ldd	r23, Z+9	; 0x09
     ed6:	c7 01       	movw	r24, r14
     ed8:	0e 94 ed 2c 	call	0x59da	; 0x59da <_ZN6StringaSERKS_>
     edc:	a8 c0       	rjmp	.+336    	; 0x102e <_ZNK18EZUI_Control_Label4TextEv+0x316>
     ede:	d8 01       	movw	r26, r16
     ee0:	18 96       	adiw	r26, 0x08	; 8
     ee2:	ed 91       	ld	r30, X+
     ee4:	fc 91       	ld	r31, X
     ee6:	19 97       	sbiw	r26, 0x09	; 9
     ee8:	40 81       	ld	r20, Z
     eea:	51 81       	ldd	r21, Z+1	; 0x01
     eec:	62 81       	ldd	r22, Z+2	; 0x02
     eee:	73 81       	ldd	r23, Z+3	; 0x03
     ef0:	22 e0       	ldi	r18, 0x02	; 2
     ef2:	ce 01       	movw	r24, r28
     ef4:	85 96       	adiw	r24, 0x25	; 37
     ef6:	0e 94 ca 2d 	call	0x5b94	; 0x5b94 <_ZN6StringC1Efh>
     efa:	be 01       	movw	r22, r28
     efc:	6b 5d       	subi	r22, 0xDB	; 219
     efe:	7f 4f       	sbci	r23, 0xFF	; 255
     f00:	c7 01       	movw	r24, r14
     f02:	0e 94 ed 2c 	call	0x59da	; 0x59da <_ZN6StringaSERKS_>
     f06:	ce 01       	movw	r24, r28
     f08:	85 96       	adiw	r24, 0x25	; 37
     f0a:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
     f0e:	8f c0       	rjmp	.+286    	; 0x102e <_ZNK18EZUI_Control_Label4TextEv+0x316>
     f10:	d8 01       	movw	r26, r16
     f12:	18 96       	adiw	r26, 0x08	; 8
     f14:	ed 91       	ld	r30, X+
     f16:	fc 91       	ld	r31, X
     f18:	19 97       	sbiw	r26, 0x09	; 9
     f1a:	40 81       	ld	r20, Z
     f1c:	51 81       	ldd	r21, Z+1	; 0x01
     f1e:	62 81       	ldd	r22, Z+2	; 0x02
     f20:	73 81       	ldd	r23, Z+3	; 0x03
     f22:	22 e0       	ldi	r18, 0x02	; 2
     f24:	ce 01       	movw	r24, r28
     f26:	4f 96       	adiw	r24, 0x1f	; 31
     f28:	0e 94 f8 2d 	call	0x5bf0	; 0x5bf0 <_ZN6StringC1Edh>
     f2c:	be 01       	movw	r22, r28
     f2e:	61 5e       	subi	r22, 0xE1	; 225
     f30:	7f 4f       	sbci	r23, 0xFF	; 255
     f32:	c7 01       	movw	r24, r14
     f34:	0e 94 ed 2c 	call	0x59da	; 0x59da <_ZN6StringaSERKS_>
     f38:	ce 01       	movw	r24, r28
     f3a:	4f 96       	adiw	r24, 0x1f	; 31
     f3c:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
     f40:	76 c0       	rjmp	.+236    	; 0x102e <_ZNK18EZUI_Control_Label4TextEv+0x316>
     f42:	d8 01       	movw	r26, r16
     f44:	18 96       	adiw	r26, 0x08	; 8
     f46:	ed 91       	ld	r30, X+
     f48:	fc 91       	ld	r31, X
     f4a:	19 97       	sbiw	r26, 0x09	; 9
     f4c:	60 81       	ld	r22, Z
     f4e:	71 81       	ldd	r23, Z+1	; 0x01
     f50:	4a e0       	ldi	r20, 0x0A	; 10
     f52:	ce 01       	movw	r24, r28
     f54:	49 96       	adiw	r24, 0x19	; 25
     f56:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <_ZN6StringC1Eih>
     f5a:	be 01       	movw	r22, r28
     f5c:	67 5e       	subi	r22, 0xE7	; 231
     f5e:	7f 4f       	sbci	r23, 0xFF	; 255
     f60:	c7 01       	movw	r24, r14
     f62:	0e 94 ed 2c 	call	0x59da	; 0x59da <_ZN6StringaSERKS_>
     f66:	ce 01       	movw	r24, r28
     f68:	49 96       	adiw	r24, 0x19	; 25
     f6a:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
     f6e:	5f c0       	rjmp	.+190    	; 0x102e <_ZNK18EZUI_Control_Label4TextEv+0x316>
     f70:	d8 01       	movw	r26, r16
     f72:	18 96       	adiw	r26, 0x08	; 8
     f74:	ed 91       	ld	r30, X+
     f76:	fc 91       	ld	r31, X
     f78:	19 97       	sbiw	r26, 0x09	; 9
     f7a:	60 81       	ld	r22, Z
     f7c:	71 81       	ldd	r23, Z+1	; 0x01
     f7e:	4a e0       	ldi	r20, 0x0A	; 10
     f80:	ce 01       	movw	r24, r28
     f82:	43 96       	adiw	r24, 0x13	; 19
     f84:	0e 94 4a 2d 	call	0x5a94	; 0x5a94 <_ZN6StringC1Ejh>
     f88:	be 01       	movw	r22, r28
     f8a:	6d 5e       	subi	r22, 0xED	; 237
     f8c:	7f 4f       	sbci	r23, 0xFF	; 255
     f8e:	c7 01       	movw	r24, r14
     f90:	0e 94 ed 2c 	call	0x59da	; 0x59da <_ZN6StringaSERKS_>
     f94:	ce 01       	movw	r24, r28
     f96:	43 96       	adiw	r24, 0x13	; 19
     f98:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
     f9c:	48 c0       	rjmp	.+144    	; 0x102e <_ZNK18EZUI_Control_Label4TextEv+0x316>
     f9e:	d8 01       	movw	r26, r16
     fa0:	18 96       	adiw	r26, 0x08	; 8
     fa2:	ed 91       	ld	r30, X+
     fa4:	fc 91       	ld	r31, X
     fa6:	19 97       	sbiw	r26, 0x09	; 9
     fa8:	40 81       	ld	r20, Z
     faa:	51 81       	ldd	r21, Z+1	; 0x01
     fac:	62 81       	ldd	r22, Z+2	; 0x02
     fae:	73 81       	ldd	r23, Z+3	; 0x03
     fb0:	2a e0       	ldi	r18, 0x0A	; 10
     fb2:	ce 01       	movw	r24, r28
     fb4:	0d 96       	adiw	r24, 0x0d	; 13
     fb6:	0e 94 74 2d 	call	0x5ae8	; 0x5ae8 <_ZN6StringC1Elh>
     fba:	be 01       	movw	r22, r28
     fbc:	63 5f       	subi	r22, 0xF3	; 243
     fbe:	7f 4f       	sbci	r23, 0xFF	; 255
     fc0:	c7 01       	movw	r24, r14
     fc2:	0e 94 ed 2c 	call	0x59da	; 0x59da <_ZN6StringaSERKS_>
     fc6:	ce 01       	movw	r24, r28
     fc8:	0d 96       	adiw	r24, 0x0d	; 13
     fca:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
     fce:	2f c0       	rjmp	.+94     	; 0x102e <_ZNK18EZUI_Control_Label4TextEv+0x316>
     fd0:	d8 01       	movw	r26, r16
     fd2:	18 96       	adiw	r26, 0x08	; 8
     fd4:	ed 91       	ld	r30, X+
     fd6:	fc 91       	ld	r31, X
     fd8:	19 97       	sbiw	r26, 0x09	; 9
     fda:	40 81       	ld	r20, Z
     fdc:	51 81       	ldd	r21, Z+1	; 0x01
     fde:	62 81       	ldd	r22, Z+2	; 0x02
     fe0:	73 81       	ldd	r23, Z+3	; 0x03
     fe2:	2a e0       	ldi	r18, 0x0A	; 10
     fe4:	ce 01       	movw	r24, r28
     fe6:	07 96       	adiw	r24, 0x07	; 7
     fe8:	0e 94 9f 2d 	call	0x5b3e	; 0x5b3e <_ZN6StringC1Emh>
     fec:	be 01       	movw	r22, r28
     fee:	69 5f       	subi	r22, 0xF9	; 249
     ff0:	7f 4f       	sbci	r23, 0xFF	; 255
     ff2:	c7 01       	movw	r24, r14
     ff4:	0e 94 ed 2c 	call	0x59da	; 0x59da <_ZN6StringaSERKS_>
     ff8:	ce 01       	movw	r24, r28
     ffa:	07 96       	adiw	r24, 0x07	; 7
     ffc:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
    1000:	16 c0       	rjmp	.+44     	; 0x102e <_ZNK18EZUI_Control_Label4TextEv+0x316>
    1002:	d8 01       	movw	r26, r16
    1004:	18 96       	adiw	r26, 0x08	; 8
    1006:	ed 91       	ld	r30, X+
    1008:	fc 91       	ld	r31, X
    100a:	19 97       	sbiw	r26, 0x09	; 9
    100c:	60 81       	ld	r22, Z
    100e:	70 e0       	ldi	r23, 0x00	; 0
    1010:	4a e0       	ldi	r20, 0x0A	; 10
    1012:	ce 01       	movw	r24, r28
    1014:	01 96       	adiw	r24, 0x01	; 1
    1016:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <_ZN6StringC1Eih>
    101a:	be 01       	movw	r22, r28
    101c:	6f 5f       	subi	r22, 0xFF	; 255
    101e:	7f 4f       	sbci	r23, 0xFF	; 255
    1020:	c7 01       	movw	r24, r14
    1022:	0e 94 ed 2c 	call	0x59da	; 0x59da <_ZN6StringaSERKS_>
    1026:	ce 01       	movw	r24, r28
    1028:	01 96       	adiw	r24, 0x01	; 1
    102a:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
    102e:	c7 01       	movw	r24, r14
    1030:	cc 5a       	subi	r28, 0xAC	; 172
    1032:	df 4f       	sbci	r29, 0xFF	; 255
    1034:	0f b6       	in	r0, 0x3f	; 63
    1036:	f8 94       	cli
    1038:	de bf       	out	0x3e, r29	; 62
    103a:	0f be       	out	0x3f, r0	; 63
    103c:	cd bf       	out	0x3d, r28	; 61
    103e:	df 91       	pop	r29
    1040:	cf 91       	pop	r28
    1042:	1f 91       	pop	r17
    1044:	0f 91       	pop	r16
    1046:	ff 90       	pop	r15
    1048:	ef 90       	pop	r14
    104a:	08 95       	ret

0000104c <_ZN18EZUI_Control_LabelD1Ev>:
    104c:	2e e3       	ldi	r18, 0x3E	; 62
    104e:	32 e0       	ldi	r19, 0x02	; 2
    1050:	fc 01       	movw	r30, r24
    1052:	31 83       	std	Z+1, r19	; 0x01
    1054:	20 83       	st	Z, r18
    1056:	5c ce       	rjmp	.-840    	; 0xd10 <_ZN12EZUI_ControlD1Ev>
    1058:	08 95       	ret

0000105a <_ZN18EZUI_Control_LabelC1Eb>:
    105a:	1f 93       	push	r17
    105c:	cf 93       	push	r28
    105e:	df 93       	push	r29
    1060:	ec 01       	movw	r28, r24
    1062:	16 2f       	mov	r17, r22
    1064:	4e de       	rcall	.-868    	; 0xd02 <_ZN12EZUI_ControlC1Ev>
    1066:	8e e3       	ldi	r24, 0x3E	; 62
    1068:	92 e0       	ldi	r25, 0x02	; 2
    106a:	99 83       	std	Y+1, r25	; 0x01
    106c:	88 83       	st	Y, r24
    106e:	8f ef       	ldi	r24, 0xFF	; 255
    1070:	9f ef       	ldi	r25, 0xFF	; 255
    1072:	dc 01       	movw	r26, r24
    1074:	8c 83       	std	Y+4, r24	; 0x04
    1076:	9d 83       	std	Y+5, r25	; 0x05
    1078:	ae 83       	std	Y+6, r26	; 0x06
    107a:	bf 83       	std	Y+7, r27	; 0x07
    107c:	19 86       	std	Y+9, r1	; 0x09
    107e:	18 86       	std	Y+8, r1	; 0x08
    1080:	88 e0       	ldi	r24, 0x08	; 8
    1082:	8b 83       	std	Y+3, r24	; 0x03
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <_Znwj>
    108c:	99 87       	std	Y+9, r25	; 0x09
    108e:	88 87       	std	Y+8, r24	; 0x08
    1090:	fc 01       	movw	r30, r24
    1092:	10 83       	st	Z, r17
    1094:	df 91       	pop	r29
    1096:	cf 91       	pop	r28
    1098:	1f 91       	pop	r17
    109a:	08 95       	ret

0000109c <_ZN18EZUI_Control_LabelC1EPf>:

EZUI_Control_Label::EZUI_Control_Label(float *val){
    109c:	0f 93       	push	r16
    109e:	1f 93       	push	r17
    10a0:	cf 93       	push	r28
    10a2:	df 93       	push	r29
    10a4:	ec 01       	movw	r28, r24
    10a6:	8b 01       	movw	r16, r22
    10a8:	2c de       	rcall	.-936    	; 0xd02 <_ZN12EZUI_ControlC1Ev>
    10aa:	8e e3       	ldi	r24, 0x3E	; 62
    10ac:	92 e0       	ldi	r25, 0x02	; 2
    10ae:	99 83       	std	Y+1, r25	; 0x01
    10b0:	88 83       	st	Y, r24
    10b2:	8f ef       	ldi	r24, 0xFF	; 255
    10b4:	9f ef       	ldi	r25, 0xFF	; 255
    10b6:	dc 01       	movw	r26, r24
    10b8:	8c 83       	std	Y+4, r24	; 0x04
    10ba:	9d 83       	std	Y+5, r25	; 0x05
    10bc:	ae 83       	std	Y+6, r26	; 0x06
    10be:	bf 83       	std	Y+7, r27	; 0x07
	Type = DynamicFloat;
    10c0:	8a e0       	ldi	r24, 0x0A	; 10
    10c2:	8b 83       	std	Y+3, r24	; 0x03
	this->ItemRef = val;
    10c4:	19 87       	std	Y+9, r17	; 0x09
    10c6:	08 87       	std	Y+8, r16	; 0x08
}
    10c8:	df 91       	pop	r29
    10ca:	cf 91       	pop	r28
    10cc:	1f 91       	pop	r17
    10ce:	0f 91       	pop	r16
    10d0:	08 95       	ret

000010d2 <_ZNK17EZUI_Control_Link12isSelectableEv>:

//functions
public:
	//Over-ridden base class functions
	String Text(void) const  override;
	boolean isSelectable() const  override {return true;};
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	08 95       	ret

000010d6 <_ZNK17EZUI_Control_Link4TextEv>:
// default destructor
EZUI_Control_Link::~EZUI_Control_Link()
{
} //~EZUI_Control_Link

String EZUI_Control_Link::Text(void) const{
    10d6:	cf 93       	push	r28
    10d8:	df 93       	push	r29
    10da:	ec 01       	movw	r28, r24
	return this->Label;
    10dc:	6d 5f       	subi	r22, 0xFD	; 253
    10de:	7f 4f       	sbci	r23, 0xFF	; 255
    10e0:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <_ZN6StringC1ERKS_>
}
    10e4:	ce 01       	movw	r24, r28
    10e6:	df 91       	pop	r29
    10e8:	cf 91       	pop	r28
    10ea:	08 95       	ret

000010ec <_ZNK17EZUI_Control_Link6SelectEP4EZUI>:

void EZUI_Control_Link::Select(EZUI *UI) const{
    10ec:	fc 01       	movw	r30, r24
    10ee:	9b 01       	movw	r18, r22
	if (type == MenuLink){
    10f0:	91 85       	ldd	r25, Z+9	; 0x09
    10f2:	91 11       	cpse	r25, r1
    10f4:	06 c0       	rjmp	.+12     	; 0x1102 <_ZNK17EZUI_Control_Link6SelectEP4EZUI+0x16>
		UI->setDisplay((EZUI_Menu*)LinkRef);
    10f6:	62 85       	ldd	r22, Z+10	; 0x0a
    10f8:	73 85       	ldd	r23, Z+11	; 0x0b
    10fa:	c9 01       	movw	r24, r18
    10fc:	0c 94 c0 17 	jmp	0x2f80	; 0x2f80 <_ZN4EZUI10setDisplayEP9EZUI_Menu>
    1100:	08 95       	ret
	}else if ( type == PageLink){
    1102:	91 30       	cpi	r25, 0x01	; 1
    1104:	29 f4       	brne	.+10     	; 0x1110 <_ZNK17EZUI_Control_Link6SelectEP4EZUI+0x24>
		UI->setDisplay((EZUI_Page*)LinkRef);
    1106:	62 85       	ldd	r22, Z+10	; 0x0a
    1108:	73 85       	ldd	r23, Z+11	; 0x0b
    110a:	c9 01       	movw	r24, r18
    110c:	0c 94 ce 17 	jmp	0x2f9c	; 0x2f9c <_ZN4EZUI10setDisplayEP9EZUI_Page>
    1110:	08 95       	ret

00001112 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Menu>:


#include "EZUI_Control_Link.h"

// default constructor
EZUI_Control_Link::EZUI_Control_Link(String Text, EZUI_Menu * Lnk)
    1112:	cf 92       	push	r12
    1114:	df 92       	push	r13
    1116:	ef 92       	push	r14
    1118:	ff 92       	push	r15
    111a:	0f 93       	push	r16
    111c:	1f 93       	push	r17
    111e:	cf 93       	push	r28
    1120:	df 93       	push	r29
    1122:	ec 01       	movw	r28, r24
    1124:	6b 01       	movw	r12, r22
    1126:	7a 01       	movw	r14, r20
    1128:	ec dd       	rcall	.-1064   	; 0xd02 <_ZN12EZUI_ControlC1Ev>
    112a:	88 e4       	ldi	r24, 0x48	; 72
    112c:	92 e0       	ldi	r25, 0x02	; 2
    112e:	99 83       	std	Y+1, r25	; 0x01
    1130:	88 83       	st	Y, r24
    1132:	8e 01       	movw	r16, r28
    1134:	0d 5f       	subi	r16, 0xFD	; 253
    1136:	1f 4f       	sbci	r17, 0xFF	; 255
    1138:	67 e1       	ldi	r22, 0x17	; 23
    113a:	75 e0       	ldi	r23, 0x05	; 5
    113c:	c8 01       	movw	r24, r16
    113e:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    1142:	19 86       	std	Y+9, r1	; 0x09
    1144:	1b 86       	std	Y+11, r1	; 0x0b
    1146:	1a 86       	std	Y+10, r1	; 0x0a
{
	this->Label = Text;
    1148:	b6 01       	movw	r22, r12
    114a:	c8 01       	movw	r24, r16
    114c:	0e 94 ed 2c 	call	0x59da	; 0x59da <_ZN6StringaSERKS_>
	type = MenuLink;
    1150:	19 86       	std	Y+9, r1	; 0x09
	LinkRef = Lnk;
    1152:	fb 86       	std	Y+11, r15	; 0x0b
    1154:	ea 86       	std	Y+10, r14	; 0x0a
} //EZUI_Control_Link
    1156:	df 91       	pop	r29
    1158:	cf 91       	pop	r28
    115a:	1f 91       	pop	r17
    115c:	0f 91       	pop	r16
    115e:	ff 90       	pop	r15
    1160:	ef 90       	pop	r14
    1162:	df 90       	pop	r13
    1164:	cf 90       	pop	r12
    1166:	08 95       	ret

00001168 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Page>:

// default constructor
EZUI_Control_Link::EZUI_Control_Link(String Text, EZUI_Page * Lnk)
    1168:	cf 92       	push	r12
    116a:	df 92       	push	r13
    116c:	ef 92       	push	r14
    116e:	ff 92       	push	r15
    1170:	0f 93       	push	r16
    1172:	1f 93       	push	r17
    1174:	cf 93       	push	r28
    1176:	df 93       	push	r29
    1178:	ec 01       	movw	r28, r24
    117a:	6b 01       	movw	r12, r22
    117c:	7a 01       	movw	r14, r20
    117e:	c1 dd       	rcall	.-1150   	; 0xd02 <_ZN12EZUI_ControlC1Ev>
    1180:	88 e4       	ldi	r24, 0x48	; 72
    1182:	92 e0       	ldi	r25, 0x02	; 2
    1184:	99 83       	std	Y+1, r25	; 0x01
    1186:	88 83       	st	Y, r24
    1188:	8e 01       	movw	r16, r28
    118a:	0d 5f       	subi	r16, 0xFD	; 253
    118c:	1f 4f       	sbci	r17, 0xFF	; 255
    118e:	67 e1       	ldi	r22, 0x17	; 23
    1190:	75 e0       	ldi	r23, 0x05	; 5
    1192:	c8 01       	movw	r24, r16
    1194:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    1198:	19 86       	std	Y+9, r1	; 0x09
    119a:	1b 86       	std	Y+11, r1	; 0x0b
    119c:	1a 86       	std	Y+10, r1	; 0x0a
{
	this->Label = Text;
    119e:	b6 01       	movw	r22, r12
    11a0:	c8 01       	movw	r24, r16
    11a2:	0e 94 ed 2c 	call	0x59da	; 0x59da <_ZN6StringaSERKS_>
	type = PageLink;
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	89 87       	std	Y+9, r24	; 0x09
	LinkRef = Lnk;
    11aa:	fb 86       	std	Y+11, r15	; 0x0b
    11ac:	ea 86       	std	Y+10, r14	; 0x0a
} //EZUI_Control_Link
    11ae:	df 91       	pop	r29
    11b0:	cf 91       	pop	r28
    11b2:	1f 91       	pop	r17
    11b4:	0f 91       	pop	r16
    11b6:	ff 90       	pop	r15
    11b8:	ef 90       	pop	r14
    11ba:	df 90       	pop	r13
    11bc:	cf 90       	pop	r12
    11be:	08 95       	ret

000011c0 <_ZN17EZUI_Control_LinkD1Ev>:

// default destructor
EZUI_Control_Link::~EZUI_Control_Link()
    11c0:	cf 93       	push	r28
    11c2:	df 93       	push	r29
    11c4:	ec 01       	movw	r28, r24
    11c6:	88 e4       	ldi	r24, 0x48	; 72
    11c8:	92 e0       	ldi	r25, 0x02	; 2
    11ca:	99 83       	std	Y+1, r25	; 0x01
    11cc:	88 83       	st	Y, r24
    11ce:	ce 01       	movw	r24, r28
    11d0:	03 96       	adiw	r24, 0x03	; 3
    11d2:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
    11d6:	ce 01       	movw	r24, r28
    11d8:	9b dd       	rcall	.-1226   	; 0xd10 <_ZN12EZUI_ControlD1Ev>
{
} //~EZUI_Control_Link
    11da:	df 91       	pop	r29
    11dc:	cf 91       	pop	r28
    11de:	08 95       	ret

000011e0 <_ZN25EZUI_Control_ToggleOptionD1Ev>:
			DigitalIO *DIO;
			DIO = DIORef;
			(*DIO).Write(_value);
			break;
		case(VarBool):
			*BlnRef = _value;
    11e0:	cf 93       	push	r28
    11e2:	df 93       	push	r29
    11e4:	ec 01       	movw	r28, r24
    11e6:	0d 96       	adiw	r24, 0x0d	; 13
    11e8:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
    11ec:	ce 01       	movw	r24, r28
    11ee:	07 96       	adiw	r24, 0x07	; 7
    11f0:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
    11f4:	ce 01       	movw	r24, r28
    11f6:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
    11fa:	df 91       	pop	r29
    11fc:	cf 91       	pop	r28
    11fe:	08 95       	ret

00001200 <_ZN25EZUI_Control_ToggleOption9TrueLabelEv>:
    1200:	cf 93       	push	r28
    1202:	df 93       	push	r29
    1204:	ec 01       	movw	r28, r24
    1206:	fb 01       	movw	r30, r22
    1208:	86 81       	ldd	r24, Z+6	; 0x06
    120a:	88 23       	and	r24, r24
    120c:	19 f0       	breq	.+6      	; 0x1214 <_ZN25EZUI_Control_ToggleOption9TrueLabelEv+0x14>
    120e:	81 30       	cpi	r24, 0x01	; 1
    1210:	51 f0       	breq	.+20     	; 0x1226 <_ZN25EZUI_Control_ToggleOption9TrueLabelEv+0x26>
    1212:	0f c0       	rjmp	.+30     	; 0x1232 <_ZN25EZUI_Control_ToggleOption9TrueLabelEv+0x32>
    1214:	fb 01       	movw	r30, r22
    1216:	65 89       	ldd	r22, Z+21	; 0x15
    1218:	76 89       	ldd	r23, Z+22	; 0x16
    121a:	6d 5f       	subi	r22, 0xFD	; 253
    121c:	7f 4f       	sbci	r23, 0xFF	; 255
    121e:	ce 01       	movw	r24, r28
    1220:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <_ZN6StringC1ERKS_>
    1224:	06 c0       	rjmp	.+12     	; 0x1232 <_ZN25EZUI_Control_ToggleOption9TrueLabelEv+0x32>
    1226:	69 5f       	subi	r22, 0xF9	; 249
    1228:	7f 4f       	sbci	r23, 0xFF	; 255
    122a:	ce 01       	movw	r24, r28
    122c:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <_ZN6StringC1ERKS_>
    1230:	00 c0       	rjmp	.+0      	; 0x1232 <_ZN25EZUI_Control_ToggleOption9TrueLabelEv+0x32>
    1232:	ce 01       	movw	r24, r28
    1234:	df 91       	pop	r29
    1236:	cf 91       	pop	r28
    1238:	08 95       	ret

0000123a <_ZN25EZUI_Control_ToggleOption10FalseLabelEv>:
    123a:	cf 93       	push	r28
    123c:	df 93       	push	r29
    123e:	ec 01       	movw	r28, r24
    1240:	fb 01       	movw	r30, r22
    1242:	86 81       	ldd	r24, Z+6	; 0x06
    1244:	88 23       	and	r24, r24
    1246:	19 f0       	breq	.+6      	; 0x124e <_ZN25EZUI_Control_ToggleOption10FalseLabelEv+0x14>
    1248:	81 30       	cpi	r24, 0x01	; 1
    124a:	51 f0       	breq	.+20     	; 0x1260 <_ZN25EZUI_Control_ToggleOption10FalseLabelEv+0x26>
    124c:	0f c0       	rjmp	.+30     	; 0x126c <_ZN25EZUI_Control_ToggleOption10FalseLabelEv+0x32>
    124e:	fb 01       	movw	r30, r22
    1250:	65 89       	ldd	r22, Z+21	; 0x15
    1252:	76 89       	ldd	r23, Z+22	; 0x16
    1254:	67 5f       	subi	r22, 0xF7	; 247
    1256:	7f 4f       	sbci	r23, 0xFF	; 255
    1258:	ce 01       	movw	r24, r28
    125a:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <_ZN6StringC1ERKS_>
    125e:	06 c0       	rjmp	.+12     	; 0x126c <_ZN25EZUI_Control_ToggleOption10FalseLabelEv+0x32>
    1260:	63 5f       	subi	r22, 0xF3	; 243
    1262:	7f 4f       	sbci	r23, 0xFF	; 255
    1264:	ce 01       	movw	r24, r28
    1266:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <_ZN6StringC1ERKS_>
    126a:	00 c0       	rjmp	.+0      	; 0x126c <_ZN25EZUI_Control_ToggleOption10FalseLabelEv+0x32>
    126c:	ce 01       	movw	r24, r28
    126e:	df 91       	pop	r29
    1270:	cf 91       	pop	r28
    1272:	08 95       	ret

00001274 <_ZN25EZUI_Control_ToggleOption5ValueEv>:
    1274:	dc 01       	movw	r26, r24
    1276:	16 96       	adiw	r26, 0x06	; 6
    1278:	2c 91       	ld	r18, X
    127a:	22 23       	and	r18, r18
    127c:	19 f0       	breq	.+6      	; 0x1284 <_ZN25EZUI_Control_ToggleOption5ValueEv+0x10>
    127e:	21 30       	cpi	r18, 0x01	; 1
    1280:	39 f0       	breq	.+14     	; 0x1290 <_ZN25EZUI_Control_ToggleOption5ValueEv+0x1c>
    1282:	0e c0       	rjmp	.+28     	; 0x12a0 <_ZN25EZUI_Control_ToggleOption5ValueEv+0x2c>
    1284:	fc 01       	movw	r30, r24
    1286:	85 89       	ldd	r24, Z+21	; 0x15
    1288:	96 89       	ldd	r25, Z+22	; 0x16
    128a:	b7 dc       	rcall	.-1682   	; 0xbfa <_ZN9DigitalIO5ValueEv>
    128c:	9c 01       	movw	r18, r24
    128e:	09 c0       	rjmp	.+18     	; 0x12a2 <_ZN25EZUI_Control_ToggleOption5ValueEv+0x2e>
    1290:	dc 01       	movw	r26, r24
    1292:	53 96       	adiw	r26, 0x13	; 19
    1294:	ed 91       	ld	r30, X+
    1296:	fc 91       	ld	r31, X
    1298:	54 97       	sbiw	r26, 0x14	; 20
    129a:	20 81       	ld	r18, Z
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	01 c0       	rjmp	.+2      	; 0x12a2 <_ZN25EZUI_Control_ToggleOption5ValueEv+0x2e>
    12a0:	08 95       	ret
    12a2:	82 2f       	mov	r24, r18
    12a4:	93 2f       	mov	r25, r19
    12a6:	08 95       	ret

000012a8 <_ZNK25EZUI_Control_ToggleOption6ToggleEv>:
			break;
	}
}

void EZUI_Control_ToggleOption::Toggle(void) const{
    12a8:	cf 93       	push	r28
    12aa:	df 93       	push	r29
	switch(Type){
    12ac:	dc 01       	movw	r26, r24
    12ae:	16 96       	adiw	r26, 0x06	; 6
    12b0:	2c 91       	ld	r18, X
    12b2:	22 23       	and	r18, r18
    12b4:	19 f0       	breq	.+6      	; 0x12bc <_ZNK25EZUI_Control_ToggleOption6ToggleEv+0x14>
    12b6:	21 30       	cpi	r18, 0x01	; 1
    12b8:	91 f0       	breq	.+36     	; 0x12de <_ZNK25EZUI_Control_ToggleOption6ToggleEv+0x36>
    12ba:	1a c0       	rjmp	.+52     	; 0x12f0 <_ZNK25EZUI_Control_ToggleOption6ToggleEv+0x48>
    12bc:	fc 01       	movw	r30, r24
		case(VarDigIO):
			DigitalIO *DIO;
			DIO = DIORef;
    12be:	c5 89       	ldd	r28, Z+21	; 0x15
    12c0:	d6 89       	ldd	r29, Z+22	; 0x16
			if ((*DIO).Value()){
    12c2:	ce 01       	movw	r24, r28
    12c4:	9a dc       	rcall	.-1740   	; 0xbfa <_ZN9DigitalIO5ValueEv>
    12c6:	89 2b       	or	r24, r25
    12c8:	29 f0       	breq	.+10     	; 0x12d4 <_ZNK25EZUI_Control_ToggleOption6ToggleEv+0x2c>
				(*DIO).Write(0);
    12ca:	60 e0       	ldi	r22, 0x00	; 0
    12cc:	70 e0       	ldi	r23, 0x00	; 0
    12ce:	ce 01       	movw	r24, r28
    12d0:	ad dc       	rcall	.-1702   	; 0xc2c <_ZN9DigitalIO5WriteEi>
    12d2:	0e c0       	rjmp	.+28     	; 0x12f0 <_ZNK25EZUI_Control_ToggleOption6ToggleEv+0x48>
			}else{
				(*DIO).Write(1);
    12d4:	61 e0       	ldi	r22, 0x01	; 1
    12d6:	70 e0       	ldi	r23, 0x00	; 0
    12d8:	ce 01       	movw	r24, r28
    12da:	a8 dc       	rcall	.-1712   	; 0xc2c <_ZN9DigitalIO5WriteEi>
    12dc:	09 c0       	rjmp	.+18     	; 0x12f0 <_ZNK25EZUI_Control_ToggleOption6ToggleEv+0x48>
			}
			break;
		case(VarBool):
			*BlnRef = !(*BlnRef);
    12de:	dc 01       	movw	r26, r24
    12e0:	53 96       	adiw	r26, 0x13	; 19
    12e2:	ed 91       	ld	r30, X+
    12e4:	fc 91       	ld	r31, X
    12e6:	54 97       	sbiw	r26, 0x14	; 20
    12e8:	90 81       	ld	r25, Z
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	89 27       	eor	r24, r25
    12ee:	80 83       	st	Z, r24
			break;
	}
}
    12f0:	df 91       	pop	r29
    12f2:	cf 91       	pop	r28
    12f4:	08 95       	ret

000012f6 <_ZN25EZUI_Control_ToggleOptionC1E6StringP9DigitalIO>:

EZUI_Control_ToggleOption::EZUI_Control_ToggleOption(String _Label, DigitalIO * DigitalIOObject)
    12f6:	ef 92       	push	r14
    12f8:	ff 92       	push	r15
    12fa:	0f 93       	push	r16
    12fc:	1f 93       	push	r17
    12fe:	cf 93       	push	r28
    1300:	df 93       	push	r29
    1302:	ec 01       	movw	r28, r24
    1304:	7b 01       	movw	r14, r22
    1306:	8a 01       	movw	r16, r20
    1308:	67 e1       	ldi	r22, 0x17	; 23
    130a:	75 e0       	ldi	r23, 0x05	; 5
    130c:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	8e 83       	std	Y+6, r24	; 0x06
    1314:	65 e2       	ldi	r22, 0x25	; 37
    1316:	72 e0       	ldi	r23, 0x02	; 2
    1318:	ce 01       	movw	r24, r28
    131a:	07 96       	adiw	r24, 0x07	; 7
    131c:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    1320:	6a e2       	ldi	r22, 0x2A	; 42
    1322:	72 e0       	ldi	r23, 0x02	; 2
    1324:	ce 01       	movw	r24, r28
    1326:	0d 96       	adiw	r24, 0x0d	; 13
    1328:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    132c:	1c 8a       	std	Y+20, r1	; 0x14
    132e:	1b 8a       	std	Y+19, r1	; 0x13
    1330:	1e 8a       	std	Y+22, r1	; 0x16
    1332:	1d 8a       	std	Y+21, r1	; 0x15
{
	Label = _Label;
    1334:	b7 01       	movw	r22, r14
    1336:	ce 01       	movw	r24, r28
    1338:	0e 94 ed 2c 	call	0x59da	; 0x59da <_ZN6StringaSERKS_>
	Type = VarDigIO;
    133c:	1e 82       	std	Y+6, r1	; 0x06
	DIORef = DigitalIOObject;	
    133e:	1e 8b       	std	Y+22, r17	; 0x16
    1340:	0d 8b       	std	Y+21, r16	; 0x15
}
    1342:	df 91       	pop	r29
    1344:	cf 91       	pop	r28
    1346:	1f 91       	pop	r17
    1348:	0f 91       	pop	r16
    134a:	ff 90       	pop	r15
    134c:	ef 90       	pop	r14
    134e:	08 95       	ret

00001350 <_Z15serviceEncodersv>:

/**************************
*	Functions
**************************/
void serviceEncoders(){
	MAIN_ENC.service();
    1350:	8c e1       	ldi	r24, 0x1C	; 28
    1352:	97 e0       	ldi	r25, 0x07	; 7
    1354:	0e 94 0b 1a 	call	0x3416	; 0x3416 <_ZN12ClickEncoder7serviceEv>
	HLT_ENC.service();
    1358:	88 ed       	ldi	r24, 0xD8	; 216
    135a:	96 e0       	ldi	r25, 0x06	; 6
    135c:	0e 94 0b 1a 	call	0x3416	; 0x3416 <_ZN12ClickEncoder7serviceEv>
	MLT_ENC.service();
    1360:	80 e3       	ldi	r24, 0x30	; 48
    1362:	96 e0       	ldi	r25, 0x06	; 6
    1364:	0e 94 0b 1a 	call	0x3416	; 0x3416 <_ZN12ClickEncoder7serviceEv>
	BK_ENC.service();
    1368:	88 e8       	ldi	r24, 0x88	; 136
    136a:	95 e0       	ldi	r25, 0x05	; 5
    136c:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <_ZN12ClickEncoder7serviceEv>
    1370:	08 95       	ret

00001372 <_ZN22ClickEncoderWithEventsC1Ehhhh>:
		int16_t t_value = 0;

	//functions
	public:
		ClickEncoderWithEvents(uint8_t A, uint8_t B, uint8_t SW) : ClickEncoder(A, B, SW ) {};
		ClickEncoderWithEvents(uint8_t A, uint8_t B, uint8_t SW, uint8_t DEGPERNOTCH) : ClickEncoder(A, B, SW, DEGPERNOTCH) {};
    1372:	ef 92       	push	r14
    1374:	0f 93       	push	r16
    1376:	cf 93       	push	r28
    1378:	df 93       	push	r29
    137a:	ec 01       	movw	r28, r24
    137c:	e1 2c       	mov	r14, r1
    137e:	0e 94 c5 19 	call	0x338a	; 0x338a <_ZN12ClickEncoderC1Ehhhhb>
    1382:	19 8a       	std	Y+17, r1	; 0x11
    1384:	18 8a       	std	Y+16, r1	; 0x10
    1386:	1b 8a       	std	Y+19, r1	; 0x13
    1388:	1a 8a       	std	Y+18, r1	; 0x12
    138a:	1d 8a       	std	Y+21, r1	; 0x15
    138c:	1c 8a       	std	Y+20, r1	; 0x14
    138e:	1f 8a       	std	Y+23, r1	; 0x17
    1390:	1e 8a       	std	Y+22, r1	; 0x16
    1392:	19 8e       	std	Y+25, r1	; 0x19
    1394:	18 8e       	std	Y+24, r1	; 0x18
    1396:	1b 8e       	std	Y+27, r1	; 0x1b
    1398:	1a 8e       	std	Y+26, r1	; 0x1a
    139a:	1d 8e       	std	Y+29, r1	; 0x1d
    139c:	1c 8e       	std	Y+28, r1	; 0x1c
    139e:	1f 8e       	std	Y+31, r1	; 0x1f
    13a0:	1e 8e       	std	Y+30, r1	; 0x1e
    13a2:	18 a2       	std	Y+32, r1	; 0x20
    13a4:	19 a2       	std	Y+33, r1	; 0x21
    13a6:	1a a2       	std	Y+34, r1	; 0x22
    13a8:	1b a2       	std	Y+35, r1	; 0x23
    13aa:	1c a2       	std	Y+36, r1	; 0x24
    13ac:	1d a2       	std	Y+37, r1	; 0x25
    13ae:	1e a2       	std	Y+38, r1	; 0x26
    13b0:	1f a2       	std	Y+39, r1	; 0x27
    13b2:	19 a6       	std	Y+41, r1	; 0x29
    13b4:	18 a6       	std	Y+40, r1	; 0x28
    13b6:	1b a6       	std	Y+43, r1	; 0x2b
    13b8:	1a a6       	std	Y+42, r1	; 0x2a
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	0f 91       	pop	r16
    13c0:	ef 90       	pop	r14
    13c2:	08 95       	ret

000013c4 <_GLOBAL__sub_I__Z15serviceEncodersv>:
LiquidCrystal_I2C BK_LCD( BK_LCD_I2C_ADDR, En_pin, Rw_pin, Rs_pin, D4_pin, D5_pin, D6_pin, D7_pin);
ClickEncoderWithEvents BK_ENC( BK_ENC_A, BK_ENC_B, BK_ENC_SW, BK_ENC_DEG_PER_NOTCH );
DigitalIO * BK_SOL1 = &RC1_OUT1;
DigitalIO * BK_SOL2 = &RC1_OUT2;
WheatstoneBridge BK_RTD_BP(BK_RTD_Vs_AN, BK_RTD_BP_AN, RTDLUT, WB_R2, WB_R3, WB_R4, WB_OpAmpGn, WB_Rs);
WheatstoneBridge BK_RTD_OP(BK_RTD_Vs_AN, BK_RTD_OP_AN, RTDLUT, WB_R2, WB_R3, WB_R4, WB_OpAmpGn, WB_Rs);
    13c4:	2f 92       	push	r2
    13c6:	3f 92       	push	r3
    13c8:	4f 92       	push	r4
    13ca:	5f 92       	push	r5
    13cc:	6f 92       	push	r6
    13ce:	7f 92       	push	r7
    13d0:	8f 92       	push	r8
    13d2:	9f 92       	push	r9
    13d4:	af 92       	push	r10
    13d6:	bf 92       	push	r11
    13d8:	cf 92       	push	r12
    13da:	df 92       	push	r13
    13dc:	ef 92       	push	r14
    13de:	ff 92       	push	r15
    13e0:	0f 93       	push	r16
    13e2:	1f 93       	push	r17
    13e4:	cf 93       	push	r28
    13e6:	df 93       	push	r29
    13e8:	cd b7       	in	r28, 0x3d	; 61
    13ea:	de b7       	in	r29, 0x3e	; 62
    13ec:	c0 5c       	subi	r28, 0xC0	; 192
    13ee:	d1 09       	sbc	r29, r1
    13f0:	0f b6       	in	r0, 0x3f	; 63
    13f2:	f8 94       	cli
    13f4:	de bf       	out	0x3e, r29	; 62
    13f6:	0f be       	out	0x3f, r0	; 63
    13f8:	cd bf       	out	0x3d, r28	; 61
float freeSramPct = 0;

/**************************
*	Digital IO
**************************/
DigitalIO RC1_OUT1 = DigitalIO(49, DigitalIO::OUT, "OFF", "ON");
    13fa:	6e e4       	ldi	r22, 0x4E	; 78
    13fc:	72 e0       	ldi	r23, 0x02	; 2
    13fe:	ce 01       	movw	r24, r28
    1400:	01 96       	adiw	r24, 0x01	; 1
    1402:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    1406:	61 e5       	ldi	r22, 0x51	; 81
    1408:	72 e0       	ldi	r23, 0x02	; 2
    140a:	ce 01       	movw	r24, r28
    140c:	07 96       	adiw	r24, 0x07	; 7
    140e:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    1412:	8e 01       	movw	r16, r28
    1414:	0f 5f       	subi	r16, 0xFF	; 255
    1416:	1f 4f       	sbci	r17, 0xFF	; 255
    1418:	9e 01       	movw	r18, r28
    141a:	29 5f       	subi	r18, 0xF9	; 249
    141c:	3f 4f       	sbci	r19, 0xFF	; 255
    141e:	41 e0       	ldi	r20, 0x01	; 1
    1420:	61 e3       	ldi	r22, 0x31	; 49
    1422:	70 e0       	ldi	r23, 0x00	; 0
    1424:	88 e7       	ldi	r24, 0x78	; 120
    1426:	98 e0       	ldi	r25, 0x08	; 8
    1428:	1d dc       	rcall	.-1990   	; 0xc64 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
    142a:	ce 01       	movw	r24, r28
    142c:	07 96       	adiw	r24, 0x07	; 7
    142e:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
    1432:	c8 01       	movw	r24, r16
    1434:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
DigitalIO RC1_OUT2 = DigitalIO(48 , DigitalIO::OUT, "OFF", "ON");
    1438:	6e e4       	ldi	r22, 0x4E	; 78
    143a:	72 e0       	ldi	r23, 0x02	; 2
    143c:	ce 01       	movw	r24, r28
    143e:	0d 96       	adiw	r24, 0x0d	; 13
    1440:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    1444:	61 e5       	ldi	r22, 0x51	; 81
    1446:	72 e0       	ldi	r23, 0x02	; 2
    1448:	ce 01       	movw	r24, r28
    144a:	43 96       	adiw	r24, 0x13	; 19
    144c:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    1450:	04 5f       	subi	r16, 0xF4	; 244
    1452:	1f 4f       	sbci	r17, 0xFF	; 255
    1454:	9e 01       	movw	r18, r28
    1456:	2d 5e       	subi	r18, 0xED	; 237
    1458:	3f 4f       	sbci	r19, 0xFF	; 255
    145a:	41 e0       	ldi	r20, 0x01	; 1
    145c:	60 e3       	ldi	r22, 0x30	; 48
    145e:	70 e0       	ldi	r23, 0x00	; 0
    1460:	87 e6       	ldi	r24, 0x67	; 103
    1462:	98 e0       	ldi	r25, 0x08	; 8
    1464:	ff db       	rcall	.-2050   	; 0xc64 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
    1466:	ce 01       	movw	r24, r28
    1468:	43 96       	adiw	r24, 0x13	; 19
    146a:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
    146e:	c8 01       	movw	r24, r16
    1470:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
DigitalIO RC1_OUT3 = DigitalIO(47 , DigitalIO::OUT, "OFF", "ON");
    1474:	6e e4       	ldi	r22, 0x4E	; 78
    1476:	72 e0       	ldi	r23, 0x02	; 2
    1478:	ce 01       	movw	r24, r28
    147a:	49 96       	adiw	r24, 0x19	; 25
    147c:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    1480:	61 e5       	ldi	r22, 0x51	; 81
    1482:	72 e0       	ldi	r23, 0x02	; 2
    1484:	ce 01       	movw	r24, r28
    1486:	4f 96       	adiw	r24, 0x1f	; 31
    1488:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    148c:	04 5f       	subi	r16, 0xF4	; 244
    148e:	1f 4f       	sbci	r17, 0xFF	; 255
    1490:	9e 01       	movw	r18, r28
    1492:	21 5e       	subi	r18, 0xE1	; 225
    1494:	3f 4f       	sbci	r19, 0xFF	; 255
    1496:	41 e0       	ldi	r20, 0x01	; 1
    1498:	6f e2       	ldi	r22, 0x2F	; 47
    149a:	70 e0       	ldi	r23, 0x00	; 0
    149c:	86 e5       	ldi	r24, 0x56	; 86
    149e:	98 e0       	ldi	r25, 0x08	; 8
    14a0:	e1 db       	rcall	.-2110   	; 0xc64 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
    14a2:	ce 01       	movw	r24, r28
    14a4:	4f 96       	adiw	r24, 0x1f	; 31
    14a6:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
    14aa:	c8 01       	movw	r24, r16
    14ac:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
DigitalIO RC1_OUT4 = DigitalIO(46 , DigitalIO::OUT, "OFF", "ON");
    14b0:	6e e4       	ldi	r22, 0x4E	; 78
    14b2:	72 e0       	ldi	r23, 0x02	; 2
    14b4:	ce 01       	movw	r24, r28
    14b6:	85 96       	adiw	r24, 0x25	; 37
    14b8:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    14bc:	61 e5       	ldi	r22, 0x51	; 81
    14be:	72 e0       	ldi	r23, 0x02	; 2
    14c0:	ce 01       	movw	r24, r28
    14c2:	8b 96       	adiw	r24, 0x2b	; 43
    14c4:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    14c8:	04 5f       	subi	r16, 0xF4	; 244
    14ca:	1f 4f       	sbci	r17, 0xFF	; 255
    14cc:	9e 01       	movw	r18, r28
    14ce:	25 5d       	subi	r18, 0xD5	; 213
    14d0:	3f 4f       	sbci	r19, 0xFF	; 255
    14d2:	41 e0       	ldi	r20, 0x01	; 1
    14d4:	6e e2       	ldi	r22, 0x2E	; 46
    14d6:	70 e0       	ldi	r23, 0x00	; 0
    14d8:	85 e4       	ldi	r24, 0x45	; 69
    14da:	98 e0       	ldi	r25, 0x08	; 8
    14dc:	c3 db       	rcall	.-2170   	; 0xc64 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
    14de:	ce 01       	movw	r24, r28
    14e0:	8b 96       	adiw	r24, 0x2b	; 43
    14e2:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
    14e6:	c8 01       	movw	r24, r16
    14e8:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
DigitalIO RC1_OUT5 = DigitalIO(45 , DigitalIO::OUT, "OFF", "ON");
    14ec:	6e e4       	ldi	r22, 0x4E	; 78
    14ee:	72 e0       	ldi	r23, 0x02	; 2
    14f0:	ce 01       	movw	r24, r28
    14f2:	c1 96       	adiw	r24, 0x31	; 49
    14f4:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    14f8:	61 e5       	ldi	r22, 0x51	; 81
    14fa:	72 e0       	ldi	r23, 0x02	; 2
    14fc:	ce 01       	movw	r24, r28
    14fe:	c7 96       	adiw	r24, 0x37	; 55
    1500:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    1504:	04 5f       	subi	r16, 0xF4	; 244
    1506:	1f 4f       	sbci	r17, 0xFF	; 255
    1508:	9e 01       	movw	r18, r28
    150a:	29 5c       	subi	r18, 0xC9	; 201
    150c:	3f 4f       	sbci	r19, 0xFF	; 255
    150e:	41 e0       	ldi	r20, 0x01	; 1
    1510:	6d e2       	ldi	r22, 0x2D	; 45
    1512:	70 e0       	ldi	r23, 0x00	; 0
    1514:	84 e3       	ldi	r24, 0x34	; 52
    1516:	98 e0       	ldi	r25, 0x08	; 8
    1518:	a5 db       	rcall	.-2230   	; 0xc64 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
    151a:	ce 01       	movw	r24, r28
    151c:	c7 96       	adiw	r24, 0x37	; 55
    151e:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
    1522:	c8 01       	movw	r24, r16
    1524:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
DigitalIO RC1_OUT6 = DigitalIO(44 , DigitalIO::OUT, "OFF", "ON");
    1528:	6e e4       	ldi	r22, 0x4E	; 78
    152a:	72 e0       	ldi	r23, 0x02	; 2
    152c:	ce 01       	movw	r24, r28
    152e:	cd 96       	adiw	r24, 0x3d	; 61
    1530:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    1534:	61 e5       	ldi	r22, 0x51	; 81
    1536:	72 e0       	ldi	r23, 0x02	; 2
    1538:	ce 01       	movw	r24, r28
    153a:	8d 5b       	subi	r24, 0xBD	; 189
    153c:	9f 4f       	sbci	r25, 0xFF	; 255
    153e:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    1542:	04 5f       	subi	r16, 0xF4	; 244
    1544:	1f 4f       	sbci	r17, 0xFF	; 255
    1546:	9e 01       	movw	r18, r28
    1548:	2d 5b       	subi	r18, 0xBD	; 189
    154a:	3f 4f       	sbci	r19, 0xFF	; 255
    154c:	41 e0       	ldi	r20, 0x01	; 1
    154e:	6c e2       	ldi	r22, 0x2C	; 44
    1550:	70 e0       	ldi	r23, 0x00	; 0
    1552:	83 e2       	ldi	r24, 0x23	; 35
    1554:	98 e0       	ldi	r25, 0x08	; 8
    1556:	86 db       	rcall	.-2292   	; 0xc64 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
    1558:	ce 01       	movw	r24, r28
    155a:	8d 5b       	subi	r24, 0xBD	; 189
    155c:	9f 4f       	sbci	r25, 0xFF	; 255
    155e:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
    1562:	c8 01       	movw	r24, r16
    1564:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
DigitalIO RC1_OUT7 = DigitalIO(43 , DigitalIO::OUT, "OFF", "ON");
    1568:	6e e4       	ldi	r22, 0x4E	; 78
    156a:	72 e0       	ldi	r23, 0x02	; 2
    156c:	ce 01       	movw	r24, r28
    156e:	87 5b       	subi	r24, 0xB7	; 183
    1570:	9f 4f       	sbci	r25, 0xFF	; 255
    1572:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    1576:	61 e5       	ldi	r22, 0x51	; 81
    1578:	72 e0       	ldi	r23, 0x02	; 2
    157a:	ce 01       	movw	r24, r28
    157c:	81 5b       	subi	r24, 0xB1	; 177
    157e:	9f 4f       	sbci	r25, 0xFF	; 255
    1580:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    1584:	04 5f       	subi	r16, 0xF4	; 244
    1586:	1f 4f       	sbci	r17, 0xFF	; 255
    1588:	9e 01       	movw	r18, r28
    158a:	21 5b       	subi	r18, 0xB1	; 177
    158c:	3f 4f       	sbci	r19, 0xFF	; 255
    158e:	41 e0       	ldi	r20, 0x01	; 1
    1590:	6b e2       	ldi	r22, 0x2B	; 43
    1592:	70 e0       	ldi	r23, 0x00	; 0
    1594:	82 e1       	ldi	r24, 0x12	; 18
    1596:	98 e0       	ldi	r25, 0x08	; 8
    1598:	65 db       	rcall	.-2358   	; 0xc64 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
    159a:	ce 01       	movw	r24, r28
    159c:	81 5b       	subi	r24, 0xB1	; 177
    159e:	9f 4f       	sbci	r25, 0xFF	; 255
    15a0:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
    15a4:	c8 01       	movw	r24, r16
    15a6:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
DigitalIO RC1_OUT8 = DigitalIO(42 , DigitalIO::OUT, "OFF", "ON");
    15aa:	6e e4       	ldi	r22, 0x4E	; 78
    15ac:	72 e0       	ldi	r23, 0x02	; 2
    15ae:	ce 01       	movw	r24, r28
    15b0:	8b 5a       	subi	r24, 0xAB	; 171
    15b2:	9f 4f       	sbci	r25, 0xFF	; 255
    15b4:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    15b8:	61 e5       	ldi	r22, 0x51	; 81
    15ba:	72 e0       	ldi	r23, 0x02	; 2
    15bc:	ce 01       	movw	r24, r28
    15be:	85 5a       	subi	r24, 0xA5	; 165
    15c0:	9f 4f       	sbci	r25, 0xFF	; 255
    15c2:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    15c6:	04 5f       	subi	r16, 0xF4	; 244
    15c8:	1f 4f       	sbci	r17, 0xFF	; 255
    15ca:	9e 01       	movw	r18, r28
    15cc:	25 5a       	subi	r18, 0xA5	; 165
    15ce:	3f 4f       	sbci	r19, 0xFF	; 255
    15d0:	41 e0       	ldi	r20, 0x01	; 1
    15d2:	6a e2       	ldi	r22, 0x2A	; 42
    15d4:	70 e0       	ldi	r23, 0x00	; 0
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	98 e0       	ldi	r25, 0x08	; 8
    15da:	44 db       	rcall	.-2424   	; 0xc64 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
    15dc:	ce 01       	movw	r24, r28
    15de:	85 5a       	subi	r24, 0xA5	; 165
    15e0:	9f 4f       	sbci	r25, 0xFF	; 255
    15e2:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
    15e6:	c8 01       	movw	r24, r16
    15e8:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>

DigitalIO RC2_OUT1 = DigitalIO(41, DigitalIO::OUT, "OFF", "ON");
    15ec:	6e e4       	ldi	r22, 0x4E	; 78
    15ee:	72 e0       	ldi	r23, 0x02	; 2
    15f0:	ce 01       	movw	r24, r28
    15f2:	8f 59       	subi	r24, 0x9F	; 159
    15f4:	9f 4f       	sbci	r25, 0xFF	; 255
    15f6:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    15fa:	61 e5       	ldi	r22, 0x51	; 81
    15fc:	72 e0       	ldi	r23, 0x02	; 2
    15fe:	ce 01       	movw	r24, r28
    1600:	89 59       	subi	r24, 0x99	; 153
    1602:	9f 4f       	sbci	r25, 0xFF	; 255
    1604:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    1608:	04 5f       	subi	r16, 0xF4	; 244
    160a:	1f 4f       	sbci	r17, 0xFF	; 255
    160c:	9e 01       	movw	r18, r28
    160e:	29 59       	subi	r18, 0x99	; 153
    1610:	3f 4f       	sbci	r19, 0xFF	; 255
    1612:	41 e0       	ldi	r20, 0x01	; 1
    1614:	69 e2       	ldi	r22, 0x29	; 41
    1616:	70 e0       	ldi	r23, 0x00	; 0
    1618:	80 ef       	ldi	r24, 0xF0	; 240
    161a:	97 e0       	ldi	r25, 0x07	; 7
    161c:	23 db       	rcall	.-2490   	; 0xc64 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
    161e:	ce 01       	movw	r24, r28
    1620:	89 59       	subi	r24, 0x99	; 153
    1622:	9f 4f       	sbci	r25, 0xFF	; 255
    1624:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
    1628:	c8 01       	movw	r24, r16
    162a:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
DigitalIO RC2_OUT2 = DigitalIO(40 , DigitalIO::OUT, "OFF", "ON");
    162e:	6e e4       	ldi	r22, 0x4E	; 78
    1630:	72 e0       	ldi	r23, 0x02	; 2
    1632:	ce 01       	movw	r24, r28
    1634:	83 59       	subi	r24, 0x93	; 147
    1636:	9f 4f       	sbci	r25, 0xFF	; 255
    1638:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    163c:	61 e5       	ldi	r22, 0x51	; 81
    163e:	72 e0       	ldi	r23, 0x02	; 2
    1640:	ce 01       	movw	r24, r28
    1642:	8d 58       	subi	r24, 0x8D	; 141
    1644:	9f 4f       	sbci	r25, 0xFF	; 255
    1646:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    164a:	04 5f       	subi	r16, 0xF4	; 244
    164c:	1f 4f       	sbci	r17, 0xFF	; 255
    164e:	9e 01       	movw	r18, r28
    1650:	2d 58       	subi	r18, 0x8D	; 141
    1652:	3f 4f       	sbci	r19, 0xFF	; 255
    1654:	41 e0       	ldi	r20, 0x01	; 1
    1656:	68 e2       	ldi	r22, 0x28	; 40
    1658:	70 e0       	ldi	r23, 0x00	; 0
    165a:	8f ed       	ldi	r24, 0xDF	; 223
    165c:	97 e0       	ldi	r25, 0x07	; 7
    165e:	02 db       	rcall	.-2556   	; 0xc64 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
    1660:	ce 01       	movw	r24, r28
    1662:	8d 58       	subi	r24, 0x8D	; 141
    1664:	9f 4f       	sbci	r25, 0xFF	; 255
    1666:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
    166a:	c8 01       	movw	r24, r16
    166c:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
DigitalIO RC2_OUT3 = DigitalIO(39 , DigitalIO::OUT, "OFF", "ON");
    1670:	6e e4       	ldi	r22, 0x4E	; 78
    1672:	72 e0       	ldi	r23, 0x02	; 2
    1674:	ce 01       	movw	r24, r28
    1676:	87 58       	subi	r24, 0x87	; 135
    1678:	9f 4f       	sbci	r25, 0xFF	; 255
    167a:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    167e:	61 e5       	ldi	r22, 0x51	; 81
    1680:	72 e0       	ldi	r23, 0x02	; 2
    1682:	ce 01       	movw	r24, r28
    1684:	81 58       	subi	r24, 0x81	; 129
    1686:	9f 4f       	sbci	r25, 0xFF	; 255
    1688:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    168c:	04 5f       	subi	r16, 0xF4	; 244
    168e:	1f 4f       	sbci	r17, 0xFF	; 255
    1690:	9e 01       	movw	r18, r28
    1692:	21 58       	subi	r18, 0x81	; 129
    1694:	3f 4f       	sbci	r19, 0xFF	; 255
    1696:	41 e0       	ldi	r20, 0x01	; 1
    1698:	67 e2       	ldi	r22, 0x27	; 39
    169a:	70 e0       	ldi	r23, 0x00	; 0
    169c:	8e ec       	ldi	r24, 0xCE	; 206
    169e:	97 e0       	ldi	r25, 0x07	; 7
    16a0:	e1 da       	rcall	.-2622   	; 0xc64 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
    16a2:	ce 01       	movw	r24, r28
    16a4:	81 58       	subi	r24, 0x81	; 129
    16a6:	9f 4f       	sbci	r25, 0xFF	; 255
    16a8:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
    16ac:	c8 01       	movw	r24, r16
    16ae:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
DigitalIO RC2_OUT4 = DigitalIO(38 , DigitalIO::OUT, "OFF", "ON");
    16b2:	6e e4       	ldi	r22, 0x4E	; 78
    16b4:	72 e0       	ldi	r23, 0x02	; 2
    16b6:	ce 01       	movw	r24, r28
    16b8:	8b 57       	subi	r24, 0x7B	; 123
    16ba:	9f 4f       	sbci	r25, 0xFF	; 255
    16bc:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    16c0:	61 e5       	ldi	r22, 0x51	; 81
    16c2:	72 e0       	ldi	r23, 0x02	; 2
    16c4:	ce 01       	movw	r24, r28
    16c6:	85 57       	subi	r24, 0x75	; 117
    16c8:	9f 4f       	sbci	r25, 0xFF	; 255
    16ca:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    16ce:	04 5f       	subi	r16, 0xF4	; 244
    16d0:	1f 4f       	sbci	r17, 0xFF	; 255
    16d2:	9e 01       	movw	r18, r28
    16d4:	25 57       	subi	r18, 0x75	; 117
    16d6:	3f 4f       	sbci	r19, 0xFF	; 255
    16d8:	41 e0       	ldi	r20, 0x01	; 1
    16da:	66 e2       	ldi	r22, 0x26	; 38
    16dc:	70 e0       	ldi	r23, 0x00	; 0
    16de:	8d eb       	ldi	r24, 0xBD	; 189
    16e0:	97 e0       	ldi	r25, 0x07	; 7
    16e2:	c0 da       	rcall	.-2688   	; 0xc64 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
    16e4:	ce 01       	movw	r24, r28
    16e6:	85 57       	subi	r24, 0x75	; 117
    16e8:	9f 4f       	sbci	r25, 0xFF	; 255
    16ea:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
    16ee:	c8 01       	movw	r24, r16
    16f0:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
DigitalIO RC2_OUT5 = DigitalIO(37 , DigitalIO::OUT, "OFF", "ON");
    16f4:	6e e4       	ldi	r22, 0x4E	; 78
    16f6:	72 e0       	ldi	r23, 0x02	; 2
    16f8:	ce 01       	movw	r24, r28
    16fa:	8f 56       	subi	r24, 0x6F	; 111
    16fc:	9f 4f       	sbci	r25, 0xFF	; 255
    16fe:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    1702:	61 e5       	ldi	r22, 0x51	; 81
    1704:	72 e0       	ldi	r23, 0x02	; 2
    1706:	ce 01       	movw	r24, r28
    1708:	89 56       	subi	r24, 0x69	; 105
    170a:	9f 4f       	sbci	r25, 0xFF	; 255
    170c:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    1710:	04 5f       	subi	r16, 0xF4	; 244
    1712:	1f 4f       	sbci	r17, 0xFF	; 255
    1714:	9e 01       	movw	r18, r28
    1716:	29 56       	subi	r18, 0x69	; 105
    1718:	3f 4f       	sbci	r19, 0xFF	; 255
    171a:	41 e0       	ldi	r20, 0x01	; 1
    171c:	65 e2       	ldi	r22, 0x25	; 37
    171e:	70 e0       	ldi	r23, 0x00	; 0
    1720:	8c ea       	ldi	r24, 0xAC	; 172
    1722:	97 e0       	ldi	r25, 0x07	; 7
    1724:	9f da       	rcall	.-2754   	; 0xc64 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
    1726:	ce 01       	movw	r24, r28
    1728:	89 56       	subi	r24, 0x69	; 105
    172a:	9f 4f       	sbci	r25, 0xFF	; 255
    172c:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
    1730:	c8 01       	movw	r24, r16
    1732:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
DigitalIO RC2_OUT6 = DigitalIO(36 , DigitalIO::OUT, "OFF", "ON");
    1736:	6e e4       	ldi	r22, 0x4E	; 78
    1738:	72 e0       	ldi	r23, 0x02	; 2
    173a:	ce 01       	movw	r24, r28
    173c:	83 56       	subi	r24, 0x63	; 99
    173e:	9f 4f       	sbci	r25, 0xFF	; 255
    1740:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    1744:	61 e5       	ldi	r22, 0x51	; 81
    1746:	72 e0       	ldi	r23, 0x02	; 2
    1748:	ce 01       	movw	r24, r28
    174a:	8d 55       	subi	r24, 0x5D	; 93
    174c:	9f 4f       	sbci	r25, 0xFF	; 255
    174e:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    1752:	04 5f       	subi	r16, 0xF4	; 244
    1754:	1f 4f       	sbci	r17, 0xFF	; 255
    1756:	9e 01       	movw	r18, r28
    1758:	2d 55       	subi	r18, 0x5D	; 93
    175a:	3f 4f       	sbci	r19, 0xFF	; 255
    175c:	41 e0       	ldi	r20, 0x01	; 1
    175e:	64 e2       	ldi	r22, 0x24	; 36
    1760:	70 e0       	ldi	r23, 0x00	; 0
    1762:	8b e9       	ldi	r24, 0x9B	; 155
    1764:	97 e0       	ldi	r25, 0x07	; 7
    1766:	7e da       	rcall	.-2820   	; 0xc64 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
    1768:	ce 01       	movw	r24, r28
    176a:	8d 55       	subi	r24, 0x5D	; 93
    176c:	9f 4f       	sbci	r25, 0xFF	; 255
    176e:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
    1772:	c8 01       	movw	r24, r16
    1774:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
DigitalIO RC2_OUT7 = DigitalIO(35 , DigitalIO::OUT, "OFF", "ON");
    1778:	6e e4       	ldi	r22, 0x4E	; 78
    177a:	72 e0       	ldi	r23, 0x02	; 2
    177c:	ce 01       	movw	r24, r28
    177e:	87 55       	subi	r24, 0x57	; 87
    1780:	9f 4f       	sbci	r25, 0xFF	; 255
    1782:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    1786:	61 e5       	ldi	r22, 0x51	; 81
    1788:	72 e0       	ldi	r23, 0x02	; 2
    178a:	ce 01       	movw	r24, r28
    178c:	81 55       	subi	r24, 0x51	; 81
    178e:	9f 4f       	sbci	r25, 0xFF	; 255
    1790:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    1794:	04 5f       	subi	r16, 0xF4	; 244
    1796:	1f 4f       	sbci	r17, 0xFF	; 255
    1798:	9e 01       	movw	r18, r28
    179a:	21 55       	subi	r18, 0x51	; 81
    179c:	3f 4f       	sbci	r19, 0xFF	; 255
    179e:	41 e0       	ldi	r20, 0x01	; 1
    17a0:	63 e2       	ldi	r22, 0x23	; 35
    17a2:	70 e0       	ldi	r23, 0x00	; 0
    17a4:	8a e8       	ldi	r24, 0x8A	; 138
    17a6:	97 e0       	ldi	r25, 0x07	; 7
    17a8:	5d da       	rcall	.-2886   	; 0xc64 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
    17aa:	ce 01       	movw	r24, r28
    17ac:	81 55       	subi	r24, 0x51	; 81
    17ae:	9f 4f       	sbci	r25, 0xFF	; 255
    17b0:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
    17b4:	c8 01       	movw	r24, r16
    17b6:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
DigitalIO RC2_OUT8 = DigitalIO(35 , DigitalIO::OUT, "OFF", "ON");
    17ba:	6e e4       	ldi	r22, 0x4E	; 78
    17bc:	72 e0       	ldi	r23, 0x02	; 2
    17be:	ce 01       	movw	r24, r28
    17c0:	8b 54       	subi	r24, 0x4B	; 75
    17c2:	9f 4f       	sbci	r25, 0xFF	; 255
    17c4:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    17c8:	61 e5       	ldi	r22, 0x51	; 81
    17ca:	72 e0       	ldi	r23, 0x02	; 2
    17cc:	ce 01       	movw	r24, r28
    17ce:	85 54       	subi	r24, 0x45	; 69
    17d0:	9f 4f       	sbci	r25, 0xFF	; 255
    17d2:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    17d6:	04 5f       	subi	r16, 0xF4	; 244
    17d8:	1f 4f       	sbci	r17, 0xFF	; 255
    17da:	9e 01       	movw	r18, r28
    17dc:	25 54       	subi	r18, 0x45	; 69
    17de:	3f 4f       	sbci	r19, 0xFF	; 255
    17e0:	41 e0       	ldi	r20, 0x01	; 1
    17e2:	63 e2       	ldi	r22, 0x23	; 35
    17e4:	70 e0       	ldi	r23, 0x00	; 0
    17e6:	89 e7       	ldi	r24, 0x79	; 121
    17e8:	97 e0       	ldi	r25, 0x07	; 7
    17ea:	3c da       	rcall	.-2952   	; 0xc64 <_ZN9DigitalIOC1EiNS_8PinModesE6StringS1_>
    17ec:	ce 01       	movw	r24, r28
    17ee:	85 54       	subi	r24, 0x45	; 69
    17f0:	9f 4f       	sbci	r25, 0xFF	; 255
    17f2:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
    17f6:	c8 01       	movw	r24, r16
    17f8:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
/**************************
*	Wheatstone Bridge
**************************/
const PROGMEM float WB_R2C_X[36] = {80.31, 84.27, 88.22, 92.16, 96.09, 100, 103.9, 107.79, 111.67, 115.54, 119.4, 123.24, 127.08, 130.9, 134.71, 138.51, 142.29, 146.07, 149.83, 153.58, 157.33, 161.05, 164.77, 168.48, 172.17, 175.86, 179.53, 183.19, 186.84, 190.47, 194.1, 197.71, 201.31, 204.9, 208.48, 212.05};
const PROGMEM float WB_R2C_Z[36] = {-50, -40, -30, -20, -10, 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300};
const PROGMEM LUT1D RTDLUT = LUT1D(36, WB_R2C_X, WB_R2C_Z);
    17fc:	2a eb       	ldi	r18, 0xBA	; 186
    17fe:	32 e0       	ldi	r19, 0x02	; 2
    1800:	4a e4       	ldi	r20, 0x4A	; 74
    1802:	53 e0       	ldi	r21, 0x03	; 3
    1804:	64 e2       	ldi	r22, 0x24	; 36
    1806:	70 e0       	ldi	r23, 0x00	; 0
    1808:	8a ed       	ldi	r24, 0xDA	; 218
    180a:	93 e0       	ldi	r25, 0x03	; 3
    180c:	0e 94 6d 19 	call	0x32da	; 0x32da <_ZN5LUT1DC1EiPKfS1_>

/**************************
*	Main Screen
**************************/
LiquidCrystal_I2C MAIN_LCD( MAIN_LCD_I2C_ADDR, En_pin, Rw_pin, Rs_pin, D4_pin, D5_pin, D6_pin, D7_pin);
    1810:	0f 2e       	mov	r0, r31
    1812:	f7 e0       	ldi	r31, 0x07	; 7
    1814:	8f 2e       	mov	r8, r31
    1816:	f0 2d       	mov	r31, r0
    1818:	0f 2e       	mov	r0, r31
    181a:	f6 e0       	ldi	r31, 0x06	; 6
    181c:	af 2e       	mov	r10, r31
    181e:	f0 2d       	mov	r31, r0
    1820:	0f 2e       	mov	r0, r31
    1822:	f5 e0       	ldi	r31, 0x05	; 5
    1824:	cf 2e       	mov	r12, r31
    1826:	f0 2d       	mov	r31, r0
    1828:	68 94       	set
    182a:	ee 24       	eor	r14, r14
    182c:	e2 f8       	bld	r14, 2
    182e:	00 e0       	ldi	r16, 0x00	; 0
    1830:	21 e0       	ldi	r18, 0x01	; 1
    1832:	42 e0       	ldi	r20, 0x02	; 2
    1834:	67 e2       	ldi	r22, 0x27	; 39
    1836:	88 e4       	ldi	r24, 0x48	; 72
    1838:	97 e0       	ldi	r25, 0x07	; 7
    183a:	0e 94 36 1c 	call	0x386c	; 0x386c <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh>
ClickEncoderWithEvents MAIN_ENC( MAIN_ENC_A, MAIN_ENC_B, MAIN_ENC_SW, MAIN_ENC_DEG_PER_NOTCH );
    183e:	04 e0       	ldi	r16, 0x04	; 4
    1840:	28 e1       	ldi	r18, 0x18	; 24
    1842:	46 e1       	ldi	r20, 0x16	; 22
    1844:	67 e1       	ldi	r22, 0x17	; 23
    1846:	8c e1       	ldi	r24, 0x1C	; 28
    1848:	97 e0       	ldi	r25, 0x07	; 7
    184a:	93 dd       	rcall	.-1242   	; 0x1372 <_ZN22ClickEncoderWithEventsC1Ehhhh>

/**************************
*	Hot Liquor Tank
**************************/
LiquidCrystal_I2C HLT_LCD( HLT_LCD_I2C_ADDR, En_pin, Rw_pin, Rs_pin, D4_pin, D5_pin, D6_pin, D7_pin);
    184c:	00 e0       	ldi	r16, 0x00	; 0
    184e:	21 e0       	ldi	r18, 0x01	; 1
    1850:	42 e0       	ldi	r20, 0x02	; 2
    1852:	66 e2       	ldi	r22, 0x26	; 38
    1854:	84 e0       	ldi	r24, 0x04	; 4
    1856:	97 e0       	ldi	r25, 0x07	; 7
    1858:	0e 94 36 1c 	call	0x386c	; 0x386c <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh>
ClickEncoderWithEvents HLT_ENC( HLT_ENC_A, HLT_ENC_B, HLT_ENC_SW, HLT_ENC_DEG_PER_NOTCH );
    185c:	04 e0       	ldi	r16, 0x04	; 4
    185e:	2b e1       	ldi	r18, 0x1B	; 27
    1860:	49 e1       	ldi	r20, 0x19	; 25
    1862:	6a e1       	ldi	r22, 0x1A	; 26
    1864:	88 ed       	ldi	r24, 0xD8	; 216
    1866:	96 e0       	ldi	r25, 0x06	; 6
    1868:	84 dd       	rcall	.-1272   	; 0x1372 <_ZN22ClickEncoderWithEventsC1Ehhhh>
DigitalIO * HLT_SOL1 = &RC1_OUT1;
DigitalIO * HLT_SOL2 = &RC1_OUT2;
WheatstoneBridge HLT_RTD_BP(HLT_RTD_Vs_AN, HLT_RTD_BP_AN, RTDLUT, WB_R2, WB_R3, WB_R4, WB_OpAmpGn, WB_Rs);
    186a:	68 94       	set
    186c:	22 24       	eor	r2, r2
    186e:	26 f8       	bld	r2, 6
    1870:	2f 92       	push	r2
    1872:	0f 2e       	mov	r0, r31
    1874:	f0 ea       	ldi	r31, 0xA0	; 160
    1876:	3f 2e       	mov	r3, r31
    1878:	f0 2d       	mov	r31, r0
    187a:	3f 92       	push	r3
    187c:	1f 92       	push	r1
    187e:	1f 92       	push	r1
    1880:	0f 2e       	mov	r0, r31
    1882:	f2 e4       	ldi	r31, 0x42	; 66
    1884:	9f 2e       	mov	r9, r31
    1886:	f0 2d       	mov	r31, r0
    1888:	9f 92       	push	r9
    188a:	0f 2e       	mov	r0, r31
    188c:	fc e4       	ldi	r31, 0x4C	; 76
    188e:	4f 2e       	mov	r4, r31
    1890:	f0 2d       	mov	r31, r0
    1892:	4f 92       	push	r4
    1894:	1f 92       	push	r1
    1896:	1f 92       	push	r1
    1898:	9f 92       	push	r9
    189a:	0f 2e       	mov	r0, r31
    189c:	f8 ec       	ldi	r31, 0xC8	; 200
    189e:	5f 2e       	mov	r5, r31
    18a0:	f0 2d       	mov	r31, r0
    18a2:	5f 92       	push	r5
    18a4:	1f 92       	push	r1
    18a6:	1f 92       	push	r1
    18a8:	0f 2e       	mov	r0, r31
    18aa:	f4 e4       	ldi	r31, 0x44	; 68
    18ac:	6f 2e       	mov	r6, r31
    18ae:	f0 2d       	mov	r31, r0
    18b0:	6f 92       	push	r6
    18b2:	0f 2e       	mov	r0, r31
    18b4:	fa ef       	ldi	r31, 0xFA	; 250
    18b6:	7f 2e       	mov	r7, r31
    18b8:	f0 2d       	mov	r31, r0
    18ba:	7f 92       	push	r7
    18bc:	1f 92       	push	r1
    18be:	1f 92       	push	r1
    18c0:	0f 2e       	mov	r0, r31
    18c2:	a1 2c       	mov	r10, r1
    18c4:	b1 2c       	mov	r11, r1
    18c6:	fa ef       	ldi	r31, 0xFA	; 250
    18c8:	cf 2e       	mov	r12, r31
    18ca:	f4 e4       	ldi	r31, 0x44	; 68
    18cc:	df 2e       	mov	r13, r31
    18ce:	f0 2d       	mov	r31, r0
    18d0:	e0 90 da 03 	lds	r14, 0x03DA
    18d4:	f0 90 db 03 	lds	r15, 0x03DB
    18d8:	00 91 dc 03 	lds	r16, 0x03DC
    18dc:	10 91 dd 03 	lds	r17, 0x03DD
    18e0:	20 91 de 03 	lds	r18, 0x03DE
    18e4:	30 91 df 03 	lds	r19, 0x03DF
    18e8:	47 e3       	ldi	r20, 0x37	; 55
    18ea:	50 e0       	ldi	r21, 0x00	; 0
    18ec:	66 e3       	ldi	r22, 0x36	; 54
    18ee:	70 e0       	ldi	r23, 0x00	; 0
    18f0:	86 ea       	ldi	r24, 0xA6	; 166
    18f2:	96 e0       	ldi	r25, 0x06	; 6
    18f4:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN16WheatstoneBridgeC1Eii5LUT1Dfffff>
WheatstoneBridge HLT_RTD_OP(HLT_RTD_Vs_AN, HLT_RTD_OP_AN, RTDLUT, WB_R2, WB_R3, WB_R4, WB_OpAmpGn, WB_Rs);
    18f8:	2f 92       	push	r2
    18fa:	3f 92       	push	r3
    18fc:	1f 92       	push	r1
    18fe:	1f 92       	push	r1
    1900:	9f 92       	push	r9
    1902:	4f 92       	push	r4
    1904:	1f 92       	push	r1
    1906:	1f 92       	push	r1
    1908:	9f 92       	push	r9
    190a:	5f 92       	push	r5
    190c:	1f 92       	push	r1
    190e:	1f 92       	push	r1
    1910:	6f 92       	push	r6
    1912:	7f 92       	push	r7
    1914:	1f 92       	push	r1
    1916:	1f 92       	push	r1
    1918:	e0 90 da 03 	lds	r14, 0x03DA
    191c:	f0 90 db 03 	lds	r15, 0x03DB
    1920:	00 91 dc 03 	lds	r16, 0x03DC
    1924:	10 91 dd 03 	lds	r17, 0x03DD
    1928:	20 91 de 03 	lds	r18, 0x03DE
    192c:	30 91 df 03 	lds	r19, 0x03DF
    1930:	48 e3       	ldi	r20, 0x38	; 56
    1932:	50 e0       	ldi	r21, 0x00	; 0
    1934:	66 e3       	ldi	r22, 0x36	; 54
    1936:	70 e0       	ldi	r23, 0x00	; 0
    1938:	84 e7       	ldi	r24, 0x74	; 116
    193a:	96 e0       	ldi	r25, 0x06	; 6
    193c:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN16WheatstoneBridgeC1Eii5LUT1Dfffff>


/**************************
*	Mash Lauter Tun
**************************/
LiquidCrystal_I2C MLT_LCD( MLT_LCD_I2C_ADDR, En_pin, Rw_pin, Rs_pin, D4_pin, D5_pin, D6_pin, D7_pin);
    1940:	0f b6       	in	r0, 0x3f	; 63
    1942:	f8 94       	cli
    1944:	de bf       	out	0x3e, r29	; 62
    1946:	0f be       	out	0x3f, r0	; 63
    1948:	cd bf       	out	0x3d, r28	; 61
    194a:	0f 2e       	mov	r0, r31
    194c:	f6 e0       	ldi	r31, 0x06	; 6
    194e:	af 2e       	mov	r10, r31
    1950:	f0 2d       	mov	r31, r0
    1952:	0f 2e       	mov	r0, r31
    1954:	f5 e0       	ldi	r31, 0x05	; 5
    1956:	cf 2e       	mov	r12, r31
    1958:	f0 2d       	mov	r31, r0
    195a:	68 94       	set
    195c:	ee 24       	eor	r14, r14
    195e:	e2 f8       	bld	r14, 2
    1960:	00 e0       	ldi	r16, 0x00	; 0
    1962:	21 e0       	ldi	r18, 0x01	; 1
    1964:	42 e0       	ldi	r20, 0x02	; 2
    1966:	65 e2       	ldi	r22, 0x25	; 37
    1968:	8c e5       	ldi	r24, 0x5C	; 92
    196a:	96 e0       	ldi	r25, 0x06	; 6
    196c:	0e 94 36 1c 	call	0x386c	; 0x386c <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh>
ClickEncoderWithEvents MLT_ENC( MLT_ENC_A, MLT_ENC_B, MLT_ENC_SW, MLT_ENC_DEG_PER_NOTCH );
    1970:	04 e0       	ldi	r16, 0x04	; 4
    1972:	2e e1       	ldi	r18, 0x1E	; 30
    1974:	4c e1       	ldi	r20, 0x1C	; 28
    1976:	6d e1       	ldi	r22, 0x1D	; 29
    1978:	80 e3       	ldi	r24, 0x30	; 48
    197a:	96 e0       	ldi	r25, 0x06	; 6
    197c:	fa dc       	rcall	.-1548   	; 0x1372 <_ZN22ClickEncoderWithEventsC1Ehhhh>
DigitalIO * MLT_SOL1 = &RC1_OUT1;
DigitalIO * MLT_SOL2 = &RC1_OUT2;
WheatstoneBridge MLT_RTD_BP(MLT_RTD_Vs_AN, MLT_RTD_BP_AN, RTDLUT, WB_R2, WB_R3, WB_R4, WB_OpAmpGn, WB_Rs);
    197e:	2f 92       	push	r2
    1980:	3f 92       	push	r3
    1982:	1f 92       	push	r1
    1984:	1f 92       	push	r1
    1986:	9f 92       	push	r9
    1988:	4f 92       	push	r4
    198a:	1f 92       	push	r1
    198c:	1f 92       	push	r1
    198e:	9f 92       	push	r9
    1990:	5f 92       	push	r5
    1992:	1f 92       	push	r1
    1994:	1f 92       	push	r1
    1996:	6f 92       	push	r6
    1998:	7f 92       	push	r7
    199a:	1f 92       	push	r1
    199c:	1f 92       	push	r1
    199e:	0f 2e       	mov	r0, r31
    19a0:	a1 2c       	mov	r10, r1
    19a2:	b1 2c       	mov	r11, r1
    19a4:	fa ef       	ldi	r31, 0xFA	; 250
    19a6:	cf 2e       	mov	r12, r31
    19a8:	f4 e4       	ldi	r31, 0x44	; 68
    19aa:	df 2e       	mov	r13, r31
    19ac:	f0 2d       	mov	r31, r0
    19ae:	e0 90 da 03 	lds	r14, 0x03DA
    19b2:	f0 90 db 03 	lds	r15, 0x03DB
    19b6:	00 91 dc 03 	lds	r16, 0x03DC
    19ba:	10 91 dd 03 	lds	r17, 0x03DD
    19be:	20 91 de 03 	lds	r18, 0x03DE
    19c2:	30 91 df 03 	lds	r19, 0x03DF
    19c6:	49 e3       	ldi	r20, 0x39	; 57
    19c8:	50 e0       	ldi	r21, 0x00	; 0
    19ca:	66 e3       	ldi	r22, 0x36	; 54
    19cc:	70 e0       	ldi	r23, 0x00	; 0
    19ce:	8e ef       	ldi	r24, 0xFE	; 254
    19d0:	95 e0       	ldi	r25, 0x05	; 5
    19d2:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN16WheatstoneBridgeC1Eii5LUT1Dfffff>
WheatstoneBridge MLT_RTD_OP(MLT_RTD_Vs_AN, MLT_RTD_OP_AN, RTDLUT, WB_R2, WB_R3, WB_R4, WB_OpAmpGn, WB_Rs);
    19d6:	2f 92       	push	r2
    19d8:	3f 92       	push	r3
    19da:	1f 92       	push	r1
    19dc:	1f 92       	push	r1
    19de:	9f 92       	push	r9
    19e0:	4f 92       	push	r4
    19e2:	1f 92       	push	r1
    19e4:	1f 92       	push	r1
    19e6:	9f 92       	push	r9
    19e8:	5f 92       	push	r5
    19ea:	1f 92       	push	r1
    19ec:	1f 92       	push	r1
    19ee:	6f 92       	push	r6
    19f0:	7f 92       	push	r7
    19f2:	1f 92       	push	r1
    19f4:	1f 92       	push	r1
    19f6:	e0 90 da 03 	lds	r14, 0x03DA
    19fa:	f0 90 db 03 	lds	r15, 0x03DB
    19fe:	00 91 dc 03 	lds	r16, 0x03DC
    1a02:	10 91 dd 03 	lds	r17, 0x03DD
    1a06:	20 91 de 03 	lds	r18, 0x03DE
    1a0a:	30 91 df 03 	lds	r19, 0x03DF
    1a0e:	4a e3       	ldi	r20, 0x3A	; 58
    1a10:	50 e0       	ldi	r21, 0x00	; 0
    1a12:	66 e3       	ldi	r22, 0x36	; 54
    1a14:	70 e0       	ldi	r23, 0x00	; 0
    1a16:	8c ec       	ldi	r24, 0xCC	; 204
    1a18:	95 e0       	ldi	r25, 0x05	; 5
    1a1a:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN16WheatstoneBridgeC1Eii5LUT1Dfffff>


/**************************
*	Boil Kettle
**************************/
LiquidCrystal_I2C BK_LCD( BK_LCD_I2C_ADDR, En_pin, Rw_pin, Rs_pin, D4_pin, D5_pin, D6_pin, D7_pin);
    1a1e:	0f b6       	in	r0, 0x3f	; 63
    1a20:	f8 94       	cli
    1a22:	de bf       	out	0x3e, r29	; 62
    1a24:	0f be       	out	0x3f, r0	; 63
    1a26:	cd bf       	out	0x3d, r28	; 61
    1a28:	0f 2e       	mov	r0, r31
    1a2a:	f6 e0       	ldi	r31, 0x06	; 6
    1a2c:	af 2e       	mov	r10, r31
    1a2e:	f0 2d       	mov	r31, r0
    1a30:	0f 2e       	mov	r0, r31
    1a32:	f5 e0       	ldi	r31, 0x05	; 5
    1a34:	cf 2e       	mov	r12, r31
    1a36:	f0 2d       	mov	r31, r0
    1a38:	68 94       	set
    1a3a:	ee 24       	eor	r14, r14
    1a3c:	e2 f8       	bld	r14, 2
    1a3e:	00 e0       	ldi	r16, 0x00	; 0
    1a40:	21 e0       	ldi	r18, 0x01	; 1
    1a42:	42 e0       	ldi	r20, 0x02	; 2
    1a44:	63 e2       	ldi	r22, 0x23	; 35
    1a46:	84 eb       	ldi	r24, 0xB4	; 180
    1a48:	95 e0       	ldi	r25, 0x05	; 5
    1a4a:	0e 94 36 1c 	call	0x386c	; 0x386c <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh>
ClickEncoderWithEvents BK_ENC( BK_ENC_A, BK_ENC_B, BK_ENC_SW, BK_ENC_DEG_PER_NOTCH );
    1a4e:	04 e0       	ldi	r16, 0x04	; 4
    1a50:	21 e2       	ldi	r18, 0x21	; 33
    1a52:	4f e1       	ldi	r20, 0x1F	; 31
    1a54:	60 e2       	ldi	r22, 0x20	; 32
    1a56:	88 e8       	ldi	r24, 0x88	; 136
    1a58:	95 e0       	ldi	r25, 0x05	; 5
    1a5a:	8b dc       	rcall	.-1770   	; 0x1372 <_ZN22ClickEncoderWithEventsC1Ehhhh>
DigitalIO * BK_SOL1 = &RC1_OUT1;
DigitalIO * BK_SOL2 = &RC1_OUT2;
WheatstoneBridge BK_RTD_BP(BK_RTD_Vs_AN, BK_RTD_BP_AN, RTDLUT, WB_R2, WB_R3, WB_R4, WB_OpAmpGn, WB_Rs);
    1a5c:	2f 92       	push	r2
    1a5e:	3f 92       	push	r3
    1a60:	1f 92       	push	r1
    1a62:	1f 92       	push	r1
    1a64:	9f 92       	push	r9
    1a66:	4f 92       	push	r4
    1a68:	1f 92       	push	r1
    1a6a:	1f 92       	push	r1
    1a6c:	9f 92       	push	r9
    1a6e:	5f 92       	push	r5
    1a70:	1f 92       	push	r1
    1a72:	1f 92       	push	r1
    1a74:	6f 92       	push	r6
    1a76:	7f 92       	push	r7
    1a78:	1f 92       	push	r1
    1a7a:	1f 92       	push	r1
    1a7c:	0f 2e       	mov	r0, r31
    1a7e:	a1 2c       	mov	r10, r1
    1a80:	b1 2c       	mov	r11, r1
    1a82:	fa ef       	ldi	r31, 0xFA	; 250
    1a84:	cf 2e       	mov	r12, r31
    1a86:	f4 e4       	ldi	r31, 0x44	; 68
    1a88:	df 2e       	mov	r13, r31
    1a8a:	f0 2d       	mov	r31, r0
    1a8c:	e0 90 da 03 	lds	r14, 0x03DA
    1a90:	f0 90 db 03 	lds	r15, 0x03DB
    1a94:	00 91 dc 03 	lds	r16, 0x03DC
    1a98:	10 91 dd 03 	lds	r17, 0x03DD
    1a9c:	20 91 de 03 	lds	r18, 0x03DE
    1aa0:	30 91 df 03 	lds	r19, 0x03DF
    1aa4:	4c e3       	ldi	r20, 0x3C	; 60
    1aa6:	50 e0       	ldi	r21, 0x00	; 0
    1aa8:	6b e3       	ldi	r22, 0x3B	; 59
    1aaa:	70 e0       	ldi	r23, 0x00	; 0
    1aac:	86 e5       	ldi	r24, 0x56	; 86
    1aae:	95 e0       	ldi	r25, 0x05	; 5
    1ab0:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN16WheatstoneBridgeC1Eii5LUT1Dfffff>
WheatstoneBridge BK_RTD_OP(BK_RTD_Vs_AN, BK_RTD_OP_AN, RTDLUT, WB_R2, WB_R3, WB_R4, WB_OpAmpGn, WB_Rs);
    1ab4:	2f 92       	push	r2
    1ab6:	3f 92       	push	r3
    1ab8:	1f 92       	push	r1
    1aba:	1f 92       	push	r1
    1abc:	9f 92       	push	r9
    1abe:	4f 92       	push	r4
    1ac0:	1f 92       	push	r1
    1ac2:	1f 92       	push	r1
    1ac4:	9f 92       	push	r9
    1ac6:	5f 92       	push	r5
    1ac8:	1f 92       	push	r1
    1aca:	1f 92       	push	r1
    1acc:	6f 92       	push	r6
    1ace:	7f 92       	push	r7
    1ad0:	1f 92       	push	r1
    1ad2:	1f 92       	push	r1
    1ad4:	e0 90 da 03 	lds	r14, 0x03DA
    1ad8:	f0 90 db 03 	lds	r15, 0x03DB
    1adc:	00 91 dc 03 	lds	r16, 0x03DC
    1ae0:	10 91 dd 03 	lds	r17, 0x03DD
    1ae4:	20 91 de 03 	lds	r18, 0x03DE
    1ae8:	30 91 df 03 	lds	r19, 0x03DF
    1aec:	4d e3       	ldi	r20, 0x3D	; 61
    1aee:	50 e0       	ldi	r21, 0x00	; 0
    1af0:	6b e3       	ldi	r22, 0x3B	; 59
    1af2:	70 e0       	ldi	r23, 0x00	; 0
    1af4:	84 e2       	ldi	r24, 0x24	; 36
    1af6:	95 e0       	ldi	r25, 0x05	; 5
    1af8:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN16WheatstoneBridgeC1Eii5LUT1Dfffff>
    1afc:	0f b6       	in	r0, 0x3f	; 63
    1afe:	f8 94       	cli
    1b00:	de bf       	out	0x3e, r29	; 62
    1b02:	0f be       	out	0x3f, r0	; 63
    1b04:	cd bf       	out	0x3d, r28	; 61
    1b06:	c0 54       	subi	r28, 0x40	; 64
    1b08:	df 4f       	sbci	r29, 0xFF	; 255
    1b0a:	0f b6       	in	r0, 0x3f	; 63
    1b0c:	f8 94       	cli
    1b0e:	de bf       	out	0x3e, r29	; 62
    1b10:	0f be       	out	0x3f, r0	; 63
    1b12:	cd bf       	out	0x3d, r28	; 61
    1b14:	df 91       	pop	r29
    1b16:	cf 91       	pop	r28
    1b18:	1f 91       	pop	r17
    1b1a:	0f 91       	pop	r16
    1b1c:	ff 90       	pop	r15
    1b1e:	ef 90       	pop	r14
    1b20:	df 90       	pop	r13
    1b22:	cf 90       	pop	r12
    1b24:	bf 90       	pop	r11
    1b26:	af 90       	pop	r10
    1b28:	9f 90       	pop	r9
    1b2a:	8f 90       	pop	r8
    1b2c:	7f 90       	pop	r7
    1b2e:	6f 90       	pop	r6
    1b30:	5f 90       	pop	r5
    1b32:	4f 90       	pop	r4
    1b34:	3f 90       	pop	r3
    1b36:	2f 90       	pop	r2
    1b38:	08 95       	ret

00001b3a <_GLOBAL__sub_D__Z15serviceEncodersv>:

/**************************
*	Boil Kettle
**************************/
LiquidCrystal_I2C BK_LCD( BK_LCD_I2C_ADDR, En_pin, Rw_pin, Rs_pin, D4_pin, D5_pin, D6_pin, D7_pin);
ClickEncoderWithEvents BK_ENC( BK_ENC_A, BK_ENC_B, BK_ENC_SW, BK_ENC_DEG_PER_NOTCH );
    1b3a:	88 e8       	ldi	r24, 0x88	; 136
    1b3c:	95 e0       	ldi	r25, 0x05	; 5
    1b3e:	7c d4       	rcall	.+2296   	; 0x2438 <_ZN22ClickEncoderWithEventsD1Ev>

/**************************
*	Mash Lauter Tun
**************************/
LiquidCrystal_I2C MLT_LCD( MLT_LCD_I2C_ADDR, En_pin, Rw_pin, Rs_pin, D4_pin, D5_pin, D6_pin, D7_pin);
ClickEncoderWithEvents MLT_ENC( MLT_ENC_A, MLT_ENC_B, MLT_ENC_SW, MLT_ENC_DEG_PER_NOTCH );
    1b40:	80 e3       	ldi	r24, 0x30	; 48
    1b42:	96 e0       	ldi	r25, 0x06	; 6
    1b44:	79 d4       	rcall	.+2290   	; 0x2438 <_ZN22ClickEncoderWithEventsD1Ev>

/**************************
*	Hot Liquor Tank
**************************/
LiquidCrystal_I2C HLT_LCD( HLT_LCD_I2C_ADDR, En_pin, Rw_pin, Rs_pin, D4_pin, D5_pin, D6_pin, D7_pin);
ClickEncoderWithEvents HLT_ENC( HLT_ENC_A, HLT_ENC_B, HLT_ENC_SW, HLT_ENC_DEG_PER_NOTCH );
    1b46:	88 ed       	ldi	r24, 0xD8	; 216
    1b48:	96 e0       	ldi	r25, 0x06	; 6
    1b4a:	76 d4       	rcall	.+2284   	; 0x2438 <_ZN22ClickEncoderWithEventsD1Ev>

/**************************
*	Main Screen
**************************/
LiquidCrystal_I2C MAIN_LCD( MAIN_LCD_I2C_ADDR, En_pin, Rw_pin, Rs_pin, D4_pin, D5_pin, D6_pin, D7_pin);
ClickEncoderWithEvents MAIN_ENC( MAIN_ENC_A, MAIN_ENC_B, MAIN_ENC_SW, MAIN_ENC_DEG_PER_NOTCH );
    1b4c:	8c e1       	ldi	r24, 0x1C	; 28
    1b4e:	97 e0       	ldi	r25, 0x07	; 7
    1b50:	73 d4       	rcall	.+2278   	; 0x2438 <_ZN22ClickEncoderWithEventsD1Ev>
DigitalIO RC2_OUT3 = DigitalIO(39 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT4 = DigitalIO(38 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT5 = DigitalIO(37 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT6 = DigitalIO(36 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT7 = DigitalIO(35 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT8 = DigitalIO(35 , DigitalIO::OUT, "OFF", "ON");
    1b52:	89 e7       	ldi	r24, 0x79	; 121
    1b54:	97 e0       	ldi	r25, 0x07	; 7
    1b56:	44 d8       	rcall	.-3960   	; 0xbe0 <_ZN9DigitalIOD1Ev>
DigitalIO RC2_OUT2 = DigitalIO(40 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT3 = DigitalIO(39 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT4 = DigitalIO(38 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT5 = DigitalIO(37 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT6 = DigitalIO(36 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT7 = DigitalIO(35 , DigitalIO::OUT, "OFF", "ON");
    1b58:	8a e8       	ldi	r24, 0x8A	; 138
    1b5a:	97 e0       	ldi	r25, 0x07	; 7
    1b5c:	41 d8       	rcall	.-3966   	; 0xbe0 <_ZN9DigitalIOD1Ev>
DigitalIO RC2_OUT1 = DigitalIO(41, DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT2 = DigitalIO(40 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT3 = DigitalIO(39 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT4 = DigitalIO(38 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT5 = DigitalIO(37 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT6 = DigitalIO(36 , DigitalIO::OUT, "OFF", "ON");
    1b5e:	8b e9       	ldi	r24, 0x9B	; 155
    1b60:	97 e0       	ldi	r25, 0x07	; 7
    1b62:	3e d8       	rcall	.-3972   	; 0xbe0 <_ZN9DigitalIOD1Ev>

DigitalIO RC2_OUT1 = DigitalIO(41, DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT2 = DigitalIO(40 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT3 = DigitalIO(39 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT4 = DigitalIO(38 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT5 = DigitalIO(37 , DigitalIO::OUT, "OFF", "ON");
    1b64:	8c ea       	ldi	r24, 0xAC	; 172
    1b66:	97 e0       	ldi	r25, 0x07	; 7
    1b68:	3b d8       	rcall	.-3978   	; 0xbe0 <_ZN9DigitalIOD1Ev>
DigitalIO RC1_OUT8 = DigitalIO(42 , DigitalIO::OUT, "OFF", "ON");

DigitalIO RC2_OUT1 = DigitalIO(41, DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT2 = DigitalIO(40 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT3 = DigitalIO(39 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT4 = DigitalIO(38 , DigitalIO::OUT, "OFF", "ON");
    1b6a:	8d eb       	ldi	r24, 0xBD	; 189
    1b6c:	97 e0       	ldi	r25, 0x07	; 7
    1b6e:	38 d8       	rcall	.-3984   	; 0xbe0 <_ZN9DigitalIOD1Ev>
DigitalIO RC1_OUT7 = DigitalIO(43 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT8 = DigitalIO(42 , DigitalIO::OUT, "OFF", "ON");

DigitalIO RC2_OUT1 = DigitalIO(41, DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT2 = DigitalIO(40 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT3 = DigitalIO(39 , DigitalIO::OUT, "OFF", "ON");
    1b70:	8e ec       	ldi	r24, 0xCE	; 206
    1b72:	97 e0       	ldi	r25, 0x07	; 7
    1b74:	35 d8       	rcall	.-3990   	; 0xbe0 <_ZN9DigitalIOD1Ev>
DigitalIO RC1_OUT6 = DigitalIO(44 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT7 = DigitalIO(43 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT8 = DigitalIO(42 , DigitalIO::OUT, "OFF", "ON");

DigitalIO RC2_OUT1 = DigitalIO(41, DigitalIO::OUT, "OFF", "ON");
DigitalIO RC2_OUT2 = DigitalIO(40 , DigitalIO::OUT, "OFF", "ON");
    1b76:	8f ed       	ldi	r24, 0xDF	; 223
    1b78:	97 e0       	ldi	r25, 0x07	; 7
    1b7a:	32 d8       	rcall	.-3996   	; 0xbe0 <_ZN9DigitalIOD1Ev>
DigitalIO RC1_OUT5 = DigitalIO(45 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT6 = DigitalIO(44 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT7 = DigitalIO(43 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT8 = DigitalIO(42 , DigitalIO::OUT, "OFF", "ON");

DigitalIO RC2_OUT1 = DigitalIO(41, DigitalIO::OUT, "OFF", "ON");
    1b7c:	80 ef       	ldi	r24, 0xF0	; 240
    1b7e:	97 e0       	ldi	r25, 0x07	; 7
    1b80:	2f d8       	rcall	.-4002   	; 0xbe0 <_ZN9DigitalIOD1Ev>
DigitalIO RC1_OUT3 = DigitalIO(47 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT4 = DigitalIO(46 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT5 = DigitalIO(45 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT6 = DigitalIO(44 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT7 = DigitalIO(43 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT8 = DigitalIO(42 , DigitalIO::OUT, "OFF", "ON");
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	98 e0       	ldi	r25, 0x08	; 8
    1b86:	2c d8       	rcall	.-4008   	; 0xbe0 <_ZN9DigitalIOD1Ev>
DigitalIO RC1_OUT2 = DigitalIO(48 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT3 = DigitalIO(47 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT4 = DigitalIO(46 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT5 = DigitalIO(45 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT6 = DigitalIO(44 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT7 = DigitalIO(43 , DigitalIO::OUT, "OFF", "ON");
    1b88:	82 e1       	ldi	r24, 0x12	; 18
    1b8a:	98 e0       	ldi	r25, 0x08	; 8
    1b8c:	29 d8       	rcall	.-4014   	; 0xbe0 <_ZN9DigitalIOD1Ev>
DigitalIO RC1_OUT1 = DigitalIO(49, DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT2 = DigitalIO(48 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT3 = DigitalIO(47 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT4 = DigitalIO(46 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT5 = DigitalIO(45 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT6 = DigitalIO(44 , DigitalIO::OUT, "OFF", "ON");
    1b8e:	83 e2       	ldi	r24, 0x23	; 35
    1b90:	98 e0       	ldi	r25, 0x08	; 8
    1b92:	26 d8       	rcall	.-4020   	; 0xbe0 <_ZN9DigitalIOD1Ev>
**************************/
DigitalIO RC1_OUT1 = DigitalIO(49, DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT2 = DigitalIO(48 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT3 = DigitalIO(47 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT4 = DigitalIO(46 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT5 = DigitalIO(45 , DigitalIO::OUT, "OFF", "ON");
    1b94:	84 e3       	ldi	r24, 0x34	; 52
    1b96:	98 e0       	ldi	r25, 0x08	; 8
    1b98:	23 d8       	rcall	.-4026   	; 0xbe0 <_ZN9DigitalIOD1Ev>
*	Digital IO
**************************/
DigitalIO RC1_OUT1 = DigitalIO(49, DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT2 = DigitalIO(48 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT3 = DigitalIO(47 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT4 = DigitalIO(46 , DigitalIO::OUT, "OFF", "ON");
    1b9a:	85 e4       	ldi	r24, 0x45	; 69
    1b9c:	98 e0       	ldi	r25, 0x08	; 8
    1b9e:	20 d8       	rcall	.-4032   	; 0xbe0 <_ZN9DigitalIOD1Ev>
/**************************
*	Digital IO
**************************/
DigitalIO RC1_OUT1 = DigitalIO(49, DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT2 = DigitalIO(48 , DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT3 = DigitalIO(47 , DigitalIO::OUT, "OFF", "ON");
    1ba0:	86 e5       	ldi	r24, 0x56	; 86
    1ba2:	98 e0       	ldi	r25, 0x08	; 8
    1ba4:	1d d8       	rcall	.-4038   	; 0xbe0 <_ZN9DigitalIOD1Ev>

/**************************
*	Digital IO
**************************/
DigitalIO RC1_OUT1 = DigitalIO(49, DigitalIO::OUT, "OFF", "ON");
DigitalIO RC1_OUT2 = DigitalIO(48 , DigitalIO::OUT, "OFF", "ON");
    1ba6:	87 e6       	ldi	r24, 0x67	; 103
    1ba8:	98 e0       	ldi	r25, 0x08	; 8
    1baa:	1a d8       	rcall	.-4044   	; 0xbe0 <_ZN9DigitalIOD1Ev>
float freeSramPct = 0;

/**************************
*	Digital IO
**************************/
DigitalIO RC1_OUT1 = DigitalIO(49, DigitalIO::OUT, "OFF", "ON");
    1bac:	88 e7       	ldi	r24, 0x78	; 120
    1bae:	98 e0       	ldi	r25, 0x08	; 8
    1bb0:	17 c8       	rjmp	.-4050   	; 0xbe0 <_ZN9DigitalIOD1Ev>
    1bb2:	08 95       	ret

00001bb4 <_Z13hardware_initv>:
}

void hardware_init(){
	
	//--Setup the LCDs-------
	Serial.println("  HWInit");
    1bb4:	65 e5       	ldi	r22, 0x55	; 85
    1bb6:	72 e0       	ldi	r23, 0x02	; 2
    1bb8:	85 e6       	ldi	r24, 0x65	; 101
    1bba:	9a e0       	ldi	r25, 0x0A	; 10
    1bbc:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <_ZN5Print7printlnEPKc>
	Serial.flush();
    1bc0:	85 e6       	ldi	r24, 0x65	; 101
    1bc2:	9a e0       	ldi	r25, 0x0A	; 10
    1bc4:	0e 94 10 22 	call	0x4420	; 0x4420 <_ZN14HardwareSerial5flushEv>
	
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.print("Initializing LCDs...");
    1bc8:	6e e5       	ldi	r22, 0x5E	; 94
    1bca:	72 e0       	ldi	r23, 0x02	; 2
    1bcc:	85 e6       	ldi	r24, 0x65	; 101
    1bce:	9a e0       	ldi	r25, 0x0A	; 10
    1bd0:	0e 94 ec 25 	call	0x4bd8	; 0x4bd8 <_ZN5Print5printEPKc>
		Serial.flush();
    1bd4:	85 e6       	ldi	r24, 0x65	; 101
    1bd6:	9a e0       	ldi	r25, 0x0A	; 10
    1bd8:	0e 94 10 22 	call	0x4420	; 0x4420 <_ZN14HardwareSerial5flushEv>
	#endif
	
	Serial.print("Initializing LCDs...");
    1bdc:	6e e5       	ldi	r22, 0x5E	; 94
    1bde:	72 e0       	ldi	r23, 0x02	; 2
    1be0:	85 e6       	ldi	r24, 0x65	; 101
    1be2:	9a e0       	ldi	r25, 0x0A	; 10
    1be4:	0e 94 ec 25 	call	0x4bd8	; 0x4bd8 <_ZN5Print5printEPKc>
	Serial.flush();
    1be8:	85 e6       	ldi	r24, 0x65	; 101
    1bea:	9a e0       	ldi	r25, 0x0A	; 10
    1bec:	0e 94 10 22 	call	0x4420	; 0x4420 <_ZN14HardwareSerial5flushEv>
	
	MAIN_LCD.setBacklightPin(LCD_BACKLIGHT_PIN,POSITIVE);
    1bf0:	40 e0       	ldi	r20, 0x00	; 0
    1bf2:	63 e0       	ldi	r22, 0x03	; 3
    1bf4:	88 e4       	ldi	r24, 0x48	; 72
    1bf6:	97 e0       	ldi	r25, 0x07	; 7
    1bf8:	0e 94 0c 1c 	call	0x3818	; 0x3818 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>
	MAIN_LCD.setBacklight(HIGH);
    1bfc:	61 e0       	ldi	r22, 0x01	; 1
    1bfe:	88 e4       	ldi	r24, 0x48	; 72
    1c00:	97 e0       	ldi	r25, 0x07	; 7
    1c02:	0e 94 20 1c 	call	0x3840	; 0x3840 <_ZN17LiquidCrystal_I2C12setBacklightEh>
	MAIN_LCD.begin (20,4);
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	44 e0       	ldi	r20, 0x04	; 4
    1c0a:	64 e1       	ldi	r22, 0x14	; 20
    1c0c:	88 e4       	ldi	r24, 0x48	; 72
    1c0e:	97 e0       	ldi	r25, 0x07	; 7
    1c10:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <_ZN17LiquidCrystal_I2C5beginEhhh>
	
	HLT_LCD.setBacklightPin(LCD_BACKLIGHT_PIN,POSITIVE);
    1c14:	40 e0       	ldi	r20, 0x00	; 0
    1c16:	63 e0       	ldi	r22, 0x03	; 3
    1c18:	84 e0       	ldi	r24, 0x04	; 4
    1c1a:	97 e0       	ldi	r25, 0x07	; 7
    1c1c:	0e 94 0c 1c 	call	0x3818	; 0x3818 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>
	HLT_LCD.setBacklight(HIGH);
    1c20:	61 e0       	ldi	r22, 0x01	; 1
    1c22:	84 e0       	ldi	r24, 0x04	; 4
    1c24:	97 e0       	ldi	r25, 0x07	; 7
    1c26:	0e 94 20 1c 	call	0x3840	; 0x3840 <_ZN17LiquidCrystal_I2C12setBacklightEh>
	HLT_LCD.begin (20,4);
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	44 e0       	ldi	r20, 0x04	; 4
    1c2e:	64 e1       	ldi	r22, 0x14	; 20
    1c30:	84 e0       	ldi	r24, 0x04	; 4
    1c32:	97 e0       	ldi	r25, 0x07	; 7
    1c34:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <_ZN17LiquidCrystal_I2C5beginEhhh>
	
	MLT_LCD.setBacklightPin(LCD_BACKLIGHT_PIN,POSITIVE);
    1c38:	40 e0       	ldi	r20, 0x00	; 0
    1c3a:	63 e0       	ldi	r22, 0x03	; 3
    1c3c:	8c e5       	ldi	r24, 0x5C	; 92
    1c3e:	96 e0       	ldi	r25, 0x06	; 6
    1c40:	0e 94 0c 1c 	call	0x3818	; 0x3818 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>
	MLT_LCD.setBacklight(HIGH);
    1c44:	61 e0       	ldi	r22, 0x01	; 1
    1c46:	8c e5       	ldi	r24, 0x5C	; 92
    1c48:	96 e0       	ldi	r25, 0x06	; 6
    1c4a:	0e 94 20 1c 	call	0x3840	; 0x3840 <_ZN17LiquidCrystal_I2C12setBacklightEh>
	MLT_LCD.begin (20,4);
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	44 e0       	ldi	r20, 0x04	; 4
    1c52:	64 e1       	ldi	r22, 0x14	; 20
    1c54:	8c e5       	ldi	r24, 0x5C	; 92
    1c56:	96 e0       	ldi	r25, 0x06	; 6
    1c58:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <_ZN17LiquidCrystal_I2C5beginEhhh>
	
	BK_LCD.setBacklightPin(LCD_BACKLIGHT_PIN,POSITIVE);
    1c5c:	40 e0       	ldi	r20, 0x00	; 0
    1c5e:	63 e0       	ldi	r22, 0x03	; 3
    1c60:	84 eb       	ldi	r24, 0xB4	; 180
    1c62:	95 e0       	ldi	r25, 0x05	; 5
    1c64:	0e 94 0c 1c 	call	0x3818	; 0x3818 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>
	BK_LCD.setBacklight(HIGH);
    1c68:	61 e0       	ldi	r22, 0x01	; 1
    1c6a:	84 eb       	ldi	r24, 0xB4	; 180
    1c6c:	95 e0       	ldi	r25, 0x05	; 5
    1c6e:	0e 94 20 1c 	call	0x3840	; 0x3840 <_ZN17LiquidCrystal_I2C12setBacklightEh>
	BK_LCD.begin (20,4);
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	44 e0       	ldi	r20, 0x04	; 4
    1c76:	64 e1       	ldi	r22, 0x14	; 20
    1c78:	84 eb       	ldi	r24, 0xB4	; 180
    1c7a:	95 e0       	ldi	r25, 0x05	; 5
    1c7c:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <_ZN17LiquidCrystal_I2C5beginEhhh>
		
	//--Initialize the Encoders-------
	
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.println("Done.");
    1c80:	63 e7       	ldi	r22, 0x73	; 115
    1c82:	72 e0       	ldi	r23, 0x02	; 2
    1c84:	85 e6       	ldi	r24, 0x65	; 101
    1c86:	9a e0       	ldi	r25, 0x0A	; 10
    1c88:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <_ZN5Print7printlnEPKc>
		Serial.print("Initializing Encoders...");
    1c8c:	69 e7       	ldi	r22, 0x79	; 121
    1c8e:	72 e0       	ldi	r23, 0x02	; 2
    1c90:	85 e6       	ldi	r24, 0x65	; 101
    1c92:	9a e0       	ldi	r25, 0x0A	; 10
    1c94:	0e 94 ec 25 	call	0x4bd8	; 0x4bd8 <_ZN5Print5printEPKc>
		Serial.flush();
    1c98:	85 e6       	ldi	r24, 0x65	; 101
    1c9a:	9a e0       	ldi	r25, 0x0A	; 10
    1c9c:	0e 94 10 22 	call	0x4420	; 0x4420 <_ZN14HardwareSerial5flushEv>
  public:
    //****************************
    //  Configuration
    //****************************
    void initialize(unsigned long microseconds=1000000) __attribute__((always_inline)) {
	TCCR1B = _BV(WGM13);        // set mode as phase and frequency correct pwm, stop the timer
    1ca0:	e1 e8       	ldi	r30, 0x81	; 129
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 e1       	ldi	r24, 0x10	; 16
    1ca6:	80 83       	st	Z, r24
	TCCR1A = 0;                 // clear control register A 
    1ca8:	10 92 80 00 	sts	0x0080, r1
	setPeriod(microseconds);
    }
    void setPeriod(unsigned long microseconds) __attribute__((always_inline)) {
	const unsigned long cycles = (F_CPU / 2000000) * microseconds;
	if (cycles < TIMER1_RESOLUTION) {
		clockSelectBits = _BV(CS10);
    1cac:	91 e0       	ldi	r25, 0x01	; 1
    1cae:	90 93 90 09 	sts	0x0990, r25
		pwmPeriod = cycles;
    1cb2:	20 e4       	ldi	r18, 0x40	; 64
    1cb4:	3f e1       	ldi	r19, 0x1F	; 31
    1cb6:	30 93 92 09 	sts	0x0992, r19
    1cba:	20 93 91 09 	sts	0x0991, r18
		pwmPeriod = cycles / 1024;
	} else {
		clockSelectBits = _BV(CS12) | _BV(CS10);
		pwmPeriod = TIMER1_RESOLUTION - 1;
	}
	ICR1 = pwmPeriod;
    1cbe:	30 93 87 00 	sts	0x0087, r19
    1cc2:	20 93 86 00 	sts	0x0086, r18
	TCCR1B = _BV(WGM13) | clockSelectBits;
    1cc6:	80 91 90 09 	lds	r24, 0x0990
    1cca:	80 61       	ori	r24, 0x10	; 16
    1ccc:	80 83       	st	Z, r24

    //****************************
    //  Interrupt Function
    //****************************
    void attachInterrupt(void (*isr)()) __attribute__((always_inline)) {
	isrCallback = isr;
    1cce:	28 ea       	ldi	r18, 0xA8	; 168
    1cd0:	39 e0       	ldi	r19, 0x09	; 9
    1cd2:	30 93 8f 09 	sts	0x098F, r19
    1cd6:	20 93 8e 09 	sts	0x098E, r18
	TIMSK1 = _BV(TOIE1);
    1cda:	90 93 6f 00 	sts	0x006F, r25
	//Attach the Timer
	Timer1.initialize(1000);
	Timer1.attachInterrupt(serviceEncoders);
		
	//--Attach Hardware-------
	UI_HLT->attatchEncoder(&HLT_ENC);
    1cde:	68 ed       	ldi	r22, 0xD8	; 216
    1ce0:	76 e0       	ldi	r23, 0x06	; 6
    1ce2:	80 91 2b 09 	lds	r24, 0x092B
    1ce6:	90 91 2c 09 	lds	r25, 0x092C
    1cea:	0e 94 13 17 	call	0x2e26	; 0x2e26 <_ZN4EZUI14attatchEncoderEP22ClickEncoderWithEvents>
	UI_HLT->attatchLCD(&HLT_LCD);
    1cee:	64 e0       	ldi	r22, 0x04	; 4
    1cf0:	77 e0       	ldi	r23, 0x07	; 7
    1cf2:	80 91 2b 09 	lds	r24, 0x092B
    1cf6:	90 91 2c 09 	lds	r25, 0x092C
    1cfa:	0e 94 49 17 	call	0x2e92	; 0x2e92 <_ZN4EZUI10attatchLCDEP17LiquidCrystal_I2C>
		
	UI_MLT->attatchEncoder(&MLT_ENC);
    1cfe:	60 e3       	ldi	r22, 0x30	; 48
    1d00:	76 e0       	ldi	r23, 0x06	; 6
    1d02:	80 91 85 09 	lds	r24, 0x0985
    1d06:	90 91 86 09 	lds	r25, 0x0986
    1d0a:	0e 94 13 17 	call	0x2e26	; 0x2e26 <_ZN4EZUI14attatchEncoderEP22ClickEncoderWithEvents>
	UI_MLT->attatchLCD(&MLT_LCD);
    1d0e:	6c e5       	ldi	r22, 0x5C	; 92
    1d10:	76 e0       	ldi	r23, 0x06	; 6
    1d12:	80 91 85 09 	lds	r24, 0x0985
    1d16:	90 91 86 09 	lds	r25, 0x0986
    1d1a:	0e 94 49 17 	call	0x2e92	; 0x2e92 <_ZN4EZUI10attatchLCDEP17LiquidCrystal_I2C>
		
	UI_BK->attatchEncoder(&BK_ENC);
    1d1e:	68 e8       	ldi	r22, 0x88	; 136
    1d20:	75 e0       	ldi	r23, 0x05	; 5
    1d22:	80 91 b1 08 	lds	r24, 0x08B1
    1d26:	90 91 b2 08 	lds	r25, 0x08B2
    1d2a:	0e 94 13 17 	call	0x2e26	; 0x2e26 <_ZN4EZUI14attatchEncoderEP22ClickEncoderWithEvents>
	UI_BK->attatchLCD(&BK_LCD);
    1d2e:	64 eb       	ldi	r22, 0xB4	; 180
    1d30:	75 e0       	ldi	r23, 0x05	; 5
    1d32:	80 91 b1 08 	lds	r24, 0x08B1
    1d36:	90 91 b2 08 	lds	r25, 0x08B2
    1d3a:	0e 94 49 17 	call	0x2e92	; 0x2e92 <_ZN4EZUI10attatchLCDEP17LiquidCrystal_I2C>
	
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.println("Done.");
    1d3e:	63 e7       	ldi	r22, 0x73	; 115
    1d40:	72 e0       	ldi	r23, 0x02	; 2
    1d42:	85 e6       	ldi	r24, 0x65	; 101
    1d44:	9a e0       	ldi	r25, 0x0A	; 10
    1d46:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <_ZN5Print7printlnEPKc>
		Serial.println("Initializing Solenoids.");
    1d4a:	62 e9       	ldi	r22, 0x92	; 146
    1d4c:	72 e0       	ldi	r23, 0x02	; 2
    1d4e:	85 e6       	ldi	r24, 0x65	; 101
    1d50:	9a e0       	ldi	r25, 0x0A	; 10
    1d52:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <_ZN5Print7printlnEPKc>
		Serial.flush();
    1d56:	85 e6       	ldi	r24, 0x65	; 101
    1d58:	9a e0       	ldi	r25, 0x0A	; 10
    1d5a:	0e 94 10 22 	call	0x4420	; 0x4420 <_ZN14HardwareSerial5flushEv>
	#endif
	
	//Set all Solenoids to output high which is "off" mode
	RC1_OUT1.Write(1);
    1d5e:	61 e0       	ldi	r22, 0x01	; 1
    1d60:	70 e0       	ldi	r23, 0x00	; 0
    1d62:	88 e7       	ldi	r24, 0x78	; 120
    1d64:	98 e0       	ldi	r25, 0x08	; 8
    1d66:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN9DigitalIO5WriteEi>
	RC1_OUT2.Write(1);
    1d6a:	61 e0       	ldi	r22, 0x01	; 1
    1d6c:	70 e0       	ldi	r23, 0x00	; 0
    1d6e:	87 e6       	ldi	r24, 0x67	; 103
    1d70:	98 e0       	ldi	r25, 0x08	; 8
    1d72:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN9DigitalIO5WriteEi>
	
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.println("Done.");
    1d76:	63 e7       	ldi	r22, 0x73	; 115
    1d78:	72 e0       	ldi	r23, 0x02	; 2
    1d7a:	85 e6       	ldi	r24, 0x65	; 101
    1d7c:	9a e0       	ldi	r25, 0x0A	; 10
    1d7e:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <_ZN5Print7printlnEPKc>
		Serial.flush();
    1d82:	85 e6       	ldi	r24, 0x65	; 101
    1d84:	9a e0       	ldi	r25, 0x0A	; 10
    1d86:	0e 94 10 22 	call	0x4420	; 0x4420 <_ZN14HardwareSerial5flushEv>
	#endif
	
	freeSramBytes=freeMemory();
    1d8a:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <freeMemory>
    1d8e:	90 93 8e 08 	sts	0x088E, r25
    1d92:	80 93 8d 08 	sts	0x088D, r24
	freeSramPct=100.0*(8000.0-(float)freeSramBytes)/8000.0;
    1d96:	bc 01       	movw	r22, r24
    1d98:	99 0f       	add	r25, r25
    1d9a:	88 0b       	sbc	r24, r24
    1d9c:	99 0b       	sbc	r25, r25
    1d9e:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <__floatsisf>
    1da2:	9b 01       	movw	r18, r22
    1da4:	ac 01       	movw	r20, r24
    1da6:	60 e0       	ldi	r22, 0x00	; 0
    1da8:	70 e0       	ldi	r23, 0x00	; 0
    1daa:	8a ef       	ldi	r24, 0xFA	; 250
    1dac:	95 e4       	ldi	r25, 0x45	; 69
    1dae:	0e 94 26 2e 	call	0x5c4c	; 0x5c4c <__subsf3>
    1db2:	20 e0       	ldi	r18, 0x00	; 0
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	48 ec       	ldi	r20, 0xC8	; 200
    1db8:	52 e4       	ldi	r21, 0x42	; 66
    1dba:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <__mulsf3>
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	4a ef       	ldi	r20, 0xFA	; 250
    1dc4:	55 e4       	ldi	r21, 0x45	; 69
    1dc6:	0e 94 8f 2e 	call	0x5d1e	; 0x5d1e <__divsf3>
    1dca:	60 93 89 08 	sts	0x0889, r22
    1dce:	70 93 8a 08 	sts	0x088A, r23
    1dd2:	80 93 8b 08 	sts	0x088B, r24
    1dd6:	90 93 8c 08 	sts	0x088C, r25
    1dda:	08 95       	ret

00001ddc <_Z10UI_BK_initv>:
EZUI_Menu MainMenu;


void UI_BK_init(){
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.print("Initializing BK UI...");
    1ddc:	6a ea       	ldi	r22, 0xAA	; 170
    1dde:	72 e0       	ldi	r23, 0x02	; 2
    1de0:	85 e6       	ldi	r24, 0x65	; 101
    1de2:	9a e0       	ldi	r25, 0x0A	; 10
    1de4:	0e 94 ec 25 	call	0x4bd8	; 0x4bd8 <_ZN5Print5printEPKc>
	#endif
	
	/***************************************
	  Setup + Initialization
	***************************************/
	UI_BK->attatchEncoder(&BK_ENC);
    1de8:	68 e8       	ldi	r22, 0x88	; 136
    1dea:	75 e0       	ldi	r23, 0x05	; 5
    1dec:	80 91 b1 08 	lds	r24, 0x08B1
    1df0:	90 91 b2 08 	lds	r25, 0x08B2
    1df4:	0e 94 13 17 	call	0x2e26	; 0x2e26 <_ZN4EZUI14attatchEncoderEP22ClickEncoderWithEvents>
	UI_BK->attatchLCD(&BK_LCD);
    1df8:	64 eb       	ldi	r22, 0xB4	; 180
    1dfa:	75 e0       	ldi	r23, 0x05	; 5
    1dfc:	80 91 b1 08 	lds	r24, 0x08B1
    1e00:	90 91 b2 08 	lds	r25, 0x08B2
    1e04:	0e 94 49 17 	call	0x2e92	; 0x2e92 <_ZN4EZUI10attatchLCDEP17LiquidCrystal_I2C>
		
	/***************************************
	  BK Menu
	***************************************/
	UI_BK->setDisplay(&MainMenu);
    1e08:	6f e8       	ldi	r22, 0x8F	; 143
    1e0a:	78 e0       	ldi	r23, 0x08	; 8
    1e0c:	80 91 b1 08 	lds	r24, 0x08B1
    1e10:	90 91 b2 08 	lds	r25, 0x08B2
    1e14:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <_ZN4EZUI10setDisplayEP9EZUI_Menu>
	
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.println("Done.");
    1e18:	63 e7       	ldi	r22, 0x73	; 115
    1e1a:	72 e0       	ldi	r23, 0x02	; 2
    1e1c:	85 e6       	ldi	r24, 0x65	; 101
    1e1e:	9a e0       	ldi	r25, 0x0A	; 10
    1e20:	0c 94 16 26 	jmp	0x4c2c	; 0x4c2c <_ZN5Print7printlnEPKc>
    1e24:	08 95       	ret

00001e26 <_GLOBAL__sub_I_UI_BK>:
	#endif
}
    1e26:	cf 93       	push	r28
    1e28:	df 93       	push	r29
 * ----------------------------------------------------------------
 */

#include "UI_BK.h"

EZUI *UI_BK = new EZUI();
    1e2a:	80 e1       	ldi	r24, 0x10	; 16
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <_Znwj>
    1e32:	ec 01       	movw	r28, r24
    1e34:	ee d7       	rcall	.+4060   	; 0x2e12 <_ZN4EZUIC1Ev>
    1e36:	d0 93 b2 08 	sts	0x08B2, r29
    1e3a:	c0 93 b1 08 	sts	0x08B1, r28

/***************************************
 Main Menu
***************************************/
EZUI_Menu MainMenu;
    1e3e:	8f e8       	ldi	r24, 0x8F	; 143
    1e40:	98 e0       	ldi	r25, 0x08	; 8
    1e42:	99 d3       	rcall	.+1842   	; 0x2576 <_ZN9EZUI_MenuC1Ev>
	UI_BK->setDisplay(&MainMenu);
	
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.println("Done.");
	#endif
}
    1e44:	df 91       	pop	r29
    1e46:	cf 91       	pop	r28
    1e48:	08 95       	ret

00001e4a <_GLOBAL__sub_D_UI_BK>:
EZUI *UI_BK = new EZUI();

/***************************************
 Main Menu
***************************************/
EZUI_Menu MainMenu;
    1e4a:	8f e8       	ldi	r24, 0x8F	; 143
    1e4c:	98 e0       	ldi	r25, 0x08	; 8
    1e4e:	bc c3       	rjmp	.+1912   	; 0x25c8 <_ZN9EZUI_MenuD1Ev>
    1e50:	08 95       	ret

00001e52 <_Z11UI_HLT_initv>:
EZUI_Menu Menu_Diagnostics;
EZUI_Control_Link Lnk_Diagnostics("Diagnostics",&Menu_Diagnostics);

void UI_HLT_init(){
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.print("Initializing HLT UI...");
    1e52:	60 ec       	ldi	r22, 0xC0	; 192
    1e54:	72 e0       	ldi	r23, 0x02	; 2
    1e56:	85 e6       	ldi	r24, 0x65	; 101
    1e58:	9a e0       	ldi	r25, 0x0A	; 10
    1e5a:	0e 94 ec 25 	call	0x4bd8	; 0x4bd8 <_ZN5Print5printEPKc>
	#endif
	
	/***************************************
	  Setup + Initialization
	***************************************/
	UI_HLT->attatchEncoder(&HLT_ENC);
    1e5e:	68 ed       	ldi	r22, 0xD8	; 216
    1e60:	76 e0       	ldi	r23, 0x06	; 6
    1e62:	80 91 2b 09 	lds	r24, 0x092B
    1e66:	90 91 2c 09 	lds	r25, 0x092C
    1e6a:	dd d7       	rcall	.+4026   	; 0x2e26 <_ZN4EZUI14attatchEncoderEP22ClickEncoderWithEvents>
	UI_HLT->attatchLCD(&HLT_LCD);
    1e6c:	64 e0       	ldi	r22, 0x04	; 4
    1e6e:	77 e0       	ldi	r23, 0x07	; 7
    1e70:	80 91 2b 09 	lds	r24, 0x092B
    1e74:	90 91 2c 09 	lds	r25, 0x092C
    1e78:	0e 94 49 17 	call	0x2e92	; 0x2e92 <_ZN4EZUI10attatchLCDEP17LiquidCrystal_I2C>
	***************************************/
	//MainMenu->addItem(new EZUI_Control_Link("Monitor",MonitorPage));
	//MainMenu->addItem(new EZUI_Control_Link("Monitor",SettingsPage));
	//MainMenu->addItem(new EZUI_Control_Link("Diagnostics",DiagPage));

	UI_HLT->setDisplay(&HLT_MainMenu);
    1e7c:	69 e0       	ldi	r22, 0x09	; 9
    1e7e:	79 e0       	ldi	r23, 0x09	; 9
    1e80:	80 91 2b 09 	lds	r24, 0x092B
    1e84:	90 91 2c 09 	lds	r25, 0x092C
    1e88:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <_ZN4EZUI10setDisplayEP9EZUI_Menu>
	
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.println("Done.");
    1e8c:	63 e7       	ldi	r22, 0x73	; 115
    1e8e:	72 e0       	ldi	r23, 0x02	; 2
    1e90:	85 e6       	ldi	r24, 0x65	; 101
    1e92:	9a e0       	ldi	r25, 0x0A	; 10
    1e94:	0c 94 16 26 	jmp	0x4c2c	; 0x4c2c <_ZN5Print7printlnEPKc>
    1e98:	08 95       	ret

00001e9a <_GLOBAL__sub_I_UI_HLT>:
	#endif
}
    1e9a:	0f 93       	push	r16
    1e9c:	1f 93       	push	r17
    1e9e:	cf 93       	push	r28
    1ea0:	df 93       	push	r29
    1ea2:	cd b7       	in	r28, 0x3d	; 61
    1ea4:	de b7       	in	r29, 0x3e	; 62
    1ea6:	a4 97       	sbiw	r28, 0x24	; 36
    1ea8:	0f b6       	in	r0, 0x3f	; 63
    1eaa:	f8 94       	cli
    1eac:	de bf       	out	0x3e, r29	; 62
    1eae:	0f be       	out	0x3f, r0	; 63
    1eb0:	cd bf       	out	0x3d, r28	; 61
 * ----------------------------------------------------------------
 */

#include "UI_HLT.h"

EZUI *UI_HLT  = new EZUI();
    1eb2:	80 e1       	ldi	r24, 0x10	; 16
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <_Znwj>
    1eba:	8c 01       	movw	r16, r24
    1ebc:	aa d7       	rcall	.+3924   	; 0x2e12 <_ZN4EZUIC1Ev>
    1ebe:	10 93 2c 09 	sts	0x092C, r17
    1ec2:	00 93 2b 09 	sts	0x092B, r16

/***************************************
 Main Menu
***************************************/
EZUI_Menu HLT_MainMenu;
    1ec6:	89 e0       	ldi	r24, 0x09	; 9
    1ec8:	99 e0       	ldi	r25, 0x09	; 9
    1eca:	55 d3       	rcall	.+1706   	; 0x2576 <_ZN9EZUI_MenuC1Ev>
const PROGMEM EZUI_Control_Link Lnk_HLT_Main("Main",&HLT_MainMenu);
    1ecc:	67 ed       	ldi	r22, 0xD7	; 215
    1ece:	72 e0       	ldi	r23, 0x02	; 2
    1ed0:	ce 01       	movw	r24, r28
    1ed2:	01 96       	adiw	r24, 0x01	; 1
    1ed4:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    1ed8:	49 e0       	ldi	r20, 0x09	; 9
    1eda:	59 e0       	ldi	r21, 0x09	; 9
    1edc:	be 01       	movw	r22, r28
    1ede:	6f 5f       	subi	r22, 0xFF	; 255
    1ee0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee2:	86 e2       	ldi	r24, 0x26	; 38
    1ee4:	94 e0       	ldi	r25, 0x04	; 4
    1ee6:	15 d9       	rcall	.-3542   	; 0x1112 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Menu>
    1ee8:	ce 01       	movw	r24, r28
    1eea:	01 96       	adiw	r24, 0x01	; 1
    1eec:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>

/***************************************
 Monitor
***************************************/
EZUI_Page Page_Monitor;
    1ef0:	83 e0       	ldi	r24, 0x03	; 3
    1ef2:	99 e0       	ldi	r25, 0x09	; 9
    1ef4:	50 d7       	rcall	.+3744   	; 0x2d96 <_ZN9EZUI_PageC1Ev>
const PROGMEM EZUI_Control_Link Lnk_Monitor("Monitor",&Page_Monitor);
    1ef6:	63 e4       	ldi	r22, 0x43	; 67
    1ef8:	73 e0       	ldi	r23, 0x03	; 3
    1efa:	ce 01       	movw	r24, r28
    1efc:	07 96       	adiw	r24, 0x07	; 7
    1efe:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    1f02:	43 e0       	ldi	r20, 0x03	; 3
    1f04:	59 e0       	ldi	r21, 0x09	; 9
    1f06:	be 01       	movw	r22, r28
    1f08:	69 5f       	subi	r22, 0xF9	; 249
    1f0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f0c:	8a e1       	ldi	r24, 0x1A	; 26
    1f0e:	94 e0       	ldi	r25, 0x04	; 4
    1f10:	2b d9       	rcall	.-3498   	; 0x1168 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Page>
    1f12:	ce 01       	movw	r24, r28
    1f14:	07 96       	adiw	r24, 0x07	; 7
    1f16:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>

//Monitor Page Items
const PROGMEM EZUI_Control_ToggleOption Tgl_Sol1("Sol#1:", HLT_SOL1);
    1f1a:	00 91 08 02 	lds	r16, 0x0208
    1f1e:	10 91 09 02 	lds	r17, 0x0209
    1f22:	6c ed       	ldi	r22, 0xDC	; 220
    1f24:	72 e0       	ldi	r23, 0x02	; 2
    1f26:	ce 01       	movw	r24, r28
    1f28:	0d 96       	adiw	r24, 0x0d	; 13
    1f2a:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    1f2e:	a8 01       	movw	r20, r16
    1f30:	be 01       	movw	r22, r28
    1f32:	63 5f       	subi	r22, 0xF3	; 243
    1f34:	7f 4f       	sbci	r23, 0xFF	; 255
    1f36:	83 e0       	ldi	r24, 0x03	; 3
    1f38:	94 e0       	ldi	r25, 0x04	; 4
    1f3a:	dd d9       	rcall	.-3142   	; 0x12f6 <_ZN25EZUI_Control_ToggleOptionC1E6StringP9DigitalIO>
    1f3c:	ce 01       	movw	r24, r28
    1f3e:	0d 96       	adiw	r24, 0x0d	; 13
    1f40:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
const PROGMEM EZUI_Control_ToggleOption Tgl_Sol2("Sol#2:", HLT_SOL2);
    1f44:	00 91 06 02 	lds	r16, 0x0206
    1f48:	10 91 07 02 	lds	r17, 0x0207
    1f4c:	63 ee       	ldi	r22, 0xE3	; 227
    1f4e:	72 e0       	ldi	r23, 0x02	; 2
    1f50:	ce 01       	movw	r24, r28
    1f52:	43 96       	adiw	r24, 0x13	; 19
    1f54:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    1f58:	a8 01       	movw	r20, r16
    1f5a:	be 01       	movw	r22, r28
    1f5c:	6d 5e       	subi	r22, 0xED	; 237
    1f5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f60:	8c ee       	ldi	r24, 0xEC	; 236
    1f62:	93 e0       	ldi	r25, 0x03	; 3
    1f64:	c8 d9       	rcall	.-3184   	; 0x12f6 <_ZN25EZUI_Control_ToggleOptionC1E6StringP9DigitalIO>
    1f66:	ce 01       	movw	r24, r28
    1f68:	43 96       	adiw	r24, 0x13	; 19
    1f6a:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>

/***************************************
 Settings
***************************************/
EZUI_Menu Menu_Settings;
    1f6e:	81 ee       	ldi	r24, 0xE1	; 225
    1f70:	98 e0       	ldi	r25, 0x08	; 8
    1f72:	01 d3       	rcall	.+1538   	; 0x2576 <_ZN9EZUI_MenuC1Ev>
const PROGMEM EZUI_Control_Link Lnk_Settings("Settings",&Menu_Settings);
    1f74:	6a ee       	ldi	r22, 0xEA	; 234
    1f76:	72 e0       	ldi	r23, 0x02	; 2
    1f78:	ce 01       	movw	r24, r28
    1f7a:	49 96       	adiw	r24, 0x19	; 25
    1f7c:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    1f80:	41 ee       	ldi	r20, 0xE1	; 225
    1f82:	58 e0       	ldi	r21, 0x08	; 8
    1f84:	be 01       	movw	r22, r28
    1f86:	67 5e       	subi	r22, 0xE7	; 231
    1f88:	7f 4f       	sbci	r23, 0xFF	; 255
    1f8a:	80 ee       	ldi	r24, 0xE0	; 224
    1f8c:	93 e0       	ldi	r25, 0x03	; 3
    1f8e:	c1 d8       	rcall	.-3710   	; 0x1112 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Menu>
    1f90:	ce 01       	movw	r24, r28
    1f92:	49 96       	adiw	r24, 0x19	; 25
    1f94:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>

/***************************************
 Diagnstics
***************************************/
EZUI_Menu Menu_Diagnostics;
    1f98:	8f eb       	ldi	r24, 0xBF	; 191
    1f9a:	98 e0       	ldi	r25, 0x08	; 8
    1f9c:	ec d2       	rcall	.+1496   	; 0x2576 <_ZN9EZUI_MenuC1Ev>
EZUI_Control_Link Lnk_Diagnostics("Diagnostics",&Menu_Diagnostics);
    1f9e:	63 ef       	ldi	r22, 0xF3	; 243
    1fa0:	72 e0       	ldi	r23, 0x02	; 2
    1fa2:	ce 01       	movw	r24, r28
    1fa4:	4f 96       	adiw	r24, 0x1f	; 31
    1fa6:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    1faa:	4f eb       	ldi	r20, 0xBF	; 191
    1fac:	58 e0       	ldi	r21, 0x08	; 8
    1fae:	be 01       	movw	r22, r28
    1fb0:	61 5e       	subi	r22, 0xE1	; 225
    1fb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb4:	83 eb       	ldi	r24, 0xB3	; 179
    1fb6:	98 e0       	ldi	r25, 0x08	; 8
    1fb8:	ac d8       	rcall	.-3752   	; 0x1112 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Menu>
    1fba:	ce 01       	movw	r24, r28
    1fbc:	4f 96       	adiw	r24, 0x1f	; 31
    1fbe:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
	UI_HLT->setDisplay(&HLT_MainMenu);
	
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.println("Done.");
	#endif
}
    1fc2:	a4 96       	adiw	r28, 0x24	; 36
    1fc4:	0f b6       	in	r0, 0x3f	; 63
    1fc6:	f8 94       	cli
    1fc8:	de bf       	out	0x3e, r29	; 62
    1fca:	0f be       	out	0x3f, r0	; 63
    1fcc:	cd bf       	out	0x3d, r28	; 61
    1fce:	df 91       	pop	r29
    1fd0:	cf 91       	pop	r28
    1fd2:	1f 91       	pop	r17
    1fd4:	0f 91       	pop	r16
    1fd6:	08 95       	ret

00001fd8 <_GLOBAL__sub_D_UI_HLT>:

/***************************************
 Diagnstics
***************************************/
EZUI_Menu Menu_Diagnostics;
EZUI_Control_Link Lnk_Diagnostics("Diagnostics",&Menu_Diagnostics);
    1fd8:	83 eb       	ldi	r24, 0xB3	; 179
    1fda:	98 e0       	ldi	r25, 0x08	; 8
    1fdc:	f1 d8       	rcall	.-3614   	; 0x11c0 <_ZN17EZUI_Control_LinkD1Ev>
const PROGMEM EZUI_Control_Link Lnk_Settings("Settings",&Menu_Settings);

/***************************************
 Diagnstics
***************************************/
EZUI_Menu Menu_Diagnostics;
    1fde:	8f eb       	ldi	r24, 0xBF	; 191
    1fe0:	98 e0       	ldi	r25, 0x08	; 8
    1fe2:	f2 d2       	rcall	.+1508   	; 0x25c8 <_ZN9EZUI_MenuD1Ev>

/***************************************
 Settings
***************************************/
EZUI_Menu Menu_Settings;
const PROGMEM EZUI_Control_Link Lnk_Settings("Settings",&Menu_Settings);
    1fe4:	80 ee       	ldi	r24, 0xE0	; 224
    1fe6:	93 e0       	ldi	r25, 0x03	; 3
    1fe8:	eb d8       	rcall	.-3626   	; 0x11c0 <_ZN17EZUI_Control_LinkD1Ev>
const PROGMEM EZUI_Control_ToggleOption Tgl_Sol2("Sol#2:", HLT_SOL2);

/***************************************
 Settings
***************************************/
EZUI_Menu Menu_Settings;
    1fea:	81 ee       	ldi	r24, 0xE1	; 225
    1fec:	98 e0       	ldi	r25, 0x08	; 8
    1fee:	ec d2       	rcall	.+1496   	; 0x25c8 <_ZN9EZUI_MenuD1Ev>
EZUI_Page Page_Monitor;
const PROGMEM EZUI_Control_Link Lnk_Monitor("Monitor",&Page_Monitor);

//Monitor Page Items
const PROGMEM EZUI_Control_ToggleOption Tgl_Sol1("Sol#1:", HLT_SOL1);
const PROGMEM EZUI_Control_ToggleOption Tgl_Sol2("Sol#2:", HLT_SOL2);
    1ff0:	8c ee       	ldi	r24, 0xEC	; 236
    1ff2:	93 e0       	ldi	r25, 0x03	; 3
    1ff4:	f5 d8       	rcall	.-3606   	; 0x11e0 <_ZN25EZUI_Control_ToggleOptionD1Ev>
***************************************/
EZUI_Page Page_Monitor;
const PROGMEM EZUI_Control_Link Lnk_Monitor("Monitor",&Page_Monitor);

//Monitor Page Items
const PROGMEM EZUI_Control_ToggleOption Tgl_Sol1("Sol#1:", HLT_SOL1);
    1ff6:	83 e0       	ldi	r24, 0x03	; 3
    1ff8:	94 e0       	ldi	r25, 0x04	; 4
    1ffa:	f2 d8       	rcall	.-3612   	; 0x11e0 <_ZN25EZUI_Control_ToggleOptionD1Ev>

/***************************************
 Monitor
***************************************/
EZUI_Page Page_Monitor;
const PROGMEM EZUI_Control_Link Lnk_Monitor("Monitor",&Page_Monitor);
    1ffc:	8a e1       	ldi	r24, 0x1A	; 26
    1ffe:	94 e0       	ldi	r25, 0x04	; 4
    2000:	df d8       	rcall	.-3650   	; 0x11c0 <_ZN17EZUI_Control_LinkD1Ev>
const PROGMEM EZUI_Control_Link Lnk_HLT_Main("Main",&HLT_MainMenu);

/***************************************
 Monitor
***************************************/
EZUI_Page Page_Monitor;
    2002:	83 e0       	ldi	r24, 0x03	; 3
    2004:	99 e0       	ldi	r25, 0x09	; 9
    2006:	d3 d6       	rcall	.+3494   	; 0x2dae <_ZN9EZUI_PageD1Ev>

/***************************************
 Main Menu
***************************************/
EZUI_Menu HLT_MainMenu;
const PROGMEM EZUI_Control_Link Lnk_HLT_Main("Main",&HLT_MainMenu);
    2008:	86 e2       	ldi	r24, 0x26	; 38
    200a:	94 e0       	ldi	r25, 0x04	; 4
    200c:	d9 d8       	rcall	.-3662   	; 0x11c0 <_ZN17EZUI_Control_LinkD1Ev>
EZUI *UI_HLT  = new EZUI();

/***************************************
 Main Menu
***************************************/
EZUI_Menu HLT_MainMenu;
    200e:	89 e0       	ldi	r24, 0x09	; 9
    2010:	99 e0       	ldi	r25, 0x09	; 9
    2012:	da c2       	rjmp	.+1460   	; 0x25c8 <_ZN9EZUI_MenuD1Ev>
    2014:	08 95       	ret

00002016 <_Z12UI_MAIN_initv>:
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_degFVal(&HLT_RTD_OP.degF);

		
void UI_MAIN_init(){
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.print("Initializing MAIN UI...");
    2016:	6f ef       	ldi	r22, 0xFF	; 255
    2018:	72 e0       	ldi	r23, 0x02	; 2
    201a:	85 e6       	ldi	r24, 0x65	; 101
    201c:	9a e0       	ldi	r25, 0x0A	; 10
    201e:	0e 94 ec 25 	call	0x4bd8	; 0x4bd8 <_ZN5Print5printEPKc>
	
	
	/***************************************
	  Setup + Initialization
	***************************************/
	UI_MAIN->attatchEncoder(&MAIN_ENC);
    2022:	6c e1       	ldi	r22, 0x1C	; 28
    2024:	77 e0       	ldi	r23, 0x07	; 7
    2026:	80 91 83 09 	lds	r24, 0x0983
    202a:	90 91 84 09 	lds	r25, 0x0984
    202e:	fb d6       	rcall	.+3574   	; 0x2e26 <_ZN4EZUI14attatchEncoderEP22ClickEncoderWithEvents>
	UI_MAIN->attatchLCD(&MAIN_LCD);
    2030:	68 e4       	ldi	r22, 0x48	; 72
    2032:	77 e0       	ldi	r23, 0x07	; 7
    2034:	80 91 83 09 	lds	r24, 0x0983
    2038:	90 91 84 09 	lds	r25, 0x0984
    203c:	2a d7       	rcall	.+3668   	; 0x2e92 <_ZN4EZUI10attatchLCDEP17LiquidCrystal_I2C>
	UI_MAIN->setDisplay(&Menu_Main);
    203e:	61 e6       	ldi	r22, 0x61	; 97
    2040:	79 e0       	ldi	r23, 0x09	; 9
    2042:	80 91 83 09 	lds	r24, 0x0983
    2046:	90 91 84 09 	lds	r25, 0x0984
    204a:	9a d7       	rcall	.+3892   	; 0x2f80 <_ZN4EZUI10setDisplayEP9EZUI_Menu>
	
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.println("Done.");
    204c:	63 e7       	ldi	r22, 0x73	; 115
    204e:	72 e0       	ldi	r23, 0x02	; 2
    2050:	85 e6       	ldi	r24, 0x65	; 101
    2052:	9a e0       	ldi	r25, 0x0A	; 10
    2054:	0c 94 16 26 	jmp	0x4c2c	; 0x4c2c <_ZN5Print7printlnEPKc>
    2058:	08 95       	ret

0000205a <_GLOBAL__sub_I_UI_MAIN>:
	#endif
}
    205a:	0f 93       	push	r16
    205c:	1f 93       	push	r17
    205e:	cf 93       	push	r28
    2060:	df 93       	push	r29
    2062:	cd b7       	in	r28, 0x3d	; 61
    2064:	de b7       	in	r29, 0x3e	; 62
    2066:	e0 97       	sbiw	r28, 0x30	; 48
    2068:	0f b6       	in	r0, 0x3f	; 63
    206a:	f8 94       	cli
    206c:	de bf       	out	0x3e, r29	; 62
    206e:	0f be       	out	0x3f, r0	; 63
    2070:	cd bf       	out	0x3d, r28	; 61
 * ----------------------------------------------------------------
 */

#include "UI_MAIN.h"

EZUI *UI_MAIN = new EZUI();
    2072:	80 e1       	ldi	r24, 0x10	; 16
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <_Znwj>
    207a:	8c 01       	movw	r16, r24
    207c:	ca d6       	rcall	.+3476   	; 0x2e12 <_ZN4EZUIC1Ev>
    207e:	10 93 84 09 	sts	0x0984, r17
    2082:	00 93 83 09 	sts	0x0983, r16

/***************************************
 Main Menu
***************************************/
EZUI_Menu Menu_Main;
    2086:	81 e6       	ldi	r24, 0x61	; 97
    2088:	99 e0       	ldi	r25, 0x09	; 9
    208a:	75 d2       	rcall	.+1258   	; 0x2576 <_ZN9EZUI_MenuC1Ev>

/***************************************
 Alarm Test Menu
***************************************/
//Controls
const PROGMEM EZUI_Control_Link Lnk_Back_MainMenu("Back",&Menu_Main);
    208c:	67 e1       	ldi	r22, 0x17	; 23
    208e:	73 e0       	ldi	r23, 0x03	; 3
    2090:	ce 01       	movw	r24, r28
    2092:	01 96       	adiw	r24, 0x01	; 1
    2094:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    2098:	41 e6       	ldi	r20, 0x61	; 97
    209a:	59 e0       	ldi	r21, 0x09	; 9
    209c:	be 01       	movw	r22, r28
    209e:	6f 5f       	subi	r22, 0xFF	; 255
    20a0:	7f 4f       	sbci	r23, 0xFF	; 255
    20a2:	84 e6       	ldi	r24, 0x64	; 100
    20a4:	95 e0       	ldi	r25, 0x05	; 5
    20a6:	35 d8       	rcall	.-3990   	; 0x1112 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Menu>
    20a8:	ce 01       	movw	r24, r28
    20aa:	01 96       	adiw	r24, 0x01	; 1
    20ac:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>

//Menu - Alarm Test
EZUI_Menu Menu_AlarmTest;
    20b0:	8f e3       	ldi	r24, 0x3F	; 63
    20b2:	99 e0       	ldi	r25, 0x09	; 9
    20b4:	60 d2       	rcall	.+1216   	; 0x2576 <_ZN9EZUI_MenuC1Ev>
const PROGMEM EZUI_Control_Link Lnk_MenuAlarmTest("Alarm Test",&Menu_AlarmTest);
    20b6:	6c e1       	ldi	r22, 0x1C	; 28
    20b8:	73 e0       	ldi	r23, 0x03	; 3
    20ba:	ce 01       	movw	r24, r28
    20bc:	07 96       	adiw	r24, 0x07	; 7
    20be:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    20c2:	4f e3       	ldi	r20, 0x3F	; 63
    20c4:	59 e0       	ldi	r21, 0x09	; 9
    20c6:	be 01       	movw	r22, r28
    20c8:	69 5f       	subi	r22, 0xF9	; 249
    20ca:	7f 4f       	sbci	r23, 0xFF	; 255
    20cc:	88 e5       	ldi	r24, 0x58	; 88
    20ce:	95 e0       	ldi	r25, 0x05	; 5
    20d0:	20 d8       	rcall	.-4032   	; 0x1112 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Menu>
    20d2:	ce 01       	movw	r24, r28
    20d4:	07 96       	adiw	r24, 0x07	; 7
    20d6:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
const PROGMEM EZUI_Control_ToggleOption Tgl_TimerAlarmDIO("Timer Alarm",&RC1_OUT1);
    20da:	67 e2       	ldi	r22, 0x27	; 39
    20dc:	73 e0       	ldi	r23, 0x03	; 3
    20de:	ce 01       	movw	r24, r28
    20e0:	0d 96       	adiw	r24, 0x0d	; 13
    20e2:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    20e6:	48 e7       	ldi	r20, 0x78	; 120
    20e8:	58 e0       	ldi	r21, 0x08	; 8
    20ea:	be 01       	movw	r22, r28
    20ec:	63 5f       	subi	r22, 0xF3	; 243
    20ee:	7f 4f       	sbci	r23, 0xFF	; 255
    20f0:	81 e4       	ldi	r24, 0x41	; 65
    20f2:	95 e0       	ldi	r25, 0x05	; 5
    20f4:	00 d9       	rcall	.-3584   	; 0x12f6 <_ZN25EZUI_Control_ToggleOptionC1E6StringP9DigitalIO>
    20f6:	ce 01       	movw	r24, r28
    20f8:	0d 96       	adiw	r24, 0x0d	; 13
    20fa:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
const PROGMEM EZUI_Control_ToggleOption Tgl_TempAlarmDIO("Temp Alarm",&RC1_OUT2);
    20fe:	63 e3       	ldi	r22, 0x33	; 51
    2100:	73 e0       	ldi	r23, 0x03	; 3
    2102:	ce 01       	movw	r24, r28
    2104:	43 96       	adiw	r24, 0x13	; 19
    2106:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    210a:	47 e6       	ldi	r20, 0x67	; 103
    210c:	58 e0       	ldi	r21, 0x08	; 8
    210e:	be 01       	movw	r22, r28
    2110:	6d 5e       	subi	r22, 0xED	; 237
    2112:	7f 4f       	sbci	r23, 0xFF	; 255
    2114:	8a e2       	ldi	r24, 0x2A	; 42
    2116:	95 e0       	ldi	r25, 0x05	; 5
    2118:	ee d8       	rcall	.-3620   	; 0x12f6 <_ZN25EZUI_Control_ToggleOptionC1E6StringP9DigitalIO>
    211a:	ce 01       	movw	r24, r28
    211c:	43 96       	adiw	r24, 0x13	; 19
    211e:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
	{ 14, 1, &Lbl_Pump2Voltlbl},
	{ 16, 1, &Lbl_Pump2Volt},
	{ 0,  3, &Lnk_Back_MainMenu} };*/
		
//Page - RTD Status - All
EZUI_Page Page_RTDs;
    2122:	89 e3       	ldi	r24, 0x39	; 57
    2124:	99 e0       	ldi	r25, 0x09	; 9
    2126:	37 d6       	rcall	.+3182   	; 0x2d96 <_ZN9EZUI_PageC1Ev>
const PROGMEM EZUI_Control_Link Lnk_RTDs_Monitor("RTDs Monitor",&Page_RTDs);
    2128:	6e e3       	ldi	r22, 0x3E	; 62
    212a:	73 e0       	ldi	r23, 0x03	; 3
    212c:	ce 01       	movw	r24, r28
    212e:	49 96       	adiw	r24, 0x19	; 25
    2130:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    2134:	49 e3       	ldi	r20, 0x39	; 57
    2136:	59 e0       	ldi	r21, 0x09	; 9
    2138:	be 01       	movw	r22, r28
    213a:	67 5e       	subi	r22, 0xE7	; 231
    213c:	7f 4f       	sbci	r23, 0xFF	; 255
    213e:	8e e1       	ldi	r24, 0x1E	; 30
    2140:	95 e0       	ldi	r25, 0x05	; 5
    2142:	12 d8       	rcall	.-4060   	; 0x1168 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Page>
    2144:	ce 01       	movw	r24, r28
    2146:	49 96       	adiw	r24, 0x19	; 25
    2148:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
const PROGMEM EZUI_Control_Link Lnk_RTDs_BackLink("Back",&Page_RTDs);
    214c:	67 e1       	ldi	r22, 0x17	; 23
    214e:	73 e0       	ldi	r23, 0x03	; 3
    2150:	ce 01       	movw	r24, r28
    2152:	4f 96       	adiw	r24, 0x1f	; 31
    2154:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    2158:	49 e3       	ldi	r20, 0x39	; 57
    215a:	59 e0       	ldi	r21, 0x09	; 9
    215c:	be 01       	movw	r22, r28
    215e:	61 5e       	subi	r22, 0xE1	; 225
    2160:	7f 4f       	sbci	r23, 0xFF	; 255
    2162:	82 e1       	ldi	r24, 0x12	; 18
    2164:	95 e0       	ldi	r25, 0x05	; 5
    2166:	00 d8       	rcall	.-4096   	; 0x1168 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Page>
    2168:	ce 01       	movw	r24, r28
    216a:	4f 96       	adiw	r24, 0x1f	; 31
    216c:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>

//Page - RTD Status - HLT BP
EZUI_Page Page_RTDs_HLT_BP;
    2170:	83 e3       	ldi	r24, 0x33	; 51
    2172:	99 e0       	ldi	r25, 0x09	; 9
    2174:	10 d6       	rcall	.+3104   	; 0x2d96 <_ZN9EZUI_PageC1Ev>
const PROGMEM EZUI_Control_Link Lnk_RTDs_HLT_BP("HLTBP:",&Page_RTDs_HLT_BP);
    2176:	6b e4       	ldi	r22, 0x4B	; 75
    2178:	73 e0       	ldi	r23, 0x03	; 3
    217a:	ce 01       	movw	r24, r28
    217c:	85 96       	adiw	r24, 0x25	; 37
    217e:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    2182:	43 e3       	ldi	r20, 0x33	; 51
    2184:	59 e0       	ldi	r21, 0x09	; 9
    2186:	be 01       	movw	r22, r28
    2188:	6b 5d       	subi	r22, 0xDB	; 219
    218a:	7f 4f       	sbci	r23, 0xFF	; 255
    218c:	86 e0       	ldi	r24, 0x06	; 6
    218e:	95 e0       	ldi	r25, 0x05	; 5
    2190:	0e 94 b4 08 	call	0x1168	; 0x1168 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Page>
    2194:	ce 01       	movw	r24, r28
    2196:	85 96       	adiw	r24, 0x25	; 37
    2198:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_VoutLbl("Vout:");
    219c:	61 e0       	ldi	r22, 0x01	; 1
    219e:	8c ef       	ldi	r24, 0xFC	; 252
    21a0:	94 e0       	ldi	r25, 0x04	; 4
    21a2:	0e 94 2d 08 	call	0x105a	; 0x105a <_ZN18EZUI_Control_LabelC1Eb>
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_VoutVal(&HLT_RTD_BP.Vo);
    21a6:	6e ea       	ldi	r22, 0xAE	; 174
    21a8:	76 e0       	ldi	r23, 0x06	; 6
    21aa:	82 ef       	ldi	r24, 0xF2	; 242
    21ac:	94 e0       	ldi	r25, 0x04	; 4
    21ae:	0e 94 4e 08 	call	0x109c	; 0x109c <_ZN18EZUI_Control_LabelC1EPf>
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_VsLbl("Vs:");
    21b2:	61 e0       	ldi	r22, 0x01	; 1
    21b4:	88 ee       	ldi	r24, 0xE8	; 232
    21b6:	94 e0       	ldi	r25, 0x04	; 4
    21b8:	0e 94 2d 08 	call	0x105a	; 0x105a <_ZN18EZUI_Control_LabelC1Eb>
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_VsVal(&HLT_RTD_BP.Vs);
    21bc:	62 eb       	ldi	r22, 0xB2	; 178
    21be:	76 e0       	ldi	r23, 0x06	; 6
    21c0:	8e ed       	ldi	r24, 0xDE	; 222
    21c2:	94 e0       	ldi	r25, 0x04	; 4
    21c4:	0e 94 4e 08 	call	0x109c	; 0x109c <_ZN18EZUI_Control_LabelC1EPf>
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_RLbl("R:");
    21c8:	61 e0       	ldi	r22, 0x01	; 1
    21ca:	84 ed       	ldi	r24, 0xD4	; 212
    21cc:	94 e0       	ldi	r25, 0x04	; 4
    21ce:	0e 94 2d 08 	call	0x105a	; 0x105a <_ZN18EZUI_Control_LabelC1Eb>
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_RVal(&HLT_RTD_BP.Rcalc);
    21d2:	6c ec       	ldi	r22, 0xCC	; 204
    21d4:	76 e0       	ldi	r23, 0x06	; 6
    21d6:	8a ec       	ldi	r24, 0xCA	; 202
    21d8:	94 e0       	ldi	r25, 0x04	; 4
    21da:	0e 94 4e 08 	call	0x109c	; 0x109c <_ZN18EZUI_Control_LabelC1EPf>
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_degCLbl("degC:");
    21de:	61 e0       	ldi	r22, 0x01	; 1
    21e0:	80 ec       	ldi	r24, 0xC0	; 192
    21e2:	94 e0       	ldi	r25, 0x04	; 4
    21e4:	0e 94 2d 08 	call	0x105a	; 0x105a <_ZN18EZUI_Control_LabelC1Eb>
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_degCVal(&HLT_RTD_BP.degC);
    21e8:	60 ed       	ldi	r22, 0xD0	; 208
    21ea:	76 e0       	ldi	r23, 0x06	; 6
    21ec:	86 eb       	ldi	r24, 0xB6	; 182
    21ee:	94 e0       	ldi	r25, 0x04	; 4
    21f0:	0e 94 4e 08 	call	0x109c	; 0x109c <_ZN18EZUI_Control_LabelC1EPf>
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_degFLbl("degF:");
    21f4:	61 e0       	ldi	r22, 0x01	; 1
    21f6:	8c ea       	ldi	r24, 0xAC	; 172
    21f8:	94 e0       	ldi	r25, 0x04	; 4
    21fa:	0e 94 2d 08 	call	0x105a	; 0x105a <_ZN18EZUI_Control_LabelC1Eb>
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_degFVal(&HLT_RTD_BP.degF);
    21fe:	64 ed       	ldi	r22, 0xD4	; 212
    2200:	76 e0       	ldi	r23, 0x06	; 6
    2202:	82 ea       	ldi	r24, 0xA2	; 162
    2204:	94 e0       	ldi	r25, 0x04	; 4
    2206:	0e 94 4e 08 	call	0x109c	; 0x109c <_ZN18EZUI_Control_LabelC1EPf>

//Page - RTD Status - HLT BP
EZUI_Page Page_RTDs_HLT_OP;
    220a:	8d e2       	ldi	r24, 0x2D	; 45
    220c:	99 e0       	ldi	r25, 0x09	; 9
    220e:	c3 d5       	rcall	.+2950   	; 0x2d96 <_ZN9EZUI_PageC1Ev>
const PROGMEM EZUI_Control_Link Lnk_RTDs_HLT_OP("HLTOP:",&Page_RTDs_HLT_OP);
    2210:	62 e5       	ldi	r22, 0x52	; 82
    2212:	73 e0       	ldi	r23, 0x03	; 3
    2214:	ce 01       	movw	r24, r28
    2216:	8b 96       	adiw	r24, 0x2b	; 43
    2218:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <_ZN6StringC1EPKc>
    221c:	4d e2       	ldi	r20, 0x2D	; 45
    221e:	59 e0       	ldi	r21, 0x09	; 9
    2220:	be 01       	movw	r22, r28
    2222:	65 5d       	subi	r22, 0xD5	; 213
    2224:	7f 4f       	sbci	r23, 0xFF	; 255
    2226:	86 e9       	ldi	r24, 0x96	; 150
    2228:	94 e0       	ldi	r25, 0x04	; 4
    222a:	0e 94 b4 08 	call	0x1168	; 0x1168 <_ZN17EZUI_Control_LinkC1E6StringP9EZUI_Page>
    222e:	ce 01       	movw	r24, r28
    2230:	8b 96       	adiw	r24, 0x2b	; 43
    2232:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_VoutLbl("Vo:");
    2236:	61 e0       	ldi	r22, 0x01	; 1
    2238:	8c e8       	ldi	r24, 0x8C	; 140
    223a:	94 e0       	ldi	r25, 0x04	; 4
    223c:	0e 94 2d 08 	call	0x105a	; 0x105a <_ZN18EZUI_Control_LabelC1Eb>
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_VoutVal(&HLT_RTD_OP.Vo);
    2240:	6c e7       	ldi	r22, 0x7C	; 124
    2242:	76 e0       	ldi	r23, 0x06	; 6
    2244:	82 e8       	ldi	r24, 0x82	; 130
    2246:	94 e0       	ldi	r25, 0x04	; 4
    2248:	0e 94 4e 08 	call	0x109c	; 0x109c <_ZN18EZUI_Control_LabelC1EPf>
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_VsLbl("Vs:");
    224c:	61 e0       	ldi	r22, 0x01	; 1
    224e:	88 e7       	ldi	r24, 0x78	; 120
    2250:	94 e0       	ldi	r25, 0x04	; 4
    2252:	0e 94 2d 08 	call	0x105a	; 0x105a <_ZN18EZUI_Control_LabelC1Eb>
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_VsVal(&HLT_RTD_OP.Vs);
    2256:	60 e8       	ldi	r22, 0x80	; 128
    2258:	76 e0       	ldi	r23, 0x06	; 6
    225a:	8e e6       	ldi	r24, 0x6E	; 110
    225c:	94 e0       	ldi	r25, 0x04	; 4
    225e:	0e 94 4e 08 	call	0x109c	; 0x109c <_ZN18EZUI_Control_LabelC1EPf>
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_RLbl("R:");
    2262:	61 e0       	ldi	r22, 0x01	; 1
    2264:	84 e6       	ldi	r24, 0x64	; 100
    2266:	94 e0       	ldi	r25, 0x04	; 4
    2268:	0e 94 2d 08 	call	0x105a	; 0x105a <_ZN18EZUI_Control_LabelC1Eb>
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_RVal(&HLT_RTD_OP.Rcalc);
    226c:	6a e9       	ldi	r22, 0x9A	; 154
    226e:	76 e0       	ldi	r23, 0x06	; 6
    2270:	8a e5       	ldi	r24, 0x5A	; 90
    2272:	94 e0       	ldi	r25, 0x04	; 4
    2274:	0e 94 4e 08 	call	0x109c	; 0x109c <_ZN18EZUI_Control_LabelC1EPf>
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_degCLbl("degC:");
    2278:	61 e0       	ldi	r22, 0x01	; 1
    227a:	80 e5       	ldi	r24, 0x50	; 80
    227c:	94 e0       	ldi	r25, 0x04	; 4
    227e:	0e 94 2d 08 	call	0x105a	; 0x105a <_ZN18EZUI_Control_LabelC1Eb>
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_degCVal(&HLT_RTD_OP.degC);
    2282:	6e e9       	ldi	r22, 0x9E	; 158
    2284:	76 e0       	ldi	r23, 0x06	; 6
    2286:	86 e4       	ldi	r24, 0x46	; 70
    2288:	94 e0       	ldi	r25, 0x04	; 4
    228a:	0e 94 4e 08 	call	0x109c	; 0x109c <_ZN18EZUI_Control_LabelC1EPf>
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_degFLbl("degF:");
    228e:	61 e0       	ldi	r22, 0x01	; 1
    2290:	8c e3       	ldi	r24, 0x3C	; 60
    2292:	94 e0       	ldi	r25, 0x04	; 4
    2294:	0e 94 2d 08 	call	0x105a	; 0x105a <_ZN18EZUI_Control_LabelC1Eb>
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_degFVal(&HLT_RTD_OP.degF);
    2298:	62 ea       	ldi	r22, 0xA2	; 162
    229a:	76 e0       	ldi	r23, 0x06	; 6
    229c:	82 e3       	ldi	r24, 0x32	; 50
    229e:	94 e0       	ldi	r25, 0x04	; 4
    22a0:	0e 94 4e 08 	call	0x109c	; 0x109c <_ZN18EZUI_Control_LabelC1EPf>
	UI_MAIN->setDisplay(&Menu_Main);
	
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.println("Done.");
	#endif
}
    22a4:	e0 96       	adiw	r28, 0x30	; 48
    22a6:	0f b6       	in	r0, 0x3f	; 63
    22a8:	f8 94       	cli
    22aa:	de bf       	out	0x3e, r29	; 62
    22ac:	0f be       	out	0x3f, r0	; 63
    22ae:	cd bf       	out	0x3d, r28	; 61
    22b0:	df 91       	pop	r29
    22b2:	cf 91       	pop	r28
    22b4:	1f 91       	pop	r17
    22b6:	0f 91       	pop	r16
    22b8:	08 95       	ret

000022ba <_GLOBAL__sub_D_UI_MAIN>:
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_RLbl("R:");
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_RVal(&HLT_RTD_OP.Rcalc);
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_degCLbl("degC:");
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_degCVal(&HLT_RTD_OP.degC);
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_degFLbl("degF:");
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_degFVal(&HLT_RTD_OP.degF);
    22ba:	82 e3       	ldi	r24, 0x32	; 50
    22bc:	94 e0       	ldi	r25, 0x04	; 4
    22be:	0e 94 26 08 	call	0x104c	; 0x104c <_ZN18EZUI_Control_LabelD1Ev>
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_VsVal(&HLT_RTD_OP.Vs);
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_RLbl("R:");
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_RVal(&HLT_RTD_OP.Rcalc);
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_degCLbl("degC:");
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_degCVal(&HLT_RTD_OP.degC);
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_degFLbl("degF:");
    22c2:	8c e3       	ldi	r24, 0x3C	; 60
    22c4:	94 e0       	ldi	r25, 0x04	; 4
    22c6:	0e 94 26 08 	call	0x104c	; 0x104c <_ZN18EZUI_Control_LabelD1Ev>
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_VsLbl("Vs:");
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_VsVal(&HLT_RTD_OP.Vs);
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_RLbl("R:");
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_RVal(&HLT_RTD_OP.Rcalc);
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_degCLbl("degC:");
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_degCVal(&HLT_RTD_OP.degC);
    22ca:	86 e4       	ldi	r24, 0x46	; 70
    22cc:	94 e0       	ldi	r25, 0x04	; 4
    22ce:	0e 94 26 08 	call	0x104c	; 0x104c <_ZN18EZUI_Control_LabelD1Ev>
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_VoutVal(&HLT_RTD_OP.Vo);
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_VsLbl("Vs:");
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_VsVal(&HLT_RTD_OP.Vs);
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_RLbl("R:");
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_RVal(&HLT_RTD_OP.Rcalc);
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_degCLbl("degC:");
    22d2:	80 e5       	ldi	r24, 0x50	; 80
    22d4:	94 e0       	ldi	r25, 0x04	; 4
    22d6:	0e 94 26 08 	call	0x104c	; 0x104c <_ZN18EZUI_Control_LabelD1Ev>
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_VoutLbl("Vo:");
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_VoutVal(&HLT_RTD_OP.Vo);
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_VsLbl("Vs:");
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_VsVal(&HLT_RTD_OP.Vs);
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_RLbl("R:");
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_RVal(&HLT_RTD_OP.Rcalc);
    22da:	8a e5       	ldi	r24, 0x5A	; 90
    22dc:	94 e0       	ldi	r25, 0x04	; 4
    22de:	0e 94 26 08 	call	0x104c	; 0x104c <_ZN18EZUI_Control_LabelD1Ev>
const PROGMEM EZUI_Control_Link Lnk_RTDs_HLT_OP("HLTOP:",&Page_RTDs_HLT_OP);
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_VoutLbl("Vo:");
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_VoutVal(&HLT_RTD_OP.Vo);
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_VsLbl("Vs:");
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_VsVal(&HLT_RTD_OP.Vs);
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_RLbl("R:");
    22e2:	84 e6       	ldi	r24, 0x64	; 100
    22e4:	94 e0       	ldi	r25, 0x04	; 4
    22e6:	0e 94 26 08 	call	0x104c	; 0x104c <_ZN18EZUI_Control_LabelD1Ev>
EZUI_Page Page_RTDs_HLT_OP;
const PROGMEM EZUI_Control_Link Lnk_RTDs_HLT_OP("HLTOP:",&Page_RTDs_HLT_OP);
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_VoutLbl("Vo:");
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_VoutVal(&HLT_RTD_OP.Vo);
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_VsLbl("Vs:");
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_VsVal(&HLT_RTD_OP.Vs);
    22ea:	8e e6       	ldi	r24, 0x6E	; 110
    22ec:	94 e0       	ldi	r25, 0x04	; 4
    22ee:	0e 94 26 08 	call	0x104c	; 0x104c <_ZN18EZUI_Control_LabelD1Ev>
//Page - RTD Status - HLT BP
EZUI_Page Page_RTDs_HLT_OP;
const PROGMEM EZUI_Control_Link Lnk_RTDs_HLT_OP("HLTOP:",&Page_RTDs_HLT_OP);
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_VoutLbl("Vo:");
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_VoutVal(&HLT_RTD_OP.Vo);
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_VsLbl("Vs:");
    22f2:	88 e7       	ldi	r24, 0x78	; 120
    22f4:	94 e0       	ldi	r25, 0x04	; 4
    22f6:	0e 94 26 08 	call	0x104c	; 0x104c <_ZN18EZUI_Control_LabelD1Ev>

//Page - RTD Status - HLT BP
EZUI_Page Page_RTDs_HLT_OP;
const PROGMEM EZUI_Control_Link Lnk_RTDs_HLT_OP("HLTOP:",&Page_RTDs_HLT_OP);
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_VoutLbl("Vo:");
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_VoutVal(&HLT_RTD_OP.Vo);
    22fa:	82 e8       	ldi	r24, 0x82	; 130
    22fc:	94 e0       	ldi	r25, 0x04	; 4
    22fe:	0e 94 26 08 	call	0x104c	; 0x104c <_ZN18EZUI_Control_LabelD1Ev>
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_degFVal(&HLT_RTD_BP.degF);

//Page - RTD Status - HLT BP
EZUI_Page Page_RTDs_HLT_OP;
const PROGMEM EZUI_Control_Link Lnk_RTDs_HLT_OP("HLTOP:",&Page_RTDs_HLT_OP);
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_OP_VoutLbl("Vo:");
    2302:	8c e8       	ldi	r24, 0x8C	; 140
    2304:	94 e0       	ldi	r25, 0x04	; 4
    2306:	0e 94 26 08 	call	0x104c	; 0x104c <_ZN18EZUI_Control_LabelD1Ev>
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_degFLbl("degF:");
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_degFVal(&HLT_RTD_BP.degF);

//Page - RTD Status - HLT BP
EZUI_Page Page_RTDs_HLT_OP;
const PROGMEM EZUI_Control_Link Lnk_RTDs_HLT_OP("HLTOP:",&Page_RTDs_HLT_OP);
    230a:	86 e9       	ldi	r24, 0x96	; 150
    230c:	94 e0       	ldi	r25, 0x04	; 4
    230e:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <_ZN17EZUI_Control_LinkD1Ev>
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_degCVal(&HLT_RTD_BP.degC);
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_degFLbl("degF:");
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_degFVal(&HLT_RTD_BP.degF);

//Page - RTD Status - HLT BP
EZUI_Page Page_RTDs_HLT_OP;
    2312:	8d e2       	ldi	r24, 0x2D	; 45
    2314:	99 e0       	ldi	r25, 0x09	; 9
    2316:	4b d5       	rcall	.+2710   	; 0x2dae <_ZN9EZUI_PageD1Ev>
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_RLbl("R:");
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_RVal(&HLT_RTD_BP.Rcalc);
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_degCLbl("degC:");
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_degCVal(&HLT_RTD_BP.degC);
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_degFLbl("degF:");
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_degFVal(&HLT_RTD_BP.degF);
    2318:	82 ea       	ldi	r24, 0xA2	; 162
    231a:	94 e0       	ldi	r25, 0x04	; 4
    231c:	0e 94 26 08 	call	0x104c	; 0x104c <_ZN18EZUI_Control_LabelD1Ev>
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_VsVal(&HLT_RTD_BP.Vs);
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_RLbl("R:");
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_RVal(&HLT_RTD_BP.Rcalc);
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_degCLbl("degC:");
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_degCVal(&HLT_RTD_BP.degC);
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_degFLbl("degF:");
    2320:	8c ea       	ldi	r24, 0xAC	; 172
    2322:	94 e0       	ldi	r25, 0x04	; 4
    2324:	0e 94 26 08 	call	0x104c	; 0x104c <_ZN18EZUI_Control_LabelD1Ev>
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_VsLbl("Vs:");
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_VsVal(&HLT_RTD_BP.Vs);
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_RLbl("R:");
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_RVal(&HLT_RTD_BP.Rcalc);
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_degCLbl("degC:");
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_degCVal(&HLT_RTD_BP.degC);
    2328:	86 eb       	ldi	r24, 0xB6	; 182
    232a:	94 e0       	ldi	r25, 0x04	; 4
    232c:	0e 94 26 08 	call	0x104c	; 0x104c <_ZN18EZUI_Control_LabelD1Ev>
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_VoutVal(&HLT_RTD_BP.Vo);
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_VsLbl("Vs:");
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_VsVal(&HLT_RTD_BP.Vs);
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_RLbl("R:");
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_RVal(&HLT_RTD_BP.Rcalc);
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_degCLbl("degC:");
    2330:	80 ec       	ldi	r24, 0xC0	; 192
    2332:	94 e0       	ldi	r25, 0x04	; 4
    2334:	0e 94 26 08 	call	0x104c	; 0x104c <_ZN18EZUI_Control_LabelD1Ev>
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_VoutLbl("Vout:");
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_VoutVal(&HLT_RTD_BP.Vo);
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_VsLbl("Vs:");
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_VsVal(&HLT_RTD_BP.Vs);
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_RLbl("R:");
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_RVal(&HLT_RTD_BP.Rcalc);
    2338:	8a ec       	ldi	r24, 0xCA	; 202
    233a:	94 e0       	ldi	r25, 0x04	; 4
    233c:	0e 94 26 08 	call	0x104c	; 0x104c <_ZN18EZUI_Control_LabelD1Ev>
const PROGMEM EZUI_Control_Link Lnk_RTDs_HLT_BP("HLTBP:",&Page_RTDs_HLT_BP);
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_VoutLbl("Vout:");
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_VoutVal(&HLT_RTD_BP.Vo);
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_VsLbl("Vs:");
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_VsVal(&HLT_RTD_BP.Vs);
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_RLbl("R:");
    2340:	84 ed       	ldi	r24, 0xD4	; 212
    2342:	94 e0       	ldi	r25, 0x04	; 4
    2344:	0e 94 26 08 	call	0x104c	; 0x104c <_ZN18EZUI_Control_LabelD1Ev>
EZUI_Page Page_RTDs_HLT_BP;
const PROGMEM EZUI_Control_Link Lnk_RTDs_HLT_BP("HLTBP:",&Page_RTDs_HLT_BP);
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_VoutLbl("Vout:");
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_VoutVal(&HLT_RTD_BP.Vo);
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_VsLbl("Vs:");
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_VsVal(&HLT_RTD_BP.Vs);
    2348:	8e ed       	ldi	r24, 0xDE	; 222
    234a:	94 e0       	ldi	r25, 0x04	; 4
    234c:	0e 94 26 08 	call	0x104c	; 0x104c <_ZN18EZUI_Control_LabelD1Ev>
//Page - RTD Status - HLT BP
EZUI_Page Page_RTDs_HLT_BP;
const PROGMEM EZUI_Control_Link Lnk_RTDs_HLT_BP("HLTBP:",&Page_RTDs_HLT_BP);
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_VoutLbl("Vout:");
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_VoutVal(&HLT_RTD_BP.Vo);
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_VsLbl("Vs:");
    2350:	88 ee       	ldi	r24, 0xE8	; 232
    2352:	94 e0       	ldi	r25, 0x04	; 4
    2354:	0e 94 26 08 	call	0x104c	; 0x104c <_ZN18EZUI_Control_LabelD1Ev>

//Page - RTD Status - HLT BP
EZUI_Page Page_RTDs_HLT_BP;
const PROGMEM EZUI_Control_Link Lnk_RTDs_HLT_BP("HLTBP:",&Page_RTDs_HLT_BP);
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_VoutLbl("Vout:");
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_VoutVal(&HLT_RTD_BP.Vo);
    2358:	82 ef       	ldi	r24, 0xF2	; 242
    235a:	94 e0       	ldi	r25, 0x04	; 4
    235c:	0e 94 26 08 	call	0x104c	; 0x104c <_ZN18EZUI_Control_LabelD1Ev>
const PROGMEM EZUI_Control_Link Lnk_RTDs_BackLink("Back",&Page_RTDs);

//Page - RTD Status - HLT BP
EZUI_Page Page_RTDs_HLT_BP;
const PROGMEM EZUI_Control_Link Lnk_RTDs_HLT_BP("HLTBP:",&Page_RTDs_HLT_BP);
const PROGMEM EZUI_Control_Label Lbl_RTD_HLT_BP_VoutLbl("Vout:");
    2360:	8c ef       	ldi	r24, 0xFC	; 252
    2362:	94 e0       	ldi	r25, 0x04	; 4
    2364:	0e 94 26 08 	call	0x104c	; 0x104c <_ZN18EZUI_Control_LabelD1Ev>
const PROGMEM EZUI_Control_Link Lnk_RTDs_Monitor("RTDs Monitor",&Page_RTDs);
const PROGMEM EZUI_Control_Link Lnk_RTDs_BackLink("Back",&Page_RTDs);

//Page - RTD Status - HLT BP
EZUI_Page Page_RTDs_HLT_BP;
const PROGMEM EZUI_Control_Link Lnk_RTDs_HLT_BP("HLTBP:",&Page_RTDs_HLT_BP);
    2368:	86 e0       	ldi	r24, 0x06	; 6
    236a:	95 e0       	ldi	r25, 0x05	; 5
    236c:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <_ZN17EZUI_Control_LinkD1Ev>
EZUI_Page Page_RTDs;
const PROGMEM EZUI_Control_Link Lnk_RTDs_Monitor("RTDs Monitor",&Page_RTDs);
const PROGMEM EZUI_Control_Link Lnk_RTDs_BackLink("Back",&Page_RTDs);

//Page - RTD Status - HLT BP
EZUI_Page Page_RTDs_HLT_BP;
    2370:	83 e3       	ldi	r24, 0x33	; 51
    2372:	99 e0       	ldi	r25, 0x09	; 9
    2374:	1c d5       	rcall	.+2616   	; 0x2dae <_ZN9EZUI_PageD1Ev>
	{ 0,  3, &Lnk_Back_MainMenu} };*/
		
//Page - RTD Status - All
EZUI_Page Page_RTDs;
const PROGMEM EZUI_Control_Link Lnk_RTDs_Monitor("RTDs Monitor",&Page_RTDs);
const PROGMEM EZUI_Control_Link Lnk_RTDs_BackLink("Back",&Page_RTDs);
    2376:	82 e1       	ldi	r24, 0x12	; 18
    2378:	95 e0       	ldi	r25, 0x05	; 5
    237a:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <_ZN17EZUI_Control_LinkD1Ev>
	{ 16, 1, &Lbl_Pump2Volt},
	{ 0,  3, &Lnk_Back_MainMenu} };*/
		
//Page - RTD Status - All
EZUI_Page Page_RTDs;
const PROGMEM EZUI_Control_Link Lnk_RTDs_Monitor("RTDs Monitor",&Page_RTDs);
    237e:	8e e1       	ldi	r24, 0x1E	; 30
    2380:	95 e0       	ldi	r25, 0x05	; 5
    2382:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <_ZN17EZUI_Control_LinkD1Ev>
	{ 14, 1, &Lbl_Pump2Voltlbl},
	{ 16, 1, &Lbl_Pump2Volt},
	{ 0,  3, &Lnk_Back_MainMenu} };*/
		
//Page - RTD Status - All
EZUI_Page Page_RTDs;
    2386:	89 e3       	ldi	r24, 0x39	; 57
    2388:	99 e0       	ldi	r25, 0x09	; 9
    238a:	11 d5       	rcall	.+2594   	; 0x2dae <_ZN9EZUI_PageD1Ev>

//Menu - Alarm Test
EZUI_Menu Menu_AlarmTest;
const PROGMEM EZUI_Control_Link Lnk_MenuAlarmTest("Alarm Test",&Menu_AlarmTest);
const PROGMEM EZUI_Control_ToggleOption Tgl_TimerAlarmDIO("Timer Alarm",&RC1_OUT1);
const PROGMEM EZUI_Control_ToggleOption Tgl_TempAlarmDIO("Temp Alarm",&RC1_OUT2);
    238c:	8a e2       	ldi	r24, 0x2A	; 42
    238e:	95 e0       	ldi	r25, 0x05	; 5
    2390:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <_ZN25EZUI_Control_ToggleOptionD1Ev>
const PROGMEM EZUI_Control_Link Lnk_Back_MainMenu("Back",&Menu_Main);

//Menu - Alarm Test
EZUI_Menu Menu_AlarmTest;
const PROGMEM EZUI_Control_Link Lnk_MenuAlarmTest("Alarm Test",&Menu_AlarmTest);
const PROGMEM EZUI_Control_ToggleOption Tgl_TimerAlarmDIO("Timer Alarm",&RC1_OUT1);
    2394:	81 e4       	ldi	r24, 0x41	; 65
    2396:	95 e0       	ldi	r25, 0x05	; 5
    2398:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <_ZN25EZUI_Control_ToggleOptionD1Ev>
//Controls
const PROGMEM EZUI_Control_Link Lnk_Back_MainMenu("Back",&Menu_Main);

//Menu - Alarm Test
EZUI_Menu Menu_AlarmTest;
const PROGMEM EZUI_Control_Link Lnk_MenuAlarmTest("Alarm Test",&Menu_AlarmTest);
    239c:	88 e5       	ldi	r24, 0x58	; 88
    239e:	95 e0       	ldi	r25, 0x05	; 5
    23a0:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <_ZN17EZUI_Control_LinkD1Ev>
***************************************/
//Controls
const PROGMEM EZUI_Control_Link Lnk_Back_MainMenu("Back",&Menu_Main);

//Menu - Alarm Test
EZUI_Menu Menu_AlarmTest;
    23a4:	8f e3       	ldi	r24, 0x3F	; 63
    23a6:	99 e0       	ldi	r25, 0x09	; 9
    23a8:	0f d1       	rcall	.+542    	; 0x25c8 <_ZN9EZUI_MenuD1Ev>

/***************************************
 Alarm Test Menu
***************************************/
//Controls
const PROGMEM EZUI_Control_Link Lnk_Back_MainMenu("Back",&Menu_Main);
    23aa:	84 e6       	ldi	r24, 0x64	; 100
    23ac:	95 e0       	ldi	r25, 0x05	; 5
    23ae:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <_ZN17EZUI_Control_LinkD1Ev>
EZUI *UI_MAIN = new EZUI();

/***************************************
 Main Menu
***************************************/
EZUI_Menu Menu_Main;
    23b2:	81 e6       	ldi	r24, 0x61	; 97
    23b4:	99 e0       	ldi	r25, 0x09	; 9
    23b6:	08 c1       	rjmp	.+528    	; 0x25c8 <_ZN9EZUI_MenuD1Ev>
    23b8:	08 95       	ret

000023ba <_Z11UI_MLT_initv>:

#include "UI_MLT.h"

EZUI *UI_MLT = new EZUI();

void UI_MLT_init(){
    23ba:	cf 93       	push	r28
    23bc:	df 93       	push	r29
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.print("Initializing MLT UI...");
    23be:	69 e5       	ldi	r22, 0x59	; 89
    23c0:	73 e0       	ldi	r23, 0x03	; 3
    23c2:	85 e6       	ldi	r24, 0x65	; 101
    23c4:	9a e0       	ldi	r25, 0x0A	; 10
    23c6:	0e 94 ec 25 	call	0x4bd8	; 0x4bd8 <_ZN5Print5printEPKc>
	#endif
	
	/***************************************
	  Setup + Initialization
	***************************************/
	UI_MLT->attatchEncoder(&MLT_ENC);
    23ca:	60 e3       	ldi	r22, 0x30	; 48
    23cc:	76 e0       	ldi	r23, 0x06	; 6
    23ce:	80 91 85 09 	lds	r24, 0x0985
    23d2:	90 91 86 09 	lds	r25, 0x0986
    23d6:	27 d5       	rcall	.+2638   	; 0x2e26 <_ZN4EZUI14attatchEncoderEP22ClickEncoderWithEvents>
	UI_MLT->attatchLCD(&MLT_LCD);
    23d8:	6c e5       	ldi	r22, 0x5C	; 92
    23da:	76 e0       	ldi	r23, 0x06	; 6
    23dc:	80 91 85 09 	lds	r24, 0x0985
    23e0:	90 91 86 09 	lds	r25, 0x0986
    23e4:	56 d5       	rcall	.+2732   	; 0x2e92 <_ZN4EZUI10attatchLCDEP17LiquidCrystal_I2C>
	
	EZUI_Menu * MainMenu = new EZUI_Menu;
    23e6:	82 e2       	ldi	r24, 0x22	; 34
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <_Znwj>
    23ee:	ec 01       	movw	r28, r24
    23f0:	c2 d0       	rcall	.+388    	; 0x2576 <_ZN9EZUI_MenuC1Ev>
	
	EZUI_Page * TestPage = new EZUI_Page;
    23f2:	86 e0       	ldi	r24, 0x06	; 6
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <_Znwj>
    23fa:	cd d4       	rcall	.+2458   	; 0x2d96 <_ZN9EZUI_PageC1Ev>
	/***************************************
	  MLT Menu
	***************************************/
	//MLTMainMenu->addItem(new EZUI_Control_Link("Monitor",MonitorPage));
	
	UI_MLT->setDisplay(MainMenu);
    23fc:	be 01       	movw	r22, r28
    23fe:	80 91 85 09 	lds	r24, 0x0985
    2402:	90 91 86 09 	lds	r25, 0x0986
    2406:	bc d5       	rcall	.+2936   	; 0x2f80 <_ZN4EZUI10setDisplayEP9EZUI_Menu>
	
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.println("Done.");
    2408:	63 e7       	ldi	r22, 0x73	; 115
    240a:	72 e0       	ldi	r23, 0x02	; 2
    240c:	85 e6       	ldi	r24, 0x65	; 101
    240e:	9a e0       	ldi	r25, 0x0A	; 10
    2410:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <_ZN5Print7printlnEPKc>
	#endif
}
    2414:	df 91       	pop	r29
    2416:	cf 91       	pop	r28
    2418:	08 95       	ret

0000241a <_GLOBAL__sub_I_UI_MLT>:
    241a:	cf 93       	push	r28
    241c:	df 93       	push	r29
 * ----------------------------------------------------------------
 */

#include "UI_MLT.h"

EZUI *UI_MLT = new EZUI();
    241e:	80 e1       	ldi	r24, 0x10	; 16
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <_Znwj>
    2426:	ec 01       	movw	r28, r24
    2428:	f4 d4       	rcall	.+2536   	; 0x2e12 <_ZN4EZUIC1Ev>
    242a:	d0 93 86 09 	sts	0x0986, r29
    242e:	c0 93 85 09 	sts	0x0985, r28
	UI_MLT->setDisplay(MainMenu);
	
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.println("Done.");
	#endif
}
    2432:	df 91       	pop	r29
    2434:	cf 91       	pop	r28
    2436:	08 95       	ret

00002438 <_ZN22ClickEncoderWithEventsD1Ev>:


#include "ClickEncoderWithEvents.h"

// default destructor
ClickEncoderWithEvents::~ClickEncoderWithEvents()
    2438:	08 95       	ret

0000243a <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE4sizeEv>:
template<typename T>
T LinkedList<T>::get(int index){
	ListNode<T> *tmp = getNode(index);

	return (tmp ? tmp->data : T());
}
    243a:	fc 01       	movw	r30, r24
    243c:	82 81       	ldd	r24, Z+2	; 0x02
    243e:	93 81       	ldd	r25, Z+3	; 0x03
    2440:	08 95       	ret

00002442 <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE5clearEv>:
    2442:	cf 93       	push	r28
    2444:	df 93       	push	r29
    2446:	ec 01       	movw	r28, r24
    2448:	07 c0       	rjmp	.+14     	; 0x2458 <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE5clearEv+0x16>
    244a:	e8 81       	ld	r30, Y
    244c:	f9 81       	ldd	r31, Y+1	; 0x01
    244e:	06 84       	ldd	r0, Z+14	; 0x0e
    2450:	f7 85       	ldd	r31, Z+15	; 0x0f
    2452:	e0 2d       	mov	r30, r0
    2454:	ce 01       	movw	r24, r28
    2456:	19 95       	eicall
    2458:	e8 81       	ld	r30, Y
    245a:	f9 81       	ldd	r31, Y+1	; 0x01
    245c:	01 90       	ld	r0, Z+
    245e:	f0 81       	ld	r31, Z
    2460:	e0 2d       	mov	r30, r0
    2462:	ce 01       	movw	r24, r28
    2464:	19 95       	eicall
    2466:	18 16       	cp	r1, r24
    2468:	19 06       	cpc	r1, r25
    246a:	7c f3       	brlt	.-34     	; 0x244a <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE5clearEv+0x8>
    246c:	df 91       	pop	r29
    246e:	cf 91       	pop	r28
    2470:	08 95       	ret

00002472 <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE5shiftEv>:
    2472:	ef 92       	push	r14
    2474:	ff 92       	push	r15
    2476:	1f 93       	push	r17
    2478:	cf 93       	push	r28
    247a:	df 93       	push	r29
    247c:	fc 01       	movw	r30, r24
    247e:	22 81       	ldd	r18, Z+2	; 0x02
    2480:	33 81       	ldd	r19, Z+3	; 0x03
    2482:	12 16       	cp	r1, r18
    2484:	13 06       	cpc	r1, r19
    2486:	f4 f4       	brge	.+60     	; 0x24c4 <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE5shiftEv+0x52>
    2488:	ec 01       	movw	r28, r24
    248a:	22 30       	cpi	r18, 0x02	; 2
    248c:	31 05       	cpc	r19, r1
    248e:	94 f0       	brlt	.+36     	; 0x24b4 <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE5shiftEv+0x42>
    2490:	84 81       	ldd	r24, Z+4	; 0x04
    2492:	95 81       	ldd	r25, Z+5	; 0x05
    2494:	fc 01       	movw	r30, r24
    2496:	e1 80       	ldd	r14, Z+1	; 0x01
    2498:	f2 80       	ldd	r15, Z+2	; 0x02
    249a:	10 81       	ld	r17, Z
    249c:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <_ZdlPv>
    24a0:	fd 82       	std	Y+5, r15	; 0x05
    24a2:	ec 82       	std	Y+4, r14	; 0x04
    24a4:	8a 81       	ldd	r24, Y+2	; 0x02
    24a6:	9b 81       	ldd	r25, Y+3	; 0x03
    24a8:	01 97       	sbiw	r24, 0x01	; 1
    24aa:	9b 83       	std	Y+3, r25	; 0x03
    24ac:	8a 83       	std	Y+2, r24	; 0x02
    24ae:	1c 86       	std	Y+12, r1	; 0x0c
    24b0:	81 2f       	mov	r24, r17
    24b2:	09 c0       	rjmp	.+18     	; 0x24c6 <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE5shiftEv+0x54>
    24b4:	01 90       	ld	r0, Z+
    24b6:	f0 81       	ld	r31, Z
    24b8:	e0 2d       	mov	r30, r0
    24ba:	04 84       	ldd	r0, Z+12	; 0x0c
    24bc:	f5 85       	ldd	r31, Z+13	; 0x0d
    24be:	e0 2d       	mov	r30, r0
    24c0:	19 95       	eicall
    24c2:	01 c0       	rjmp	.+2      	; 0x24c6 <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE5shiftEv+0x54>
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	df 91       	pop	r29
    24c8:	cf 91       	pop	r28
    24ca:	1f 91       	pop	r17
    24cc:	ff 90       	pop	r15
    24ce:	ef 90       	pop	r14
    24d0:	08 95       	ret

000024d2 <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE7unshiftES1_>:
    24d2:	1f 93       	push	r17
    24d4:	cf 93       	push	r28
    24d6:	df 93       	push	r29
    24d8:	ec 01       	movw	r28, r24
    24da:	16 2f       	mov	r17, r22
    24dc:	8a 81       	ldd	r24, Y+2	; 0x02
    24de:	9b 81       	ldd	r25, Y+3	; 0x03
    24e0:	89 2b       	or	r24, r25
    24e2:	41 f4       	brne	.+16     	; 0x24f4 <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE7unshiftES1_+0x22>
    24e4:	e8 81       	ld	r30, Y
    24e6:	f9 81       	ldd	r31, Y+1	; 0x01
    24e8:	04 80       	ldd	r0, Z+4	; 0x04
    24ea:	f5 81       	ldd	r31, Z+5	; 0x05
    24ec:	e0 2d       	mov	r30, r0
    24ee:	ce 01       	movw	r24, r28
    24f0:	19 95       	eicall
    24f2:	16 c0       	rjmp	.+44     	; 0x2520 <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE7unshiftES1_+0x4e>
    24f4:	83 e0       	ldi	r24, 0x03	; 3
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <_Znwj>
    24fc:	fc 01       	movw	r30, r24
    24fe:	10 82       	st	Z, r1
    2500:	12 82       	std	Z+2, r1	; 0x02
    2502:	11 82       	std	Z+1, r1	; 0x01
    2504:	8c 81       	ldd	r24, Y+4	; 0x04
    2506:	9d 81       	ldd	r25, Y+5	; 0x05
    2508:	92 83       	std	Z+2, r25	; 0x02
    250a:	81 83       	std	Z+1, r24	; 0x01
    250c:	10 83       	st	Z, r17
    250e:	fd 83       	std	Y+5, r31	; 0x05
    2510:	ec 83       	std	Y+4, r30	; 0x04
    2512:	8a 81       	ldd	r24, Y+2	; 0x02
    2514:	9b 81       	ldd	r25, Y+3	; 0x03
    2516:	01 96       	adiw	r24, 0x01	; 1
    2518:	9b 83       	std	Y+3, r25	; 0x03
    251a:	8a 83       	std	Y+2, r24	; 0x02
    251c:	1c 86       	std	Y+12, r1	; 0x0c
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	df 91       	pop	r29
    2522:	cf 91       	pop	r28
    2524:	1f 91       	pop	r17
    2526:	08 95       	ret

00002528 <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE3addES1_>:
    2528:	1f 93       	push	r17
    252a:	cf 93       	push	r28
    252c:	df 93       	push	r29
    252e:	ec 01       	movw	r28, r24
    2530:	16 2f       	mov	r17, r22
    2532:	83 e0       	ldi	r24, 0x03	; 3
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <_Znwj>
    253a:	fc 01       	movw	r30, r24
    253c:	12 82       	std	Z+2, r1	; 0x02
    253e:	11 82       	std	Z+1, r1	; 0x01
    2540:	10 83       	st	Z, r17
    2542:	2c 81       	ldd	r18, Y+4	; 0x04
    2544:	3d 81       	ldd	r19, Y+5	; 0x05
    2546:	23 2b       	or	r18, r19
    2548:	39 f0       	breq	.+14     	; 0x2558 <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE3addES1_+0x30>
    254a:	ee 81       	ldd	r30, Y+6	; 0x06
    254c:	ff 81       	ldd	r31, Y+7	; 0x07
    254e:	92 83       	std	Z+2, r25	; 0x02
    2550:	81 83       	std	Z+1, r24	; 0x01
    2552:	9f 83       	std	Y+7, r25	; 0x07
    2554:	8e 83       	std	Y+6, r24	; 0x06
    2556:	04 c0       	rjmp	.+8      	; 0x2560 <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE3addES1_+0x38>
    2558:	9d 83       	std	Y+5, r25	; 0x05
    255a:	8c 83       	std	Y+4, r24	; 0x04
    255c:	9f 83       	std	Y+7, r25	; 0x07
    255e:	8e 83       	std	Y+6, r24	; 0x06
    2560:	8a 81       	ldd	r24, Y+2	; 0x02
    2562:	9b 81       	ldd	r25, Y+3	; 0x03
    2564:	01 96       	adiw	r24, 0x01	; 1
    2566:	9b 83       	std	Y+3, r25	; 0x03
    2568:	8a 83       	std	Y+2, r24	; 0x02
    256a:	1c 86       	std	Y+12, r1	; 0x0c
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	df 91       	pop	r29
    2570:	cf 91       	pop	r28
    2572:	1f 91       	pop	r17
    2574:	08 95       	ret

00002576 <_ZN9EZUI_MenuC1Ev>:
    2576:	fc 01       	movw	r30, r24
    2578:	85 e9       	ldi	r24, 0x95	; 149
    257a:	93 e0       	ldi	r25, 0x03	; 3
    257c:	91 83       	std	Z+1, r25	; 0x01
    257e:	80 83       	st	Z, r24
    2580:	15 82       	std	Z+5, r1	; 0x05
    2582:	14 82       	std	Z+4, r1	; 0x04
    2584:	17 82       	std	Z+7, r1	; 0x07
    2586:	16 82       	std	Z+6, r1	; 0x06
    2588:	13 82       	std	Z+3, r1	; 0x03
    258a:	12 82       	std	Z+2, r1	; 0x02
    258c:	11 86       	std	Z+9, r1	; 0x09
    258e:	10 86       	std	Z+8, r1	; 0x08
    2590:	13 86       	std	Z+11, r1	; 0x0b
    2592:	12 86       	std	Z+10, r1	; 0x0a
    2594:	14 86       	std	Z+12, r1	; 0x0c
    2596:	81 e1       	ldi	r24, 0x11	; 17
    2598:	92 e0       	ldi	r25, 0x02	; 2
    259a:	96 87       	std	Z+14, r25	; 0x0e
    259c:	85 87       	std	Z+13, r24	; 0x0d
    259e:	12 8a       	std	Z+18, r1	; 0x12
    25a0:	11 8a       	std	Z+17, r1	; 0x11
    25a2:	14 8a       	std	Z+20, r1	; 0x14
    25a4:	13 8a       	std	Z+19, r1	; 0x13
    25a6:	10 8a       	std	Z+16, r1	; 0x10
    25a8:	17 86       	std	Z+15, r1	; 0x0f
    25aa:	16 8a       	std	Z+22, r1	; 0x16
    25ac:	15 8a       	std	Z+21, r1	; 0x15
    25ae:	10 8e       	std	Z+24, r1	; 0x18
    25b0:	17 8a       	std	Z+23, r1	; 0x17
    25b2:	11 8e       	std	Z+25, r1	; 0x19
    25b4:	13 8e       	std	Z+27, r1	; 0x1b
    25b6:	12 8e       	std	Z+26, r1	; 0x1a
    25b8:	15 8e       	std	Z+29, r1	; 0x1d
    25ba:	14 8e       	std	Z+28, r1	; 0x1c
    25bc:	17 8e       	std	Z+31, r1	; 0x1f
    25be:	16 8e       	std	Z+30, r1	; 0x1e
    25c0:	81 e0       	ldi	r24, 0x01	; 1
    25c2:	80 a3       	std	Z+32, r24	; 0x20
    25c4:	11 a2       	std	Z+33, r1	; 0x21
    25c6:	08 95       	ret

000025c8 <_ZN9EZUI_MenuD1Ev>:
    25c8:	cf 93       	push	r28
    25ca:	df 93       	push	r29
    25cc:	ec 01       	movw	r28, r24
    25ce:	81 e1       	ldi	r24, 0x11	; 17
    25d0:	92 e0       	ldi	r25, 0x02	; 2
    25d2:	9e 87       	std	Y+14, r25	; 0x0e
    25d4:	8d 87       	std	Y+13, r24	; 0x0d
    25d6:	89 89       	ldd	r24, Y+17	; 0x11
    25d8:	9a 89       	ldd	r25, Y+18	; 0x12
    25da:	00 97       	sbiw	r24, 0x00	; 0
    25dc:	59 f0       	breq	.+22     	; 0x25f4 <_ZN9EZUI_MenuD1Ev+0x2c>
    25de:	fc 01       	movw	r30, r24
    25e0:	22 81       	ldd	r18, Z+2	; 0x02
    25e2:	33 81       	ldd	r19, Z+3	; 0x03
    25e4:	3a 8b       	std	Y+18, r19	; 0x12
    25e6:	29 8b       	std	Y+17, r18	; 0x11
    25e8:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <_ZdlPv>
    25ec:	89 89       	ldd	r24, Y+17	; 0x11
    25ee:	9a 89       	ldd	r25, Y+18	; 0x12
    25f0:	00 97       	sbiw	r24, 0x00	; 0
    25f2:	a9 f7       	brne	.-22     	; 0x25de <_ZN9EZUI_MenuD1Ev+0x16>
    25f4:	85 e9       	ldi	r24, 0x95	; 149
    25f6:	93 e0       	ldi	r25, 0x03	; 3
    25f8:	99 83       	std	Y+1, r25	; 0x01
    25fa:	88 83       	st	Y, r24
    25fc:	8c 81       	ldd	r24, Y+4	; 0x04
    25fe:	9d 81       	ldd	r25, Y+5	; 0x05
    2600:	00 97       	sbiw	r24, 0x00	; 0
    2602:	59 f0       	breq	.+22     	; 0x261a <_ZN9EZUI_MenuD1Ev+0x52>
    2604:	fc 01       	movw	r30, r24
    2606:	21 81       	ldd	r18, Z+1	; 0x01
    2608:	32 81       	ldd	r19, Z+2	; 0x02
    260a:	3d 83       	std	Y+5, r19	; 0x05
    260c:	2c 83       	std	Y+4, r18	; 0x04
    260e:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <_ZdlPv>
    2612:	8c 81       	ldd	r24, Y+4	; 0x04
    2614:	9d 81       	ldd	r25, Y+5	; 0x05
    2616:	00 97       	sbiw	r24, 0x00	; 0
    2618:	a9 f7       	brne	.-22     	; 0x2604 <_ZN9EZUI_MenuD1Ev+0x3c>
    261a:	df 91       	pop	r29
    261c:	cf 91       	pop	r28
    261e:	08 95       	ret

00002620 <_ZN9EZUI_Menu8prevItemEP4EZUI>:
    2620:	ef 92       	push	r14
    2622:	ff 92       	push	r15
    2624:	0f 93       	push	r16
    2626:	1f 93       	push	r17
    2628:	cf 93       	push	r28
    262a:	df 93       	push	r29
    262c:	7c 01       	movw	r14, r24
    262e:	8b 01       	movw	r16, r22
    2630:	fc 01       	movw	r30, r24
    2632:	26 8d       	ldd	r18, Z+30	; 0x1e
    2634:	37 8d       	ldd	r19, Z+31	; 0x1f
    2636:	b9 01       	movw	r22, r18
    2638:	61 50       	subi	r22, 0x01	; 1
    263a:	71 09       	sbc	r23, r1
    263c:	77 8f       	std	Z+31, r23	; 0x1f
    263e:	66 8f       	std	Z+30, r22	; 0x1e
    2640:	77 23       	and	r23, r23
    2642:	2c f4       	brge	.+10     	; 0x264e <_ZN9EZUI_Menu8prevItemEP4EZUI+0x2e>
    2644:	17 8e       	std	Z+31, r1	; 0x1f
    2646:	16 8e       	std	Z+30, r1	; 0x1e
    2648:	60 e0       	ldi	r22, 0x00	; 0
    264a:	70 e0       	ldi	r23, 0x00	; 0
    264c:	0c c0       	rjmp	.+24     	; 0x2666 <_ZN9EZUI_Menu8prevItemEP4EZUI+0x46>
    264e:	16 16       	cp	r1, r22
    2650:	17 06       	cpc	r1, r23
    2652:	4c f4       	brge	.+18     	; 0x2666 <_ZN9EZUI_Menu8prevItemEP4EZUI+0x46>
    2654:	22 50       	subi	r18, 0x02	; 2
    2656:	31 09       	sbc	r19, r1
    2658:	23 70       	andi	r18, 0x03	; 3
    265a:	33 27       	eor	r19, r19
    265c:	23 2b       	or	r18, r19
    265e:	19 f4       	brne	.+6      	; 0x2666 <_ZN9EZUI_Menu8prevItemEP4EZUI+0x46>
    2660:	81 e0       	ldi	r24, 0x01	; 1
    2662:	f7 01       	movw	r30, r14
    2664:	80 a3       	std	Z+32, r24	; 0x20
    2666:	4a e0       	ldi	r20, 0x0A	; 10
    2668:	50 e0       	ldi	r21, 0x00	; 0
    266a:	85 e6       	ldi	r24, 0x65	; 101
    266c:	9a e0       	ldi	r25, 0x0A	; 10
    266e:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <_ZN5Print7printlnEii>
    2672:	c4 e0       	ldi	r28, 0x04	; 4
    2674:	d0 e0       	ldi	r29, 0x00	; 0
    2676:	40 e0       	ldi	r20, 0x00	; 0
    2678:	60 e0       	ldi	r22, 0x00	; 0
    267a:	f8 01       	movw	r30, r16
    267c:	80 85       	ldd	r24, Z+8	; 0x08
    267e:	91 85       	ldd	r25, Z+9	; 0x09
    2680:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <_ZN3LCD9setCursorEhh>
    2684:	61 e7       	ldi	r22, 0x71	; 113
    2686:	74 e0       	ldi	r23, 0x04	; 4
    2688:	f8 01       	movw	r30, r16
    268a:	80 85       	ldd	r24, Z+8	; 0x08
    268c:	91 85       	ldd	r25, Z+9	; 0x09
    268e:	0e 94 ec 25 	call	0x4bd8	; 0x4bd8 <_ZN5Print5printEPKc>
    2692:	21 97       	sbiw	r28, 0x01	; 1
    2694:	81 f7       	brne	.-32     	; 0x2676 <_ZN9EZUI_Menu8prevItemEP4EZUI+0x56>
    2696:	f7 01       	movw	r30, r14
    2698:	46 8d       	ldd	r20, Z+30	; 0x1e
    269a:	57 8d       	ldd	r21, Z+31	; 0x1f
    269c:	43 70       	andi	r20, 0x03	; 3
    269e:	50 78       	andi	r21, 0x80	; 128
    26a0:	55 23       	and	r21, r21
    26a2:	34 f4       	brge	.+12     	; 0x26b0 <_ZN9EZUI_Menu8prevItemEP4EZUI+0x90>
    26a4:	41 50       	subi	r20, 0x01	; 1
    26a6:	51 09       	sbc	r21, r1
    26a8:	4c 6f       	ori	r20, 0xFC	; 252
    26aa:	5f 6f       	ori	r21, 0xFF	; 255
    26ac:	4f 5f       	subi	r20, 0xFF	; 255
    26ae:	5f 4f       	sbci	r21, 0xFF	; 255
    26b0:	60 e0       	ldi	r22, 0x00	; 0
    26b2:	f8 01       	movw	r30, r16
    26b4:	80 85       	ldd	r24, Z+8	; 0x08
    26b6:	91 85       	ldd	r25, Z+9	; 0x09
    26b8:	f7 d7       	rcall	.+4078   	; 0x36a8 <_ZN3LCD9setCursorEhh>
    26ba:	60 e7       	ldi	r22, 0x70	; 112
    26bc:	73 e0       	ldi	r23, 0x03	; 3
    26be:	f8 01       	movw	r30, r16
    26c0:	80 85       	ldd	r24, Z+8	; 0x08
    26c2:	91 85       	ldd	r25, Z+9	; 0x09
    26c4:	0e 94 ec 25 	call	0x4bd8	; 0x4bd8 <_ZN5Print5printEPKc>
    26c8:	df 91       	pop	r29
    26ca:	cf 91       	pop	r28
    26cc:	1f 91       	pop	r17
    26ce:	0f 91       	pop	r16
    26d0:	ff 90       	pop	r15
    26d2:	ef 90       	pop	r14
    26d4:	08 95       	ret

000026d6 <_ZN9EZUI_Menu8nextItemEP4EZUI>:
    26d6:	ef 92       	push	r14
    26d8:	ff 92       	push	r15
    26da:	0f 93       	push	r16
    26dc:	1f 93       	push	r17
    26de:	cf 93       	push	r28
    26e0:	df 93       	push	r29
    26e2:	7c 01       	movw	r14, r24
    26e4:	8b 01       	movw	r16, r22
    26e6:	fc 01       	movw	r30, r24
    26e8:	86 8d       	ldd	r24, Z+30	; 0x1e
    26ea:	97 8d       	ldd	r25, Z+31	; 0x1f
    26ec:	01 96       	adiw	r24, 0x01	; 1
    26ee:	97 8f       	std	Z+31, r25	; 0x1f
    26f0:	86 8f       	std	Z+30, r24	; 0x1e
    26f2:	27 85       	ldd	r18, Z+15	; 0x0f
    26f4:	30 89       	ldd	r19, Z+16	; 0x10
    26f6:	82 17       	cp	r24, r18
    26f8:	93 07       	cpc	r25, r19
    26fa:	24 f0       	brlt	.+8      	; 0x2704 <_ZN9EZUI_Menu8nextItemEP4EZUI+0x2e>
    26fc:	21 50       	subi	r18, 0x01	; 1
    26fe:	31 09       	sbc	r19, r1
    2700:	37 8f       	std	Z+31, r19	; 0x1f
    2702:	26 8f       	std	Z+30, r18	; 0x1e
    2704:	f7 01       	movw	r30, r14
    2706:	66 8d       	ldd	r22, Z+30	; 0x1e
    2708:	77 8d       	ldd	r23, Z+31	; 0x1f
    270a:	62 30       	cpi	r22, 0x02	; 2
    270c:	71 05       	cpc	r23, r1
    270e:	7c f0       	brlt	.+30     	; 0x272e <_ZN9EZUI_Menu8nextItemEP4EZUI+0x58>
    2710:	cb 01       	movw	r24, r22
    2712:	01 97       	sbiw	r24, 0x01	; 1
    2714:	83 70       	andi	r24, 0x03	; 3
    2716:	90 78       	andi	r25, 0x80	; 128
    2718:	99 23       	and	r25, r25
    271a:	24 f4       	brge	.+8      	; 0x2724 <_ZN9EZUI_Menu8nextItemEP4EZUI+0x4e>
    271c:	01 97       	sbiw	r24, 0x01	; 1
    271e:	8c 6f       	ori	r24, 0xFC	; 252
    2720:	9f 6f       	ori	r25, 0xFF	; 255
    2722:	01 96       	adiw	r24, 0x01	; 1
    2724:	01 97       	sbiw	r24, 0x01	; 1
    2726:	19 f4       	brne	.+6      	; 0x272e <_ZN9EZUI_Menu8nextItemEP4EZUI+0x58>
    2728:	81 e0       	ldi	r24, 0x01	; 1
    272a:	f7 01       	movw	r30, r14
    272c:	80 a3       	std	Z+32, r24	; 0x20
    272e:	4a e0       	ldi	r20, 0x0A	; 10
    2730:	50 e0       	ldi	r21, 0x00	; 0
    2732:	85 e6       	ldi	r24, 0x65	; 101
    2734:	9a e0       	ldi	r25, 0x0A	; 10
    2736:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <_ZN5Print7printlnEii>
    273a:	c4 e0       	ldi	r28, 0x04	; 4
    273c:	d0 e0       	ldi	r29, 0x00	; 0
    273e:	40 e0       	ldi	r20, 0x00	; 0
    2740:	60 e0       	ldi	r22, 0x00	; 0
    2742:	f8 01       	movw	r30, r16
    2744:	80 85       	ldd	r24, Z+8	; 0x08
    2746:	91 85       	ldd	r25, Z+9	; 0x09
    2748:	af d7       	rcall	.+3934   	; 0x36a8 <_ZN3LCD9setCursorEhh>
    274a:	61 e7       	ldi	r22, 0x71	; 113
    274c:	74 e0       	ldi	r23, 0x04	; 4
    274e:	f8 01       	movw	r30, r16
    2750:	80 85       	ldd	r24, Z+8	; 0x08
    2752:	91 85       	ldd	r25, Z+9	; 0x09
    2754:	0e 94 ec 25 	call	0x4bd8	; 0x4bd8 <_ZN5Print5printEPKc>
    2758:	21 97       	sbiw	r28, 0x01	; 1
    275a:	89 f7       	brne	.-30     	; 0x273e <_ZN9EZUI_Menu8nextItemEP4EZUI+0x68>
    275c:	f7 01       	movw	r30, r14
    275e:	46 8d       	ldd	r20, Z+30	; 0x1e
    2760:	57 8d       	ldd	r21, Z+31	; 0x1f
    2762:	43 70       	andi	r20, 0x03	; 3
    2764:	50 78       	andi	r21, 0x80	; 128
    2766:	55 23       	and	r21, r21
    2768:	34 f4       	brge	.+12     	; 0x2776 <_ZN9EZUI_Menu8nextItemEP4EZUI+0xa0>
    276a:	41 50       	subi	r20, 0x01	; 1
    276c:	51 09       	sbc	r21, r1
    276e:	4c 6f       	ori	r20, 0xFC	; 252
    2770:	5f 6f       	ori	r21, 0xFF	; 255
    2772:	4f 5f       	subi	r20, 0xFF	; 255
    2774:	5f 4f       	sbci	r21, 0xFF	; 255
    2776:	60 e0       	ldi	r22, 0x00	; 0
    2778:	f8 01       	movw	r30, r16
    277a:	80 85       	ldd	r24, Z+8	; 0x08
    277c:	91 85       	ldd	r25, Z+9	; 0x09
    277e:	94 d7       	rcall	.+3880   	; 0x36a8 <_ZN3LCD9setCursorEhh>
    2780:	60 e7       	ldi	r22, 0x70	; 112
    2782:	73 e0       	ldi	r23, 0x03	; 3
    2784:	f8 01       	movw	r30, r16
    2786:	80 85       	ldd	r24, Z+8	; 0x08
    2788:	91 85       	ldd	r25, Z+9	; 0x09
    278a:	0e 94 ec 25 	call	0x4bd8	; 0x4bd8 <_ZN5Print5printEPKc>
    278e:	df 91       	pop	r29
    2790:	cf 91       	pop	r28
    2792:	1f 91       	pop	r17
    2794:	0f 91       	pop	r16
    2796:	ff 90       	pop	r15
    2798:	ef 90       	pop	r14
    279a:	08 95       	ret

0000279c <_ZN9EZUI_Menu10SelectItemEP4EZUIPK17EZUI_Control_Link>:
    279c:	cf 93       	push	r28
    279e:	df 93       	push	r29
    27a0:	eb 01       	movw	r28, r22
    27a2:	41 15       	cp	r20, r1
    27a4:	51 05       	cpc	r21, r1
    27a6:	c1 f4       	brne	.+48     	; 0x27d8 <_ZN9EZUI_Menu10SelectItemEP4EZUIPK17EZUI_Control_Link+0x3c>
    27a8:	88 85       	ldd	r24, Y+8	; 0x08
    27aa:	99 85       	ldd	r25, Y+9	; 0x09
    27ac:	76 d7       	rcall	.+3820   	; 0x369a <_ZN3LCD5clearEv>
    27ae:	62 e7       	ldi	r22, 0x72	; 114
    27b0:	73 e0       	ldi	r23, 0x03	; 3
    27b2:	88 85       	ldd	r24, Y+8	; 0x08
    27b4:	99 85       	ldd	r25, Y+9	; 0x09
    27b6:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <_ZN5Print7printlnEPKc>
    27ba:	69 e7       	ldi	r22, 0x79	; 121
    27bc:	73 e0       	ldi	r23, 0x03	; 3
    27be:	88 85       	ldd	r24, Y+8	; 0x08
    27c0:	99 85       	ldd	r25, Y+9	; 0x09
    27c2:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <_ZN5Print7printlnEPKc>
    27c6:	68 eb       	ldi	r22, 0xB8	; 184
    27c8:	7b e0       	ldi	r23, 0x0B	; 11
    27ca:	80 e0       	ldi	r24, 0x00	; 0
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	0e 94 b4 2a 	call	0x5568	; 0x5568 <delay>
    27d2:	ce 01       	movw	r24, r28
    27d4:	87 d3       	rcall	.+1806   	; 0x2ee4 <_ZN4EZUI7displayEv>
    27d6:	08 c0       	rjmp	.+16     	; 0x27e8 <_ZN9EZUI_Menu10SelectItemEP4EZUIPK17EZUI_Control_Link+0x4c>
    27d8:	da 01       	movw	r26, r20
    27da:	ed 91       	ld	r30, X+
    27dc:	fc 91       	ld	r31, X
    27de:	02 80       	ldd	r0, Z+2	; 0x02
    27e0:	f3 81       	ldd	r31, Z+3	; 0x03
    27e2:	e0 2d       	mov	r30, r0
    27e4:	ca 01       	movw	r24, r20
    27e6:	19 95       	eicall
    27e8:	df 91       	pop	r29
    27ea:	cf 91       	pop	r28
    27ec:	08 95       	ret

000027ee <_ZN9EZUI_Menu10SelectItemEP4EZUIPK25EZUI_Control_ToggleOption>:
    27ee:	0f 93       	push	r16
    27f0:	1f 93       	push	r17
    27f2:	cf 93       	push	r28
    27f4:	df 93       	push	r29
    27f6:	ec 01       	movw	r28, r24
    27f8:	8b 01       	movw	r16, r22
    27fa:	ca 01       	movw	r24, r20
    27fc:	0e 94 54 09 	call	0x12a8	; 0x12a8 <_ZNK25EZUI_Control_ToggleOption6ToggleEv>
    2800:	c8 01       	movw	r24, r16
    2802:	70 d3       	rcall	.+1760   	; 0x2ee4 <_ZN4EZUI7displayEv>
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	88 a3       	std	Y+32, r24	; 0x20
    2808:	df 91       	pop	r29
    280a:	cf 91       	pop	r28
    280c:	1f 91       	pop	r17
    280e:	0f 91       	pop	r16
    2810:	08 95       	ret

00002812 <_ZN9EZUI_Menu9PrintItemEiiP17LiquidCrystal_I2CPK17EZUI_Control_Link>:
    2812:	0f 93       	push	r16
    2814:	1f 93       	push	r17
    2816:	cf 93       	push	r28
    2818:	df 93       	push	r29
    281a:	01 15       	cp	r16, r1
    281c:	11 05       	cpc	r17, r1
    281e:	49 f0       	breq	.+18     	; 0x2832 <_ZN9EZUI_Menu9PrintItemEiiP17LiquidCrystal_I2CPK17EZUI_Control_Link+0x20>
    2820:	e9 01       	movw	r28, r18
    2822:	c9 01       	movw	r24, r18
    2824:	41 d7       	rcall	.+3714   	; 0x36a8 <_ZN3LCD9setCursorEhh>
    2826:	b8 01       	movw	r22, r16
    2828:	6d 5f       	subi	r22, 0xFD	; 253
    282a:	7f 4f       	sbci	r23, 0xFF	; 255
    282c:	ce 01       	movw	r24, r28
    282e:	0e 94 dd 25 	call	0x4bba	; 0x4bba <_ZN5Print5printERK6String>
    2832:	df 91       	pop	r29
    2834:	cf 91       	pop	r28
    2836:	1f 91       	pop	r17
    2838:	0f 91       	pop	r16
    283a:	08 95       	ret

0000283c <_ZN9EZUI_Menu9PrintItemEiiP17LiquidCrystal_I2CPK25EZUI_Control_ToggleOption>:
    283c:	8f 92       	push	r8
    283e:	9f 92       	push	r9
    2840:	bf 92       	push	r11
    2842:	cf 92       	push	r12
    2844:	df 92       	push	r13
    2846:	ef 92       	push	r14
    2848:	ff 92       	push	r15
    284a:	0f 93       	push	r16
    284c:	1f 93       	push	r17
    284e:	cf 93       	push	r28
    2850:	df 93       	push	r29
    2852:	cd b7       	in	r28, 0x3d	; 61
    2854:	de b7       	in	r29, 0x3e	; 62
    2856:	a3 97       	sbiw	r28, 0x23	; 35
    2858:	0f b6       	in	r0, 0x3f	; 63
    285a:	f8 94       	cli
    285c:	de bf       	out	0x3e, r29	; 62
    285e:	0f be       	out	0x3f, r0	; 63
    2860:	cd bf       	out	0x3d, r28	; 61
    2862:	01 15       	cp	r16, r1
    2864:	11 05       	cpc	r17, r1
    2866:	09 f4       	brne	.+2      	; 0x286a <_ZN9EZUI_Menu9PrintItemEiiP17LiquidCrystal_I2CPK25EZUI_Control_ToggleOption+0x2e>
    2868:	a2 c0       	rjmp	.+324    	; 0x29ae <_ZN9EZUI_Menu9PrintItemEiiP17LiquidCrystal_I2CPK25EZUI_Control_ToggleOption+0x172>
    286a:	d3 2e       	mov	r13, r19
    286c:	c2 2e       	mov	r12, r18
    286e:	b4 2e       	mov	r11, r20
    2870:	96 2e       	mov	r9, r22
    2872:	b8 01       	movw	r22, r16
    2874:	ce 01       	movw	r24, r28
    2876:	01 96       	adiw	r24, 0x01	; 1
    2878:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <_ZN6StringC1ERKS_>
    287c:	f8 01       	movw	r30, r16
    287e:	86 81       	ldd	r24, Z+6	; 0x06
    2880:	8f 83       	std	Y+7, r24	; 0x07
    2882:	b8 01       	movw	r22, r16
    2884:	69 5f       	subi	r22, 0xF9	; 249
    2886:	7f 4f       	sbci	r23, 0xFF	; 255
    2888:	ce 01       	movw	r24, r28
    288a:	08 96       	adiw	r24, 0x08	; 8
    288c:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <_ZN6StringC1ERKS_>
    2890:	b8 01       	movw	r22, r16
    2892:	63 5f       	subi	r22, 0xF3	; 243
    2894:	7f 4f       	sbci	r23, 0xFF	; 255
    2896:	ce 01       	movw	r24, r28
    2898:	0e 96       	adiw	r24, 0x0e	; 14
    289a:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <_ZN6StringC1ERKS_>
    289e:	f8 01       	movw	r30, r16
    28a0:	83 89       	ldd	r24, Z+19	; 0x13
    28a2:	94 89       	ldd	r25, Z+20	; 0x14
    28a4:	9d 8b       	std	Y+21, r25	; 0x15
    28a6:	8c 8b       	std	Y+20, r24	; 0x14
    28a8:	85 89       	ldd	r24, Z+21	; 0x15
    28aa:	96 89       	ldd	r25, Z+22	; 0x16
    28ac:	9f 8b       	std	Y+23, r25	; 0x17
    28ae:	8e 8b       	std	Y+22, r24	; 0x16
    28b0:	fc 2c       	mov	r15, r12
    28b2:	ed 2c       	mov	r14, r13
    28b4:	4b 2d       	mov	r20, r11
    28b6:	69 2d       	mov	r22, r9
    28b8:	8c 2d       	mov	r24, r12
    28ba:	9d 2d       	mov	r25, r13
    28bc:	f5 d6       	rcall	.+3562   	; 0x36a8 <_ZN3LCD9setCursorEhh>
    28be:	be 01       	movw	r22, r28
    28c0:	6f 5f       	subi	r22, 0xFF	; 255
    28c2:	7f 4f       	sbci	r23, 0xFF	; 255
    28c4:	8c 2d       	mov	r24, r12
    28c6:	9d 2d       	mov	r25, r13
    28c8:	0e 94 dd 25 	call	0x4bba	; 0x4bba <_ZN5Print5printERK6String>
    28cc:	be 01       	movw	r22, r28
    28ce:	6f 5f       	subi	r22, 0xFF	; 255
    28d0:	7f 4f       	sbci	r23, 0xFF	; 255
    28d2:	ce 01       	movw	r24, r28
    28d4:	4e 96       	adiw	r24, 0x1e	; 30
    28d6:	0e 94 00 09 	call	0x1200	; 0x1200 <_ZN25EZUI_Control_ToggleOption9TrueLabelEv>
    28da:	8a a0       	ldd	r8, Y+34	; 0x22
    28dc:	9b a0       	ldd	r9, Y+35	; 0x23
    28de:	be 01       	movw	r22, r28
    28e0:	6f 5f       	subi	r22, 0xFF	; 255
    28e2:	7f 4f       	sbci	r23, 0xFF	; 255
    28e4:	ce 01       	movw	r24, r28
    28e6:	48 96       	adiw	r24, 0x18	; 24
    28e8:	0e 94 1d 09 	call	0x123a	; 0x123a <_ZN25EZUI_Control_ToggleOption10FalseLabelEv>
    28ec:	8c 8d       	ldd	r24, Y+28	; 0x1c
    28ee:	9d 8d       	ldd	r25, Y+29	; 0x1d
    28f0:	88 15       	cp	r24, r8
    28f2:	99 05       	cpc	r25, r9
    28f4:	f4 f4       	brge	.+60     	; 0x2932 <_ZN9EZUI_Menu9PrintItemEiiP17LiquidCrystal_I2CPK25EZUI_Control_ToggleOption+0xf6>
    28f6:	03 e1       	ldi	r16, 0x13	; 19
    28f8:	10 e0       	ldi	r17, 0x00	; 0
    28fa:	08 19       	sub	r16, r8
    28fc:	19 09       	sbc	r17, r9
    28fe:	90 2e       	mov	r9, r16
    2900:	4b 2d       	mov	r20, r11
    2902:	60 2f       	mov	r22, r16
    2904:	8c 2d       	mov	r24, r12
    2906:	9d 2d       	mov	r25, r13
    2908:	cf d6       	rcall	.+3486   	; 0x36a8 <_ZN3LCD9setCursorEhh>
    290a:	05 31       	cpi	r16, 0x15	; 21
    290c:	11 05       	cpc	r17, r1
    290e:	5c f4       	brge	.+22     	; 0x2926 <_ZN9EZUI_Menu9PrintItemEiiP17LiquidCrystal_I2CPK25EZUI_Control_ToggleOption+0xea>
    2910:	61 e7       	ldi	r22, 0x71	; 113
    2912:	74 e0       	ldi	r23, 0x04	; 4
    2914:	8f 2d       	mov	r24, r15
    2916:	9e 2d       	mov	r25, r14
    2918:	0e 94 ec 25 	call	0x4bd8	; 0x4bd8 <_ZN5Print5printEPKc>
    291c:	0f 5f       	subi	r16, 0xFF	; 255
    291e:	1f 4f       	sbci	r17, 0xFF	; 255
    2920:	05 31       	cpi	r16, 0x15	; 21
    2922:	11 05       	cpc	r17, r1
    2924:	a9 f7       	brne	.-22     	; 0x2910 <_ZN9EZUI_Menu9PrintItemEiiP17LiquidCrystal_I2CPK25EZUI_Control_ToggleOption+0xd4>
    2926:	4b 2d       	mov	r20, r11
    2928:	69 2d       	mov	r22, r9
    292a:	8c 2d       	mov	r24, r12
    292c:	9d 2d       	mov	r25, r13
    292e:	bc d6       	rcall	.+3448   	; 0x36a8 <_ZN3LCD9setCursorEhh>
    2930:	1d c0       	rjmp	.+58     	; 0x296c <_ZN9EZUI_Menu9PrintItemEiiP17LiquidCrystal_I2CPK25EZUI_Control_ToggleOption+0x130>
    2932:	03 e1       	ldi	r16, 0x13	; 19
    2934:	10 e0       	ldi	r17, 0x00	; 0
    2936:	08 1b       	sub	r16, r24
    2938:	19 0b       	sbc	r17, r25
    293a:	90 2e       	mov	r9, r16
    293c:	4b 2d       	mov	r20, r11
    293e:	60 2f       	mov	r22, r16
    2940:	8c 2d       	mov	r24, r12
    2942:	9d 2d       	mov	r25, r13
    2944:	b1 d6       	rcall	.+3426   	; 0x36a8 <_ZN3LCD9setCursorEhh>
    2946:	05 31       	cpi	r16, 0x15	; 21
    2948:	11 05       	cpc	r17, r1
    294a:	5c f4       	brge	.+22     	; 0x2962 <_ZN9EZUI_Menu9PrintItemEiiP17LiquidCrystal_I2CPK25EZUI_Control_ToggleOption+0x126>
    294c:	61 e7       	ldi	r22, 0x71	; 113
    294e:	74 e0       	ldi	r23, 0x04	; 4
    2950:	8f 2d       	mov	r24, r15
    2952:	9e 2d       	mov	r25, r14
    2954:	0e 94 ec 25 	call	0x4bd8	; 0x4bd8 <_ZN5Print5printEPKc>
    2958:	0f 5f       	subi	r16, 0xFF	; 255
    295a:	1f 4f       	sbci	r17, 0xFF	; 255
    295c:	05 31       	cpi	r16, 0x15	; 21
    295e:	11 05       	cpc	r17, r1
    2960:	a9 f7       	brne	.-22     	; 0x294c <_ZN9EZUI_Menu9PrintItemEiiP17LiquidCrystal_I2CPK25EZUI_Control_ToggleOption+0x110>
    2962:	4b 2d       	mov	r20, r11
    2964:	69 2d       	mov	r22, r9
    2966:	8c 2d       	mov	r24, r12
    2968:	9d 2d       	mov	r25, r13
    296a:	9e d6       	rcall	.+3388   	; 0x36a8 <_ZN3LCD9setCursorEhh>
    296c:	ce 01       	movw	r24, r28
    296e:	01 96       	adiw	r24, 0x01	; 1
    2970:	0e 94 3a 09 	call	0x1274	; 0x1274 <_ZN25EZUI_Control_ToggleOption5ValueEv>
    2974:	01 97       	sbiw	r24, 0x01	; 1
    2976:	41 f4       	brne	.+16     	; 0x2988 <_ZN9EZUI_Menu9PrintItemEiiP17LiquidCrystal_I2CPK25EZUI_Control_ToggleOption+0x14c>
    2978:	be 01       	movw	r22, r28
    297a:	62 5e       	subi	r22, 0xE2	; 226
    297c:	7f 4f       	sbci	r23, 0xFF	; 255
    297e:	8c 2d       	mov	r24, r12
    2980:	9d 2d       	mov	r25, r13
    2982:	0e 94 dd 25 	call	0x4bba	; 0x4bba <_ZN5Print5printERK6String>
    2986:	07 c0       	rjmp	.+14     	; 0x2996 <_ZN9EZUI_Menu9PrintItemEiiP17LiquidCrystal_I2CPK25EZUI_Control_ToggleOption+0x15a>
    2988:	be 01       	movw	r22, r28
    298a:	68 5e       	subi	r22, 0xE8	; 232
    298c:	7f 4f       	sbci	r23, 0xFF	; 255
    298e:	8c 2d       	mov	r24, r12
    2990:	9d 2d       	mov	r25, r13
    2992:	0e 94 dd 25 	call	0x4bba	; 0x4bba <_ZN5Print5printERK6String>
    2996:	ce 01       	movw	r24, r28
    2998:	48 96       	adiw	r24, 0x18	; 24
    299a:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
    299e:	ce 01       	movw	r24, r28
    29a0:	4e 96       	adiw	r24, 0x1e	; 30
    29a2:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN6StringD1Ev>
    29a6:	ce 01       	movw	r24, r28
    29a8:	01 96       	adiw	r24, 0x01	; 1
    29aa:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <_ZN25EZUI_Control_ToggleOptionD1Ev>
    29ae:	a3 96       	adiw	r28, 0x23	; 35
    29b0:	0f b6       	in	r0, 0x3f	; 63
    29b2:	f8 94       	cli
    29b4:	de bf       	out	0x3e, r29	; 62
    29b6:	0f be       	out	0x3f, r0	; 63
    29b8:	cd bf       	out	0x3d, r28	; 61
    29ba:	df 91       	pop	r29
    29bc:	cf 91       	pop	r28
    29be:	1f 91       	pop	r17
    29c0:	0f 91       	pop	r16
    29c2:	ff 90       	pop	r15
    29c4:	ef 90       	pop	r14
    29c6:	df 90       	pop	r13
    29c8:	cf 90       	pop	r12
    29ca:	bf 90       	pop	r11
    29cc:	9f 90       	pop	r9
    29ce:	8f 90       	pop	r8
    29d0:	08 95       	ret

000029d2 <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE7getNodeEi>:
    29d2:	dc 01       	movw	r26, r24
    29d4:	14 96       	adiw	r26, 0x04	; 4
    29d6:	ed 91       	ld	r30, X+
    29d8:	fc 91       	ld	r31, X
    29da:	15 97       	sbiw	r26, 0x05	; 5
    29dc:	1c 96       	adiw	r26, 0x0c	; 12
    29de:	8c 91       	ld	r24, X
    29e0:	1c 97       	sbiw	r26, 0x0c	; 12
    29e2:	88 23       	and	r24, r24
    29e4:	61 f0       	breq	.+24     	; 0x29fe <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE7getNodeEi+0x2c>
    29e6:	1a 96       	adiw	r26, 0x0a	; 10
    29e8:	2d 91       	ld	r18, X+
    29ea:	3c 91       	ld	r19, X
    29ec:	1b 97       	sbiw	r26, 0x0b	; 11
    29ee:	62 17       	cp	r22, r18
    29f0:	73 07       	cpc	r23, r19
    29f2:	44 f0       	brlt	.+16     	; 0x2a04 <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE7getNodeEi+0x32>
    29f4:	18 96       	adiw	r26, 0x08	; 8
    29f6:	ed 91       	ld	r30, X+
    29f8:	fc 91       	ld	r31, X
    29fa:	19 97       	sbiw	r26, 0x09	; 9
    29fc:	05 c0       	rjmp	.+10     	; 0x2a08 <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE7getNodeEi+0x36>
    29fe:	20 e0       	ldi	r18, 0x00	; 0
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	02 c0       	rjmp	.+4      	; 0x2a08 <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE7getNodeEi+0x36>
    2a04:	20 e0       	ldi	r18, 0x00	; 0
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	26 17       	cp	r18, r22
    2a0a:	37 07       	cpc	r19, r23
    2a0c:	64 f4       	brge	.+24     	; 0x2a26 <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE7getNodeEi+0x54>
    2a0e:	30 97       	sbiw	r30, 0x00	; 0
    2a10:	51 f0       	breq	.+20     	; 0x2a26 <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE7getNodeEi+0x54>
    2a12:	01 80       	ldd	r0, Z+1	; 0x01
    2a14:	f2 81       	ldd	r31, Z+2	; 0x02
    2a16:	e0 2d       	mov	r30, r0
    2a18:	2f 5f       	subi	r18, 0xFF	; 255
    2a1a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a1c:	26 17       	cp	r18, r22
    2a1e:	37 07       	cpc	r19, r23
    2a20:	14 f4       	brge	.+4      	; 0x2a26 <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE7getNodeEi+0x54>
    2a22:	30 97       	sbiw	r30, 0x00	; 0
    2a24:	b1 f7       	brne	.-20     	; 0x2a12 <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE7getNodeEi+0x40>
    2a26:	26 17       	cp	r18, r22
    2a28:	37 07       	cpc	r19, r23
    2a2a:	79 f4       	brne	.+30     	; 0x2a4a <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE7getNodeEi+0x78>
    2a2c:	81 e0       	ldi	r24, 0x01	; 1
    2a2e:	1c 96       	adiw	r26, 0x0c	; 12
    2a30:	8c 93       	st	X, r24
    2a32:	1c 97       	sbiw	r26, 0x0c	; 12
    2a34:	1b 96       	adiw	r26, 0x0b	; 11
    2a36:	3c 93       	st	X, r19
    2a38:	2e 93       	st	-X, r18
    2a3a:	1a 97       	sbiw	r26, 0x0a	; 10
    2a3c:	19 96       	adiw	r26, 0x09	; 9
    2a3e:	fc 93       	st	X, r31
    2a40:	ee 93       	st	-X, r30
    2a42:	18 97       	sbiw	r26, 0x08	; 8
    2a44:	8e 2f       	mov	r24, r30
    2a46:	9f 2f       	mov	r25, r31
    2a48:	08 95       	ret
    2a4a:	80 e0       	ldi	r24, 0x00	; 0
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	08 95       	ret

00002a50 <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE3getEi>:
    2a50:	c0 df       	rcall	.-128    	; 0x29d2 <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE7getNodeEi>
    2a52:	00 97       	sbiw	r24, 0x00	; 0
    2a54:	19 f0       	breq	.+6      	; 0x2a5c <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE3getEi+0xc>
    2a56:	fc 01       	movw	r30, r24
    2a58:	80 81       	ld	r24, Z
    2a5a:	08 95       	ret
    2a5c:	80 e0       	ldi	r24, 0x00	; 0
    2a5e:	08 95       	ret

00002a60 <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE3popEv>:
    2a60:	ef 92       	push	r14
    2a62:	ff 92       	push	r15
    2a64:	1f 93       	push	r17
    2a66:	cf 93       	push	r28
    2a68:	df 93       	push	r29
    2a6a:	fc 01       	movw	r30, r24
    2a6c:	62 81       	ldd	r22, Z+2	; 0x02
    2a6e:	73 81       	ldd	r23, Z+3	; 0x03
    2a70:	16 16       	cp	r1, r22
    2a72:	17 06       	cpc	r1, r23
    2a74:	54 f5       	brge	.+84     	; 0x2aca <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE3popEv+0x6a>
    2a76:	ec 01       	movw	r28, r24
    2a78:	14 86       	std	Z+12, r1	; 0x0c
    2a7a:	62 30       	cpi	r22, 0x02	; 2
    2a7c:	71 05       	cpc	r23, r1
    2a7e:	bc f0       	brlt	.+46     	; 0x2aae <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE3popEv+0x4e>
    2a80:	62 50       	subi	r22, 0x02	; 2
    2a82:	71 09       	sbc	r23, r1
    2a84:	a6 df       	rcall	.-180    	; 0x29d2 <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE7getNodeEi>
    2a86:	7c 01       	movw	r14, r24
    2a88:	fc 01       	movw	r30, r24
    2a8a:	81 81       	ldd	r24, Z+1	; 0x01
    2a8c:	92 81       	ldd	r25, Z+2	; 0x02
    2a8e:	fc 01       	movw	r30, r24
    2a90:	10 81       	ld	r17, Z
    2a92:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <_ZdlPv>
    2a96:	f7 01       	movw	r30, r14
    2a98:	12 82       	std	Z+2, r1	; 0x02
    2a9a:	11 82       	std	Z+1, r1	; 0x01
    2a9c:	ff 82       	std	Y+7, r15	; 0x07
    2a9e:	ee 82       	std	Y+6, r14	; 0x06
    2aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa2:	9b 81       	ldd	r25, Y+3	; 0x03
    2aa4:	01 97       	sbiw	r24, 0x01	; 1
    2aa6:	9b 83       	std	Y+3, r25	; 0x03
    2aa8:	8a 83       	std	Y+2, r24	; 0x02
    2aaa:	81 2f       	mov	r24, r17
    2aac:	0f c0       	rjmp	.+30     	; 0x2acc <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE3popEv+0x6c>
    2aae:	84 81       	ldd	r24, Z+4	; 0x04
    2ab0:	95 81       	ldd	r25, Z+5	; 0x05
    2ab2:	fc 01       	movw	r30, r24
    2ab4:	10 81       	ld	r17, Z
    2ab6:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <_ZdlPv>
    2aba:	1d 82       	std	Y+5, r1	; 0x05
    2abc:	1c 82       	std	Y+4, r1	; 0x04
    2abe:	1f 82       	std	Y+7, r1	; 0x07
    2ac0:	1e 82       	std	Y+6, r1	; 0x06
    2ac2:	1b 82       	std	Y+3, r1	; 0x03
    2ac4:	1a 82       	std	Y+2, r1	; 0x02
    2ac6:	81 2f       	mov	r24, r17
    2ac8:	01 c0       	rjmp	.+2      	; 0x2acc <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE3popEv+0x6c>
    2aca:	80 e0       	ldi	r24, 0x00	; 0
    2acc:	df 91       	pop	r29
    2ace:	cf 91       	pop	r28
    2ad0:	1f 91       	pop	r17
    2ad2:	ff 90       	pop	r15
    2ad4:	ef 90       	pop	r14
    2ad6:	08 95       	ret

00002ad8 <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE6removeEi>:
    2ad8:	1f 93       	push	r17
    2ada:	cf 93       	push	r28
    2adc:	df 93       	push	r29
    2ade:	77 23       	and	r23, r23
    2ae0:	cc f1       	brlt	.+114    	; 0x2b54 <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE6removeEi+0x7c>
    2ae2:	dc 01       	movw	r26, r24
    2ae4:	12 96       	adiw	r26, 0x02	; 2
    2ae6:	2d 91       	ld	r18, X+
    2ae8:	3c 91       	ld	r19, X
    2aea:	13 97       	sbiw	r26, 0x03	; 3
    2aec:	62 17       	cp	r22, r18
    2aee:	73 07       	cpc	r23, r19
    2af0:	9c f5       	brge	.+102    	; 0x2b58 <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE6removeEi+0x80>
    2af2:	ec 01       	movw	r28, r24
    2af4:	61 15       	cp	r22, r1
    2af6:	71 05       	cpc	r23, r1
    2af8:	39 f4       	brne	.+14     	; 0x2b08 <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE6removeEi+0x30>
    2afa:	e8 81       	ld	r30, Y
    2afc:	f9 81       	ldd	r31, Y+1	; 0x01
    2afe:	06 84       	ldd	r0, Z+14	; 0x0e
    2b00:	f7 85       	ldd	r31, Z+15	; 0x0f
    2b02:	e0 2d       	mov	r30, r0
    2b04:	19 95       	eicall
    2b06:	29 c0       	rjmp	.+82     	; 0x2b5a <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE6removeEi+0x82>
    2b08:	21 50       	subi	r18, 0x01	; 1
    2b0a:	31 09       	sbc	r19, r1
    2b0c:	26 17       	cp	r18, r22
    2b0e:	37 07       	cpc	r19, r23
    2b10:	39 f4       	brne	.+14     	; 0x2b20 <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE6removeEi+0x48>
    2b12:	e8 81       	ld	r30, Y
    2b14:	f9 81       	ldd	r31, Y+1	; 0x01
    2b16:	04 84       	ldd	r0, Z+12	; 0x0c
    2b18:	f5 85       	ldd	r31, Z+13	; 0x0d
    2b1a:	e0 2d       	mov	r30, r0
    2b1c:	19 95       	eicall
    2b1e:	1d c0       	rjmp	.+58     	; 0x2b5a <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE6removeEi+0x82>
    2b20:	61 50       	subi	r22, 0x01	; 1
    2b22:	71 09       	sbc	r23, r1
    2b24:	56 df       	rcall	.-340    	; 0x29d2 <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE7getNodeEi>
    2b26:	dc 01       	movw	r26, r24
    2b28:	11 96       	adiw	r26, 0x01	; 1
    2b2a:	ed 91       	ld	r30, X+
    2b2c:	fc 91       	ld	r31, X
    2b2e:	12 97       	sbiw	r26, 0x02	; 2
    2b30:	10 81       	ld	r17, Z
    2b32:	21 81       	ldd	r18, Z+1	; 0x01
    2b34:	32 81       	ldd	r19, Z+2	; 0x02
    2b36:	12 96       	adiw	r26, 0x02	; 2
    2b38:	3c 93       	st	X, r19
    2b3a:	2e 93       	st	-X, r18
    2b3c:	11 97       	sbiw	r26, 0x01	; 1
    2b3e:	cf 01       	movw	r24, r30
    2b40:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <_ZdlPv>
    2b44:	8a 81       	ldd	r24, Y+2	; 0x02
    2b46:	9b 81       	ldd	r25, Y+3	; 0x03
    2b48:	01 97       	sbiw	r24, 0x01	; 1
    2b4a:	9b 83       	std	Y+3, r25	; 0x03
    2b4c:	8a 83       	std	Y+2, r24	; 0x02
    2b4e:	1c 86       	std	Y+12, r1	; 0x0c
    2b50:	81 2f       	mov	r24, r17
    2b52:	03 c0       	rjmp	.+6      	; 0x2b5a <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE6removeEi+0x82>
    2b54:	80 e0       	ldi	r24, 0x00	; 0
    2b56:	01 c0       	rjmp	.+2      	; 0x2b5a <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE6removeEi+0x82>
    2b58:	80 e0       	ldi	r24, 0x00	; 0
    2b5a:	df 91       	pop	r29
    2b5c:	cf 91       	pop	r28
    2b5e:	1f 91       	pop	r17
    2b60:	08 95       	ret

00002b62 <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE3setEiS1_>:
    2b62:	cf 93       	push	r28
    2b64:	77 23       	and	r23, r23
    2b66:	64 f0       	brlt	.+24     	; 0x2b80 <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE3setEiS1_+0x1e>
    2b68:	fc 01       	movw	r30, r24
    2b6a:	22 81       	ldd	r18, Z+2	; 0x02
    2b6c:	33 81       	ldd	r19, Z+3	; 0x03
    2b6e:	62 17       	cp	r22, r18
    2b70:	73 07       	cpc	r23, r19
    2b72:	44 f4       	brge	.+16     	; 0x2b84 <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE3setEiS1_+0x22>
    2b74:	c4 2f       	mov	r28, r20
    2b76:	2d df       	rcall	.-422    	; 0x29d2 <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE7getNodeEi>
    2b78:	fc 01       	movw	r30, r24
    2b7a:	c0 83       	st	Z, r28
    2b7c:	81 e0       	ldi	r24, 0x01	; 1
    2b7e:	03 c0       	rjmp	.+6      	; 0x2b86 <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE3setEiS1_+0x24>
    2b80:	80 e0       	ldi	r24, 0x00	; 0
    2b82:	01 c0       	rjmp	.+2      	; 0x2b86 <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE3setEiS1_+0x24>
    2b84:	80 e0       	ldi	r24, 0x00	; 0
    2b86:	cf 91       	pop	r28
    2b88:	08 95       	ret

00002b8a <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE3addEiS1_>:
    2b8a:	df 92       	push	r13
    2b8c:	ef 92       	push	r14
    2b8e:	ff 92       	push	r15
    2b90:	0f 93       	push	r16
    2b92:	1f 93       	push	r17
    2b94:	cf 93       	push	r28
    2b96:	df 93       	push	r29
    2b98:	ec 01       	movw	r28, r24
    2b9a:	8b 01       	movw	r16, r22
    2b9c:	d4 2e       	mov	r13, r20
    2b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ba2:	68 17       	cp	r22, r24
    2ba4:	79 07       	cpc	r23, r25
    2ba6:	4c f0       	brlt	.+18     	; 0x2bba <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE3addEiS1_+0x30>
    2ba8:	e8 81       	ld	r30, Y
    2baa:	f9 81       	ldd	r31, Y+1	; 0x01
    2bac:	04 80       	ldd	r0, Z+4	; 0x04
    2bae:	f5 81       	ldd	r31, Z+5	; 0x05
    2bb0:	e0 2d       	mov	r30, r0
    2bb2:	64 2f       	mov	r22, r20
    2bb4:	ce 01       	movw	r24, r28
    2bb6:	19 95       	eicall
    2bb8:	2b c0       	rjmp	.+86     	; 0x2c10 <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE3addEiS1_+0x86>
    2bba:	67 2b       	or	r22, r23
    2bbc:	49 f4       	brne	.+18     	; 0x2bd0 <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE3addEiS1_+0x46>
    2bbe:	e8 81       	ld	r30, Y
    2bc0:	f9 81       	ldd	r31, Y+1	; 0x01
    2bc2:	06 80       	ldd	r0, Z+6	; 0x06
    2bc4:	f7 81       	ldd	r31, Z+7	; 0x07
    2bc6:	e0 2d       	mov	r30, r0
    2bc8:	64 2f       	mov	r22, r20
    2bca:	ce 01       	movw	r24, r28
    2bcc:	19 95       	eicall
    2bce:	20 c0       	rjmp	.+64     	; 0x2c10 <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE3addEiS1_+0x86>
    2bd0:	83 e0       	ldi	r24, 0x03	; 3
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <_Znwj>
    2bd8:	7c 01       	movw	r14, r24
    2bda:	fc 01       	movw	r30, r24
    2bdc:	10 82       	st	Z, r1
    2bde:	12 82       	std	Z+2, r1	; 0x02
    2be0:	11 82       	std	Z+1, r1	; 0x01
    2be2:	b8 01       	movw	r22, r16
    2be4:	61 50       	subi	r22, 0x01	; 1
    2be6:	71 09       	sbc	r23, r1
    2be8:	ce 01       	movw	r24, r28
    2bea:	f3 de       	rcall	.-538    	; 0x29d2 <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE7getNodeEi>
    2bec:	f7 01       	movw	r30, r14
    2bee:	d0 82       	st	Z, r13
    2bf0:	fc 01       	movw	r30, r24
    2bf2:	21 81       	ldd	r18, Z+1	; 0x01
    2bf4:	32 81       	ldd	r19, Z+2	; 0x02
    2bf6:	f7 01       	movw	r30, r14
    2bf8:	32 83       	std	Z+2, r19	; 0x02
    2bfa:	21 83       	std	Z+1, r18	; 0x01
    2bfc:	fc 01       	movw	r30, r24
    2bfe:	f2 82       	std	Z+2, r15	; 0x02
    2c00:	e1 82       	std	Z+1, r14	; 0x01
    2c02:	8a 81       	ldd	r24, Y+2	; 0x02
    2c04:	9b 81       	ldd	r25, Y+3	; 0x03
    2c06:	01 96       	adiw	r24, 0x01	; 1
    2c08:	9b 83       	std	Y+3, r25	; 0x03
    2c0a:	8a 83       	std	Y+2, r24	; 0x02
    2c0c:	1c 86       	std	Y+12, r1	; 0x0c
    2c0e:	81 e0       	ldi	r24, 0x01	; 1
    2c10:	df 91       	pop	r29
    2c12:	cf 91       	pop	r28
    2c14:	1f 91       	pop	r17
    2c16:	0f 91       	pop	r16
    2c18:	ff 90       	pop	r15
    2c1a:	ef 90       	pop	r14
    2c1c:	df 90       	pop	r13
    2c1e:	08 95       	ret

00002c20 <_ZN9EZUI_Menu7displayEP4EZUI>:
	MenuItemType Type = EZUI_Menu::ToggleOptionControl;
	_Types.add(Type);
	_Items.add((int)Item);	
}

void EZUI_Menu::display(EZUI *UI){
    2c20:	2f 92       	push	r2
    2c22:	3f 92       	push	r3
    2c24:	4f 92       	push	r4
    2c26:	5f 92       	push	r5
    2c28:	6f 92       	push	r6
    2c2a:	7f 92       	push	r7
    2c2c:	8f 92       	push	r8
    2c2e:	9f 92       	push	r9
    2c30:	af 92       	push	r10
    2c32:	bf 92       	push	r11
    2c34:	cf 92       	push	r12
    2c36:	df 92       	push	r13
    2c38:	ef 92       	push	r14
    2c3a:	ff 92       	push	r15
    2c3c:	0f 93       	push	r16
    2c3e:	1f 93       	push	r17
    2c40:	cf 93       	push	r28
    2c42:	df 93       	push	r29
    2c44:	6c 01       	movw	r12, r24
	LiquidCrystal_I2C *LCD = UI->LCD;
    2c46:	fb 01       	movw	r30, r22
    2c48:	70 84       	ldd	r7, Z+8	; 0x08
    2c4a:	61 84       	ldd	r6, Z+9	; 0x09

	//Re-draw all the menu items
	if (refresh==1){
    2c4c:	fc 01       	movw	r30, r24
    2c4e:	80 a1       	ldd	r24, Z+32	; 0x20
    2c50:	88 23       	and	r24, r24
    2c52:	09 f4       	brne	.+2      	; 0x2c56 <_ZN9EZUI_Menu7displayEP4EZUI+0x36>
    2c54:	5f c0       	rjmp	.+190    	; 0x2d14 <_ZN9EZUI_Menu7displayEP4EZUI+0xf4>
		
		//Print the Menu Header
		LCD->clear();
    2c56:	57 2c       	mov	r5, r7
    2c58:	46 2c       	mov	r4, r6
    2c5a:	87 2d       	mov	r24, r7
    2c5c:	96 2d       	mov	r25, r6
    2c5e:	1d d5       	rcall	.+2618   	; 0x369a <_ZN3LCD5clearEv>
		LCD->setCursor(0,0);
    2c60:	40 e0       	ldi	r20, 0x00	; 0
    2c62:	60 e0       	ldi	r22, 0x00	; 0
    2c64:	87 2d       	mov	r24, r7
    2c66:	96 2d       	mov	r25, r6
    2c68:	1f d5       	rcall	.+2622   	; 0x36a8 <_ZN3LCD9setCursorEhh>
		
		//Print each menu item (3 items left on line)
		int firstItemToPrint = (int)(currentItem/3);
    2c6a:	f6 01       	movw	r30, r12
    2c6c:	86 8d       	ldd	r24, Z+30	; 0x1e
    2c6e:	97 8d       	ldd	r25, Z+31	; 0x1f
    2c70:	63 e0       	ldi	r22, 0x03	; 3
    2c72:	70 e0       	ldi	r23, 0x00	; 0
    2c74:	0e 94 45 30 	call	0x608a	; 0x608a <__divmodhi4>
    2c78:	eb 01       	movw	r28, r22
		int ln = 0;
		for(int i=firstItemToPrint; i<min(_Items.size(),firstItemToPrint + 4); i++){
    2c7a:	46 01       	movw	r8, r12
    2c7c:	fd e0       	ldi	r31, 0x0D	; 13
    2c7e:	8f 0e       	add	r8, r31
    2c80:	91 1c       	adc	r9, r1
    2c82:	5b 01       	movw	r10, r22
    2c84:	84 e0       	ldi	r24, 0x04	; 4
    2c86:	a8 0e       	add	r10, r24
    2c88:	b1 1c       	adc	r11, r1
    2c8a:	f6 01       	movw	r30, r12
    2c8c:	27 85       	ldd	r18, Z+15	; 0x0f
    2c8e:	30 89       	ldd	r19, Z+16	; 0x10
    2c90:	c5 01       	movw	r24, r10
    2c92:	2a 15       	cp	r18, r10
    2c94:	3b 05       	cpc	r19, r11
    2c96:	0c f4       	brge	.+2      	; 0x2c9a <_ZN9EZUI_Menu7displayEP4EZUI+0x7a>
    2c98:	c9 01       	movw	r24, r18
    2c9a:	c8 17       	cp	r28, r24
    2c9c:	d9 07       	cpc	r29, r25
    2c9e:	d4 f5       	brge	.+116    	; 0x2d14 <_ZN9EZUI_Menu7displayEP4EZUI+0xf4>
    2ca0:	e1 2c       	mov	r14, r1
    2ca2:	f1 2c       	mov	r15, r1
    2ca4:	2a 2c       	mov	r2, r10
    2ca6:	3b 2c       	mov	r3, r11
			LCD->setCursor(0,ln);
    2ca8:	4e 2d       	mov	r20, r14
    2caa:	60 e0       	ldi	r22, 0x00	; 0
    2cac:	85 2d       	mov	r24, r5
    2cae:	94 2d       	mov	r25, r4
    2cb0:	fb d4       	rcall	.+2550   	; 0x36a8 <_ZN3LCD9setCursorEhh>
			MenuItemType Type = _Types.get(i);
    2cb2:	be 01       	movw	r22, r28
    2cb4:	c6 01       	movw	r24, r12
    2cb6:	cc de       	rcall	.-616    	; 0x2a50 <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE3getEi>
			
			switch (Type) {
    2cb8:	81 30       	cpi	r24, 0x01	; 1
    2cba:	19 f0       	breq	.+6      	; 0x2cc2 <_ZN9EZUI_Menu7displayEP4EZUI+0xa2>
    2cbc:	82 30       	cpi	r24, 0x02	; 2
    2cbe:	71 f0       	breq	.+28     	; 0x2cdc <_ZN9EZUI_Menu7displayEP4EZUI+0xbc>
    2cc0:	19 c0       	rjmp	.+50     	; 0x2cf4 <_ZN9EZUI_Menu7displayEP4EZUI+0xd4>
				case(LinkControl):{
					EZUI_Control_Link const * Item = (EZUI_Control_Link const*)_Items.get(i);
    2cc2:	be 01       	movw	r22, r28
    2cc4:	c4 01       	movw	r24, r8
    2cc6:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <_ZN10LinkedListIiE3getEi>
					EZUI_Menu::PrintItem(1,ln,LCD,Item);
    2cca:	8c 01       	movw	r16, r24
    2ccc:	27 2d       	mov	r18, r7
    2cce:	36 2d       	mov	r19, r6
    2cd0:	a7 01       	movw	r20, r14
    2cd2:	61 e0       	ldi	r22, 0x01	; 1
    2cd4:	70 e0       	ldi	r23, 0x00	; 0
    2cd6:	c6 01       	movw	r24, r12
    2cd8:	9c dd       	rcall	.-1224   	; 0x2812 <_ZN9EZUI_Menu9PrintItemEiiP17LiquidCrystal_I2CPK17EZUI_Control_Link>
				}break;
    2cda:	0c c0       	rjmp	.+24     	; 0x2cf4 <_ZN9EZUI_Menu7displayEP4EZUI+0xd4>
				case(ToggleOptionControl):{
					EZUI_Control_ToggleOption const * Item = (EZUI_Control_ToggleOption const*)_Items.get(i);
    2cdc:	be 01       	movw	r22, r28
    2cde:	c4 01       	movw	r24, r8
    2ce0:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <_ZN10LinkedListIiE3getEi>
					EZUI_Menu::PrintItem(1,ln,LCD,Item);
    2ce4:	8c 01       	movw	r16, r24
    2ce6:	27 2d       	mov	r18, r7
    2ce8:	36 2d       	mov	r19, r6
    2cea:	a7 01       	movw	r20, r14
    2cec:	61 e0       	ldi	r22, 0x01	; 1
    2cee:	70 e0       	ldi	r23, 0x00	; 0
    2cf0:	c6 01       	movw	r24, r12
    2cf2:	a4 dd       	rcall	.-1208   	; 0x283c <_ZN9EZUI_Menu9PrintItemEiiP17LiquidCrystal_I2CPK25EZUI_Control_ToggleOption>
				}break;
			}
			ln++;
    2cf4:	ff ef       	ldi	r31, 0xFF	; 255
    2cf6:	ef 1a       	sub	r14, r31
    2cf8:	ff 0a       	sbc	r15, r31
		LCD->setCursor(0,0);
		
		//Print each menu item (3 items left on line)
		int firstItemToPrint = (int)(currentItem/3);
		int ln = 0;
		for(int i=firstItemToPrint; i<min(_Items.size(),firstItemToPrint + 4); i++){
    2cfa:	21 96       	adiw	r28, 0x01	; 1
    2cfc:	f6 01       	movw	r30, r12
    2cfe:	27 85       	ldd	r18, Z+15	; 0x0f
    2d00:	30 89       	ldd	r19, Z+16	; 0x10
    2d02:	82 2d       	mov	r24, r2
    2d04:	93 2d       	mov	r25, r3
    2d06:	2a 15       	cp	r18, r10
    2d08:	3b 05       	cpc	r19, r11
    2d0a:	0c f4       	brge	.+2      	; 0x2d0e <_ZN9EZUI_Menu7displayEP4EZUI+0xee>
    2d0c:	c9 01       	movw	r24, r18
    2d0e:	c8 17       	cp	r28, r24
    2d10:	d9 07       	cpc	r29, r25
    2d12:	54 f2       	brlt	.-108    	; 0x2ca8 <_ZN9EZUI_Menu7displayEP4EZUI+0x88>
			}
			ln++;
		}
	}
	
	refresh = 0;
    2d14:	f6 01       	movw	r30, r12
    2d16:	10 a2       	std	Z+32, r1	; 0x20
}
    2d18:	df 91       	pop	r29
    2d1a:	cf 91       	pop	r28
    2d1c:	1f 91       	pop	r17
    2d1e:	0f 91       	pop	r16
    2d20:	ff 90       	pop	r15
    2d22:	ef 90       	pop	r14
    2d24:	df 90       	pop	r13
    2d26:	cf 90       	pop	r12
    2d28:	bf 90       	pop	r11
    2d2a:	af 90       	pop	r10
    2d2c:	9f 90       	pop	r9
    2d2e:	8f 90       	pop	r8
    2d30:	7f 90       	pop	r7
    2d32:	6f 90       	pop	r6
    2d34:	5f 90       	pop	r5
    2d36:	4f 90       	pop	r4
    2d38:	3f 90       	pop	r3
    2d3a:	2f 90       	pop	r2
    2d3c:	08 95       	ret

00002d3e <_ZN9EZUI_Menu7displayEP4EZUIb>:

void EZUI_Menu::display(EZUI *UI, bool redraw){
	this->refresh = redraw;
    2d3e:	fc 01       	movw	r30, r24
    2d40:	40 a3       	std	Z+32, r20	; 0x20
	display(UI);
    2d42:	6e cf       	rjmp	.-292    	; 0x2c20 <_ZN9EZUI_Menu7displayEP4EZUI>
    2d44:	08 95       	ret

00002d46 <_ZN9EZUI_Menu10SelectItemEP4EZUI>:
	int CurrentItemLn = (currentItem % 4);
	UI->LCD->setCursor(0,CurrentItemLn);
	UI->LCD->print(">");
}

void EZUI_Menu::SelectItem(EZUI *UI){
    2d46:	0f 93       	push	r16
    2d48:	1f 93       	push	r17
    2d4a:	cf 93       	push	r28
    2d4c:	df 93       	push	r29
    2d4e:	ec 01       	movw	r28, r24
    2d50:	8b 01       	movw	r16, r22
	MenuItemType Type = _Types.get(currentItem);
    2d52:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2d54:	7f 8d       	ldd	r23, Y+31	; 0x1f
    2d56:	7c de       	rcall	.-776    	; 0x2a50 <_ZN10LinkedListIN9EZUI_Menu12MenuItemTypeEE3getEi>
	
	switch (Type) {
    2d58:	81 30       	cpi	r24, 0x01	; 1
    2d5a:	19 f0       	breq	.+6      	; 0x2d62 <_ZN9EZUI_Menu10SelectItemEP4EZUI+0x1c>
    2d5c:	82 30       	cpi	r24, 0x02	; 2
    2d5e:	61 f0       	breq	.+24     	; 0x2d78 <_ZN9EZUI_Menu10SelectItemEP4EZUI+0x32>
    2d60:	15 c0       	rjmp	.+42     	; 0x2d8c <_ZN9EZUI_Menu10SelectItemEP4EZUI+0x46>
		case(LinkControl):{
			EZUI_Control_Link const * Item = (EZUI_Control_Link const*)_Items.get(currentItem);
    2d62:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2d64:	7f 8d       	ldd	r23, Y+31	; 0x1f
    2d66:	ce 01       	movw	r24, r28
    2d68:	0d 96       	adiw	r24, 0x0d	; 13
    2d6a:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <_ZN10LinkedListIiE3getEi>
			EZUI_Menu::SelectItem(UI,Item);
    2d6e:	ac 01       	movw	r20, r24
    2d70:	b8 01       	movw	r22, r16
    2d72:	ce 01       	movw	r24, r28
    2d74:	13 dd       	rcall	.-1498   	; 0x279c <_ZN9EZUI_Menu10SelectItemEP4EZUIPK17EZUI_Control_Link>
		}break;
    2d76:	0a c0       	rjmp	.+20     	; 0x2d8c <_ZN9EZUI_Menu10SelectItemEP4EZUI+0x46>
		case(ToggleOptionControl):{
			EZUI_Control_ToggleOption const * Item = (EZUI_Control_ToggleOption const*)_Items.get(currentItem);
    2d78:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2d7a:	7f 8d       	ldd	r23, Y+31	; 0x1f
    2d7c:	ce 01       	movw	r24, r28
    2d7e:	0d 96       	adiw	r24, 0x0d	; 13
    2d80:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <_ZN10LinkedListIiE3getEi>
			EZUI_Menu::SelectItem(UI,Item);
    2d84:	ac 01       	movw	r20, r24
    2d86:	b8 01       	movw	r22, r16
    2d88:	ce 01       	movw	r24, r28
    2d8a:	31 dd       	rcall	.-1438   	; 0x27ee <_ZN9EZUI_Menu10SelectItemEP4EZUIPK25EZUI_Control_ToggleOption>
		}break;
	}
}
    2d8c:	df 91       	pop	r29
    2d8e:	cf 91       	pop	r28
    2d90:	1f 91       	pop	r17
    2d92:	0f 91       	pop	r16
    2d94:	08 95       	ret

00002d96 <_ZN9EZUI_PageC1Ev>:
			*itemsText[i] = newText;
		}
	}
}

void EZUI_Page::prevItem(void){
    2d96:	fc 01       	movw	r30, r24
    2d98:	11 82       	std	Z+1, r1	; 0x01
    2d9a:	10 82       	st	Z, r1
    2d9c:	8f ef       	ldi	r24, 0xFF	; 255
    2d9e:	9f ef       	ldi	r25, 0xFF	; 255
    2da0:	93 83       	std	Z+3, r25	; 0x03
    2da2:	82 83       	std	Z+2, r24	; 0x02
    2da4:	81 e0       	ldi	r24, 0x01	; 1
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	95 83       	std	Z+5, r25	; 0x05
    2daa:	84 83       	std	Z+4, r24	; 0x04
    2dac:	08 95       	ret

00002dae <_ZN9EZUI_PageD1Ev>:
    2dae:	08 95       	ret

00002db0 <_ZN9EZUI_Page7displayEP4EZUIb>:
    2db0:	50 e0       	ldi	r21, 0x00	; 0
    2db2:	fc 01       	movw	r30, r24
    2db4:	55 83       	std	Z+5, r21	; 0x05
    2db6:	44 83       	std	Z+4, r20	; 0x04
    2db8:	08 95       	ret

00002dba <_ZN9EZUI_Page7displayEP4EZUI>:
    2dba:	08 95       	ret

00002dbc <_ZN9EZUI_Page8nextItemEv>:
	if(currentItem > -1){
		
	}
}

void EZUI_Page::nextItem(void){
    2dbc:	08 95       	ret

00002dbe <_ZN9EZUI_Page10selectItemEP4EZUI>:
	if(currentItem > -1){
		
	}
}

void EZUI_Page::selectItem(EZUI *UI){
    2dbe:	08 95       	ret

00002dc0 <_ZN4EZUI15EncoderDblClickEv>:
#include "EZUI.h"

EZUI::EZUI(){
}

EZUI::~EZUI(){
    2dc0:	08 95       	ret

00002dc2 <_ZN4EZUI12EncoderClickEv>:
    2dc2:	bc 01       	movw	r22, r24
    2dc4:	fc 01       	movw	r30, r24
    2dc6:	80 81       	ld	r24, Z
    2dc8:	91 81       	ldd	r25, Z+1	; 0x01
    2dca:	00 97       	sbiw	r24, 0x00	; 0
    2dcc:	11 f0       	breq	.+4      	; 0x2dd2 <_ZN4EZUI12EncoderClickEv+0x10>
    2dce:	bb cf       	rjmp	.-138    	; 0x2d46 <_ZN9EZUI_Menu10SelectItemEP4EZUI>
    2dd0:	08 95       	ret
    2dd2:	fb 01       	movw	r30, r22
    2dd4:	82 81       	ldd	r24, Z+2	; 0x02
    2dd6:	93 81       	ldd	r25, Z+3	; 0x03
    2dd8:	00 97       	sbiw	r24, 0x00	; 0
    2dda:	09 f0       	breq	.+2      	; 0x2dde <_ZN4EZUI12EncoderClickEv+0x1c>
    2ddc:	f0 cf       	rjmp	.-32     	; 0x2dbe <_ZN9EZUI_Page10selectItemEP4EZUI>
    2dde:	08 95       	ret

00002de0 <_ZN4EZUI16EncoderIncrementEv>:
    2de0:	cf 93       	push	r28
    2de2:	df 93       	push	r29
    2de4:	ec 01       	movw	r28, r24
    2de6:	88 81       	ld	r24, Y
    2de8:	99 81       	ldd	r25, Y+1	; 0x01
    2dea:	00 97       	sbiw	r24, 0x00	; 0
    2dec:	11 f0       	breq	.+4      	; 0x2df2 <_ZN4EZUI16EncoderIncrementEv+0x12>
    2dee:	be 01       	movw	r22, r28
    2df0:	72 dc       	rcall	.-1820   	; 0x26d6 <_ZN9EZUI_Menu8nextItemEP4EZUI>
    2df2:	8a 81       	ldd	r24, Y+2	; 0x02
    2df4:	9b 81       	ldd	r25, Y+3	; 0x03
    2df6:	00 97       	sbiw	r24, 0x00	; 0
    2df8:	09 f0       	breq	.+2      	; 0x2dfc <_ZN4EZUI16EncoderIncrementEv+0x1c>
    2dfa:	e0 df       	rcall	.-64     	; 0x2dbc <_ZN9EZUI_Page8nextItemEv>
    2dfc:	df 91       	pop	r29
    2dfe:	cf 91       	pop	r28
    2e00:	08 95       	ret

00002e02 <_ZN4EZUI16EncoderDecrementEv>:
    2e02:	fc 01       	movw	r30, r24
    2e04:	80 81       	ld	r24, Z
    2e06:	91 81       	ldd	r25, Z+1	; 0x01
    2e08:	00 97       	sbiw	r24, 0x00	; 0
    2e0a:	11 f0       	breq	.+4      	; 0x2e10 <_ZN4EZUI16EncoderDecrementEv+0xe>
    2e0c:	bf 01       	movw	r22, r30
    2e0e:	08 cc       	rjmp	.-2032   	; 0x2620 <_ZN9EZUI_Menu8prevItemEP4EZUI>
    2e10:	08 95       	ret

00002e12 <_ZN4EZUIC1Ev>:
    2e12:	fc 01       	movw	r30, r24
    2e14:	11 82       	std	Z+1, r1	; 0x01
    2e16:	10 82       	st	Z, r1
    2e18:	13 82       	std	Z+3, r1	; 0x03
    2e1a:	12 82       	std	Z+2, r1	; 0x02
    2e1c:	15 82       	std	Z+5, r1	; 0x05
    2e1e:	14 82       	std	Z+4, r1	; 0x04
    2e20:	17 82       	std	Z+7, r1	; 0x07
    2e22:	16 82       	std	Z+6, r1	; 0x06
    2e24:	08 95       	ret

00002e26 <_ZN4EZUI14attatchEncoderEP22ClickEncoderWithEvents>:
}

void EZUI::attatchEncoder(ClickEncoderWithEvents *_Encoder){
    2e26:	fc 01       	movw	r30, r24
	Encoder = _Encoder;
    2e28:	73 87       	std	Z+11, r23	; 0x0b
    2e2a:	62 87       	std	Z+10, r22	; 0x0a
	//Encoder->ClearHandlers();
	Encoder->UI = this;
    2e2c:	db 01       	movw	r26, r22
    2e2e:	1f 96       	adiw	r26, 0x0f	; 15
    2e30:	9c 93       	st	X, r25
    2e32:	8e 93       	st	-X, r24
    2e34:	1e 97       	sbiw	r26, 0x0e	; 14
	Encoder->ClickHandler = &EZUI::EncoderClick;
    2e36:	a2 85       	ldd	r26, Z+10	; 0x0a
    2e38:	b3 85       	ldd	r27, Z+11	; 0x0b
    2e3a:	81 ee       	ldi	r24, 0xE1	; 225
    2e3c:	96 e1       	ldi	r25, 0x16	; 22
    2e3e:	51 96       	adiw	r26, 0x11	; 17
    2e40:	9c 93       	st	X, r25
    2e42:	8e 93       	st	-X, r24
    2e44:	50 97       	sbiw	r26, 0x10	; 16
    2e46:	53 96       	adiw	r26, 0x13	; 19
    2e48:	1c 92       	st	X, r1
    2e4a:	1e 92       	st	-X, r1
    2e4c:	52 97       	sbiw	r26, 0x12	; 18
	Encoder->DblClickHandler = &EZUI::EncoderDblClick;
    2e4e:	a2 85       	ldd	r26, Z+10	; 0x0a
    2e50:	b3 85       	ldd	r27, Z+11	; 0x0b
    2e52:	80 ee       	ldi	r24, 0xE0	; 224
    2e54:	96 e1       	ldi	r25, 0x16	; 22
    2e56:	55 96       	adiw	r26, 0x15	; 21
    2e58:	9c 93       	st	X, r25
    2e5a:	8e 93       	st	-X, r24
    2e5c:	54 97       	sbiw	r26, 0x14	; 20
    2e5e:	57 96       	adiw	r26, 0x17	; 23
    2e60:	1c 92       	st	X, r1
    2e62:	1e 92       	st	-X, r1
    2e64:	56 97       	sbiw	r26, 0x16	; 22
	Encoder->IncrementHandler = &EZUI::EncoderIncrement;
    2e66:	a2 85       	ldd	r26, Z+10	; 0x0a
    2e68:	b3 85       	ldd	r27, Z+11	; 0x0b
    2e6a:	80 ef       	ldi	r24, 0xF0	; 240
    2e6c:	96 e1       	ldi	r25, 0x16	; 22
    2e6e:	59 96       	adiw	r26, 0x19	; 25
    2e70:	9c 93       	st	X, r25
    2e72:	8e 93       	st	-X, r24
    2e74:	58 97       	sbiw	r26, 0x18	; 24
    2e76:	5b 96       	adiw	r26, 0x1b	; 27
    2e78:	1c 92       	st	X, r1
    2e7a:	1e 92       	st	-X, r1
    2e7c:	5a 97       	sbiw	r26, 0x1a	; 26
	Encoder->DecrementHandler = &EZUI::EncoderDecrement;
    2e7e:	02 84       	ldd	r0, Z+10	; 0x0a
    2e80:	f3 85       	ldd	r31, Z+11	; 0x0b
    2e82:	e0 2d       	mov	r30, r0
    2e84:	81 e0       	ldi	r24, 0x01	; 1
    2e86:	97 e1       	ldi	r25, 0x17	; 23
    2e88:	95 8f       	std	Z+29, r25	; 0x1d
    2e8a:	84 8f       	std	Z+28, r24	; 0x1c
    2e8c:	17 8e       	std	Z+31, r1	; 0x1f
    2e8e:	16 8e       	std	Z+30, r1	; 0x1e
    2e90:	08 95       	ret

00002e92 <_ZN4EZUI10attatchLCDEP17LiquidCrystal_I2C>:
}

void EZUI::attatchLCD( LiquidCrystal_I2C *_LCD ){
	LCD = _LCD;
    2e92:	fc 01       	movw	r30, r24
    2e94:	71 87       	std	Z+9, r23	; 0x09
    2e96:	60 87       	std	Z+8, r22	; 0x08
    2e98:	08 95       	ret

00002e9a <_ZN4EZUI7refreshEv>:
	if (!( CurrentMenu == NULL)){
		CurrentMenu->prevItem(this);
	}
}

void EZUI::refresh(){
    2e9a:	cf 93       	push	r28
    2e9c:	df 93       	push	r29
    2e9e:	ec 01       	movw	r28, r24
	//Attatch all event handlers
	if (CurrentPage != NULL){
    2ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ea4:	89 2b       	or	r24, r25
    2ea6:	61 f0       	breq	.+24     	; 0x2ec0 <_ZN4EZUI7refreshEv+0x26>
		lastDisplayMillis = millis();
    2ea8:	0e 94 82 2a 	call	0x5504	; 0x5504 <millis>
    2eac:	6c 87       	std	Y+12, r22	; 0x0c
    2eae:	7d 87       	std	Y+13, r23	; 0x0d
    2eb0:	8e 87       	std	Y+14, r24	; 0x0e
    2eb2:	9f 87       	std	Y+15, r25	; 0x0f
		CurrentPage->display(this,true);
    2eb4:	41 e0       	ldi	r20, 0x01	; 1
    2eb6:	be 01       	movw	r22, r28
    2eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eba:	9b 81       	ldd	r25, Y+3	; 0x03
    2ebc:	79 df       	rcall	.-270    	; 0x2db0 <_ZN9EZUI_Page7displayEP4EZUIb>
    2ebe:	0f c0       	rjmp	.+30     	; 0x2ede <_ZN4EZUI7refreshEv+0x44>
	}else if (CurrentMenu != NULL){
    2ec0:	88 81       	ld	r24, Y
    2ec2:	99 81       	ldd	r25, Y+1	; 0x01
    2ec4:	89 2b       	or	r24, r25
    2ec6:	59 f0       	breq	.+22     	; 0x2ede <_ZN4EZUI7refreshEv+0x44>
		lastDisplayMillis = millis();
    2ec8:	0e 94 82 2a 	call	0x5504	; 0x5504 <millis>
    2ecc:	6c 87       	std	Y+12, r22	; 0x0c
    2ece:	7d 87       	std	Y+13, r23	; 0x0d
    2ed0:	8e 87       	std	Y+14, r24	; 0x0e
    2ed2:	9f 87       	std	Y+15, r25	; 0x0f
		CurrentMenu->display(this,true);
    2ed4:	41 e0       	ldi	r20, 0x01	; 1
    2ed6:	be 01       	movw	r22, r28
    2ed8:	88 81       	ld	r24, Y
    2eda:	99 81       	ldd	r25, Y+1	; 0x01
    2edc:	30 df       	rcall	.-416    	; 0x2d3e <_ZN9EZUI_Menu7displayEP4EZUIb>
	}
}
    2ede:	df 91       	pop	r29
    2ee0:	cf 91       	pop	r28
    2ee2:	08 95       	ret

00002ee4 <_ZN4EZUI7displayEv>:

void EZUI::display(){
    2ee4:	0f 93       	push	r16
    2ee6:	1f 93       	push	r17
    2ee8:	cf 93       	push	r28
    2eea:	df 93       	push	r29
    2eec:	ec 01       	movw	r28, r24
	//Attatch all event handlers
	if (CurrentPage != NULL){
    2eee:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ef2:	89 2b       	or	r24, r25
    2ef4:	59 f0       	breq	.+22     	; 0x2f0c <_ZN4EZUI7displayEv+0x28>
		lastDisplayMillis = millis();
    2ef6:	0e 94 82 2a 	call	0x5504	; 0x5504 <millis>
    2efa:	6c 87       	std	Y+12, r22	; 0x0c
    2efc:	7d 87       	std	Y+13, r23	; 0x0d
    2efe:	8e 87       	std	Y+14, r24	; 0x0e
    2f00:	9f 87       	std	Y+15, r25	; 0x0f
		CurrentPage->display(this);
    2f02:	be 01       	movw	r22, r28
    2f04:	8a 81       	ldd	r24, Y+2	; 0x02
    2f06:	9b 81       	ldd	r25, Y+3	; 0x03
    2f08:	58 df       	rcall	.-336    	; 0x2dba <_ZN9EZUI_Page7displayEP4EZUI>
    2f0a:	35 c0       	rjmp	.+106    	; 0x2f76 <_ZN4EZUI7displayEv+0x92>
	}else if (CurrentMenu != NULL){
    2f0c:	88 81       	ld	r24, Y
    2f0e:	99 81       	ldd	r25, Y+1	; 0x01
    2f10:	89 2b       	or	r24, r25
    2f12:	59 f0       	breq	.+22     	; 0x2f2a <_ZN4EZUI7displayEv+0x46>
		lastDisplayMillis = millis();
    2f14:	0e 94 82 2a 	call	0x5504	; 0x5504 <millis>
    2f18:	6c 87       	std	Y+12, r22	; 0x0c
    2f1a:	7d 87       	std	Y+13, r23	; 0x0d
    2f1c:	8e 87       	std	Y+14, r24	; 0x0e
    2f1e:	9f 87       	std	Y+15, r25	; 0x0f
		CurrentMenu->display(this);
    2f20:	be 01       	movw	r22, r28
    2f22:	88 81       	ld	r24, Y
    2f24:	99 81       	ldd	r25, Y+1	; 0x01
    2f26:	7c de       	rcall	.-776    	; 0x2c20 <_ZN9EZUI_Menu7displayEP4EZUI>
    2f28:	26 c0       	rjmp	.+76     	; 0x2f76 <_ZN4EZUI7displayEv+0x92>
	}else{
		//display nothing
		if((millis() - lastDisplayMillis) > 3000){
    2f2a:	0e 94 82 2a 	call	0x5504	; 0x5504 <millis>
    2f2e:	0c 85       	ldd	r16, Y+12	; 0x0c
    2f30:	1d 85       	ldd	r17, Y+13	; 0x0d
    2f32:	2e 85       	ldd	r18, Y+14	; 0x0e
    2f34:	3f 85       	ldd	r19, Y+15	; 0x0f
    2f36:	dc 01       	movw	r26, r24
    2f38:	cb 01       	movw	r24, r22
    2f3a:	80 1b       	sub	r24, r16
    2f3c:	91 0b       	sbc	r25, r17
    2f3e:	a2 0b       	sbc	r26, r18
    2f40:	b3 0b       	sbc	r27, r19
    2f42:	89 3b       	cpi	r24, 0xB9	; 185
    2f44:	9b 40       	sbci	r25, 0x0B	; 11
    2f46:	a1 05       	cpc	r26, r1
    2f48:	b1 05       	cpc	r27, r1
    2f4a:	a8 f0       	brcs	.+42     	; 0x2f76 <_ZN4EZUI7displayEv+0x92>
			lastDisplayMillis = millis();
    2f4c:	0e 94 82 2a 	call	0x5504	; 0x5504 <millis>
    2f50:	6c 87       	std	Y+12, r22	; 0x0c
    2f52:	7d 87       	std	Y+13, r23	; 0x0d
    2f54:	8e 87       	std	Y+14, r24	; 0x0e
    2f56:	9f 87       	std	Y+15, r25	; 0x0f
			LCD->clear();
    2f58:	88 85       	ldd	r24, Y+8	; 0x08
    2f5a:	99 85       	ldd	r25, Y+9	; 0x09
    2f5c:	9e d3       	rcall	.+1852   	; 0x369a <_ZN3LCD5clearEv>
			LCD->println("ERROR!");
    2f5e:	69 ea       	ldi	r22, 0xA9	; 169
    2f60:	73 e0       	ldi	r23, 0x03	; 3
    2f62:	88 85       	ldd	r24, Y+8	; 0x08
    2f64:	99 85       	ldd	r25, Y+9	; 0x09
    2f66:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <_ZN5Print7printlnEPKc>
			LCD->println("  No Page or Menu");
    2f6a:	60 eb       	ldi	r22, 0xB0	; 176
    2f6c:	73 e0       	ldi	r23, 0x03	; 3
    2f6e:	88 85       	ldd	r24, Y+8	; 0x08
    2f70:	99 85       	ldd	r25, Y+9	; 0x09
    2f72:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <_ZN5Print7printlnEPKc>
		}
	}
}
    2f76:	df 91       	pop	r29
    2f78:	cf 91       	pop	r28
    2f7a:	1f 91       	pop	r17
    2f7c:	0f 91       	pop	r16
    2f7e:	08 95       	ret

00002f80 <_ZN4EZUI10setDisplayEP9EZUI_Menu>:

void EZUI::setDisplay(EZUI_Menu *Menu){
    2f80:	cf 93       	push	r28
    2f82:	df 93       	push	r29
    2f84:	ec 01       	movw	r28, r24
    2f86:	cb 01       	movw	r24, r22
	CurrentMenu = Menu;
    2f88:	79 83       	std	Y+1, r23	; 0x01
    2f8a:	68 83       	st	Y, r22
	CurrentMenu->display(this, true);
    2f8c:	41 e0       	ldi	r20, 0x01	; 1
    2f8e:	be 01       	movw	r22, r28
    2f90:	d6 de       	rcall	.-596    	; 0x2d3e <_ZN9EZUI_Menu7displayEP4EZUIb>
	CurrentPage = NULL;
    2f92:	1b 82       	std	Y+3, r1	; 0x03
    2f94:	1a 82       	std	Y+2, r1	; 0x02
	
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.println("Display Menu.");
	#endif
}
    2f96:	df 91       	pop	r29
    2f98:	cf 91       	pop	r28
    2f9a:	08 95       	ret

00002f9c <_ZN4EZUI10setDisplayEP9EZUI_Page>:

void EZUI::setDisplay(EZUI_Page *Page){
	CurrentMenu = NULL;
    2f9c:	fc 01       	movw	r30, r24
    2f9e:	11 82       	std	Z+1, r1	; 0x01
    2fa0:	10 82       	st	Z, r1
	CurrentPage = Page;
    2fa2:	73 83       	std	Z+3, r23	; 0x03
    2fa4:	62 83       	std	Z+2, r22	; 0x02
    2fa6:	08 95       	ret

00002fa8 <_ZN9Executive11exec_frame1Ev>:
	
	//Controllers
	
}

void Executive::exec_frame3(){
    2fa8:	80 e4       	ldi	r24, 0x40	; 64
    2faa:	0e 94 4a 2b 	call	0x5694	; 0x5694 <analogRead>
    2fae:	6f ef       	ldi	r22, 0xFF	; 255
    2fb0:	73 e0       	ldi	r23, 0x03	; 3
    2fb2:	0e 94 45 30 	call	0x608a	; 0x608a <__divmodhi4>
    2fb6:	07 2e       	mov	r0, r23
    2fb8:	00 0c       	add	r0, r0
    2fba:	88 0b       	sbc	r24, r24
    2fbc:	99 0b       	sbc	r25, r25
    2fbe:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <__floatsisf>
    2fc2:	20 e0       	ldi	r18, 0x00	; 0
    2fc4:	30 e0       	ldi	r19, 0x00	; 0
    2fc6:	40 ea       	ldi	r20, 0xA0	; 160
    2fc8:	50 e4       	ldi	r21, 0x40	; 64
    2fca:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <__mulsf3>
    2fce:	60 93 66 07 	sts	0x0766, r22
    2fd2:	70 93 67 07 	sts	0x0767, r23
    2fd6:	80 93 68 07 	sts	0x0768, r24
    2fda:	90 93 69 07 	sts	0x0769, r25
    2fde:	20 e0       	ldi	r18, 0x00	; 0
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	40 e2       	ldi	r20, 0x20	; 32
    2fe4:	50 e4       	ldi	r21, 0x40	; 64
    2fe6:	0e 94 da 2f 	call	0x5fb4	; 0x5fb4 <__gesf2>
    2fea:	18 16       	cp	r1, r24
    2fec:	24 f4       	brge	.+8      	; 0x2ff6 <_ZN9Executive11exec_frame1Ev+0x4e>
    2fee:	81 e0       	ldi	r24, 0x01	; 1
    2ff0:	80 93 65 07 	sts	0x0765, r24
    2ff4:	02 c0       	rjmp	.+4      	; 0x2ffa <_ZN9Executive11exec_frame1Ev+0x52>
    2ff6:	10 92 65 07 	sts	0x0765, r1
    2ffa:	81 e4       	ldi	r24, 0x41	; 65
    2ffc:	0e 94 4a 2b 	call	0x5694	; 0x5694 <analogRead>
    3000:	6f ef       	ldi	r22, 0xFF	; 255
    3002:	73 e0       	ldi	r23, 0x03	; 3
    3004:	0e 94 45 30 	call	0x608a	; 0x608a <__divmodhi4>
    3008:	07 2e       	mov	r0, r23
    300a:	00 0c       	add	r0, r0
    300c:	88 0b       	sbc	r24, r24
    300e:	99 0b       	sbc	r25, r25
    3010:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <__floatsisf>
    3014:	20 e0       	ldi	r18, 0x00	; 0
    3016:	30 e0       	ldi	r19, 0x00	; 0
    3018:	40 ea       	ldi	r20, 0xA0	; 160
    301a:	50 e4       	ldi	r21, 0x40	; 64
    301c:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <__mulsf3>
    3020:	60 93 61 07 	sts	0x0761, r22
    3024:	70 93 62 07 	sts	0x0762, r23
    3028:	80 93 63 07 	sts	0x0763, r24
    302c:	90 93 64 07 	sts	0x0764, r25
    3030:	20 e0       	ldi	r18, 0x00	; 0
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	40 e2       	ldi	r20, 0x20	; 32
    3036:	50 e4       	ldi	r21, 0x40	; 64
    3038:	0e 94 da 2f 	call	0x5fb4	; 0x5fb4 <__gesf2>
    303c:	18 16       	cp	r1, r24
    303e:	24 f4       	brge	.+8      	; 0x3048 <_ZN9Executive11exec_frame1Ev+0xa0>
    3040:	81 e0       	ldi	r24, 0x01	; 1
    3042:	80 93 60 07 	sts	0x0760, r24
    3046:	02 c0       	rjmp	.+4      	; 0x304c <_ZN9Executive11exec_frame1Ev+0xa4>
    3048:	10 92 60 07 	sts	0x0760, r1
    304c:	80 e4       	ldi	r24, 0x40	; 64
    304e:	0e 94 4a 2b 	call	0x5694	; 0x5694 <analogRead>
    3052:	6f ef       	ldi	r22, 0xFF	; 255
    3054:	73 e0       	ldi	r23, 0x03	; 3
    3056:	0e 94 45 30 	call	0x608a	; 0x608a <__divmodhi4>
    305a:	07 2e       	mov	r0, r23
    305c:	00 0c       	add	r0, r0
    305e:	88 0b       	sbc	r24, r24
    3060:	99 0b       	sbc	r25, r25
    3062:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <__floatsisf>
    3066:	20 e0       	ldi	r18, 0x00	; 0
    3068:	30 e0       	ldi	r19, 0x00	; 0
    306a:	40 ea       	ldi	r20, 0xA0	; 160
    306c:	50 e4       	ldi	r21, 0x40	; 64
    306e:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <__mulsf3>
    3072:	60 93 75 07 	sts	0x0775, r22
    3076:	70 93 76 07 	sts	0x0776, r23
    307a:	80 93 77 07 	sts	0x0777, r24
    307e:	90 93 78 07 	sts	0x0778, r25
    3082:	20 e0       	ldi	r18, 0x00	; 0
    3084:	30 e0       	ldi	r19, 0x00	; 0
    3086:	40 e2       	ldi	r20, 0x20	; 32
    3088:	50 e4       	ldi	r21, 0x40	; 64
    308a:	0e 94 da 2f 	call	0x5fb4	; 0x5fb4 <__gesf2>
    308e:	18 16       	cp	r1, r24
    3090:	24 f4       	brge	.+8      	; 0x309a <_ZN9Executive11exec_frame1Ev+0xf2>
    3092:	81 e0       	ldi	r24, 0x01	; 1
    3094:	80 93 74 07 	sts	0x0774, r24
    3098:	02 c0       	rjmp	.+4      	; 0x309e <_ZN9Executive11exec_frame1Ev+0xf6>
    309a:	10 92 74 07 	sts	0x0774, r1
    309e:	80 e4       	ldi	r24, 0x40	; 64
    30a0:	0e 94 4a 2b 	call	0x5694	; 0x5694 <analogRead>
    30a4:	6f ef       	ldi	r22, 0xFF	; 255
    30a6:	73 e0       	ldi	r23, 0x03	; 3
    30a8:	0e 94 45 30 	call	0x608a	; 0x608a <__divmodhi4>
    30ac:	07 2e       	mov	r0, r23
    30ae:	00 0c       	add	r0, r0
    30b0:	88 0b       	sbc	r24, r24
    30b2:	99 0b       	sbc	r25, r25
    30b4:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <__floatsisf>
    30b8:	20 e0       	ldi	r18, 0x00	; 0
    30ba:	30 e0       	ldi	r19, 0x00	; 0
    30bc:	40 ea       	ldi	r20, 0xA0	; 160
    30be:	50 e4       	ldi	r21, 0x40	; 64
    30c0:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <__mulsf3>
    30c4:	60 93 70 07 	sts	0x0770, r22
    30c8:	70 93 71 07 	sts	0x0771, r23
    30cc:	80 93 72 07 	sts	0x0772, r24
    30d0:	90 93 73 07 	sts	0x0773, r25
    30d4:	20 e0       	ldi	r18, 0x00	; 0
    30d6:	30 e0       	ldi	r19, 0x00	; 0
    30d8:	40 e2       	ldi	r20, 0x20	; 32
    30da:	50 e4       	ldi	r21, 0x40	; 64
    30dc:	0e 94 da 2f 	call	0x5fb4	; 0x5fb4 <__gesf2>
    30e0:	18 16       	cp	r1, r24
    30e2:	24 f4       	brge	.+8      	; 0x30ec <_ZN9Executive11exec_frame1Ev+0x144>
    30e4:	81 e0       	ldi	r24, 0x01	; 1
    30e6:	80 93 6f 07 	sts	0x076F, r24
    30ea:	02 c0       	rjmp	.+4      	; 0x30f0 <_ZN9Executive11exec_frame1Ev+0x148>
    30ec:	10 92 6f 07 	sts	0x076F, r1
    30f0:	80 e4       	ldi	r24, 0x40	; 64
    30f2:	0e 94 4a 2b 	call	0x5694	; 0x5694 <analogRead>
    30f6:	6f ef       	ldi	r22, 0xFF	; 255
    30f8:	73 e0       	ldi	r23, 0x03	; 3
    30fa:	0e 94 45 30 	call	0x608a	; 0x608a <__divmodhi4>
    30fe:	07 2e       	mov	r0, r23
    3100:	00 0c       	add	r0, r0
    3102:	88 0b       	sbc	r24, r24
    3104:	99 0b       	sbc	r25, r25
    3106:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <__floatsisf>
    310a:	20 e0       	ldi	r18, 0x00	; 0
    310c:	30 e0       	ldi	r19, 0x00	; 0
    310e:	40 ea       	ldi	r20, 0xA0	; 160
    3110:	50 e4       	ldi	r21, 0x40	; 64
    3112:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <__mulsf3>
    3116:	60 93 6b 07 	sts	0x076B, r22
    311a:	70 93 6c 07 	sts	0x076C, r23
    311e:	80 93 6d 07 	sts	0x076D, r24
    3122:	90 93 6e 07 	sts	0x076E, r25
    3126:	20 e0       	ldi	r18, 0x00	; 0
    3128:	30 e0       	ldi	r19, 0x00	; 0
    312a:	40 e2       	ldi	r20, 0x20	; 32
    312c:	50 e4       	ldi	r21, 0x40	; 64
    312e:	0e 94 da 2f 	call	0x5fb4	; 0x5fb4 <__gesf2>
    3132:	18 16       	cp	r1, r24
    3134:	24 f4       	brge	.+8      	; 0x313e <_ZN9Executive11exec_frame1Ev+0x196>
    3136:	81 e0       	ldi	r24, 0x01	; 1
    3138:	80 93 6a 07 	sts	0x076A, r24
    313c:	08 95       	ret
    313e:	10 92 6a 07 	sts	0x076A, r1
    3142:	08 95       	ret

00003144 <_ZN9Executive11exec_frame4Ev>:
	//UI_BK->display();
}

void Executive::exec_frame4(){
	//Update Free Memory Calculations
	freeSramBytes=freeMemory();
    3144:	8b d4       	rcall	.+2326   	; 0x3a5c <freeMemory>
    3146:	90 93 8e 08 	sts	0x088E, r25
    314a:	80 93 8d 08 	sts	0x088D, r24
	freeSramPct=100.0*(float)(freeSramBytes/8000);
    314e:	60 e4       	ldi	r22, 0x40	; 64
    3150:	7f e1       	ldi	r23, 0x1F	; 31
    3152:	0e 94 45 30 	call	0x608a	; 0x608a <__divmodhi4>
    3156:	07 2e       	mov	r0, r23
    3158:	00 0c       	add	r0, r0
    315a:	88 0b       	sbc	r24, r24
    315c:	99 0b       	sbc	r25, r25
    315e:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <__floatsisf>
    3162:	20 e0       	ldi	r18, 0x00	; 0
    3164:	30 e0       	ldi	r19, 0x00	; 0
    3166:	48 ec       	ldi	r20, 0xC8	; 200
    3168:	52 e4       	ldi	r21, 0x42	; 66
    316a:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <__mulsf3>
    316e:	60 93 89 08 	sts	0x0889, r22
    3172:	70 93 8a 08 	sts	0x088A, r23
    3176:	80 93 8b 08 	sts	0x088B, r24
    317a:	90 93 8c 08 	sts	0x088C, r25
    317e:	08 95       	ret

00003180 <_ZN9Executive3runEv>:

#include "Executive.h"

unsigned long lastms = 0;

void Executive::run(){
    3180:	8f 92       	push	r8
    3182:	9f 92       	push	r9
    3184:	af 92       	push	r10
    3186:	bf 92       	push	r11
    3188:	cf 92       	push	r12
    318a:	df 92       	push	r13
    318c:	ef 92       	push	r14
    318e:	ff 92       	push	r15
    3190:	0f 93       	push	r16
    3192:	1f 93       	push	r17
    3194:	cf 93       	push	r28
    3196:	df 93       	push	r29
    3198:	ec 01       	movw	r28, r24
	frame_count++;
    319a:	8c 81       	ldd	r24, Y+4	; 0x04
    319c:	9d 81       	ldd	r25, Y+5	; 0x05
    319e:	01 96       	adiw	r24, 0x01	; 1
    31a0:	9d 83       	std	Y+5, r25	; 0x05
    31a2:	8c 83       	std	Y+4, r24	; 0x04
	time = millis();
    31a4:	0e 94 82 2a 	call	0x5504	; 0x5504 <millis>
    31a8:	68 83       	st	Y, r22
    31aa:	79 83       	std	Y+1, r23	; 0x01
    31ac:	8a 83       	std	Y+2, r24	; 0x02
    31ae:	9b 83       	std	Y+3, r25	; 0x03
	exec_frame1();
    31b0:	ce 01       	movw	r24, r28
    31b2:	fa de       	rcall	.-524    	; 0x2fa8 <_ZN9Executive11exec_frame1Ev>
	exec_frame2();
	exec_frame3();
	exec_frame4();
    31b4:	ce 01       	movw	r24, r28
    31b6:	c6 df       	rcall	.-116    	; 0x3144 <_ZN9Executive11exec_frame4Ev>
		
	//Execution rate
	temp_frame_count++;
    31b8:	8e 81       	ldd	r24, Y+6	; 0x06
    31ba:	9f 81       	ldd	r25, Y+7	; 0x07
    31bc:	a8 85       	ldd	r26, Y+8	; 0x08
    31be:	b9 85       	ldd	r27, Y+9	; 0x09
    31c0:	bc 01       	movw	r22, r24
    31c2:	cd 01       	movw	r24, r26
    31c4:	6f 5f       	subi	r22, 0xFF	; 255
    31c6:	7f 4f       	sbci	r23, 0xFF	; 255
    31c8:	8f 4f       	sbci	r24, 0xFF	; 255
    31ca:	9f 4f       	sbci	r25, 0xFF	; 255
    31cc:	6e 83       	std	Y+6, r22	; 0x06
    31ce:	7f 83       	std	Y+7, r23	; 0x07
    31d0:	88 87       	std	Y+8, r24	; 0x08
    31d2:	99 87       	std	Y+9, r25	; 0x09
	if((time - temp_time)>3000){
    31d4:	c8 80       	ld	r12, Y
    31d6:	d9 80       	ldd	r13, Y+1	; 0x01
    31d8:	ea 80       	ldd	r14, Y+2	; 0x02
    31da:	fb 80       	ldd	r15, Y+3	; 0x03
    31dc:	0a 85       	ldd	r16, Y+10	; 0x0a
    31de:	1b 85       	ldd	r17, Y+11	; 0x0b
    31e0:	2c 85       	ldd	r18, Y+12	; 0x0c
    31e2:	3d 85       	ldd	r19, Y+13	; 0x0d
    31e4:	c0 1a       	sub	r12, r16
    31e6:	d1 0a       	sbc	r13, r17
    31e8:	e2 0a       	sbc	r14, r18
    31ea:	f3 0a       	sbc	r15, r19
    31ec:	29 eb       	ldi	r18, 0xB9	; 185
    31ee:	c2 16       	cp	r12, r18
    31f0:	2b e0       	ldi	r18, 0x0B	; 11
    31f2:	d2 06       	cpc	r13, r18
    31f4:	e1 04       	cpc	r14, r1
    31f6:	f1 04       	cpc	r15, r1
    31f8:	08 f4       	brcc	.+2      	; 0x31fc <_ZN9Executive3runEv+0x7c>
    31fa:	62 c0       	rjmp	.+196    	; 0x32c0 <_ZN9Executive3runEv+0x140>
		float Hz = (((float)temp_frame_count) / ((float)(time-temp_time)/1000));
    31fc:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <__floatsisf>
    3200:	4b 01       	movw	r8, r22
    3202:	5c 01       	movw	r10, r24
    3204:	c7 01       	movw	r24, r14
    3206:	b6 01       	movw	r22, r12
    3208:	0e 94 28 2f 	call	0x5e50	; 0x5e50 <__floatunsisf>
    320c:	20 e0       	ldi	r18, 0x00	; 0
    320e:	30 e0       	ldi	r19, 0x00	; 0
    3210:	4a e7       	ldi	r20, 0x7A	; 122
    3212:	54 e4       	ldi	r21, 0x44	; 68
    3214:	0e 94 8f 2e 	call	0x5d1e	; 0x5d1e <__divsf3>
    3218:	9b 01       	movw	r18, r22
    321a:	ac 01       	movw	r20, r24
    321c:	c5 01       	movw	r24, r10
    321e:	b4 01       	movw	r22, r8
    3220:	0e 94 8f 2e 	call	0x5d1e	; 0x5d1e <__divsf3>
    3224:	6b 01       	movw	r12, r22
    3226:	7c 01       	movw	r14, r24
		Serial.print("Running at ");
    3228:	62 ec       	ldi	r22, 0xC2	; 194
    322a:	73 e0       	ldi	r23, 0x03	; 3
    322c:	85 e6       	ldi	r24, 0x65	; 101
    322e:	9a e0       	ldi	r25, 0x0A	; 10
    3230:	0e 94 ec 25 	call	0x4bd8	; 0x4bd8 <_ZN5Print5printEPKc>
		Serial.print(Hz);
    3234:	22 e0       	ldi	r18, 0x02	; 2
    3236:	30 e0       	ldi	r19, 0x00	; 0
    3238:	b7 01       	movw	r22, r14
    323a:	a6 01       	movw	r20, r12
    323c:	85 e6       	ldi	r24, 0x65	; 101
    323e:	9a e0       	ldi	r25, 0x0A	; 10
    3240:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <_ZN5Print5printEdi>
		Serial.print(" Hertz (");
    3244:	6e ec       	ldi	r22, 0xCE	; 206
    3246:	73 e0       	ldi	r23, 0x03	; 3
    3248:	85 e6       	ldi	r24, 0x65	; 101
    324a:	9a e0       	ldi	r25, 0x0A	; 10
    324c:	0e 94 ec 25 	call	0x4bd8	; 0x4bd8 <_ZN5Print5printEPKc>
		Serial.print(temp_frame_count);
    3250:	4e 81       	ldd	r20, Y+6	; 0x06
    3252:	5f 81       	ldd	r21, Y+7	; 0x07
    3254:	68 85       	ldd	r22, Y+8	; 0x08
    3256:	79 85       	ldd	r23, Y+9	; 0x09
    3258:	2a e0       	ldi	r18, 0x0A	; 10
    325a:	30 e0       	ldi	r19, 0x00	; 0
    325c:	85 e6       	ldi	r24, 0x65	; 101
    325e:	9a e0       	ldi	r25, 0x0A	; 10
    3260:	0e 94 99 26 	call	0x4d32	; 0x4d32 <_ZN5Print5printEli>
		Serial.print(" frames / ");
    3264:	67 ed       	ldi	r22, 0xD7	; 215
    3266:	73 e0       	ldi	r23, 0x03	; 3
    3268:	85 e6       	ldi	r24, 0x65	; 101
    326a:	9a e0       	ldi	r25, 0x0A	; 10
    326c:	0e 94 ec 25 	call	0x4bd8	; 0x4bd8 <_ZN5Print5printEPKc>
		Serial.print(time-temp_time);
    3270:	48 81       	ld	r20, Y
    3272:	59 81       	ldd	r21, Y+1	; 0x01
    3274:	6a 81       	ldd	r22, Y+2	; 0x02
    3276:	7b 81       	ldd	r23, Y+3	; 0x03
    3278:	8a 85       	ldd	r24, Y+10	; 0x0a
    327a:	9b 85       	ldd	r25, Y+11	; 0x0b
    327c:	ac 85       	ldd	r26, Y+12	; 0x0c
    327e:	bd 85       	ldd	r27, Y+13	; 0x0d
    3280:	48 1b       	sub	r20, r24
    3282:	59 0b       	sbc	r21, r25
    3284:	6a 0b       	sbc	r22, r26
    3286:	7b 0b       	sbc	r23, r27
    3288:	2a e0       	ldi	r18, 0x0A	; 10
    328a:	30 e0       	ldi	r19, 0x00	; 0
    328c:	85 e6       	ldi	r24, 0x65	; 101
    328e:	9a e0       	ldi	r25, 0x0A	; 10
    3290:	0e 94 e6 26 	call	0x4dcc	; 0x4dcc <_ZN5Print5printEmi>
		Serial.println(" ms )");
    3294:	62 ee       	ldi	r22, 0xE2	; 226
    3296:	73 e0       	ldi	r23, 0x03	; 3
    3298:	85 e6       	ldi	r24, 0x65	; 101
    329a:	9a e0       	ldi	r25, 0x0A	; 10
    329c:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <_ZN5Print7printlnEPKc>
		Serial.flush();
    32a0:	85 e6       	ldi	r24, 0x65	; 101
    32a2:	9a e0       	ldi	r25, 0x0A	; 10
    32a4:	0e 94 10 22 	call	0x4420	; 0x4420 <_ZN14HardwareSerial5flushEv>
		
		//reset counters
		temp_time = time;
    32a8:	88 81       	ld	r24, Y
    32aa:	99 81       	ldd	r25, Y+1	; 0x01
    32ac:	aa 81       	ldd	r26, Y+2	; 0x02
    32ae:	bb 81       	ldd	r27, Y+3	; 0x03
    32b0:	8a 87       	std	Y+10, r24	; 0x0a
    32b2:	9b 87       	std	Y+11, r25	; 0x0b
    32b4:	ac 87       	std	Y+12, r26	; 0x0c
    32b6:	bd 87       	std	Y+13, r27	; 0x0d
		temp_frame_count=0;
    32b8:	1e 82       	std	Y+6, r1	; 0x06
    32ba:	1f 82       	std	Y+7, r1	; 0x07
    32bc:	18 86       	std	Y+8, r1	; 0x08
    32be:	19 86       	std	Y+9, r1	; 0x09
	}
	
	//global::timems = time;
	//global::timsec = (float)(time/1000);
}
    32c0:	df 91       	pop	r29
    32c2:	cf 91       	pop	r28
    32c4:	1f 91       	pop	r17
    32c6:	0f 91       	pop	r16
    32c8:	ff 90       	pop	r15
    32ca:	ef 90       	pop	r14
    32cc:	df 90       	pop	r13
    32ce:	cf 90       	pop	r12
    32d0:	bf 90       	pop	r11
    32d2:	af 90       	pop	r10
    32d4:	9f 90       	pop	r9
    32d6:	8f 90       	pop	r8
    32d8:	08 95       	ret

000032da <_ZN5LUT1DC1EiPKfS1_>:
*	LUT1D
**************************/

//---Constructor-----

LUT1D::LUT1D(int lenx, const float *xvals, const float *zvals){
    32da:	fc 01       	movw	r30, r24
	//Copy the X data
	_lenx=lenx;
    32dc:	75 83       	std	Z+5, r23	; 0x05
    32de:	64 83       	std	Z+4, r22	; 0x04
	float xvals_temp[lenx];
	_x = xvals_temp;
	memcpy(&_x, &xvals, sizeof xvals);
    32e0:	51 83       	std	Z+1, r21	; 0x01
    32e2:	40 83       	st	Z, r20

	//Copy the z data
	float zvals_temp[lenx];
	_z=zvals_temp;
	memcpy(&_z, &zvals, sizeof zvals);
    32e4:	33 83       	std	Z+3, r19	; 0x03
    32e6:	22 83       	std	Z+2, r18	; 0x02
    32e8:	08 95       	ret

000032ea <_ZN16WheatstoneBridgeC1Eii5LUT1Dfffff>:
	AN_Vs = _AnalogIn_Vs;
	AN_Vo = _AnalogIn_V;
}

//Class Instantiation
WheatstoneBridge::WheatstoneBridge(int _AnalogIn_Vs, int _AnalogIn_V, LUT1D _LUT_R2DEGC, float _R2, float _R3, float _R4, float _AmpGain, float _Rs){
    32ea:	af 92       	push	r10
    32ec:	bf 92       	push	r11
    32ee:	cf 92       	push	r12
    32f0:	df 92       	push	r13
    32f2:	ef 92       	push	r14
    32f4:	ff 92       	push	r15
    32f6:	0f 93       	push	r16
    32f8:	1f 93       	push	r17
    32fa:	cf 93       	push	r28
    32fc:	df 93       	push	r29
    32fe:	00 d0       	rcall	.+0      	; 0x3300 <_ZN16WheatstoneBridgeC1Eii5LUT1Dfffff+0x16>
    3300:	00 d0       	rcall	.+0      	; 0x3302 <_ZN16WheatstoneBridgeC1Eii5LUT1Dfffff+0x18>
    3302:	cd b7       	in	r28, 0x3d	; 61
    3304:	de b7       	in	r29, 0x3e	; 62
    3306:	fc 01       	movw	r30, r24
    3308:	14 82       	std	Z+4, r1	; 0x04
    330a:	15 82       	std	Z+5, r1	; 0x05
    330c:	16 82       	std	Z+6, r1	; 0x06
    330e:	17 82       	std	Z+7, r1	; 0x07
	LUT_R2DEGC = &_LUT_R2DEGC;
    3310:	ce 01       	movw	r24, r28
    3312:	01 96       	adiw	r24, 0x01	; 1
    3314:	95 a3       	std	Z+37, r25	; 0x25
    3316:	84 a3       	std	Z+36, r24	; 0x24
	R2 = _R2;
    3318:	a0 8e       	std	Z+24, r10	; 0x18
    331a:	b1 8e       	std	Z+25, r11	; 0x19
    331c:	c2 8e       	std	Z+26, r12	; 0x1a
    331e:	d3 8e       	std	Z+27, r13	; 0x1b
	R3 = _R3;
    3320:	8c 89       	ldd	r24, Y+20	; 0x14
    3322:	9d 89       	ldd	r25, Y+21	; 0x15
    3324:	ae 89       	ldd	r26, Y+22	; 0x16
    3326:	bf 89       	ldd	r27, Y+23	; 0x17
    3328:	84 8f       	std	Z+28, r24	; 0x1c
    332a:	95 8f       	std	Z+29, r25	; 0x1d
    332c:	a6 8f       	std	Z+30, r26	; 0x1e
    332e:	b7 8f       	std	Z+31, r27	; 0x1f
	R4 = _R4;
    3330:	88 8d       	ldd	r24, Y+24	; 0x18
    3332:	99 8d       	ldd	r25, Y+25	; 0x19
    3334:	aa 8d       	ldd	r26, Y+26	; 0x1a
    3336:	bb 8d       	ldd	r27, Y+27	; 0x1b
    3338:	80 a3       	std	Z+32, r24	; 0x20
    333a:	91 a3       	std	Z+33, r25	; 0x21
    333c:	a2 a3       	std	Z+34, r26	; 0x22
    333e:	b3 a3       	std	Z+35, r27	; 0x23
	Rs = _Rs;
    3340:	88 a1       	ldd	r24, Y+32	; 0x20
    3342:	99 a1       	ldd	r25, Y+33	; 0x21
    3344:	aa a1       	ldd	r26, Y+34	; 0x22
    3346:	bb a1       	ldd	r27, Y+35	; 0x23
    3348:	84 8b       	std	Z+20, r24	; 0x14
    334a:	95 8b       	std	Z+21, r25	; 0x15
    334c:	a6 8b       	std	Z+22, r26	; 0x16
    334e:	b7 8b       	std	Z+23, r27	; 0x17
	AmpGain = _AmpGain;
    3350:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3352:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3354:	ae 8d       	ldd	r26, Y+30	; 0x1e
    3356:	bf 8d       	ldd	r27, Y+31	; 0x1f
    3358:	80 8b       	std	Z+16, r24	; 0x10
    335a:	91 8b       	std	Z+17, r25	; 0x11
    335c:	a2 8b       	std	Z+18, r26	; 0x12
    335e:	b3 8b       	std	Z+19, r27	; 0x13
	AN_Vs = _AnalogIn_Vs;
    3360:	73 83       	std	Z+3, r23	; 0x03
    3362:	62 83       	std	Z+2, r22	; 0x02
	AN_Vo = _AnalogIn_V;
    3364:	51 83       	std	Z+1, r21	; 0x01
    3366:	40 83       	st	Z, r20
}
    3368:	26 96       	adiw	r28, 0x06	; 6
    336a:	0f b6       	in	r0, 0x3f	; 63
    336c:	f8 94       	cli
    336e:	de bf       	out	0x3e, r29	; 62
    3370:	0f be       	out	0x3f, r0	; 63
    3372:	cd bf       	out	0x3d, r28	; 61
    3374:	df 91       	pop	r29
    3376:	cf 91       	pop	r28
    3378:	1f 91       	pop	r17
    337a:	0f 91       	pop	r16
    337c:	ff 90       	pop	r15
    337e:	ef 90       	pop	r14
    3380:	df 90       	pop	r13
    3382:	cf 90       	pop	r12
    3384:	bf 90       	pop	r11
    3386:	af 90       	pop	r10
    3388:	08 95       	ret

0000338a <_ZN12ClickEncoderC1Ehhhhb>:
#  endif
#endif

// ----------------------------------------------------------------------------

ClickEncoder::ClickEncoder(uint8_t A, uint8_t B, uint8_t BTN, uint8_t stepsPerNotch, bool active)
    338a:	ef 92       	push	r14
    338c:	0f 93       	push	r16
    338e:	1f 93       	push	r17
    3390:	cf 93       	push	r28
    3392:	df 93       	push	r29
    3394:	ec 01       	movw	r28, r24
    3396:	86 2f       	mov	r24, r22
  : doubleClickEnabled(true), accelerationEnabled(true),
    delta(0), last(0), acceleration(0),
    button(Open), steps(stepsPerNotch),
    pinA(A), pinB(B), pinBTN(BTN), pinsActive(active)
    3398:	68 83       	st	Y, r22
    339a:	49 83       	std	Y+1, r20	; 0x01
    339c:	2a 83       	std	Y+2, r18	; 0x02
    339e:	eb 82       	std	Y+3, r14	; 0x03
    33a0:	1d 82       	std	Y+5, r1	; 0x05
    33a2:	1c 82       	std	Y+4, r1	; 0x04
    33a4:	1f 82       	std	Y+7, r1	; 0x07
    33a6:	1e 82       	std	Y+6, r1	; 0x06
    33a8:	08 87       	std	Y+8, r16	; 0x08
    33aa:	1a 86       	std	Y+10, r1	; 0x0a
    33ac:	19 86       	std	Y+9, r1	; 0x09
    33ae:	1b 86       	std	Y+11, r1	; 0x0b
    33b0:	91 e0       	ldi	r25, 0x01	; 1
    33b2:	9c 87       	std	Y+12, r25	; 0x0c
    33b4:	9d 87       	std	Y+13, r25	; 0x0d
{
  uint8_t configType = (pinsActive == LOW) ? INPUT_PULLUP : INPUT;
    33b6:	ee 20       	and	r14, r14
    33b8:	11 f0       	breq	.+4      	; 0x33be <_ZN12ClickEncoderC1Ehhhhb+0x34>
    33ba:	10 e0       	ldi	r17, 0x00	; 0
    33bc:	01 c0       	rjmp	.+2      	; 0x33c0 <_ZN12ClickEncoderC1Ehhhhb+0x36>
    33be:	12 e0       	ldi	r17, 0x02	; 2
  pinMode(pinA, configType);
    33c0:	61 2f       	mov	r22, r17
    33c2:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <pinMode>
  pinMode(pinB, configType);
    33c6:	61 2f       	mov	r22, r17
    33c8:	89 81       	ldd	r24, Y+1	; 0x01
    33ca:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <pinMode>
  pinMode(pinBTN, configType);
    33ce:	61 2f       	mov	r22, r17
    33d0:	8a 81       	ldd	r24, Y+2	; 0x02
    33d2:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <pinMode>
  
  if (digitalRead(pinA) == pinsActive) {
    33d6:	88 81       	ld	r24, Y
    33d8:	0e 94 45 2c 	call	0x588a	; 0x588a <digitalRead>
    33dc:	2b 81       	ldd	r18, Y+3	; 0x03
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	82 17       	cp	r24, r18
    33e2:	93 07       	cpc	r25, r19
    33e4:	21 f4       	brne	.+8      	; 0x33ee <_ZN12ClickEncoderC1Ehhhhb+0x64>
    last = 3;
    33e6:	83 e0       	ldi	r24, 0x03	; 3
    33e8:	90 e0       	ldi	r25, 0x00	; 0
    33ea:	9f 83       	std	Y+7, r25	; 0x07
    33ec:	8e 83       	std	Y+6, r24	; 0x06
  }

  if (digitalRead(pinB) == pinsActive) {
    33ee:	89 81       	ldd	r24, Y+1	; 0x01
    33f0:	0e 94 45 2c 	call	0x588a	; 0x588a <digitalRead>
    33f4:	2b 81       	ldd	r18, Y+3	; 0x03
    33f6:	30 e0       	ldi	r19, 0x00	; 0
    33f8:	82 17       	cp	r24, r18
    33fa:	93 07       	cpc	r25, r19
    33fc:	31 f4       	brne	.+12     	; 0x340a <_ZN12ClickEncoderC1Ehhhhb+0x80>
    last ^=1;
    33fe:	8e 81       	ldd	r24, Y+6	; 0x06
    3400:	9f 81       	ldd	r25, Y+7	; 0x07
    3402:	21 e0       	ldi	r18, 0x01	; 1
    3404:	82 27       	eor	r24, r18
    3406:	9f 83       	std	Y+7, r25	; 0x07
    3408:	8e 83       	std	Y+6, r24	; 0x06
  }
}
    340a:	df 91       	pop	r29
    340c:	cf 91       	pop	r28
    340e:	1f 91       	pop	r17
    3410:	0f 91       	pop	r16
    3412:	ef 90       	pop	r14
    3414:	08 95       	ret

00003416 <_ZN12ClickEncoder7serviceEv>:

// ----------------------------------------------------------------------------
// call this every 1 millisecond via timer ISR
//
void ClickEncoder::service(void)
{
    3416:	cf 92       	push	r12
    3418:	df 92       	push	r13
    341a:	ef 92       	push	r14
    341c:	ff 92       	push	r15
    341e:	0f 93       	push	r16
    3420:	1f 93       	push	r17
    3422:	cf 93       	push	r28
    3424:	df 93       	push	r29
    3426:	ec 01       	movw	r28, r24
  bool moved = false;
  unsigned long now = millis();
    3428:	0e 94 82 2a 	call	0x5504	; 0x5504 <millis>
    342c:	6b 01       	movw	r12, r22
    342e:	7c 01       	movw	r14, r24

  if (accelerationEnabled) { // decelerate every tick
    3430:	8d 85       	ldd	r24, Y+13	; 0x0d
    3432:	88 23       	and	r24, r24
    3434:	59 f0       	breq	.+22     	; 0x344c <_ZN12ClickEncoder7serviceEv+0x36>
    acceleration -= ENC_ACCEL_DEC;
    3436:	89 85       	ldd	r24, Y+9	; 0x09
    3438:	9a 85       	ldd	r25, Y+10	; 0x0a
    343a:	02 97       	sbiw	r24, 0x02	; 2
    343c:	9a 87       	std	Y+10, r25	; 0x0a
    343e:	89 87       	std	Y+9, r24	; 0x09
    if (acceleration & 0x8000) { // handle overflow of MSB is set
    3440:	89 85       	ldd	r24, Y+9	; 0x09
    3442:	9a 85       	ldd	r25, Y+10	; 0x0a
    3444:	99 23       	and	r25, r25
    3446:	14 f4       	brge	.+4      	; 0x344c <_ZN12ClickEncoder7serviceEv+0x36>
      acceleration = 0;
    3448:	1a 86       	std	Y+10, r1	; 0x0a
    344a:	19 86       	std	Y+9, r1	; 0x09
    moved = true;
  }
#elif ENC_DECODER == ENC_NORMAL
  int8_t curr = 0;

  if (digitalRead(pinA) == pinsActive) {
    344c:	88 81       	ld	r24, Y
    344e:	0e 94 45 2c 	call	0x588a	; 0x588a <digitalRead>
    3452:	2b 81       	ldd	r18, Y+3	; 0x03
    3454:	30 e0       	ldi	r19, 0x00	; 0
    3456:	82 17       	cp	r24, r18
    3458:	93 07       	cpc	r25, r19
    345a:	11 f4       	brne	.+4      	; 0x3460 <_ZN12ClickEncoder7serviceEv+0x4a>
    curr = 3;
    345c:	13 e0       	ldi	r17, 0x03	; 3
    345e:	01 c0       	rjmp	.+2      	; 0x3462 <_ZN12ClickEncoder7serviceEv+0x4c>
  if (tbl) {
    delta += tbl;
    moved = true;
  }
#elif ENC_DECODER == ENC_NORMAL
  int8_t curr = 0;
    3460:	10 e0       	ldi	r17, 0x00	; 0

  if (digitalRead(pinA) == pinsActive) {
    curr = 3;
  }

  if (digitalRead(pinB) == pinsActive) {
    3462:	89 81       	ldd	r24, Y+1	; 0x01
    3464:	0e 94 45 2c 	call	0x588a	; 0x588a <digitalRead>
    3468:	2b 81       	ldd	r18, Y+3	; 0x03
    346a:	30 e0       	ldi	r19, 0x00	; 0
    346c:	82 17       	cp	r24, r18
    346e:	93 07       	cpc	r25, r19
    3470:	11 f4       	brne	.+4      	; 0x3476 <_ZN12ClickEncoder7serviceEv+0x60>
    curr ^= 1;
    3472:	81 e0       	ldi	r24, 0x01	; 1
    3474:	18 27       	eor	r17, r24
  }
  
  int8_t diff = last - curr;
    3476:	8e 81       	ldd	r24, Y+6	; 0x06
    3478:	9f 81       	ldd	r25, Y+7	; 0x07
    347a:	81 1b       	sub	r24, r17

  if (diff & 1) {            // bit 0 = step
    347c:	80 ff       	sbrs	r24, 0
    347e:	1d c0       	rjmp	.+58     	; 0x34ba <_ZN12ClickEncoder7serviceEv+0xa4>
    last = curr;
    3480:	21 2f       	mov	r18, r17
    3482:	11 0f       	add	r17, r17
    3484:	33 0b       	sbc	r19, r19
    3486:	3f 83       	std	Y+7, r19	; 0x07
    3488:	2e 83       	std	Y+6, r18	; 0x06
    delta += (diff & 2) - 1; // bit 1 = direction (+/-)
    348a:	2c 81       	ldd	r18, Y+4	; 0x04
    348c:	3d 81       	ldd	r19, Y+5	; 0x05
    348e:	82 70       	andi	r24, 0x02	; 2
    3490:	08 2e       	mov	r0, r24
    3492:	00 0c       	add	r0, r0
    3494:	99 0b       	sbc	r25, r25
    3496:	01 97       	sbiw	r24, 0x01	; 1
    3498:	82 0f       	add	r24, r18
    349a:	93 1f       	adc	r25, r19
    349c:	9d 83       	std	Y+5, r25	; 0x05
    349e:	8c 83       	std	Y+4, r24	; 0x04
  }
#else
# error "Error: define ENC_DECODER to ENC_NORMAL or ENC_FLAKY"
#endif

  if (accelerationEnabled && moved) {
    34a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    34a2:	88 23       	and	r24, r24
    34a4:	51 f0       	breq	.+20     	; 0x34ba <_ZN12ClickEncoder7serviceEv+0xa4>
    // increment accelerator if encoder has been moved
    if (acceleration <= (ENC_ACCEL_TOP - ENC_ACCEL_INC)) {
    34a6:	89 85       	ldd	r24, Y+9	; 0x09
    34a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    34aa:	88 3e       	cpi	r24, 0xE8	; 232
    34ac:	9b 40       	sbci	r25, 0x0B	; 11
    34ae:	28 f4       	brcc	.+10     	; 0x34ba <_ZN12ClickEncoder7serviceEv+0xa4>
      acceleration += ENC_ACCEL_INC;
    34b0:	89 85       	ldd	r24, Y+9	; 0x09
    34b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    34b4:	49 96       	adiw	r24, 0x19	; 25
    34b6:	9a 87       	std	Y+10, r25	; 0x0a
    34b8:	89 87       	std	Y+9, r24	; 0x09
#ifndef WITHOUT_BUTTON
  static uint16_t keyDownTicks = 0;
  static uint8_t doubleClickTicks = 0;
  static unsigned long lastButtonCheck = 0;

  if (pinBTN > 0 // check button only, if a pin has been provided
    34ba:	8a 81       	ldd	r24, Y+2	; 0x02
    34bc:	88 23       	and	r24, r24
    34be:	09 f4       	brne	.+2      	; 0x34c2 <_ZN12ClickEncoder7serviceEv+0xac>
    34c0:	6b c0       	rjmp	.+214    	; 0x3598 <_ZN12ClickEncoder7serviceEv+0x182>
      && (now - lastButtonCheck) >= ENC_BUTTONINTERVAL) // checking button is sufficient every 10-30ms
    34c2:	40 91 8a 09 	lds	r20, 0x098A
    34c6:	50 91 8b 09 	lds	r21, 0x098B
    34ca:	60 91 8c 09 	lds	r22, 0x098C
    34ce:	70 91 8d 09 	lds	r23, 0x098D
    34d2:	97 01       	movw	r18, r14
    34d4:	86 01       	movw	r16, r12
    34d6:	04 1b       	sub	r16, r20
    34d8:	15 0b       	sbc	r17, r21
    34da:	26 0b       	sbc	r18, r22
    34dc:	37 0b       	sbc	r19, r23
    34de:	0a 30       	cpi	r16, 0x0A	; 10
    34e0:	11 05       	cpc	r17, r1
    34e2:	21 05       	cpc	r18, r1
    34e4:	31 05       	cpc	r19, r1
    34e6:	08 f4       	brcc	.+2      	; 0x34ea <_ZN12ClickEncoder7serviceEv+0xd4>
    34e8:	57 c0       	rjmp	.+174    	; 0x3598 <_ZN12ClickEncoder7serviceEv+0x182>
  { 
    lastButtonCheck = now;
    34ea:	c0 92 8a 09 	sts	0x098A, r12
    34ee:	d0 92 8b 09 	sts	0x098B, r13
    34f2:	e0 92 8c 09 	sts	0x098C, r14
    34f6:	f0 92 8d 09 	sts	0x098D, r15
    
    if (digitalRead(pinBTN) == pinsActive) { // key is down
    34fa:	0e 94 45 2c 	call	0x588a	; 0x588a <digitalRead>
    34fe:	2b 81       	ldd	r18, Y+3	; 0x03
    3500:	30 e0       	ldi	r19, 0x00	; 0
    3502:	82 17       	cp	r24, r18
    3504:	93 07       	cpc	r25, r19
    3506:	71 f4       	brne	.+28     	; 0x3524 <_ZN12ClickEncoder7serviceEv+0x10e>
      keyDownTicks++;
    3508:	80 91 88 09 	lds	r24, 0x0988
    350c:	90 91 89 09 	lds	r25, 0x0989
    3510:	01 96       	adiw	r24, 0x01	; 1
    3512:	90 93 89 09 	sts	0x0989, r25
    3516:	80 93 88 09 	sts	0x0988, r24
      if (keyDownTicks > (ENC_HOLDTIME / ENC_BUTTONINTERVAL)) {
    351a:	89 37       	cpi	r24, 0x79	; 121
    351c:	91 05       	cpc	r25, r1
    351e:	10 f0       	brcs	.+4      	; 0x3524 <_ZN12ClickEncoder7serviceEv+0x10e>
        button = Held;
    3520:	83 e0       	ldi	r24, 0x03	; 3
    3522:	8b 87       	std	Y+11, r24	; 0x0b
      }
    }

    if (digitalRead(pinBTN) == !pinsActive) { // key is now up
    3524:	8a 81       	ldd	r24, Y+2	; 0x02
    3526:	0e 94 45 2c 	call	0x588a	; 0x588a <digitalRead>
    352a:	3b 81       	ldd	r19, Y+3	; 0x03
    352c:	21 e0       	ldi	r18, 0x01	; 1
    352e:	23 27       	eor	r18, r19
    3530:	30 e0       	ldi	r19, 0x00	; 0
    3532:	82 17       	cp	r24, r18
    3534:	93 07       	cpc	r25, r19
    3536:	29 f5       	brne	.+74     	; 0x3582 <_ZN12ClickEncoder7serviceEv+0x16c>
      if (keyDownTicks /*> ENC_BUTTONINTERVAL*/) {
    3538:	80 91 88 09 	lds	r24, 0x0988
    353c:	90 91 89 09 	lds	r25, 0x0989
    3540:	89 2b       	or	r24, r25
    3542:	d9 f0       	breq	.+54     	; 0x357a <_ZN12ClickEncoder7serviceEv+0x164>
        if (button == Held) {
    3544:	8b 85       	ldd	r24, Y+11	; 0x0b
    3546:	83 30       	cpi	r24, 0x03	; 3
    3548:	29 f4       	brne	.+10     	; 0x3554 <_ZN12ClickEncoder7serviceEv+0x13e>
          button = Released;
    354a:	84 e0       	ldi	r24, 0x04	; 4
    354c:	8b 87       	std	Y+11, r24	; 0x0b
          doubleClickTicks = 0;
    354e:	10 92 87 09 	sts	0x0987, r1
    3552:	13 c0       	rjmp	.+38     	; 0x357a <_ZN12ClickEncoder7serviceEv+0x164>
        }
        else {
          #define ENC_SINGLECLICKONLY 1
          if (doubleClickTicks > ENC_SINGLECLICKONLY) {   // prevent trigger in single click mode
    3554:	80 91 87 09 	lds	r24, 0x0987
    3558:	82 30       	cpi	r24, 0x02	; 2
    355a:	38 f0       	brcs	.+14     	; 0x356a <_ZN12ClickEncoder7serviceEv+0x154>
            if (doubleClickTicks < (ENC_DOUBLECLICKTIME / ENC_BUTTONINTERVAL)) {
    355c:	8c 33       	cpi	r24, 0x3C	; 60
    355e:	68 f4       	brcc	.+26     	; 0x357a <_ZN12ClickEncoder7serviceEv+0x164>
              button = DoubleClicked;
    3560:	86 e0       	ldi	r24, 0x06	; 6
    3562:	8b 87       	std	Y+11, r24	; 0x0b
              doubleClickTicks = 0;
    3564:	10 92 87 09 	sts	0x0987, r1
    3568:	08 c0       	rjmp	.+16     	; 0x357a <_ZN12ClickEncoder7serviceEv+0x164>
            }
          }
          else {
            doubleClickTicks = (doubleClickEnabled) ? (ENC_DOUBLECLICKTIME / ENC_BUTTONINTERVAL) : ENC_SINGLECLICKONLY;
    356a:	8c 85       	ldd	r24, Y+12	; 0x0c
    356c:	81 11       	cpse	r24, r1
    356e:	02 c0       	rjmp	.+4      	; 0x3574 <_ZN12ClickEncoder7serviceEv+0x15e>
    3570:	81 e0       	ldi	r24, 0x01	; 1
    3572:	01 c0       	rjmp	.+2      	; 0x3576 <_ZN12ClickEncoder7serviceEv+0x160>
    3574:	8c e3       	ldi	r24, 0x3C	; 60
    3576:	80 93 87 09 	sts	0x0987, r24
          }
        }
      }

      keyDownTicks = 0;
    357a:	10 92 89 09 	sts	0x0989, r1
    357e:	10 92 88 09 	sts	0x0988, r1
    }
  
    if (doubleClickTicks > 0) {
    3582:	80 91 87 09 	lds	r24, 0x0987
    3586:	88 23       	and	r24, r24
    3588:	39 f0       	breq	.+14     	; 0x3598 <_ZN12ClickEncoder7serviceEv+0x182>
      doubleClickTicks--;
      if (--doubleClickTicks == 0) {
    358a:	82 50       	subi	r24, 0x02	; 2
    358c:	80 93 87 09 	sts	0x0987, r24
    3590:	81 11       	cpse	r24, r1
    3592:	02 c0       	rjmp	.+4      	; 0x3598 <_ZN12ClickEncoder7serviceEv+0x182>
        button = Clicked;
    3594:	85 e0       	ldi	r24, 0x05	; 5
    3596:	8b 87       	std	Y+11, r24	; 0x0b
      }
    }
  }
#endif // WITHOUT_BUTTON

}
    3598:	df 91       	pop	r29
    359a:	cf 91       	pop	r28
    359c:	1f 91       	pop	r17
    359e:	0f 91       	pop	r16
    35a0:	ff 90       	pop	r15
    35a2:	ef 90       	pop	r14
    35a4:	df 90       	pop	r13
    35a6:	cf 90       	pop	r12
    35a8:	08 95       	ret

000035aa <_ZN5I2CIOC1Ev>:
      // Remove the values which are not inputs and get the value of the pin
      pinVal = this->read() & _dirMask;
      pinVal = ( pinVal >> pin ) & 0x01; // Get the pin value
   }
   return (pinVal);
}
    35aa:	fc 01       	movw	r30, r24
    35ac:	12 82       	std	Z+2, r1	; 0x02
    35ae:	8f ef       	ldi	r24, 0xFF	; 255
    35b0:	81 83       	std	Z+1, r24	; 0x01
    35b2:	10 82       	st	Z, r1
    35b4:	13 82       	std	Z+3, r1	; 0x03
    35b6:	08 95       	ret

000035b8 <_ZN5I2CIO8portModeEh>:
    35b8:	fc 01       	movw	r30, r24
    35ba:	23 81       	ldd	r18, Z+3	; 0x03
    35bc:	22 23       	and	r18, r18
    35be:	39 f0       	breq	.+14     	; 0x35ce <_ZN5I2CIO8portModeEh+0x16>
    35c0:	61 11       	cpse	r22, r1
    35c2:	03 c0       	rjmp	.+6      	; 0x35ca <_ZN5I2CIO8portModeEh+0x12>
    35c4:	2f ef       	ldi	r18, 0xFF	; 255
    35c6:	21 83       	std	Z+1, r18	; 0x01
    35c8:	08 95       	ret
    35ca:	fc 01       	movw	r30, r24
    35cc:	11 82       	std	Z+1, r1	; 0x01
    35ce:	08 95       	ret

000035d0 <_ZN5I2CIO5beginEh>:
    35d0:	cf 93       	push	r28
    35d2:	df 93       	push	r29
    35d4:	ec 01       	movw	r28, r24
    35d6:	6a 83       	std	Y+2, r22	; 0x02
    35d8:	81 e0       	ldi	r24, 0x01	; 1
    35da:	9a e0       	ldi	r25, 0x0A	; 10
    35dc:	45 d5       	rcall	.+2698   	; 0x4068 <_ZN7TwoWire5beginEv>
    35de:	41 e0       	ldi	r20, 0x01	; 1
    35e0:	6a 81       	ldd	r22, Y+2	; 0x02
    35e2:	81 e0       	ldi	r24, 0x01	; 1
    35e4:	9a e0       	ldi	r25, 0x0A	; 10
    35e6:	56 d5       	rcall	.+2732   	; 0x4094 <_ZN7TwoWire11requestFromEhh>
    35e8:	91 e0       	ldi	r25, 0x01	; 1
    35ea:	81 11       	cpse	r24, r1
    35ec:	01 c0       	rjmp	.+2      	; 0x35f0 <_ZN5I2CIO5beginEh+0x20>
    35ee:	90 e0       	ldi	r25, 0x00	; 0
    35f0:	9b 83       	std	Y+3, r25	; 0x03
    35f2:	81 e0       	ldi	r24, 0x01	; 1
    35f4:	9a e0       	ldi	r25, 0x0A	; 10
    35f6:	a5 d4       	rcall	.+2378   	; 0x3f42 <_ZN7TwoWire4readEv>
    35f8:	88 83       	st	Y, r24
    35fa:	8b 81       	ldd	r24, Y+3	; 0x03
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	df 91       	pop	r29
    3600:	cf 91       	pop	r28
    3602:	08 95       	ret

00003604 <_ZN5I2CIO5writeEh>:
}

//
// write
int I2CIO::write ( uint8_t value )
{
    3604:	cf 93       	push	r28
    3606:	df 93       	push	r29
   int status = 0;
   
   if ( _initialised )
    3608:	fc 01       	movw	r30, r24
    360a:	23 81       	ldd	r18, Z+3	; 0x03
    360c:	22 23       	and	r18, r18
    360e:	99 f0       	breq	.+38     	; 0x3636 <_ZN5I2CIO5writeEh+0x32>
    3610:	ec 01       	movw	r28, r24
   {
      // Only write HIGH the values of the ports that have been initialised as
      // outputs updating the output shadow of the device
      _shadow = ( value & ~(_dirMask) );
    3612:	81 81       	ldd	r24, Z+1	; 0x01
    3614:	80 95       	com	r24
    3616:	68 23       	and	r22, r24
    3618:	60 83       	st	Z, r22
   
      Wire.beginTransmission ( _i2cAddr );
    361a:	62 81       	ldd	r22, Z+2	; 0x02
    361c:	81 e0       	ldi	r24, 0x01	; 1
    361e:	9a e0       	ldi	r25, 0x0A	; 10
    3620:	3c d5       	rcall	.+2680   	; 0x409a <_ZN7TwoWire17beginTransmissionEh>
#if (ARDUINO <  100)
      Wire.send ( _shadow );
#else
      Wire.write ( _shadow );
    3622:	68 81       	ld	r22, Y
    3624:	81 e0       	ldi	r24, 0x01	; 1
    3626:	9a e0       	ldi	r25, 0x0A	; 10
    3628:	df d4       	rcall	.+2494   	; 0x3fe8 <_ZN7TwoWire5writeEh>
#endif  
      status = Wire.endTransmission ();
    362a:	81 e0       	ldi	r24, 0x01	; 1
    362c:	9a e0       	ldi	r25, 0x0A	; 10
    362e:	51 d5       	rcall	.+2722   	; 0x40d2 <_ZN7TwoWire15endTransmissionEv>
    3630:	28 2f       	mov	r18, r24
    3632:	30 e0       	ldi	r19, 0x00	; 0
    3634:	02 c0       	rjmp	.+4      	; 0x363a <_ZN5I2CIO5writeEh+0x36>

//
// write
int I2CIO::write ( uint8_t value )
{
   int status = 0;
    3636:	20 e0       	ldi	r18, 0x00	; 0
    3638:	30 e0       	ldi	r19, 0x00	; 0
#else
      Wire.write ( _shadow );
#endif  
      status = Wire.endTransmission ();
   }
   return ( (status == 0) );
    363a:	81 e0       	ldi	r24, 0x01	; 1
    363c:	90 e0       	ldi	r25, 0x00	; 0
    363e:	23 2b       	or	r18, r19
    3640:	11 f0       	breq	.+4      	; 0x3646 <_ZN5I2CIO5writeEh+0x42>
    3642:	80 e0       	ldi	r24, 0x00	; 0
    3644:	90 e0       	ldi	r25, 0x00	; 0
}
    3646:	df 91       	pop	r29
    3648:	cf 91       	pop	r28
    364a:	08 95       	ret

0000364c <_ZN3LCD15setBacklightPinEh13t_backlighPol>:
// Switch fully on the LCD (backlight and LCD)
void LCD::on ( void )
{
   display();
   backlight();
}
    364c:	08 95       	ret

0000364e <_ZN3LCD12setBacklightEh>:
    364e:	08 95       	ret

00003650 <_ZN3LCD5writeEh>:
    3650:	dc 01       	movw	r26, r24
    3652:	ed 91       	ld	r30, X+
    3654:	fc 91       	ld	r31, X
    3656:	02 84       	ldd	r0, Z+10	; 0x0a
    3658:	f3 85       	ldd	r31, Z+11	; 0x0b
    365a:	e0 2d       	mov	r30, r0
    365c:	41 e0       	ldi	r20, 0x01	; 1
    365e:	19 95       	eicall
    3660:	81 e0       	ldi	r24, 0x01	; 1
    3662:	90 e0       	ldi	r25, 0x00	; 0
    3664:	08 95       	ret

00003666 <_ZN3LCDC1Ev>:
    3666:	fc 01       	movw	r30, r24
    3668:	13 82       	std	Z+3, r1	; 0x03
    366a:	12 82       	std	Z+2, r1	; 0x02
    366c:	2c ee       	ldi	r18, 0xEC	; 236
    366e:	33 e0       	ldi	r19, 0x03	; 3
    3670:	31 83       	std	Z+1, r19	; 0x01
    3672:	20 83       	st	Z, r18
    3674:	08 95       	ret

00003676 <_ZN3LCD9backlightEv>:
    3676:	dc 01       	movw	r26, r24
    3678:	ed 91       	ld	r30, X+
    367a:	fc 91       	ld	r31, X
    367c:	00 84       	ldd	r0, Z+8	; 0x08
    367e:	f1 85       	ldd	r31, Z+9	; 0x09
    3680:	e0 2d       	mov	r30, r0
    3682:	6f ef       	ldi	r22, 0xFF	; 255
    3684:	19 95       	eicall
    3686:	08 95       	ret

00003688 <_ZN3LCD7commandEh>:
    3688:	dc 01       	movw	r26, r24
    368a:	ed 91       	ld	r30, X+
    368c:	fc 91       	ld	r31, X
    368e:	02 84       	ldd	r0, Z+10	; 0x0a
    3690:	f3 85       	ldd	r31, Z+11	; 0x0b
    3692:	e0 2d       	mov	r30, r0
    3694:	40 e0       	ldi	r20, 0x00	; 0
    3696:	19 95       	eicall
    3698:	08 95       	ret

0000369a <_ZN3LCD5clearEv>:
    369a:	61 e0       	ldi	r22, 0x01	; 1
    369c:	f5 df       	rcall	.-22     	; 0x3688 <_ZN3LCD7commandEh>
    369e:	80 ed       	ldi	r24, 0xD0	; 208
    36a0:	97 e0       	ldi	r25, 0x07	; 7
    36a2:	0c 94 dd 2a 	jmp	0x55ba	; 0x55ba <delayMicroseconds>
    36a6:	08 95       	ret

000036a8 <_ZN3LCD9setCursorEhh>:
    36a8:	cf 93       	push	r28
    36aa:	df 93       	push	r29
    36ac:	cd b7       	in	r28, 0x3d	; 61
    36ae:	de b7       	in	r29, 0x3e	; 62
    36b0:	28 97       	sbiw	r28, 0x08	; 8
    36b2:	0f b6       	in	r0, 0x3f	; 63
    36b4:	f8 94       	cli
    36b6:	de bf       	out	0x3e, r29	; 62
    36b8:	0f be       	out	0x3f, r0	; 63
    36ba:	cd bf       	out	0x3d, r28	; 61
    36bc:	fc 01       	movw	r30, r24
    36be:	1d 82       	std	Y+5, r1	; 0x05
    36c0:	80 e4       	ldi	r24, 0x40	; 64
    36c2:	8e 83       	std	Y+6, r24	; 0x06
    36c4:	94 e1       	ldi	r25, 0x14	; 20
    36c6:	9f 83       	std	Y+7, r25	; 0x07
    36c8:	94 e5       	ldi	r25, 0x54	; 84
    36ca:	98 87       	std	Y+8, r25	; 0x08
    36cc:	19 82       	std	Y+1, r1	; 0x01
    36ce:	8a 83       	std	Y+2, r24	; 0x02
    36d0:	80 e1       	ldi	r24, 0x10	; 16
    36d2:	8b 83       	std	Y+3, r24	; 0x03
    36d4:	80 e5       	ldi	r24, 0x50	; 80
    36d6:	8c 83       	std	Y+4, r24	; 0x04
    36d8:	87 81       	ldd	r24, Z+7	; 0x07
    36da:	48 17       	cp	r20, r24
    36dc:	10 f0       	brcs	.+4      	; 0x36e2 <_ZN3LCD9setCursorEhh+0x3a>
    36de:	4f ef       	ldi	r20, 0xFF	; 255
    36e0:	48 0f       	add	r20, r24
    36e2:	90 85       	ldd	r25, Z+8	; 0x08
    36e4:	90 31       	cpi	r25, 0x10	; 16
    36e6:	61 f4       	brne	.+24     	; 0x3700 <_ZN3LCD9setCursorEhh+0x58>
    36e8:	84 30       	cpi	r24, 0x04	; 4
    36ea:	51 f4       	brne	.+20     	; 0x3700 <_ZN3LCD9setCursorEhh+0x58>
    36ec:	de 01       	movw	r26, r28
    36ee:	a4 0f       	add	r26, r20
    36f0:	b1 1d       	adc	r27, r1
    36f2:	11 96       	adiw	r26, 0x01	; 1
    36f4:	8c 91       	ld	r24, X
    36f6:	68 0f       	add	r22, r24
    36f8:	60 68       	ori	r22, 0x80	; 128
    36fa:	cf 01       	movw	r24, r30
    36fc:	c5 df       	rcall	.-118    	; 0x3688 <_ZN3LCD7commandEh>
    36fe:	09 c0       	rjmp	.+18     	; 0x3712 <_ZN3LCD9setCursorEhh+0x6a>
    3700:	de 01       	movw	r26, r28
    3702:	a4 0f       	add	r26, r20
    3704:	b1 1d       	adc	r27, r1
    3706:	15 96       	adiw	r26, 0x05	; 5
    3708:	9c 91       	ld	r25, X
    370a:	69 0f       	add	r22, r25
    370c:	60 68       	ori	r22, 0x80	; 128
    370e:	cf 01       	movw	r24, r30
    3710:	bb df       	rcall	.-138    	; 0x3688 <_ZN3LCD7commandEh>
    3712:	28 96       	adiw	r28, 0x08	; 8
    3714:	0f b6       	in	r0, 0x3f	; 63
    3716:	f8 94       	cli
    3718:	de bf       	out	0x3e, r29	; 62
    371a:	0f be       	out	0x3f, r0	; 63
    371c:	cd bf       	out	0x3d, r28	; 61
    371e:	df 91       	pop	r29
    3720:	cf 91       	pop	r28
    3722:	08 95       	ret

00003724 <_ZN3LCD7displayEv>:
    3724:	fc 01       	movw	r30, r24
    3726:	65 81       	ldd	r22, Z+5	; 0x05
    3728:	26 2f       	mov	r18, r22
    372a:	24 60       	ori	r18, 0x04	; 4
    372c:	25 83       	std	Z+5, r18	; 0x05
    372e:	6c 60       	ori	r22, 0x0C	; 12
    3730:	ab cf       	rjmp	.-170    	; 0x3688 <_ZN3LCD7commandEh>
    3732:	08 95       	ret

00003734 <_ZN3LCD5beginEhhh>:
// can't assume that its in that state when a sketch starts (and the
// LiquidCrystal constructor is called).
// A call to begin() will reinitialize the LCD.
//
void LCD::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
    3734:	cf 93       	push	r28
    3736:	df 93       	push	r29
    3738:	ec 01       	movw	r28, r24
   if (lines > 1) 
    373a:	42 30       	cpi	r20, 0x02	; 2
    373c:	18 f0       	brcs	.+6      	; 0x3744 <_ZN3LCD5beginEhhh+0x10>
   {
      _displayfunction |= LCD_2LINE;
    373e:	8c 81       	ldd	r24, Y+4	; 0x04
    3740:	88 60       	ori	r24, 0x08	; 8
    3742:	8c 83       	std	Y+4, r24	; 0x04
   }
   _numlines = lines;
    3744:	4f 83       	std	Y+7, r20	; 0x07
   _cols = cols;
    3746:	68 87       	std	Y+8, r22	; 0x08
   
   // for some 1 line displays you can select a 10 pixel high font
   // ------------------------------------------------------------
   if ((dotsize != LCD_5x8DOTS) && (lines == 1)) 
    3748:	22 23       	and	r18, r18
    374a:	29 f0       	breq	.+10     	; 0x3756 <_ZN3LCD5beginEhhh+0x22>
    374c:	41 30       	cpi	r20, 0x01	; 1
    374e:	19 f4       	brne	.+6      	; 0x3756 <_ZN3LCD5beginEhhh+0x22>
   {
      _displayfunction |= LCD_5x10DOTS;
    3750:	8c 81       	ldd	r24, Y+4	; 0x04
    3752:	84 60       	ori	r24, 0x04	; 4
    3754:	8c 83       	std	Y+4, r24	; 0x04
   // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
   // according to datasheet, we need at least 40ms after power rises above 2.7V
   // before sending commands. Arduino can turn on way before 4.5V so we'll wait 
   // 50
   // ---------------------------------------------------------------------------
   delay (100); // 100ms delay
    3756:	64 e6       	ldi	r22, 0x64	; 100
    3758:	70 e0       	ldi	r23, 0x00	; 0
    375a:	80 e0       	ldi	r24, 0x00	; 0
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	0e 94 b4 2a 	call	0x5568	; 0x5568 <delay>
   
   //put the LCD into 4 bit or 8 bit mode
   // -------------------------------------
   if (! (_displayfunction & LCD_8BITMODE)) 
    3762:	6c 81       	ldd	r22, Y+4	; 0x04
    3764:	64 fd       	sbrc	r22, 4
    3766:	31 c0       	rjmp	.+98     	; 0x37ca <_ZN3LCD5beginEhhh+0x96>
   {
      // this is according to the hitachi HD44780 datasheet
      // figure 24, pg 46
      
      // we start in 8bit mode, try to set 4 bit mode
      send(0x03, FOUR_BITS);
    3768:	e8 81       	ld	r30, Y
    376a:	f9 81       	ldd	r31, Y+1	; 0x01
    376c:	02 84       	ldd	r0, Z+10	; 0x0a
    376e:	f3 85       	ldd	r31, Z+11	; 0x0b
    3770:	e0 2d       	mov	r30, r0
    3772:	42 e0       	ldi	r20, 0x02	; 2
    3774:	63 e0       	ldi	r22, 0x03	; 3
    3776:	ce 01       	movw	r24, r28
    3778:	19 95       	eicall
      delayMicroseconds(4500); // wait min 4.1ms
    377a:	84 e9       	ldi	r24, 0x94	; 148
    377c:	91 e1       	ldi	r25, 0x11	; 17
    377e:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <delayMicroseconds>
      
      // second try
      send ( 0x03, FOUR_BITS );
    3782:	e8 81       	ld	r30, Y
    3784:	f9 81       	ldd	r31, Y+1	; 0x01
    3786:	02 84       	ldd	r0, Z+10	; 0x0a
    3788:	f3 85       	ldd	r31, Z+11	; 0x0b
    378a:	e0 2d       	mov	r30, r0
    378c:	42 e0       	ldi	r20, 0x02	; 2
    378e:	63 e0       	ldi	r22, 0x03	; 3
    3790:	ce 01       	movw	r24, r28
    3792:	19 95       	eicall
      delayMicroseconds(4500); // wait min 4.1ms
    3794:	84 e9       	ldi	r24, 0x94	; 148
    3796:	91 e1       	ldi	r25, 0x11	; 17
    3798:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <delayMicroseconds>
      
      // third go!
      send( 0x03, FOUR_BITS );
    379c:	e8 81       	ld	r30, Y
    379e:	f9 81       	ldd	r31, Y+1	; 0x01
    37a0:	02 84       	ldd	r0, Z+10	; 0x0a
    37a2:	f3 85       	ldd	r31, Z+11	; 0x0b
    37a4:	e0 2d       	mov	r30, r0
    37a6:	42 e0       	ldi	r20, 0x02	; 2
    37a8:	63 e0       	ldi	r22, 0x03	; 3
    37aa:	ce 01       	movw	r24, r28
    37ac:	19 95       	eicall
      delayMicroseconds(150);
    37ae:	86 e9       	ldi	r24, 0x96	; 150
    37b0:	90 e0       	ldi	r25, 0x00	; 0
    37b2:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <delayMicroseconds>
      
      // finally, set to 4-bit interface
      send ( 0x02, FOUR_BITS ); 
    37b6:	e8 81       	ld	r30, Y
    37b8:	f9 81       	ldd	r31, Y+1	; 0x01
    37ba:	02 84       	ldd	r0, Z+10	; 0x0a
    37bc:	f3 85       	ldd	r31, Z+11	; 0x0b
    37be:	e0 2d       	mov	r30, r0
    37c0:	42 e0       	ldi	r20, 0x02	; 2
    37c2:	62 e0       	ldi	r22, 0x02	; 2
    37c4:	ce 01       	movw	r24, r28
    37c6:	19 95       	eicall
    37c8:	13 c0       	rjmp	.+38     	; 0x37f0 <_ZN3LCD5beginEhhh+0xbc>
   {
      // this is according to the hitachi HD44780 datasheet
      // page 45 figure 23
      
      // Send function set command sequence
      command(LCD_FUNCTIONSET | _displayfunction);
    37ca:	60 62       	ori	r22, 0x20	; 32
    37cc:	ce 01       	movw	r24, r28
    37ce:	5c df       	rcall	.-328    	; 0x3688 <_ZN3LCD7commandEh>
      delayMicroseconds(4500);  // wait more than 4.1ms
    37d0:	84 e9       	ldi	r24, 0x94	; 148
    37d2:	91 e1       	ldi	r25, 0x11	; 17
    37d4:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <delayMicroseconds>
      
      // second try
      command(LCD_FUNCTIONSET | _displayfunction);
    37d8:	6c 81       	ldd	r22, Y+4	; 0x04
    37da:	60 62       	ori	r22, 0x20	; 32
    37dc:	ce 01       	movw	r24, r28
    37de:	54 df       	rcall	.-344    	; 0x3688 <_ZN3LCD7commandEh>
      delayMicroseconds(150);
    37e0:	86 e9       	ldi	r24, 0x96	; 150
    37e2:	90 e0       	ldi	r25, 0x00	; 0
    37e4:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <delayMicroseconds>
      
      // third go
      command(LCD_FUNCTIONSET | _displayfunction);
    37e8:	6c 81       	ldd	r22, Y+4	; 0x04
    37ea:	60 62       	ori	r22, 0x20	; 32
    37ec:	ce 01       	movw	r24, r28
    37ee:	4c df       	rcall	.-360    	; 0x3688 <_ZN3LCD7commandEh>
   }
   
   // finally, set # lines, font size, etc.
   command(LCD_FUNCTIONSET | _displayfunction);  
    37f0:	6c 81       	ldd	r22, Y+4	; 0x04
    37f2:	60 62       	ori	r22, 0x20	; 32
    37f4:	ce 01       	movw	r24, r28
    37f6:	48 df       	rcall	.-368    	; 0x3688 <_ZN3LCD7commandEh>
   
   // turn the display on with no cursor or blinking default
   _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
    37f8:	84 e0       	ldi	r24, 0x04	; 4
    37fa:	8d 83       	std	Y+5, r24	; 0x05
   display();
    37fc:	ce 01       	movw	r24, r28
    37fe:	92 df       	rcall	.-220    	; 0x3724 <_ZN3LCD7displayEv>
   
   // clear the LCD
   clear();
    3800:	ce 01       	movw	r24, r28
    3802:	4b df       	rcall	.-362    	; 0x369a <_ZN3LCD5clearEv>
   
   // Initialize to default text direction (for romance languages)
   _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    3804:	82 e0       	ldi	r24, 0x02	; 2
    3806:	8e 83       	std	Y+6, r24	; 0x06
   // set the entry mode
   command(LCD_ENTRYMODESET | _displaymode);
    3808:	66 e0       	ldi	r22, 0x06	; 6
    380a:	ce 01       	movw	r24, r28
    380c:	3d df       	rcall	.-390    	; 0x3688 <_ZN3LCD7commandEh>

   backlight();
    380e:	ce 01       	movw	r24, r28
    3810:	32 df       	rcall	.-412    	; 0x3676 <_ZN3LCD9backlightEv>

}
    3812:	df 91       	pop	r29
    3814:	cf 91       	pop	r28
    3816:	08 95       	ret

00003818 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>:
   // Initialise pin mapping
   _data_pins[0] = ( 1 << d4 );
   _data_pins[1] = ( 1 << d5 );
   _data_pins[2] = ( 1 << d6 );
   _data_pins[3] = ( 1 << d7 );   
}
    3818:	21 e0       	ldi	r18, 0x01	; 1
    381a:	01 c0       	rjmp	.+2      	; 0x381e <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x6>
    381c:	22 0f       	add	r18, r18
    381e:	6a 95       	dec	r22
    3820:	ea f7       	brpl	.-6      	; 0x381c <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x4>
    3822:	dc 01       	movw	r26, r24
    3824:	1b 96       	adiw	r26, 0x0b	; 11
    3826:	2c 93       	st	X, r18
    3828:	1b 97       	sbiw	r26, 0x0b	; 11
    382a:	19 96       	adiw	r26, 0x09	; 9
    382c:	4c 93       	st	X, r20
    382e:	19 97       	sbiw	r26, 0x09	; 9
    3830:	ed 91       	ld	r30, X+
    3832:	fc 91       	ld	r31, X
    3834:	00 84       	ldd	r0, Z+8	; 0x08
    3836:	f1 85       	ldd	r31, Z+9	; 0x09
    3838:	e0 2d       	mov	r30, r0
    383a:	60 e0       	ldi	r22, 0x00	; 0
    383c:	19 95       	eicall
    383e:	08 95       	ret

00003840 <_ZN17LiquidCrystal_I2C12setBacklightEh>:
    3840:	fc 01       	movw	r30, r24
    3842:	83 85       	ldd	r24, Z+11	; 0x0b
    3844:	88 23       	and	r24, r24
    3846:	89 f0       	breq	.+34     	; 0x386a <_ZN17LiquidCrystal_I2C12setBacklightEh+0x2a>
    3848:	91 85       	ldd	r25, Z+9	; 0x09
    384a:	91 11       	cpse	r25, r1
    384c:	03 c0       	rjmp	.+6      	; 0x3854 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x14>
    384e:	61 11       	cpse	r22, r1
    3850:	05 c0       	rjmp	.+10     	; 0x385c <_ZN17LiquidCrystal_I2C12setBacklightEh+0x1c>
    3852:	06 c0       	rjmp	.+12     	; 0x3860 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    3854:	91 30       	cpi	r25, 0x01	; 1
    3856:	21 f4       	brne	.+8      	; 0x3860 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    3858:	61 11       	cpse	r22, r1
    385a:	02 c0       	rjmp	.+4      	; 0x3860 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    385c:	84 87       	std	Z+12, r24	; 0x0c
    385e:	01 c0       	rjmp	.+2      	; 0x3862 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x22>
    3860:	14 86       	std	Z+12, r1	; 0x0c
    3862:	64 85       	ldd	r22, Z+12	; 0x0c
    3864:	cf 01       	movw	r24, r30
    3866:	0d 96       	adiw	r24, 0x0d	; 13
    3868:	cd ce       	rjmp	.-614    	; 0x3604 <_ZN5I2CIO5writeEh>
    386a:	08 95       	ret

0000386c <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh>:
    386c:	6f 92       	push	r6
    386e:	7f 92       	push	r7
    3870:	8f 92       	push	r8
    3872:	af 92       	push	r10
    3874:	cf 92       	push	r12
    3876:	df 92       	push	r13
    3878:	ef 92       	push	r14
    387a:	ff 92       	push	r15
    387c:	0f 93       	push	r16
    387e:	1f 93       	push	r17
    3880:	cf 93       	push	r28
    3882:	df 93       	push	r29
    3884:	cd b7       	in	r28, 0x3d	; 61
    3886:	de b7       	in	r29, 0x3e	; 62
    3888:	3c 01       	movw	r6, r24
    388a:	d6 2e       	mov	r13, r22
    388c:	f4 2e       	mov	r15, r20
    388e:	12 2f       	mov	r17, r18
    3890:	ea de       	rcall	.-556    	; 0x3666 <_ZN3LCDC1Ev>
    3892:	8c ef       	ldi	r24, 0xFC	; 252
    3894:	93 e0       	ldi	r25, 0x03	; 3
    3896:	f3 01       	movw	r30, r6
    3898:	91 83       	std	Z+1, r25	; 0x01
    389a:	80 83       	st	Z, r24
    389c:	c3 01       	movw	r24, r6
    389e:	0d 96       	adiw	r24, 0x0d	; 13
    38a0:	84 de       	rcall	.-760    	; 0x35aa <_ZN5I2CIOC1Ev>
    38a2:	f3 01       	movw	r30, r6
    38a4:	d2 86       	std	Z+10, r13	; 0x0a
    38a6:	13 86       	std	Z+11, r1	; 0x0b
    38a8:	14 86       	std	Z+12, r1	; 0x0c
    38aa:	11 86       	std	Z+9, r1	; 0x09
    38ac:	81 e0       	ldi	r24, 0x01	; 1
    38ae:	98 2f       	mov	r25, r24
    38b0:	01 c0       	rjmp	.+2      	; 0x38b4 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x48>
    38b2:	99 0f       	add	r25, r25
    38b4:	fa 94       	dec	r15
    38b6:	ea f7       	brpl	.-6      	; 0x38b2 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x46>
    38b8:	91 8b       	std	Z+17, r25	; 0x11
    38ba:	98 2f       	mov	r25, r24
    38bc:	01 c0       	rjmp	.+2      	; 0x38c0 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x54>
    38be:	99 0f       	add	r25, r25
    38c0:	1a 95       	dec	r17
    38c2:	ea f7       	brpl	.-6      	; 0x38be <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x52>
    38c4:	92 8b       	std	Z+18, r25	; 0x12
    38c6:	98 2f       	mov	r25, r24
    38c8:	01 c0       	rjmp	.+2      	; 0x38cc <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x60>
    38ca:	99 0f       	add	r25, r25
    38cc:	0a 95       	dec	r16
    38ce:	ea f7       	brpl	.-6      	; 0x38ca <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x5e>
    38d0:	93 8b       	std	Z+19, r25	; 0x13
    38d2:	98 2f       	mov	r25, r24
    38d4:	01 c0       	rjmp	.+2      	; 0x38d8 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x6c>
    38d6:	99 0f       	add	r25, r25
    38d8:	ea 94       	dec	r14
    38da:	ea f7       	brpl	.-6      	; 0x38d6 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x6a>
    38dc:	94 8b       	std	Z+20, r25	; 0x14
    38de:	98 2f       	mov	r25, r24
    38e0:	01 c0       	rjmp	.+2      	; 0x38e4 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x78>
    38e2:	99 0f       	add	r25, r25
    38e4:	ca 94       	dec	r12
    38e6:	ea f7       	brpl	.-6      	; 0x38e2 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x76>
    38e8:	95 8b       	std	Z+21, r25	; 0x15
    38ea:	98 2f       	mov	r25, r24
    38ec:	01 c0       	rjmp	.+2      	; 0x38f0 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x84>
    38ee:	99 0f       	add	r25, r25
    38f0:	aa 94       	dec	r10
    38f2:	ea f7       	brpl	.-6      	; 0x38ee <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x82>
    38f4:	96 8b       	std	Z+22, r25	; 0x16
    38f6:	01 c0       	rjmp	.+2      	; 0x38fa <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x8e>
    38f8:	88 0f       	add	r24, r24
    38fa:	8a 94       	dec	r8
    38fc:	ea f7       	brpl	.-6      	; 0x38f8 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x8c>
    38fe:	87 8b       	std	Z+23, r24	; 0x17
    3900:	df 91       	pop	r29
    3902:	cf 91       	pop	r28
    3904:	1f 91       	pop	r17
    3906:	0f 91       	pop	r16
    3908:	ff 90       	pop	r15
    390a:	ef 90       	pop	r14
    390c:	df 90       	pop	r13
    390e:	cf 90       	pop	r12
    3910:	af 90       	pop	r10
    3912:	8f 90       	pop	r8
    3914:	7f 90       	pop	r7
    3916:	6f 90       	pop	r6
    3918:	08 95       	ret

0000391a <_ZN17LiquidCrystal_I2C4initEv>:
    391a:	0f 93       	push	r16
    391c:	1f 93       	push	r17
    391e:	cf 93       	push	r28
    3920:	df 93       	push	r29
    3922:	ec 01       	movw	r28, r24
    3924:	8c 01       	movw	r16, r24
    3926:	03 5f       	subi	r16, 0xF3	; 243
    3928:	1f 4f       	sbci	r17, 0xFF	; 255
    392a:	6a 85       	ldd	r22, Y+10	; 0x0a
    392c:	c8 01       	movw	r24, r16
    392e:	50 de       	rcall	.-864    	; 0x35d0 <_ZN5I2CIO5beginEh>
    3930:	01 97       	sbiw	r24, 0x01	; 1
    3932:	51 f4       	brne	.+20     	; 0x3948 <_ZN17LiquidCrystal_I2C4initEv+0x2e>
    3934:	61 e0       	ldi	r22, 0x01	; 1
    3936:	c8 01       	movw	r24, r16
    3938:	3f de       	rcall	.-898    	; 0x35b8 <_ZN5I2CIO8portModeEh>
    393a:	1c 82       	std	Y+4, r1	; 0x04
    393c:	60 e0       	ldi	r22, 0x00	; 0
    393e:	c8 01       	movw	r24, r16
    3940:	61 de       	rcall	.-830    	; 0x3604 <_ZN5I2CIO5writeEh>
    3942:	81 e0       	ldi	r24, 0x01	; 1
    3944:	90 e0       	ldi	r25, 0x00	; 0
    3946:	02 c0       	rjmp	.+4      	; 0x394c <_ZN17LiquidCrystal_I2C4initEv+0x32>
    3948:	80 e0       	ldi	r24, 0x00	; 0
    394a:	90 e0       	ldi	r25, 0x00	; 0
    394c:	df 91       	pop	r29
    394e:	cf 91       	pop	r28
    3950:	1f 91       	pop	r17
    3952:	0f 91       	pop	r16
    3954:	08 95       	ret

00003956 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
}

//
// pulseEnable
void LiquidCrystal_I2C::pulseEnable (uint8_t data)
{
    3956:	ff 92       	push	r15
    3958:	0f 93       	push	r16
    395a:	1f 93       	push	r17
    395c:	cf 93       	push	r28
    395e:	df 93       	push	r29
    3960:	ec 01       	movw	r28, r24
    3962:	f6 2e       	mov	r15, r22
   _i2cio.write (data | _En);   // En HIGH
    3964:	8c 01       	movw	r16, r24
    3966:	03 5f       	subi	r16, 0xF3	; 243
    3968:	1f 4f       	sbci	r17, 0xFF	; 255
    396a:	99 89       	ldd	r25, Y+17	; 0x11
    396c:	69 2b       	or	r22, r25
    396e:	c8 01       	movw	r24, r16
    3970:	49 de       	rcall	.-878    	; 0x3604 <_ZN5I2CIO5writeEh>
   _i2cio.write (data & ~_En);  // En LOW
    3972:	99 89       	ldd	r25, Y+17	; 0x11
    3974:	90 95       	com	r25
    3976:	6f 2d       	mov	r22, r15
    3978:	69 23       	and	r22, r25
    397a:	c8 01       	movw	r24, r16
    397c:	43 de       	rcall	.-890    	; 0x3604 <_ZN5I2CIO5writeEh>
    397e:	df 91       	pop	r29
    3980:	cf 91       	pop	r28
    3982:	1f 91       	pop	r17
    3984:	0f 91       	pop	r16
    3986:	ff 90       	pop	r15
    3988:	08 95       	ret

0000398a <_ZN17LiquidCrystal_I2C10write4bitsEhh>:
}

//
// write4bits
void LiquidCrystal_I2C::write4bits ( uint8_t value, uint8_t mode ) 
{
    398a:	dc 01       	movw	r26, r24
    398c:	fc 01       	movw	r30, r24
    398e:	74 96       	adiw	r30, 0x14	; 20
    3990:	9c 01       	movw	r18, r24
    3992:	28 5e       	subi	r18, 0xE8	; 232
    3994:	3f 4f       	sbci	r19, 0xFF	; 255
   uint8_t pinMapValue = 0;
    3996:	90 e0       	ldi	r25, 0x00	; 0
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
   {
      if ( ( value & 0x1 ) == 1 )
    3998:	60 ff       	sbrs	r22, 0
    399a:	02 c0       	rjmp	.+4      	; 0x39a0 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x16>
      {
         pinMapValue |= _data_pins[i];
    399c:	80 81       	ld	r24, Z
    399e:	98 2b       	or	r25, r24
      }
      value = ( value >> 1 );
    39a0:	66 95       	lsr	r22
    39a2:	31 96       	adiw	r30, 0x01	; 1
{
   uint8_t pinMapValue = 0;
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
    39a4:	e2 17       	cp	r30, r18
    39a6:	f3 07       	cpc	r31, r19
    39a8:	b9 f7       	brne	.-18     	; 0x3998 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0xe>
      value = ( value >> 1 );
   }
   
   // Is it a command or data
   // -----------------------
   if ( mode == DATA )
    39aa:	41 30       	cpi	r20, 0x01	; 1
    39ac:	19 f4       	brne	.+6      	; 0x39b4 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x2a>
   {
      mode = _Rs;
    39ae:	53 96       	adiw	r26, 0x13	; 19
    39b0:	4c 91       	ld	r20, X
    39b2:	53 97       	sbiw	r26, 0x13	; 19
    39b4:	1c 96       	adiw	r26, 0x0c	; 12
    39b6:	6c 91       	ld	r22, X
    39b8:	1c 97       	sbiw	r26, 0x0c	; 12
    39ba:	69 2b       	or	r22, r25
   }
   
   pinMapValue |= mode | _backlightStsMask;
    39bc:	64 2b       	or	r22, r20
   pulseEnable ( pinMapValue );
    39be:	cd 01       	movw	r24, r26
    39c0:	ca cf       	rjmp	.-108    	; 0x3956 <_ZN17LiquidCrystal_I2C11pulseEnableEh>
    39c2:	08 95       	ret

000039c4 <_ZN17LiquidCrystal_I2C4sendEhh>:
//----------------------------------------------------------------------------

//
// send - write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) 
{
    39c4:	0f 93       	push	r16
    39c6:	1f 93       	push	r17
    39c8:	cf 93       	push	r28
    39ca:	df 93       	push	r29
    39cc:	8c 01       	movw	r16, r24
    39ce:	c6 2f       	mov	r28, r22
    39d0:	d4 2f       	mov	r29, r20
   // No need to use the delay routines since the time taken to write takes
   // longer that what is needed both for toggling and enable pin an to execute
   // the command.
   
   if ( mode == FOUR_BITS )
    39d2:	42 30       	cpi	r20, 0x02	; 2
    39d4:	21 f4       	brne	.+8      	; 0x39de <_ZN17LiquidCrystal_I2C4sendEhh+0x1a>
   {
      write4bits( (value & 0x0F), COMMAND );
    39d6:	6f 70       	andi	r22, 0x0F	; 15
    39d8:	40 e0       	ldi	r20, 0x00	; 0
    39da:	d7 df       	rcall	.-82     	; 0x398a <_ZN17LiquidCrystal_I2C10write4bitsEhh>
    39dc:	0f c0       	rjmp	.+30     	; 0x39fc <_ZN17LiquidCrystal_I2C4sendEhh+0x38>
   }
   else 
   {
      write4bits( (value >> 4), mode );
    39de:	70 e0       	ldi	r23, 0x00	; 0
    39e0:	75 95       	asr	r23
    39e2:	67 95       	ror	r22
    39e4:	75 95       	asr	r23
    39e6:	67 95       	ror	r22
    39e8:	75 95       	asr	r23
    39ea:	67 95       	ror	r22
    39ec:	75 95       	asr	r23
    39ee:	67 95       	ror	r22
    39f0:	cc df       	rcall	.-104    	; 0x398a <_ZN17LiquidCrystal_I2C10write4bitsEhh>
      write4bits( (value & 0x0F), mode);
    39f2:	6c 2f       	mov	r22, r28
    39f4:	6f 70       	andi	r22, 0x0F	; 15
    39f6:	4d 2f       	mov	r20, r29
    39f8:	c8 01       	movw	r24, r16
    39fa:	c7 df       	rcall	.-114    	; 0x398a <_ZN17LiquidCrystal_I2C10write4bitsEhh>
   }
}
    39fc:	df 91       	pop	r29
    39fe:	cf 91       	pop	r28
    3a00:	1f 91       	pop	r17
    3a02:	0f 91       	pop	r16
    3a04:	08 95       	ret

00003a06 <_ZN17LiquidCrystal_I2C5beginEhhh>:
// ---------------------------------------------------------------------------

//
// begin
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
    3a06:	ff 92       	push	r15
    3a08:	0f 93       	push	r16
    3a0a:	1f 93       	push	r17
    3a0c:	cf 93       	push	r28
    3a0e:	df 93       	push	r29
    3a10:	ec 01       	movw	r28, r24
    3a12:	16 2f       	mov	r17, r22
    3a14:	04 2f       	mov	r16, r20
    3a16:	f2 2e       	mov	r15, r18
   
   init();     // Initialise the I2C expander interface
    3a18:	80 df       	rcall	.-256    	; 0x391a <_ZN17LiquidCrystal_I2C4initEv>
   LCD::begin ( cols, lines, dotsize );   
    3a1a:	2f 2d       	mov	r18, r15
    3a1c:	40 2f       	mov	r20, r16
    3a1e:	61 2f       	mov	r22, r17
    3a20:	ce 01       	movw	r24, r28
    3a22:	88 de       	rcall	.-752    	; 0x3734 <_ZN3LCD5beginEhhh>
}
    3a24:	df 91       	pop	r29
    3a26:	cf 91       	pop	r28
    3a28:	1f 91       	pop	r17
    3a2a:	0f 91       	pop	r16
    3a2c:	ff 90       	pop	r15
    3a2e:	08 95       	ret

00003a30 <_Z12freeListSizev>:
/* Calculates the size of the free list */
int freeListSize()
{
  struct __freelist* current;
  int total = 0;
  for (current = __flp; current; current = current->nx)
    3a30:	e0 91 01 0d 	lds	r30, 0x0D01
    3a34:	f0 91 02 0d 	lds	r31, 0x0D02
    3a38:	30 97       	sbiw	r30, 0x00	; 0
    3a3a:	69 f0       	breq	.+26     	; 0x3a56 <_Z12freeListSizev+0x26>
    3a3c:	80 e0       	ldi	r24, 0x00	; 0
    3a3e:	90 e0       	ldi	r25, 0x00	; 0
  {
    total += 2; /* Add two bytes for the memory block's header  */
    3a40:	02 96       	adiw	r24, 0x02	; 2
    total += (int) current->sz;
    3a42:	20 81       	ld	r18, Z
    3a44:	31 81       	ldd	r19, Z+1	; 0x01
    3a46:	82 0f       	add	r24, r18
    3a48:	93 1f       	adc	r25, r19
/* Calculates the size of the free list */
int freeListSize()
{
  struct __freelist* current;
  int total = 0;
  for (current = __flp; current; current = current->nx)
    3a4a:	02 80       	ldd	r0, Z+2	; 0x02
    3a4c:	f3 81       	ldd	r31, Z+3	; 0x03
    3a4e:	e0 2d       	mov	r30, r0
    3a50:	30 97       	sbiw	r30, 0x00	; 0
    3a52:	b1 f7       	brne	.-20     	; 0x3a40 <_Z12freeListSizev+0x10>
    3a54:	08 95       	ret

/* Calculates the size of the free list */
int freeListSize()
{
  struct __freelist* current;
  int total = 0;
    3a56:	80 e0       	ldi	r24, 0x00	; 0
    3a58:	90 e0       	ldi	r25, 0x00	; 0
    total += 2; /* Add two bytes for the memory block's header  */
    total += (int) current->sz;
  }

  return total;
}
    3a5a:	08 95       	ret

00003a5c <freeMemory>:

int freeMemory()
{
    3a5c:	0f 93       	push	r16
    3a5e:	1f 93       	push	r17
    3a60:	cf 93       	push	r28
    3a62:	df 93       	push	r29
    3a64:	1f 92       	push	r1
    3a66:	1f 92       	push	r1
    3a68:	cd b7       	in	r28, 0x3d	; 61
    3a6a:	de b7       	in	r29, 0x3e	; 62
  int free_memory;
  if ((int)__brkval == 0)
    3a6c:	80 91 ff 0c 	lds	r24, 0x0CFF
    3a70:	90 91 00 0d 	lds	r25, 0x0D00
    3a74:	00 97       	sbiw	r24, 0x00	; 0
    3a76:	31 f4       	brne	.+12     	; 0x3a84 <freeMemory+0x28>
  {
    free_memory = ((int)&free_memory) - ((int)&__heap_start);
    3a78:	ce 01       	movw	r24, r28
    3a7a:	82 50       	subi	r24, 0x02	; 2
    3a7c:	9d 40       	sbci	r25, 0x0D	; 13
    3a7e:	9a 83       	std	Y+2, r25	; 0x02
    3a80:	89 83       	std	Y+1, r24	; 0x01
    3a82:	0c c0       	rjmp	.+24     	; 0x3a9c <freeMemory+0x40>
  }
  else
  {
    free_memory = ((int)&free_memory) - ((int)__brkval);
    3a84:	8e 01       	movw	r16, r28
    3a86:	0f 5f       	subi	r16, 0xFF	; 255
    3a88:	1f 4f       	sbci	r17, 0xFF	; 255
    3a8a:	08 1b       	sub	r16, r24
    3a8c:	19 0b       	sbc	r17, r25
    3a8e:	1a 83       	std	Y+2, r17	; 0x02
    3a90:	09 83       	std	Y+1, r16	; 0x01
    free_memory += freeListSize();
    3a92:	ce df       	rcall	.-100    	; 0x3a30 <_Z12freeListSizev>
    3a94:	80 0f       	add	r24, r16
    3a96:	91 1f       	adc	r25, r17
    3a98:	9a 83       	std	Y+2, r25	; 0x02
    3a9a:	89 83       	std	Y+1, r24	; 0x01
  }
  return free_memory;
}
    3a9c:	89 81       	ldd	r24, Y+1	; 0x01
    3a9e:	9a 81       	ldd	r25, Y+2	; 0x02
    3aa0:	0f 90       	pop	r0
    3aa2:	0f 90       	pop	r0
    3aa4:	df 91       	pop	r29
    3aa6:	cf 91       	pop	r28
    3aa8:	1f 91       	pop	r17
    3aaa:	0f 91       	pop	r16
    3aac:	08 95       	ret

00003aae <__vector_20>:
void (*TimerOne::isrCallback)() = NULL;

// interrupt service routine that wraps a user defined function supplied by attachInterrupt
#if defined(__AVR__)
ISR(TIMER1_OVF_vect)
{
    3aae:	1f 92       	push	r1
    3ab0:	0f 92       	push	r0
    3ab2:	0f b6       	in	r0, 0x3f	; 63
    3ab4:	0f 92       	push	r0
    3ab6:	11 24       	eor	r1, r1
    3ab8:	0b b6       	in	r0, 0x3b	; 59
    3aba:	0f 92       	push	r0
    3abc:	2f 93       	push	r18
    3abe:	3f 93       	push	r19
    3ac0:	4f 93       	push	r20
    3ac2:	5f 93       	push	r21
    3ac4:	6f 93       	push	r22
    3ac6:	7f 93       	push	r23
    3ac8:	8f 93       	push	r24
    3aca:	9f 93       	push	r25
    3acc:	af 93       	push	r26
    3ace:	bf 93       	push	r27
    3ad0:	ef 93       	push	r30
    3ad2:	ff 93       	push	r31
  Timer1.isrCallback();
    3ad4:	e0 91 8e 09 	lds	r30, 0x098E
    3ad8:	f0 91 8f 09 	lds	r31, 0x098F
    3adc:	19 95       	eicall
}
    3ade:	ff 91       	pop	r31
    3ae0:	ef 91       	pop	r30
    3ae2:	bf 91       	pop	r27
    3ae4:	af 91       	pop	r26
    3ae6:	9f 91       	pop	r25
    3ae8:	8f 91       	pop	r24
    3aea:	7f 91       	pop	r23
    3aec:	6f 91       	pop	r22
    3aee:	5f 91       	pop	r21
    3af0:	4f 91       	pop	r20
    3af2:	3f 91       	pop	r19
    3af4:	2f 91       	pop	r18
    3af6:	0f 90       	pop	r0
    3af8:	0b be       	out	0x3b, r0	; 59
    3afa:	0f 90       	pop	r0
    3afc:	0f be       	out	0x3f, r0	; 63
    3afe:	0f 90       	pop	r0
    3b00:	1f 90       	pop	r1
    3b02:	18 95       	reti

00003b04 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3b04:	10 92 00 0a 	sts	0x0A00, r1
    3b08:	81 e0       	ldi	r24, 0x01	; 1
    3b0a:	80 93 fe 09 	sts	0x09FE, r24
    3b0e:	10 92 fd 09 	sts	0x09FD, r1
    3b12:	61 e0       	ldi	r22, 0x01	; 1
    3b14:	84 e1       	ldi	r24, 0x14	; 20
    3b16:	0e 94 15 2c 	call	0x582a	; 0x582a <digitalWrite>
    3b1a:	61 e0       	ldi	r22, 0x01	; 1
    3b1c:	85 e1       	ldi	r24, 0x15	; 21
    3b1e:	0e 94 15 2c 	call	0x582a	; 0x582a <digitalWrite>
    3b22:	e9 eb       	ldi	r30, 0xB9	; 185
    3b24:	f0 e0       	ldi	r31, 0x00	; 0
    3b26:	80 81       	ld	r24, Z
    3b28:	8e 7f       	andi	r24, 0xFE	; 254
    3b2a:	80 83       	st	Z, r24
    3b2c:	80 81       	ld	r24, Z
    3b2e:	8d 7f       	andi	r24, 0xFD	; 253
    3b30:	80 83       	st	Z, r24
    3b32:	88 e4       	ldi	r24, 0x48	; 72
    3b34:	80 93 b8 00 	sts	0x00B8, r24
    3b38:	85 e4       	ldi	r24, 0x45	; 69
    3b3a:	80 93 bc 00 	sts	0x00BC, r24
    3b3e:	08 95       	ret

00003b40 <twi_readFrom>:
    3b40:	41 32       	cpi	r20, 0x21	; 33
    3b42:	08 f0       	brcs	.+2      	; 0x3b46 <twi_readFrom+0x6>
    3b44:	46 c0       	rjmp	.+140    	; 0x3bd2 <twi_readFrom+0x92>
    3b46:	90 91 00 0a 	lds	r25, 0x0A00
    3b4a:	91 11       	cpse	r25, r1
    3b4c:	fc cf       	rjmp	.-8      	; 0x3b46 <twi_readFrom+0x6>
    3b4e:	31 e0       	ldi	r19, 0x01	; 1
    3b50:	30 93 00 0a 	sts	0x0A00, r19
    3b54:	20 93 fe 09 	sts	0x09FE, r18
    3b58:	2f ef       	ldi	r18, 0xFF	; 255
    3b5a:	20 93 93 09 	sts	0x0993, r18
    3b5e:	10 92 d8 09 	sts	0x09D8, r1
    3b62:	24 0f       	add	r18, r20
    3b64:	20 93 d7 09 	sts	0x09D7, r18
    3b68:	30 93 ff 09 	sts	0x09FF, r19
    3b6c:	20 91 ff 09 	lds	r18, 0x09FF
    3b70:	88 0f       	add	r24, r24
    3b72:	82 2b       	or	r24, r18
    3b74:	80 93 ff 09 	sts	0x09FF, r24
    3b78:	80 91 fd 09 	lds	r24, 0x09FD
    3b7c:	81 30       	cpi	r24, 0x01	; 1
    3b7e:	51 f4       	brne	.+20     	; 0x3b94 <twi_readFrom+0x54>
    3b80:	10 92 fd 09 	sts	0x09FD, r1
    3b84:	80 91 ff 09 	lds	r24, 0x09FF
    3b88:	80 93 bb 00 	sts	0x00BB, r24
    3b8c:	85 ec       	ldi	r24, 0xC5	; 197
    3b8e:	80 93 bc 00 	sts	0x00BC, r24
    3b92:	03 c0       	rjmp	.+6      	; 0x3b9a <twi_readFrom+0x5a>
    3b94:	85 ee       	ldi	r24, 0xE5	; 229
    3b96:	80 93 bc 00 	sts	0x00BC, r24
    3b9a:	80 91 00 0a 	lds	r24, 0x0A00
    3b9e:	81 30       	cpi	r24, 0x01	; 1
    3ba0:	e1 f3       	breq	.-8      	; 0x3b9a <twi_readFrom+0x5a>
    3ba2:	80 91 d8 09 	lds	r24, 0x09D8
    3ba6:	84 17       	cp	r24, r20
    3ba8:	10 f4       	brcc	.+4      	; 0x3bae <twi_readFrom+0x6e>
    3baa:	40 91 d8 09 	lds	r20, 0x09D8
    3bae:	44 23       	and	r20, r20
    3bb0:	89 f0       	breq	.+34     	; 0x3bd4 <twi_readFrom+0x94>
    3bb2:	a9 ed       	ldi	r26, 0xD9	; 217
    3bb4:	b9 e0       	ldi	r27, 0x09	; 9
    3bb6:	fb 01       	movw	r30, r22
    3bb8:	8f ef       	ldi	r24, 0xFF	; 255
    3bba:	84 0f       	add	r24, r20
    3bbc:	90 e0       	ldi	r25, 0x00	; 0
    3bbe:	01 96       	adiw	r24, 0x01	; 1
    3bc0:	68 0f       	add	r22, r24
    3bc2:	79 1f       	adc	r23, r25
    3bc4:	8d 91       	ld	r24, X+
    3bc6:	81 93       	st	Z+, r24
    3bc8:	e6 17       	cp	r30, r22
    3bca:	f7 07       	cpc	r31, r23
    3bcc:	d9 f7       	brne	.-10     	; 0x3bc4 <twi_readFrom+0x84>
    3bce:	94 2f       	mov	r25, r20
    3bd0:	01 c0       	rjmp	.+2      	; 0x3bd4 <twi_readFrom+0x94>
    3bd2:	90 e0       	ldi	r25, 0x00	; 0
    3bd4:	89 2f       	mov	r24, r25
    3bd6:	08 95       	ret

00003bd8 <twi_writeTo>:
    3bd8:	0f 93       	push	r16
    3bda:	41 32       	cpi	r20, 0x21	; 33
    3bdc:	08 f0       	brcs	.+2      	; 0x3be0 <twi_writeTo+0x8>
    3bde:	51 c0       	rjmp	.+162    	; 0x3c82 <twi_writeTo+0xaa>
    3be0:	30 91 00 0a 	lds	r19, 0x0A00
    3be4:	31 11       	cpse	r19, r1
    3be6:	fc cf       	rjmp	.-8      	; 0x3be0 <twi_writeTo+0x8>
    3be8:	92 e0       	ldi	r25, 0x02	; 2
    3bea:	90 93 00 0a 	sts	0x0A00, r25
    3bee:	00 93 fe 09 	sts	0x09FE, r16
    3bf2:	9f ef       	ldi	r25, 0xFF	; 255
    3bf4:	90 93 93 09 	sts	0x0993, r25
    3bf8:	10 92 d8 09 	sts	0x09D8, r1
    3bfc:	40 93 d7 09 	sts	0x09D7, r20
    3c00:	44 23       	and	r20, r20
    3c02:	71 f0       	breq	.+28     	; 0x3c20 <twi_writeTo+0x48>
    3c04:	fb 01       	movw	r30, r22
    3c06:	a9 ed       	ldi	r26, 0xD9	; 217
    3c08:	b9 e0       	ldi	r27, 0x09	; 9
    3c0a:	41 50       	subi	r20, 0x01	; 1
    3c0c:	50 e0       	ldi	r21, 0x00	; 0
    3c0e:	4f 5f       	subi	r20, 0xFF	; 255
    3c10:	5f 4f       	sbci	r21, 0xFF	; 255
    3c12:	64 0f       	add	r22, r20
    3c14:	75 1f       	adc	r23, r21
    3c16:	91 91       	ld	r25, Z+
    3c18:	9d 93       	st	X+, r25
    3c1a:	e6 17       	cp	r30, r22
    3c1c:	f7 07       	cpc	r31, r23
    3c1e:	d9 f7       	brne	.-10     	; 0x3c16 <twi_writeTo+0x3e>
    3c20:	10 92 ff 09 	sts	0x09FF, r1
    3c24:	90 91 ff 09 	lds	r25, 0x09FF
    3c28:	88 0f       	add	r24, r24
    3c2a:	89 2b       	or	r24, r25
    3c2c:	80 93 ff 09 	sts	0x09FF, r24
    3c30:	80 91 fd 09 	lds	r24, 0x09FD
    3c34:	81 30       	cpi	r24, 0x01	; 1
    3c36:	51 f4       	brne	.+20     	; 0x3c4c <twi_writeTo+0x74>
    3c38:	10 92 fd 09 	sts	0x09FD, r1
    3c3c:	80 91 ff 09 	lds	r24, 0x09FF
    3c40:	80 93 bb 00 	sts	0x00BB, r24
    3c44:	85 ec       	ldi	r24, 0xC5	; 197
    3c46:	80 93 bc 00 	sts	0x00BC, r24
    3c4a:	03 c0       	rjmp	.+6      	; 0x3c52 <twi_writeTo+0x7a>
    3c4c:	85 ee       	ldi	r24, 0xE5	; 229
    3c4e:	80 93 bc 00 	sts	0x00BC, r24
    3c52:	22 23       	and	r18, r18
    3c54:	41 f0       	breq	.+16     	; 0x3c66 <twi_writeTo+0x8e>
    3c56:	80 91 00 0a 	lds	r24, 0x0A00
    3c5a:	82 30       	cpi	r24, 0x02	; 2
    3c5c:	21 f4       	brne	.+8      	; 0x3c66 <twi_writeTo+0x8e>
    3c5e:	80 91 00 0a 	lds	r24, 0x0A00
    3c62:	82 30       	cpi	r24, 0x02	; 2
    3c64:	e1 f3       	breq	.-8      	; 0x3c5e <twi_writeTo+0x86>
    3c66:	80 91 93 09 	lds	r24, 0x0993
    3c6a:	8f 3f       	cpi	r24, 0xFF	; 255
    3c6c:	79 f0       	breq	.+30     	; 0x3c8c <twi_writeTo+0xb4>
    3c6e:	80 91 93 09 	lds	r24, 0x0993
    3c72:	80 32       	cpi	r24, 0x20	; 32
    3c74:	41 f0       	breq	.+16     	; 0x3c86 <twi_writeTo+0xae>
    3c76:	80 91 93 09 	lds	r24, 0x0993
    3c7a:	80 33       	cpi	r24, 0x30	; 48
    3c7c:	31 f0       	breq	.+12     	; 0x3c8a <twi_writeTo+0xb2>
    3c7e:	34 e0       	ldi	r19, 0x04	; 4
    3c80:	05 c0       	rjmp	.+10     	; 0x3c8c <twi_writeTo+0xb4>
    3c82:	31 e0       	ldi	r19, 0x01	; 1
    3c84:	03 c0       	rjmp	.+6      	; 0x3c8c <twi_writeTo+0xb4>
    3c86:	32 e0       	ldi	r19, 0x02	; 2
    3c88:	01 c0       	rjmp	.+2      	; 0x3c8c <twi_writeTo+0xb4>
    3c8a:	33 e0       	ldi	r19, 0x03	; 3
    3c8c:	83 2f       	mov	r24, r19
    3c8e:	0f 91       	pop	r16
    3c90:	08 95       	ret

00003c92 <twi_transmit>:
    3c92:	61 32       	cpi	r22, 0x21	; 33
    3c94:	c8 f4       	brcc	.+50     	; 0x3cc8 <twi_transmit+0x36>
    3c96:	20 91 00 0a 	lds	r18, 0x0A00
    3c9a:	24 30       	cpi	r18, 0x04	; 4
    3c9c:	b9 f4       	brne	.+46     	; 0x3ccc <twi_transmit+0x3a>
    3c9e:	60 93 b5 09 	sts	0x09B5, r22
    3ca2:	66 23       	and	r22, r22
    3ca4:	a9 f0       	breq	.+42     	; 0x3cd0 <twi_transmit+0x3e>
    3ca6:	fc 01       	movw	r30, r24
    3ca8:	a7 eb       	ldi	r26, 0xB7	; 183
    3caa:	b9 e0       	ldi	r27, 0x09	; 9
    3cac:	61 50       	subi	r22, 0x01	; 1
    3cae:	26 2f       	mov	r18, r22
    3cb0:	30 e0       	ldi	r19, 0x00	; 0
    3cb2:	2f 5f       	subi	r18, 0xFF	; 255
    3cb4:	3f 4f       	sbci	r19, 0xFF	; 255
    3cb6:	28 0f       	add	r18, r24
    3cb8:	39 1f       	adc	r19, r25
    3cba:	91 91       	ld	r25, Z+
    3cbc:	9d 93       	st	X+, r25
    3cbe:	e2 17       	cp	r30, r18
    3cc0:	f3 07       	cpc	r31, r19
    3cc2:	d9 f7       	brne	.-10     	; 0x3cba <twi_transmit+0x28>
    3cc4:	80 e0       	ldi	r24, 0x00	; 0
    3cc6:	08 95       	ret
    3cc8:	81 e0       	ldi	r24, 0x01	; 1
    3cca:	08 95       	ret
    3ccc:	82 e0       	ldi	r24, 0x02	; 2
    3cce:	08 95       	ret
    3cd0:	80 e0       	ldi	r24, 0x00	; 0
    3cd2:	08 95       	ret

00003cd4 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3cd4:	85 ed       	ldi	r24, 0xD5	; 213
    3cd6:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    3cda:	ec eb       	ldi	r30, 0xBC	; 188
    3cdc:	f0 e0       	ldi	r31, 0x00	; 0
    3cde:	80 81       	ld	r24, Z
    3ce0:	84 fd       	sbrc	r24, 4
    3ce2:	fd cf       	rjmp	.-6      	; 0x3cde <twi_stop+0xa>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    3ce4:	10 92 00 0a 	sts	0x0A00, r1
    3ce8:	08 95       	ret

00003cea <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    3cea:	85 ec       	ldi	r24, 0xC5	; 197
    3cec:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
    3cf0:	10 92 00 0a 	sts	0x0A00, r1
    3cf4:	08 95       	ret

00003cf6 <__vector_39>:
}

ISR(TWI_vect)
{
    3cf6:	1f 92       	push	r1
    3cf8:	0f 92       	push	r0
    3cfa:	0f b6       	in	r0, 0x3f	; 63
    3cfc:	0f 92       	push	r0
    3cfe:	11 24       	eor	r1, r1
    3d00:	0b b6       	in	r0, 0x3b	; 59
    3d02:	0f 92       	push	r0
    3d04:	2f 93       	push	r18
    3d06:	3f 93       	push	r19
    3d08:	4f 93       	push	r20
    3d0a:	5f 93       	push	r21
    3d0c:	6f 93       	push	r22
    3d0e:	7f 93       	push	r23
    3d10:	8f 93       	push	r24
    3d12:	9f 93       	push	r25
    3d14:	af 93       	push	r26
    3d16:	bf 93       	push	r27
    3d18:	ef 93       	push	r30
    3d1a:	ff 93       	push	r31
  switch(TW_STATUS){
    3d1c:	80 91 b9 00 	lds	r24, 0x00B9
    3d20:	88 7f       	andi	r24, 0xF8	; 248
    3d22:	90 e0       	ldi	r25, 0x00	; 0
    3d24:	89 3c       	cpi	r24, 0xC9	; 201
    3d26:	91 05       	cpc	r25, r1
    3d28:	08 f0       	brcs	.+2      	; 0x3d2c <__vector_39+0x36>
    3d2a:	f0 c0       	rjmp	.+480    	; 0x3f0c <__vector_39+0x216>
    3d2c:	fc 01       	movw	r30, r24
    3d2e:	88 27       	eor	r24, r24
    3d30:	ee 57       	subi	r30, 0x7E	; 126
    3d32:	ff 4f       	sbci	r31, 0xFF	; 255
    3d34:	8f 4f       	sbci	r24, 0xFF	; 255
    3d36:	0c 94 7a 30 	jmp	0x60f4	; 0x60f4 <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    3d3a:	80 91 ff 09 	lds	r24, 0x09FF
    3d3e:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3d42:	85 ec       	ldi	r24, 0xC5	; 197
    3d44:	80 93 bc 00 	sts	0x00BC, r24
    3d48:	e1 c0       	rjmp	.+450    	; 0x3f0c <__vector_39+0x216>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3d4a:	90 91 d8 09 	lds	r25, 0x09D8
    3d4e:	80 91 d7 09 	lds	r24, 0x09D7
    3d52:	98 17       	cp	r25, r24
    3d54:	80 f4       	brcc	.+32     	; 0x3d76 <__vector_39+0x80>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    3d56:	e0 91 d8 09 	lds	r30, 0x09D8
    3d5a:	81 e0       	ldi	r24, 0x01	; 1
    3d5c:	8e 0f       	add	r24, r30
    3d5e:	80 93 d8 09 	sts	0x09D8, r24
    3d62:	f0 e0       	ldi	r31, 0x00	; 0
    3d64:	e7 52       	subi	r30, 0x27	; 39
    3d66:	f6 4f       	sbci	r31, 0xF6	; 246
    3d68:	80 81       	ld	r24, Z
    3d6a:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3d6e:	85 ec       	ldi	r24, 0xC5	; 197
    3d70:	80 93 bc 00 	sts	0x00BC, r24
    3d74:	cb c0       	rjmp	.+406    	; 0x3f0c <__vector_39+0x216>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
    3d76:	80 91 fe 09 	lds	r24, 0x09FE
    3d7a:	88 23       	and	r24, r24
    3d7c:	11 f0       	breq	.+4      	; 0x3d82 <__vector_39+0x8c>
          twi_stop();
    3d7e:	aa df       	rcall	.-172    	; 0x3cd4 <twi_stop>
    3d80:	c5 c0       	rjmp	.+394    	; 0x3f0c <__vector_39+0x216>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    3d82:	81 e0       	ldi	r24, 0x01	; 1
    3d84:	80 93 fd 09 	sts	0x09FD, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    3d88:	84 ea       	ldi	r24, 0xA4	; 164
    3d8a:	80 93 bc 00 	sts	0x00BC, r24
	  twi_state = TWI_READY;
    3d8e:	10 92 00 0a 	sts	0x0A00, r1
    3d92:	bc c0       	rjmp	.+376    	; 0x3f0c <__vector_39+0x216>
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    3d94:	80 e2       	ldi	r24, 0x20	; 32
    3d96:	80 93 93 09 	sts	0x0993, r24
      twi_stop();
    3d9a:	9c df       	rcall	.-200    	; 0x3cd4 <twi_stop>
      break;
    3d9c:	b7 c0       	rjmp	.+366    	; 0x3f0c <__vector_39+0x216>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    3d9e:	80 e3       	ldi	r24, 0x30	; 48
    3da0:	80 93 93 09 	sts	0x0993, r24
      twi_stop();
    3da4:	97 df       	rcall	.-210    	; 0x3cd4 <twi_stop>
      break;
    3da6:	b2 c0       	rjmp	.+356    	; 0x3f0c <__vector_39+0x216>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    3da8:	88 e3       	ldi	r24, 0x38	; 56
    3daa:	80 93 93 09 	sts	0x0993, r24
      twi_releaseBus();
    3dae:	9d df       	rcall	.-198    	; 0x3cea <twi_releaseBus>
      break;
    3db0:	ad c0       	rjmp	.+346    	; 0x3f0c <__vector_39+0x216>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3db2:	e0 91 d8 09 	lds	r30, 0x09D8
    3db6:	81 e0       	ldi	r24, 0x01	; 1
    3db8:	8e 0f       	add	r24, r30
    3dba:	80 93 d8 09 	sts	0x09D8, r24
    3dbe:	80 91 bb 00 	lds	r24, 0x00BB
    3dc2:	f0 e0       	ldi	r31, 0x00	; 0
    3dc4:	e7 52       	subi	r30, 0x27	; 39
    3dc6:	f6 4f       	sbci	r31, 0xF6	; 246
    3dc8:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3dca:	90 91 d8 09 	lds	r25, 0x09D8
    3dce:	80 91 d7 09 	lds	r24, 0x09D7
    3dd2:	98 17       	cp	r25, r24
    3dd4:	20 f4       	brcc	.+8      	; 0x3dde <__vector_39+0xe8>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3dd6:	85 ec       	ldi	r24, 0xC5	; 197
    3dd8:	80 93 bc 00 	sts	0x00BC, r24
    3ddc:	97 c0       	rjmp	.+302    	; 0x3f0c <__vector_39+0x216>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3dde:	85 e8       	ldi	r24, 0x85	; 133
    3de0:	80 93 bc 00 	sts	0x00BC, r24
    3de4:	93 c0       	rjmp	.+294    	; 0x3f0c <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3de6:	e0 91 d8 09 	lds	r30, 0x09D8
    3dea:	81 e0       	ldi	r24, 0x01	; 1
    3dec:	8e 0f       	add	r24, r30
    3dee:	80 93 d8 09 	sts	0x09D8, r24
    3df2:	80 91 bb 00 	lds	r24, 0x00BB
    3df6:	f0 e0       	ldi	r31, 0x00	; 0
    3df8:	e7 52       	subi	r30, 0x27	; 39
    3dfa:	f6 4f       	sbci	r31, 0xF6	; 246
    3dfc:	80 83       	st	Z, r24
	if (twi_sendStop)
    3dfe:	80 91 fe 09 	lds	r24, 0x09FE
    3e02:	88 23       	and	r24, r24
    3e04:	11 f0       	breq	.+4      	; 0x3e0a <__vector_39+0x114>
          twi_stop();
    3e06:	66 df       	rcall	.-308    	; 0x3cd4 <twi_stop>
    3e08:	81 c0       	rjmp	.+258    	; 0x3f0c <__vector_39+0x216>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    3e0a:	81 e0       	ldi	r24, 0x01	; 1
    3e0c:	80 93 fd 09 	sts	0x09FD, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    3e10:	84 ea       	ldi	r24, 0xA4	; 164
    3e12:	80 93 bc 00 	sts	0x00BC, r24
	  twi_state = TWI_READY;
    3e16:	10 92 00 0a 	sts	0x0A00, r1
    3e1a:	78 c0       	rjmp	.+240    	; 0x3f0c <__vector_39+0x216>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    3e1c:	5b df       	rcall	.-330    	; 0x3cd4 <twi_stop>
      break;
    3e1e:	76 c0       	rjmp	.+236    	; 0x3f0c <__vector_39+0x216>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    3e20:	83 e0       	ldi	r24, 0x03	; 3
    3e22:	80 93 00 0a 	sts	0x0A00, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    3e26:	10 92 94 09 	sts	0x0994, r1
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3e2a:	85 ec       	ldi	r24, 0xC5	; 197
    3e2c:	80 93 bc 00 	sts	0x00BC, r24
    3e30:	6d c0       	rjmp	.+218    	; 0x3f0c <__vector_39+0x216>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3e32:	80 91 94 09 	lds	r24, 0x0994
    3e36:	80 32       	cpi	r24, 0x20	; 32
    3e38:	80 f4       	brcc	.+32     	; 0x3e5a <__vector_39+0x164>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    3e3a:	e0 91 94 09 	lds	r30, 0x0994
    3e3e:	81 e0       	ldi	r24, 0x01	; 1
    3e40:	8e 0f       	add	r24, r30
    3e42:	80 93 94 09 	sts	0x0994, r24
    3e46:	80 91 bb 00 	lds	r24, 0x00BB
    3e4a:	f0 e0       	ldi	r31, 0x00	; 0
    3e4c:	eb 56       	subi	r30, 0x6B	; 107
    3e4e:	f6 4f       	sbci	r31, 0xF6	; 246
    3e50:	80 83       	st	Z, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3e52:	85 ec       	ldi	r24, 0xC5	; 197
    3e54:	80 93 bc 00 	sts	0x00BC, r24
    3e58:	59 c0       	rjmp	.+178    	; 0x3f0c <__vector_39+0x216>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3e5a:	85 e8       	ldi	r24, 0x85	; 133
    3e5c:	80 93 bc 00 	sts	0x00BC, r24
    3e60:	55 c0       	rjmp	.+170    	; 0x3f0c <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3e62:	80 91 94 09 	lds	r24, 0x0994
    3e66:	80 32       	cpi	r24, 0x20	; 32
    3e68:	30 f4       	brcc	.+12     	; 0x3e76 <__vector_39+0x180>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    3e6a:	e0 91 94 09 	lds	r30, 0x0994
    3e6e:	f0 e0       	ldi	r31, 0x00	; 0
    3e70:	eb 56       	subi	r30, 0x6B	; 107
    3e72:	f6 4f       	sbci	r31, 0xF6	; 246
    3e74:	10 82       	st	Z, r1
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
    3e76:	2e df       	rcall	.-420    	; 0x3cd4 <twi_stop>
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    3e78:	60 91 94 09 	lds	r22, 0x0994
    3e7c:	70 e0       	ldi	r23, 0x00	; 0
    3e7e:	e0 91 f9 09 	lds	r30, 0x09F9
    3e82:	f0 91 fa 09 	lds	r31, 0x09FA
    3e86:	85 e9       	ldi	r24, 0x95	; 149
    3e88:	99 e0       	ldi	r25, 0x09	; 9
    3e8a:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    3e8c:	10 92 94 09 	sts	0x0994, r1
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    3e90:	2c df       	rcall	.-424    	; 0x3cea <twi_releaseBus>
      break;
    3e92:	3c c0       	rjmp	.+120    	; 0x3f0c <__vector_39+0x216>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3e94:	85 e8       	ldi	r24, 0x85	; 133
    3e96:	80 93 bc 00 	sts	0x00BC, r24
    3e9a:	38 c0       	rjmp	.+112    	; 0x3f0c <__vector_39+0x216>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    3e9c:	84 e0       	ldi	r24, 0x04	; 4
    3e9e:	80 93 00 0a 	sts	0x0A00, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    3ea2:	10 92 b6 09 	sts	0x09B6, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    3ea6:	10 92 b5 09 	sts	0x09B5, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    3eaa:	e0 91 fb 09 	lds	r30, 0x09FB
    3eae:	f0 91 fc 09 	lds	r31, 0x09FC
    3eb2:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    3eb4:	80 91 b5 09 	lds	r24, 0x09B5
    3eb8:	81 11       	cpse	r24, r1
    3eba:	05 c0       	rjmp	.+10     	; 0x3ec6 <__vector_39+0x1d0>
        twi_txBufferLength = 1;
    3ebc:	81 e0       	ldi	r24, 0x01	; 1
    3ebe:	80 93 b5 09 	sts	0x09B5, r24
        twi_txBuffer[0] = 0x00;
    3ec2:	10 92 b7 09 	sts	0x09B7, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    3ec6:	e0 91 b6 09 	lds	r30, 0x09B6
    3eca:	81 e0       	ldi	r24, 0x01	; 1
    3ecc:	8e 0f       	add	r24, r30
    3ece:	80 93 b6 09 	sts	0x09B6, r24
    3ed2:	f0 e0       	ldi	r31, 0x00	; 0
    3ed4:	e9 54       	subi	r30, 0x49	; 73
    3ed6:	f6 4f       	sbci	r31, 0xF6	; 246
    3ed8:	80 81       	ld	r24, Z
    3eda:	80 93 bb 00 	sts	0x00BB, r24
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    3ede:	90 91 b6 09 	lds	r25, 0x09B6
    3ee2:	80 91 b5 09 	lds	r24, 0x09B5
    3ee6:	98 17       	cp	r25, r24
    3ee8:	20 f4       	brcc	.+8      	; 0x3ef2 <__vector_39+0x1fc>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3eea:	85 ec       	ldi	r24, 0xC5	; 197
    3eec:	80 93 bc 00 	sts	0x00BC, r24
    3ef0:	0d c0       	rjmp	.+26     	; 0x3f0c <__vector_39+0x216>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3ef2:	85 e8       	ldi	r24, 0x85	; 133
    3ef4:	80 93 bc 00 	sts	0x00BC, r24
    3ef8:	09 c0       	rjmp	.+18     	; 0x3f0c <__vector_39+0x216>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3efa:	85 ec       	ldi	r24, 0xC5	; 197
    3efc:	80 93 bc 00 	sts	0x00BC, r24
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    3f00:	10 92 00 0a 	sts	0x0A00, r1
      break;
    3f04:	03 c0       	rjmp	.+6      	; 0x3f0c <__vector_39+0x216>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    3f06:	10 92 93 09 	sts	0x0993, r1
      twi_stop();
    3f0a:	e4 de       	rcall	.-568    	; 0x3cd4 <twi_stop>
      break;
  }
}
    3f0c:	ff 91       	pop	r31
    3f0e:	ef 91       	pop	r30
    3f10:	bf 91       	pop	r27
    3f12:	af 91       	pop	r26
    3f14:	9f 91       	pop	r25
    3f16:	8f 91       	pop	r24
    3f18:	7f 91       	pop	r23
    3f1a:	6f 91       	pop	r22
    3f1c:	5f 91       	pop	r21
    3f1e:	4f 91       	pop	r20
    3f20:	3f 91       	pop	r19
    3f22:	2f 91       	pop	r18
    3f24:	0f 90       	pop	r0
    3f26:	0b be       	out	0x3b, r0	; 59
    3f28:	0f 90       	pop	r0
    3f2a:	0f be       	out	0x3f, r0	; 63
    3f2c:	0f 90       	pop	r0
    3f2e:	1f 90       	pop	r1
    3f30:	18 95       	reti

00003f32 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    3f32:	80 91 31 0a 	lds	r24, 0x0A31
    3f36:	90 e0       	ldi	r25, 0x00	; 0
    3f38:	20 91 32 0a 	lds	r18, 0x0A32
    3f3c:	82 1b       	sub	r24, r18
    3f3e:	91 09       	sbc	r25, r1
    3f40:	08 95       	ret

00003f42 <_ZN7TwoWire4readEv>:
    3f42:	90 91 32 0a 	lds	r25, 0x0A32
    3f46:	80 91 31 0a 	lds	r24, 0x0A31
    3f4a:	98 17       	cp	r25, r24
    3f4c:	50 f4       	brcc	.+20     	; 0x3f62 <_ZN7TwoWire4readEv+0x20>
    3f4e:	e9 2f       	mov	r30, r25
    3f50:	f0 e0       	ldi	r31, 0x00	; 0
    3f52:	ed 5c       	subi	r30, 0xCD	; 205
    3f54:	f5 4f       	sbci	r31, 0xF5	; 245
    3f56:	20 81       	ld	r18, Z
    3f58:	30 e0       	ldi	r19, 0x00	; 0
    3f5a:	9f 5f       	subi	r25, 0xFF	; 255
    3f5c:	90 93 32 0a 	sts	0x0A32, r25
    3f60:	02 c0       	rjmp	.+4      	; 0x3f66 <_ZN7TwoWire4readEv+0x24>
    3f62:	2f ef       	ldi	r18, 0xFF	; 255
    3f64:	3f ef       	ldi	r19, 0xFF	; 255
    3f66:	c9 01       	movw	r24, r18
    3f68:	08 95       	ret

00003f6a <_ZN7TwoWire4peekEv>:
    3f6a:	e0 91 32 0a 	lds	r30, 0x0A32
    3f6e:	80 91 31 0a 	lds	r24, 0x0A31
    3f72:	e8 17       	cp	r30, r24
    3f74:	30 f4       	brcc	.+12     	; 0x3f82 <_ZN7TwoWire4peekEv+0x18>
    3f76:	f0 e0       	ldi	r31, 0x00	; 0
    3f78:	ed 5c       	subi	r30, 0xCD	; 205
    3f7a:	f5 4f       	sbci	r31, 0xF5	; 245
    3f7c:	80 81       	ld	r24, Z
    3f7e:	90 e0       	ldi	r25, 0x00	; 0
    3f80:	08 95       	ret
    3f82:	8f ef       	ldi	r24, 0xFF	; 255
    3f84:	9f ef       	ldi	r25, 0xFF	; 255
    3f86:	08 95       	ret

00003f88 <_ZN7TwoWire5flushEv>:
    3f88:	08 95       	ret

00003f8a <_ZN7TwoWire5writeEPKhj>:
    3f8a:	cf 92       	push	r12
    3f8c:	df 92       	push	r13
    3f8e:	ef 92       	push	r14
    3f90:	ff 92       	push	r15
    3f92:	0f 93       	push	r16
    3f94:	1f 93       	push	r17
    3f96:	cf 93       	push	r28
    3f98:	df 93       	push	r29
    3f9a:	8c 01       	movw	r16, r24
    3f9c:	cb 01       	movw	r24, r22
    3f9e:	6a 01       	movw	r12, r20
    3fa0:	20 91 0d 0a 	lds	r18, 0x0A0D
    3fa4:	22 23       	and	r18, r18
    3fa6:	a1 f0       	breq	.+40     	; 0x3fd0 <_ZN7TwoWire5writeEPKhj+0x46>
    3fa8:	41 15       	cp	r20, r1
    3faa:	51 05       	cpc	r21, r1
    3fac:	99 f0       	breq	.+38     	; 0x3fd4 <_ZN7TwoWire5writeEPKhj+0x4a>
    3fae:	eb 01       	movw	r28, r22
    3fb0:	7b 01       	movw	r14, r22
    3fb2:	e4 0e       	add	r14, r20
    3fb4:	f5 1e       	adc	r15, r21
    3fb6:	69 91       	ld	r22, Y+
    3fb8:	d8 01       	movw	r26, r16
    3fba:	ed 91       	ld	r30, X+
    3fbc:	fc 91       	ld	r31, X
    3fbe:	01 90       	ld	r0, Z+
    3fc0:	f0 81       	ld	r31, Z
    3fc2:	e0 2d       	mov	r30, r0
    3fc4:	c8 01       	movw	r24, r16
    3fc6:	19 95       	eicall
    3fc8:	ce 15       	cp	r28, r14
    3fca:	df 05       	cpc	r29, r15
    3fcc:	a1 f7       	brne	.-24     	; 0x3fb6 <_ZN7TwoWire5writeEPKhj+0x2c>
    3fce:	02 c0       	rjmp	.+4      	; 0x3fd4 <_ZN7TwoWire5writeEPKhj+0x4a>
    3fd0:	64 2f       	mov	r22, r20
    3fd2:	5f de       	rcall	.-834    	; 0x3c92 <twi_transmit>
    3fd4:	c6 01       	movw	r24, r12
    3fd6:	df 91       	pop	r29
    3fd8:	cf 91       	pop	r28
    3fda:	1f 91       	pop	r17
    3fdc:	0f 91       	pop	r16
    3fde:	ff 90       	pop	r15
    3fe0:	ef 90       	pop	r14
    3fe2:	df 90       	pop	r13
    3fe4:	cf 90       	pop	r12
    3fe6:	08 95       	ret

00003fe8 <_ZN7TwoWire5writeEh>:
    3fe8:	cf 93       	push	r28
    3fea:	df 93       	push	r29
    3fec:	1f 92       	push	r1
    3fee:	cd b7       	in	r28, 0x3d	; 61
    3ff0:	de b7       	in	r29, 0x3e	; 62
    3ff2:	fc 01       	movw	r30, r24
    3ff4:	69 83       	std	Y+1, r22	; 0x01
    3ff6:	90 91 0d 0a 	lds	r25, 0x0A0D
    3ffa:	99 23       	and	r25, r25
    3ffc:	d9 f0       	breq	.+54     	; 0x4034 <_ZN7TwoWire5writeEh+0x4c>
    3ffe:	90 91 0e 0a 	lds	r25, 0x0A0E
    4002:	90 32       	cpi	r25, 0x20	; 32
    4004:	38 f0       	brcs	.+14     	; 0x4014 <_ZN7TwoWire5writeEh+0x2c>
    4006:	81 e0       	ldi	r24, 0x01	; 1
    4008:	90 e0       	ldi	r25, 0x00	; 0
    400a:	93 83       	std	Z+3, r25	; 0x03
    400c:	82 83       	std	Z+2, r24	; 0x02
    400e:	80 e0       	ldi	r24, 0x00	; 0
    4010:	90 e0       	ldi	r25, 0x00	; 0
    4012:	16 c0       	rjmp	.+44     	; 0x4040 <_ZN7TwoWire5writeEh+0x58>
    4014:	80 91 0f 0a 	lds	r24, 0x0A0F
    4018:	e8 2f       	mov	r30, r24
    401a:	f0 e0       	ldi	r31, 0x00	; 0
    401c:	e0 5f       	subi	r30, 0xF0	; 240
    401e:	f5 4f       	sbci	r31, 0xF5	; 245
    4020:	99 81       	ldd	r25, Y+1	; 0x01
    4022:	90 83       	st	Z, r25
    4024:	8f 5f       	subi	r24, 0xFF	; 255
    4026:	80 93 0f 0a 	sts	0x0A0F, r24
    402a:	80 93 0e 0a 	sts	0x0A0E, r24
    402e:	81 e0       	ldi	r24, 0x01	; 1
    4030:	90 e0       	ldi	r25, 0x00	; 0
    4032:	06 c0       	rjmp	.+12     	; 0x4040 <_ZN7TwoWire5writeEh+0x58>
    4034:	61 e0       	ldi	r22, 0x01	; 1
    4036:	ce 01       	movw	r24, r28
    4038:	01 96       	adiw	r24, 0x01	; 1
    403a:	2b de       	rcall	.-938    	; 0x3c92 <twi_transmit>
    403c:	81 e0       	ldi	r24, 0x01	; 1
    403e:	90 e0       	ldi	r25, 0x00	; 0
    4040:	0f 90       	pop	r0
    4042:	df 91       	pop	r29
    4044:	cf 91       	pop	r28
    4046:	08 95       	ret

00004048 <_ZN7TwoWireC1Ev>:
    4048:	fc 01       	movw	r30, r24
    404a:	13 82       	std	Z+3, r1	; 0x03
    404c:	12 82       	std	Z+2, r1	; 0x02
    404e:	88 ee       	ldi	r24, 0xE8	; 232
    4050:	93 e0       	ldi	r25, 0x03	; 3
    4052:	a0 e0       	ldi	r26, 0x00	; 0
    4054:	b0 e0       	ldi	r27, 0x00	; 0
    4056:	84 83       	std	Z+4, r24	; 0x04
    4058:	95 83       	std	Z+5, r25	; 0x05
    405a:	a6 83       	std	Z+6, r26	; 0x06
    405c:	b7 83       	std	Z+7, r27	; 0x07
    405e:	8c e0       	ldi	r24, 0x0C	; 12
    4060:	94 e0       	ldi	r25, 0x04	; 4
    4062:	91 83       	std	Z+1, r25	; 0x01
    4064:	80 83       	st	Z, r24
    4066:	08 95       	ret

00004068 <_ZN7TwoWire5beginEv>:
    4068:	10 92 32 0a 	sts	0x0A32, r1
    406c:	10 92 31 0a 	sts	0x0A31, r1
    4070:	10 92 0f 0a 	sts	0x0A0F, r1
    4074:	10 92 0e 0a 	sts	0x0A0E, r1
    4078:	45 cd       	rjmp	.-1398   	; 0x3b04 <twi_init>
    407a:	08 95       	ret

0000407c <_ZN7TwoWire11requestFromEhhh>:
    407c:	86 2f       	mov	r24, r22
    407e:	41 32       	cpi	r20, 0x21	; 33
    4080:	08 f0       	brcs	.+2      	; 0x4084 <_ZN7TwoWire11requestFromEhhh+0x8>
    4082:	40 e2       	ldi	r20, 0x20	; 32
    4084:	63 e3       	ldi	r22, 0x33	; 51
    4086:	7a e0       	ldi	r23, 0x0A	; 10
    4088:	5b dd       	rcall	.-1354   	; 0x3b40 <twi_readFrom>
    408a:	10 92 32 0a 	sts	0x0A32, r1
    408e:	80 93 31 0a 	sts	0x0A31, r24
    4092:	08 95       	ret

00004094 <_ZN7TwoWire11requestFromEhh>:
    4094:	21 e0       	ldi	r18, 0x01	; 1
    4096:	f2 cf       	rjmp	.-28     	; 0x407c <_ZN7TwoWire11requestFromEhhh>
    4098:	08 95       	ret

0000409a <_ZN7TwoWire17beginTransmissionEh>:
    409a:	81 e0       	ldi	r24, 0x01	; 1
    409c:	80 93 0d 0a 	sts	0x0A0D, r24
    40a0:	60 93 30 0a 	sts	0x0A30, r22
    40a4:	10 92 0f 0a 	sts	0x0A0F, r1
    40a8:	10 92 0e 0a 	sts	0x0A0E, r1
    40ac:	08 95       	ret

000040ae <_ZN7TwoWire15endTransmissionEh>:
    40ae:	0f 93       	push	r16
    40b0:	06 2f       	mov	r16, r22
    40b2:	21 e0       	ldi	r18, 0x01	; 1
    40b4:	40 91 0e 0a 	lds	r20, 0x0A0E
    40b8:	60 e1       	ldi	r22, 0x10	; 16
    40ba:	7a e0       	ldi	r23, 0x0A	; 10
    40bc:	80 91 30 0a 	lds	r24, 0x0A30
    40c0:	8b dd       	rcall	.-1258   	; 0x3bd8 <twi_writeTo>
    40c2:	10 92 0f 0a 	sts	0x0A0F, r1
    40c6:	10 92 0e 0a 	sts	0x0A0E, r1
    40ca:	10 92 0d 0a 	sts	0x0A0D, r1
    40ce:	0f 91       	pop	r16
    40d0:	08 95       	ret

000040d2 <_ZN7TwoWire15endTransmissionEv>:
    40d2:	61 e0       	ldi	r22, 0x01	; 1
    40d4:	ec cf       	rjmp	.-40     	; 0x40ae <_ZN7TwoWire15endTransmissionEh>
    40d6:	08 95       	ret

000040d8 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    40d8:	81 e0       	ldi	r24, 0x01	; 1
    40da:	9a e0       	ldi	r25, 0x0A	; 10
    40dc:	b5 cf       	rjmp	.-150    	; 0x4048 <_ZN7TwoWireC1Ev>
    40de:	08 95       	ret

000040e0 <loop>:
	
	Serial.print("Free Bytes: ");
	Serial.println(freeMemory());
}

void loop() {
    40e0:	0f 93       	push	r16
    40e2:	1f 93       	push	r17
	
	//On first pass print out a verbose message
	if(firstpass){
    40e4:	80 91 0a 02 	lds	r24, 0x020A
    40e8:	88 23       	and	r24, r24
    40ea:	61 f0       	breq	.+24     	; 0x4104 <loop+0x24>
		#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
			Serial.println("-MAIN-PROGRAM-");
    40ec:	68 e1       	ldi	r22, 0x18	; 24
    40ee:	74 e0       	ldi	r23, 0x04	; 4
    40f0:	85 e6       	ldi	r24, 0x65	; 101
    40f2:	9a e0       	ldi	r25, 0x0A	; 10
    40f4:	9b d5       	rcall	.+2870   	; 0x4c2c <_ZN5Print7printlnEPKc>
			Serial.println(freeMemory());
    40f6:	b2 dc       	rcall	.-1692   	; 0x3a5c <freeMemory>
    40f8:	4a e0       	ldi	r20, 0x0A	; 10
    40fa:	50 e0       	ldi	r21, 0x00	; 0
    40fc:	bc 01       	movw	r22, r24
    40fe:	85 e6       	ldi	r24, 0x65	; 101
    4100:	9a e0       	ldi	r25, 0x0A	; 10
    4102:	4f d6       	rcall	.+3230   	; 0x4da2 <_ZN5Print7printlnEii>
		#endif
	}
	firstpass = false;
    4104:	10 92 0a 02 	sts	0x020A, r1
	
	//Make sure boot screens display for atleast 3 seconds (3000ms)
	while((millis()-BootScreenTime)<3000){
    4108:	06 c0       	rjmp	.+12     	; 0x4116 <loop+0x36>
		//Wait
		delay(500);
    410a:	64 ef       	ldi	r22, 0xF4	; 244
    410c:	71 e0       	ldi	r23, 0x01	; 1
    410e:	80 e0       	ldi	r24, 0x00	; 0
    4110:	90 e0       	ldi	r25, 0x00	; 0
    4112:	0e 94 b4 2a 	call	0x5568	; 0x5568 <delay>
		#endif
	}
	firstpass = false;
	
	//Make sure boot screens display for atleast 3 seconds (3000ms)
	while((millis()-BootScreenTime)<3000){
    4116:	0e 94 82 2a 	call	0x5504	; 0x5504 <millis>
    411a:	00 91 61 0a 	lds	r16, 0x0A61
    411e:	10 91 62 0a 	lds	r17, 0x0A62
    4122:	20 91 63 0a 	lds	r18, 0x0A63
    4126:	30 91 64 0a 	lds	r19, 0x0A64
    412a:	dc 01       	movw	r26, r24
    412c:	cb 01       	movw	r24, r22
    412e:	80 1b       	sub	r24, r16
    4130:	91 0b       	sbc	r25, r17
    4132:	a2 0b       	sbc	r26, r18
    4134:	b3 0b       	sbc	r27, r19
    4136:	88 3b       	cpi	r24, 0xB8	; 184
    4138:	9b 40       	sbci	r25, 0x0B	; 11
    413a:	a1 05       	cpc	r26, r1
    413c:	b1 05       	cpc	r27, r1
    413e:	28 f3       	brcs	.-54     	; 0x410a <loop+0x2a>
		//Wait
		delay(500);
	}
	
	//Run the Executive
	Exec.run();
    4140:	83 e5       	ldi	r24, 0x53	; 83
    4142:	9a e0       	ldi	r25, 0x0A	; 10
    4144:	1d d8       	rcall	.-4038   	; 0x3180 <_ZN9Executive3runEv>
}
    4146:	1f 91       	pop	r17
    4148:	0f 91       	pop	r16
    414a:	08 95       	ret

0000414c <_GLOBAL__sub_I_BootScreenTime>:
#include <Arduino.h>
#include "Hardware.h"

#include "../config.h"

class Executive{
    414c:	e3 e5       	ldi	r30, 0x53	; 83
    414e:	fa e0       	ldi	r31, 0x0A	; 10
    4150:	10 82       	st	Z, r1
    4152:	11 82       	std	Z+1, r1	; 0x01
    4154:	12 82       	std	Z+2, r1	; 0x02
    4156:	13 82       	std	Z+3, r1	; 0x03
    4158:	16 82       	std	Z+6, r1	; 0x06
    415a:	17 82       	std	Z+7, r1	; 0x07
    415c:	10 86       	std	Z+8, r1	; 0x08
    415e:	11 86       	std	Z+9, r1	; 0x09
    4160:	12 86       	std	Z+10, r1	; 0x0a
    4162:	13 86       	std	Z+11, r1	; 0x0b
    4164:	14 86       	std	Z+12, r1	; 0x0c
    4166:	15 86       	std	Z+13, r1	; 0x0d
    4168:	08 95       	ret

0000416a <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    416a:	26 e0       	ldi	r18, 0x06	; 6
    416c:	40 e0       	ldi	r20, 0x00	; 0
    416e:	52 ec       	ldi	r21, 0xC2	; 194
    4170:	61 e0       	ldi	r22, 0x01	; 1
    4172:	70 e0       	ldi	r23, 0x00	; 0
    4174:	85 e6       	ldi	r24, 0x65	; 101
    4176:	9a e0       	ldi	r25, 0x0A	; 10
    4178:	c2 d1       	rcall	.+900    	; 0x44fe <_ZN14HardwareSerial5beginEmh>
void setup() {
	//Setup the Hardware
	Serial.begin(115200);      // open the serial port at 9600 bps:
	
	//Print out the version
	Serial.println("*************************************");
    417a:	67 e2       	ldi	r22, 0x27	; 39
    417c:	74 e0       	ldi	r23, 0x04	; 4
    417e:	85 e6       	ldi	r24, 0x65	; 101
    4180:	9a e0       	ldi	r25, 0x0A	; 10
    4182:	54 d5       	rcall	.+2728   	; 0x4c2c <_ZN5Print7printlnEPKc>
	Serial.println("  Project Narwhal Estd. 2015         ");
    4184:	6d e4       	ldi	r22, 0x4D	; 77
    4186:	74 e0       	ldi	r23, 0x04	; 4
    4188:	85 e6       	ldi	r24, 0x65	; 101
    418a:	9a e0       	ldi	r25, 0x0A	; 10
    418c:	4f d5       	rcall	.+2718   	; 0x4c2c <_ZN5Print7printlnEPKc>
	Serial.println("*************************************");
    418e:	67 e2       	ldi	r22, 0x27	; 39
    4190:	74 e0       	ldi	r23, 0x04	; 4
    4192:	85 e6       	ldi	r24, 0x65	; 101
    4194:	9a e0       	ldi	r25, 0x0A	; 10
    4196:	4a d5       	rcall	.+2708   	; 0x4c2c <_ZN5Print7printlnEPKc>
	Serial.print("  Version: ");
    4198:	63 e7       	ldi	r22, 0x73	; 115
    419a:	74 e0       	ldi	r23, 0x04	; 4
    419c:	85 e6       	ldi	r24, 0x65	; 101
    419e:	9a e0       	ldi	r25, 0x0A	; 10
    41a0:	1b d5       	rcall	.+2614   	; 0x4bd8 <_ZN5Print5printEPKc>
	Serial.println(VERSION);
    41a2:	22 e0       	ldi	r18, 0x02	; 2
    41a4:	30 e0       	ldi	r19, 0x00	; 0
    41a6:	4d ec       	ldi	r20, 0xCD	; 205
    41a8:	5c ec       	ldi	r21, 0xCC	; 204
    41aa:	6c ec       	ldi	r22, 0xCC	; 204
    41ac:	7d e3       	ldi	r23, 0x3D	; 61
    41ae:	85 e6       	ldi	r24, 0x65	; 101
    41b0:	9a e0       	ldi	r25, 0x0A	; 10
    41b2:	18 d7       	rcall	.+3632   	; 0x4fe4 <_ZN5Print7printlnEdi>
	Serial.println("");
    41b4:	67 e1       	ldi	r22, 0x17	; 23
    41b6:	75 e0       	ldi	r23, 0x05	; 5
    41b8:	85 e6       	ldi	r24, 0x65	; 101
    41ba:	9a e0       	ldi	r25, 0x0A	; 10
    41bc:	37 d5       	rcall	.+2670   	; 0x4c2c <_ZN5Print7printlnEPKc>
		
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.println("-INITIALIZING-");
    41be:	6f e7       	ldi	r22, 0x7F	; 127
    41c0:	74 e0       	ldi	r23, 0x04	; 4
    41c2:	85 e6       	ldi	r24, 0x65	; 101
    41c4:	9a e0       	ldi	r25, 0x0A	; 10
    41c6:	32 d5       	rcall	.+2660   	; 0x4c2c <_ZN5Print7printlnEPKc>
	#endif
	
	//Initialize Hardware
	Serial.print("Free Bytes: ");
    41c8:	6e e8       	ldi	r22, 0x8E	; 142
    41ca:	74 e0       	ldi	r23, 0x04	; 4
    41cc:	85 e6       	ldi	r24, 0x65	; 101
    41ce:	9a e0       	ldi	r25, 0x0A	; 10
    41d0:	03 d5       	rcall	.+2566   	; 0x4bd8 <_ZN5Print5printEPKc>
	Serial.println(freeMemory());
    41d2:	44 dc       	rcall	.-1912   	; 0x3a5c <freeMemory>
    41d4:	4a e0       	ldi	r20, 0x0A	; 10
    41d6:	50 e0       	ldi	r21, 0x00	; 0
    41d8:	bc 01       	movw	r22, r24
    41da:	85 e6       	ldi	r24, 0x65	; 101
    41dc:	9a e0       	ldi	r25, 0x0A	; 10
    41de:	e1 d5       	rcall	.+3010   	; 0x4da2 <_ZN5Print7printlnEii>
	Serial.flush();
    41e0:	85 e6       	ldi	r24, 0x65	; 101
    41e2:	9a e0       	ldi	r25, 0x0A	; 10
    41e4:	1d d1       	rcall	.+570    	; 0x4420 <_ZN14HardwareSerial5flushEv>
	
	Serial.println("Entering HW init");
    41e6:	6b e9       	ldi	r22, 0x9B	; 155
    41e8:	74 e0       	ldi	r23, 0x04	; 4
    41ea:	85 e6       	ldi	r24, 0x65	; 101
    41ec:	9a e0       	ldi	r25, 0x0A	; 10
    41ee:	1e d5       	rcall	.+2620   	; 0x4c2c <_ZN5Print7printlnEPKc>
	Serial.flush();
    41f0:	85 e6       	ldi	r24, 0x65	; 101
    41f2:	9a e0       	ldi	r25, 0x0A	; 10
    41f4:	15 d1       	rcall	.+554    	; 0x4420 <_ZN14HardwareSerial5flushEv>
	hardware_init();
    41f6:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <_Z13hardware_initv>
	Serial.println("Here2");
    41fa:	6c ea       	ldi	r22, 0xAC	; 172
    41fc:	74 e0       	ldi	r23, 0x04	; 4
    41fe:	85 e6       	ldi	r24, 0x65	; 101
    4200:	9a e0       	ldi	r25, 0x0A	; 10
    4202:	14 d5       	rcall	.+2600   	; 0x4c2c <_ZN5Print7printlnEPKc>
	Serial.flush();
    4204:	85 e6       	ldi	r24, 0x65	; 101
    4206:	9a e0       	ldi	r25, 0x0A	; 10
    4208:	0b d1       	rcall	.+534    	; 0x4420 <_ZN14HardwareSerial5flushEv>
	
	UI_MAIN_init();
    420a:	0e 94 0b 10 	call	0x2016	; 0x2016 <_Z12UI_MAIN_initv>
	Serial.println("Here3");
    420e:	62 eb       	ldi	r22, 0xB2	; 178
    4210:	74 e0       	ldi	r23, 0x04	; 4
    4212:	85 e6       	ldi	r24, 0x65	; 101
    4214:	9a e0       	ldi	r25, 0x0A	; 10
    4216:	0a d5       	rcall	.+2580   	; 0x4c2c <_ZN5Print7printlnEPKc>
	Serial.flush();
    4218:	85 e6       	ldi	r24, 0x65	; 101
    421a:	9a e0       	ldi	r25, 0x0A	; 10
    421c:	01 d1       	rcall	.+514    	; 0x4420 <_ZN14HardwareSerial5flushEv>
	
	UI_HLT_init();
    421e:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <_Z11UI_HLT_initv>
	UI_MLT_init();
    4222:	0e 94 dd 11 	call	0x23ba	; 0x23ba <_Z11UI_MLT_initv>
	UI_BK_init();
    4226:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_Z10UI_BK_initv>

	//Display the Boot screens	
	BootScreenTime = millis();
    422a:	0e 94 82 2a 	call	0x5504	; 0x5504 <millis>
    422e:	60 93 61 0a 	sts	0x0A61, r22
    4232:	70 93 62 0a 	sts	0x0A62, r23
    4236:	80 93 63 0a 	sts	0x0A63, r24
    423a:	90 93 64 0a 	sts	0x0A64, r25
	
	MAIN_LCD.setCursor(3,1);
    423e:	41 e0       	ldi	r20, 0x01	; 1
    4240:	63 e0       	ldi	r22, 0x03	; 3
    4242:	88 e4       	ldi	r24, 0x48	; 72
    4244:	97 e0       	ldi	r25, 0x07	; 7
    4246:	30 da       	rcall	.-2976   	; 0x36a8 <_ZN3LCD9setCursorEhh>
	MAIN_LCD.print("Narwhal v");
    4248:	68 eb       	ldi	r22, 0xB8	; 184
    424a:	74 e0       	ldi	r23, 0x04	; 4
    424c:	88 e4       	ldi	r24, 0x48	; 72
    424e:	97 e0       	ldi	r25, 0x07	; 7
    4250:	c3 d4       	rcall	.+2438   	; 0x4bd8 <_ZN5Print5printEPKc>
	MAIN_LCD.print(VERSION);
    4252:	22 e0       	ldi	r18, 0x02	; 2
    4254:	30 e0       	ldi	r19, 0x00	; 0
    4256:	4d ec       	ldi	r20, 0xCD	; 205
    4258:	5c ec       	ldi	r21, 0xCC	; 204
    425a:	6c ec       	ldi	r22, 0xCC	; 204
    425c:	7d e3       	ldi	r23, 0x3D	; 61
    425e:	88 e4       	ldi	r24, 0x48	; 72
    4260:	97 e0       	ldi	r25, 0x07	; 7
    4262:	be d6       	rcall	.+3452   	; 0x4fe0 <_ZN5Print5printEdi>
	MAIN_LCD.setCursor(2,2);
    4264:	42 e0       	ldi	r20, 0x02	; 2
    4266:	62 e0       	ldi	r22, 0x02	; 2
    4268:	88 e4       	ldi	r24, 0x48	; 72
    426a:	97 e0       	ldi	r25, 0x07	; 7
    426c:	1d da       	rcall	.-3014   	; 0x36a8 <_ZN3LCD9setCursorEhh>
	MAIN_LCD.print("Established 2015");
    426e:	62 ec       	ldi	r22, 0xC2	; 194
    4270:	74 e0       	ldi	r23, 0x04	; 4
    4272:	88 e4       	ldi	r24, 0x48	; 72
    4274:	97 e0       	ldi	r25, 0x07	; 7
    4276:	b0 d4       	rcall	.+2400   	; 0x4bd8 <_ZN5Print5printEPKc>
		
	HLT_LCD.setCursor(2,1);
    4278:	41 e0       	ldi	r20, 0x01	; 1
    427a:	62 e0       	ldi	r22, 0x02	; 2
    427c:	84 e0       	ldi	r24, 0x04	; 4
    427e:	97 e0       	ldi	r25, 0x07	; 7
    4280:	13 da       	rcall	.-3034   	; 0x36a8 <_ZN3LCD9setCursorEhh>
	HLT_LCD.print("Hot Liquor Tank");
    4282:	63 ed       	ldi	r22, 0xD3	; 211
    4284:	74 e0       	ldi	r23, 0x04	; 4
    4286:	84 e0       	ldi	r24, 0x04	; 4
    4288:	97 e0       	ldi	r25, 0x07	; 7
    428a:	a6 d4       	rcall	.+2380   	; 0x4bd8 <_ZN5Print5printEPKc>
		
	MLT_LCD.setCursor(2,1);
    428c:	41 e0       	ldi	r20, 0x01	; 1
    428e:	62 e0       	ldi	r22, 0x02	; 2
    4290:	8c e5       	ldi	r24, 0x5C	; 92
    4292:	96 e0       	ldi	r25, 0x06	; 6
    4294:	09 da       	rcall	.-3054   	; 0x36a8 <_ZN3LCD9setCursorEhh>
	MLT_LCD.print("Mash/Lauter Tun");
    4296:	63 ee       	ldi	r22, 0xE3	; 227
    4298:	74 e0       	ldi	r23, 0x04	; 4
    429a:	8c e5       	ldi	r24, 0x5C	; 92
    429c:	96 e0       	ldi	r25, 0x06	; 6
    429e:	9c d4       	rcall	.+2360   	; 0x4bd8 <_ZN5Print5printEPKc>
		
	BK_LCD.setCursor(2,1);
    42a0:	41 e0       	ldi	r20, 0x01	; 1
    42a2:	62 e0       	ldi	r22, 0x02	; 2
    42a4:	84 eb       	ldi	r24, 0xB4	; 180
    42a6:	95 e0       	ldi	r25, 0x05	; 5
    42a8:	ff d9       	rcall	.-3074   	; 0x36a8 <_ZN3LCD9setCursorEhh>
	BK_LCD.print("Boil Kettle");
    42aa:	63 ef       	ldi	r22, 0xF3	; 243
    42ac:	74 e0       	ldi	r23, 0x04	; 4
    42ae:	84 eb       	ldi	r24, 0xB4	; 180
    42b0:	95 e0       	ldi	r25, 0x05	; 5
    42b2:	92 d4       	rcall	.+2340   	; 0x4bd8 <_ZN5Print5printEPKc>

	//Initialize the rest of the programs
	delay(3000);
    42b4:	68 eb       	ldi	r22, 0xB8	; 184
    42b6:	7b e0       	ldi	r23, 0x0B	; 11
    42b8:	80 e0       	ldi	r24, 0x00	; 0
    42ba:	90 e0       	ldi	r25, 0x00	; 0
    42bc:	0e 94 b4 2a 	call	0x5568	; 0x5568 <delay>
	
	//Refresh the Displays
	UI_MAIN->refresh();
    42c0:	80 91 83 09 	lds	r24, 0x0983
    42c4:	90 91 84 09 	lds	r25, 0x0984
    42c8:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <_ZN4EZUI7refreshEv>
	UI_HLT->refresh();
    42cc:	80 91 2b 09 	lds	r24, 0x092B
    42d0:	90 91 2c 09 	lds	r25, 0x092C
    42d4:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <_ZN4EZUI7refreshEv>
	UI_MLT->refresh();
    42d8:	80 91 85 09 	lds	r24, 0x0985
    42dc:	90 91 86 09 	lds	r25, 0x0986
    42e0:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <_ZN4EZUI7refreshEv>
	UI_BK->refresh();
    42e4:	80 91 b1 08 	lds	r24, 0x08B1
    42e8:	90 91 b2 08 	lds	r25, 0x08B2
    42ec:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <_ZN4EZUI7refreshEv>
	
	Serial.print("Free Bytes: ");
    42f0:	6e e8       	ldi	r22, 0x8E	; 142
    42f2:	74 e0       	ldi	r23, 0x04	; 4
    42f4:	85 e6       	ldi	r24, 0x65	; 101
    42f6:	9a e0       	ldi	r25, 0x0A	; 10
    42f8:	6f d4       	rcall	.+2270   	; 0x4bd8 <_ZN5Print5printEPKc>
	Serial.println(freeMemory());
    42fa:	b0 db       	rcall	.-2208   	; 0x3a5c <freeMemory>
    42fc:	4a e0       	ldi	r20, 0x0A	; 10
    42fe:	50 e0       	ldi	r21, 0x00	; 0
    4300:	bc 01       	movw	r22, r24
    4302:	85 e6       	ldi	r24, 0x65	; 101
    4304:	9a e0       	ldi	r25, 0x0A	; 10
    4306:	4d c5       	rjmp	.+2714   	; 0x4da2 <_ZN5Print7printlnEii>
    4308:	08 95       	ret

0000430a <__cxa_pure_virtual>:
void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this 
  
  
  //std::terminate();
  abort();
    430a:	0e 94 c6 32 	call	0x658c	; 0x658c <abort>

0000430e <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    430e:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    4310:	91 8d       	ldd	r25, Z+25	; 0x19
    4312:	22 8d       	ldd	r18, Z+26	; 0x1a
    4314:	89 2f       	mov	r24, r25
    4316:	90 e0       	ldi	r25, 0x00	; 0
    4318:	80 5c       	subi	r24, 0xC0	; 192
    431a:	9f 4f       	sbci	r25, 0xFF	; 255
    431c:	82 1b       	sub	r24, r18
    431e:	91 09       	sbc	r25, r1
}
    4320:	8f 73       	andi	r24, 0x3F	; 63
    4322:	99 27       	eor	r25, r25
    4324:	08 95       	ret

00004326 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    4326:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    4328:	91 8d       	ldd	r25, Z+25	; 0x19
    432a:	82 8d       	ldd	r24, Z+26	; 0x1a
    432c:	98 17       	cp	r25, r24
    432e:	31 f0       	breq	.+12     	; 0x433c <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    4330:	82 8d       	ldd	r24, Z+26	; 0x1a
    4332:	e8 0f       	add	r30, r24
    4334:	f1 1d       	adc	r31, r1
    4336:	85 8d       	ldd	r24, Z+29	; 0x1d
    4338:	90 e0       	ldi	r25, 0x00	; 0
    433a:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    433c:	8f ef       	ldi	r24, 0xFF	; 255
    433e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    4340:	08 95       	ret

00004342 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    4342:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    4344:	91 8d       	ldd	r25, Z+25	; 0x19
    4346:	82 8d       	ldd	r24, Z+26	; 0x1a
    4348:	98 17       	cp	r25, r24
    434a:	61 f0       	breq	.+24     	; 0x4364 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    434c:	82 8d       	ldd	r24, Z+26	; 0x1a
    434e:	df 01       	movw	r26, r30
    4350:	a8 0f       	add	r26, r24
    4352:	b1 1d       	adc	r27, r1
    4354:	5d 96       	adiw	r26, 0x1d	; 29
    4356:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    4358:	92 8d       	ldd	r25, Z+26	; 0x1a
    435a:	9f 5f       	subi	r25, 0xFF	; 255
    435c:	9f 73       	andi	r25, 0x3F	; 63
    435e:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    4360:	90 e0       	ldi	r25, 0x00	; 0
    4362:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    4364:	8f ef       	ldi	r24, 0xFF	; 255
    4366:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    4368:	08 95       	ret

0000436a <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    436a:	8d e4       	ldi	r24, 0x4D	; 77
    436c:	93 e2       	ldi	r25, 0x23	; 35
    436e:	89 2b       	or	r24, r25
    4370:	41 f0       	breq	.+16     	; 0x4382 <_Z14serialEventRunv+0x18>
    4372:	80 e0       	ldi	r24, 0x00	; 0
    4374:	90 e0       	ldi	r25, 0x00	; 0
    4376:	89 2b       	or	r24, r25
    4378:	21 f0       	breq	.+8      	; 0x4382 <_Z14serialEventRunv+0x18>
    437a:	8f d1       	rcall	.+798    	; 0x469a <_Z17Serial0_availablev>
    437c:	81 11       	cpse	r24, r1
    437e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    4382:	88 ee       	ldi	r24, 0xE8	; 232
    4384:	93 e2       	ldi	r25, 0x23	; 35
    4386:	89 2b       	or	r24, r25
    4388:	41 f0       	breq	.+16     	; 0x439a <_Z14serialEventRunv+0x30>
    438a:	80 e0       	ldi	r24, 0x00	; 0
    438c:	90 e0       	ldi	r25, 0x00	; 0
    438e:	89 2b       	or	r24, r25
    4390:	21 f0       	breq	.+8      	; 0x439a <_Z14serialEventRunv+0x30>
    4392:	1e d2       	rcall	.+1084   	; 0x47d0 <_Z17Serial1_availablev>
    4394:	81 11       	cpse	r24, r1
    4396:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    439a:	83 e8       	ldi	r24, 0x83	; 131
    439c:	94 e2       	ldi	r25, 0x24	; 36
    439e:	89 2b       	or	r24, r25
    43a0:	41 f0       	breq	.+16     	; 0x43b2 <_Z14serialEventRunv+0x48>
    43a2:	80 e0       	ldi	r24, 0x00	; 0
    43a4:	90 e0       	ldi	r25, 0x00	; 0
    43a6:	89 2b       	or	r24, r25
    43a8:	21 f0       	breq	.+8      	; 0x43b2 <_Z14serialEventRunv+0x48>
    43aa:	ad d2       	rcall	.+1370   	; 0x4906 <_Z17Serial2_availablev>
    43ac:	81 11       	cpse	r24, r1
    43ae:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    43b2:	8e e1       	ldi	r24, 0x1E	; 30
    43b4:	95 e2       	ldi	r25, 0x25	; 37
    43b6:	89 2b       	or	r24, r25
    43b8:	41 f0       	breq	.+16     	; 0x43ca <_Z14serialEventRunv+0x60>
    43ba:	80 e0       	ldi	r24, 0x00	; 0
    43bc:	90 e0       	ldi	r25, 0x00	; 0
    43be:	89 2b       	or	r24, r25
    43c0:	21 f0       	breq	.+8      	; 0x43ca <_Z14serialEventRunv+0x60>
    43c2:	3c d3       	rcall	.+1656   	; 0x4a3c <_Z17Serial3_availablev>
    43c4:	81 11       	cpse	r24, r1
    43c6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    43ca:	08 95       	ret

000043cc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    43cc:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    43ce:	84 8d       	ldd	r24, Z+28	; 0x1c
    43d0:	df 01       	movw	r26, r30
    43d2:	a8 0f       	add	r26, r24
    43d4:	b1 1d       	adc	r27, r1
    43d6:	a3 5a       	subi	r26, 0xA3	; 163
    43d8:	bf 4f       	sbci	r27, 0xFF	; 255
    43da:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    43dc:	24 8d       	ldd	r18, Z+28	; 0x1c
    43de:	30 e0       	ldi	r19, 0x00	; 0
    43e0:	2f 5f       	subi	r18, 0xFF	; 255
    43e2:	3f 4f       	sbci	r19, 0xFF	; 255
    43e4:	2f 73       	andi	r18, 0x3F	; 63
    43e6:	30 78       	andi	r19, 0x80	; 128
    43e8:	33 23       	and	r19, r19
    43ea:	34 f4       	brge	.+12     	; 0x43f8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
    43ec:	21 50       	subi	r18, 0x01	; 1
    43ee:	31 09       	sbc	r19, r1
    43f0:	20 6c       	ori	r18, 0xC0	; 192
    43f2:	3f 6f       	ori	r19, 0xFF	; 255
    43f4:	2f 5f       	subi	r18, 0xFF	; 255
    43f6:	3f 4f       	sbci	r19, 0xFF	; 255
    43f8:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
    43fa:	a6 89       	ldd	r26, Z+22	; 0x16
    43fc:	b7 89       	ldd	r27, Z+23	; 0x17
    43fe:	8c 93       	st	X, r24

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    4400:	a0 89       	ldd	r26, Z+16	; 0x10
    4402:	b1 89       	ldd	r27, Z+17	; 0x11
    4404:	8c 91       	ld	r24, X
    4406:	80 64       	ori	r24, 0x40	; 64
    4408:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    440a:	93 8d       	ldd	r25, Z+27	; 0x1b
    440c:	84 8d       	ldd	r24, Z+28	; 0x1c
    440e:	98 13       	cpse	r25, r24
    4410:	06 c0       	rjmp	.+12     	; 0x441e <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x52>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    4412:	02 88       	ldd	r0, Z+18	; 0x12
    4414:	f3 89       	ldd	r31, Z+19	; 0x13
    4416:	e0 2d       	mov	r30, r0
    4418:	80 81       	ld	r24, Z
    441a:	8f 7d       	andi	r24, 0xDF	; 223
    441c:	80 83       	st	Z, r24
    441e:	08 95       	ret

00004420 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    4420:	cf 93       	push	r28
    4422:	df 93       	push	r29
    4424:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    4426:	88 8d       	ldd	r24, Y+24	; 0x18
    4428:	81 11       	cpse	r24, r1
    442a:	0e c0       	rjmp	.+28     	; 0x4448 <_ZN14HardwareSerial5flushEv+0x28>
    442c:	17 c0       	rjmp	.+46     	; 0x445c <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    442e:	0f b6       	in	r0, 0x3f	; 63
    4430:	07 fc       	sbrc	r0, 7
    4432:	0c c0       	rjmp	.+24     	; 0x444c <_ZN14HardwareSerial5flushEv+0x2c>
    4434:	90 81       	ld	r25, Z
    4436:	95 ff       	sbrs	r25, 5
    4438:	09 c0       	rjmp	.+18     	; 0x444c <_ZN14HardwareSerial5flushEv+0x2c>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    443a:	a8 89       	ldd	r26, Y+16	; 0x10
    443c:	b9 89       	ldd	r27, Y+17	; 0x11
    443e:	8c 91       	ld	r24, X
    4440:	85 ff       	sbrs	r24, 5
    4442:	04 c0       	rjmp	.+8      	; 0x444c <_ZN14HardwareSerial5flushEv+0x2c>
	  _tx_udr_empty_irq();
    4444:	ce 01       	movw	r24, r28
    4446:	c2 df       	rcall	.-124    	; 0x43cc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    4448:	ea 89       	ldd	r30, Y+18	; 0x12
    444a:	fb 89       	ldd	r31, Y+19	; 0x13
    444c:	90 81       	ld	r25, Z
    444e:	95 fd       	sbrc	r25, 5
    4450:	ee cf       	rjmp	.-36     	; 0x442e <_ZN14HardwareSerial5flushEv+0xe>
    4452:	a8 89       	ldd	r26, Y+16	; 0x10
    4454:	b9 89       	ldd	r27, Y+17	; 0x11
    4456:	8c 91       	ld	r24, X
    4458:	86 ff       	sbrs	r24, 6
    445a:	e9 cf       	rjmp	.-46     	; 0x442e <_ZN14HardwareSerial5flushEv+0xe>
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    445c:	df 91       	pop	r29
    445e:	cf 91       	pop	r28
    4460:	08 95       	ret

00004462 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    4462:	0f 93       	push	r16
    4464:	1f 93       	push	r17
    4466:	cf 93       	push	r28
    4468:	df 93       	push	r29
    446a:	fc 01       	movw	r30, r24
  _written = true;
    446c:	81 e0       	ldi	r24, 0x01	; 1
    446e:	80 8f       	std	Z+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    4470:	93 8d       	ldd	r25, Z+27	; 0x1b
    4472:	84 8d       	ldd	r24, Z+28	; 0x1c
    4474:	98 13       	cpse	r25, r24
    4476:	21 c0       	rjmp	.+66     	; 0x44ba <_ZN14HardwareSerial5writeEh+0x58>
    4478:	a0 89       	ldd	r26, Z+16	; 0x10
    447a:	b1 89       	ldd	r27, Z+17	; 0x11
    447c:	8c 91       	ld	r24, X
    447e:	85 fd       	sbrc	r24, 5
    4480:	2e c0       	rjmp	.+92     	; 0x44de <_ZN14HardwareSerial5writeEh+0x7c>
    4482:	1b c0       	rjmp	.+54     	; 0x44ba <_ZN14HardwareSerial5writeEh+0x58>
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    if (bit_is_clear(SREG, SREG_I)) {
    4484:	0f b6       	in	r0, 0x3f	; 63
    4486:	07 fc       	sbrc	r0, 7
    4488:	07 c0       	rjmp	.+14     	; 0x4498 <_ZN14HardwareSerial5writeEh+0x36>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    448a:	e8 89       	ldd	r30, Y+16	; 0x10
    448c:	f9 89       	ldd	r31, Y+17	; 0x11
    448e:	80 81       	ld	r24, Z
    4490:	85 ff       	sbrs	r24, 5
    4492:	02 c0       	rjmp	.+4      	; 0x4498 <_ZN14HardwareSerial5writeEh+0x36>
	_tx_udr_empty_irq();
    4494:	ce 01       	movw	r24, r28
    4496:	9a df       	rcall	.-204    	; 0x43cc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    4498:	9c 8d       	ldd	r25, Y+28	; 0x1c
    449a:	09 17       	cp	r16, r25
    449c:	99 f3       	breq	.-26     	; 0x4484 <_ZN14HardwareSerial5writeEh+0x22>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    449e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44a0:	fe 01       	movw	r30, r28
    44a2:	e8 0f       	add	r30, r24
    44a4:	f1 1d       	adc	r31, r1
    44a6:	e3 5a       	subi	r30, 0xA3	; 163
    44a8:	ff 4f       	sbci	r31, 0xFF	; 255
    44aa:	10 83       	st	Z, r17
  _tx_buffer_head = i;
    44ac:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    44ae:	ea 89       	ldd	r30, Y+18	; 0x12
    44b0:	fb 89       	ldd	r31, Y+19	; 0x13
    44b2:	80 81       	ld	r24, Z
    44b4:	80 62       	ori	r24, 0x20	; 32
    44b6:	80 83       	st	Z, r24
  
  return 1;
    44b8:	1b c0       	rjmp	.+54     	; 0x44f0 <_ZN14HardwareSerial5writeEh+0x8e>
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    44ba:	23 8d       	ldd	r18, Z+27	; 0x1b
    44bc:	30 e0       	ldi	r19, 0x00	; 0
    44be:	2f 5f       	subi	r18, 0xFF	; 255
    44c0:	3f 4f       	sbci	r19, 0xFF	; 255
    44c2:	2f 73       	andi	r18, 0x3F	; 63
    44c4:	30 78       	andi	r19, 0x80	; 128
    44c6:	33 23       	and	r19, r19
    44c8:	34 f4       	brge	.+12     	; 0x44d6 <_ZN14HardwareSerial5writeEh+0x74>
    44ca:	21 50       	subi	r18, 0x01	; 1
    44cc:	31 09       	sbc	r19, r1
    44ce:	20 6c       	ori	r18, 0xC0	; 192
    44d0:	3f 6f       	ori	r19, 0xFF	; 255
    44d2:	2f 5f       	subi	r18, 0xFF	; 255
    44d4:	3f 4f       	sbci	r19, 0xFF	; 255
    44d6:	16 2f       	mov	r17, r22
    44d8:	ef 01       	movw	r28, r30
    44da:	02 2f       	mov	r16, r18
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    44dc:	dd cf       	rjmp	.-70     	; 0x4498 <_ZN14HardwareSerial5writeEh+0x36>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    44de:	a6 89       	ldd	r26, Z+22	; 0x16
    44e0:	b7 89       	ldd	r27, Z+23	; 0x17
    44e2:	6c 93       	st	X, r22
    sbi(*_ucsra, TXC0);
    44e4:	00 88       	ldd	r0, Z+16	; 0x10
    44e6:	f1 89       	ldd	r31, Z+17	; 0x11
    44e8:	e0 2d       	mov	r30, r0
    44ea:	80 81       	ld	r24, Z
    44ec:	80 64       	ori	r24, 0x40	; 64
    44ee:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    44f0:	81 e0       	ldi	r24, 0x01	; 1
    44f2:	90 e0       	ldi	r25, 0x00	; 0
    44f4:	df 91       	pop	r29
    44f6:	cf 91       	pop	r28
    44f8:	1f 91       	pop	r17
    44fa:	0f 91       	pop	r16
    44fc:	08 95       	ret

000044fe <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    44fe:	bf 92       	push	r11
    4500:	cf 92       	push	r12
    4502:	df 92       	push	r13
    4504:	ef 92       	push	r14
    4506:	ff 92       	push	r15
    4508:	0f 93       	push	r16
    450a:	1f 93       	push	r17
    450c:	cf 93       	push	r28
    450e:	df 93       	push	r29
    4510:	ec 01       	movw	r28, r24
    4512:	6a 01       	movw	r12, r20
    4514:	7b 01       	movw	r14, r22
    4516:	b2 2e       	mov	r11, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    4518:	e8 89       	ldd	r30, Y+16	; 0x10
    451a:	f9 89       	ldd	r31, Y+17	; 0x11
    451c:	82 e0       	ldi	r24, 0x02	; 2
    451e:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    4520:	41 15       	cp	r20, r1
    4522:	51 4e       	sbci	r21, 0xE1	; 225
    4524:	61 05       	cpc	r22, r1
    4526:	71 05       	cpc	r23, r1
    4528:	b1 f0       	breq	.+44     	; 0x4556 <_ZN14HardwareSerial5beginEmh+0x58>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    452a:	60 e0       	ldi	r22, 0x00	; 0
    452c:	79 e0       	ldi	r23, 0x09	; 9
    452e:	8d e3       	ldi	r24, 0x3D	; 61
    4530:	90 e0       	ldi	r25, 0x00	; 0
    4532:	a7 01       	movw	r20, r14
    4534:	96 01       	movw	r18, r12
    4536:	0e 94 58 30 	call	0x60b0	; 0x60b0 <__udivmodsi4>
    453a:	89 01       	movw	r16, r18
    453c:	9a 01       	movw	r18, r20
    453e:	01 50       	subi	r16, 0x01	; 1
    4540:	11 09       	sbc	r17, r1
    4542:	21 09       	sbc	r18, r1
    4544:	31 09       	sbc	r19, r1
    4546:	36 95       	lsr	r19
    4548:	27 95       	ror	r18
    454a:	17 95       	ror	r17
    454c:	07 95       	ror	r16
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    454e:	01 15       	cp	r16, r1
    4550:	80 e1       	ldi	r24, 0x10	; 16
    4552:	18 07       	cpc	r17, r24
    4554:	a8 f0       	brcs	.+42     	; 0x4580 <_ZN14HardwareSerial5beginEmh+0x82>
  {
    *_ucsra = 0;
    4556:	e8 89       	ldd	r30, Y+16	; 0x10
    4558:	f9 89       	ldd	r31, Y+17	; 0x11
    455a:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    455c:	60 e8       	ldi	r22, 0x80	; 128
    455e:	74 e8       	ldi	r23, 0x84	; 132
    4560:	8e e1       	ldi	r24, 0x1E	; 30
    4562:	90 e0       	ldi	r25, 0x00	; 0
    4564:	a7 01       	movw	r20, r14
    4566:	96 01       	movw	r18, r12
    4568:	0e 94 58 30 	call	0x60b0	; 0x60b0 <__udivmodsi4>
    456c:	da 01       	movw	r26, r20
    456e:	c9 01       	movw	r24, r18
    4570:	01 97       	sbiw	r24, 0x01	; 1
    4572:	a1 09       	sbc	r26, r1
    4574:	b1 09       	sbc	r27, r1
    4576:	b6 95       	lsr	r27
    4578:	a7 95       	ror	r26
    457a:	97 95       	ror	r25
    457c:	87 95       	ror	r24
    457e:	8c 01       	movw	r16, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    4580:	ec 85       	ldd	r30, Y+12	; 0x0c
    4582:	fd 85       	ldd	r31, Y+13	; 0x0d
    4584:	10 83       	st	Z, r17
  *_ubrrl = baud_setting;
    4586:	ee 85       	ldd	r30, Y+14	; 0x0e
    4588:	ff 85       	ldd	r31, Y+15	; 0x0f
    458a:	00 83       	st	Z, r16

  _written = false;
    458c:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    458e:	ec 89       	ldd	r30, Y+20	; 0x14
    4590:	fd 89       	ldd	r31, Y+21	; 0x15
    4592:	b0 82       	st	Z, r11
  
  sbi(*_ucsrb, RXEN0);
    4594:	ea 89       	ldd	r30, Y+18	; 0x12
    4596:	fb 89       	ldd	r31, Y+19	; 0x13
    4598:	80 81       	ld	r24, Z
    459a:	80 61       	ori	r24, 0x10	; 16
    459c:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    459e:	ea 89       	ldd	r30, Y+18	; 0x12
    45a0:	fb 89       	ldd	r31, Y+19	; 0x13
    45a2:	80 81       	ld	r24, Z
    45a4:	88 60       	ori	r24, 0x08	; 8
    45a6:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    45a8:	ea 89       	ldd	r30, Y+18	; 0x12
    45aa:	fb 89       	ldd	r31, Y+19	; 0x13
    45ac:	80 81       	ld	r24, Z
    45ae:	80 68       	ori	r24, 0x80	; 128
    45b0:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    45b2:	ea 89       	ldd	r30, Y+18	; 0x12
    45b4:	fb 89       	ldd	r31, Y+19	; 0x13
    45b6:	80 81       	ld	r24, Z
    45b8:	8f 7d       	andi	r24, 0xDF	; 223
    45ba:	80 83       	st	Z, r24
}
    45bc:	df 91       	pop	r29
    45be:	cf 91       	pop	r28
    45c0:	1f 91       	pop	r17
    45c2:	0f 91       	pop	r16
    45c4:	ff 90       	pop	r15
    45c6:	ef 90       	pop	r14
    45c8:	df 90       	pop	r13
    45ca:	cf 90       	pop	r12
    45cc:	bf 90       	pop	r11
    45ce:	08 95       	ret

000045d0 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    45d0:	1f 92       	push	r1
    45d2:	0f 92       	push	r0
    45d4:	0f b6       	in	r0, 0x3f	; 63
    45d6:	0f 92       	push	r0
    45d8:	11 24       	eor	r1, r1
    45da:	0b b6       	in	r0, 0x3b	; 59
    45dc:	0f 92       	push	r0
    45de:	2f 93       	push	r18
    45e0:	8f 93       	push	r24
    45e2:	9f 93       	push	r25
    45e4:	af 93       	push	r26
    45e6:	bf 93       	push	r27
    45e8:	ef 93       	push	r30
    45ea:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    45ec:	e0 91 75 0a 	lds	r30, 0x0A75
    45f0:	f0 91 76 0a 	lds	r31, 0x0A76
    45f4:	80 81       	ld	r24, Z
    45f6:	82 fd       	sbrc	r24, 2
    45f8:	14 c0       	rjmp	.+40     	; 0x4622 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    45fa:	e5 e6       	ldi	r30, 0x65	; 101
    45fc:	fa e0       	ldi	r31, 0x0A	; 10
    45fe:	a6 89       	ldd	r26, Z+22	; 0x16
    4600:	b7 89       	ldd	r27, Z+23	; 0x17
    4602:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    4604:	81 8d       	ldd	r24, Z+25	; 0x19
    4606:	8f 5f       	subi	r24, 0xFF	; 255
    4608:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    460a:	92 8d       	ldd	r25, Z+26	; 0x1a
    460c:	89 17       	cp	r24, r25
    460e:	71 f0       	breq	.+28     	; 0x462c <__vector_25+0x5c>
      _rx_buffer[_rx_buffer_head] = c;
    4610:	df 01       	movw	r26, r30
    4612:	e1 8d       	ldd	r30, Z+25	; 0x19
    4614:	f0 e0       	ldi	r31, 0x00	; 0
    4616:	eb 59       	subi	r30, 0x9B	; 155
    4618:	f5 4f       	sbci	r31, 0xF5	; 245
    461a:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
    461c:	59 96       	adiw	r26, 0x19	; 25
    461e:	8c 93       	st	X, r24
    4620:	05 c0       	rjmp	.+10     	; 0x462c <__vector_25+0x5c>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    4622:	e0 91 7b 0a 	lds	r30, 0x0A7B
    4626:	f0 91 7c 0a 	lds	r31, 0x0A7C
    462a:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    462c:	ff 91       	pop	r31
    462e:	ef 91       	pop	r30
    4630:	bf 91       	pop	r27
    4632:	af 91       	pop	r26
    4634:	9f 91       	pop	r25
    4636:	8f 91       	pop	r24
    4638:	2f 91       	pop	r18
    463a:	0f 90       	pop	r0
    463c:	0b be       	out	0x3b, r0	; 59
    463e:	0f 90       	pop	r0
    4640:	0f be       	out	0x3f, r0	; 63
    4642:	0f 90       	pop	r0
    4644:	1f 90       	pop	r1
    4646:	18 95       	reti

00004648 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    4648:	1f 92       	push	r1
    464a:	0f 92       	push	r0
    464c:	0f b6       	in	r0, 0x3f	; 63
    464e:	0f 92       	push	r0
    4650:	11 24       	eor	r1, r1
    4652:	0b b6       	in	r0, 0x3b	; 59
    4654:	0f 92       	push	r0
    4656:	2f 93       	push	r18
    4658:	3f 93       	push	r19
    465a:	4f 93       	push	r20
    465c:	5f 93       	push	r21
    465e:	6f 93       	push	r22
    4660:	7f 93       	push	r23
    4662:	8f 93       	push	r24
    4664:	9f 93       	push	r25
    4666:	af 93       	push	r26
    4668:	bf 93       	push	r27
    466a:	ef 93       	push	r30
    466c:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    466e:	85 e6       	ldi	r24, 0x65	; 101
    4670:	9a e0       	ldi	r25, 0x0A	; 10
    4672:	ac de       	rcall	.-680    	; 0x43cc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    4674:	ff 91       	pop	r31
    4676:	ef 91       	pop	r30
    4678:	bf 91       	pop	r27
    467a:	af 91       	pop	r26
    467c:	9f 91       	pop	r25
    467e:	8f 91       	pop	r24
    4680:	7f 91       	pop	r23
    4682:	6f 91       	pop	r22
    4684:	5f 91       	pop	r21
    4686:	4f 91       	pop	r20
    4688:	3f 91       	pop	r19
    468a:	2f 91       	pop	r18
    468c:	0f 90       	pop	r0
    468e:	0b be       	out	0x3b, r0	; 59
    4690:	0f 90       	pop	r0
    4692:	0f be       	out	0x3f, r0	; 63
    4694:	0f 90       	pop	r0
    4696:	1f 90       	pop	r1
    4698:	18 95       	reti

0000469a <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    469a:	85 e6       	ldi	r24, 0x65	; 101
    469c:	9a e0       	ldi	r25, 0x0A	; 10
    469e:	37 de       	rcall	.-914    	; 0x430e <_ZN14HardwareSerial9availableEv>
    46a0:	21 e0       	ldi	r18, 0x01	; 1
    46a2:	89 2b       	or	r24, r25
    46a4:	09 f4       	brne	.+2      	; 0x46a8 <_Z17Serial0_availablev+0xe>
    46a6:	20 e0       	ldi	r18, 0x00	; 0
}
    46a8:	82 2f       	mov	r24, r18
    46aa:	08 95       	ret

000046ac <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    46ac:	e5 e6       	ldi	r30, 0x65	; 101
    46ae:	fa e0       	ldi	r31, 0x0A	; 10
    46b0:	13 82       	std	Z+3, r1	; 0x03
    46b2:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    46b4:	88 ee       	ldi	r24, 0xE8	; 232
    46b6:	93 e0       	ldi	r25, 0x03	; 3
    46b8:	a0 e0       	ldi	r26, 0x00	; 0
    46ba:	b0 e0       	ldi	r27, 0x00	; 0
    46bc:	84 83       	std	Z+4, r24	; 0x04
    46be:	95 83       	std	Z+5, r25	; 0x05
    46c0:	a6 83       	std	Z+6, r26	; 0x06
    46c2:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    46c4:	83 e0       	ldi	r24, 0x03	; 3
    46c6:	95 e0       	ldi	r25, 0x05	; 5
    46c8:	91 83       	std	Z+1, r25	; 0x01
    46ca:	80 83       	st	Z, r24
    46cc:	85 ec       	ldi	r24, 0xC5	; 197
    46ce:	90 e0       	ldi	r25, 0x00	; 0
    46d0:	95 87       	std	Z+13, r25	; 0x0d
    46d2:	84 87       	std	Z+12, r24	; 0x0c
    46d4:	84 ec       	ldi	r24, 0xC4	; 196
    46d6:	90 e0       	ldi	r25, 0x00	; 0
    46d8:	97 87       	std	Z+15, r25	; 0x0f
    46da:	86 87       	std	Z+14, r24	; 0x0e
    46dc:	80 ec       	ldi	r24, 0xC0	; 192
    46de:	90 e0       	ldi	r25, 0x00	; 0
    46e0:	91 8b       	std	Z+17, r25	; 0x11
    46e2:	80 8b       	std	Z+16, r24	; 0x10
    46e4:	81 ec       	ldi	r24, 0xC1	; 193
    46e6:	90 e0       	ldi	r25, 0x00	; 0
    46e8:	93 8b       	std	Z+19, r25	; 0x13
    46ea:	82 8b       	std	Z+18, r24	; 0x12
    46ec:	82 ec       	ldi	r24, 0xC2	; 194
    46ee:	90 e0       	ldi	r25, 0x00	; 0
    46f0:	95 8b       	std	Z+21, r25	; 0x15
    46f2:	84 8b       	std	Z+20, r24	; 0x14
    46f4:	86 ec       	ldi	r24, 0xC6	; 198
    46f6:	90 e0       	ldi	r25, 0x00	; 0
    46f8:	97 8b       	std	Z+23, r25	; 0x17
    46fa:	86 8b       	std	Z+22, r24	; 0x16
    46fc:	11 8e       	std	Z+25, r1	; 0x19
    46fe:	12 8e       	std	Z+26, r1	; 0x1a
    4700:	13 8e       	std	Z+27, r1	; 0x1b
    4702:	14 8e       	std	Z+28, r1	; 0x1c
    4704:	08 95       	ret

00004706 <__vector_36>:
#elif defined(USART1_RX_vect)
ISR(USART1_RX_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    4706:	1f 92       	push	r1
    4708:	0f 92       	push	r0
    470a:	0f b6       	in	r0, 0x3f	; 63
    470c:	0f 92       	push	r0
    470e:	11 24       	eor	r1, r1
    4710:	0b b6       	in	r0, 0x3b	; 59
    4712:	0f 92       	push	r0
    4714:	2f 93       	push	r18
    4716:	8f 93       	push	r24
    4718:	9f 93       	push	r25
    471a:	af 93       	push	r26
    471c:	bf 93       	push	r27
    471e:	ef 93       	push	r30
    4720:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    4722:	e0 91 12 0b 	lds	r30, 0x0B12
    4726:	f0 91 13 0b 	lds	r31, 0x0B13
    472a:	80 81       	ld	r24, Z
    472c:	82 fd       	sbrc	r24, 2
    472e:	14 c0       	rjmp	.+40     	; 0x4758 <__vector_36+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    4730:	e2 e0       	ldi	r30, 0x02	; 2
    4732:	fb e0       	ldi	r31, 0x0B	; 11
    4734:	a6 89       	ldd	r26, Z+22	; 0x16
    4736:	b7 89       	ldd	r27, Z+23	; 0x17
    4738:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    473a:	81 8d       	ldd	r24, Z+25	; 0x19
    473c:	8f 5f       	subi	r24, 0xFF	; 255
    473e:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    4740:	92 8d       	ldd	r25, Z+26	; 0x1a
    4742:	89 17       	cp	r24, r25
    4744:	71 f0       	breq	.+28     	; 0x4762 <__vector_36+0x5c>
      _rx_buffer[_rx_buffer_head] = c;
    4746:	df 01       	movw	r26, r30
    4748:	e1 8d       	ldd	r30, Z+25	; 0x19
    474a:	f0 e0       	ldi	r31, 0x00	; 0
    474c:	ee 5f       	subi	r30, 0xFE	; 254
    474e:	f4 4f       	sbci	r31, 0xF4	; 244
    4750:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
    4752:	59 96       	adiw	r26, 0x19	; 25
    4754:	8c 93       	st	X, r24
    4756:	05 c0       	rjmp	.+10     	; 0x4762 <__vector_36+0x5c>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    4758:	e0 91 18 0b 	lds	r30, 0x0B18
    475c:	f0 91 19 0b 	lds	r31, 0x0B19
    4760:	80 81       	ld	r24, Z
  Serial1._rx_complete_irq();
}
    4762:	ff 91       	pop	r31
    4764:	ef 91       	pop	r30
    4766:	bf 91       	pop	r27
    4768:	af 91       	pop	r26
    476a:	9f 91       	pop	r25
    476c:	8f 91       	pop	r24
    476e:	2f 91       	pop	r18
    4770:	0f 90       	pop	r0
    4772:	0b be       	out	0x3b, r0	; 59
    4774:	0f 90       	pop	r0
    4776:	0f be       	out	0x3f, r0	; 63
    4778:	0f 90       	pop	r0
    477a:	1f 90       	pop	r1
    477c:	18 95       	reti

0000477e <__vector_37>:
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    477e:	1f 92       	push	r1
    4780:	0f 92       	push	r0
    4782:	0f b6       	in	r0, 0x3f	; 63
    4784:	0f 92       	push	r0
    4786:	11 24       	eor	r1, r1
    4788:	0b b6       	in	r0, 0x3b	; 59
    478a:	0f 92       	push	r0
    478c:	2f 93       	push	r18
    478e:	3f 93       	push	r19
    4790:	4f 93       	push	r20
    4792:	5f 93       	push	r21
    4794:	6f 93       	push	r22
    4796:	7f 93       	push	r23
    4798:	8f 93       	push	r24
    479a:	9f 93       	push	r25
    479c:	af 93       	push	r26
    479e:	bf 93       	push	r27
    47a0:	ef 93       	push	r30
    47a2:	ff 93       	push	r31
  Serial1._tx_udr_empty_irq();
    47a4:	82 e0       	ldi	r24, 0x02	; 2
    47a6:	9b e0       	ldi	r25, 0x0B	; 11
    47a8:	11 de       	rcall	.-990    	; 0x43cc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    47aa:	ff 91       	pop	r31
    47ac:	ef 91       	pop	r30
    47ae:	bf 91       	pop	r27
    47b0:	af 91       	pop	r26
    47b2:	9f 91       	pop	r25
    47b4:	8f 91       	pop	r24
    47b6:	7f 91       	pop	r23
    47b8:	6f 91       	pop	r22
    47ba:	5f 91       	pop	r21
    47bc:	4f 91       	pop	r20
    47be:	3f 91       	pop	r19
    47c0:	2f 91       	pop	r18
    47c2:	0f 90       	pop	r0
    47c4:	0b be       	out	0x3b, r0	; 59
    47c6:	0f 90       	pop	r0
    47c8:	0f be       	out	0x3f, r0	; 63
    47ca:	0f 90       	pop	r0
    47cc:	1f 90       	pop	r1
    47ce:	18 95       	reti

000047d0 <_Z17Serial1_availablev>:
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
    47d0:	82 e0       	ldi	r24, 0x02	; 2
    47d2:	9b e0       	ldi	r25, 0x0B	; 11
    47d4:	9c dd       	rcall	.-1224   	; 0x430e <_ZN14HardwareSerial9availableEv>
    47d6:	21 e0       	ldi	r18, 0x01	; 1
    47d8:	89 2b       	or	r24, r25
    47da:	09 f4       	brne	.+2      	; 0x47de <_Z17Serial1_availablev+0xe>
    47dc:	20 e0       	ldi	r18, 0x00	; 0
}
    47de:	82 2f       	mov	r24, r18
    47e0:	08 95       	ret

000047e2 <_GLOBAL__sub_I___vector_36>:
    47e2:	e2 e0       	ldi	r30, 0x02	; 2
    47e4:	fb e0       	ldi	r31, 0x0B	; 11
    47e6:	13 82       	std	Z+3, r1	; 0x03
    47e8:	12 82       	std	Z+2, r1	; 0x02
    47ea:	88 ee       	ldi	r24, 0xE8	; 232
    47ec:	93 e0       	ldi	r25, 0x03	; 3
    47ee:	a0 e0       	ldi	r26, 0x00	; 0
    47f0:	b0 e0       	ldi	r27, 0x00	; 0
    47f2:	84 83       	std	Z+4, r24	; 0x04
    47f4:	95 83       	std	Z+5, r25	; 0x05
    47f6:	a6 83       	std	Z+6, r26	; 0x06
    47f8:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    47fa:	83 e0       	ldi	r24, 0x03	; 3
    47fc:	95 e0       	ldi	r25, 0x05	; 5
    47fe:	91 83       	std	Z+1, r25	; 0x01
    4800:	80 83       	st	Z, r24
    4802:	8d ec       	ldi	r24, 0xCD	; 205
    4804:	90 e0       	ldi	r25, 0x00	; 0
    4806:	95 87       	std	Z+13, r25	; 0x0d
    4808:	84 87       	std	Z+12, r24	; 0x0c
    480a:	8c ec       	ldi	r24, 0xCC	; 204
    480c:	90 e0       	ldi	r25, 0x00	; 0
    480e:	97 87       	std	Z+15, r25	; 0x0f
    4810:	86 87       	std	Z+14, r24	; 0x0e
    4812:	88 ec       	ldi	r24, 0xC8	; 200
    4814:	90 e0       	ldi	r25, 0x00	; 0
    4816:	91 8b       	std	Z+17, r25	; 0x11
    4818:	80 8b       	std	Z+16, r24	; 0x10
    481a:	89 ec       	ldi	r24, 0xC9	; 201
    481c:	90 e0       	ldi	r25, 0x00	; 0
    481e:	93 8b       	std	Z+19, r25	; 0x13
    4820:	82 8b       	std	Z+18, r24	; 0x12
    4822:	8a ec       	ldi	r24, 0xCA	; 202
    4824:	90 e0       	ldi	r25, 0x00	; 0
    4826:	95 8b       	std	Z+21, r25	; 0x15
    4828:	84 8b       	std	Z+20, r24	; 0x14
    482a:	8e ec       	ldi	r24, 0xCE	; 206
    482c:	90 e0       	ldi	r25, 0x00	; 0
    482e:	97 8b       	std	Z+23, r25	; 0x17
    4830:	86 8b       	std	Z+22, r24	; 0x16
    4832:	11 8e       	std	Z+25, r1	; 0x19
    4834:	12 8e       	std	Z+26, r1	; 0x1a
    4836:	13 8e       	std	Z+27, r1	; 0x1b
    4838:	14 8e       	std	Z+28, r1	; 0x1c
    483a:	08 95       	ret

0000483c <__vector_51>:
// first place.

#if defined(HAVE_HWSERIAL2)

ISR(USART2_RX_vect)
{
    483c:	1f 92       	push	r1
    483e:	0f 92       	push	r0
    4840:	0f b6       	in	r0, 0x3f	; 63
    4842:	0f 92       	push	r0
    4844:	11 24       	eor	r1, r1
    4846:	0b b6       	in	r0, 0x3b	; 59
    4848:	0f 92       	push	r0
    484a:	2f 93       	push	r18
    484c:	8f 93       	push	r24
    484e:	9f 93       	push	r25
    4850:	af 93       	push	r26
    4852:	bf 93       	push	r27
    4854:	ef 93       	push	r30
    4856:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    4858:	e0 91 af 0b 	lds	r30, 0x0BAF
    485c:	f0 91 b0 0b 	lds	r31, 0x0BB0
    4860:	80 81       	ld	r24, Z
    4862:	82 fd       	sbrc	r24, 2
    4864:	14 c0       	rjmp	.+40     	; 0x488e <__vector_51+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    4866:	ef e9       	ldi	r30, 0x9F	; 159
    4868:	fb e0       	ldi	r31, 0x0B	; 11
    486a:	a6 89       	ldd	r26, Z+22	; 0x16
    486c:	b7 89       	ldd	r27, Z+23	; 0x17
    486e:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    4870:	81 8d       	ldd	r24, Z+25	; 0x19
    4872:	8f 5f       	subi	r24, 0xFF	; 255
    4874:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    4876:	92 8d       	ldd	r25, Z+26	; 0x1a
    4878:	89 17       	cp	r24, r25
    487a:	71 f0       	breq	.+28     	; 0x4898 <__vector_51+0x5c>
      _rx_buffer[_rx_buffer_head] = c;
    487c:	df 01       	movw	r26, r30
    487e:	e1 8d       	ldd	r30, Z+25	; 0x19
    4880:	f0 e0       	ldi	r31, 0x00	; 0
    4882:	e1 56       	subi	r30, 0x61	; 97
    4884:	f4 4f       	sbci	r31, 0xF4	; 244
    4886:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
    4888:	59 96       	adiw	r26, 0x19	; 25
    488a:	8c 93       	st	X, r24
    488c:	05 c0       	rjmp	.+10     	; 0x4898 <__vector_51+0x5c>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    488e:	e0 91 b5 0b 	lds	r30, 0x0BB5
    4892:	f0 91 b6 0b 	lds	r31, 0x0BB6
    4896:	80 81       	ld	r24, Z
  Serial2._rx_complete_irq();
}
    4898:	ff 91       	pop	r31
    489a:	ef 91       	pop	r30
    489c:	bf 91       	pop	r27
    489e:	af 91       	pop	r26
    48a0:	9f 91       	pop	r25
    48a2:	8f 91       	pop	r24
    48a4:	2f 91       	pop	r18
    48a6:	0f 90       	pop	r0
    48a8:	0b be       	out	0x3b, r0	; 59
    48aa:	0f 90       	pop	r0
    48ac:	0f be       	out	0x3f, r0	; 63
    48ae:	0f 90       	pop	r0
    48b0:	1f 90       	pop	r1
    48b2:	18 95       	reti

000048b4 <__vector_52>:

ISR(USART2_UDRE_vect)
{
    48b4:	1f 92       	push	r1
    48b6:	0f 92       	push	r0
    48b8:	0f b6       	in	r0, 0x3f	; 63
    48ba:	0f 92       	push	r0
    48bc:	11 24       	eor	r1, r1
    48be:	0b b6       	in	r0, 0x3b	; 59
    48c0:	0f 92       	push	r0
    48c2:	2f 93       	push	r18
    48c4:	3f 93       	push	r19
    48c6:	4f 93       	push	r20
    48c8:	5f 93       	push	r21
    48ca:	6f 93       	push	r22
    48cc:	7f 93       	push	r23
    48ce:	8f 93       	push	r24
    48d0:	9f 93       	push	r25
    48d2:	af 93       	push	r26
    48d4:	bf 93       	push	r27
    48d6:	ef 93       	push	r30
    48d8:	ff 93       	push	r31
  Serial2._tx_udr_empty_irq();
    48da:	8f e9       	ldi	r24, 0x9F	; 159
    48dc:	9b e0       	ldi	r25, 0x0B	; 11
    48de:	76 dd       	rcall	.-1300   	; 0x43cc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    48e0:	ff 91       	pop	r31
    48e2:	ef 91       	pop	r30
    48e4:	bf 91       	pop	r27
    48e6:	af 91       	pop	r26
    48e8:	9f 91       	pop	r25
    48ea:	8f 91       	pop	r24
    48ec:	7f 91       	pop	r23
    48ee:	6f 91       	pop	r22
    48f0:	5f 91       	pop	r21
    48f2:	4f 91       	pop	r20
    48f4:	3f 91       	pop	r19
    48f6:	2f 91       	pop	r18
    48f8:	0f 90       	pop	r0
    48fa:	0b be       	out	0x3b, r0	; 59
    48fc:	0f 90       	pop	r0
    48fe:	0f be       	out	0x3f, r0	; 63
    4900:	0f 90       	pop	r0
    4902:	1f 90       	pop	r1
    4904:	18 95       	reti

00004906 <_Z17Serial2_availablev>:
HardwareSerial Serial2(&UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial2_available() {
  return Serial2.available();
    4906:	8f e9       	ldi	r24, 0x9F	; 159
    4908:	9b e0       	ldi	r25, 0x0B	; 11
    490a:	01 dd       	rcall	.-1534   	; 0x430e <_ZN14HardwareSerial9availableEv>
    490c:	21 e0       	ldi	r18, 0x01	; 1
    490e:	89 2b       	or	r24, r25
    4910:	09 f4       	brne	.+2      	; 0x4914 <_Z17Serial2_availablev+0xe>
    4912:	20 e0       	ldi	r18, 0x00	; 0
}
    4914:	82 2f       	mov	r24, r18
    4916:	08 95       	ret

00004918 <_GLOBAL__sub_I___vector_51>:
    4918:	ef e9       	ldi	r30, 0x9F	; 159
    491a:	fb e0       	ldi	r31, 0x0B	; 11
    491c:	13 82       	std	Z+3, r1	; 0x03
    491e:	12 82       	std	Z+2, r1	; 0x02
    4920:	88 ee       	ldi	r24, 0xE8	; 232
    4922:	93 e0       	ldi	r25, 0x03	; 3
    4924:	a0 e0       	ldi	r26, 0x00	; 0
    4926:	b0 e0       	ldi	r27, 0x00	; 0
    4928:	84 83       	std	Z+4, r24	; 0x04
    492a:	95 83       	std	Z+5, r25	; 0x05
    492c:	a6 83       	std	Z+6, r26	; 0x06
    492e:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    4930:	83 e0       	ldi	r24, 0x03	; 3
    4932:	95 e0       	ldi	r25, 0x05	; 5
    4934:	91 83       	std	Z+1, r25	; 0x01
    4936:	80 83       	st	Z, r24
    4938:	85 ed       	ldi	r24, 0xD5	; 213
    493a:	90 e0       	ldi	r25, 0x00	; 0
    493c:	95 87       	std	Z+13, r25	; 0x0d
    493e:	84 87       	std	Z+12, r24	; 0x0c
    4940:	84 ed       	ldi	r24, 0xD4	; 212
    4942:	90 e0       	ldi	r25, 0x00	; 0
    4944:	97 87       	std	Z+15, r25	; 0x0f
    4946:	86 87       	std	Z+14, r24	; 0x0e
    4948:	80 ed       	ldi	r24, 0xD0	; 208
    494a:	90 e0       	ldi	r25, 0x00	; 0
    494c:	91 8b       	std	Z+17, r25	; 0x11
    494e:	80 8b       	std	Z+16, r24	; 0x10
    4950:	81 ed       	ldi	r24, 0xD1	; 209
    4952:	90 e0       	ldi	r25, 0x00	; 0
    4954:	93 8b       	std	Z+19, r25	; 0x13
    4956:	82 8b       	std	Z+18, r24	; 0x12
    4958:	82 ed       	ldi	r24, 0xD2	; 210
    495a:	90 e0       	ldi	r25, 0x00	; 0
    495c:	95 8b       	std	Z+21, r25	; 0x15
    495e:	84 8b       	std	Z+20, r24	; 0x14
    4960:	86 ed       	ldi	r24, 0xD6	; 214
    4962:	90 e0       	ldi	r25, 0x00	; 0
    4964:	97 8b       	std	Z+23, r25	; 0x17
    4966:	86 8b       	std	Z+22, r24	; 0x16
    4968:	11 8e       	std	Z+25, r1	; 0x19
    496a:	12 8e       	std	Z+26, r1	; 0x1a
    496c:	13 8e       	std	Z+27, r1	; 0x1b
    496e:	14 8e       	std	Z+28, r1	; 0x1c
    4970:	08 95       	ret

00004972 <__vector_54>:
// first place.

#if defined(HAVE_HWSERIAL3)

ISR(USART3_RX_vect)
{
    4972:	1f 92       	push	r1
    4974:	0f 92       	push	r0
    4976:	0f b6       	in	r0, 0x3f	; 63
    4978:	0f 92       	push	r0
    497a:	11 24       	eor	r1, r1
    497c:	0b b6       	in	r0, 0x3b	; 59
    497e:	0f 92       	push	r0
    4980:	2f 93       	push	r18
    4982:	8f 93       	push	r24
    4984:	9f 93       	push	r25
    4986:	af 93       	push	r26
    4988:	bf 93       	push	r27
    498a:	ef 93       	push	r30
    498c:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    498e:	e0 91 4c 0c 	lds	r30, 0x0C4C
    4992:	f0 91 4d 0c 	lds	r31, 0x0C4D
    4996:	80 81       	ld	r24, Z
    4998:	82 fd       	sbrc	r24, 2
    499a:	14 c0       	rjmp	.+40     	; 0x49c4 <__vector_54+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    499c:	ec e3       	ldi	r30, 0x3C	; 60
    499e:	fc e0       	ldi	r31, 0x0C	; 12
    49a0:	a6 89       	ldd	r26, Z+22	; 0x16
    49a2:	b7 89       	ldd	r27, Z+23	; 0x17
    49a4:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    49a6:	81 8d       	ldd	r24, Z+25	; 0x19
    49a8:	8f 5f       	subi	r24, 0xFF	; 255
    49aa:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    49ac:	92 8d       	ldd	r25, Z+26	; 0x1a
    49ae:	89 17       	cp	r24, r25
    49b0:	71 f0       	breq	.+28     	; 0x49ce <__vector_54+0x5c>
      _rx_buffer[_rx_buffer_head] = c;
    49b2:	df 01       	movw	r26, r30
    49b4:	e1 8d       	ldd	r30, Z+25	; 0x19
    49b6:	f0 e0       	ldi	r31, 0x00	; 0
    49b8:	e4 5c       	subi	r30, 0xC4	; 196
    49ba:	f3 4f       	sbci	r31, 0xF3	; 243
    49bc:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
    49be:	59 96       	adiw	r26, 0x19	; 25
    49c0:	8c 93       	st	X, r24
    49c2:	05 c0       	rjmp	.+10     	; 0x49ce <__vector_54+0x5c>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    49c4:	e0 91 52 0c 	lds	r30, 0x0C52
    49c8:	f0 91 53 0c 	lds	r31, 0x0C53
    49cc:	80 81       	ld	r24, Z
  Serial3._rx_complete_irq();
}
    49ce:	ff 91       	pop	r31
    49d0:	ef 91       	pop	r30
    49d2:	bf 91       	pop	r27
    49d4:	af 91       	pop	r26
    49d6:	9f 91       	pop	r25
    49d8:	8f 91       	pop	r24
    49da:	2f 91       	pop	r18
    49dc:	0f 90       	pop	r0
    49de:	0b be       	out	0x3b, r0	; 59
    49e0:	0f 90       	pop	r0
    49e2:	0f be       	out	0x3f, r0	; 63
    49e4:	0f 90       	pop	r0
    49e6:	1f 90       	pop	r1
    49e8:	18 95       	reti

000049ea <__vector_55>:

ISR(USART3_UDRE_vect)
{
    49ea:	1f 92       	push	r1
    49ec:	0f 92       	push	r0
    49ee:	0f b6       	in	r0, 0x3f	; 63
    49f0:	0f 92       	push	r0
    49f2:	11 24       	eor	r1, r1
    49f4:	0b b6       	in	r0, 0x3b	; 59
    49f6:	0f 92       	push	r0
    49f8:	2f 93       	push	r18
    49fa:	3f 93       	push	r19
    49fc:	4f 93       	push	r20
    49fe:	5f 93       	push	r21
    4a00:	6f 93       	push	r22
    4a02:	7f 93       	push	r23
    4a04:	8f 93       	push	r24
    4a06:	9f 93       	push	r25
    4a08:	af 93       	push	r26
    4a0a:	bf 93       	push	r27
    4a0c:	ef 93       	push	r30
    4a0e:	ff 93       	push	r31
  Serial3._tx_udr_empty_irq();
    4a10:	8c e3       	ldi	r24, 0x3C	; 60
    4a12:	9c e0       	ldi	r25, 0x0C	; 12
    4a14:	db dc       	rcall	.-1610   	; 0x43cc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    4a16:	ff 91       	pop	r31
    4a18:	ef 91       	pop	r30
    4a1a:	bf 91       	pop	r27
    4a1c:	af 91       	pop	r26
    4a1e:	9f 91       	pop	r25
    4a20:	8f 91       	pop	r24
    4a22:	7f 91       	pop	r23
    4a24:	6f 91       	pop	r22
    4a26:	5f 91       	pop	r21
    4a28:	4f 91       	pop	r20
    4a2a:	3f 91       	pop	r19
    4a2c:	2f 91       	pop	r18
    4a2e:	0f 90       	pop	r0
    4a30:	0b be       	out	0x3b, r0	; 59
    4a32:	0f 90       	pop	r0
    4a34:	0f be       	out	0x3f, r0	; 63
    4a36:	0f 90       	pop	r0
    4a38:	1f 90       	pop	r1
    4a3a:	18 95       	reti

00004a3c <_Z17Serial3_availablev>:
HardwareSerial Serial3(&UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial3_available() {
  return Serial3.available();
    4a3c:	8c e3       	ldi	r24, 0x3C	; 60
    4a3e:	9c e0       	ldi	r25, 0x0C	; 12
    4a40:	66 dc       	rcall	.-1844   	; 0x430e <_ZN14HardwareSerial9availableEv>
    4a42:	21 e0       	ldi	r18, 0x01	; 1
    4a44:	89 2b       	or	r24, r25
    4a46:	09 f4       	brne	.+2      	; 0x4a4a <_Z17Serial3_availablev+0xe>
    4a48:	20 e0       	ldi	r18, 0x00	; 0
}
    4a4a:	82 2f       	mov	r24, r18
    4a4c:	08 95       	ret

00004a4e <_GLOBAL__sub_I___vector_54>:
    4a4e:	ec e3       	ldi	r30, 0x3C	; 60
    4a50:	fc e0       	ldi	r31, 0x0C	; 12
    4a52:	13 82       	std	Z+3, r1	; 0x03
    4a54:	12 82       	std	Z+2, r1	; 0x02
    4a56:	88 ee       	ldi	r24, 0xE8	; 232
    4a58:	93 e0       	ldi	r25, 0x03	; 3
    4a5a:	a0 e0       	ldi	r26, 0x00	; 0
    4a5c:	b0 e0       	ldi	r27, 0x00	; 0
    4a5e:	84 83       	std	Z+4, r24	; 0x04
    4a60:	95 83       	std	Z+5, r25	; 0x05
    4a62:	a6 83       	std	Z+6, r26	; 0x06
    4a64:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    4a66:	83 e0       	ldi	r24, 0x03	; 3
    4a68:	95 e0       	ldi	r25, 0x05	; 5
    4a6a:	91 83       	std	Z+1, r25	; 0x01
    4a6c:	80 83       	st	Z, r24
    4a6e:	85 e3       	ldi	r24, 0x35	; 53
    4a70:	91 e0       	ldi	r25, 0x01	; 1
    4a72:	95 87       	std	Z+13, r25	; 0x0d
    4a74:	84 87       	std	Z+12, r24	; 0x0c
    4a76:	84 e3       	ldi	r24, 0x34	; 52
    4a78:	91 e0       	ldi	r25, 0x01	; 1
    4a7a:	97 87       	std	Z+15, r25	; 0x0f
    4a7c:	86 87       	std	Z+14, r24	; 0x0e
    4a7e:	80 e3       	ldi	r24, 0x30	; 48
    4a80:	91 e0       	ldi	r25, 0x01	; 1
    4a82:	91 8b       	std	Z+17, r25	; 0x11
    4a84:	80 8b       	std	Z+16, r24	; 0x10
    4a86:	81 e3       	ldi	r24, 0x31	; 49
    4a88:	91 e0       	ldi	r25, 0x01	; 1
    4a8a:	93 8b       	std	Z+19, r25	; 0x13
    4a8c:	82 8b       	std	Z+18, r24	; 0x12
    4a8e:	82 e3       	ldi	r24, 0x32	; 50
    4a90:	91 e0       	ldi	r25, 0x01	; 1
    4a92:	95 8b       	std	Z+21, r25	; 0x15
    4a94:	84 8b       	std	Z+20, r24	; 0x14
    4a96:	86 e3       	ldi	r24, 0x36	; 54
    4a98:	91 e0       	ldi	r25, 0x01	; 1
    4a9a:	97 8b       	std	Z+23, r25	; 0x17
    4a9c:	86 8b       	std	Z+22, r24	; 0x16
    4a9e:	11 8e       	std	Z+25, r1	; 0x19
    4aa0:	12 8e       	std	Z+26, r1	; 0x1a
    4aa2:	13 8e       	std	Z+27, r1	; 0x1b
    4aa4:	14 8e       	std	Z+28, r1	; 0x1c
    4aa6:	08 95       	ret

00004aa8 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    4aa8:	08 95       	ret

00004aaa <_ZNK9IPAddress7printToER5Print>:
}

bool IPAddress::operator==(const uint8_t* addr) const
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}
    4aaa:	8f 92       	push	r8
    4aac:	9f 92       	push	r9
    4aae:	af 92       	push	r10
    4ab0:	bf 92       	push	r11
    4ab2:	cf 92       	push	r12
    4ab4:	df 92       	push	r13
    4ab6:	ef 92       	push	r14
    4ab8:	ff 92       	push	r15
    4aba:	0f 93       	push	r16
    4abc:	1f 93       	push	r17
    4abe:	cf 93       	push	r28
    4ac0:	df 93       	push	r29
    4ac2:	5c 01       	movw	r10, r24
    4ac4:	7b 01       	movw	r14, r22
    4ac6:	4c 01       	movw	r8, r24
    4ac8:	82 e0       	ldi	r24, 0x02	; 2
    4aca:	88 0e       	add	r8, r24
    4acc:	91 1c       	adc	r9, r1
    4ace:	65 01       	movw	r12, r10
    4ad0:	e5 e0       	ldi	r30, 0x05	; 5
    4ad2:	ce 0e       	add	r12, r30
    4ad4:	d1 1c       	adc	r13, r1
    4ad6:	00 e0       	ldi	r16, 0x00	; 0
    4ad8:	10 e0       	ldi	r17, 0x00	; 0
    4ada:	f4 01       	movw	r30, r8
    4adc:	61 91       	ld	r22, Z+
    4ade:	4f 01       	movw	r8, r30
    4ae0:	4a e0       	ldi	r20, 0x0A	; 10
    4ae2:	50 e0       	ldi	r21, 0x00	; 0
    4ae4:	c7 01       	movw	r24, r14
    4ae6:	80 d1       	rcall	.+768    	; 0x4de8 <_ZN5Print5printEhi>
    4ae8:	ec 01       	movw	r28, r24
    4aea:	6e e2       	ldi	r22, 0x2E	; 46
    4aec:	c7 01       	movw	r24, r14
    4aee:	8a d0       	rcall	.+276    	; 0x4c04 <_ZN5Print5printEc>
    4af0:	8c 0f       	add	r24, r28
    4af2:	9d 1f       	adc	r25, r29
    4af4:	08 0f       	add	r16, r24
    4af6:	19 1f       	adc	r17, r25
    4af8:	8c 14       	cp	r8, r12
    4afa:	9d 04       	cpc	r9, r13
    4afc:	71 f7       	brne	.-36     	; 0x4ada <_ZNK9IPAddress7printToER5Print+0x30>
    4afe:	4a e0       	ldi	r20, 0x0A	; 10
    4b00:	50 e0       	ldi	r21, 0x00	; 0
    4b02:	f5 01       	movw	r30, r10
    4b04:	65 81       	ldd	r22, Z+5	; 0x05
    4b06:	c7 01       	movw	r24, r14
    4b08:	6f d1       	rcall	.+734    	; 0x4de8 <_ZN5Print5printEhi>
    4b0a:	80 0f       	add	r24, r16
    4b0c:	91 1f       	adc	r25, r17
    4b0e:	df 91       	pop	r29
    4b10:	cf 91       	pop	r28
    4b12:	1f 91       	pop	r17
    4b14:	0f 91       	pop	r16
    4b16:	ff 90       	pop	r15
    4b18:	ef 90       	pop	r14
    4b1a:	df 90       	pop	r13
    4b1c:	cf 90       	pop	r12
    4b1e:	bf 90       	pop	r11
    4b20:	af 90       	pop	r10
    4b22:	9f 90       	pop	r9
    4b24:	8f 90       	pop	r8
    4b26:	08 95       	ret

00004b28 <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    4b28:	e9 ed       	ldi	r30, 0xD9	; 217
    4b2a:	fc e0       	ldi	r31, 0x0C	; 12
    4b2c:	83 e1       	ldi	r24, 0x13	; 19
    4b2e:	95 e0       	ldi	r25, 0x05	; 5
    4b30:	91 83       	std	Z+1, r25	; 0x01
    4b32:	80 83       	st	Z, r24
{
    _address.bytes[0] = first_octet;
    4b34:	12 82       	std	Z+2, r1	; 0x02
    _address.bytes[1] = second_octet;
    4b36:	13 82       	std	Z+3, r1	; 0x03
    _address.bytes[2] = third_octet;
    4b38:	14 82       	std	Z+4, r1	; 0x04
    _address.bytes[3] = fourth_octet;
    4b3a:	15 82       	std	Z+5, r1	; 0x05
    4b3c:	08 95       	ret

00004b3e <initVariant>:
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    4b3e:	08 95       	ret

00004b40 <main>:

int main(void)
{
	init();
    4b40:	47 d5       	rcall	.+2702   	; 0x55d0 <init>

	initVariant();
    4b42:	fd df       	rcall	.-6      	; 0x4b3e <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    4b44:	12 db       	rcall	.-2524   	; 0x416a <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    4b46:	c5 eb       	ldi	r28, 0xB5	; 181
    4b48:	d1 e2       	ldi	r29, 0x21	; 33
#endif
	
	setup();
    
	for (;;) {
		loop();
    4b4a:	ca da       	rcall	.-2668   	; 0x40e0 <loop>
		if (serialEventRun) serialEventRun();
    4b4c:	20 97       	sbiw	r28, 0x00	; 0
    4b4e:	e9 f3       	breq	.-6      	; 0x4b4a <main+0xa>
    4b50:	0c dc       	rcall	.-2024   	; 0x436a <_Z14serialEventRunv>
    4b52:	fb cf       	rjmp	.-10     	; 0x4b4a <main+0xa>

00004b54 <_Znwj>:
  return malloc(size);
}

void *operator new[](size_t size) {
  return malloc(size);
}
    4b54:	0c 94 b5 30 	jmp	0x616a	; 0x616a <malloc>
    4b58:	08 95       	ret

00004b5a <_ZdlPv>:

void operator delete(void * ptr) {
  free(ptr);
    4b5a:	0c 94 4a 31 	jmp	0x6294	; 0x6294 <free>
    4b5e:	08 95       	ret

00004b60 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
  return n;
}
    4b60:	cf 92       	push	r12
    4b62:	df 92       	push	r13
    4b64:	ef 92       	push	r14
    4b66:	ff 92       	push	r15
    4b68:	0f 93       	push	r16
    4b6a:	1f 93       	push	r17
    4b6c:	cf 93       	push	r28
    4b6e:	df 93       	push	r29
    4b70:	41 15       	cp	r20, r1
    4b72:	51 05       	cpc	r21, r1
    4b74:	b1 f0       	breq	.+44     	; 0x4ba2 <_ZN5Print5writeEPKhj+0x42>
    4b76:	8c 01       	movw	r16, r24
    4b78:	e6 2e       	mov	r14, r22
    4b7a:	f7 2e       	mov	r15, r23
    4b7c:	ea 01       	movw	r28, r20
    4b7e:	c1 2c       	mov	r12, r1
    4b80:	d1 2c       	mov	r13, r1
    4b82:	d7 01       	movw	r26, r14
    4b84:	6d 91       	ld	r22, X+
    4b86:	7d 01       	movw	r14, r26
    4b88:	d8 01       	movw	r26, r16
    4b8a:	ed 91       	ld	r30, X+
    4b8c:	fc 91       	ld	r31, X
    4b8e:	01 90       	ld	r0, Z+
    4b90:	f0 81       	ld	r31, Z
    4b92:	e0 2d       	mov	r30, r0
    4b94:	c8 01       	movw	r24, r16
    4b96:	19 95       	eicall
    4b98:	c8 0e       	add	r12, r24
    4b9a:	d9 1e       	adc	r13, r25
    4b9c:	21 97       	sbiw	r28, 0x01	; 1
    4b9e:	89 f7       	brne	.-30     	; 0x4b82 <_ZN5Print5writeEPKhj+0x22>
    4ba0:	02 c0       	rjmp	.+4      	; 0x4ba6 <_ZN5Print5writeEPKhj+0x46>
    4ba2:	c1 2c       	mov	r12, r1
    4ba4:	d1 2c       	mov	r13, r1
    4ba6:	c6 01       	movw	r24, r12
    4ba8:	df 91       	pop	r29
    4baa:	cf 91       	pop	r28
    4bac:	1f 91       	pop	r17
    4bae:	0f 91       	pop	r16
    4bb0:	ff 90       	pop	r15
    4bb2:	ef 90       	pop	r14
    4bb4:	df 90       	pop	r13
    4bb6:	cf 90       	pop	r12
    4bb8:	08 95       	ret

00004bba <_ZN5Print5printERK6String>:
    4bba:	dc 01       	movw	r26, r24
    4bbc:	ed 91       	ld	r30, X+
    4bbe:	fc 91       	ld	r31, X
    4bc0:	db 01       	movw	r26, r22
    4bc2:	14 96       	adiw	r26, 0x04	; 4
    4bc4:	4d 91       	ld	r20, X+
    4bc6:	5c 91       	ld	r21, X
    4bc8:	15 97       	sbiw	r26, 0x05	; 5
    4bca:	6d 91       	ld	r22, X+
    4bcc:	7c 91       	ld	r23, X
    4bce:	02 80       	ldd	r0, Z+2	; 0x02
    4bd0:	f3 81       	ldd	r31, Z+3	; 0x03
    4bd2:	e0 2d       	mov	r30, r0
    4bd4:	19 95       	eicall
    4bd6:	08 95       	ret

00004bd8 <_ZN5Print5printEPKc>:
    4bd8:	61 15       	cp	r22, r1
    4bda:	71 05       	cpc	r23, r1
    4bdc:	81 f0       	breq	.+32     	; 0x4bfe <_ZN5Print5printEPKc+0x26>
    4bde:	fb 01       	movw	r30, r22
    4be0:	01 90       	ld	r0, Z+
    4be2:	00 20       	and	r0, r0
    4be4:	e9 f7       	brne	.-6      	; 0x4be0 <_ZN5Print5printEPKc+0x8>
    4be6:	31 97       	sbiw	r30, 0x01	; 1
    4be8:	af 01       	movw	r20, r30
    4bea:	46 1b       	sub	r20, r22
    4bec:	57 0b       	sbc	r21, r23
    4bee:	dc 01       	movw	r26, r24
    4bf0:	ed 91       	ld	r30, X+
    4bf2:	fc 91       	ld	r31, X
    4bf4:	02 80       	ldd	r0, Z+2	; 0x02
    4bf6:	f3 81       	ldd	r31, Z+3	; 0x03
    4bf8:	e0 2d       	mov	r30, r0
    4bfa:	19 95       	eicall
    4bfc:	08 95       	ret
    4bfe:	80 e0       	ldi	r24, 0x00	; 0
    4c00:	90 e0       	ldi	r25, 0x00	; 0
    4c02:	08 95       	ret

00004c04 <_ZN5Print5printEc>:
    4c04:	dc 01       	movw	r26, r24
    4c06:	ed 91       	ld	r30, X+
    4c08:	fc 91       	ld	r31, X
    4c0a:	01 90       	ld	r0, Z+
    4c0c:	f0 81       	ld	r31, Z
    4c0e:	e0 2d       	mov	r30, r0
    4c10:	19 95       	eicall
    4c12:	08 95       	ret

00004c14 <_ZN5Print7printlnEv>:
    4c14:	dc 01       	movw	r26, r24
    4c16:	ed 91       	ld	r30, X+
    4c18:	fc 91       	ld	r31, X
    4c1a:	02 80       	ldd	r0, Z+2	; 0x02
    4c1c:	f3 81       	ldd	r31, Z+3	; 0x03
    4c1e:	e0 2d       	mov	r30, r0
    4c20:	42 e0       	ldi	r20, 0x02	; 2
    4c22:	50 e0       	ldi	r21, 0x00	; 0
    4c24:	65 e1       	ldi	r22, 0x15	; 21
    4c26:	75 e0       	ldi	r23, 0x05	; 5
    4c28:	19 95       	eicall
    4c2a:	08 95       	ret

00004c2c <_ZN5Print7printlnEPKc>:
    4c2c:	0f 93       	push	r16
    4c2e:	1f 93       	push	r17
    4c30:	cf 93       	push	r28
    4c32:	df 93       	push	r29
    4c34:	ec 01       	movw	r28, r24
    4c36:	d0 df       	rcall	.-96     	; 0x4bd8 <_ZN5Print5printEPKc>
    4c38:	8c 01       	movw	r16, r24
    4c3a:	ce 01       	movw	r24, r28
    4c3c:	eb df       	rcall	.-42     	; 0x4c14 <_ZN5Print7printlnEv>
    4c3e:	80 0f       	add	r24, r16
    4c40:	91 1f       	adc	r25, r17
    4c42:	df 91       	pop	r29
    4c44:	cf 91       	pop	r28
    4c46:	1f 91       	pop	r17
    4c48:	0f 91       	pop	r16
    4c4a:	08 95       	ret

00004c4c <_ZN5Print11printNumberEmh>:
    4c4c:	4f 92       	push	r4
    4c4e:	5f 92       	push	r5
    4c50:	6f 92       	push	r6
    4c52:	7f 92       	push	r7
    4c54:	9f 92       	push	r9
    4c56:	af 92       	push	r10
    4c58:	bf 92       	push	r11
    4c5a:	cf 92       	push	r12
    4c5c:	df 92       	push	r13
    4c5e:	ef 92       	push	r14
    4c60:	ff 92       	push	r15
    4c62:	0f 93       	push	r16
    4c64:	1f 93       	push	r17
    4c66:	cf 93       	push	r28
    4c68:	df 93       	push	r29
    4c6a:	cd b7       	in	r28, 0x3d	; 61
    4c6c:	de b7       	in	r29, 0x3e	; 62
    4c6e:	a1 97       	sbiw	r28, 0x21	; 33
    4c70:	0f b6       	in	r0, 0x3f	; 63
    4c72:	f8 94       	cli
    4c74:	de bf       	out	0x3e, r29	; 62
    4c76:	0f be       	out	0x3f, r0	; 63
    4c78:	cd bf       	out	0x3d, r28	; 61
    4c7a:	5c 01       	movw	r10, r24
    4c7c:	6a 01       	movw	r12, r20
    4c7e:	7b 01       	movw	r14, r22
    4c80:	92 2e       	mov	r9, r18
    4c82:	19 a2       	std	Y+33, r1	; 0x21
    4c84:	81 e0       	ldi	r24, 0x01	; 1
    4c86:	82 17       	cp	r24, r18
    4c88:	20 f0       	brcs	.+8      	; 0x4c92 <_ZN5Print11printNumberEmh+0x46>
    4c8a:	0f 2e       	mov	r0, r31
    4c8c:	fa e0       	ldi	r31, 0x0A	; 10
    4c8e:	9f 2e       	mov	r9, r31
    4c90:	f0 2d       	mov	r31, r0
    4c92:	8e 01       	movw	r16, r28
    4c94:	0f 5d       	subi	r16, 0xDF	; 223
    4c96:	1f 4f       	sbci	r17, 0xFF	; 255
    4c98:	49 2c       	mov	r4, r9
    4c9a:	51 2c       	mov	r5, r1
    4c9c:	61 2c       	mov	r6, r1
    4c9e:	71 2c       	mov	r7, r1
    4ca0:	c7 01       	movw	r24, r14
    4ca2:	b6 01       	movw	r22, r12
    4ca4:	a3 01       	movw	r20, r6
    4ca6:	92 01       	movw	r18, r4
    4ca8:	0e 94 58 30 	call	0x60b0	; 0x60b0 <__udivmodsi4>
    4cac:	8c 2d       	mov	r24, r12
    4cae:	92 9e       	mul	r9, r18
    4cb0:	80 19       	sub	r24, r0
    4cb2:	11 24       	eor	r1, r1
    4cb4:	01 50       	subi	r16, 0x01	; 1
    4cb6:	11 09       	sbc	r17, r1
    4cb8:	8a 30       	cpi	r24, 0x0A	; 10
    4cba:	10 f4       	brcc	.+4      	; 0x4cc0 <_ZN5Print11printNumberEmh+0x74>
    4cbc:	80 5d       	subi	r24, 0xD0	; 208
    4cbe:	01 c0       	rjmp	.+2      	; 0x4cc2 <_ZN5Print11printNumberEmh+0x76>
    4cc0:	89 5c       	subi	r24, 0xC9	; 201
    4cc2:	d8 01       	movw	r26, r16
    4cc4:	8c 93       	st	X, r24
    4cc6:	c2 2e       	mov	r12, r18
    4cc8:	d3 2e       	mov	r13, r19
    4cca:	e4 2e       	mov	r14, r20
    4ccc:	f5 2e       	mov	r15, r21
    4cce:	c1 14       	cp	r12, r1
    4cd0:	d1 04       	cpc	r13, r1
    4cd2:	e1 04       	cpc	r14, r1
    4cd4:	f1 04       	cpc	r15, r1
    4cd6:	21 f7       	brne	.-56     	; 0x4ca0 <_ZN5Print11printNumberEmh+0x54>
    4cd8:	01 15       	cp	r16, r1
    4cda:	11 05       	cpc	r17, r1
    4cdc:	91 f0       	breq	.+36     	; 0x4d02 <_ZN5Print11printNumberEmh+0xb6>
    4cde:	f8 01       	movw	r30, r16
    4ce0:	01 90       	ld	r0, Z+
    4ce2:	00 20       	and	r0, r0
    4ce4:	e9 f7       	brne	.-6      	; 0x4ce0 <_ZN5Print11printNumberEmh+0x94>
    4ce6:	31 97       	sbiw	r30, 0x01	; 1
    4ce8:	af 01       	movw	r20, r30
    4cea:	40 1b       	sub	r20, r16
    4cec:	51 0b       	sbc	r21, r17
    4cee:	d5 01       	movw	r26, r10
    4cf0:	ed 91       	ld	r30, X+
    4cf2:	fc 91       	ld	r31, X
    4cf4:	02 80       	ldd	r0, Z+2	; 0x02
    4cf6:	f3 81       	ldd	r31, Z+3	; 0x03
    4cf8:	e0 2d       	mov	r30, r0
    4cfa:	b8 01       	movw	r22, r16
    4cfc:	c5 01       	movw	r24, r10
    4cfe:	19 95       	eicall
    4d00:	02 c0       	rjmp	.+4      	; 0x4d06 <_ZN5Print11printNumberEmh+0xba>
    4d02:	80 e0       	ldi	r24, 0x00	; 0
    4d04:	90 e0       	ldi	r25, 0x00	; 0
    4d06:	a1 96       	adiw	r28, 0x21	; 33
    4d08:	0f b6       	in	r0, 0x3f	; 63
    4d0a:	f8 94       	cli
    4d0c:	de bf       	out	0x3e, r29	; 62
    4d0e:	0f be       	out	0x3f, r0	; 63
    4d10:	cd bf       	out	0x3d, r28	; 61
    4d12:	df 91       	pop	r29
    4d14:	cf 91       	pop	r28
    4d16:	1f 91       	pop	r17
    4d18:	0f 91       	pop	r16
    4d1a:	ff 90       	pop	r15
    4d1c:	ef 90       	pop	r14
    4d1e:	df 90       	pop	r13
    4d20:	cf 90       	pop	r12
    4d22:	bf 90       	pop	r11
    4d24:	af 90       	pop	r10
    4d26:	9f 90       	pop	r9
    4d28:	7f 90       	pop	r7
    4d2a:	6f 90       	pop	r6
    4d2c:	5f 90       	pop	r5
    4d2e:	4f 90       	pop	r4
    4d30:	08 95       	ret

00004d32 <_ZN5Print5printEli>:
    4d32:	cf 92       	push	r12
    4d34:	df 92       	push	r13
    4d36:	ef 92       	push	r14
    4d38:	ff 92       	push	r15
    4d3a:	0f 93       	push	r16
    4d3c:	1f 93       	push	r17
    4d3e:	cf 93       	push	r28
    4d40:	df 93       	push	r29
    4d42:	ec 01       	movw	r28, r24
    4d44:	6a 01       	movw	r12, r20
    4d46:	7b 01       	movw	r14, r22
    4d48:	21 15       	cp	r18, r1
    4d4a:	31 05       	cpc	r19, r1
    4d4c:	41 f4       	brne	.+16     	; 0x4d5e <_ZN5Print5printEli+0x2c>
    4d4e:	e8 81       	ld	r30, Y
    4d50:	f9 81       	ldd	r31, Y+1	; 0x01
    4d52:	01 90       	ld	r0, Z+
    4d54:	f0 81       	ld	r31, Z
    4d56:	e0 2d       	mov	r30, r0
    4d58:	64 2f       	mov	r22, r20
    4d5a:	19 95       	eicall
    4d5c:	19 c0       	rjmp	.+50     	; 0x4d90 <_ZN5Print5printEli+0x5e>
    4d5e:	2a 30       	cpi	r18, 0x0A	; 10
    4d60:	31 05       	cpc	r19, r1
    4d62:	a9 f4       	brne	.+42     	; 0x4d8e <_ZN5Print5printEli+0x5c>
    4d64:	77 23       	and	r23, r23
    4d66:	84 f4       	brge	.+32     	; 0x4d88 <_ZN5Print5printEli+0x56>
    4d68:	6d e2       	ldi	r22, 0x2D	; 45
    4d6a:	4c df       	rcall	.-360    	; 0x4c04 <_ZN5Print5printEc>
    4d6c:	8c 01       	movw	r16, r24
    4d6e:	44 27       	eor	r20, r20
    4d70:	55 27       	eor	r21, r21
    4d72:	ba 01       	movw	r22, r20
    4d74:	4c 19       	sub	r20, r12
    4d76:	5d 09       	sbc	r21, r13
    4d78:	6e 09       	sbc	r22, r14
    4d7a:	7f 09       	sbc	r23, r15
    4d7c:	2a e0       	ldi	r18, 0x0A	; 10
    4d7e:	ce 01       	movw	r24, r28
    4d80:	65 df       	rcall	.-310    	; 0x4c4c <_ZN5Print11printNumberEmh>
    4d82:	80 0f       	add	r24, r16
    4d84:	91 1f       	adc	r25, r17
    4d86:	04 c0       	rjmp	.+8      	; 0x4d90 <_ZN5Print5printEli+0x5e>
    4d88:	2a e0       	ldi	r18, 0x0A	; 10
    4d8a:	60 df       	rcall	.-320    	; 0x4c4c <_ZN5Print11printNumberEmh>
    4d8c:	01 c0       	rjmp	.+2      	; 0x4d90 <_ZN5Print5printEli+0x5e>
    4d8e:	5e df       	rcall	.-324    	; 0x4c4c <_ZN5Print11printNumberEmh>
    4d90:	df 91       	pop	r29
    4d92:	cf 91       	pop	r28
    4d94:	1f 91       	pop	r17
    4d96:	0f 91       	pop	r16
    4d98:	ff 90       	pop	r15
    4d9a:	ef 90       	pop	r14
    4d9c:	df 90       	pop	r13
    4d9e:	cf 90       	pop	r12
    4da0:	08 95       	ret

00004da2 <_ZN5Print7printlnEii>:
    4da2:	0f 93       	push	r16
    4da4:	1f 93       	push	r17
    4da6:	cf 93       	push	r28
    4da8:	df 93       	push	r29
    4daa:	ec 01       	movw	r28, r24
    4dac:	9a 01       	movw	r18, r20
    4dae:	ab 01       	movw	r20, r22
    4db0:	77 0f       	add	r23, r23
    4db2:	66 0b       	sbc	r22, r22
    4db4:	77 0b       	sbc	r23, r23
    4db6:	bd df       	rcall	.-134    	; 0x4d32 <_ZN5Print5printEli>
    4db8:	8c 01       	movw	r16, r24
    4dba:	ce 01       	movw	r24, r28
    4dbc:	2b df       	rcall	.-426    	; 0x4c14 <_ZN5Print7printlnEv>
    4dbe:	80 0f       	add	r24, r16
    4dc0:	91 1f       	adc	r25, r17
    4dc2:	df 91       	pop	r29
    4dc4:	cf 91       	pop	r28
    4dc6:	1f 91       	pop	r17
    4dc8:	0f 91       	pop	r16
    4dca:	08 95       	ret

00004dcc <_ZN5Print5printEmi>:
    4dcc:	21 15       	cp	r18, r1
    4dce:	31 05       	cpc	r19, r1
    4dd0:	49 f4       	brne	.+18     	; 0x4de4 <_ZN5Print5printEmi+0x18>
    4dd2:	dc 01       	movw	r26, r24
    4dd4:	ed 91       	ld	r30, X+
    4dd6:	fc 91       	ld	r31, X
    4dd8:	01 90       	ld	r0, Z+
    4dda:	f0 81       	ld	r31, Z
    4ddc:	e0 2d       	mov	r30, r0
    4dde:	64 2f       	mov	r22, r20
    4de0:	19 95       	eicall
    4de2:	08 95       	ret
    4de4:	33 cf       	rjmp	.-410    	; 0x4c4c <_ZN5Print11printNumberEmh>
    4de6:	08 95       	ret

00004de8 <_ZN5Print5printEhi>:
    4de8:	9a 01       	movw	r18, r20
    4dea:	46 2f       	mov	r20, r22
    4dec:	50 e0       	ldi	r21, 0x00	; 0
    4dee:	60 e0       	ldi	r22, 0x00	; 0
    4df0:	70 e0       	ldi	r23, 0x00	; 0
    4df2:	ec cf       	rjmp	.-40     	; 0x4dcc <_ZN5Print5printEmi>
    4df4:	08 95       	ret

00004df6 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    4df6:	4f 92       	push	r4
    4df8:	5f 92       	push	r5
    4dfa:	7f 92       	push	r7
    4dfc:	8f 92       	push	r8
    4dfe:	9f 92       	push	r9
    4e00:	af 92       	push	r10
    4e02:	bf 92       	push	r11
    4e04:	cf 92       	push	r12
    4e06:	df 92       	push	r13
    4e08:	ef 92       	push	r14
    4e0a:	ff 92       	push	r15
    4e0c:	0f 93       	push	r16
    4e0e:	1f 93       	push	r17
    4e10:	cf 93       	push	r28
    4e12:	df 93       	push	r29
    4e14:	00 d0       	rcall	.+0      	; 0x4e16 <_ZN5Print10printFloatEdh+0x20>
    4e16:	1f 92       	push	r1
    4e18:	cd b7       	in	r28, 0x3d	; 61
    4e1a:	de b7       	in	r29, 0x3e	; 62
    4e1c:	8c 01       	movw	r16, r24
    4e1e:	4a 01       	movw	r8, r20
    4e20:	5b 01       	movw	r10, r22
    4e22:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    4e24:	9a 01       	movw	r18, r20
    4e26:	ab 01       	movw	r20, r22
    4e28:	c5 01       	movw	r24, r10
    4e2a:	b4 01       	movw	r22, r8
    4e2c:	0e 94 41 30 	call	0x6082	; 0x6082 <__unordsf2>
    4e30:	88 23       	and	r24, r24
    4e32:	29 f0       	breq	.+10     	; 0x4e3e <_ZN5Print10printFloatEdh+0x48>
    4e34:	68 e1       	ldi	r22, 0x18	; 24
    4e36:	75 e0       	ldi	r23, 0x05	; 5
    4e38:	c8 01       	movw	r24, r16
    4e3a:	ce de       	rcall	.-612    	; 0x4bd8 <_ZN5Print5printEPKc>
    4e3c:	bd c0       	rjmp	.+378    	; 0x4fb8 <_ZN5Print10printFloatEdh+0x1c2>
  if (isinf(number)) return print("inf");
    4e3e:	75 01       	movw	r14, r10
    4e40:	64 01       	movw	r12, r8
    4e42:	e8 94       	clt
    4e44:	f7 f8       	bld	r15, 7
    4e46:	2f ef       	ldi	r18, 0xFF	; 255
    4e48:	3f ef       	ldi	r19, 0xFF	; 255
    4e4a:	4f e7       	ldi	r20, 0x7F	; 127
    4e4c:	5f e7       	ldi	r21, 0x7F	; 127
    4e4e:	c7 01       	movw	r24, r14
    4e50:	b6 01       	movw	r22, r12
    4e52:	0e 94 41 30 	call	0x6082	; 0x6082 <__unordsf2>
    4e56:	81 11       	cpse	r24, r1
    4e58:	0e c0       	rjmp	.+28     	; 0x4e76 <_ZN5Print10printFloatEdh+0x80>
    4e5a:	2f ef       	ldi	r18, 0xFF	; 255
    4e5c:	3f ef       	ldi	r19, 0xFF	; 255
    4e5e:	4f e7       	ldi	r20, 0x7F	; 127
    4e60:	5f e7       	ldi	r21, 0x7F	; 127
    4e62:	c7 01       	movw	r24, r14
    4e64:	b6 01       	movw	r22, r12
    4e66:	57 d7       	rcall	.+3758   	; 0x5d16 <__cmpsf2>
    4e68:	18 16       	cp	r1, r24
    4e6a:	2c f4       	brge	.+10     	; 0x4e76 <_ZN5Print10printFloatEdh+0x80>
    4e6c:	6c e1       	ldi	r22, 0x1C	; 28
    4e6e:	75 e0       	ldi	r23, 0x05	; 5
    4e70:	c8 01       	movw	r24, r16
    4e72:	b2 de       	rcall	.-668    	; 0x4bd8 <_ZN5Print5printEPKc>
    4e74:	a1 c0       	rjmp	.+322    	; 0x4fb8 <_ZN5Print10printFloatEdh+0x1c2>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    4e76:	2f ef       	ldi	r18, 0xFF	; 255
    4e78:	3f ef       	ldi	r19, 0xFF	; 255
    4e7a:	4f e7       	ldi	r20, 0x7F	; 127
    4e7c:	5f e4       	ldi	r21, 0x4F	; 79
    4e7e:	c5 01       	movw	r24, r10
    4e80:	b4 01       	movw	r22, r8
    4e82:	0e 94 da 2f 	call	0x5fb4	; 0x5fb4 <__gesf2>
    4e86:	18 16       	cp	r1, r24
    4e88:	2c f4       	brge	.+10     	; 0x4e94 <_ZN5Print10printFloatEdh+0x9e>
    4e8a:	60 e2       	ldi	r22, 0x20	; 32
    4e8c:	75 e0       	ldi	r23, 0x05	; 5
    4e8e:	c8 01       	movw	r24, r16
    4e90:	a3 de       	rcall	.-698    	; 0x4bd8 <_ZN5Print5printEPKc>
    4e92:	92 c0       	rjmp	.+292    	; 0x4fb8 <_ZN5Print10printFloatEdh+0x1c2>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    4e94:	2f ef       	ldi	r18, 0xFF	; 255
    4e96:	3f ef       	ldi	r19, 0xFF	; 255
    4e98:	4f e7       	ldi	r20, 0x7F	; 127
    4e9a:	5f ec       	ldi	r21, 0xCF	; 207
    4e9c:	c5 01       	movw	r24, r10
    4e9e:	b4 01       	movw	r22, r8
    4ea0:	3a d7       	rcall	.+3700   	; 0x5d16 <__cmpsf2>
    4ea2:	88 23       	and	r24, r24
    4ea4:	2c f4       	brge	.+10     	; 0x4eb0 <_ZN5Print10printFloatEdh+0xba>
    4ea6:	60 e2       	ldi	r22, 0x20	; 32
    4ea8:	75 e0       	ldi	r23, 0x05	; 5
    4eaa:	c8 01       	movw	r24, r16
    4eac:	95 de       	rcall	.-726    	; 0x4bd8 <_ZN5Print5printEPKc>
    4eae:	84 c0       	rjmp	.+264    	; 0x4fb8 <_ZN5Print10printFloatEdh+0x1c2>
  
  // Handle negative numbers
  if (number < 0.0)
    4eb0:	20 e0       	ldi	r18, 0x00	; 0
    4eb2:	30 e0       	ldi	r19, 0x00	; 0
    4eb4:	a9 01       	movw	r20, r18
    4eb6:	c5 01       	movw	r24, r10
    4eb8:	b4 01       	movw	r22, r8
    4eba:	2d d7       	rcall	.+3674   	; 0x5d16 <__cmpsf2>
    4ebc:	88 23       	and	r24, r24
    4ebe:	4c f4       	brge	.+18     	; 0x4ed2 <_ZN5Print10printFloatEdh+0xdc>
  {
     n += print('-');
    4ec0:	6d e2       	ldi	r22, 0x2D	; 45
    4ec2:	c8 01       	movw	r24, r16
    4ec4:	9f de       	rcall	.-706    	; 0x4c04 <_ZN5Print5printEc>
    4ec6:	7c 01       	movw	r14, r24
     number = -number;
    4ec8:	b7 fa       	bst	r11, 7
    4eca:	b0 94       	com	r11
    4ecc:	b7 f8       	bld	r11, 7
    4ece:	b0 94       	com	r11
    4ed0:	02 c0       	rjmp	.+4      	; 0x4ed6 <_ZN5Print10printFloatEdh+0xe0>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    4ed2:	e1 2c       	mov	r14, r1
    4ed4:	f1 2c       	mov	r15, r1
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    4ed6:	77 20       	and	r7, r7
    4ed8:	09 f4       	brne	.+2      	; 0x4edc <_ZN5Print10printFloatEdh+0xe6>
    4eda:	5c c0       	rjmp	.+184    	; 0x4f94 <_ZN5Print10printFloatEdh+0x19e>
    4edc:	d1 2c       	mov	r13, r1
    4ede:	60 e0       	ldi	r22, 0x00	; 0
    4ee0:	70 e0       	ldi	r23, 0x00	; 0
    4ee2:	80 e0       	ldi	r24, 0x00	; 0
    4ee4:	9f e3       	ldi	r25, 0x3F	; 63
    rounding /= 10.0;
    4ee6:	20 e0       	ldi	r18, 0x00	; 0
    4ee8:	30 e0       	ldi	r19, 0x00	; 0
    4eea:	40 e2       	ldi	r20, 0x20	; 32
    4eec:	51 e4       	ldi	r21, 0x41	; 65
    4eee:	17 d7       	rcall	.+3630   	; 0x5d1e <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    4ef0:	d3 94       	inc	r13
    4ef2:	d7 10       	cpse	r13, r7
    4ef4:	f8 cf       	rjmp	.-16     	; 0x4ee6 <_ZN5Print10printFloatEdh+0xf0>
    4ef6:	27 c0       	rjmp	.+78     	; 0x4f46 <_ZN5Print10printFloatEdh+0x150>
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    4ef8:	20 e0       	ldi	r18, 0x00	; 0
    4efa:	30 e0       	ldi	r19, 0x00	; 0
    4efc:	40 e2       	ldi	r20, 0x20	; 32
    4efe:	51 e4       	ldi	r21, 0x41	; 65
    4f00:	c5 01       	movw	r24, r10
    4f02:	b4 01       	movw	r22, r8
    4f04:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <__mulsf3>
    4f08:	4b 01       	movw	r8, r22
    4f0a:	5c 01       	movw	r10, r24
    int toPrint = int(remainder);
    4f0c:	70 d7       	rcall	.+3808   	; 0x5dee <__fixsfsi>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    4f0e:	6b 01       	movw	r12, r22
    4f10:	77 0f       	add	r23, r23
    4f12:	ee 08       	sbc	r14, r14
    4f14:	ff 08       	sbc	r15, r15
    4f16:	2a e0       	ldi	r18, 0x0A	; 10
    4f18:	30 e0       	ldi	r19, 0x00	; 0
    4f1a:	b7 01       	movw	r22, r14
    4f1c:	a6 01       	movw	r20, r12
    4f1e:	c8 01       	movw	r24, r16
    4f20:	08 df       	rcall	.-496    	; 0x4d32 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    4f22:	48 0e       	add	r4, r24
    4f24:	59 1e       	adc	r5, r25
    remainder -= toPrint; 
    4f26:	c7 01       	movw	r24, r14
    4f28:	b6 01       	movw	r22, r12
    4f2a:	94 d7       	rcall	.+3880   	; 0x5e54 <__floatsisf>
    4f2c:	9b 01       	movw	r18, r22
    4f2e:	ac 01       	movw	r20, r24
    4f30:	c5 01       	movw	r24, r10
    4f32:	b4 01       	movw	r22, r8
    4f34:	8b d6       	rcall	.+3350   	; 0x5c4c <__subsf3>
    4f36:	4b 01       	movw	r8, r22
    4f38:	5c 01       	movw	r10, r24
    4f3a:	7a 94       	dec	r7
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    4f3c:	71 10       	cpse	r7, r1
    4f3e:	dc cf       	rjmp	.-72     	; 0x4ef8 <_ZN5Print10printFloatEdh+0x102>
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
    4f40:	84 2d       	mov	r24, r4
    4f42:	95 2d       	mov	r25, r5
    4f44:	39 c0       	rjmp	.+114    	; 0x4fb8 <_ZN5Print10printFloatEdh+0x1c2>
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
  
  number += rounding;
    4f46:	9b 01       	movw	r18, r22
    4f48:	ac 01       	movw	r20, r24
    4f4a:	c5 01       	movw	r24, r10
    4f4c:	b4 01       	movw	r22, r8
    4f4e:	7f d6       	rcall	.+3326   	; 0x5c4e <__addsf3>
    4f50:	4b 01       	movw	r8, r22
    4f52:	5c 01       	movw	r10, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    4f54:	51 d7       	rcall	.+3746   	; 0x5df8 <__fixunssfsi>
    4f56:	69 83       	std	Y+1, r22	; 0x01
    4f58:	7a 83       	std	Y+2, r23	; 0x02
    4f5a:	8b 83       	std	Y+3, r24	; 0x03
    4f5c:	9c 83       	std	Y+4, r25	; 0x04
  double remainder = number - (double)int_part;
    4f5e:	78 d7       	rcall	.+3824   	; 0x5e50 <__floatunsisf>
    4f60:	9b 01       	movw	r18, r22
    4f62:	ac 01       	movw	r20, r24
    4f64:	c5 01       	movw	r24, r10
    4f66:	b4 01       	movw	r22, r8
    4f68:	71 d6       	rcall	.+3298   	; 0x5c4c <__subsf3>
    4f6a:	4b 01       	movw	r8, r22
    4f6c:	5c 01       	movw	r10, r24
  n += print(int_part);
    4f6e:	2a e0       	ldi	r18, 0x0A	; 10
    4f70:	30 e0       	ldi	r19, 0x00	; 0
    4f72:	49 81       	ldd	r20, Y+1	; 0x01
    4f74:	5a 81       	ldd	r21, Y+2	; 0x02
    4f76:	6b 81       	ldd	r22, Y+3	; 0x03
    4f78:	7c 81       	ldd	r23, Y+4	; 0x04
    4f7a:	c8 01       	movw	r24, r16
    4f7c:	27 df       	rcall	.-434    	; 0x4dcc <_ZN5Print5printEmi>
    4f7e:	6c 01       	movw	r12, r24

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    4f80:	6e eb       	ldi	r22, 0xBE	; 190
    4f82:	72 e0       	ldi	r23, 0x02	; 2
    4f84:	c8 01       	movw	r24, r16
    4f86:	28 de       	rcall	.-944    	; 0x4bd8 <_ZN5Print5printEPKc>
    4f88:	8c 0d       	add	r24, r12
    4f8a:	9d 1d       	adc	r25, r13
    4f8c:	2c 01       	movw	r4, r24
    4f8e:	4e 0c       	add	r4, r14
    4f90:	5f 1c       	adc	r5, r15
    4f92:	b2 cf       	rjmp	.-156    	; 0x4ef8 <_ZN5Print10printFloatEdh+0x102>
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
  
  number += rounding;
    4f94:	20 e0       	ldi	r18, 0x00	; 0
    4f96:	30 e0       	ldi	r19, 0x00	; 0
    4f98:	40 e0       	ldi	r20, 0x00	; 0
    4f9a:	5f e3       	ldi	r21, 0x3F	; 63
    4f9c:	c5 01       	movw	r24, r10
    4f9e:	b4 01       	movw	r22, r8
    4fa0:	56 d6       	rcall	.+3244   	; 0x5c4e <__addsf3>

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    4fa2:	2a d7       	rcall	.+3668   	; 0x5df8 <__fixunssfsi>
    4fa4:	ab 01       	movw	r20, r22
    4fa6:	bc 01       	movw	r22, r24
  double remainder = number - (double)int_part;
  n += print(int_part);
    4fa8:	2a e0       	ldi	r18, 0x0A	; 10
    4faa:	30 e0       	ldi	r19, 0x00	; 0
    4fac:	c8 01       	movw	r24, r16
    4fae:	0e df       	rcall	.-484    	; 0x4dcc <_ZN5Print5printEmi>
    4fb0:	2c 01       	movw	r4, r24
    4fb2:	4e 0c       	add	r4, r14
    4fb4:	5f 1c       	adc	r5, r15
    4fb6:	c4 cf       	rjmp	.-120    	; 0x4f40 <_ZN5Print10printFloatEdh+0x14a>
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    4fb8:	0f 90       	pop	r0
    4fba:	0f 90       	pop	r0
    4fbc:	0f 90       	pop	r0
    4fbe:	0f 90       	pop	r0
    4fc0:	df 91       	pop	r29
    4fc2:	cf 91       	pop	r28
    4fc4:	1f 91       	pop	r17
    4fc6:	0f 91       	pop	r16
    4fc8:	ff 90       	pop	r15
    4fca:	ef 90       	pop	r14
    4fcc:	df 90       	pop	r13
    4fce:	cf 90       	pop	r12
    4fd0:	bf 90       	pop	r11
    4fd2:	af 90       	pop	r10
    4fd4:	9f 90       	pop	r9
    4fd6:	8f 90       	pop	r8
    4fd8:	7f 90       	pop	r7
    4fda:	5f 90       	pop	r5
    4fdc:	4f 90       	pop	r4
    4fde:	08 95       	ret

00004fe0 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    4fe0:	0a cf       	rjmp	.-492    	; 0x4df6 <_ZN5Print10printFloatEdh>
}
    4fe2:	08 95       	ret

00004fe4 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    4fe4:	0f 93       	push	r16
    4fe6:	1f 93       	push	r17
    4fe8:	cf 93       	push	r28
    4fea:	df 93       	push	r29
    4fec:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    4fee:	03 df       	rcall	.-506    	; 0x4df6 <_ZN5Print10printFloatEdh>
    4ff0:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    4ff2:	ce 01       	movw	r24, r28
    4ff4:	0f de       	rcall	.-994    	; 0x4c14 <_ZN5Print7printlnEv>
  return n;
}
    4ff6:	80 0f       	add	r24, r16
    4ff8:	91 1f       	adc	r25, r17
    4ffa:	df 91       	pop	r29
    4ffc:	cf 91       	pop	r28
    4ffe:	1f 91       	pop	r17
    5000:	0f 91       	pop	r16
    5002:	08 95       	ret

00005004 <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
    5004:	82 30       	cpi	r24, 0x02	; 2
    5006:	a9 f0       	breq	.+42     	; 0x5032 <_Z12disableTimerh+0x2e>
    5008:	28 f4       	brcc	.+10     	; 0x5014 <_Z12disableTimerh+0x10>
    500a:	88 23       	and	r24, r24
    500c:	49 f0       	breq	.+18     	; 0x5020 <_Z12disableTimerh+0x1c>
    500e:	81 30       	cpi	r24, 0x01	; 1
    5010:	51 f0       	breq	.+20     	; 0x5026 <_Z12disableTimerh+0x22>
    5012:	08 95       	ret
    5014:	84 30       	cpi	r24, 0x04	; 4
    5016:	21 f1       	breq	.+72     	; 0x5060 <_Z12disableTimerh+0x5c>
    5018:	e8 f0       	brcs	.+58     	; 0x5054 <_Z12disableTimerh+0x50>
    501a:	85 30       	cpi	r24, 0x05	; 5
    501c:	39 f1       	breq	.+78     	; 0x506c <_Z12disableTimerh+0x68>
    501e:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
    5020:	10 92 6e 00 	sts	0x006E, r1
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
    5024:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
    5026:	ef e6       	ldi	r30, 0x6F	; 111
    5028:	f0 e0       	ldi	r31, 0x00	; 0
    502a:	80 81       	ld	r24, Z
    502c:	8d 7f       	andi	r24, 0xFD	; 253
    502e:	80 83       	st	Z, r24
      break;
    5030:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
    5032:	e0 e7       	ldi	r30, 0x70	; 112
    5034:	f0 e0       	ldi	r31, 0x00	; 0
    5036:	80 81       	ld	r24, Z
    5038:	8d 7f       	andi	r24, 0xFD	; 253
    503a:	80 83       	st	Z, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
    503c:	81 e0       	ldi	r24, 0x01	; 1
    503e:	80 93 b0 00 	sts	0x00B0, r24
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
    5042:	e1 eb       	ldi	r30, 0xB1	; 177
    5044:	f0 e0       	ldi	r31, 0x00	; 0
    5046:	80 81       	ld	r24, Z
    5048:	88 7f       	andi	r24, 0xF8	; 248
    504a:	84 60       	ori	r24, 0x04	; 4
    504c:	80 83       	st	Z, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
    504e:	10 92 b3 00 	sts	0x00B3, r1
      #endif
      break;
    5052:	08 95       	ret

#if defined(TIMSK3) && defined(OCIE3A)
    case 3:
      bitWrite(TIMSK3, OCIE3A, 0);
    5054:	e1 e7       	ldi	r30, 0x71	; 113
    5056:	f0 e0       	ldi	r31, 0x00	; 0
    5058:	80 81       	ld	r24, Z
    505a:	8d 7f       	andi	r24, 0xFD	; 253
    505c:	80 83       	st	Z, r24
      break;
    505e:	08 95       	ret
#endif

#if defined(TIMSK4) && defined(OCIE4A)
    case 4:
      bitWrite(TIMSK4, OCIE4A, 0);
    5060:	e2 e7       	ldi	r30, 0x72	; 114
    5062:	f0 e0       	ldi	r31, 0x00	; 0
    5064:	80 81       	ld	r24, Z
    5066:	8d 7f       	andi	r24, 0xFD	; 253
    5068:	80 83       	st	Z, r24
      break;
    506a:	08 95       	ret
#endif

#if defined(TIMSK5) && defined(OCIE5A)
    case 5:
      bitWrite(TIMSK5, OCIE5A, 0);
    506c:	e3 e7       	ldi	r30, 0x73	; 115
    506e:	f0 e0       	ldi	r31, 0x00	; 0
    5070:	80 81       	ld	r24, Z
    5072:	8d 7f       	andi	r24, 0xFD	; 253
    5074:	80 83       	st	Z, r24
    5076:	08 95       	ret

00005078 <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
    5078:	cf 93       	push	r28
    507a:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    507c:	80 91 0b 02 	lds	r24, 0x020B
    5080:	8c 13       	cpse	r24, r28
    5082:	08 c0       	rjmp	.+16     	; 0x5094 <_Z6noToneh+0x1c>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    5084:	e0 e7       	ldi	r30, 0x70	; 112
    5086:	f5 e0       	ldi	r31, 0x05	; 5
    5088:	e4 91       	lpm	r30, Z
    508a:	8e 2f       	mov	r24, r30
      tone_pins[i] = 255;
    508c:	9f ef       	ldi	r25, 0xFF	; 255
    508e:	90 93 0b 02 	sts	0x020B, r25
    5092:	01 c0       	rjmp	.+2      	; 0x5096 <_Z6noToneh+0x1e>
    5094:	8f ef       	ldi	r24, 0xFF	; 255
    }
  }
  
  disableTimer(_timer);
    5096:	b6 df       	rcall	.-148    	; 0x5004 <_Z12disableTimerh>

  digitalWrite(_pin, 0);
    5098:	60 e0       	ldi	r22, 0x00	; 0
    509a:	8c 2f       	mov	r24, r28
    509c:	c6 d3       	rcall	.+1932   	; 0x582a <digitalWrite>
}
    509e:	cf 91       	pop	r28
    50a0:	08 95       	ret

000050a2 <__vector_13>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
    50a2:	1f 92       	push	r1
    50a4:	0f 92       	push	r0
    50a6:	0f b6       	in	r0, 0x3f	; 63
    50a8:	0f 92       	push	r0
    50aa:	11 24       	eor	r1, r1
    50ac:	0b b6       	in	r0, 0x3b	; 59
    50ae:	0f 92       	push	r0
    50b0:	2f 93       	push	r18
    50b2:	3f 93       	push	r19
    50b4:	4f 93       	push	r20
    50b6:	5f 93       	push	r21
    50b8:	6f 93       	push	r22
    50ba:	7f 93       	push	r23
    50bc:	8f 93       	push	r24
    50be:	9f 93       	push	r25
    50c0:	af 93       	push	r26
    50c2:	bf 93       	push	r27
    50c4:	ef 93       	push	r30
    50c6:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
    50c8:	80 91 e2 0c 	lds	r24, 0x0CE2
    50cc:	90 91 e3 0c 	lds	r25, 0x0CE3
    50d0:	a0 91 e4 0c 	lds	r26, 0x0CE4
    50d4:	b0 91 e5 0c 	lds	r27, 0x0CE5
    50d8:	89 2b       	or	r24, r25
    50da:	8a 2b       	or	r24, r26
    50dc:	8b 2b       	or	r24, r27
    50de:	51 f1       	breq	.+84     	; 0x5134 <__vector_13+0x92>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
    50e0:	80 91 df 0c 	lds	r24, 0x0CDF
    50e4:	e0 91 e0 0c 	lds	r30, 0x0CE0
    50e8:	f0 91 e1 0c 	lds	r31, 0x0CE1
    50ec:	90 81       	ld	r25, Z
    50ee:	89 27       	eor	r24, r25
    50f0:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
    50f2:	80 91 e2 0c 	lds	r24, 0x0CE2
    50f6:	90 91 e3 0c 	lds	r25, 0x0CE3
    50fa:	a0 91 e4 0c 	lds	r26, 0x0CE4
    50fe:	b0 91 e5 0c 	lds	r27, 0x0CE5
    5102:	18 16       	cp	r1, r24
    5104:	19 06       	cpc	r1, r25
    5106:	1a 06       	cpc	r1, r26
    5108:	1b 06       	cpc	r1, r27
    510a:	bc f4       	brge	.+46     	; 0x513a <__vector_13+0x98>
      timer2_toggle_count--;
    510c:	80 91 e2 0c 	lds	r24, 0x0CE2
    5110:	90 91 e3 0c 	lds	r25, 0x0CE3
    5114:	a0 91 e4 0c 	lds	r26, 0x0CE4
    5118:	b0 91 e5 0c 	lds	r27, 0x0CE5
    511c:	01 97       	sbiw	r24, 0x01	; 1
    511e:	a1 09       	sbc	r26, r1
    5120:	b1 09       	sbc	r27, r1
    5122:	80 93 e2 0c 	sts	0x0CE2, r24
    5126:	90 93 e3 0c 	sts	0x0CE3, r25
    512a:	a0 93 e4 0c 	sts	0x0CE4, r26
    512e:	b0 93 e5 0c 	sts	0x0CE5, r27
    5132:	03 c0       	rjmp	.+6      	; 0x513a <__vector_13+0x98>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
    5134:	80 91 0b 02 	lds	r24, 0x020B
    5138:	9f df       	rcall	.-194    	; 0x5078 <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    513a:	ff 91       	pop	r31
    513c:	ef 91       	pop	r30
    513e:	bf 91       	pop	r27
    5140:	af 91       	pop	r26
    5142:	9f 91       	pop	r25
    5144:	8f 91       	pop	r24
    5146:	7f 91       	pop	r23
    5148:	6f 91       	pop	r22
    514a:	5f 91       	pop	r21
    514c:	4f 91       	pop	r20
    514e:	3f 91       	pop	r19
    5150:	2f 91       	pop	r18
    5152:	0f 90       	pop	r0
    5154:	0b be       	out	0x3b, r0	; 59
    5156:	0f 90       	pop	r0
    5158:	0f be       	out	0x3f, r0	; 63
    515a:	0f 90       	pop	r0
    515c:	1f 90       	pop	r1
    515e:	18 95       	reti

00005160 <__vector_1>:
		intFunc[EXTERNAL_INT_4]();
}

#elif defined(EICRA) && defined(EICRB)

ISR(INT0_vect) {
    5160:	1f 92       	push	r1
    5162:	0f 92       	push	r0
    5164:	0f b6       	in	r0, 0x3f	; 63
    5166:	0f 92       	push	r0
    5168:	11 24       	eor	r1, r1
    516a:	0b b6       	in	r0, 0x3b	; 59
    516c:	0f 92       	push	r0
    516e:	2f 93       	push	r18
    5170:	3f 93       	push	r19
    5172:	4f 93       	push	r20
    5174:	5f 93       	push	r21
    5176:	6f 93       	push	r22
    5178:	7f 93       	push	r23
    517a:	8f 93       	push	r24
    517c:	9f 93       	push	r25
    517e:	af 93       	push	r26
    5180:	bf 93       	push	r27
    5182:	ef 93       	push	r30
    5184:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_2])
    5186:	80 91 ea 0c 	lds	r24, 0x0CEA
    518a:	90 91 eb 0c 	lds	r25, 0x0CEB
    518e:	89 2b       	or	r24, r25
    5190:	29 f0       	breq	.+10     	; 0x519c <__vector_1+0x3c>
    intFunc[EXTERNAL_INT_2]();
    5192:	e0 91 ea 0c 	lds	r30, 0x0CEA
    5196:	f0 91 eb 0c 	lds	r31, 0x0CEB
    519a:	19 95       	eicall
}
    519c:	ff 91       	pop	r31
    519e:	ef 91       	pop	r30
    51a0:	bf 91       	pop	r27
    51a2:	af 91       	pop	r26
    51a4:	9f 91       	pop	r25
    51a6:	8f 91       	pop	r24
    51a8:	7f 91       	pop	r23
    51aa:	6f 91       	pop	r22
    51ac:	5f 91       	pop	r21
    51ae:	4f 91       	pop	r20
    51b0:	3f 91       	pop	r19
    51b2:	2f 91       	pop	r18
    51b4:	0f 90       	pop	r0
    51b6:	0b be       	out	0x3b, r0	; 59
    51b8:	0f 90       	pop	r0
    51ba:	0f be       	out	0x3f, r0	; 63
    51bc:	0f 90       	pop	r0
    51be:	1f 90       	pop	r1
    51c0:	18 95       	reti

000051c2 <__vector_2>:

ISR(INT1_vect) {
    51c2:	1f 92       	push	r1
    51c4:	0f 92       	push	r0
    51c6:	0f b6       	in	r0, 0x3f	; 63
    51c8:	0f 92       	push	r0
    51ca:	11 24       	eor	r1, r1
    51cc:	0b b6       	in	r0, 0x3b	; 59
    51ce:	0f 92       	push	r0
    51d0:	2f 93       	push	r18
    51d2:	3f 93       	push	r19
    51d4:	4f 93       	push	r20
    51d6:	5f 93       	push	r21
    51d8:	6f 93       	push	r22
    51da:	7f 93       	push	r23
    51dc:	8f 93       	push	r24
    51de:	9f 93       	push	r25
    51e0:	af 93       	push	r26
    51e2:	bf 93       	push	r27
    51e4:	ef 93       	push	r30
    51e6:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_3])
    51e8:	80 91 ec 0c 	lds	r24, 0x0CEC
    51ec:	90 91 ed 0c 	lds	r25, 0x0CED
    51f0:	89 2b       	or	r24, r25
    51f2:	29 f0       	breq	.+10     	; 0x51fe <__vector_2+0x3c>
    intFunc[EXTERNAL_INT_3]();
    51f4:	e0 91 ec 0c 	lds	r30, 0x0CEC
    51f8:	f0 91 ed 0c 	lds	r31, 0x0CED
    51fc:	19 95       	eicall
}
    51fe:	ff 91       	pop	r31
    5200:	ef 91       	pop	r30
    5202:	bf 91       	pop	r27
    5204:	af 91       	pop	r26
    5206:	9f 91       	pop	r25
    5208:	8f 91       	pop	r24
    520a:	7f 91       	pop	r23
    520c:	6f 91       	pop	r22
    520e:	5f 91       	pop	r21
    5210:	4f 91       	pop	r20
    5212:	3f 91       	pop	r19
    5214:	2f 91       	pop	r18
    5216:	0f 90       	pop	r0
    5218:	0b be       	out	0x3b, r0	; 59
    521a:	0f 90       	pop	r0
    521c:	0f be       	out	0x3f, r0	; 63
    521e:	0f 90       	pop	r0
    5220:	1f 90       	pop	r1
    5222:	18 95       	reti

00005224 <__vector_3>:

ISR(INT2_vect) {
    5224:	1f 92       	push	r1
    5226:	0f 92       	push	r0
    5228:	0f b6       	in	r0, 0x3f	; 63
    522a:	0f 92       	push	r0
    522c:	11 24       	eor	r1, r1
    522e:	0b b6       	in	r0, 0x3b	; 59
    5230:	0f 92       	push	r0
    5232:	2f 93       	push	r18
    5234:	3f 93       	push	r19
    5236:	4f 93       	push	r20
    5238:	5f 93       	push	r21
    523a:	6f 93       	push	r22
    523c:	7f 93       	push	r23
    523e:	8f 93       	push	r24
    5240:	9f 93       	push	r25
    5242:	af 93       	push	r26
    5244:	bf 93       	push	r27
    5246:	ef 93       	push	r30
    5248:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_4])
    524a:	80 91 ee 0c 	lds	r24, 0x0CEE
    524e:	90 91 ef 0c 	lds	r25, 0x0CEF
    5252:	89 2b       	or	r24, r25
    5254:	29 f0       	breq	.+10     	; 0x5260 <__vector_3+0x3c>
    intFunc[EXTERNAL_INT_4]();
    5256:	e0 91 ee 0c 	lds	r30, 0x0CEE
    525a:	f0 91 ef 0c 	lds	r31, 0x0CEF
    525e:	19 95       	eicall
}
    5260:	ff 91       	pop	r31
    5262:	ef 91       	pop	r30
    5264:	bf 91       	pop	r27
    5266:	af 91       	pop	r26
    5268:	9f 91       	pop	r25
    526a:	8f 91       	pop	r24
    526c:	7f 91       	pop	r23
    526e:	6f 91       	pop	r22
    5270:	5f 91       	pop	r21
    5272:	4f 91       	pop	r20
    5274:	3f 91       	pop	r19
    5276:	2f 91       	pop	r18
    5278:	0f 90       	pop	r0
    527a:	0b be       	out	0x3b, r0	; 59
    527c:	0f 90       	pop	r0
    527e:	0f be       	out	0x3f, r0	; 63
    5280:	0f 90       	pop	r0
    5282:	1f 90       	pop	r1
    5284:	18 95       	reti

00005286 <__vector_4>:

ISR(INT3_vect) {
    5286:	1f 92       	push	r1
    5288:	0f 92       	push	r0
    528a:	0f b6       	in	r0, 0x3f	; 63
    528c:	0f 92       	push	r0
    528e:	11 24       	eor	r1, r1
    5290:	0b b6       	in	r0, 0x3b	; 59
    5292:	0f 92       	push	r0
    5294:	2f 93       	push	r18
    5296:	3f 93       	push	r19
    5298:	4f 93       	push	r20
    529a:	5f 93       	push	r21
    529c:	6f 93       	push	r22
    529e:	7f 93       	push	r23
    52a0:	8f 93       	push	r24
    52a2:	9f 93       	push	r25
    52a4:	af 93       	push	r26
    52a6:	bf 93       	push	r27
    52a8:	ef 93       	push	r30
    52aa:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_5])
    52ac:	80 91 f0 0c 	lds	r24, 0x0CF0
    52b0:	90 91 f1 0c 	lds	r25, 0x0CF1
    52b4:	89 2b       	or	r24, r25
    52b6:	29 f0       	breq	.+10     	; 0x52c2 <__vector_4+0x3c>
    intFunc[EXTERNAL_INT_5]();
    52b8:	e0 91 f0 0c 	lds	r30, 0x0CF0
    52bc:	f0 91 f1 0c 	lds	r31, 0x0CF1
    52c0:	19 95       	eicall
}
    52c2:	ff 91       	pop	r31
    52c4:	ef 91       	pop	r30
    52c6:	bf 91       	pop	r27
    52c8:	af 91       	pop	r26
    52ca:	9f 91       	pop	r25
    52cc:	8f 91       	pop	r24
    52ce:	7f 91       	pop	r23
    52d0:	6f 91       	pop	r22
    52d2:	5f 91       	pop	r21
    52d4:	4f 91       	pop	r20
    52d6:	3f 91       	pop	r19
    52d8:	2f 91       	pop	r18
    52da:	0f 90       	pop	r0
    52dc:	0b be       	out	0x3b, r0	; 59
    52de:	0f 90       	pop	r0
    52e0:	0f be       	out	0x3f, r0	; 63
    52e2:	0f 90       	pop	r0
    52e4:	1f 90       	pop	r1
    52e6:	18 95       	reti

000052e8 <__vector_5>:

ISR(INT4_vect) {
    52e8:	1f 92       	push	r1
    52ea:	0f 92       	push	r0
    52ec:	0f b6       	in	r0, 0x3f	; 63
    52ee:	0f 92       	push	r0
    52f0:	11 24       	eor	r1, r1
    52f2:	0b b6       	in	r0, 0x3b	; 59
    52f4:	0f 92       	push	r0
    52f6:	2f 93       	push	r18
    52f8:	3f 93       	push	r19
    52fa:	4f 93       	push	r20
    52fc:	5f 93       	push	r21
    52fe:	6f 93       	push	r22
    5300:	7f 93       	push	r23
    5302:	8f 93       	push	r24
    5304:	9f 93       	push	r25
    5306:	af 93       	push	r26
    5308:	bf 93       	push	r27
    530a:	ef 93       	push	r30
    530c:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
    530e:	80 91 e6 0c 	lds	r24, 0x0CE6
    5312:	90 91 e7 0c 	lds	r25, 0x0CE7
    5316:	89 2b       	or	r24, r25
    5318:	29 f0       	breq	.+10     	; 0x5324 <__vector_5+0x3c>
    intFunc[EXTERNAL_INT_0]();
    531a:	e0 91 e6 0c 	lds	r30, 0x0CE6
    531e:	f0 91 e7 0c 	lds	r31, 0x0CE7
    5322:	19 95       	eicall
}
    5324:	ff 91       	pop	r31
    5326:	ef 91       	pop	r30
    5328:	bf 91       	pop	r27
    532a:	af 91       	pop	r26
    532c:	9f 91       	pop	r25
    532e:	8f 91       	pop	r24
    5330:	7f 91       	pop	r23
    5332:	6f 91       	pop	r22
    5334:	5f 91       	pop	r21
    5336:	4f 91       	pop	r20
    5338:	3f 91       	pop	r19
    533a:	2f 91       	pop	r18
    533c:	0f 90       	pop	r0
    533e:	0b be       	out	0x3b, r0	; 59
    5340:	0f 90       	pop	r0
    5342:	0f be       	out	0x3f, r0	; 63
    5344:	0f 90       	pop	r0
    5346:	1f 90       	pop	r1
    5348:	18 95       	reti

0000534a <__vector_6>:

ISR(INT5_vect) {
    534a:	1f 92       	push	r1
    534c:	0f 92       	push	r0
    534e:	0f b6       	in	r0, 0x3f	; 63
    5350:	0f 92       	push	r0
    5352:	11 24       	eor	r1, r1
    5354:	0b b6       	in	r0, 0x3b	; 59
    5356:	0f 92       	push	r0
    5358:	2f 93       	push	r18
    535a:	3f 93       	push	r19
    535c:	4f 93       	push	r20
    535e:	5f 93       	push	r21
    5360:	6f 93       	push	r22
    5362:	7f 93       	push	r23
    5364:	8f 93       	push	r24
    5366:	9f 93       	push	r25
    5368:	af 93       	push	r26
    536a:	bf 93       	push	r27
    536c:	ef 93       	push	r30
    536e:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
    5370:	80 91 e8 0c 	lds	r24, 0x0CE8
    5374:	90 91 e9 0c 	lds	r25, 0x0CE9
    5378:	89 2b       	or	r24, r25
    537a:	29 f0       	breq	.+10     	; 0x5386 <__vector_6+0x3c>
    intFunc[EXTERNAL_INT_1]();
    537c:	e0 91 e8 0c 	lds	r30, 0x0CE8
    5380:	f0 91 e9 0c 	lds	r31, 0x0CE9
    5384:	19 95       	eicall
}
    5386:	ff 91       	pop	r31
    5388:	ef 91       	pop	r30
    538a:	bf 91       	pop	r27
    538c:	af 91       	pop	r26
    538e:	9f 91       	pop	r25
    5390:	8f 91       	pop	r24
    5392:	7f 91       	pop	r23
    5394:	6f 91       	pop	r22
    5396:	5f 91       	pop	r21
    5398:	4f 91       	pop	r20
    539a:	3f 91       	pop	r19
    539c:	2f 91       	pop	r18
    539e:	0f 90       	pop	r0
    53a0:	0b be       	out	0x3b, r0	; 59
    53a2:	0f 90       	pop	r0
    53a4:	0f be       	out	0x3f, r0	; 63
    53a6:	0f 90       	pop	r0
    53a8:	1f 90       	pop	r1
    53aa:	18 95       	reti

000053ac <__vector_7>:

ISR(INT6_vect) {
    53ac:	1f 92       	push	r1
    53ae:	0f 92       	push	r0
    53b0:	0f b6       	in	r0, 0x3f	; 63
    53b2:	0f 92       	push	r0
    53b4:	11 24       	eor	r1, r1
    53b6:	0b b6       	in	r0, 0x3b	; 59
    53b8:	0f 92       	push	r0
    53ba:	2f 93       	push	r18
    53bc:	3f 93       	push	r19
    53be:	4f 93       	push	r20
    53c0:	5f 93       	push	r21
    53c2:	6f 93       	push	r22
    53c4:	7f 93       	push	r23
    53c6:	8f 93       	push	r24
    53c8:	9f 93       	push	r25
    53ca:	af 93       	push	r26
    53cc:	bf 93       	push	r27
    53ce:	ef 93       	push	r30
    53d0:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_6])
    53d2:	80 91 f2 0c 	lds	r24, 0x0CF2
    53d6:	90 91 f3 0c 	lds	r25, 0x0CF3
    53da:	89 2b       	or	r24, r25
    53dc:	29 f0       	breq	.+10     	; 0x53e8 <__vector_7+0x3c>
    intFunc[EXTERNAL_INT_6]();
    53de:	e0 91 f2 0c 	lds	r30, 0x0CF2
    53e2:	f0 91 f3 0c 	lds	r31, 0x0CF3
    53e6:	19 95       	eicall
}
    53e8:	ff 91       	pop	r31
    53ea:	ef 91       	pop	r30
    53ec:	bf 91       	pop	r27
    53ee:	af 91       	pop	r26
    53f0:	9f 91       	pop	r25
    53f2:	8f 91       	pop	r24
    53f4:	7f 91       	pop	r23
    53f6:	6f 91       	pop	r22
    53f8:	5f 91       	pop	r21
    53fa:	4f 91       	pop	r20
    53fc:	3f 91       	pop	r19
    53fe:	2f 91       	pop	r18
    5400:	0f 90       	pop	r0
    5402:	0b be       	out	0x3b, r0	; 59
    5404:	0f 90       	pop	r0
    5406:	0f be       	out	0x3f, r0	; 63
    5408:	0f 90       	pop	r0
    540a:	1f 90       	pop	r1
    540c:	18 95       	reti

0000540e <__vector_8>:

ISR(INT7_vect) {
    540e:	1f 92       	push	r1
    5410:	0f 92       	push	r0
    5412:	0f b6       	in	r0, 0x3f	; 63
    5414:	0f 92       	push	r0
    5416:	11 24       	eor	r1, r1
    5418:	0b b6       	in	r0, 0x3b	; 59
    541a:	0f 92       	push	r0
    541c:	2f 93       	push	r18
    541e:	3f 93       	push	r19
    5420:	4f 93       	push	r20
    5422:	5f 93       	push	r21
    5424:	6f 93       	push	r22
    5426:	7f 93       	push	r23
    5428:	8f 93       	push	r24
    542a:	9f 93       	push	r25
    542c:	af 93       	push	r26
    542e:	bf 93       	push	r27
    5430:	ef 93       	push	r30
    5432:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_7])
    5434:	80 91 f4 0c 	lds	r24, 0x0CF4
    5438:	90 91 f5 0c 	lds	r25, 0x0CF5
    543c:	89 2b       	or	r24, r25
    543e:	29 f0       	breq	.+10     	; 0x544a <__vector_8+0x3c>
    intFunc[EXTERNAL_INT_7]();
    5440:	e0 91 f4 0c 	lds	r30, 0x0CF4
    5444:	f0 91 f5 0c 	lds	r31, 0x0CF5
    5448:	19 95       	eicall
}
    544a:	ff 91       	pop	r31
    544c:	ef 91       	pop	r30
    544e:	bf 91       	pop	r27
    5450:	af 91       	pop	r26
    5452:	9f 91       	pop	r25
    5454:	8f 91       	pop	r24
    5456:	7f 91       	pop	r23
    5458:	6f 91       	pop	r22
    545a:	5f 91       	pop	r21
    545c:	4f 91       	pop	r20
    545e:	3f 91       	pop	r19
    5460:	2f 91       	pop	r18
    5462:	0f 90       	pop	r0
    5464:	0b be       	out	0x3b, r0	; 59
    5466:	0f 90       	pop	r0
    5468:	0f be       	out	0x3f, r0	; 63
    546a:	0f 90       	pop	r0
    546c:	1f 90       	pop	r1
    546e:	18 95       	reti

00005470 <__vector_23>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    5470:	1f 92       	push	r1
    5472:	0f 92       	push	r0
    5474:	0f b6       	in	r0, 0x3f	; 63
    5476:	0f 92       	push	r0
    5478:	11 24       	eor	r1, r1
    547a:	2f 93       	push	r18
    547c:	3f 93       	push	r19
    547e:	8f 93       	push	r24
    5480:	9f 93       	push	r25
    5482:	af 93       	push	r26
    5484:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    5486:	80 91 f7 0c 	lds	r24, 0x0CF7
    548a:	90 91 f8 0c 	lds	r25, 0x0CF8
    548e:	a0 91 f9 0c 	lds	r26, 0x0CF9
    5492:	b0 91 fa 0c 	lds	r27, 0x0CFA
	unsigned char f = timer0_fract;
    5496:	30 91 f6 0c 	lds	r19, 0x0CF6

	m += MILLIS_INC;
	f += FRACT_INC;
    549a:	23 e0       	ldi	r18, 0x03	; 3
    549c:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    549e:	2d 37       	cpi	r18, 0x7D	; 125
    54a0:	20 f4       	brcc	.+8      	; 0x54aa <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    54a2:	01 96       	adiw	r24, 0x01	; 1
    54a4:	a1 1d       	adc	r26, r1
    54a6:	b1 1d       	adc	r27, r1
    54a8:	05 c0       	rjmp	.+10     	; 0x54b4 <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    54aa:	26 e8       	ldi	r18, 0x86	; 134
    54ac:	23 0f       	add	r18, r19
		m += 1;
    54ae:	02 96       	adiw	r24, 0x02	; 2
    54b0:	a1 1d       	adc	r26, r1
    54b2:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    54b4:	20 93 f6 0c 	sts	0x0CF6, r18
	timer0_millis = m;
    54b8:	80 93 f7 0c 	sts	0x0CF7, r24
    54bc:	90 93 f8 0c 	sts	0x0CF8, r25
    54c0:	a0 93 f9 0c 	sts	0x0CF9, r26
    54c4:	b0 93 fa 0c 	sts	0x0CFA, r27
	timer0_overflow_count++;
    54c8:	80 91 fb 0c 	lds	r24, 0x0CFB
    54cc:	90 91 fc 0c 	lds	r25, 0x0CFC
    54d0:	a0 91 fd 0c 	lds	r26, 0x0CFD
    54d4:	b0 91 fe 0c 	lds	r27, 0x0CFE
    54d8:	01 96       	adiw	r24, 0x01	; 1
    54da:	a1 1d       	adc	r26, r1
    54dc:	b1 1d       	adc	r27, r1
    54de:	80 93 fb 0c 	sts	0x0CFB, r24
    54e2:	90 93 fc 0c 	sts	0x0CFC, r25
    54e6:	a0 93 fd 0c 	sts	0x0CFD, r26
    54ea:	b0 93 fe 0c 	sts	0x0CFE, r27
}
    54ee:	bf 91       	pop	r27
    54f0:	af 91       	pop	r26
    54f2:	9f 91       	pop	r25
    54f4:	8f 91       	pop	r24
    54f6:	3f 91       	pop	r19
    54f8:	2f 91       	pop	r18
    54fa:	0f 90       	pop	r0
    54fc:	0f be       	out	0x3f, r0	; 63
    54fe:	0f 90       	pop	r0
    5500:	1f 90       	pop	r1
    5502:	18 95       	reti

00005504 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    5504:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    5506:	f8 94       	cli
	m = timer0_millis;
    5508:	60 91 f7 0c 	lds	r22, 0x0CF7
    550c:	70 91 f8 0c 	lds	r23, 0x0CF8
    5510:	80 91 f9 0c 	lds	r24, 0x0CF9
    5514:	90 91 fa 0c 	lds	r25, 0x0CFA
	SREG = oldSREG;
    5518:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    551a:	08 95       	ret

0000551c <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    551c:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    551e:	f8 94       	cli
	m = timer0_overflow_count;
    5520:	80 91 fb 0c 	lds	r24, 0x0CFB
    5524:	90 91 fc 0c 	lds	r25, 0x0CFC
    5528:	a0 91 fd 0c 	lds	r26, 0x0CFD
    552c:	b0 91 fe 0c 	lds	r27, 0x0CFE
#if defined(TCNT0)
	t = TCNT0;
    5530:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    5532:	a8 9b       	sbis	0x15, 0	; 21
    5534:	05 c0       	rjmp	.+10     	; 0x5540 <micros+0x24>
    5536:	2f 3f       	cpi	r18, 0xFF	; 255
    5538:	19 f0       	breq	.+6      	; 0x5540 <micros+0x24>
		m++;
    553a:	01 96       	adiw	r24, 0x01	; 1
    553c:	a1 1d       	adc	r26, r1
    553e:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    5540:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    5542:	ba 2f       	mov	r27, r26
    5544:	a9 2f       	mov	r26, r25
    5546:	98 2f       	mov	r25, r24
    5548:	88 27       	eor	r24, r24
    554a:	82 0f       	add	r24, r18
    554c:	91 1d       	adc	r25, r1
    554e:	a1 1d       	adc	r26, r1
    5550:	b1 1d       	adc	r27, r1
    5552:	bc 01       	movw	r22, r24
    5554:	cd 01       	movw	r24, r26
    5556:	66 0f       	add	r22, r22
    5558:	77 1f       	adc	r23, r23
    555a:	88 1f       	adc	r24, r24
    555c:	99 1f       	adc	r25, r25
    555e:	66 0f       	add	r22, r22
    5560:	77 1f       	adc	r23, r23
    5562:	88 1f       	adc	r24, r24
    5564:	99 1f       	adc	r25, r25
}
    5566:	08 95       	ret

00005568 <delay>:

void delay(unsigned long ms)
{
    5568:	cf 92       	push	r12
    556a:	df 92       	push	r13
    556c:	ef 92       	push	r14
    556e:	ff 92       	push	r15
    5570:	cf 93       	push	r28
    5572:	df 93       	push	r29
    5574:	6b 01       	movw	r12, r22
    5576:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
    5578:	d1 df       	rcall	.-94     	; 0x551c <micros>
    557a:	eb 01       	movw	r28, r22

	while (ms > 0) {
    557c:	c1 14       	cp	r12, r1
    557e:	d1 04       	cpc	r13, r1
    5580:	e1 04       	cpc	r14, r1
    5582:	f1 04       	cpc	r15, r1
    5584:	99 f0       	breq	.+38     	; 0x55ac <delay+0x44>
		yield();
    5586:	90 da       	rcall	.-2784   	; 0x4aa8 <yield>
		if (((uint16_t)micros() - start) >= 1000) {
    5588:	c9 df       	rcall	.-110    	; 0x551c <micros>
    558a:	6c 1b       	sub	r22, r28
    558c:	7d 0b       	sbc	r23, r29
    558e:	68 3e       	cpi	r22, 0xE8	; 232
    5590:	73 40       	sbci	r23, 0x03	; 3
    5592:	38 f0       	brcs	.+14     	; 0x55a2 <delay+0x3a>
			ms--;
    5594:	81 e0       	ldi	r24, 0x01	; 1
    5596:	c8 1a       	sub	r12, r24
    5598:	d1 08       	sbc	r13, r1
    559a:	e1 08       	sbc	r14, r1
    559c:	f1 08       	sbc	r15, r1
			start += 1000;
    559e:	c8 51       	subi	r28, 0x18	; 24
    55a0:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    55a2:	c1 14       	cp	r12, r1
    55a4:	d1 04       	cpc	r13, r1
    55a6:	e1 04       	cpc	r14, r1
    55a8:	f1 04       	cpc	r15, r1
    55aa:	69 f7       	brne	.-38     	; 0x5586 <delay+0x1e>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    55ac:	df 91       	pop	r29
    55ae:	cf 91       	pop	r28
    55b0:	ff 90       	pop	r15
    55b2:	ef 90       	pop	r14
    55b4:	df 90       	pop	r13
    55b6:	cf 90       	pop	r12
    55b8:	08 95       	ret

000055ba <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    55ba:	82 30       	cpi	r24, 0x02	; 2
    55bc:	91 05       	cpc	r25, r1
    55be:	38 f0       	brcs	.+14     	; 0x55ce <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    55c0:	88 0f       	add	r24, r24
    55c2:	99 1f       	adc	r25, r25
    55c4:	88 0f       	add	r24, r24
    55c6:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    55c8:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    55ca:	01 97       	sbiw	r24, 0x01	; 1
    55cc:	f1 f7       	brne	.-4      	; 0x55ca <delayMicroseconds+0x10>
    55ce:	08 95       	ret

000055d0 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    55d0:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    55d2:	84 b5       	in	r24, 0x24	; 36
    55d4:	82 60       	ori	r24, 0x02	; 2
    55d6:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    55d8:	84 b5       	in	r24, 0x24	; 36
    55da:	81 60       	ori	r24, 0x01	; 1
    55dc:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    55de:	85 b5       	in	r24, 0x25	; 37
    55e0:	82 60       	ori	r24, 0x02	; 2
    55e2:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    55e4:	85 b5       	in	r24, 0x25	; 37
    55e6:	81 60       	ori	r24, 0x01	; 1
    55e8:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    55ea:	ee e6       	ldi	r30, 0x6E	; 110
    55ec:	f0 e0       	ldi	r31, 0x00	; 0
    55ee:	80 81       	ld	r24, Z
    55f0:	81 60       	ori	r24, 0x01	; 1
    55f2:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    55f4:	e1 e8       	ldi	r30, 0x81	; 129
    55f6:	f0 e0       	ldi	r31, 0x00	; 0
    55f8:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    55fa:	80 81       	ld	r24, Z
    55fc:	82 60       	ori	r24, 0x02	; 2
    55fe:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    5600:	80 81       	ld	r24, Z
    5602:	81 60       	ori	r24, 0x01	; 1
    5604:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    5606:	e0 e8       	ldi	r30, 0x80	; 128
    5608:	f0 e0       	ldi	r31, 0x00	; 0
    560a:	80 81       	ld	r24, Z
    560c:	81 60       	ori	r24, 0x01	; 1
    560e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    5610:	e1 eb       	ldi	r30, 0xB1	; 177
    5612:	f0 e0       	ldi	r31, 0x00	; 0
    5614:	80 81       	ld	r24, Z
    5616:	84 60       	ori	r24, 0x04	; 4
    5618:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    561a:	e0 eb       	ldi	r30, 0xB0	; 176
    561c:	f0 e0       	ldi	r31, 0x00	; 0
    561e:	80 81       	ld	r24, Z
    5620:	81 60       	ori	r24, 0x01	; 1
    5622:	80 83       	st	Z, r24
#else
	#warning Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    5624:	e1 e9       	ldi	r30, 0x91	; 145
    5626:	f0 e0       	ldi	r31, 0x00	; 0
    5628:	80 81       	ld	r24, Z
    562a:	82 60       	ori	r24, 0x02	; 2
    562c:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    562e:	80 81       	ld	r24, Z
    5630:	81 60       	ori	r24, 0x01	; 1
    5632:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    5634:	e0 e9       	ldi	r30, 0x90	; 144
    5636:	f0 e0       	ldi	r31, 0x00	; 0
    5638:	80 81       	ld	r24, Z
    563a:	81 60       	ori	r24, 0x01	; 1
    563c:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    563e:	e1 ea       	ldi	r30, 0xA1	; 161
    5640:	f0 e0       	ldi	r31, 0x00	; 0
    5642:	80 81       	ld	r24, Z
    5644:	82 60       	ori	r24, 0x02	; 2
    5646:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    5648:	80 81       	ld	r24, Z
    564a:	81 60       	ori	r24, 0x01	; 1
    564c:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    564e:	e0 ea       	ldi	r30, 0xA0	; 160
    5650:	f0 e0       	ldi	r31, 0x00	; 0
    5652:	80 81       	ld	r24, Z
    5654:	81 60       	ori	r24, 0x01	; 1
    5656:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    5658:	e1 e2       	ldi	r30, 0x21	; 33
    565a:	f1 e0       	ldi	r31, 0x01	; 1
    565c:	80 81       	ld	r24, Z
    565e:	82 60       	ori	r24, 0x02	; 2
    5660:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    5662:	80 81       	ld	r24, Z
    5664:	81 60       	ori	r24, 0x01	; 1
    5666:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    5668:	e0 e2       	ldi	r30, 0x20	; 32
    566a:	f1 e0       	ldi	r31, 0x01	; 1
    566c:	80 81       	ld	r24, Z
    566e:	81 60       	ori	r24, 0x01	; 1
    5670:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    5672:	ea e7       	ldi	r30, 0x7A	; 122
    5674:	f0 e0       	ldi	r31, 0x00	; 0
    5676:	80 81       	ld	r24, Z
    5678:	84 60       	ori	r24, 0x04	; 4
    567a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    567c:	80 81       	ld	r24, Z
    567e:	82 60       	ori	r24, 0x02	; 2
    5680:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    5682:	80 81       	ld	r24, Z
    5684:	81 60       	ori	r24, 0x01	; 1
    5686:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    5688:	80 81       	ld	r24, Z
    568a:	80 68       	ori	r24, 0x80	; 128
    568c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    568e:	10 92 c1 00 	sts	0x00C1, r1
    5692:	08 95       	ret

00005694 <analogRead>:
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#endif
	pin = analogPinToChannel(pin);
#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
    5694:	86 33       	cpi	r24, 0x36	; 54
    5696:	08 f0       	brcs	.+2      	; 0x569a <analogRead+0x6>
    5698:	86 53       	subi	r24, 0x36	; 54
#endif

#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    569a:	eb e7       	ldi	r30, 0x7B	; 123
    569c:	f0 e0       	ldi	r31, 0x00	; 0
    569e:	90 81       	ld	r25, Z
    56a0:	28 2f       	mov	r18, r24
    56a2:	28 70       	andi	r18, 0x08	; 8
    56a4:	97 7f       	andi	r25, 0xF7	; 247
    56a6:	92 2b       	or	r25, r18
    56a8:	90 83       	st	Z, r25
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    56aa:	87 70       	andi	r24, 0x07	; 7
    56ac:	20 91 0c 02 	lds	r18, 0x020C
    56b0:	90 e4       	ldi	r25, 0x40	; 64
    56b2:	29 9f       	mul	r18, r25
    56b4:	90 01       	movw	r18, r0
    56b6:	11 24       	eor	r1, r1
    56b8:	82 2b       	or	r24, r18
    56ba:	80 93 7c 00 	sts	0x007C, r24
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    56be:	ea e7       	ldi	r30, 0x7A	; 122
    56c0:	f0 e0       	ldi	r31, 0x00	; 0
    56c2:	80 81       	ld	r24, Z
    56c4:	80 64       	ori	r24, 0x40	; 64
    56c6:	80 83       	st	Z, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    56c8:	80 81       	ld	r24, Z
    56ca:	86 fd       	sbrc	r24, 6
    56cc:	fd cf       	rjmp	.-6      	; 0x56c8 <analogRead+0x34>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    56ce:	80 91 78 00 	lds	r24, 0x0078
	high = ADCH;
    56d2:	20 91 79 00 	lds	r18, 0x0079
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    56d6:	90 e0       	ldi	r25, 0x00	; 0
}
    56d8:	92 2b       	or	r25, r18
    56da:	08 95       	ret

000056dc <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    56dc:	90 e0       	ldi	r25, 0x00	; 0
    56de:	fc 01       	movw	r30, r24
    56e0:	31 97       	sbiw	r30, 0x01	; 1
    56e2:	e2 31       	cpi	r30, 0x12	; 18
    56e4:	f1 05       	cpc	r31, r1
    56e6:	08 f0       	brcs	.+2      	; 0x56ea <turnOffPWM+0xe>
    56e8:	60 c0       	rjmp	.+192    	; 0x57aa <turnOffPWM+0xce>
    56ea:	88 27       	eor	r24, r24
    56ec:	e5 5b       	subi	r30, 0xB5	; 181
    56ee:	fe 4f       	sbci	r31, 0xFE	; 254
    56f0:	8f 4f       	sbci	r24, 0xFF	; 255
    56f2:	00 c5       	rjmp	.+2560   	; 0x60f4 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    56f4:	e0 e8       	ldi	r30, 0x80	; 128
    56f6:	f0 e0       	ldi	r31, 0x00	; 0
    56f8:	80 81       	ld	r24, Z
    56fa:	8f 77       	andi	r24, 0x7F	; 127
    56fc:	80 83       	st	Z, r24
    56fe:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    5700:	e0 e8       	ldi	r30, 0x80	; 128
    5702:	f0 e0       	ldi	r31, 0x00	; 0
    5704:	80 81       	ld	r24, Z
    5706:	8f 7d       	andi	r24, 0xDF	; 223
    5708:	80 83       	st	Z, r24
    570a:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    570c:	e0 e8       	ldi	r30, 0x80	; 128
    570e:	f0 e0       	ldi	r31, 0x00	; 0
    5710:	80 81       	ld	r24, Z
    5712:	87 7f       	andi	r24, 0xF7	; 247
    5714:	80 83       	st	Z, r24
    5716:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    5718:	84 b5       	in	r24, 0x24	; 36
    571a:	8f 77       	andi	r24, 0x7F	; 127
    571c:	84 bd       	out	0x24, r24	; 36
    571e:	08 95       	ret
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    5720:	84 b5       	in	r24, 0x24	; 36
    5722:	8f 7d       	andi	r24, 0xDF	; 223
    5724:	84 bd       	out	0x24, r24	; 36
    5726:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    5728:	e0 eb       	ldi	r30, 0xB0	; 176
    572a:	f0 e0       	ldi	r31, 0x00	; 0
    572c:	80 81       	ld	r24, Z
    572e:	8f 77       	andi	r24, 0x7F	; 127
    5730:	80 83       	st	Z, r24
    5732:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    5734:	e0 eb       	ldi	r30, 0xB0	; 176
    5736:	f0 e0       	ldi	r31, 0x00	; 0
    5738:	80 81       	ld	r24, Z
    573a:	8f 7d       	andi	r24, 0xDF	; 223
    573c:	80 83       	st	Z, r24
    573e:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    5740:	e0 e9       	ldi	r30, 0x90	; 144
    5742:	f0 e0       	ldi	r31, 0x00	; 0
    5744:	80 81       	ld	r24, Z
    5746:	8f 77       	andi	r24, 0x7F	; 127
    5748:	80 83       	st	Z, r24
    574a:	08 95       	ret
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    574c:	e0 e9       	ldi	r30, 0x90	; 144
    574e:	f0 e0       	ldi	r31, 0x00	; 0
    5750:	80 81       	ld	r24, Z
    5752:	8f 7d       	andi	r24, 0xDF	; 223
    5754:	80 83       	st	Z, r24
    5756:	08 95       	ret
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    5758:	e0 e9       	ldi	r30, 0x90	; 144
    575a:	f0 e0       	ldi	r31, 0x00	; 0
    575c:	80 81       	ld	r24, Z
    575e:	87 7f       	andi	r24, 0xF7	; 247
    5760:	80 83       	st	Z, r24
    5762:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    5764:	e0 ea       	ldi	r30, 0xA0	; 160
    5766:	f0 e0       	ldi	r31, 0x00	; 0
    5768:	80 81       	ld	r24, Z
    576a:	8f 77       	andi	r24, 0x7F	; 127
    576c:	80 83       	st	Z, r24
    576e:	08 95       	ret
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    5770:	e0 ea       	ldi	r30, 0xA0	; 160
    5772:	f0 e0       	ldi	r31, 0x00	; 0
    5774:	80 81       	ld	r24, Z
    5776:	8f 7d       	andi	r24, 0xDF	; 223
    5778:	80 83       	st	Z, r24
    577a:	08 95       	ret
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    577c:	e0 ea       	ldi	r30, 0xA0	; 160
    577e:	f0 e0       	ldi	r31, 0x00	; 0
    5780:	80 81       	ld	r24, Z
    5782:	87 7f       	andi	r24, 0xF7	; 247
    5784:	80 83       	st	Z, r24
    5786:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    5788:	e0 e2       	ldi	r30, 0x20	; 32
    578a:	f1 e0       	ldi	r31, 0x01	; 1
    578c:	80 81       	ld	r24, Z
    578e:	8f 77       	andi	r24, 0x7F	; 127
    5790:	80 83       	st	Z, r24
    5792:	08 95       	ret
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    5794:	e0 e2       	ldi	r30, 0x20	; 32
    5796:	f1 e0       	ldi	r31, 0x01	; 1
    5798:	80 81       	ld	r24, Z
    579a:	8f 7d       	andi	r24, 0xDF	; 223
    579c:	80 83       	st	Z, r24
    579e:	08 95       	ret
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    57a0:	e0 e2       	ldi	r30, 0x20	; 32
    57a2:	f1 e0       	ldi	r31, 0x01	; 1
    57a4:	80 81       	ld	r24, Z
    57a6:	87 7f       	andi	r24, 0xF7	; 247
    57a8:	80 83       	st	Z, r24
    57aa:	08 95       	ret

000057ac <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    57ac:	cf 93       	push	r28
    57ae:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    57b0:	90 e0       	ldi	r25, 0x00	; 0
    57b2:	fc 01       	movw	r30, r24
    57b4:	e9 54       	subi	r30, 0x49	; 73
    57b6:	fa 4f       	sbci	r31, 0xFA	; 250
    57b8:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    57ba:	fc 01       	movw	r30, r24
    57bc:	e3 50       	subi	r30, 0x03	; 3
    57be:	fa 4f       	sbci	r31, 0xFA	; 250
    57c0:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    57c2:	88 23       	and	r24, r24
    57c4:	79 f1       	breq	.+94     	; 0x5824 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    57c6:	90 e0       	ldi	r25, 0x00	; 0
    57c8:	88 0f       	add	r24, r24
    57ca:	99 1f       	adc	r25, r25
    57cc:	fc 01       	movw	r30, r24
    57ce:	e9 58       	subi	r30, 0x89	; 137
    57d0:	f9 4f       	sbci	r31, 0xF9	; 249
    57d2:	a5 91       	lpm	r26, Z+
    57d4:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    57d6:	fc 01       	movw	r30, r24
    57d8:	e3 5a       	subi	r30, 0xA3	; 163
    57da:	f9 4f       	sbci	r31, 0xF9	; 249
    57dc:	c5 91       	lpm	r28, Z+
    57de:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
    57e0:	61 11       	cpse	r22, r1
    57e2:	0c c0       	rjmp	.+24     	; 0x57fc <pinMode+0x50>
		uint8_t oldSREG = SREG;
    57e4:	9f b7       	in	r25, 0x3f	; 63
                cli();
    57e6:	f8 94       	cli
		*reg &= ~bit;
    57e8:	8c 91       	ld	r24, X
    57ea:	e2 2f       	mov	r30, r18
    57ec:	e0 95       	com	r30
    57ee:	8e 23       	and	r24, r30
    57f0:	8c 93       	st	X, r24
		*out &= ~bit;
    57f2:	28 81       	ld	r18, Y
    57f4:	e2 23       	and	r30, r18
    57f6:	e8 83       	st	Y, r30
		SREG = oldSREG;
    57f8:	9f bf       	out	0x3f, r25	; 63
    57fa:	14 c0       	rjmp	.+40     	; 0x5824 <pinMode+0x78>
	} else if (mode == INPUT_PULLUP) {
    57fc:	62 30       	cpi	r22, 0x02	; 2
    57fe:	61 f4       	brne	.+24     	; 0x5818 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    5800:	9f b7       	in	r25, 0x3f	; 63
                cli();
    5802:	f8 94       	cli
		*reg &= ~bit;
    5804:	3c 91       	ld	r19, X
    5806:	82 2f       	mov	r24, r18
    5808:	80 95       	com	r24
    580a:	83 23       	and	r24, r19
    580c:	8c 93       	st	X, r24
		*out |= bit;
    580e:	e8 81       	ld	r30, Y
    5810:	e2 2b       	or	r30, r18
    5812:	e8 83       	st	Y, r30
		SREG = oldSREG;
    5814:	9f bf       	out	0x3f, r25	; 63
    5816:	06 c0       	rjmp	.+12     	; 0x5824 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    5818:	8f b7       	in	r24, 0x3f	; 63
                cli();
    581a:	f8 94       	cli
		*reg |= bit;
    581c:	ec 91       	ld	r30, X
    581e:	e2 2b       	or	r30, r18
    5820:	ec 93       	st	X, r30
		SREG = oldSREG;
    5822:	8f bf       	out	0x3f, r24	; 63
	}
}
    5824:	df 91       	pop	r29
    5826:	cf 91       	pop	r28
    5828:	08 95       	ret

0000582a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    582a:	1f 93       	push	r17
    582c:	cf 93       	push	r28
    582e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    5830:	28 2f       	mov	r18, r24
    5832:	30 e0       	ldi	r19, 0x00	; 0
    5834:	f9 01       	movw	r30, r18
    5836:	ef 58       	subi	r30, 0x8F	; 143
    5838:	fa 4f       	sbci	r31, 0xFA	; 250
    583a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    583c:	f9 01       	movw	r30, r18
    583e:	e9 54       	subi	r30, 0x49	; 73
    5840:	fa 4f       	sbci	r31, 0xFA	; 250
    5842:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
    5844:	f9 01       	movw	r30, r18
    5846:	e3 50       	subi	r30, 0x03	; 3
    5848:	fa 4f       	sbci	r31, 0xFA	; 250
    584a:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    584c:	cc 23       	and	r28, r28
    584e:	c9 f0       	breq	.+50     	; 0x5882 <digitalWrite+0x58>
    5850:	d6 2f       	mov	r29, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    5852:	81 11       	cpse	r24, r1
    5854:	43 df       	rcall	.-378    	; 0x56dc <turnOffPWM>

	out = portOutputRegister(port);
    5856:	ec 2f       	mov	r30, r28
    5858:	f0 e0       	ldi	r31, 0x00	; 0
    585a:	ee 0f       	add	r30, r30
    585c:	ff 1f       	adc	r31, r31
    585e:	e3 5a       	subi	r30, 0xA3	; 163
    5860:	f9 4f       	sbci	r31, 0xF9	; 249
    5862:	a5 91       	lpm	r26, Z+
    5864:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    5866:	8f b7       	in	r24, 0x3f	; 63
	cli();
    5868:	f8 94       	cli

	if (val == LOW) {
    586a:	d1 11       	cpse	r29, r1
    586c:	06 c0       	rjmp	.+12     	; 0x587a <digitalWrite+0x50>
		*out &= ~bit;
    586e:	9c 91       	ld	r25, X
    5870:	e1 2f       	mov	r30, r17
    5872:	e0 95       	com	r30
    5874:	e9 23       	and	r30, r25
    5876:	ec 93       	st	X, r30
    5878:	03 c0       	rjmp	.+6      	; 0x5880 <digitalWrite+0x56>
	} else {
		*out |= bit;
    587a:	ec 91       	ld	r30, X
    587c:	e1 2b       	or	r30, r17
    587e:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    5880:	8f bf       	out	0x3f, r24	; 63
}
    5882:	df 91       	pop	r29
    5884:	cf 91       	pop	r28
    5886:	1f 91       	pop	r17
    5888:	08 95       	ret

0000588a <digitalRead>:

int digitalRead(uint8_t pin)
{
    588a:	cf 93       	push	r28
    588c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    588e:	28 2f       	mov	r18, r24
    5890:	30 e0       	ldi	r19, 0x00	; 0
    5892:	f9 01       	movw	r30, r18
    5894:	ef 58       	subi	r30, 0x8F	; 143
    5896:	fa 4f       	sbci	r31, 0xFA	; 250
    5898:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    589a:	f9 01       	movw	r30, r18
    589c:	e9 54       	subi	r30, 0x49	; 73
    589e:	fa 4f       	sbci	r31, 0xFA	; 250
    58a0:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    58a2:	f9 01       	movw	r30, r18
    58a4:	e3 50       	subi	r30, 0x03	; 3
    58a6:	fa 4f       	sbci	r31, 0xFA	; 250
    58a8:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    58aa:	cc 23       	and	r28, r28
    58ac:	89 f0       	breq	.+34     	; 0x58d0 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    58ae:	81 11       	cpse	r24, r1
    58b0:	15 df       	rcall	.-470    	; 0x56dc <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    58b2:	ec 2f       	mov	r30, r28
    58b4:	f0 e0       	ldi	r31, 0x00	; 0
    58b6:	ee 0f       	add	r30, r30
    58b8:	ff 1f       	adc	r31, r31
    58ba:	ed 5b       	subi	r30, 0xBD	; 189
    58bc:	f9 4f       	sbci	r31, 0xF9	; 249
    58be:	a5 91       	lpm	r26, Z+
    58c0:	b4 91       	lpm	r27, Z
    58c2:	ec 91       	ld	r30, X
    58c4:	ed 23       	and	r30, r29
    58c6:	81 e0       	ldi	r24, 0x01	; 1
    58c8:	90 e0       	ldi	r25, 0x00	; 0
    58ca:	21 f4       	brne	.+8      	; 0x58d4 <digitalRead+0x4a>
    58cc:	80 e0       	ldi	r24, 0x00	; 0
    58ce:	02 c0       	rjmp	.+4      	; 0x58d4 <digitalRead+0x4a>
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    58d0:	80 e0       	ldi	r24, 0x00	; 0
    58d2:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    58d4:	df 91       	pop	r29
    58d6:	cf 91       	pop	r28
    58d8:	08 95       	ret

000058da <_ZN6StringD1Ev>:
{
	init();
	char buf[1 + 8 * sizeof(unsigned char)];
	utoa(value, buf, base);
	*this = buf;
}
    58da:	fc 01       	movw	r30, r24
    58dc:	80 81       	ld	r24, Z
    58de:	91 81       	ldd	r25, Z+1	; 0x01
    58e0:	d9 c4       	rjmp	.+2482   	; 0x6294 <free>
    58e2:	08 95       	ret

000058e4 <_ZN6String10invalidateEv>:
    58e4:	cf 93       	push	r28
    58e6:	df 93       	push	r29
    58e8:	ec 01       	movw	r28, r24
    58ea:	88 81       	ld	r24, Y
    58ec:	99 81       	ldd	r25, Y+1	; 0x01
    58ee:	00 97       	sbiw	r24, 0x00	; 0
    58f0:	09 f0       	breq	.+2      	; 0x58f4 <_ZN6String10invalidateEv+0x10>
    58f2:	d0 d4       	rcall	.+2464   	; 0x6294 <free>
    58f4:	19 82       	std	Y+1, r1	; 0x01
    58f6:	18 82       	st	Y, r1
    58f8:	1d 82       	std	Y+5, r1	; 0x05
    58fa:	1c 82       	std	Y+4, r1	; 0x04
    58fc:	1b 82       	std	Y+3, r1	; 0x03
    58fe:	1a 82       	std	Y+2, r1	; 0x02
    5900:	df 91       	pop	r29
    5902:	cf 91       	pop	r28
    5904:	08 95       	ret

00005906 <_ZN6String12changeBufferEj>:
    5906:	0f 93       	push	r16
    5908:	1f 93       	push	r17
    590a:	cf 93       	push	r28
    590c:	df 93       	push	r29
    590e:	ec 01       	movw	r28, r24
    5910:	8b 01       	movw	r16, r22
    5912:	6f 5f       	subi	r22, 0xFF	; 255
    5914:	7f 4f       	sbci	r23, 0xFF	; 255
    5916:	88 81       	ld	r24, Y
    5918:	99 81       	ldd	r25, Y+1	; 0x01
    591a:	54 d5       	rcall	.+2728   	; 0x63c4 <realloc>
    591c:	00 97       	sbiw	r24, 0x00	; 0
    591e:	31 f0       	breq	.+12     	; 0x592c <_ZN6String12changeBufferEj+0x26>
    5920:	99 83       	std	Y+1, r25	; 0x01
    5922:	88 83       	st	Y, r24
    5924:	1b 83       	std	Y+3, r17	; 0x03
    5926:	0a 83       	std	Y+2, r16	; 0x02
    5928:	81 e0       	ldi	r24, 0x01	; 1
    592a:	01 c0       	rjmp	.+2      	; 0x592e <_ZN6String12changeBufferEj+0x28>
    592c:	80 e0       	ldi	r24, 0x00	; 0
    592e:	df 91       	pop	r29
    5930:	cf 91       	pop	r28
    5932:	1f 91       	pop	r17
    5934:	0f 91       	pop	r16
    5936:	08 95       	ret

00005938 <_ZN6String7reserveEj>:
    5938:	cf 93       	push	r28
    593a:	df 93       	push	r29
    593c:	fc 01       	movw	r30, r24
    593e:	20 81       	ld	r18, Z
    5940:	31 81       	ldd	r19, Z+1	; 0x01
    5942:	23 2b       	or	r18, r19
    5944:	29 f0       	breq	.+10     	; 0x5950 <_ZN6String7reserveEj+0x18>
    5946:	22 81       	ldd	r18, Z+2	; 0x02
    5948:	33 81       	ldd	r19, Z+3	; 0x03
    594a:	26 17       	cp	r18, r22
    594c:	37 07       	cpc	r19, r23
    594e:	68 f4       	brcc	.+26     	; 0x596a <_ZN6String7reserveEj+0x32>
    5950:	ec 01       	movw	r28, r24
    5952:	d9 df       	rcall	.-78     	; 0x5906 <_ZN6String12changeBufferEj>
    5954:	88 23       	and	r24, r24
    5956:	61 f0       	breq	.+24     	; 0x5970 <_ZN6String7reserveEj+0x38>
    5958:	8c 81       	ldd	r24, Y+4	; 0x04
    595a:	9d 81       	ldd	r25, Y+5	; 0x05
    595c:	89 2b       	or	r24, r25
    595e:	39 f4       	brne	.+14     	; 0x596e <_ZN6String7reserveEj+0x36>
    5960:	e8 81       	ld	r30, Y
    5962:	f9 81       	ldd	r31, Y+1	; 0x01
    5964:	10 82       	st	Z, r1
    5966:	81 e0       	ldi	r24, 0x01	; 1
    5968:	03 c0       	rjmp	.+6      	; 0x5970 <_ZN6String7reserveEj+0x38>
    596a:	81 e0       	ldi	r24, 0x01	; 1
    596c:	01 c0       	rjmp	.+2      	; 0x5970 <_ZN6String7reserveEj+0x38>
    596e:	81 e0       	ldi	r24, 0x01	; 1
    5970:	df 91       	pop	r29
    5972:	cf 91       	pop	r28
    5974:	08 95       	ret

00005976 <_ZN6String4copyEPKcj>:
    5976:	ef 92       	push	r14
    5978:	ff 92       	push	r15
    597a:	0f 93       	push	r16
    597c:	1f 93       	push	r17
    597e:	cf 93       	push	r28
    5980:	df 93       	push	r29
    5982:	ec 01       	movw	r28, r24
    5984:	7b 01       	movw	r14, r22
    5986:	8a 01       	movw	r16, r20
    5988:	ba 01       	movw	r22, r20
    598a:	d6 df       	rcall	.-84     	; 0x5938 <_ZN6String7reserveEj>
    598c:	81 11       	cpse	r24, r1
    598e:	03 c0       	rjmp	.+6      	; 0x5996 <_ZN6String4copyEPKcj+0x20>
    5990:	ce 01       	movw	r24, r28
    5992:	a8 df       	rcall	.-176    	; 0x58e4 <_ZN6String10invalidateEv>
    5994:	06 c0       	rjmp	.+12     	; 0x59a2 <_ZN6String4copyEPKcj+0x2c>
    5996:	1d 83       	std	Y+5, r17	; 0x05
    5998:	0c 83       	std	Y+4, r16	; 0x04
    599a:	b7 01       	movw	r22, r14
    599c:	88 81       	ld	r24, Y
    599e:	99 81       	ldd	r25, Y+1	; 0x01
    59a0:	02 d6       	rcall	.+3076   	; 0x65a6 <strcpy>
    59a2:	ce 01       	movw	r24, r28
    59a4:	df 91       	pop	r29
    59a6:	cf 91       	pop	r28
    59a8:	1f 91       	pop	r17
    59aa:	0f 91       	pop	r16
    59ac:	ff 90       	pop	r15
    59ae:	ef 90       	pop	r14
    59b0:	08 95       	ret

000059b2 <_ZN6StringC1EPKc>:
    59b2:	fc 01       	movw	r30, r24
    59b4:	11 82       	std	Z+1, r1	; 0x01
    59b6:	10 82       	st	Z, r1
    59b8:	13 82       	std	Z+3, r1	; 0x03
    59ba:	12 82       	std	Z+2, r1	; 0x02
    59bc:	15 82       	std	Z+5, r1	; 0x05
    59be:	14 82       	std	Z+4, r1	; 0x04
    59c0:	61 15       	cp	r22, r1
    59c2:	71 05       	cpc	r23, r1
    59c4:	49 f0       	breq	.+18     	; 0x59d8 <_ZN6StringC1EPKc+0x26>
    59c6:	fb 01       	movw	r30, r22
    59c8:	01 90       	ld	r0, Z+
    59ca:	00 20       	and	r0, r0
    59cc:	e9 f7       	brne	.-6      	; 0x59c8 <_ZN6StringC1EPKc+0x16>
    59ce:	31 97       	sbiw	r30, 0x01	; 1
    59d0:	af 01       	movw	r20, r30
    59d2:	46 1b       	sub	r20, r22
    59d4:	57 0b       	sbc	r21, r23
    59d6:	cf cf       	rjmp	.-98     	; 0x5976 <_ZN6String4copyEPKcj>
    59d8:	08 95       	ret

000059da <_ZN6StringaSERKS_>:
    59da:	cf 93       	push	r28
    59dc:	df 93       	push	r29
    59de:	ec 01       	movw	r28, r24
    59e0:	fb 01       	movw	r30, r22
    59e2:	86 17       	cp	r24, r22
    59e4:	97 07       	cpc	r25, r23
    59e6:	51 f0       	breq	.+20     	; 0x59fc <_ZN6StringaSERKS_+0x22>
    59e8:	60 81       	ld	r22, Z
    59ea:	71 81       	ldd	r23, Z+1	; 0x01
    59ec:	61 15       	cp	r22, r1
    59ee:	71 05       	cpc	r23, r1
    59f0:	21 f0       	breq	.+8      	; 0x59fa <_ZN6StringaSERKS_+0x20>
    59f2:	44 81       	ldd	r20, Z+4	; 0x04
    59f4:	55 81       	ldd	r21, Z+5	; 0x05
    59f6:	bf df       	rcall	.-130    	; 0x5976 <_ZN6String4copyEPKcj>
    59f8:	01 c0       	rjmp	.+2      	; 0x59fc <_ZN6StringaSERKS_+0x22>
    59fa:	74 df       	rcall	.-280    	; 0x58e4 <_ZN6String10invalidateEv>
    59fc:	ce 01       	movw	r24, r28
    59fe:	df 91       	pop	r29
    5a00:	cf 91       	pop	r28
    5a02:	08 95       	ret

00005a04 <_ZN6StringC1ERKS_>:
    5a04:	fc 01       	movw	r30, r24
    5a06:	11 82       	std	Z+1, r1	; 0x01
    5a08:	10 82       	st	Z, r1
    5a0a:	13 82       	std	Z+3, r1	; 0x03
    5a0c:	12 82       	std	Z+2, r1	; 0x02
    5a0e:	15 82       	std	Z+5, r1	; 0x05
    5a10:	14 82       	std	Z+4, r1	; 0x04
    5a12:	e3 cf       	rjmp	.-58     	; 0x59da <_ZN6StringaSERKS_>
    5a14:	08 95       	ret

00005a16 <_ZN6StringaSEPKc>:
    5a16:	cf 93       	push	r28
    5a18:	df 93       	push	r29
    5a1a:	ec 01       	movw	r28, r24
    5a1c:	61 15       	cp	r22, r1
    5a1e:	71 05       	cpc	r23, r1
    5a20:	51 f0       	breq	.+20     	; 0x5a36 <_ZN6StringaSEPKc+0x20>
    5a22:	fb 01       	movw	r30, r22
    5a24:	01 90       	ld	r0, Z+
    5a26:	00 20       	and	r0, r0
    5a28:	e9 f7       	brne	.-6      	; 0x5a24 <_ZN6StringaSEPKc+0xe>
    5a2a:	31 97       	sbiw	r30, 0x01	; 1
    5a2c:	af 01       	movw	r20, r30
    5a2e:	46 1b       	sub	r20, r22
    5a30:	57 0b       	sbc	r21, r23
    5a32:	a1 df       	rcall	.-190    	; 0x5976 <_ZN6String4copyEPKcj>
    5a34:	01 c0       	rjmp	.+2      	; 0x5a38 <_ZN6StringaSEPKc+0x22>
    5a36:	56 df       	rcall	.-340    	; 0x58e4 <_ZN6String10invalidateEv>
    5a38:	ce 01       	movw	r24, r28
    5a3a:	df 91       	pop	r29
    5a3c:	cf 91       	pop	r28
    5a3e:	08 95       	ret

00005a40 <_ZN6StringC1Eih>:

String::String(int value, unsigned char base)
    5a40:	0f 93       	push	r16
    5a42:	1f 93       	push	r17
    5a44:	cf 93       	push	r28
    5a46:	df 93       	push	r29
    5a48:	cd b7       	in	r28, 0x3d	; 61
    5a4a:	de b7       	in	r29, 0x3e	; 62
    5a4c:	62 97       	sbiw	r28, 0x12	; 18
    5a4e:	0f b6       	in	r0, 0x3f	; 63
    5a50:	f8 94       	cli
    5a52:	de bf       	out	0x3e, r29	; 62
    5a54:	0f be       	out	0x3f, r0	; 63
    5a56:	cd bf       	out	0x3d, r28	; 61
    5a58:	8c 01       	movw	r16, r24
    5a5a:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    5a5c:	f8 01       	movw	r30, r16
    5a5e:	11 82       	std	Z+1, r1	; 0x01
    5a60:	10 82       	st	Z, r1
	capacity = 0;
    5a62:	13 82       	std	Z+3, r1	; 0x03
    5a64:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    5a66:	15 82       	std	Z+5, r1	; 0x05
    5a68:	14 82       	std	Z+4, r1	; 0x04

String::String(int value, unsigned char base)
{
	init();
	char buf[2 + 8 * sizeof(int)];
	itoa(value, buf, base);
    5a6a:	50 e0       	ldi	r21, 0x00	; 0
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
    5a6c:	be 01       	movw	r22, r28
    5a6e:	6f 5f       	subi	r22, 0xFF	; 255
    5a70:	7f 4f       	sbci	r23, 0xFF	; 255
    5a72:	a0 d5       	rcall	.+2880   	; 0x65b4 <itoa>
	*this = buf;
    5a74:	be 01       	movw	r22, r28
    5a76:	6f 5f       	subi	r22, 0xFF	; 255
    5a78:	7f 4f       	sbci	r23, 0xFF	; 255
    5a7a:	c8 01       	movw	r24, r16
    5a7c:	cc df       	rcall	.-104    	; 0x5a16 <_ZN6StringaSEPKc>
}
    5a7e:	62 96       	adiw	r28, 0x12	; 18
    5a80:	0f b6       	in	r0, 0x3f	; 63
    5a82:	f8 94       	cli
    5a84:	de bf       	out	0x3e, r29	; 62
    5a86:	0f be       	out	0x3f, r0	; 63
    5a88:	cd bf       	out	0x3d, r28	; 61
    5a8a:	df 91       	pop	r29
    5a8c:	cf 91       	pop	r28
    5a8e:	1f 91       	pop	r17
    5a90:	0f 91       	pop	r16
    5a92:	08 95       	ret

00005a94 <_ZN6StringC1Ejh>:

String::String(unsigned int value, unsigned char base)
    5a94:	0f 93       	push	r16
    5a96:	1f 93       	push	r17
    5a98:	cf 93       	push	r28
    5a9a:	df 93       	push	r29
    5a9c:	cd b7       	in	r28, 0x3d	; 61
    5a9e:	de b7       	in	r29, 0x3e	; 62
    5aa0:	61 97       	sbiw	r28, 0x11	; 17
    5aa2:	0f b6       	in	r0, 0x3f	; 63
    5aa4:	f8 94       	cli
    5aa6:	de bf       	out	0x3e, r29	; 62
    5aa8:	0f be       	out	0x3f, r0	; 63
    5aaa:	cd bf       	out	0x3d, r28	; 61
    5aac:	8c 01       	movw	r16, r24
    5aae:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    5ab0:	f8 01       	movw	r30, r16
    5ab2:	11 82       	std	Z+1, r1	; 0x01
    5ab4:	10 82       	st	Z, r1
	capacity = 0;
    5ab6:	13 82       	std	Z+3, r1	; 0x03
    5ab8:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    5aba:	15 82       	std	Z+5, r1	; 0x05
    5abc:	14 82       	std	Z+4, r1	; 0x04

String::String(unsigned int value, unsigned char base)
{
	init();
	char buf[1 + 8 * sizeof(unsigned int)];
	utoa(value, buf, base);
    5abe:	50 e0       	ldi	r21, 0x00	; 0
extern __inline__ __ATTR_GNU_INLINE__
char *utoa (unsigned int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__utoa (unsigned int, char *, int);
	return __utoa (__val, __s, __radix);
    5ac0:	be 01       	movw	r22, r28
    5ac2:	6f 5f       	subi	r22, 0xFF	; 255
    5ac4:	7f 4f       	sbci	r23, 0xFF	; 255
    5ac6:	cd d5       	rcall	.+2970   	; 0x6662 <utoa>
	*this = buf;
    5ac8:	be 01       	movw	r22, r28
    5aca:	6f 5f       	subi	r22, 0xFF	; 255
    5acc:	7f 4f       	sbci	r23, 0xFF	; 255
    5ace:	c8 01       	movw	r24, r16
    5ad0:	a2 df       	rcall	.-188    	; 0x5a16 <_ZN6StringaSEPKc>
}
    5ad2:	61 96       	adiw	r28, 0x11	; 17
    5ad4:	0f b6       	in	r0, 0x3f	; 63
    5ad6:	f8 94       	cli
    5ad8:	de bf       	out	0x3e, r29	; 62
    5ada:	0f be       	out	0x3f, r0	; 63
    5adc:	cd bf       	out	0x3d, r28	; 61
    5ade:	df 91       	pop	r29
    5ae0:	cf 91       	pop	r28
    5ae2:	1f 91       	pop	r17
    5ae4:	0f 91       	pop	r16
    5ae6:	08 95       	ret

00005ae8 <_ZN6StringC1Elh>:

String::String(long value, unsigned char base)
    5ae8:	0f 93       	push	r16
    5aea:	1f 93       	push	r17
    5aec:	cf 93       	push	r28
    5aee:	df 93       	push	r29
    5af0:	cd b7       	in	r28, 0x3d	; 61
    5af2:	de b7       	in	r29, 0x3e	; 62
    5af4:	a2 97       	sbiw	r28, 0x22	; 34
    5af6:	0f b6       	in	r0, 0x3f	; 63
    5af8:	f8 94       	cli
    5afa:	de bf       	out	0x3e, r29	; 62
    5afc:	0f be       	out	0x3f, r0	; 63
    5afe:	cd bf       	out	0x3d, r28	; 61
    5b00:	8c 01       	movw	r16, r24
    5b02:	cb 01       	movw	r24, r22
    5b04:	ba 01       	movw	r22, r20
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    5b06:	f8 01       	movw	r30, r16
    5b08:	11 82       	std	Z+1, r1	; 0x01
    5b0a:	10 82       	st	Z, r1
	capacity = 0;
    5b0c:	13 82       	std	Z+3, r1	; 0x03
    5b0e:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    5b10:	15 82       	std	Z+5, r1	; 0x05
    5b12:	14 82       	std	Z+4, r1	; 0x04

String::String(long value, unsigned char base)
{
	init();
	char buf[2 + 8 * sizeof(long)];
	ltoa(value, buf, base);
    5b14:	30 e0       	ldi	r19, 0x00	; 0
extern __inline__ __ATTR_GNU_INLINE__
char *ltoa (long __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__ltoa (long, char *, int);
	return __ltoa (__val, __s, __radix);
    5b16:	ae 01       	movw	r20, r28
    5b18:	4f 5f       	subi	r20, 0xFF	; 255
    5b1a:	5f 4f       	sbci	r21, 0xFF	; 255
    5b1c:	5f d5       	rcall	.+2750   	; 0x65dc <ltoa>
	*this = buf;
    5b1e:	be 01       	movw	r22, r28
    5b20:	6f 5f       	subi	r22, 0xFF	; 255
    5b22:	7f 4f       	sbci	r23, 0xFF	; 255
    5b24:	c8 01       	movw	r24, r16
    5b26:	77 df       	rcall	.-274    	; 0x5a16 <_ZN6StringaSEPKc>
}
    5b28:	a2 96       	adiw	r28, 0x22	; 34
    5b2a:	0f b6       	in	r0, 0x3f	; 63
    5b2c:	f8 94       	cli
    5b2e:	de bf       	out	0x3e, r29	; 62
    5b30:	0f be       	out	0x3f, r0	; 63
    5b32:	cd bf       	out	0x3d, r28	; 61
    5b34:	df 91       	pop	r29
    5b36:	cf 91       	pop	r28
    5b38:	1f 91       	pop	r17
    5b3a:	0f 91       	pop	r16
    5b3c:	08 95       	ret

00005b3e <_ZN6StringC1Emh>:

String::String(unsigned long value, unsigned char base)
    5b3e:	0f 93       	push	r16
    5b40:	1f 93       	push	r17
    5b42:	cf 93       	push	r28
    5b44:	df 93       	push	r29
    5b46:	cd b7       	in	r28, 0x3d	; 61
    5b48:	de b7       	in	r29, 0x3e	; 62
    5b4a:	a1 97       	sbiw	r28, 0x21	; 33
    5b4c:	0f b6       	in	r0, 0x3f	; 63
    5b4e:	f8 94       	cli
    5b50:	de bf       	out	0x3e, r29	; 62
    5b52:	0f be       	out	0x3f, r0	; 63
    5b54:	cd bf       	out	0x3d, r28	; 61
    5b56:	8c 01       	movw	r16, r24
    5b58:	cb 01       	movw	r24, r22
    5b5a:	ba 01       	movw	r22, r20
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    5b5c:	f8 01       	movw	r30, r16
    5b5e:	11 82       	std	Z+1, r1	; 0x01
    5b60:	10 82       	st	Z, r1
	capacity = 0;
    5b62:	13 82       	std	Z+3, r1	; 0x03
    5b64:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    5b66:	15 82       	std	Z+5, r1	; 0x05
    5b68:	14 82       	std	Z+4, r1	; 0x04

String::String(unsigned long value, unsigned char base)
{
	init();
	char buf[1 + 8 * sizeof(unsigned long)];
	ultoa(value, buf, base);
    5b6a:	30 e0       	ldi	r19, 0x00	; 0
extern __inline__ __ATTR_GNU_INLINE__
char *ultoa (unsigned long __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__ultoa (unsigned long, char *, int);
	return __ultoa (__val, __s, __radix);
    5b6c:	ae 01       	movw	r20, r28
    5b6e:	4f 5f       	subi	r20, 0xFF	; 255
    5b70:	5f 4f       	sbci	r21, 0xFF	; 255
    5b72:	4c d5       	rcall	.+2712   	; 0x660c <ultoa>
	*this = buf;
    5b74:	be 01       	movw	r22, r28
    5b76:	6f 5f       	subi	r22, 0xFF	; 255
    5b78:	7f 4f       	sbci	r23, 0xFF	; 255
    5b7a:	c8 01       	movw	r24, r16
    5b7c:	4c df       	rcall	.-360    	; 0x5a16 <_ZN6StringaSEPKc>
}
    5b7e:	a1 96       	adiw	r28, 0x21	; 33
    5b80:	0f b6       	in	r0, 0x3f	; 63
    5b82:	f8 94       	cli
    5b84:	de bf       	out	0x3e, r29	; 62
    5b86:	0f be       	out	0x3f, r0	; 63
    5b88:	cd bf       	out	0x3d, r28	; 61
    5b8a:	df 91       	pop	r29
    5b8c:	cf 91       	pop	r28
    5b8e:	1f 91       	pop	r17
    5b90:	0f 91       	pop	r16
    5b92:	08 95       	ret

00005b94 <_ZN6StringC1Efh>:

String::String(float value, unsigned char decimalPlaces)
    5b94:	ef 92       	push	r14
    5b96:	ff 92       	push	r15
    5b98:	0f 93       	push	r16
    5b9a:	1f 93       	push	r17
    5b9c:	cf 93       	push	r28
    5b9e:	df 93       	push	r29
    5ba0:	cd b7       	in	r28, 0x3d	; 61
    5ba2:	de b7       	in	r29, 0x3e	; 62
    5ba4:	a1 97       	sbiw	r28, 0x21	; 33
    5ba6:	0f b6       	in	r0, 0x3f	; 63
    5ba8:	f8 94       	cli
    5baa:	de bf       	out	0x3e, r29	; 62
    5bac:	0f be       	out	0x3f, r0	; 63
    5bae:	cd bf       	out	0x3d, r28	; 61
    5bb0:	7c 01       	movw	r14, r24
    5bb2:	cb 01       	movw	r24, r22
    5bb4:	ba 01       	movw	r22, r20
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    5bb6:	f7 01       	movw	r30, r14
    5bb8:	11 82       	std	Z+1, r1	; 0x01
    5bba:	10 82       	st	Z, r1
	capacity = 0;
    5bbc:	13 82       	std	Z+3, r1	; 0x03
    5bbe:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    5bc0:	15 82       	std	Z+5, r1	; 0x05
    5bc2:	14 82       	std	Z+4, r1	; 0x04

String::String(float value, unsigned char decimalPlaces)
{
	init();
	char buf[33];
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
    5bc4:	42 e0       	ldi	r20, 0x02	; 2
    5bc6:	42 0f       	add	r20, r18
    5bc8:	8e 01       	movw	r16, r28
    5bca:	0f 5f       	subi	r16, 0xFF	; 255
    5bcc:	1f 4f       	sbci	r17, 0xFF	; 255
    5bce:	ae d2       	rcall	.+1372   	; 0x612c <dtostrf>
    5bd0:	bc 01       	movw	r22, r24
    5bd2:	c7 01       	movw	r24, r14
    5bd4:	20 df       	rcall	.-448    	; 0x5a16 <_ZN6StringaSEPKc>
}
    5bd6:	a1 96       	adiw	r28, 0x21	; 33
    5bd8:	0f b6       	in	r0, 0x3f	; 63
    5bda:	f8 94       	cli
    5bdc:	de bf       	out	0x3e, r29	; 62
    5bde:	0f be       	out	0x3f, r0	; 63
    5be0:	cd bf       	out	0x3d, r28	; 61
    5be2:	df 91       	pop	r29
    5be4:	cf 91       	pop	r28
    5be6:	1f 91       	pop	r17
    5be8:	0f 91       	pop	r16
    5bea:	ff 90       	pop	r15
    5bec:	ef 90       	pop	r14
    5bee:	08 95       	ret

00005bf0 <_ZN6StringC1Edh>:

String::String(double value, unsigned char decimalPlaces)
    5bf0:	ef 92       	push	r14
    5bf2:	ff 92       	push	r15
    5bf4:	0f 93       	push	r16
    5bf6:	1f 93       	push	r17
    5bf8:	cf 93       	push	r28
    5bfa:	df 93       	push	r29
    5bfc:	cd b7       	in	r28, 0x3d	; 61
    5bfe:	de b7       	in	r29, 0x3e	; 62
    5c00:	a1 97       	sbiw	r28, 0x21	; 33
    5c02:	0f b6       	in	r0, 0x3f	; 63
    5c04:	f8 94       	cli
    5c06:	de bf       	out	0x3e, r29	; 62
    5c08:	0f be       	out	0x3f, r0	; 63
    5c0a:	cd bf       	out	0x3d, r28	; 61
    5c0c:	7c 01       	movw	r14, r24
    5c0e:	cb 01       	movw	r24, r22
    5c10:	ba 01       	movw	r22, r20
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    5c12:	f7 01       	movw	r30, r14
    5c14:	11 82       	std	Z+1, r1	; 0x01
    5c16:	10 82       	st	Z, r1
	capacity = 0;
    5c18:	13 82       	std	Z+3, r1	; 0x03
    5c1a:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    5c1c:	15 82       	std	Z+5, r1	; 0x05
    5c1e:	14 82       	std	Z+4, r1	; 0x04

String::String(double value, unsigned char decimalPlaces)
{
	init();
	char buf[33];
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
    5c20:	42 e0       	ldi	r20, 0x02	; 2
    5c22:	42 0f       	add	r20, r18
    5c24:	8e 01       	movw	r16, r28
    5c26:	0f 5f       	subi	r16, 0xFF	; 255
    5c28:	1f 4f       	sbci	r17, 0xFF	; 255
    5c2a:	80 d2       	rcall	.+1280   	; 0x612c <dtostrf>
    5c2c:	bc 01       	movw	r22, r24
    5c2e:	c7 01       	movw	r24, r14
    5c30:	f2 de       	rcall	.-540    	; 0x5a16 <_ZN6StringaSEPKc>
}
    5c32:	a1 96       	adiw	r28, 0x21	; 33
    5c34:	0f b6       	in	r0, 0x3f	; 63
    5c36:	f8 94       	cli
    5c38:	de bf       	out	0x3e, r29	; 62
    5c3a:	0f be       	out	0x3f, r0	; 63
    5c3c:	cd bf       	out	0x3d, r28	; 61
    5c3e:	df 91       	pop	r29
    5c40:	cf 91       	pop	r28
    5c42:	1f 91       	pop	r17
    5c44:	0f 91       	pop	r16
    5c46:	ff 90       	pop	r15
    5c48:	ef 90       	pop	r14
    5c4a:	08 95       	ret

00005c4c <__subsf3>:
    5c4c:	50 58       	subi	r21, 0x80	; 128

00005c4e <__addsf3>:
    5c4e:	bb 27       	eor	r27, r27
    5c50:	aa 27       	eor	r26, r26
    5c52:	0e d0       	rcall	.+28     	; 0x5c70 <__addsf3x>
    5c54:	75 c1       	rjmp	.+746    	; 0x5f40 <__fp_round>
    5c56:	66 d1       	rcall	.+716    	; 0x5f24 <__fp_pscA>
    5c58:	30 f0       	brcs	.+12     	; 0x5c66 <__addsf3+0x18>
    5c5a:	6b d1       	rcall	.+726    	; 0x5f32 <__fp_pscB>
    5c5c:	20 f0       	brcs	.+8      	; 0x5c66 <__addsf3+0x18>
    5c5e:	31 f4       	brne	.+12     	; 0x5c6c <__addsf3+0x1e>
    5c60:	9f 3f       	cpi	r25, 0xFF	; 255
    5c62:	11 f4       	brne	.+4      	; 0x5c68 <__addsf3+0x1a>
    5c64:	1e f4       	brtc	.+6      	; 0x5c6c <__addsf3+0x1e>
    5c66:	5b c1       	rjmp	.+694    	; 0x5f1e <__fp_nan>
    5c68:	0e f4       	brtc	.+2      	; 0x5c6c <__addsf3+0x1e>
    5c6a:	e0 95       	com	r30
    5c6c:	e7 fb       	bst	r30, 7
    5c6e:	51 c1       	rjmp	.+674    	; 0x5f12 <__fp_inf>

00005c70 <__addsf3x>:
    5c70:	e9 2f       	mov	r30, r25
    5c72:	77 d1       	rcall	.+750    	; 0x5f62 <__fp_split3>
    5c74:	80 f3       	brcs	.-32     	; 0x5c56 <__addsf3+0x8>
    5c76:	ba 17       	cp	r27, r26
    5c78:	62 07       	cpc	r22, r18
    5c7a:	73 07       	cpc	r23, r19
    5c7c:	84 07       	cpc	r24, r20
    5c7e:	95 07       	cpc	r25, r21
    5c80:	18 f0       	brcs	.+6      	; 0x5c88 <__addsf3x+0x18>
    5c82:	71 f4       	brne	.+28     	; 0x5ca0 <__addsf3x+0x30>
    5c84:	9e f5       	brtc	.+102    	; 0x5cec <__addsf3x+0x7c>
    5c86:	8f c1       	rjmp	.+798    	; 0x5fa6 <__fp_zero>
    5c88:	0e f4       	brtc	.+2      	; 0x5c8c <__addsf3x+0x1c>
    5c8a:	e0 95       	com	r30
    5c8c:	0b 2e       	mov	r0, r27
    5c8e:	ba 2f       	mov	r27, r26
    5c90:	a0 2d       	mov	r26, r0
    5c92:	0b 01       	movw	r0, r22
    5c94:	b9 01       	movw	r22, r18
    5c96:	90 01       	movw	r18, r0
    5c98:	0c 01       	movw	r0, r24
    5c9a:	ca 01       	movw	r24, r20
    5c9c:	a0 01       	movw	r20, r0
    5c9e:	11 24       	eor	r1, r1
    5ca0:	ff 27       	eor	r31, r31
    5ca2:	59 1b       	sub	r21, r25
    5ca4:	99 f0       	breq	.+38     	; 0x5ccc <__addsf3x+0x5c>
    5ca6:	59 3f       	cpi	r21, 0xF9	; 249
    5ca8:	50 f4       	brcc	.+20     	; 0x5cbe <__addsf3x+0x4e>
    5caa:	50 3e       	cpi	r21, 0xE0	; 224
    5cac:	68 f1       	brcs	.+90     	; 0x5d08 <__addsf3x+0x98>
    5cae:	1a 16       	cp	r1, r26
    5cb0:	f0 40       	sbci	r31, 0x00	; 0
    5cb2:	a2 2f       	mov	r26, r18
    5cb4:	23 2f       	mov	r18, r19
    5cb6:	34 2f       	mov	r19, r20
    5cb8:	44 27       	eor	r20, r20
    5cba:	58 5f       	subi	r21, 0xF8	; 248
    5cbc:	f3 cf       	rjmp	.-26     	; 0x5ca4 <__addsf3x+0x34>
    5cbe:	46 95       	lsr	r20
    5cc0:	37 95       	ror	r19
    5cc2:	27 95       	ror	r18
    5cc4:	a7 95       	ror	r26
    5cc6:	f0 40       	sbci	r31, 0x00	; 0
    5cc8:	53 95       	inc	r21
    5cca:	c9 f7       	brne	.-14     	; 0x5cbe <__addsf3x+0x4e>
    5ccc:	7e f4       	brtc	.+30     	; 0x5cec <__addsf3x+0x7c>
    5cce:	1f 16       	cp	r1, r31
    5cd0:	ba 0b       	sbc	r27, r26
    5cd2:	62 0b       	sbc	r22, r18
    5cd4:	73 0b       	sbc	r23, r19
    5cd6:	84 0b       	sbc	r24, r20
    5cd8:	ba f0       	brmi	.+46     	; 0x5d08 <__addsf3x+0x98>
    5cda:	91 50       	subi	r25, 0x01	; 1
    5cdc:	a1 f0       	breq	.+40     	; 0x5d06 <__addsf3x+0x96>
    5cde:	ff 0f       	add	r31, r31
    5ce0:	bb 1f       	adc	r27, r27
    5ce2:	66 1f       	adc	r22, r22
    5ce4:	77 1f       	adc	r23, r23
    5ce6:	88 1f       	adc	r24, r24
    5ce8:	c2 f7       	brpl	.-16     	; 0x5cda <__addsf3x+0x6a>
    5cea:	0e c0       	rjmp	.+28     	; 0x5d08 <__addsf3x+0x98>
    5cec:	ba 0f       	add	r27, r26
    5cee:	62 1f       	adc	r22, r18
    5cf0:	73 1f       	adc	r23, r19
    5cf2:	84 1f       	adc	r24, r20
    5cf4:	48 f4       	brcc	.+18     	; 0x5d08 <__addsf3x+0x98>
    5cf6:	87 95       	ror	r24
    5cf8:	77 95       	ror	r23
    5cfa:	67 95       	ror	r22
    5cfc:	b7 95       	ror	r27
    5cfe:	f7 95       	ror	r31
    5d00:	9e 3f       	cpi	r25, 0xFE	; 254
    5d02:	08 f0       	brcs	.+2      	; 0x5d06 <__addsf3x+0x96>
    5d04:	b3 cf       	rjmp	.-154    	; 0x5c6c <__addsf3+0x1e>
    5d06:	93 95       	inc	r25
    5d08:	88 0f       	add	r24, r24
    5d0a:	08 f0       	brcs	.+2      	; 0x5d0e <__addsf3x+0x9e>
    5d0c:	99 27       	eor	r25, r25
    5d0e:	ee 0f       	add	r30, r30
    5d10:	97 95       	ror	r25
    5d12:	87 95       	ror	r24
    5d14:	08 95       	ret

00005d16 <__cmpsf2>:
    5d16:	d9 d0       	rcall	.+434    	; 0x5eca <__fp_cmp>
    5d18:	08 f4       	brcc	.+2      	; 0x5d1c <__cmpsf2+0x6>
    5d1a:	81 e0       	ldi	r24, 0x01	; 1
    5d1c:	08 95       	ret

00005d1e <__divsf3>:
    5d1e:	0c d0       	rcall	.+24     	; 0x5d38 <__divsf3x>
    5d20:	0f c1       	rjmp	.+542    	; 0x5f40 <__fp_round>
    5d22:	07 d1       	rcall	.+526    	; 0x5f32 <__fp_pscB>
    5d24:	40 f0       	brcs	.+16     	; 0x5d36 <__divsf3+0x18>
    5d26:	fe d0       	rcall	.+508    	; 0x5f24 <__fp_pscA>
    5d28:	30 f0       	brcs	.+12     	; 0x5d36 <__divsf3+0x18>
    5d2a:	21 f4       	brne	.+8      	; 0x5d34 <__divsf3+0x16>
    5d2c:	5f 3f       	cpi	r21, 0xFF	; 255
    5d2e:	19 f0       	breq	.+6      	; 0x5d36 <__divsf3+0x18>
    5d30:	f0 c0       	rjmp	.+480    	; 0x5f12 <__fp_inf>
    5d32:	51 11       	cpse	r21, r1
    5d34:	39 c1       	rjmp	.+626    	; 0x5fa8 <__fp_szero>
    5d36:	f3 c0       	rjmp	.+486    	; 0x5f1e <__fp_nan>

00005d38 <__divsf3x>:
    5d38:	14 d1       	rcall	.+552    	; 0x5f62 <__fp_split3>
    5d3a:	98 f3       	brcs	.-26     	; 0x5d22 <__divsf3+0x4>

00005d3c <__divsf3_pse>:
    5d3c:	99 23       	and	r25, r25
    5d3e:	c9 f3       	breq	.-14     	; 0x5d32 <__divsf3+0x14>
    5d40:	55 23       	and	r21, r21
    5d42:	b1 f3       	breq	.-20     	; 0x5d30 <__divsf3+0x12>
    5d44:	95 1b       	sub	r25, r21
    5d46:	55 0b       	sbc	r21, r21
    5d48:	bb 27       	eor	r27, r27
    5d4a:	aa 27       	eor	r26, r26
    5d4c:	62 17       	cp	r22, r18
    5d4e:	73 07       	cpc	r23, r19
    5d50:	84 07       	cpc	r24, r20
    5d52:	38 f0       	brcs	.+14     	; 0x5d62 <__divsf3_pse+0x26>
    5d54:	9f 5f       	subi	r25, 0xFF	; 255
    5d56:	5f 4f       	sbci	r21, 0xFF	; 255
    5d58:	22 0f       	add	r18, r18
    5d5a:	33 1f       	adc	r19, r19
    5d5c:	44 1f       	adc	r20, r20
    5d5e:	aa 1f       	adc	r26, r26
    5d60:	a9 f3       	breq	.-22     	; 0x5d4c <__divsf3_pse+0x10>
    5d62:	33 d0       	rcall	.+102    	; 0x5dca <__divsf3_pse+0x8e>
    5d64:	0e 2e       	mov	r0, r30
    5d66:	3a f0       	brmi	.+14     	; 0x5d76 <__divsf3_pse+0x3a>
    5d68:	e0 e8       	ldi	r30, 0x80	; 128
    5d6a:	30 d0       	rcall	.+96     	; 0x5dcc <__divsf3_pse+0x90>
    5d6c:	91 50       	subi	r25, 0x01	; 1
    5d6e:	50 40       	sbci	r21, 0x00	; 0
    5d70:	e6 95       	lsr	r30
    5d72:	00 1c       	adc	r0, r0
    5d74:	ca f7       	brpl	.-14     	; 0x5d68 <__divsf3_pse+0x2c>
    5d76:	29 d0       	rcall	.+82     	; 0x5dca <__divsf3_pse+0x8e>
    5d78:	fe 2f       	mov	r31, r30
    5d7a:	27 d0       	rcall	.+78     	; 0x5dca <__divsf3_pse+0x8e>
    5d7c:	66 0f       	add	r22, r22
    5d7e:	77 1f       	adc	r23, r23
    5d80:	88 1f       	adc	r24, r24
    5d82:	bb 1f       	adc	r27, r27
    5d84:	26 17       	cp	r18, r22
    5d86:	37 07       	cpc	r19, r23
    5d88:	48 07       	cpc	r20, r24
    5d8a:	ab 07       	cpc	r26, r27
    5d8c:	b0 e8       	ldi	r27, 0x80	; 128
    5d8e:	09 f0       	breq	.+2      	; 0x5d92 <__divsf3_pse+0x56>
    5d90:	bb 0b       	sbc	r27, r27
    5d92:	80 2d       	mov	r24, r0
    5d94:	bf 01       	movw	r22, r30
    5d96:	ff 27       	eor	r31, r31
    5d98:	93 58       	subi	r25, 0x83	; 131
    5d9a:	5f 4f       	sbci	r21, 0xFF	; 255
    5d9c:	2a f0       	brmi	.+10     	; 0x5da8 <__divsf3_pse+0x6c>
    5d9e:	9e 3f       	cpi	r25, 0xFE	; 254
    5da0:	51 05       	cpc	r21, r1
    5da2:	68 f0       	brcs	.+26     	; 0x5dbe <__divsf3_pse+0x82>
    5da4:	b6 c0       	rjmp	.+364    	; 0x5f12 <__fp_inf>
    5da6:	00 c1       	rjmp	.+512    	; 0x5fa8 <__fp_szero>
    5da8:	5f 3f       	cpi	r21, 0xFF	; 255
    5daa:	ec f3       	brlt	.-6      	; 0x5da6 <__divsf3_pse+0x6a>
    5dac:	98 3e       	cpi	r25, 0xE8	; 232
    5dae:	dc f3       	brlt	.-10     	; 0x5da6 <__divsf3_pse+0x6a>
    5db0:	86 95       	lsr	r24
    5db2:	77 95       	ror	r23
    5db4:	67 95       	ror	r22
    5db6:	b7 95       	ror	r27
    5db8:	f7 95       	ror	r31
    5dba:	9f 5f       	subi	r25, 0xFF	; 255
    5dbc:	c9 f7       	brne	.-14     	; 0x5db0 <__divsf3_pse+0x74>
    5dbe:	88 0f       	add	r24, r24
    5dc0:	91 1d       	adc	r25, r1
    5dc2:	96 95       	lsr	r25
    5dc4:	87 95       	ror	r24
    5dc6:	97 f9       	bld	r25, 7
    5dc8:	08 95       	ret
    5dca:	e1 e0       	ldi	r30, 0x01	; 1
    5dcc:	66 0f       	add	r22, r22
    5dce:	77 1f       	adc	r23, r23
    5dd0:	88 1f       	adc	r24, r24
    5dd2:	bb 1f       	adc	r27, r27
    5dd4:	62 17       	cp	r22, r18
    5dd6:	73 07       	cpc	r23, r19
    5dd8:	84 07       	cpc	r24, r20
    5dda:	ba 07       	cpc	r27, r26
    5ddc:	20 f0       	brcs	.+8      	; 0x5de6 <__divsf3_pse+0xaa>
    5dde:	62 1b       	sub	r22, r18
    5de0:	73 0b       	sbc	r23, r19
    5de2:	84 0b       	sbc	r24, r20
    5de4:	ba 0b       	sbc	r27, r26
    5de6:	ee 1f       	adc	r30, r30
    5de8:	88 f7       	brcc	.-30     	; 0x5dcc <__divsf3_pse+0x90>
    5dea:	e0 95       	com	r30
    5dec:	08 95       	ret

00005dee <__fixsfsi>:
    5dee:	04 d0       	rcall	.+8      	; 0x5df8 <__fixunssfsi>
    5df0:	68 94       	set
    5df2:	b1 11       	cpse	r27, r1
    5df4:	d9 c0       	rjmp	.+434    	; 0x5fa8 <__fp_szero>
    5df6:	08 95       	ret

00005df8 <__fixunssfsi>:
    5df8:	bc d0       	rcall	.+376    	; 0x5f72 <__fp_splitA>
    5dfa:	88 f0       	brcs	.+34     	; 0x5e1e <__fixunssfsi+0x26>
    5dfc:	9f 57       	subi	r25, 0x7F	; 127
    5dfe:	90 f0       	brcs	.+36     	; 0x5e24 <__fixunssfsi+0x2c>
    5e00:	b9 2f       	mov	r27, r25
    5e02:	99 27       	eor	r25, r25
    5e04:	b7 51       	subi	r27, 0x17	; 23
    5e06:	a0 f0       	brcs	.+40     	; 0x5e30 <__fixunssfsi+0x38>
    5e08:	d1 f0       	breq	.+52     	; 0x5e3e <__fixunssfsi+0x46>
    5e0a:	66 0f       	add	r22, r22
    5e0c:	77 1f       	adc	r23, r23
    5e0e:	88 1f       	adc	r24, r24
    5e10:	99 1f       	adc	r25, r25
    5e12:	1a f0       	brmi	.+6      	; 0x5e1a <__fixunssfsi+0x22>
    5e14:	ba 95       	dec	r27
    5e16:	c9 f7       	brne	.-14     	; 0x5e0a <__fixunssfsi+0x12>
    5e18:	12 c0       	rjmp	.+36     	; 0x5e3e <__fixunssfsi+0x46>
    5e1a:	b1 30       	cpi	r27, 0x01	; 1
    5e1c:	81 f0       	breq	.+32     	; 0x5e3e <__fixunssfsi+0x46>
    5e1e:	c3 d0       	rcall	.+390    	; 0x5fa6 <__fp_zero>
    5e20:	b1 e0       	ldi	r27, 0x01	; 1
    5e22:	08 95       	ret
    5e24:	c0 c0       	rjmp	.+384    	; 0x5fa6 <__fp_zero>
    5e26:	67 2f       	mov	r22, r23
    5e28:	78 2f       	mov	r23, r24
    5e2a:	88 27       	eor	r24, r24
    5e2c:	b8 5f       	subi	r27, 0xF8	; 248
    5e2e:	39 f0       	breq	.+14     	; 0x5e3e <__fixunssfsi+0x46>
    5e30:	b9 3f       	cpi	r27, 0xF9	; 249
    5e32:	cc f3       	brlt	.-14     	; 0x5e26 <__fixunssfsi+0x2e>
    5e34:	86 95       	lsr	r24
    5e36:	77 95       	ror	r23
    5e38:	67 95       	ror	r22
    5e3a:	b3 95       	inc	r27
    5e3c:	d9 f7       	brne	.-10     	; 0x5e34 <__fixunssfsi+0x3c>
    5e3e:	3e f4       	brtc	.+14     	; 0x5e4e <__fixunssfsi+0x56>
    5e40:	90 95       	com	r25
    5e42:	80 95       	com	r24
    5e44:	70 95       	com	r23
    5e46:	61 95       	neg	r22
    5e48:	7f 4f       	sbci	r23, 0xFF	; 255
    5e4a:	8f 4f       	sbci	r24, 0xFF	; 255
    5e4c:	9f 4f       	sbci	r25, 0xFF	; 255
    5e4e:	08 95       	ret

00005e50 <__floatunsisf>:
    5e50:	e8 94       	clt
    5e52:	09 c0       	rjmp	.+18     	; 0x5e66 <__floatsisf+0x12>

00005e54 <__floatsisf>:
    5e54:	97 fb       	bst	r25, 7
    5e56:	3e f4       	brtc	.+14     	; 0x5e66 <__floatsisf+0x12>
    5e58:	90 95       	com	r25
    5e5a:	80 95       	com	r24
    5e5c:	70 95       	com	r23
    5e5e:	61 95       	neg	r22
    5e60:	7f 4f       	sbci	r23, 0xFF	; 255
    5e62:	8f 4f       	sbci	r24, 0xFF	; 255
    5e64:	9f 4f       	sbci	r25, 0xFF	; 255
    5e66:	99 23       	and	r25, r25
    5e68:	a9 f0       	breq	.+42     	; 0x5e94 <__floatsisf+0x40>
    5e6a:	f9 2f       	mov	r31, r25
    5e6c:	96 e9       	ldi	r25, 0x96	; 150
    5e6e:	bb 27       	eor	r27, r27
    5e70:	93 95       	inc	r25
    5e72:	f6 95       	lsr	r31
    5e74:	87 95       	ror	r24
    5e76:	77 95       	ror	r23
    5e78:	67 95       	ror	r22
    5e7a:	b7 95       	ror	r27
    5e7c:	f1 11       	cpse	r31, r1
    5e7e:	f8 cf       	rjmp	.-16     	; 0x5e70 <__floatsisf+0x1c>
    5e80:	fa f4       	brpl	.+62     	; 0x5ec0 <__floatsisf+0x6c>
    5e82:	bb 0f       	add	r27, r27
    5e84:	11 f4       	brne	.+4      	; 0x5e8a <__floatsisf+0x36>
    5e86:	60 ff       	sbrs	r22, 0
    5e88:	1b c0       	rjmp	.+54     	; 0x5ec0 <__floatsisf+0x6c>
    5e8a:	6f 5f       	subi	r22, 0xFF	; 255
    5e8c:	7f 4f       	sbci	r23, 0xFF	; 255
    5e8e:	8f 4f       	sbci	r24, 0xFF	; 255
    5e90:	9f 4f       	sbci	r25, 0xFF	; 255
    5e92:	16 c0       	rjmp	.+44     	; 0x5ec0 <__floatsisf+0x6c>
    5e94:	88 23       	and	r24, r24
    5e96:	11 f0       	breq	.+4      	; 0x5e9c <__floatsisf+0x48>
    5e98:	96 e9       	ldi	r25, 0x96	; 150
    5e9a:	11 c0       	rjmp	.+34     	; 0x5ebe <__floatsisf+0x6a>
    5e9c:	77 23       	and	r23, r23
    5e9e:	21 f0       	breq	.+8      	; 0x5ea8 <__floatsisf+0x54>
    5ea0:	9e e8       	ldi	r25, 0x8E	; 142
    5ea2:	87 2f       	mov	r24, r23
    5ea4:	76 2f       	mov	r23, r22
    5ea6:	05 c0       	rjmp	.+10     	; 0x5eb2 <__floatsisf+0x5e>
    5ea8:	66 23       	and	r22, r22
    5eaa:	71 f0       	breq	.+28     	; 0x5ec8 <__floatsisf+0x74>
    5eac:	96 e8       	ldi	r25, 0x86	; 134
    5eae:	86 2f       	mov	r24, r22
    5eb0:	70 e0       	ldi	r23, 0x00	; 0
    5eb2:	60 e0       	ldi	r22, 0x00	; 0
    5eb4:	2a f0       	brmi	.+10     	; 0x5ec0 <__floatsisf+0x6c>
    5eb6:	9a 95       	dec	r25
    5eb8:	66 0f       	add	r22, r22
    5eba:	77 1f       	adc	r23, r23
    5ebc:	88 1f       	adc	r24, r24
    5ebe:	da f7       	brpl	.-10     	; 0x5eb6 <__floatsisf+0x62>
    5ec0:	88 0f       	add	r24, r24
    5ec2:	96 95       	lsr	r25
    5ec4:	87 95       	ror	r24
    5ec6:	97 f9       	bld	r25, 7
    5ec8:	08 95       	ret

00005eca <__fp_cmp>:
    5eca:	99 0f       	add	r25, r25
    5ecc:	00 08       	sbc	r0, r0
    5ece:	55 0f       	add	r21, r21
    5ed0:	aa 0b       	sbc	r26, r26
    5ed2:	e0 e8       	ldi	r30, 0x80	; 128
    5ed4:	fe ef       	ldi	r31, 0xFE	; 254
    5ed6:	16 16       	cp	r1, r22
    5ed8:	17 06       	cpc	r1, r23
    5eda:	e8 07       	cpc	r30, r24
    5edc:	f9 07       	cpc	r31, r25
    5ede:	c0 f0       	brcs	.+48     	; 0x5f10 <__fp_cmp+0x46>
    5ee0:	12 16       	cp	r1, r18
    5ee2:	13 06       	cpc	r1, r19
    5ee4:	e4 07       	cpc	r30, r20
    5ee6:	f5 07       	cpc	r31, r21
    5ee8:	98 f0       	brcs	.+38     	; 0x5f10 <__fp_cmp+0x46>
    5eea:	62 1b       	sub	r22, r18
    5eec:	73 0b       	sbc	r23, r19
    5eee:	84 0b       	sbc	r24, r20
    5ef0:	95 0b       	sbc	r25, r21
    5ef2:	39 f4       	brne	.+14     	; 0x5f02 <__fp_cmp+0x38>
    5ef4:	0a 26       	eor	r0, r26
    5ef6:	61 f0       	breq	.+24     	; 0x5f10 <__fp_cmp+0x46>
    5ef8:	23 2b       	or	r18, r19
    5efa:	24 2b       	or	r18, r20
    5efc:	25 2b       	or	r18, r21
    5efe:	21 f4       	brne	.+8      	; 0x5f08 <__fp_cmp+0x3e>
    5f00:	08 95       	ret
    5f02:	0a 26       	eor	r0, r26
    5f04:	09 f4       	brne	.+2      	; 0x5f08 <__fp_cmp+0x3e>
    5f06:	a1 40       	sbci	r26, 0x01	; 1
    5f08:	a6 95       	lsr	r26
    5f0a:	8f ef       	ldi	r24, 0xFF	; 255
    5f0c:	81 1d       	adc	r24, r1
    5f0e:	81 1d       	adc	r24, r1
    5f10:	08 95       	ret

00005f12 <__fp_inf>:
    5f12:	97 f9       	bld	r25, 7
    5f14:	9f 67       	ori	r25, 0x7F	; 127
    5f16:	80 e8       	ldi	r24, 0x80	; 128
    5f18:	70 e0       	ldi	r23, 0x00	; 0
    5f1a:	60 e0       	ldi	r22, 0x00	; 0
    5f1c:	08 95       	ret

00005f1e <__fp_nan>:
    5f1e:	9f ef       	ldi	r25, 0xFF	; 255
    5f20:	80 ec       	ldi	r24, 0xC0	; 192
    5f22:	08 95       	ret

00005f24 <__fp_pscA>:
    5f24:	00 24       	eor	r0, r0
    5f26:	0a 94       	dec	r0
    5f28:	16 16       	cp	r1, r22
    5f2a:	17 06       	cpc	r1, r23
    5f2c:	18 06       	cpc	r1, r24
    5f2e:	09 06       	cpc	r0, r25
    5f30:	08 95       	ret

00005f32 <__fp_pscB>:
    5f32:	00 24       	eor	r0, r0
    5f34:	0a 94       	dec	r0
    5f36:	12 16       	cp	r1, r18
    5f38:	13 06       	cpc	r1, r19
    5f3a:	14 06       	cpc	r1, r20
    5f3c:	05 06       	cpc	r0, r21
    5f3e:	08 95       	ret

00005f40 <__fp_round>:
    5f40:	09 2e       	mov	r0, r25
    5f42:	03 94       	inc	r0
    5f44:	00 0c       	add	r0, r0
    5f46:	11 f4       	brne	.+4      	; 0x5f4c <__fp_round+0xc>
    5f48:	88 23       	and	r24, r24
    5f4a:	52 f0       	brmi	.+20     	; 0x5f60 <__fp_round+0x20>
    5f4c:	bb 0f       	add	r27, r27
    5f4e:	40 f4       	brcc	.+16     	; 0x5f60 <__fp_round+0x20>
    5f50:	bf 2b       	or	r27, r31
    5f52:	11 f4       	brne	.+4      	; 0x5f58 <__fp_round+0x18>
    5f54:	60 ff       	sbrs	r22, 0
    5f56:	04 c0       	rjmp	.+8      	; 0x5f60 <__fp_round+0x20>
    5f58:	6f 5f       	subi	r22, 0xFF	; 255
    5f5a:	7f 4f       	sbci	r23, 0xFF	; 255
    5f5c:	8f 4f       	sbci	r24, 0xFF	; 255
    5f5e:	9f 4f       	sbci	r25, 0xFF	; 255
    5f60:	08 95       	ret

00005f62 <__fp_split3>:
    5f62:	57 fd       	sbrc	r21, 7
    5f64:	90 58       	subi	r25, 0x80	; 128
    5f66:	44 0f       	add	r20, r20
    5f68:	55 1f       	adc	r21, r21
    5f6a:	59 f0       	breq	.+22     	; 0x5f82 <__fp_splitA+0x10>
    5f6c:	5f 3f       	cpi	r21, 0xFF	; 255
    5f6e:	71 f0       	breq	.+28     	; 0x5f8c <__fp_splitA+0x1a>
    5f70:	47 95       	ror	r20

00005f72 <__fp_splitA>:
    5f72:	88 0f       	add	r24, r24
    5f74:	97 fb       	bst	r25, 7
    5f76:	99 1f       	adc	r25, r25
    5f78:	61 f0       	breq	.+24     	; 0x5f92 <__fp_splitA+0x20>
    5f7a:	9f 3f       	cpi	r25, 0xFF	; 255
    5f7c:	79 f0       	breq	.+30     	; 0x5f9c <__fp_splitA+0x2a>
    5f7e:	87 95       	ror	r24
    5f80:	08 95       	ret
    5f82:	12 16       	cp	r1, r18
    5f84:	13 06       	cpc	r1, r19
    5f86:	14 06       	cpc	r1, r20
    5f88:	55 1f       	adc	r21, r21
    5f8a:	f2 cf       	rjmp	.-28     	; 0x5f70 <__fp_split3+0xe>
    5f8c:	46 95       	lsr	r20
    5f8e:	f1 df       	rcall	.-30     	; 0x5f72 <__fp_splitA>
    5f90:	08 c0       	rjmp	.+16     	; 0x5fa2 <__fp_splitA+0x30>
    5f92:	16 16       	cp	r1, r22
    5f94:	17 06       	cpc	r1, r23
    5f96:	18 06       	cpc	r1, r24
    5f98:	99 1f       	adc	r25, r25
    5f9a:	f1 cf       	rjmp	.-30     	; 0x5f7e <__fp_splitA+0xc>
    5f9c:	86 95       	lsr	r24
    5f9e:	71 05       	cpc	r23, r1
    5fa0:	61 05       	cpc	r22, r1
    5fa2:	08 94       	sec
    5fa4:	08 95       	ret

00005fa6 <__fp_zero>:
    5fa6:	e8 94       	clt

00005fa8 <__fp_szero>:
    5fa8:	bb 27       	eor	r27, r27
    5faa:	66 27       	eor	r22, r22
    5fac:	77 27       	eor	r23, r23
    5fae:	cb 01       	movw	r24, r22
    5fb0:	97 f9       	bld	r25, 7
    5fb2:	08 95       	ret

00005fb4 <__gesf2>:
    5fb4:	8a df       	rcall	.-236    	; 0x5eca <__fp_cmp>
    5fb6:	08 f4       	brcc	.+2      	; 0x5fba <__gesf2+0x6>
    5fb8:	8f ef       	ldi	r24, 0xFF	; 255
    5fba:	08 95       	ret

00005fbc <__mulsf3>:
    5fbc:	0b d0       	rcall	.+22     	; 0x5fd4 <__mulsf3x>
    5fbe:	c0 cf       	rjmp	.-128    	; 0x5f40 <__fp_round>
    5fc0:	b1 df       	rcall	.-158    	; 0x5f24 <__fp_pscA>
    5fc2:	28 f0       	brcs	.+10     	; 0x5fce <__mulsf3+0x12>
    5fc4:	b6 df       	rcall	.-148    	; 0x5f32 <__fp_pscB>
    5fc6:	18 f0       	brcs	.+6      	; 0x5fce <__mulsf3+0x12>
    5fc8:	95 23       	and	r25, r21
    5fca:	09 f0       	breq	.+2      	; 0x5fce <__mulsf3+0x12>
    5fcc:	a2 cf       	rjmp	.-188    	; 0x5f12 <__fp_inf>
    5fce:	a7 cf       	rjmp	.-178    	; 0x5f1e <__fp_nan>
    5fd0:	11 24       	eor	r1, r1
    5fd2:	ea cf       	rjmp	.-44     	; 0x5fa8 <__fp_szero>

00005fd4 <__mulsf3x>:
    5fd4:	c6 df       	rcall	.-116    	; 0x5f62 <__fp_split3>
    5fd6:	a0 f3       	brcs	.-24     	; 0x5fc0 <__mulsf3+0x4>

00005fd8 <__mulsf3_pse>:
    5fd8:	95 9f       	mul	r25, r21
    5fda:	d1 f3       	breq	.-12     	; 0x5fd0 <__mulsf3+0x14>
    5fdc:	95 0f       	add	r25, r21
    5fde:	50 e0       	ldi	r21, 0x00	; 0
    5fe0:	55 1f       	adc	r21, r21
    5fe2:	62 9f       	mul	r22, r18
    5fe4:	f0 01       	movw	r30, r0
    5fe6:	72 9f       	mul	r23, r18
    5fe8:	bb 27       	eor	r27, r27
    5fea:	f0 0d       	add	r31, r0
    5fec:	b1 1d       	adc	r27, r1
    5fee:	63 9f       	mul	r22, r19
    5ff0:	aa 27       	eor	r26, r26
    5ff2:	f0 0d       	add	r31, r0
    5ff4:	b1 1d       	adc	r27, r1
    5ff6:	aa 1f       	adc	r26, r26
    5ff8:	64 9f       	mul	r22, r20
    5ffa:	66 27       	eor	r22, r22
    5ffc:	b0 0d       	add	r27, r0
    5ffe:	a1 1d       	adc	r26, r1
    6000:	66 1f       	adc	r22, r22
    6002:	82 9f       	mul	r24, r18
    6004:	22 27       	eor	r18, r18
    6006:	b0 0d       	add	r27, r0
    6008:	a1 1d       	adc	r26, r1
    600a:	62 1f       	adc	r22, r18
    600c:	73 9f       	mul	r23, r19
    600e:	b0 0d       	add	r27, r0
    6010:	a1 1d       	adc	r26, r1
    6012:	62 1f       	adc	r22, r18
    6014:	83 9f       	mul	r24, r19
    6016:	a0 0d       	add	r26, r0
    6018:	61 1d       	adc	r22, r1
    601a:	22 1f       	adc	r18, r18
    601c:	74 9f       	mul	r23, r20
    601e:	33 27       	eor	r19, r19
    6020:	a0 0d       	add	r26, r0
    6022:	61 1d       	adc	r22, r1
    6024:	23 1f       	adc	r18, r19
    6026:	84 9f       	mul	r24, r20
    6028:	60 0d       	add	r22, r0
    602a:	21 1d       	adc	r18, r1
    602c:	82 2f       	mov	r24, r18
    602e:	76 2f       	mov	r23, r22
    6030:	6a 2f       	mov	r22, r26
    6032:	11 24       	eor	r1, r1
    6034:	9f 57       	subi	r25, 0x7F	; 127
    6036:	50 40       	sbci	r21, 0x00	; 0
    6038:	8a f0       	brmi	.+34     	; 0x605c <__mulsf3_pse+0x84>
    603a:	e1 f0       	breq	.+56     	; 0x6074 <__mulsf3_pse+0x9c>
    603c:	88 23       	and	r24, r24
    603e:	4a f0       	brmi	.+18     	; 0x6052 <__mulsf3_pse+0x7a>
    6040:	ee 0f       	add	r30, r30
    6042:	ff 1f       	adc	r31, r31
    6044:	bb 1f       	adc	r27, r27
    6046:	66 1f       	adc	r22, r22
    6048:	77 1f       	adc	r23, r23
    604a:	88 1f       	adc	r24, r24
    604c:	91 50       	subi	r25, 0x01	; 1
    604e:	50 40       	sbci	r21, 0x00	; 0
    6050:	a9 f7       	brne	.-22     	; 0x603c <__mulsf3_pse+0x64>
    6052:	9e 3f       	cpi	r25, 0xFE	; 254
    6054:	51 05       	cpc	r21, r1
    6056:	70 f0       	brcs	.+28     	; 0x6074 <__mulsf3_pse+0x9c>
    6058:	5c cf       	rjmp	.-328    	; 0x5f12 <__fp_inf>
    605a:	a6 cf       	rjmp	.-180    	; 0x5fa8 <__fp_szero>
    605c:	5f 3f       	cpi	r21, 0xFF	; 255
    605e:	ec f3       	brlt	.-6      	; 0x605a <__mulsf3_pse+0x82>
    6060:	98 3e       	cpi	r25, 0xE8	; 232
    6062:	dc f3       	brlt	.-10     	; 0x605a <__mulsf3_pse+0x82>
    6064:	86 95       	lsr	r24
    6066:	77 95       	ror	r23
    6068:	67 95       	ror	r22
    606a:	b7 95       	ror	r27
    606c:	f7 95       	ror	r31
    606e:	e7 95       	ror	r30
    6070:	9f 5f       	subi	r25, 0xFF	; 255
    6072:	c1 f7       	brne	.-16     	; 0x6064 <__mulsf3_pse+0x8c>
    6074:	fe 2b       	or	r31, r30
    6076:	88 0f       	add	r24, r24
    6078:	91 1d       	adc	r25, r1
    607a:	96 95       	lsr	r25
    607c:	87 95       	ror	r24
    607e:	97 f9       	bld	r25, 7
    6080:	08 95       	ret

00006082 <__unordsf2>:
    6082:	23 df       	rcall	.-442    	; 0x5eca <__fp_cmp>
    6084:	88 0b       	sbc	r24, r24
    6086:	99 0b       	sbc	r25, r25
    6088:	08 95       	ret

0000608a <__divmodhi4>:
    608a:	97 fb       	bst	r25, 7
    608c:	07 2e       	mov	r0, r23
    608e:	16 f4       	brtc	.+4      	; 0x6094 <__divmodhi4+0xa>
    6090:	00 94       	com	r0
    6092:	06 d0       	rcall	.+12     	; 0x60a0 <__divmodhi4_neg1>
    6094:	77 fd       	sbrc	r23, 7
    6096:	08 d0       	rcall	.+16     	; 0x60a8 <__divmodhi4_neg2>
    6098:	35 d0       	rcall	.+106    	; 0x6104 <__udivmodhi4>
    609a:	07 fc       	sbrc	r0, 7
    609c:	05 d0       	rcall	.+10     	; 0x60a8 <__divmodhi4_neg2>
    609e:	3e f4       	brtc	.+14     	; 0x60ae <__divmodhi4_exit>

000060a0 <__divmodhi4_neg1>:
    60a0:	90 95       	com	r25
    60a2:	81 95       	neg	r24
    60a4:	9f 4f       	sbci	r25, 0xFF	; 255
    60a6:	08 95       	ret

000060a8 <__divmodhi4_neg2>:
    60a8:	70 95       	com	r23
    60aa:	61 95       	neg	r22
    60ac:	7f 4f       	sbci	r23, 0xFF	; 255

000060ae <__divmodhi4_exit>:
    60ae:	08 95       	ret

000060b0 <__udivmodsi4>:
    60b0:	a1 e2       	ldi	r26, 0x21	; 33
    60b2:	1a 2e       	mov	r1, r26
    60b4:	aa 1b       	sub	r26, r26
    60b6:	bb 1b       	sub	r27, r27
    60b8:	fd 01       	movw	r30, r26
    60ba:	0d c0       	rjmp	.+26     	; 0x60d6 <__udivmodsi4_ep>

000060bc <__udivmodsi4_loop>:
    60bc:	aa 1f       	adc	r26, r26
    60be:	bb 1f       	adc	r27, r27
    60c0:	ee 1f       	adc	r30, r30
    60c2:	ff 1f       	adc	r31, r31
    60c4:	a2 17       	cp	r26, r18
    60c6:	b3 07       	cpc	r27, r19
    60c8:	e4 07       	cpc	r30, r20
    60ca:	f5 07       	cpc	r31, r21
    60cc:	20 f0       	brcs	.+8      	; 0x60d6 <__udivmodsi4_ep>
    60ce:	a2 1b       	sub	r26, r18
    60d0:	b3 0b       	sbc	r27, r19
    60d2:	e4 0b       	sbc	r30, r20
    60d4:	f5 0b       	sbc	r31, r21

000060d6 <__udivmodsi4_ep>:
    60d6:	66 1f       	adc	r22, r22
    60d8:	77 1f       	adc	r23, r23
    60da:	88 1f       	adc	r24, r24
    60dc:	99 1f       	adc	r25, r25
    60de:	1a 94       	dec	r1
    60e0:	69 f7       	brne	.-38     	; 0x60bc <__udivmodsi4_loop>
    60e2:	60 95       	com	r22
    60e4:	70 95       	com	r23
    60e6:	80 95       	com	r24
    60e8:	90 95       	com	r25
    60ea:	9b 01       	movw	r18, r22
    60ec:	ac 01       	movw	r20, r24
    60ee:	bd 01       	movw	r22, r26
    60f0:	cf 01       	movw	r24, r30
    60f2:	08 95       	ret

000060f4 <__tablejump2__>:
    60f4:	ee 0f       	add	r30, r30
    60f6:	ff 1f       	adc	r31, r31
    60f8:	88 1f       	adc	r24, r24
    60fa:	8b bf       	out	0x3b, r24	; 59
    60fc:	07 90       	elpm	r0, Z+
    60fe:	f6 91       	elpm	r31, Z
    6100:	e0 2d       	mov	r30, r0
    6102:	19 94       	eijmp

00006104 <__udivmodhi4>:
    6104:	aa 1b       	sub	r26, r26
    6106:	bb 1b       	sub	r27, r27
    6108:	51 e1       	ldi	r21, 0x11	; 17
    610a:	07 c0       	rjmp	.+14     	; 0x611a <__udivmodhi4_ep>

0000610c <__udivmodhi4_loop>:
    610c:	aa 1f       	adc	r26, r26
    610e:	bb 1f       	adc	r27, r27
    6110:	a6 17       	cp	r26, r22
    6112:	b7 07       	cpc	r27, r23
    6114:	10 f0       	brcs	.+4      	; 0x611a <__udivmodhi4_ep>
    6116:	a6 1b       	sub	r26, r22
    6118:	b7 0b       	sbc	r27, r23

0000611a <__udivmodhi4_ep>:
    611a:	88 1f       	adc	r24, r24
    611c:	99 1f       	adc	r25, r25
    611e:	5a 95       	dec	r21
    6120:	a9 f7       	brne	.-22     	; 0x610c <__udivmodhi4_loop>
    6122:	80 95       	com	r24
    6124:	90 95       	com	r25
    6126:	bc 01       	movw	r22, r24
    6128:	cd 01       	movw	r24, r26
    612a:	08 95       	ret

0000612c <dtostrf>:
    612c:	ef 92       	push	r14
    612e:	0f 93       	push	r16
    6130:	1f 93       	push	r17
    6132:	cf 93       	push	r28
    6134:	df 93       	push	r29
    6136:	e8 01       	movw	r28, r16
    6138:	47 fd       	sbrc	r20, 7
    613a:	02 c0       	rjmp	.+4      	; 0x6140 <dtostrf+0x14>
    613c:	34 e0       	ldi	r19, 0x04	; 4
    613e:	01 c0       	rjmp	.+2      	; 0x6142 <dtostrf+0x16>
    6140:	34 e1       	ldi	r19, 0x14	; 20
    6142:	e4 2f       	mov	r30, r20
    6144:	44 0f       	add	r20, r20
    6146:	ff 0b       	sbc	r31, r31
    6148:	f7 ff       	sbrs	r31, 7
    614a:	03 c0       	rjmp	.+6      	; 0x6152 <dtostrf+0x26>
    614c:	f1 95       	neg	r31
    614e:	e1 95       	neg	r30
    6150:	f1 09       	sbc	r31, r1
    6152:	e3 2e       	mov	r14, r19
    6154:	02 2f       	mov	r16, r18
    6156:	2e 2f       	mov	r18, r30
    6158:	ae 01       	movw	r20, r28
    615a:	a6 d2       	rcall	.+1356   	; 0x66a8 <dtoa_prf>
    615c:	ce 01       	movw	r24, r28
    615e:	df 91       	pop	r29
    6160:	cf 91       	pop	r28
    6162:	1f 91       	pop	r17
    6164:	0f 91       	pop	r16
    6166:	ef 90       	pop	r14
    6168:	08 95       	ret

0000616a <malloc>:
    616a:	cf 93       	push	r28
    616c:	df 93       	push	r29
    616e:	82 30       	cpi	r24, 0x02	; 2
    6170:	91 05       	cpc	r25, r1
    6172:	10 f4       	brcc	.+4      	; 0x6178 <malloc+0xe>
    6174:	82 e0       	ldi	r24, 0x02	; 2
    6176:	90 e0       	ldi	r25, 0x00	; 0
    6178:	e0 91 01 0d 	lds	r30, 0x0D01
    617c:	f0 91 02 0d 	lds	r31, 0x0D02
    6180:	20 e0       	ldi	r18, 0x00	; 0
    6182:	30 e0       	ldi	r19, 0x00	; 0
    6184:	c0 e0       	ldi	r28, 0x00	; 0
    6186:	d0 e0       	ldi	r29, 0x00	; 0
    6188:	30 97       	sbiw	r30, 0x00	; 0
    618a:	11 f1       	breq	.+68     	; 0x61d0 <malloc+0x66>
    618c:	40 81       	ld	r20, Z
    618e:	51 81       	ldd	r21, Z+1	; 0x01
    6190:	48 17       	cp	r20, r24
    6192:	59 07       	cpc	r21, r25
    6194:	c0 f0       	brcs	.+48     	; 0x61c6 <malloc+0x5c>
    6196:	48 17       	cp	r20, r24
    6198:	59 07       	cpc	r21, r25
    619a:	61 f4       	brne	.+24     	; 0x61b4 <malloc+0x4a>
    619c:	82 81       	ldd	r24, Z+2	; 0x02
    619e:	93 81       	ldd	r25, Z+3	; 0x03
    61a0:	20 97       	sbiw	r28, 0x00	; 0
    61a2:	19 f0       	breq	.+6      	; 0x61aa <malloc+0x40>
    61a4:	9b 83       	std	Y+3, r25	; 0x03
    61a6:	8a 83       	std	Y+2, r24	; 0x02
    61a8:	2b c0       	rjmp	.+86     	; 0x6200 <malloc+0x96>
    61aa:	90 93 02 0d 	sts	0x0D02, r25
    61ae:	80 93 01 0d 	sts	0x0D01, r24
    61b2:	26 c0       	rjmp	.+76     	; 0x6200 <malloc+0x96>
    61b4:	21 15       	cp	r18, r1
    61b6:	31 05       	cpc	r19, r1
    61b8:	19 f0       	breq	.+6      	; 0x61c0 <malloc+0x56>
    61ba:	42 17       	cp	r20, r18
    61bc:	53 07       	cpc	r21, r19
    61be:	18 f4       	brcc	.+6      	; 0x61c6 <malloc+0x5c>
    61c0:	9a 01       	movw	r18, r20
    61c2:	be 01       	movw	r22, r28
    61c4:	df 01       	movw	r26, r30
    61c6:	ef 01       	movw	r28, r30
    61c8:	02 80       	ldd	r0, Z+2	; 0x02
    61ca:	f3 81       	ldd	r31, Z+3	; 0x03
    61cc:	e0 2d       	mov	r30, r0
    61ce:	dc cf       	rjmp	.-72     	; 0x6188 <malloc+0x1e>
    61d0:	21 15       	cp	r18, r1
    61d2:	31 05       	cpc	r19, r1
    61d4:	09 f1       	breq	.+66     	; 0x6218 <malloc+0xae>
    61d6:	28 1b       	sub	r18, r24
    61d8:	39 0b       	sbc	r19, r25
    61da:	24 30       	cpi	r18, 0x04	; 4
    61dc:	31 05       	cpc	r19, r1
    61de:	90 f4       	brcc	.+36     	; 0x6204 <malloc+0x9a>
    61e0:	12 96       	adiw	r26, 0x02	; 2
    61e2:	8d 91       	ld	r24, X+
    61e4:	9c 91       	ld	r25, X
    61e6:	13 97       	sbiw	r26, 0x03	; 3
    61e8:	61 15       	cp	r22, r1
    61ea:	71 05       	cpc	r23, r1
    61ec:	21 f0       	breq	.+8      	; 0x61f6 <malloc+0x8c>
    61ee:	fb 01       	movw	r30, r22
    61f0:	93 83       	std	Z+3, r25	; 0x03
    61f2:	82 83       	std	Z+2, r24	; 0x02
    61f4:	04 c0       	rjmp	.+8      	; 0x61fe <malloc+0x94>
    61f6:	90 93 02 0d 	sts	0x0D02, r25
    61fa:	80 93 01 0d 	sts	0x0D01, r24
    61fe:	fd 01       	movw	r30, r26
    6200:	32 96       	adiw	r30, 0x02	; 2
    6202:	44 c0       	rjmp	.+136    	; 0x628c <malloc+0x122>
    6204:	fd 01       	movw	r30, r26
    6206:	e2 0f       	add	r30, r18
    6208:	f3 1f       	adc	r31, r19
    620a:	81 93       	st	Z+, r24
    620c:	91 93       	st	Z+, r25
    620e:	22 50       	subi	r18, 0x02	; 2
    6210:	31 09       	sbc	r19, r1
    6212:	2d 93       	st	X+, r18
    6214:	3c 93       	st	X, r19
    6216:	3a c0       	rjmp	.+116    	; 0x628c <malloc+0x122>
    6218:	20 91 ff 0c 	lds	r18, 0x0CFF
    621c:	30 91 00 0d 	lds	r19, 0x0D00
    6220:	23 2b       	or	r18, r19
    6222:	41 f4       	brne	.+16     	; 0x6234 <malloc+0xca>
    6224:	20 91 02 02 	lds	r18, 0x0202
    6228:	30 91 03 02 	lds	r19, 0x0203
    622c:	30 93 00 0d 	sts	0x0D00, r19
    6230:	20 93 ff 0c 	sts	0x0CFF, r18
    6234:	20 91 00 02 	lds	r18, 0x0200
    6238:	30 91 01 02 	lds	r19, 0x0201
    623c:	21 15       	cp	r18, r1
    623e:	31 05       	cpc	r19, r1
    6240:	41 f4       	brne	.+16     	; 0x6252 <malloc+0xe8>
    6242:	2d b7       	in	r18, 0x3d	; 61
    6244:	3e b7       	in	r19, 0x3e	; 62
    6246:	40 91 04 02 	lds	r20, 0x0204
    624a:	50 91 05 02 	lds	r21, 0x0205
    624e:	24 1b       	sub	r18, r20
    6250:	35 0b       	sbc	r19, r21
    6252:	e0 91 ff 0c 	lds	r30, 0x0CFF
    6256:	f0 91 00 0d 	lds	r31, 0x0D00
    625a:	e2 17       	cp	r30, r18
    625c:	f3 07       	cpc	r31, r19
    625e:	a0 f4       	brcc	.+40     	; 0x6288 <malloc+0x11e>
    6260:	2e 1b       	sub	r18, r30
    6262:	3f 0b       	sbc	r19, r31
    6264:	28 17       	cp	r18, r24
    6266:	39 07       	cpc	r19, r25
    6268:	78 f0       	brcs	.+30     	; 0x6288 <malloc+0x11e>
    626a:	ac 01       	movw	r20, r24
    626c:	4e 5f       	subi	r20, 0xFE	; 254
    626e:	5f 4f       	sbci	r21, 0xFF	; 255
    6270:	24 17       	cp	r18, r20
    6272:	35 07       	cpc	r19, r21
    6274:	48 f0       	brcs	.+18     	; 0x6288 <malloc+0x11e>
    6276:	4e 0f       	add	r20, r30
    6278:	5f 1f       	adc	r21, r31
    627a:	50 93 00 0d 	sts	0x0D00, r21
    627e:	40 93 ff 0c 	sts	0x0CFF, r20
    6282:	81 93       	st	Z+, r24
    6284:	91 93       	st	Z+, r25
    6286:	02 c0       	rjmp	.+4      	; 0x628c <malloc+0x122>
    6288:	e0 e0       	ldi	r30, 0x00	; 0
    628a:	f0 e0       	ldi	r31, 0x00	; 0
    628c:	cf 01       	movw	r24, r30
    628e:	df 91       	pop	r29
    6290:	cf 91       	pop	r28
    6292:	08 95       	ret

00006294 <free>:
    6294:	0f 93       	push	r16
    6296:	1f 93       	push	r17
    6298:	cf 93       	push	r28
    629a:	df 93       	push	r29
    629c:	00 97       	sbiw	r24, 0x00	; 0
    629e:	09 f4       	brne	.+2      	; 0x62a2 <free+0xe>
    62a0:	8c c0       	rjmp	.+280    	; 0x63ba <free+0x126>
    62a2:	fc 01       	movw	r30, r24
    62a4:	32 97       	sbiw	r30, 0x02	; 2
    62a6:	13 82       	std	Z+3, r1	; 0x03
    62a8:	12 82       	std	Z+2, r1	; 0x02
    62aa:	00 91 01 0d 	lds	r16, 0x0D01
    62ae:	10 91 02 0d 	lds	r17, 0x0D02
    62b2:	01 15       	cp	r16, r1
    62b4:	11 05       	cpc	r17, r1
    62b6:	81 f4       	brne	.+32     	; 0x62d8 <free+0x44>
    62b8:	20 81       	ld	r18, Z
    62ba:	31 81       	ldd	r19, Z+1	; 0x01
    62bc:	82 0f       	add	r24, r18
    62be:	93 1f       	adc	r25, r19
    62c0:	20 91 ff 0c 	lds	r18, 0x0CFF
    62c4:	30 91 00 0d 	lds	r19, 0x0D00
    62c8:	28 17       	cp	r18, r24
    62ca:	39 07       	cpc	r19, r25
    62cc:	79 f5       	brne	.+94     	; 0x632c <free+0x98>
    62ce:	f0 93 00 0d 	sts	0x0D00, r31
    62d2:	e0 93 ff 0c 	sts	0x0CFF, r30
    62d6:	71 c0       	rjmp	.+226    	; 0x63ba <free+0x126>
    62d8:	d8 01       	movw	r26, r16
    62da:	40 e0       	ldi	r20, 0x00	; 0
    62dc:	50 e0       	ldi	r21, 0x00	; 0
    62de:	ae 17       	cp	r26, r30
    62e0:	bf 07       	cpc	r27, r31
    62e2:	50 f4       	brcc	.+20     	; 0x62f8 <free+0x64>
    62e4:	12 96       	adiw	r26, 0x02	; 2
    62e6:	2d 91       	ld	r18, X+
    62e8:	3c 91       	ld	r19, X
    62ea:	13 97       	sbiw	r26, 0x03	; 3
    62ec:	ad 01       	movw	r20, r26
    62ee:	21 15       	cp	r18, r1
    62f0:	31 05       	cpc	r19, r1
    62f2:	09 f1       	breq	.+66     	; 0x6336 <free+0xa2>
    62f4:	d9 01       	movw	r26, r18
    62f6:	f3 cf       	rjmp	.-26     	; 0x62de <free+0x4a>
    62f8:	9d 01       	movw	r18, r26
    62fa:	da 01       	movw	r26, r20
    62fc:	33 83       	std	Z+3, r19	; 0x03
    62fe:	22 83       	std	Z+2, r18	; 0x02
    6300:	60 81       	ld	r22, Z
    6302:	71 81       	ldd	r23, Z+1	; 0x01
    6304:	86 0f       	add	r24, r22
    6306:	97 1f       	adc	r25, r23
    6308:	82 17       	cp	r24, r18
    630a:	93 07       	cpc	r25, r19
    630c:	69 f4       	brne	.+26     	; 0x6328 <free+0x94>
    630e:	ec 01       	movw	r28, r24
    6310:	28 81       	ld	r18, Y
    6312:	39 81       	ldd	r19, Y+1	; 0x01
    6314:	26 0f       	add	r18, r22
    6316:	37 1f       	adc	r19, r23
    6318:	2e 5f       	subi	r18, 0xFE	; 254
    631a:	3f 4f       	sbci	r19, 0xFF	; 255
    631c:	31 83       	std	Z+1, r19	; 0x01
    631e:	20 83       	st	Z, r18
    6320:	8a 81       	ldd	r24, Y+2	; 0x02
    6322:	9b 81       	ldd	r25, Y+3	; 0x03
    6324:	93 83       	std	Z+3, r25	; 0x03
    6326:	82 83       	std	Z+2, r24	; 0x02
    6328:	45 2b       	or	r20, r21
    632a:	29 f4       	brne	.+10     	; 0x6336 <free+0xa2>
    632c:	f0 93 02 0d 	sts	0x0D02, r31
    6330:	e0 93 01 0d 	sts	0x0D01, r30
    6334:	42 c0       	rjmp	.+132    	; 0x63ba <free+0x126>
    6336:	13 96       	adiw	r26, 0x03	; 3
    6338:	fc 93       	st	X, r31
    633a:	ee 93       	st	-X, r30
    633c:	12 97       	sbiw	r26, 0x02	; 2
    633e:	ed 01       	movw	r28, r26
    6340:	49 91       	ld	r20, Y+
    6342:	59 91       	ld	r21, Y+
    6344:	9e 01       	movw	r18, r28
    6346:	24 0f       	add	r18, r20
    6348:	35 1f       	adc	r19, r21
    634a:	e2 17       	cp	r30, r18
    634c:	f3 07       	cpc	r31, r19
    634e:	71 f4       	brne	.+28     	; 0x636c <free+0xd8>
    6350:	80 81       	ld	r24, Z
    6352:	91 81       	ldd	r25, Z+1	; 0x01
    6354:	84 0f       	add	r24, r20
    6356:	95 1f       	adc	r25, r21
    6358:	02 96       	adiw	r24, 0x02	; 2
    635a:	11 96       	adiw	r26, 0x01	; 1
    635c:	9c 93       	st	X, r25
    635e:	8e 93       	st	-X, r24
    6360:	82 81       	ldd	r24, Z+2	; 0x02
    6362:	93 81       	ldd	r25, Z+3	; 0x03
    6364:	13 96       	adiw	r26, 0x03	; 3
    6366:	9c 93       	st	X, r25
    6368:	8e 93       	st	-X, r24
    636a:	12 97       	sbiw	r26, 0x02	; 2
    636c:	e0 e0       	ldi	r30, 0x00	; 0
    636e:	f0 e0       	ldi	r31, 0x00	; 0
    6370:	d8 01       	movw	r26, r16
    6372:	12 96       	adiw	r26, 0x02	; 2
    6374:	8d 91       	ld	r24, X+
    6376:	9c 91       	ld	r25, X
    6378:	13 97       	sbiw	r26, 0x03	; 3
    637a:	00 97       	sbiw	r24, 0x00	; 0
    637c:	19 f0       	breq	.+6      	; 0x6384 <free+0xf0>
    637e:	f8 01       	movw	r30, r16
    6380:	8c 01       	movw	r16, r24
    6382:	f6 cf       	rjmp	.-20     	; 0x6370 <free+0xdc>
    6384:	8d 91       	ld	r24, X+
    6386:	9c 91       	ld	r25, X
    6388:	98 01       	movw	r18, r16
    638a:	2e 5f       	subi	r18, 0xFE	; 254
    638c:	3f 4f       	sbci	r19, 0xFF	; 255
    638e:	82 0f       	add	r24, r18
    6390:	93 1f       	adc	r25, r19
    6392:	20 91 ff 0c 	lds	r18, 0x0CFF
    6396:	30 91 00 0d 	lds	r19, 0x0D00
    639a:	28 17       	cp	r18, r24
    639c:	39 07       	cpc	r19, r25
    639e:	69 f4       	brne	.+26     	; 0x63ba <free+0x126>
    63a0:	30 97       	sbiw	r30, 0x00	; 0
    63a2:	29 f4       	brne	.+10     	; 0x63ae <free+0x11a>
    63a4:	10 92 02 0d 	sts	0x0D02, r1
    63a8:	10 92 01 0d 	sts	0x0D01, r1
    63ac:	02 c0       	rjmp	.+4      	; 0x63b2 <free+0x11e>
    63ae:	13 82       	std	Z+3, r1	; 0x03
    63b0:	12 82       	std	Z+2, r1	; 0x02
    63b2:	10 93 00 0d 	sts	0x0D00, r17
    63b6:	00 93 ff 0c 	sts	0x0CFF, r16
    63ba:	df 91       	pop	r29
    63bc:	cf 91       	pop	r28
    63be:	1f 91       	pop	r17
    63c0:	0f 91       	pop	r16
    63c2:	08 95       	ret

000063c4 <realloc>:
    63c4:	6f 92       	push	r6
    63c6:	7f 92       	push	r7
    63c8:	8f 92       	push	r8
    63ca:	9f 92       	push	r9
    63cc:	af 92       	push	r10
    63ce:	bf 92       	push	r11
    63d0:	cf 92       	push	r12
    63d2:	df 92       	push	r13
    63d4:	ef 92       	push	r14
    63d6:	ff 92       	push	r15
    63d8:	0f 93       	push	r16
    63da:	1f 93       	push	r17
    63dc:	cf 93       	push	r28
    63de:	df 93       	push	r29
    63e0:	ec 01       	movw	r28, r24
    63e2:	00 97       	sbiw	r24, 0x00	; 0
    63e4:	81 f4       	brne	.+32     	; 0x6406 <realloc+0x42>
    63e6:	cb 01       	movw	r24, r22
    63e8:	df 91       	pop	r29
    63ea:	cf 91       	pop	r28
    63ec:	1f 91       	pop	r17
    63ee:	0f 91       	pop	r16
    63f0:	ff 90       	pop	r15
    63f2:	ef 90       	pop	r14
    63f4:	df 90       	pop	r13
    63f6:	cf 90       	pop	r12
    63f8:	bf 90       	pop	r11
    63fa:	af 90       	pop	r10
    63fc:	9f 90       	pop	r9
    63fe:	8f 90       	pop	r8
    6400:	7f 90       	pop	r7
    6402:	6f 90       	pop	r6
    6404:	b2 ce       	rjmp	.-668    	; 0x616a <malloc>
    6406:	fc 01       	movw	r30, r24
    6408:	e6 0f       	add	r30, r22
    640a:	f7 1f       	adc	r31, r23
    640c:	9c 01       	movw	r18, r24
    640e:	22 50       	subi	r18, 0x02	; 2
    6410:	31 09       	sbc	r19, r1
    6412:	e2 17       	cp	r30, r18
    6414:	f3 07       	cpc	r31, r19
    6416:	08 f4       	brcc	.+2      	; 0x641a <realloc+0x56>
    6418:	a8 c0       	rjmp	.+336    	; 0x656a <realloc+0x1a6>
    641a:	d9 01       	movw	r26, r18
    641c:	0d 91       	ld	r16, X+
    641e:	1c 91       	ld	r17, X
    6420:	11 97       	sbiw	r26, 0x01	; 1
    6422:	06 17       	cp	r16, r22
    6424:	17 07       	cpc	r17, r23
    6426:	a8 f0       	brcs	.+42     	; 0x6452 <realloc+0x8e>
    6428:	05 30       	cpi	r16, 0x05	; 5
    642a:	11 05       	cpc	r17, r1
    642c:	08 f4       	brcc	.+2      	; 0x6430 <realloc+0x6c>
    642e:	9b c0       	rjmp	.+310    	; 0x6566 <realloc+0x1a2>
    6430:	c8 01       	movw	r24, r16
    6432:	04 97       	sbiw	r24, 0x04	; 4
    6434:	86 17       	cp	r24, r22
    6436:	97 07       	cpc	r25, r23
    6438:	08 f4       	brcc	.+2      	; 0x643c <realloc+0x78>
    643a:	95 c0       	rjmp	.+298    	; 0x6566 <realloc+0x1a2>
    643c:	02 50       	subi	r16, 0x02	; 2
    643e:	11 09       	sbc	r17, r1
    6440:	06 1b       	sub	r16, r22
    6442:	17 0b       	sbc	r17, r23
    6444:	01 93       	st	Z+, r16
    6446:	11 93       	st	Z+, r17
    6448:	6d 93       	st	X+, r22
    644a:	7c 93       	st	X, r23
    644c:	cf 01       	movw	r24, r30
    644e:	22 df       	rcall	.-444    	; 0x6294 <free>
    6450:	8a c0       	rjmp	.+276    	; 0x6566 <realloc+0x1a2>
    6452:	5b 01       	movw	r10, r22
    6454:	a0 1a       	sub	r10, r16
    6456:	b1 0a       	sbc	r11, r17
    6458:	4c 01       	movw	r8, r24
    645a:	80 0e       	add	r8, r16
    645c:	91 1e       	adc	r9, r17
    645e:	a0 91 01 0d 	lds	r26, 0x0D01
    6462:	b0 91 02 0d 	lds	r27, 0x0D02
    6466:	40 e0       	ldi	r20, 0x00	; 0
    6468:	50 e0       	ldi	r21, 0x00	; 0
    646a:	e1 2c       	mov	r14, r1
    646c:	f1 2c       	mov	r15, r1
    646e:	10 97       	sbiw	r26, 0x00	; 0
    6470:	09 f4       	brne	.+2      	; 0x6474 <realloc+0xb0>
    6472:	4a c0       	rjmp	.+148    	; 0x6508 <realloc+0x144>
    6474:	a8 15       	cp	r26, r8
    6476:	b9 05       	cpc	r27, r9
    6478:	d1 f5       	brne	.+116    	; 0x64ee <realloc+0x12a>
    647a:	6d 90       	ld	r6, X+
    647c:	7c 90       	ld	r7, X
    647e:	11 97       	sbiw	r26, 0x01	; 1
    6480:	63 01       	movw	r12, r6
    6482:	82 e0       	ldi	r24, 0x02	; 2
    6484:	c8 0e       	add	r12, r24
    6486:	d1 1c       	adc	r13, r1
    6488:	ca 14       	cp	r12, r10
    648a:	db 04       	cpc	r13, r11
    648c:	80 f1       	brcs	.+96     	; 0x64ee <realloc+0x12a>
    648e:	a3 01       	movw	r20, r6
    6490:	4a 19       	sub	r20, r10
    6492:	5b 09       	sbc	r21, r11
    6494:	6a 01       	movw	r12, r20
    6496:	82 e0       	ldi	r24, 0x02	; 2
    6498:	c8 0e       	add	r12, r24
    649a:	d1 1c       	adc	r13, r1
    649c:	12 96       	adiw	r26, 0x02	; 2
    649e:	bc 90       	ld	r11, X
    64a0:	12 97       	sbiw	r26, 0x02	; 2
    64a2:	13 96       	adiw	r26, 0x03	; 3
    64a4:	ac 91       	ld	r26, X
    64a6:	b5 e0       	ldi	r27, 0x05	; 5
    64a8:	cb 16       	cp	r12, r27
    64aa:	d1 04       	cpc	r13, r1
    64ac:	40 f0       	brcs	.+16     	; 0x64be <realloc+0xfa>
    64ae:	b2 82       	std	Z+2, r11	; 0x02
    64b0:	a3 83       	std	Z+3, r26	; 0x03
    64b2:	51 83       	std	Z+1, r21	; 0x01
    64b4:	40 83       	st	Z, r20
    64b6:	d9 01       	movw	r26, r18
    64b8:	6d 93       	st	X+, r22
    64ba:	7c 93       	st	X, r23
    64bc:	0a c0       	rjmp	.+20     	; 0x64d2 <realloc+0x10e>
    64be:	0e 5f       	subi	r16, 0xFE	; 254
    64c0:	1f 4f       	sbci	r17, 0xFF	; 255
    64c2:	c3 01       	movw	r24, r6
    64c4:	80 0f       	add	r24, r16
    64c6:	91 1f       	adc	r25, r17
    64c8:	f9 01       	movw	r30, r18
    64ca:	91 83       	std	Z+1, r25	; 0x01
    64cc:	80 83       	st	Z, r24
    64ce:	eb 2d       	mov	r30, r11
    64d0:	fa 2f       	mov	r31, r26
    64d2:	e1 14       	cp	r14, r1
    64d4:	f1 04       	cpc	r15, r1
    64d6:	31 f0       	breq	.+12     	; 0x64e4 <realloc+0x120>
    64d8:	d7 01       	movw	r26, r14
    64da:	13 96       	adiw	r26, 0x03	; 3
    64dc:	fc 93       	st	X, r31
    64de:	ee 93       	st	-X, r30
    64e0:	12 97       	sbiw	r26, 0x02	; 2
    64e2:	41 c0       	rjmp	.+130    	; 0x6566 <realloc+0x1a2>
    64e4:	f0 93 02 0d 	sts	0x0D02, r31
    64e8:	e0 93 01 0d 	sts	0x0D01, r30
    64ec:	3c c0       	rjmp	.+120    	; 0x6566 <realloc+0x1a2>
    64ee:	8d 91       	ld	r24, X+
    64f0:	9c 91       	ld	r25, X
    64f2:	11 97       	sbiw	r26, 0x01	; 1
    64f4:	48 17       	cp	r20, r24
    64f6:	59 07       	cpc	r21, r25
    64f8:	08 f4       	brcc	.+2      	; 0x64fc <realloc+0x138>
    64fa:	ac 01       	movw	r20, r24
    64fc:	7d 01       	movw	r14, r26
    64fe:	12 96       	adiw	r26, 0x02	; 2
    6500:	0d 90       	ld	r0, X+
    6502:	bc 91       	ld	r27, X
    6504:	a0 2d       	mov	r26, r0
    6506:	b3 cf       	rjmp	.-154    	; 0x646e <realloc+0xaa>
    6508:	80 91 ff 0c 	lds	r24, 0x0CFF
    650c:	90 91 00 0d 	lds	r25, 0x0D00
    6510:	88 15       	cp	r24, r8
    6512:	99 05       	cpc	r25, r9
    6514:	e1 f4       	brne	.+56     	; 0x654e <realloc+0x18a>
    6516:	46 17       	cp	r20, r22
    6518:	57 07       	cpc	r21, r23
    651a:	c8 f4       	brcc	.+50     	; 0x654e <realloc+0x18a>
    651c:	80 91 00 02 	lds	r24, 0x0200
    6520:	90 91 01 02 	lds	r25, 0x0201
    6524:	00 97       	sbiw	r24, 0x00	; 0
    6526:	41 f4       	brne	.+16     	; 0x6538 <realloc+0x174>
    6528:	8d b7       	in	r24, 0x3d	; 61
    652a:	9e b7       	in	r25, 0x3e	; 62
    652c:	40 91 04 02 	lds	r20, 0x0204
    6530:	50 91 05 02 	lds	r21, 0x0205
    6534:	84 1b       	sub	r24, r20
    6536:	95 0b       	sbc	r25, r21
    6538:	e8 17       	cp	r30, r24
    653a:	f9 07       	cpc	r31, r25
    653c:	b0 f4       	brcc	.+44     	; 0x656a <realloc+0x1a6>
    653e:	f0 93 00 0d 	sts	0x0D00, r31
    6542:	e0 93 ff 0c 	sts	0x0CFF, r30
    6546:	f9 01       	movw	r30, r18
    6548:	71 83       	std	Z+1, r23	; 0x01
    654a:	60 83       	st	Z, r22
    654c:	0c c0       	rjmp	.+24     	; 0x6566 <realloc+0x1a2>
    654e:	cb 01       	movw	r24, r22
    6550:	0c de       	rcall	.-1000   	; 0x616a <malloc>
    6552:	7c 01       	movw	r14, r24
    6554:	00 97       	sbiw	r24, 0x00	; 0
    6556:	49 f0       	breq	.+18     	; 0x656a <realloc+0x1a6>
    6558:	a8 01       	movw	r20, r16
    655a:	be 01       	movw	r22, r28
    655c:	1b d0       	rcall	.+54     	; 0x6594 <memcpy>
    655e:	ce 01       	movw	r24, r28
    6560:	99 de       	rcall	.-718    	; 0x6294 <free>
    6562:	c7 01       	movw	r24, r14
    6564:	04 c0       	rjmp	.+8      	; 0x656e <realloc+0x1aa>
    6566:	ce 01       	movw	r24, r28
    6568:	02 c0       	rjmp	.+4      	; 0x656e <realloc+0x1aa>
    656a:	80 e0       	ldi	r24, 0x00	; 0
    656c:	90 e0       	ldi	r25, 0x00	; 0
    656e:	df 91       	pop	r29
    6570:	cf 91       	pop	r28
    6572:	1f 91       	pop	r17
    6574:	0f 91       	pop	r16
    6576:	ff 90       	pop	r15
    6578:	ef 90       	pop	r14
    657a:	df 90       	pop	r13
    657c:	cf 90       	pop	r12
    657e:	bf 90       	pop	r11
    6580:	af 90       	pop	r10
    6582:	9f 90       	pop	r9
    6584:	8f 90       	pop	r8
    6586:	7f 90       	pop	r7
    6588:	6f 90       	pop	r6
    658a:	08 95       	ret

0000658c <abort>:
    658c:	81 e0       	ldi	r24, 0x01	; 1
    658e:	90 e0       	ldi	r25, 0x00	; 0
    6590:	f8 94       	cli
    6592:	ff c2       	rjmp	.+1534   	; 0x6b92 <__do_global_dtors>

00006594 <memcpy>:
    6594:	fb 01       	movw	r30, r22
    6596:	dc 01       	movw	r26, r24
    6598:	02 c0       	rjmp	.+4      	; 0x659e <memcpy+0xa>
    659a:	01 90       	ld	r0, Z+
    659c:	0d 92       	st	X+, r0
    659e:	41 50       	subi	r20, 0x01	; 1
    65a0:	50 40       	sbci	r21, 0x00	; 0
    65a2:	d8 f7       	brcc	.-10     	; 0x659a <memcpy+0x6>
    65a4:	08 95       	ret

000065a6 <strcpy>:
    65a6:	fb 01       	movw	r30, r22
    65a8:	dc 01       	movw	r26, r24
    65aa:	01 90       	ld	r0, Z+
    65ac:	0d 92       	st	X+, r0
    65ae:	00 20       	and	r0, r0
    65b0:	e1 f7       	brne	.-8      	; 0x65aa <strcpy+0x4>
    65b2:	08 95       	ret

000065b4 <itoa>:
    65b4:	45 32       	cpi	r20, 0x25	; 37
    65b6:	51 05       	cpc	r21, r1
    65b8:	18 f4       	brcc	.+6      	; 0x65c0 <itoa+0xc>
    65ba:	42 30       	cpi	r20, 0x02	; 2
    65bc:	08 f0       	brcs	.+2      	; 0x65c0 <itoa+0xc>
    65be:	04 c0       	rjmp	.+8      	; 0x65c8 <__itoa_ncheck>
    65c0:	fb 01       	movw	r30, r22
    65c2:	10 82       	st	Z, r1
    65c4:	cb 01       	movw	r24, r22
    65c6:	08 95       	ret

000065c8 <__itoa_ncheck>:
    65c8:	bb 27       	eor	r27, r27
    65ca:	4a 30       	cpi	r20, 0x0A	; 10
    65cc:	31 f4       	brne	.+12     	; 0x65da <__itoa_ncheck+0x12>
    65ce:	99 23       	and	r25, r25
    65d0:	22 f4       	brpl	.+8      	; 0x65da <__itoa_ncheck+0x12>
    65d2:	bd e2       	ldi	r27, 0x2D	; 45
    65d4:	90 95       	com	r25
    65d6:	81 95       	neg	r24
    65d8:	9f 4f       	sbci	r25, 0xFF	; 255
    65da:	4e c0       	rjmp	.+156    	; 0x6678 <__utoa_common>

000065dc <ltoa>:
    65dc:	25 32       	cpi	r18, 0x25	; 37
    65de:	31 05       	cpc	r19, r1
    65e0:	18 f4       	brcc	.+6      	; 0x65e8 <ltoa+0xc>
    65e2:	22 30       	cpi	r18, 0x02	; 2
    65e4:	08 f0       	brcs	.+2      	; 0x65e8 <ltoa+0xc>
    65e6:	04 c0       	rjmp	.+8      	; 0x65f0 <__ltoa_ncheck>
    65e8:	fa 01       	movw	r30, r20
    65ea:	10 82       	st	Z, r1
    65ec:	ca 01       	movw	r24, r20
    65ee:	08 95       	ret

000065f0 <__ltoa_ncheck>:
    65f0:	bb 27       	eor	r27, r27
    65f2:	2a 30       	cpi	r18, 0x0A	; 10
    65f4:	51 f4       	brne	.+20     	; 0x660a <__ltoa_ncheck+0x1a>
    65f6:	99 23       	and	r25, r25
    65f8:	42 f4       	brpl	.+16     	; 0x660a <__ltoa_ncheck+0x1a>
    65fa:	bd e2       	ldi	r27, 0x2D	; 45
    65fc:	90 95       	com	r25
    65fe:	80 95       	com	r24
    6600:	70 95       	com	r23
    6602:	61 95       	neg	r22
    6604:	7f 4f       	sbci	r23, 0xFF	; 255
    6606:	8f 4f       	sbci	r24, 0xFF	; 255
    6608:	9f 4f       	sbci	r25, 0xFF	; 255
    660a:	0b c0       	rjmp	.+22     	; 0x6622 <__ultoa_common>

0000660c <ultoa>:
    660c:	25 32       	cpi	r18, 0x25	; 37
    660e:	31 05       	cpc	r19, r1
    6610:	18 f4       	brcc	.+6      	; 0x6618 <ultoa+0xc>
    6612:	22 30       	cpi	r18, 0x02	; 2
    6614:	08 f0       	brcs	.+2      	; 0x6618 <ultoa+0xc>
    6616:	04 c0       	rjmp	.+8      	; 0x6620 <__ultoa_ncheck>
    6618:	fa 01       	movw	r30, r20
    661a:	10 82       	st	Z, r1
    661c:	ca 01       	movw	r24, r20
    661e:	08 95       	ret

00006620 <__ultoa_ncheck>:
    6620:	bb 27       	eor	r27, r27

00006622 <__ultoa_common>:
    6622:	fa 01       	movw	r30, r20
    6624:	a6 2f       	mov	r26, r22
    6626:	62 17       	cp	r22, r18
    6628:	71 05       	cpc	r23, r1
    662a:	81 05       	cpc	r24, r1
    662c:	91 05       	cpc	r25, r1
    662e:	33 0b       	sbc	r19, r19
    6630:	30 fb       	bst	r19, 0
    6632:	66 f0       	brts	.+24     	; 0x664c <__ultoa_common+0x2a>
    6634:	aa 27       	eor	r26, r26
    6636:	66 0f       	add	r22, r22
    6638:	77 1f       	adc	r23, r23
    663a:	88 1f       	adc	r24, r24
    663c:	99 1f       	adc	r25, r25
    663e:	aa 1f       	adc	r26, r26
    6640:	a2 17       	cp	r26, r18
    6642:	10 f0       	brcs	.+4      	; 0x6648 <__ultoa_common+0x26>
    6644:	a2 1b       	sub	r26, r18
    6646:	63 95       	inc	r22
    6648:	38 50       	subi	r19, 0x08	; 8
    664a:	a9 f7       	brne	.-22     	; 0x6636 <__ultoa_common+0x14>
    664c:	a0 5d       	subi	r26, 0xD0	; 208
    664e:	aa 33       	cpi	r26, 0x3A	; 58
    6650:	08 f0       	brcs	.+2      	; 0x6654 <__ultoa_common+0x32>
    6652:	a9 5d       	subi	r26, 0xD9	; 217
    6654:	a1 93       	st	Z+, r26
    6656:	36 f7       	brtc	.-52     	; 0x6624 <__ultoa_common+0x2>
    6658:	b1 11       	cpse	r27, r1
    665a:	b1 93       	st	Z+, r27
    665c:	10 82       	st	Z, r1
    665e:	ca 01       	movw	r24, r20
    6660:	88 c2       	rjmp	.+1296   	; 0x6b72 <strrev>

00006662 <utoa>:
    6662:	45 32       	cpi	r20, 0x25	; 37
    6664:	51 05       	cpc	r21, r1
    6666:	18 f4       	brcc	.+6      	; 0x666e <utoa+0xc>
    6668:	42 30       	cpi	r20, 0x02	; 2
    666a:	08 f0       	brcs	.+2      	; 0x666e <utoa+0xc>
    666c:	04 c0       	rjmp	.+8      	; 0x6676 <__utoa_ncheck>
    666e:	fb 01       	movw	r30, r22
    6670:	10 82       	st	Z, r1
    6672:	cb 01       	movw	r24, r22
    6674:	08 95       	ret

00006676 <__utoa_ncheck>:
    6676:	bb 27       	eor	r27, r27

00006678 <__utoa_common>:
    6678:	fb 01       	movw	r30, r22
    667a:	55 27       	eor	r21, r21
    667c:	aa 27       	eor	r26, r26
    667e:	88 0f       	add	r24, r24
    6680:	99 1f       	adc	r25, r25
    6682:	aa 1f       	adc	r26, r26
    6684:	a4 17       	cp	r26, r20
    6686:	10 f0       	brcs	.+4      	; 0x668c <__utoa_common+0x14>
    6688:	a4 1b       	sub	r26, r20
    668a:	83 95       	inc	r24
    668c:	50 51       	subi	r21, 0x10	; 16
    668e:	b9 f7       	brne	.-18     	; 0x667e <__utoa_common+0x6>
    6690:	a0 5d       	subi	r26, 0xD0	; 208
    6692:	aa 33       	cpi	r26, 0x3A	; 58
    6694:	08 f0       	brcs	.+2      	; 0x6698 <__utoa_common+0x20>
    6696:	a9 5d       	subi	r26, 0xD9	; 217
    6698:	a1 93       	st	Z+, r26
    669a:	00 97       	sbiw	r24, 0x00	; 0
    669c:	79 f7       	brne	.-34     	; 0x667c <__utoa_common+0x4>
    669e:	b1 11       	cpse	r27, r1
    66a0:	b1 93       	st	Z+, r27
    66a2:	11 92       	st	Z+, r1
    66a4:	cb 01       	movw	r24, r22
    66a6:	65 c2       	rjmp	.+1226   	; 0x6b72 <strrev>

000066a8 <dtoa_prf>:
    66a8:	4f 92       	push	r4
    66aa:	5f 92       	push	r5
    66ac:	6f 92       	push	r6
    66ae:	7f 92       	push	r7
    66b0:	9f 92       	push	r9
    66b2:	af 92       	push	r10
    66b4:	bf 92       	push	r11
    66b6:	cf 92       	push	r12
    66b8:	df 92       	push	r13
    66ba:	ef 92       	push	r14
    66bc:	ff 92       	push	r15
    66be:	0f 93       	push	r16
    66c0:	1f 93       	push	r17
    66c2:	cf 93       	push	r28
    66c4:	df 93       	push	r29
    66c6:	cd b7       	in	r28, 0x3d	; 61
    66c8:	de b7       	in	r29, 0x3e	; 62
    66ca:	29 97       	sbiw	r28, 0x09	; 9
    66cc:	0f b6       	in	r0, 0x3f	; 63
    66ce:	f8 94       	cli
    66d0:	de bf       	out	0x3e, r29	; 62
    66d2:	0f be       	out	0x3f, r0	; 63
    66d4:	cd bf       	out	0x3d, r28	; 61
    66d6:	6a 01       	movw	r12, r20
    66d8:	12 2f       	mov	r17, r18
    66da:	b0 2e       	mov	r11, r16
    66dc:	2b e3       	ldi	r18, 0x3B	; 59
    66de:	20 17       	cp	r18, r16
    66e0:	20 f0       	brcs	.+8      	; 0x66ea <dtoa_prf+0x42>
    66e2:	ff 24       	eor	r15, r15
    66e4:	f3 94       	inc	r15
    66e6:	f0 0e       	add	r15, r16
    66e8:	02 c0       	rjmp	.+4      	; 0x66ee <dtoa_prf+0x46>
    66ea:	bc e3       	ldi	r27, 0x3C	; 60
    66ec:	fb 2e       	mov	r15, r27
    66ee:	0f 2d       	mov	r16, r15
    66f0:	27 e0       	ldi	r18, 0x07	; 7
    66f2:	ae 01       	movw	r20, r28
    66f4:	4f 5f       	subi	r20, 0xFF	; 255
    66f6:	5f 4f       	sbci	r21, 0xFF	; 255
    66f8:	64 d1       	rcall	.+712    	; 0x69c2 <__ftoa_engine>
    66fa:	ac 01       	movw	r20, r24
    66fc:	89 81       	ldd	r24, Y+1	; 0x01
    66fe:	98 2f       	mov	r25, r24
    6700:	99 70       	andi	r25, 0x09	; 9
    6702:	91 30       	cpi	r25, 0x01	; 1
    6704:	31 f0       	breq	.+12     	; 0x6712 <dtoa_prf+0x6a>
    6706:	e1 fc       	sbrc	r14, 1
    6708:	06 c0       	rjmp	.+12     	; 0x6716 <dtoa_prf+0x6e>
    670a:	e0 fe       	sbrs	r14, 0
    670c:	06 c0       	rjmp	.+12     	; 0x671a <dtoa_prf+0x72>
    670e:	90 e2       	ldi	r25, 0x20	; 32
    6710:	05 c0       	rjmp	.+10     	; 0x671c <dtoa_prf+0x74>
    6712:	9d e2       	ldi	r25, 0x2D	; 45
    6714:	03 c0       	rjmp	.+6      	; 0x671c <dtoa_prf+0x74>
    6716:	9b e2       	ldi	r25, 0x2B	; 43
    6718:	01 c0       	rjmp	.+2      	; 0x671c <dtoa_prf+0x74>
    671a:	90 e0       	ldi	r25, 0x00	; 0
    671c:	ee 2d       	mov	r30, r14
    671e:	e0 71       	andi	r30, 0x10	; 16
    6720:	83 ff       	sbrs	r24, 3
    6722:	3c c0       	rjmp	.+120    	; 0x679c <dtoa_prf+0xf4>
    6724:	91 11       	cpse	r25, r1
    6726:	02 c0       	rjmp	.+4      	; 0x672c <dtoa_prf+0x84>
    6728:	83 e0       	ldi	r24, 0x03	; 3
    672a:	01 c0       	rjmp	.+2      	; 0x672e <dtoa_prf+0x86>
    672c:	84 e0       	ldi	r24, 0x04	; 4
    672e:	81 17       	cp	r24, r17
    6730:	18 f4       	brcc	.+6      	; 0x6738 <dtoa_prf+0x90>
    6732:	21 2f       	mov	r18, r17
    6734:	28 1b       	sub	r18, r24
    6736:	01 c0       	rjmp	.+2      	; 0x673a <dtoa_prf+0x92>
    6738:	20 e0       	ldi	r18, 0x00	; 0
    673a:	e1 11       	cpse	r30, r1
    673c:	0b c0       	rjmp	.+22     	; 0x6754 <dtoa_prf+0xac>
    673e:	f6 01       	movw	r30, r12
    6740:	82 2f       	mov	r24, r18
    6742:	30 e2       	ldi	r19, 0x20	; 32
    6744:	88 23       	and	r24, r24
    6746:	19 f0       	breq	.+6      	; 0x674e <dtoa_prf+0xa6>
    6748:	31 93       	st	Z+, r19
    674a:	81 50       	subi	r24, 0x01	; 1
    674c:	fb cf       	rjmp	.-10     	; 0x6744 <dtoa_prf+0x9c>
    674e:	c2 0e       	add	r12, r18
    6750:	d1 1c       	adc	r13, r1
    6752:	20 e0       	ldi	r18, 0x00	; 0
    6754:	99 23       	and	r25, r25
    6756:	29 f0       	breq	.+10     	; 0x6762 <dtoa_prf+0xba>
    6758:	d6 01       	movw	r26, r12
    675a:	9c 93       	st	X, r25
    675c:	f6 01       	movw	r30, r12
    675e:	31 96       	adiw	r30, 0x01	; 1
    6760:	6f 01       	movw	r12, r30
    6762:	c6 01       	movw	r24, r12
    6764:	03 96       	adiw	r24, 0x03	; 3
    6766:	e2 fe       	sbrs	r14, 2
    6768:	0a c0       	rjmp	.+20     	; 0x677e <dtoa_prf+0xd6>
    676a:	3e e4       	ldi	r19, 0x4E	; 78
    676c:	d6 01       	movw	r26, r12
    676e:	3c 93       	st	X, r19
    6770:	41 e4       	ldi	r20, 0x41	; 65
    6772:	11 96       	adiw	r26, 0x01	; 1
    6774:	4c 93       	st	X, r20
    6776:	11 97       	sbiw	r26, 0x01	; 1
    6778:	12 96       	adiw	r26, 0x02	; 2
    677a:	3c 93       	st	X, r19
    677c:	06 c0       	rjmp	.+12     	; 0x678a <dtoa_prf+0xe2>
    677e:	3e e6       	ldi	r19, 0x6E	; 110
    6780:	f6 01       	movw	r30, r12
    6782:	30 83       	st	Z, r19
    6784:	41 e6       	ldi	r20, 0x61	; 97
    6786:	41 83       	std	Z+1, r20	; 0x01
    6788:	32 83       	std	Z+2, r19	; 0x02
    678a:	fc 01       	movw	r30, r24
    678c:	32 2f       	mov	r19, r18
    678e:	40 e2       	ldi	r20, 0x20	; 32
    6790:	33 23       	and	r19, r19
    6792:	09 f4       	brne	.+2      	; 0x6796 <dtoa_prf+0xee>
    6794:	42 c0       	rjmp	.+132    	; 0x681a <dtoa_prf+0x172>
    6796:	41 93       	st	Z+, r20
    6798:	31 50       	subi	r19, 0x01	; 1
    679a:	fa cf       	rjmp	.-12     	; 0x6790 <dtoa_prf+0xe8>
    679c:	82 ff       	sbrs	r24, 2
    679e:	44 c0       	rjmp	.+136    	; 0x6828 <dtoa_prf+0x180>
    67a0:	91 11       	cpse	r25, r1
    67a2:	02 c0       	rjmp	.+4      	; 0x67a8 <dtoa_prf+0x100>
    67a4:	83 e0       	ldi	r24, 0x03	; 3
    67a6:	01 c0       	rjmp	.+2      	; 0x67aa <dtoa_prf+0x102>
    67a8:	84 e0       	ldi	r24, 0x04	; 4
    67aa:	81 17       	cp	r24, r17
    67ac:	18 f4       	brcc	.+6      	; 0x67b4 <dtoa_prf+0x10c>
    67ae:	21 2f       	mov	r18, r17
    67b0:	28 1b       	sub	r18, r24
    67b2:	01 c0       	rjmp	.+2      	; 0x67b6 <dtoa_prf+0x10e>
    67b4:	20 e0       	ldi	r18, 0x00	; 0
    67b6:	e1 11       	cpse	r30, r1
    67b8:	0b c0       	rjmp	.+22     	; 0x67d0 <dtoa_prf+0x128>
    67ba:	f6 01       	movw	r30, r12
    67bc:	82 2f       	mov	r24, r18
    67be:	30 e2       	ldi	r19, 0x20	; 32
    67c0:	88 23       	and	r24, r24
    67c2:	19 f0       	breq	.+6      	; 0x67ca <dtoa_prf+0x122>
    67c4:	31 93       	st	Z+, r19
    67c6:	81 50       	subi	r24, 0x01	; 1
    67c8:	fb cf       	rjmp	.-10     	; 0x67c0 <dtoa_prf+0x118>
    67ca:	c2 0e       	add	r12, r18
    67cc:	d1 1c       	adc	r13, r1
    67ce:	20 e0       	ldi	r18, 0x00	; 0
    67d0:	99 23       	and	r25, r25
    67d2:	29 f0       	breq	.+10     	; 0x67de <dtoa_prf+0x136>
    67d4:	d6 01       	movw	r26, r12
    67d6:	9c 93       	st	X, r25
    67d8:	f6 01       	movw	r30, r12
    67da:	31 96       	adiw	r30, 0x01	; 1
    67dc:	6f 01       	movw	r12, r30
    67de:	c6 01       	movw	r24, r12
    67e0:	03 96       	adiw	r24, 0x03	; 3
    67e2:	e2 fe       	sbrs	r14, 2
    67e4:	0b c0       	rjmp	.+22     	; 0x67fc <dtoa_prf+0x154>
    67e6:	39 e4       	ldi	r19, 0x49	; 73
    67e8:	d6 01       	movw	r26, r12
    67ea:	3c 93       	st	X, r19
    67ec:	3e e4       	ldi	r19, 0x4E	; 78
    67ee:	11 96       	adiw	r26, 0x01	; 1
    67f0:	3c 93       	st	X, r19
    67f2:	11 97       	sbiw	r26, 0x01	; 1
    67f4:	36 e4       	ldi	r19, 0x46	; 70
    67f6:	12 96       	adiw	r26, 0x02	; 2
    67f8:	3c 93       	st	X, r19
    67fa:	07 c0       	rjmp	.+14     	; 0x680a <dtoa_prf+0x162>
    67fc:	39 e6       	ldi	r19, 0x69	; 105
    67fe:	f6 01       	movw	r30, r12
    6800:	30 83       	st	Z, r19
    6802:	3e e6       	ldi	r19, 0x6E	; 110
    6804:	31 83       	std	Z+1, r19	; 0x01
    6806:	36 e6       	ldi	r19, 0x66	; 102
    6808:	32 83       	std	Z+2, r19	; 0x02
    680a:	fc 01       	movw	r30, r24
    680c:	32 2f       	mov	r19, r18
    680e:	40 e2       	ldi	r20, 0x20	; 32
    6810:	33 23       	and	r19, r19
    6812:	19 f0       	breq	.+6      	; 0x681a <dtoa_prf+0x172>
    6814:	41 93       	st	Z+, r20
    6816:	31 50       	subi	r19, 0x01	; 1
    6818:	fb cf       	rjmp	.-10     	; 0x6810 <dtoa_prf+0x168>
    681a:	fc 01       	movw	r30, r24
    681c:	e2 0f       	add	r30, r18
    681e:	f1 1d       	adc	r31, r1
    6820:	10 82       	st	Z, r1
    6822:	8e ef       	ldi	r24, 0xFE	; 254
    6824:	9f ef       	ldi	r25, 0xFF	; 255
    6826:	b7 c0       	rjmp	.+366    	; 0x6996 <dtoa_prf+0x2ee>
    6828:	f1 e0       	ldi	r31, 0x01	; 1
    682a:	91 11       	cpse	r25, r1
    682c:	01 c0       	rjmp	.+2      	; 0x6830 <dtoa_prf+0x188>
    682e:	f0 e0       	ldi	r31, 0x00	; 0
    6830:	6f 2f       	mov	r22, r31
    6832:	70 e0       	ldi	r23, 0x00	; 0
    6834:	14 16       	cp	r1, r20
    6836:	15 06       	cpc	r1, r21
    6838:	24 f4       	brge	.+8      	; 0x6842 <dtoa_prf+0x19a>
    683a:	9a 01       	movw	r18, r20
    683c:	2f 5f       	subi	r18, 0xFF	; 255
    683e:	3f 4f       	sbci	r19, 0xFF	; 255
    6840:	02 c0       	rjmp	.+4      	; 0x6846 <dtoa_prf+0x19e>
    6842:	21 e0       	ldi	r18, 0x01	; 1
    6844:	30 e0       	ldi	r19, 0x00	; 0
    6846:	26 0f       	add	r18, r22
    6848:	37 1f       	adc	r19, r23
    684a:	bb 20       	and	r11, r11
    684c:	29 f0       	breq	.+10     	; 0x6858 <dtoa_prf+0x1b0>
    684e:	6b 2d       	mov	r22, r11
    6850:	70 e0       	ldi	r23, 0x00	; 0
    6852:	6f 5f       	subi	r22, 0xFF	; 255
    6854:	7f 4f       	sbci	r23, 0xFF	; 255
    6856:	02 c0       	rjmp	.+4      	; 0x685c <dtoa_prf+0x1b4>
    6858:	60 e0       	ldi	r22, 0x00	; 0
    685a:	70 e0       	ldi	r23, 0x00	; 0
    685c:	26 0f       	add	r18, r22
    685e:	37 1f       	adc	r19, r23
    6860:	61 2f       	mov	r22, r17
    6862:	70 e0       	ldi	r23, 0x00	; 0
    6864:	26 17       	cp	r18, r22
    6866:	37 07       	cpc	r19, r23
    6868:	1c f4       	brge	.+6      	; 0x6870 <dtoa_prf+0x1c8>
    686a:	12 1b       	sub	r17, r18
    686c:	21 2f       	mov	r18, r17
    686e:	01 c0       	rjmp	.+2      	; 0x6872 <dtoa_prf+0x1ca>
    6870:	20 e0       	ldi	r18, 0x00	; 0
    6872:	3e 2d       	mov	r19, r14
    6874:	38 71       	andi	r19, 0x18	; 24
    6876:	59 f4       	brne	.+22     	; 0x688e <dtoa_prf+0x1e6>
    6878:	d6 01       	movw	r26, r12
    687a:	32 2f       	mov	r19, r18
    687c:	60 e2       	ldi	r22, 0x20	; 32
    687e:	33 23       	and	r19, r19
    6880:	19 f0       	breq	.+6      	; 0x6888 <dtoa_prf+0x1e0>
    6882:	6d 93       	st	X+, r22
    6884:	31 50       	subi	r19, 0x01	; 1
    6886:	fb cf       	rjmp	.-10     	; 0x687e <dtoa_prf+0x1d6>
    6888:	c2 0e       	add	r12, r18
    688a:	d1 1c       	adc	r13, r1
    688c:	20 e0       	ldi	r18, 0x00	; 0
    688e:	ff 23       	and	r31, r31
    6890:	31 f0       	breq	.+12     	; 0x689e <dtoa_prf+0x1f6>
    6892:	d6 01       	movw	r26, r12
    6894:	9c 93       	st	X, r25
    6896:	b6 01       	movw	r22, r12
    6898:	6f 5f       	subi	r22, 0xFF	; 255
    689a:	7f 4f       	sbci	r23, 0xFF	; 255
    689c:	6b 01       	movw	r12, r22
    689e:	e1 11       	cpse	r30, r1
    68a0:	0b c0       	rjmp	.+22     	; 0x68b8 <dtoa_prf+0x210>
    68a2:	f6 01       	movw	r30, r12
    68a4:	92 2f       	mov	r25, r18
    68a6:	30 e3       	ldi	r19, 0x30	; 48
    68a8:	99 23       	and	r25, r25
    68aa:	19 f0       	breq	.+6      	; 0x68b2 <dtoa_prf+0x20a>
    68ac:	31 93       	st	Z+, r19
    68ae:	91 50       	subi	r25, 0x01	; 1
    68b0:	fb cf       	rjmp	.-10     	; 0x68a8 <dtoa_prf+0x200>
    68b2:	c2 0e       	add	r12, r18
    68b4:	d1 1c       	adc	r13, r1
    68b6:	20 e0       	ldi	r18, 0x00	; 0
    68b8:	9f 2d       	mov	r25, r15
    68ba:	94 0f       	add	r25, r20
    68bc:	3a 81       	ldd	r19, Y+2	; 0x02
    68be:	78 2f       	mov	r23, r24
    68c0:	70 71       	andi	r23, 0x10	; 16
    68c2:	a7 2e       	mov	r10, r23
    68c4:	84 ff       	sbrs	r24, 4
    68c6:	03 c0       	rjmp	.+6      	; 0x68ce <dtoa_prf+0x226>
    68c8:	31 33       	cpi	r19, 0x31	; 49
    68ca:	09 f4       	brne	.+2      	; 0x68ce <dtoa_prf+0x226>
    68cc:	91 50       	subi	r25, 0x01	; 1
    68ce:	19 16       	cp	r1, r25
    68d0:	24 f4       	brge	.+8      	; 0x68da <dtoa_prf+0x232>
    68d2:	99 30       	cpi	r25, 0x09	; 9
    68d4:	18 f0       	brcs	.+6      	; 0x68dc <dtoa_prf+0x234>
    68d6:	98 e0       	ldi	r25, 0x08	; 8
    68d8:	01 c0       	rjmp	.+2      	; 0x68dc <dtoa_prf+0x234>
    68da:	91 e0       	ldi	r25, 0x01	; 1
    68dc:	e4 2f       	mov	r30, r20
    68de:	85 2f       	mov	r24, r21
    68e0:	57 ff       	sbrs	r21, 7
    68e2:	02 c0       	rjmp	.+4      	; 0x68e8 <dtoa_prf+0x240>
    68e4:	e0 e0       	ldi	r30, 0x00	; 0
    68e6:	80 e0       	ldi	r24, 0x00	; 0
    68e8:	6e 2f       	mov	r22, r30
    68ea:	78 2f       	mov	r23, r24
    68ec:	e0 e0       	ldi	r30, 0x00	; 0
    68ee:	f0 e0       	ldi	r31, 0x00	; 0
    68f0:	ae e2       	ldi	r26, 0x2E	; 46
    68f2:	9a 2e       	mov	r9, r26
    68f4:	3a 01       	movw	r6, r20
    68f6:	69 1a       	sub	r6, r25
    68f8:	71 08       	sbc	r7, r1
    68fa:	2a 01       	movw	r4, r20
    68fc:	46 1a       	sub	r4, r22
    68fe:	57 0a       	sbc	r5, r23
    6900:	0b 2d       	mov	r16, r11
    6902:	10 e0       	ldi	r17, 0x00	; 0
    6904:	11 95       	neg	r17
    6906:	01 95       	neg	r16
    6908:	11 09       	sbc	r17, r1
    690a:	6f 3f       	cpi	r22, 0xFF	; 255
    690c:	8f ef       	ldi	r24, 0xFF	; 255
    690e:	78 07       	cpc	r23, r24
    6910:	29 f4       	brne	.+10     	; 0x691c <dtoa_prf+0x274>
    6912:	d6 01       	movw	r26, r12
    6914:	9c 92       	st	X, r9
    6916:	c6 01       	movw	r24, r12
    6918:	01 96       	adiw	r24, 0x01	; 1
    691a:	6c 01       	movw	r12, r24
    691c:	46 17       	cp	r20, r22
    691e:	57 07       	cpc	r21, r23
    6920:	84 f0       	brlt	.+32     	; 0x6942 <dtoa_prf+0x29a>
    6922:	66 16       	cp	r6, r22
    6924:	77 06       	cpc	r7, r23
    6926:	6c f4       	brge	.+26     	; 0x6942 <dtoa_prf+0x29a>
    6928:	7f 01       	movw	r14, r30
    692a:	e4 0c       	add	r14, r4
    692c:	f5 1c       	adc	r15, r5
    692e:	a1 e0       	ldi	r26, 0x01	; 1
    6930:	b0 e0       	ldi	r27, 0x00	; 0
    6932:	ac 0f       	add	r26, r28
    6934:	bd 1f       	adc	r27, r29
    6936:	ea 0e       	add	r14, r26
    6938:	fb 1e       	adc	r15, r27
    693a:	d7 01       	movw	r26, r14
    693c:	11 96       	adiw	r26, 0x01	; 1
    693e:	bc 90       	ld	r11, X
    6940:	02 c0       	rjmp	.+4      	; 0x6946 <dtoa_prf+0x29e>
    6942:	90 e3       	ldi	r25, 0x30	; 48
    6944:	b9 2e       	mov	r11, r25
    6946:	61 50       	subi	r22, 0x01	; 1
    6948:	71 09       	sbc	r23, r1
    694a:	31 96       	adiw	r30, 0x01	; 1
    694c:	c6 01       	movw	r24, r12
    694e:	01 96       	adiw	r24, 0x01	; 1
    6950:	7c 01       	movw	r14, r24
    6952:	60 17       	cp	r22, r16
    6954:	71 07       	cpc	r23, r17
    6956:	24 f0       	brlt	.+8      	; 0x6960 <dtoa_prf+0x2b8>
    6958:	d6 01       	movw	r26, r12
    695a:	bc 92       	st	X, r11
    695c:	6c 01       	movw	r12, r24
    695e:	d5 cf       	rjmp	.-86     	; 0x690a <dtoa_prf+0x262>
    6960:	64 17       	cp	r22, r20
    6962:	75 07       	cpc	r23, r21
    6964:	41 f4       	brne	.+16     	; 0x6976 <dtoa_prf+0x2ce>
    6966:	36 33       	cpi	r19, 0x36	; 54
    6968:	20 f4       	brcc	.+8      	; 0x6972 <dtoa_prf+0x2ca>
    696a:	35 33       	cpi	r19, 0x35	; 53
    696c:	21 f4       	brne	.+8      	; 0x6976 <dtoa_prf+0x2ce>
    696e:	a1 10       	cpse	r10, r1
    6970:	02 c0       	rjmp	.+4      	; 0x6976 <dtoa_prf+0x2ce>
    6972:	81 e3       	ldi	r24, 0x31	; 49
    6974:	b8 2e       	mov	r11, r24
    6976:	f6 01       	movw	r30, r12
    6978:	b0 82       	st	Z, r11
    697a:	f7 01       	movw	r30, r14
    697c:	82 2f       	mov	r24, r18
    697e:	90 e2       	ldi	r25, 0x20	; 32
    6980:	88 23       	and	r24, r24
    6982:	19 f0       	breq	.+6      	; 0x698a <dtoa_prf+0x2e2>
    6984:	91 93       	st	Z+, r25
    6986:	81 50       	subi	r24, 0x01	; 1
    6988:	fb cf       	rjmp	.-10     	; 0x6980 <dtoa_prf+0x2d8>
    698a:	f7 01       	movw	r30, r14
    698c:	e2 0f       	add	r30, r18
    698e:	f1 1d       	adc	r31, r1
    6990:	10 82       	st	Z, r1
    6992:	80 e0       	ldi	r24, 0x00	; 0
    6994:	90 e0       	ldi	r25, 0x00	; 0
    6996:	29 96       	adiw	r28, 0x09	; 9
    6998:	0f b6       	in	r0, 0x3f	; 63
    699a:	f8 94       	cli
    699c:	de bf       	out	0x3e, r29	; 62
    699e:	0f be       	out	0x3f, r0	; 63
    69a0:	cd bf       	out	0x3d, r28	; 61
    69a2:	df 91       	pop	r29
    69a4:	cf 91       	pop	r28
    69a6:	1f 91       	pop	r17
    69a8:	0f 91       	pop	r16
    69aa:	ff 90       	pop	r15
    69ac:	ef 90       	pop	r14
    69ae:	df 90       	pop	r13
    69b0:	cf 90       	pop	r12
    69b2:	bf 90       	pop	r11
    69b4:	af 90       	pop	r10
    69b6:	9f 90       	pop	r9
    69b8:	7f 90       	pop	r7
    69ba:	6f 90       	pop	r6
    69bc:	5f 90       	pop	r5
    69be:	4f 90       	pop	r4
    69c0:	08 95       	ret

000069c2 <__ftoa_engine>:
    69c2:	28 30       	cpi	r18, 0x08	; 8
    69c4:	08 f0       	brcs	.+2      	; 0x69c8 <__ftoa_engine+0x6>
    69c6:	27 e0       	ldi	r18, 0x07	; 7
    69c8:	33 27       	eor	r19, r19
    69ca:	da 01       	movw	r26, r20
    69cc:	99 0f       	add	r25, r25
    69ce:	31 1d       	adc	r19, r1
    69d0:	87 fd       	sbrc	r24, 7
    69d2:	91 60       	ori	r25, 0x01	; 1
    69d4:	00 96       	adiw	r24, 0x00	; 0
    69d6:	61 05       	cpc	r22, r1
    69d8:	71 05       	cpc	r23, r1
    69da:	39 f4       	brne	.+14     	; 0x69ea <__ftoa_engine+0x28>
    69dc:	32 60       	ori	r19, 0x02	; 2
    69de:	2e 5f       	subi	r18, 0xFE	; 254
    69e0:	3d 93       	st	X+, r19
    69e2:	30 e3       	ldi	r19, 0x30	; 48
    69e4:	2a 95       	dec	r18
    69e6:	e1 f7       	brne	.-8      	; 0x69e0 <__ftoa_engine+0x1e>
    69e8:	08 95       	ret
    69ea:	9f 3f       	cpi	r25, 0xFF	; 255
    69ec:	30 f0       	brcs	.+12     	; 0x69fa <__ftoa_engine+0x38>
    69ee:	80 38       	cpi	r24, 0x80	; 128
    69f0:	71 05       	cpc	r23, r1
    69f2:	61 05       	cpc	r22, r1
    69f4:	09 f0       	breq	.+2      	; 0x69f8 <__ftoa_engine+0x36>
    69f6:	3c 5f       	subi	r19, 0xFC	; 252
    69f8:	3c 5f       	subi	r19, 0xFC	; 252
    69fa:	3d 93       	st	X+, r19
    69fc:	91 30       	cpi	r25, 0x01	; 1
    69fe:	08 f0       	brcs	.+2      	; 0x6a02 <__ftoa_engine+0x40>
    6a00:	80 68       	ori	r24, 0x80	; 128
    6a02:	91 1d       	adc	r25, r1
    6a04:	df 93       	push	r29
    6a06:	cf 93       	push	r28
    6a08:	1f 93       	push	r17
    6a0a:	0f 93       	push	r16
    6a0c:	ff 92       	push	r15
    6a0e:	ef 92       	push	r14
    6a10:	19 2f       	mov	r17, r25
    6a12:	98 7f       	andi	r25, 0xF8	; 248
    6a14:	96 95       	lsr	r25
    6a16:	e9 2f       	mov	r30, r25
    6a18:	96 95       	lsr	r25
    6a1a:	96 95       	lsr	r25
    6a1c:	e9 0f       	add	r30, r25
    6a1e:	ff 27       	eor	r31, r31
    6a20:	e5 51       	subi	r30, 0x15	; 21
    6a22:	f9 4f       	sbci	r31, 0xF9	; 249
    6a24:	99 27       	eor	r25, r25
    6a26:	33 27       	eor	r19, r19
    6a28:	ee 24       	eor	r14, r14
    6a2a:	ff 24       	eor	r15, r15
    6a2c:	a7 01       	movw	r20, r14
    6a2e:	e7 01       	movw	r28, r14
    6a30:	05 90       	lpm	r0, Z+
    6a32:	08 94       	sec
    6a34:	07 94       	ror	r0
    6a36:	28 f4       	brcc	.+10     	; 0x6a42 <__ftoa_engine+0x80>
    6a38:	36 0f       	add	r19, r22
    6a3a:	e7 1e       	adc	r14, r23
    6a3c:	f8 1e       	adc	r15, r24
    6a3e:	49 1f       	adc	r20, r25
    6a40:	51 1d       	adc	r21, r1
    6a42:	66 0f       	add	r22, r22
    6a44:	77 1f       	adc	r23, r23
    6a46:	88 1f       	adc	r24, r24
    6a48:	99 1f       	adc	r25, r25
    6a4a:	06 94       	lsr	r0
    6a4c:	a1 f7       	brne	.-24     	; 0x6a36 <__ftoa_engine+0x74>
    6a4e:	05 90       	lpm	r0, Z+
    6a50:	07 94       	ror	r0
    6a52:	28 f4       	brcc	.+10     	; 0x6a5e <__ftoa_engine+0x9c>
    6a54:	e7 0e       	add	r14, r23
    6a56:	f8 1e       	adc	r15, r24
    6a58:	49 1f       	adc	r20, r25
    6a5a:	56 1f       	adc	r21, r22
    6a5c:	c1 1d       	adc	r28, r1
    6a5e:	77 0f       	add	r23, r23
    6a60:	88 1f       	adc	r24, r24
    6a62:	99 1f       	adc	r25, r25
    6a64:	66 1f       	adc	r22, r22
    6a66:	06 94       	lsr	r0
    6a68:	a1 f7       	brne	.-24     	; 0x6a52 <__ftoa_engine+0x90>
    6a6a:	05 90       	lpm	r0, Z+
    6a6c:	07 94       	ror	r0
    6a6e:	28 f4       	brcc	.+10     	; 0x6a7a <__ftoa_engine+0xb8>
    6a70:	f8 0e       	add	r15, r24
    6a72:	49 1f       	adc	r20, r25
    6a74:	56 1f       	adc	r21, r22
    6a76:	c7 1f       	adc	r28, r23
    6a78:	d1 1d       	adc	r29, r1
    6a7a:	88 0f       	add	r24, r24
    6a7c:	99 1f       	adc	r25, r25
    6a7e:	66 1f       	adc	r22, r22
    6a80:	77 1f       	adc	r23, r23
    6a82:	06 94       	lsr	r0
    6a84:	a1 f7       	brne	.-24     	; 0x6a6e <__ftoa_engine+0xac>
    6a86:	05 90       	lpm	r0, Z+
    6a88:	07 94       	ror	r0
    6a8a:	20 f4       	brcc	.+8      	; 0x6a94 <__ftoa_engine+0xd2>
    6a8c:	49 0f       	add	r20, r25
    6a8e:	56 1f       	adc	r21, r22
    6a90:	c7 1f       	adc	r28, r23
    6a92:	d8 1f       	adc	r29, r24
    6a94:	99 0f       	add	r25, r25
    6a96:	66 1f       	adc	r22, r22
    6a98:	77 1f       	adc	r23, r23
    6a9a:	88 1f       	adc	r24, r24
    6a9c:	06 94       	lsr	r0
    6a9e:	a9 f7       	brne	.-22     	; 0x6a8a <__ftoa_engine+0xc8>
    6aa0:	84 91       	lpm	r24, Z
    6aa2:	10 95       	com	r17
    6aa4:	17 70       	andi	r17, 0x07	; 7
    6aa6:	41 f0       	breq	.+16     	; 0x6ab8 <__ftoa_engine+0xf6>
    6aa8:	d6 95       	lsr	r29
    6aaa:	c7 95       	ror	r28
    6aac:	57 95       	ror	r21
    6aae:	47 95       	ror	r20
    6ab0:	f7 94       	ror	r15
    6ab2:	e7 94       	ror	r14
    6ab4:	1a 95       	dec	r17
    6ab6:	c1 f7       	brne	.-16     	; 0x6aa8 <__ftoa_engine+0xe6>
    6ab8:	e1 e9       	ldi	r30, 0x91	; 145
    6aba:	f6 e0       	ldi	r31, 0x06	; 6
    6abc:	68 94       	set
    6abe:	15 90       	lpm	r1, Z+
    6ac0:	15 91       	lpm	r17, Z+
    6ac2:	35 91       	lpm	r19, Z+
    6ac4:	65 91       	lpm	r22, Z+
    6ac6:	95 91       	lpm	r25, Z+
    6ac8:	05 90       	lpm	r0, Z+
    6aca:	7f e2       	ldi	r23, 0x2F	; 47
    6acc:	73 95       	inc	r23
    6ace:	e1 18       	sub	r14, r1
    6ad0:	f1 0a       	sbc	r15, r17
    6ad2:	43 0b       	sbc	r20, r19
    6ad4:	56 0b       	sbc	r21, r22
    6ad6:	c9 0b       	sbc	r28, r25
    6ad8:	d0 09       	sbc	r29, r0
    6ada:	c0 f7       	brcc	.-16     	; 0x6acc <__ftoa_engine+0x10a>
    6adc:	e1 0c       	add	r14, r1
    6ade:	f1 1e       	adc	r15, r17
    6ae0:	43 1f       	adc	r20, r19
    6ae2:	56 1f       	adc	r21, r22
    6ae4:	c9 1f       	adc	r28, r25
    6ae6:	d0 1d       	adc	r29, r0
    6ae8:	7e f4       	brtc	.+30     	; 0x6b08 <__ftoa_engine+0x146>
    6aea:	70 33       	cpi	r23, 0x30	; 48
    6aec:	11 f4       	brne	.+4      	; 0x6af2 <__ftoa_engine+0x130>
    6aee:	8a 95       	dec	r24
    6af0:	e6 cf       	rjmp	.-52     	; 0x6abe <__ftoa_engine+0xfc>
    6af2:	e8 94       	clt
    6af4:	01 50       	subi	r16, 0x01	; 1
    6af6:	30 f0       	brcs	.+12     	; 0x6b04 <__ftoa_engine+0x142>
    6af8:	08 0f       	add	r16, r24
    6afa:	0a f4       	brpl	.+2      	; 0x6afe <__ftoa_engine+0x13c>
    6afc:	00 27       	eor	r16, r16
    6afe:	02 17       	cp	r16, r18
    6b00:	08 f4       	brcc	.+2      	; 0x6b04 <__ftoa_engine+0x142>
    6b02:	20 2f       	mov	r18, r16
    6b04:	23 95       	inc	r18
    6b06:	02 2f       	mov	r16, r18
    6b08:	7a 33       	cpi	r23, 0x3A	; 58
    6b0a:	28 f0       	brcs	.+10     	; 0x6b16 <__ftoa_engine+0x154>
    6b0c:	79 e3       	ldi	r23, 0x39	; 57
    6b0e:	7d 93       	st	X+, r23
    6b10:	2a 95       	dec	r18
    6b12:	e9 f7       	brne	.-6      	; 0x6b0e <__ftoa_engine+0x14c>
    6b14:	10 c0       	rjmp	.+32     	; 0x6b36 <__ftoa_engine+0x174>
    6b16:	7d 93       	st	X+, r23
    6b18:	2a 95       	dec	r18
    6b1a:	89 f6       	brne	.-94     	; 0x6abe <__ftoa_engine+0xfc>
    6b1c:	06 94       	lsr	r0
    6b1e:	97 95       	ror	r25
    6b20:	67 95       	ror	r22
    6b22:	37 95       	ror	r19
    6b24:	17 95       	ror	r17
    6b26:	17 94       	ror	r1
    6b28:	e1 18       	sub	r14, r1
    6b2a:	f1 0a       	sbc	r15, r17
    6b2c:	43 0b       	sbc	r20, r19
    6b2e:	56 0b       	sbc	r21, r22
    6b30:	c9 0b       	sbc	r28, r25
    6b32:	d0 09       	sbc	r29, r0
    6b34:	98 f0       	brcs	.+38     	; 0x6b5c <__ftoa_engine+0x19a>
    6b36:	23 95       	inc	r18
    6b38:	7e 91       	ld	r23, -X
    6b3a:	73 95       	inc	r23
    6b3c:	7a 33       	cpi	r23, 0x3A	; 58
    6b3e:	08 f0       	brcs	.+2      	; 0x6b42 <__ftoa_engine+0x180>
    6b40:	70 e3       	ldi	r23, 0x30	; 48
    6b42:	7c 93       	st	X, r23
    6b44:	20 13       	cpse	r18, r16
    6b46:	b8 f7       	brcc	.-18     	; 0x6b36 <__ftoa_engine+0x174>
    6b48:	7e 91       	ld	r23, -X
    6b4a:	70 61       	ori	r23, 0x10	; 16
    6b4c:	7d 93       	st	X+, r23
    6b4e:	30 f0       	brcs	.+12     	; 0x6b5c <__ftoa_engine+0x19a>
    6b50:	83 95       	inc	r24
    6b52:	71 e3       	ldi	r23, 0x31	; 49
    6b54:	7d 93       	st	X+, r23
    6b56:	70 e3       	ldi	r23, 0x30	; 48
    6b58:	2a 95       	dec	r18
    6b5a:	e1 f7       	brne	.-8      	; 0x6b54 <__ftoa_engine+0x192>
    6b5c:	11 24       	eor	r1, r1
    6b5e:	ef 90       	pop	r14
    6b60:	ff 90       	pop	r15
    6b62:	0f 91       	pop	r16
    6b64:	1f 91       	pop	r17
    6b66:	cf 91       	pop	r28
    6b68:	df 91       	pop	r29
    6b6a:	99 27       	eor	r25, r25
    6b6c:	87 fd       	sbrc	r24, 7
    6b6e:	90 95       	com	r25
    6b70:	08 95       	ret

00006b72 <strrev>:
    6b72:	dc 01       	movw	r26, r24
    6b74:	fc 01       	movw	r30, r24
    6b76:	67 2f       	mov	r22, r23
    6b78:	71 91       	ld	r23, Z+
    6b7a:	77 23       	and	r23, r23
    6b7c:	e1 f7       	brne	.-8      	; 0x6b76 <strrev+0x4>
    6b7e:	32 97       	sbiw	r30, 0x02	; 2
    6b80:	04 c0       	rjmp	.+8      	; 0x6b8a <strrev+0x18>
    6b82:	7c 91       	ld	r23, X
    6b84:	6d 93       	st	X+, r22
    6b86:	70 83       	st	Z, r23
    6b88:	62 91       	ld	r22, -Z
    6b8a:	ae 17       	cp	r26, r30
    6b8c:	bf 07       	cpc	r27, r31
    6b8e:	c8 f3       	brcs	.-14     	; 0x6b82 <strrev+0x10>
    6b90:	08 95       	ret

00006b92 <__do_global_dtors>:
    6b92:	13 e0       	ldi	r17, 0x03	; 3
    6b94:	c2 ed       	ldi	r28, 0xD2	; 210
    6b96:	d3 e0       	ldi	r29, 0x03	; 3
    6b98:	00 e0       	ldi	r16, 0x00	; 0
    6b9a:	05 c0       	rjmp	.+10     	; 0x6ba6 <__do_global_dtors+0x14>
    6b9c:	80 2f       	mov	r24, r16
    6b9e:	fe 01       	movw	r30, r28
    6ba0:	a9 da       	rcall	.-2734   	; 0x60f4 <__tablejump2__>
    6ba2:	21 96       	adiw	r28, 0x01	; 1
    6ba4:	01 1d       	adc	r16, r1
    6ba6:	c6 3d       	cpi	r28, 0xD6	; 214
    6ba8:	d1 07       	cpc	r29, r17
    6baa:	80 e0       	ldi	r24, 0x00	; 0
    6bac:	08 07       	cpc	r16, r24
    6bae:	b1 f7       	brne	.-20     	; 0x6b9c <__do_global_dtors+0xa>
    6bb0:	f8 94       	cli

00006bb2 <__stop_program>:
    6bb2:	ff cf       	rjmp	.-2      	; 0x6bb2 <__stop_program>
