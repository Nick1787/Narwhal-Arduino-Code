
ProjectNarwhal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800200  000031e0  00003274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000031e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000037c  00800308  00800308  0000337c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000337c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000033ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b98  00000000  00000000  000033ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001ecd7  00000000  00000000  00003f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004b54  00000000  00000000  00022c5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006707  00000000  00000000  000277af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000026cc  00000000  00000000  0002deb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003ad3  00000000  00000000  00030584  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d6a1  00000000  00000000  00034057  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a90  00000000  00000000  000416f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e4 c1       	rjmp	.+968    	; 0x3ca <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 5f 12 	jmp	0x24be	; 0x24be <__vector_1>
       8:	0c 94 90 12 	jmp	0x2520	; 0x2520 <__vector_2>
       c:	0c 94 c1 12 	jmp	0x2582	; 0x2582 <__vector_3>
      10:	0c 94 f2 12 	jmp	0x25e4	; 0x25e4 <__vector_4>
      14:	0c 94 23 13 	jmp	0x2646	; 0x2646 <__vector_5>
      18:	0c 94 54 13 	jmp	0x26a8	; 0x26a8 <__vector_6>
      1c:	0c 94 85 13 	jmp	0x270a	; 0x270a <__vector_7>
      20:	0c 94 b6 13 	jmp	0x276c	; 0x276c <__vector_8>
      24:	03 c2       	rjmp	.+1030   	; 0x42c <__bad_interrupt>
      26:	00 00       	nop
      28:	01 c2       	rjmp	.+1026   	; 0x42c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	ff c1       	rjmp	.+1022   	; 0x42c <__bad_interrupt>
      2e:	00 00       	nop
      30:	fd c1       	rjmp	.+1018   	; 0x42c <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 00 12 	jmp	0x2400	; 0x2400 <__vector_13>
      38:	f9 c1       	rjmp	.+1010   	; 0x42c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f7 c1       	rjmp	.+1006   	; 0x42c <__bad_interrupt>
      3e:	00 00       	nop
      40:	f5 c1       	rjmp	.+1002   	; 0x42c <__bad_interrupt>
      42:	00 00       	nop
      44:	f3 c1       	rjmp	.+998    	; 0x42c <__bad_interrupt>
      46:	00 00       	nop
      48:	f1 c1       	rjmp	.+994    	; 0x42c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ef c1       	rjmp	.+990    	; 0x42c <__bad_interrupt>
      4e:	00 00       	nop
      50:	ed c1       	rjmp	.+986    	; 0x42c <__bad_interrupt>
      52:	00 00       	nop
      54:	eb c1       	rjmp	.+982    	; 0x42c <__bad_interrupt>
      56:	00 00       	nop
      58:	e9 c1       	rjmp	.+978    	; 0x42c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 e7 13 	jmp	0x27ce	; 0x27ce <__vector_23>
      60:	e5 c1       	rjmp	.+970    	; 0x42c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 fd 0d 	jmp	0x1bfa	; 0x1bfa <__vector_25>
      68:	0c 94 39 0e 	jmp	0x1c72	; 0x1c72 <__vector_26>
      6c:	df c1       	rjmp	.+958    	; 0x42c <__bad_interrupt>
      6e:	00 00       	nop
      70:	dd c1       	rjmp	.+954    	; 0x42c <__bad_interrupt>
      72:	00 00       	nop
      74:	db c1       	rjmp	.+950    	; 0x42c <__bad_interrupt>
      76:	00 00       	nop
      78:	d9 c1       	rjmp	.+946    	; 0x42c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d7 c1       	rjmp	.+942    	; 0x42c <__bad_interrupt>
      7e:	00 00       	nop
      80:	d5 c1       	rjmp	.+938    	; 0x42c <__bad_interrupt>
      82:	00 00       	nop
      84:	d3 c1       	rjmp	.+934    	; 0x42c <__bad_interrupt>
      86:	00 00       	nop
      88:	d1 c1       	rjmp	.+930    	; 0x42c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	cf c1       	rjmp	.+926    	; 0x42c <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 98 0e 	jmp	0x1d30	; 0x1d30 <__vector_36>
      94:	0c 94 d4 0e 	jmp	0x1da8	; 0x1da8 <__vector_37>
      98:	c9 c1       	rjmp	.+914    	; 0x42c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__vector_39>
      a0:	c5 c1       	rjmp	.+906    	; 0x42c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c3 c1       	rjmp	.+902    	; 0x42c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c1 c1       	rjmp	.+898    	; 0x42c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	bf c1       	rjmp	.+894    	; 0x42c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	bd c1       	rjmp	.+890    	; 0x42c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	bb c1       	rjmp	.+886    	; 0x42c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b9 c1       	rjmp	.+882    	; 0x42c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b7 c1       	rjmp	.+878    	; 0x42c <__bad_interrupt>
      be:	00 00       	nop
      c0:	b5 c1       	rjmp	.+874    	; 0x42c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	b3 c1       	rjmp	.+870    	; 0x42c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	b1 c1       	rjmp	.+866    	; 0x42c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 33 0f 	jmp	0x1e66	; 0x1e66 <__vector_51>
      d0:	0c 94 6f 0f 	jmp	0x1ede	; 0x1ede <__vector_52>
      d4:	ab c1       	rjmp	.+854    	; 0x42c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 ce 0f 	jmp	0x1f9c	; 0x1f9c <__vector_54>
      dc:	0c 94 0a 10 	jmp	0x2014	; 0x2014 <__vector_55>
      e0:	a5 c1       	rjmp	.+842    	; 0x42c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	7b 0b       	sbc	r23, r27
      e6:	7e 0b       	sbc	r23, r30
      e8:	7e 0b       	sbc	r23, r30
      ea:	7e 0b       	sbc	r23, r30
      ec:	7e 0b       	sbc	r23, r30
      ee:	7e 0b       	sbc	r23, r30
      f0:	7e 0b       	sbc	r23, r30
      f2:	7e 0b       	sbc	r23, r30
      f4:	95 0a       	sbc	r9, r21
      f6:	7e 0b       	sbc	r23, r30
      f8:	7e 0b       	sbc	r23, r30
      fa:	7e 0b       	sbc	r23, r30
      fc:	7e 0b       	sbc	r23, r30
      fe:	7e 0b       	sbc	r23, r30
     100:	7e 0b       	sbc	r23, r30
     102:	7e 0b       	sbc	r23, r30
     104:	95 0a       	sbc	r9, r21
     106:	7e 0b       	sbc	r23, r30
     108:	7e 0b       	sbc	r23, r30
     10a:	7e 0b       	sbc	r23, r30
     10c:	7e 0b       	sbc	r23, r30
     10e:	7e 0b       	sbc	r23, r30
     110:	7e 0b       	sbc	r23, r30
     112:	7e 0b       	sbc	r23, r30
     114:	9d 0a       	sbc	r9, r29
     116:	7e 0b       	sbc	r23, r30
     118:	7e 0b       	sbc	r23, r30
     11a:	7e 0b       	sbc	r23, r30
     11c:	7e 0b       	sbc	r23, r30
     11e:	7e 0b       	sbc	r23, r30
     120:	7e 0b       	sbc	r23, r30
     122:	7e 0b       	sbc	r23, r30
     124:	c2 0a       	sbc	r12, r18
     126:	7e 0b       	sbc	r23, r30
     128:	7e 0b       	sbc	r23, r30
     12a:	7e 0b       	sbc	r23, r30
     12c:	7e 0b       	sbc	r23, r30
     12e:	7e 0b       	sbc	r23, r30
     130:	7e 0b       	sbc	r23, r30
     132:	7e 0b       	sbc	r23, r30
     134:	9d 0a       	sbc	r9, r29
     136:	7e 0b       	sbc	r23, r30
     138:	7e 0b       	sbc	r23, r30
     13a:	7e 0b       	sbc	r23, r30
     13c:	7e 0b       	sbc	r23, r30
     13e:	7e 0b       	sbc	r23, r30
     140:	7e 0b       	sbc	r23, r30
     142:	7e 0b       	sbc	r23, r30
     144:	c7 0a       	sbc	r12, r23
     146:	7e 0b       	sbc	r23, r30
     148:	7e 0b       	sbc	r23, r30
     14a:	7e 0b       	sbc	r23, r30
     14c:	7e 0b       	sbc	r23, r30
     14e:	7e 0b       	sbc	r23, r30
     150:	7e 0b       	sbc	r23, r30
     152:	7e 0b       	sbc	r23, r30
     154:	cc 0a       	sbc	r12, r28
     156:	7e 0b       	sbc	r23, r30
     158:	7e 0b       	sbc	r23, r30
     15a:	7e 0b       	sbc	r23, r30
     15c:	7e 0b       	sbc	r23, r30
     15e:	7e 0b       	sbc	r23, r30
     160:	7e 0b       	sbc	r23, r30
     162:	7e 0b       	sbc	r23, r30
     164:	dd 0a       	sbc	r13, r29
     166:	7e 0b       	sbc	r23, r30
     168:	7e 0b       	sbc	r23, r30
     16a:	7e 0b       	sbc	r23, r30
     16c:	7e 0b       	sbc	r23, r30
     16e:	7e 0b       	sbc	r23, r30
     170:	7e 0b       	sbc	r23, r30
     172:	7e 0b       	sbc	r23, r30
     174:	06 0b       	sbc	r16, r22
     176:	7e 0b       	sbc	r23, r30
     178:	7e 0b       	sbc	r23, r30
     17a:	7e 0b       	sbc	r23, r30
     17c:	7e 0b       	sbc	r23, r30
     17e:	7e 0b       	sbc	r23, r30
     180:	7e 0b       	sbc	r23, r30
     182:	7e 0b       	sbc	r23, r30
     184:	d1 0a       	sbc	r13, r17
     186:	7e 0b       	sbc	r23, r30
     188:	7e 0b       	sbc	r23, r30
     18a:	7e 0b       	sbc	r23, r30
     18c:	7e 0b       	sbc	r23, r30
     18e:	7e 0b       	sbc	r23, r30
     190:	7e 0b       	sbc	r23, r30
     192:	7e 0b       	sbc	r23, r30
     194:	eb 0a       	sbc	r14, r27
     196:	7e 0b       	sbc	r23, r30
     198:	7e 0b       	sbc	r23, r30
     19a:	7e 0b       	sbc	r23, r30
     19c:	7e 0b       	sbc	r23, r30
     19e:	7e 0b       	sbc	r23, r30
     1a0:	7e 0b       	sbc	r23, r30
     1a2:	7e 0b       	sbc	r23, r30
     1a4:	08 0b       	sbc	r16, r24
     1a6:	7e 0b       	sbc	r23, r30
     1a8:	7e 0b       	sbc	r23, r30
     1aa:	7e 0b       	sbc	r23, r30
     1ac:	7e 0b       	sbc	r23, r30
     1ae:	7e 0b       	sbc	r23, r30
     1b0:	7e 0b       	sbc	r23, r30
     1b2:	7e 0b       	sbc	r23, r30
     1b4:	08 0b       	sbc	r16, r24
     1b6:	7e 0b       	sbc	r23, r30
     1b8:	7e 0b       	sbc	r23, r30
     1ba:	7e 0b       	sbc	r23, r30
     1bc:	7e 0b       	sbc	r23, r30
     1be:	7e 0b       	sbc	r23, r30
     1c0:	7e 0b       	sbc	r23, r30
     1c2:	7e 0b       	sbc	r23, r30
     1c4:	08 0b       	sbc	r16, r24
     1c6:	7e 0b       	sbc	r23, r30
     1c8:	7e 0b       	sbc	r23, r30
     1ca:	7e 0b       	sbc	r23, r30
     1cc:	7e 0b       	sbc	r23, r30
     1ce:	7e 0b       	sbc	r23, r30
     1d0:	7e 0b       	sbc	r23, r30
     1d2:	7e 0b       	sbc	r23, r30
     1d4:	08 0b       	sbc	r16, r24
     1d6:	7e 0b       	sbc	r23, r30
     1d8:	7e 0b       	sbc	r23, r30
     1da:	7e 0b       	sbc	r23, r30
     1dc:	7e 0b       	sbc	r23, r30
     1de:	7e 0b       	sbc	r23, r30
     1e0:	7e 0b       	sbc	r23, r30
     1e2:	7e 0b       	sbc	r23, r30
     1e4:	11 0b       	sbc	r17, r17
     1e6:	7e 0b       	sbc	r23, r30
     1e8:	7e 0b       	sbc	r23, r30
     1ea:	7e 0b       	sbc	r23, r30
     1ec:	7e 0b       	sbc	r23, r30
     1ee:	7e 0b       	sbc	r23, r30
     1f0:	7e 0b       	sbc	r23, r30
     1f2:	7e 0b       	sbc	r23, r30
     1f4:	42 0b       	sbc	r20, r18
     1f6:	7e 0b       	sbc	r23, r30
     1f8:	7e 0b       	sbc	r23, r30
     1fa:	7e 0b       	sbc	r23, r30
     1fc:	7e 0b       	sbc	r23, r30
     1fe:	7e 0b       	sbc	r23, r30
     200:	7e 0b       	sbc	r23, r30
     202:	7e 0b       	sbc	r23, r30
     204:	11 0b       	sbc	r17, r17
     206:	7e 0b       	sbc	r23, r30
     208:	7e 0b       	sbc	r23, r30
     20a:	7e 0b       	sbc	r23, r30
     20c:	7e 0b       	sbc	r23, r30
     20e:	7e 0b       	sbc	r23, r30
     210:	7e 0b       	sbc	r23, r30
     212:	7e 0b       	sbc	r23, r30
     214:	42 0b       	sbc	r20, r18
     216:	7e 0b       	sbc	r23, r30
     218:	7e 0b       	sbc	r23, r30
     21a:	7e 0b       	sbc	r23, r30
     21c:	7e 0b       	sbc	r23, r30
     21e:	7e 0b       	sbc	r23, r30
     220:	7e 0b       	sbc	r23, r30
     222:	7e 0b       	sbc	r23, r30
     224:	29 0b       	sbc	r18, r25
     226:	7e 0b       	sbc	r23, r30
     228:	7e 0b       	sbc	r23, r30
     22a:	7e 0b       	sbc	r23, r30
     22c:	7e 0b       	sbc	r23, r30
     22e:	7e 0b       	sbc	r23, r30
     230:	7e 0b       	sbc	r23, r30
     232:	7e 0b       	sbc	r23, r30
     234:	46 0b       	sbc	r20, r22
     236:	7e 0b       	sbc	r23, r30
     238:	7e 0b       	sbc	r23, r30
     23a:	7e 0b       	sbc	r23, r30
     23c:	7e 0b       	sbc	r23, r30
     23e:	7e 0b       	sbc	r23, r30
     240:	7e 0b       	sbc	r23, r30
     242:	7e 0b       	sbc	r23, r30
     244:	46 0b       	sbc	r20, r22
     246:	7e 0b       	sbc	r23, r30
     248:	7e 0b       	sbc	r23, r30
     24a:	7e 0b       	sbc	r23, r30
     24c:	7e 0b       	sbc	r23, r30
     24e:	7e 0b       	sbc	r23, r30
     250:	7e 0b       	sbc	r23, r30
     252:	7e 0b       	sbc	r23, r30
     254:	5b 0b       	sbc	r21, r27
     256:	7e 0b       	sbc	r23, r30
     258:	7e 0b       	sbc	r23, r30
     25a:	7e 0b       	sbc	r23, r30
     25c:	7e 0b       	sbc	r23, r30
     25e:	7e 0b       	sbc	r23, r30
     260:	7e 0b       	sbc	r23, r30
     262:	7e 0b       	sbc	r23, r30
     264:	75 0b       	sbc	r23, r21
     266:	7e 0b       	sbc	r23, r30
     268:	7e 0b       	sbc	r23, r30
     26a:	7e 0b       	sbc	r23, r30
     26c:	7e 0b       	sbc	r23, r30
     26e:	7e 0b       	sbc	r23, r30
     270:	7e 0b       	sbc	r23, r30
     272:	7e 0b       	sbc	r23, r30
     274:	75 0b       	sbc	r23, r21
     276:	0b 15       	cp	r16, r11
     278:	0f 15       	cp	r16, r15
     27a:	f9 14       	cp	r15, r9
     27c:	ff 14       	cp	r15, r15
     27e:	05 15       	cp	r16, r5
     280:	54 15       	cp	r21, r4
     282:	13 15       	cp	r17, r3
     284:	19 15       	cp	r17, r9
     286:	1f 15       	cp	r17, r15
     288:	25 15       	cp	r18, r5
     28a:	2b 15       	cp	r18, r11
     28c:	31 15       	cp	r19, r1
     28e:	37 15       	cp	r19, r7
     290:	3d 15       	cp	r19, r13
     292:	54 15       	cp	r21, r4
     294:	43 15       	cp	r20, r3
     296:	49 15       	cp	r20, r9
     298:	4f 15       	cp	r20, r15

0000029a <__trampolines_end>:
     29a:	02 00       	.word	0x0002	; ????

0000029b <digital_pin_to_timer_PGM>:
     29b:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
     2c7:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

000002e1 <digital_pin_to_bit_mask_PGM>:
     2e1:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     2f1:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     301:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     311:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     321:	04 08 10 20 40 80                                   ... @.

00000327 <digital_pin_to_port_PGM>:
     327:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     337:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     347:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     357:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     367:	0b 0b 0b 0b 0b 0b                                   ......

0000036d <port_to_input_PGM>:
     36d:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     37d:	00 01 00 00 03 01 06 01 09 01                       ..........

00000387 <port_to_output_PGM>:
     387:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     397:	02 01 00 00 05 01 08 01 0b 01                       ..........

000003a1 <port_to_mode_PGM>:
     3a1:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     3b1:	01 01 00 00 04 01 07 01 0a 01 00                    ...........

000003bc <__ctors_start>:
     3bc:	17 02       	muls	r17, r23
     3be:	64 0c       	add	r6, r4
     3c0:	6b 0e       	add	r6, r27
     3c2:	06 0f       	add	r16, r22
     3c4:	a1 0f       	add	r26, r17
     3c6:	3c 10       	cpse	r3, r12
     3c8:	a9 10       	cpse	r10, r9

000003ca <__ctors_end>:
     3ca:	11 24       	eor	r1, r1
     3cc:	1f be       	out	0x3f, r1	; 63
     3ce:	cf ef       	ldi	r28, 0xFF	; 255
     3d0:	d1 e2       	ldi	r29, 0x21	; 33
     3d2:	de bf       	out	0x3e, r29	; 62
     3d4:	cd bf       	out	0x3d, r28	; 61
     3d6:	00 e0       	ldi	r16, 0x00	; 0
     3d8:	0c bf       	out	0x3c, r16	; 60

000003da <__do_copy_data>:
     3da:	13 e0       	ldi	r17, 0x03	; 3
     3dc:	a0 e0       	ldi	r26, 0x00	; 0
     3de:	b2 e0       	ldi	r27, 0x02	; 2
     3e0:	e0 ee       	ldi	r30, 0xE0	; 224
     3e2:	f1 e3       	ldi	r31, 0x31	; 49
     3e4:	00 e0       	ldi	r16, 0x00	; 0
     3e6:	0b bf       	out	0x3b, r16	; 59
     3e8:	02 c0       	rjmp	.+4      	; 0x3ee <__do_copy_data+0x14>
     3ea:	07 90       	elpm	r0, Z+
     3ec:	0d 92       	st	X+, r0
     3ee:	a8 30       	cpi	r26, 0x08	; 8
     3f0:	b1 07       	cpc	r27, r17
     3f2:	d9 f7       	brne	.-10     	; 0x3ea <__do_copy_data+0x10>

000003f4 <__do_clear_bss>:
     3f4:	26 e0       	ldi	r18, 0x06	; 6
     3f6:	a8 e0       	ldi	r26, 0x08	; 8
     3f8:	b3 e0       	ldi	r27, 0x03	; 3
     3fa:	01 c0       	rjmp	.+2      	; 0x3fe <.do_clear_bss_start>

000003fc <.do_clear_bss_loop>:
     3fc:	1d 92       	st	X+, r1

000003fe <.do_clear_bss_start>:
     3fe:	a4 38       	cpi	r26, 0x84	; 132
     400:	b2 07       	cpc	r27, r18
     402:	e1 f7       	brne	.-8      	; 0x3fc <.do_clear_bss_loop>

00000404 <__do_global_ctors>:
     404:	11 e0       	ldi	r17, 0x01	; 1
     406:	c5 ee       	ldi	r28, 0xE5	; 229
     408:	d1 e0       	ldi	r29, 0x01	; 1
     40a:	00 e0       	ldi	r16, 0x00	; 0
     40c:	06 c0       	rjmp	.+12     	; 0x41a <__do_global_ctors+0x16>
     40e:	21 97       	sbiw	r28, 0x01	; 1
     410:	01 09       	sbc	r16, r1
     412:	80 2f       	mov	r24, r16
     414:	fe 01       	movw	r30, r28
     416:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <__tablejump2__>
     41a:	ce 3d       	cpi	r28, 0xDE	; 222
     41c:	d1 07       	cpc	r29, r17
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	08 07       	cpc	r16, r24
     422:	a9 f7       	brne	.-22     	; 0x40e <__do_global_ctors+0xa>
     424:	0e 94 b5 10 	call	0x216a	; 0x216a <main>
     428:	0c 94 ee 18 	jmp	0x31dc	; 0x31dc <_exit>

0000042c <__bad_interrupt>:
     42c:	e9 cd       	rjmp	.-1070   	; 0x0 <__vectors>

0000042e <_GLOBAL__sub_I_HLT_LCD>:
/**************************
*	Hot Liquor Tank
**************************/
LiquidCrystal_I2C HLT_LCD(HLT_LCD_I2C_ADDR);
ClickEncoder *HLT_ENC = new ClickEncoder( HLT_ENC_A, HLT_ENC_B, HLT_ENC_SW );
     42e:	cf 92       	push	r12
     430:	df 92       	push	r13
     432:	ef 92       	push	r14
     434:	0f 93       	push	r16
     436:	1f 93       	push	r17
     438:	cf 93       	push	r28
     43a:	df 93       	push	r29
     43c:	00 d0       	rcall	.+0      	; 0x43e <_GLOBAL__sub_I_HLT_LCD+0x10>
     43e:	00 d0       	rcall	.+0      	; 0x440 <_GLOBAL__sub_I_HLT_LCD+0x12>
     440:	cd b7       	in	r28, 0x3d	; 61
     442:	de b7       	in	r29, 0x3e	; 62
#include "../include/ClickEncoder/ClickEncoder.h"

/**************************
*	Hot Liquor Tank
**************************/
LiquidCrystal_I2C HLT_LCD(HLT_LCD_I2C_ADDR);
     444:	67 e2       	ldi	r22, 0x27	; 39
     446:	8c e0       	ldi	r24, 0x0C	; 12
     448:	93 e0       	ldi	r25, 0x03	; 3
     44a:	a6 d6       	rcall	.+3404   	; 0x1198 <_ZN17LiquidCrystal_I2CC1Eh>
ClickEncoder *HLT_ENC = new ClickEncoder( HLT_ENC_A, HLT_ENC_B, HLT_ENC_SW );
     44c:	8e e0       	ldi	r24, 0x0E	; 14
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	0e 94 bf 10 	call	0x217e	; 0x217e <_Znwj>
     454:	6c 01       	movw	r12, r24
     456:	e1 2c       	mov	r14, r1
     458:	01 e0       	ldi	r16, 0x01	; 1
     45a:	28 e1       	ldi	r18, 0x18	; 24
     45c:	47 e1       	ldi	r20, 0x17	; 23
     45e:	66 e1       	ldi	r22, 0x16	; 22
     460:	f4 d4       	rcall	.+2536   	; 0xe4a <_ZN12ClickEncoderC1Ehhhhb>
     462:	d0 92 0b 03 	sts	0x030B, r13
     466:	c0 92 0a 03 	sts	0x030A, r12
     46a:	67 e0       	ldi	r22, 0x07	; 7
     46c:	72 e0       	ldi	r23, 0x02	; 2
     46e:	ce 01       	movw	r24, r28
     470:	01 96       	adiw	r24, 0x01	; 1
     472:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <_ZN6StringC1EPKc>
     476:	80 e1       	ldi	r24, 0x10	; 16
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	0e 94 bf 10 	call	0x217e	; 0x217e <_Znwj>
     47e:	8c 01       	movw	r16, r24
     480:	20 91 0a 03 	lds	r18, 0x030A
     484:	30 91 0b 03 	lds	r19, 0x030B
     488:	4c e0       	ldi	r20, 0x0C	; 12
     48a:	53 e0       	ldi	r21, 0x03	; 3
     48c:	be 01       	movw	r22, r28
     48e:	6f 5f       	subi	r22, 0xFF	; 255
     490:	7f 4f       	sbci	r23, 0xFF	; 255
     492:	0b d4       	rcall	.+2070   	; 0xcaa <_ZN19UI_BurnerControllerC1E6StringP17LiquidCrystal_I2CP12ClickEncoder>
     494:	10 93 09 03 	sts	0x0309, r17
     498:	00 93 08 03 	sts	0x0308, r16
     49c:	ce 01       	movw	r24, r28
     49e:	01 96       	adiw	r24, 0x01	; 1
     4a0:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <_ZN6StringD1Ev>
     4a4:	26 96       	adiw	r28, 0x06	; 6
     4a6:	0f b6       	in	r0, 0x3f	; 63
     4a8:	f8 94       	cli
     4aa:	de bf       	out	0x3e, r29	; 62
     4ac:	0f be       	out	0x3f, r0	; 63
     4ae:	cd bf       	out	0x3d, r28	; 61
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	1f 91       	pop	r17
     4b6:	0f 91       	pop	r16
     4b8:	ef 90       	pop	r14
     4ba:	df 90       	pop	r13
     4bc:	cf 90       	pop	r12
     4be:	08 95       	ret

000004c0 <_ZN10LinkedListI11LCDMenuItemE4sizeEv>:
		//Serial.println("Here3");
		LCD->print(Items.get(i).Name);
	}
	
	Serial.println("Here4");
}
     4c0:	fc 01       	movw	r30, r24
     4c2:	82 81       	ldd	r24, Z+2	; 0x02
     4c4:	93 81       	ldd	r25, Z+3	; 0x03
     4c6:	08 95       	ret

000004c8 <_ZN10LinkedListI11LCDMenuItemE5clearEv>:
     4c8:	0f 93       	push	r16
     4ca:	1f 93       	push	r17
     4cc:	cf 93       	push	r28
     4ce:	df 93       	push	r29
     4d0:	cd b7       	in	r28, 0x3d	; 61
     4d2:	de b7       	in	r29, 0x3e	; 62
     4d4:	27 97       	sbiw	r28, 0x07	; 7
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	f8 94       	cli
     4da:	de bf       	out	0x3e, r29	; 62
     4dc:	0f be       	out	0x3f, r0	; 63
     4de:	cd bf       	out	0x3d, r28	; 61
     4e0:	8c 01       	movw	r16, r24
     4e2:	0d c0       	rjmp	.+26     	; 0x4fe <_ZN10LinkedListI11LCDMenuItemE5clearEv+0x36>
     4e4:	d8 01       	movw	r26, r16
     4e6:	ed 91       	ld	r30, X+
     4e8:	fc 91       	ld	r31, X
     4ea:	06 84       	ldd	r0, Z+14	; 0x0e
     4ec:	f7 85       	ldd	r31, Z+15	; 0x0f
     4ee:	e0 2d       	mov	r30, r0
     4f0:	b8 01       	movw	r22, r16
     4f2:	ce 01       	movw	r24, r28
     4f4:	01 96       	adiw	r24, 0x01	; 1
     4f6:	19 95       	eicall
     4f8:	ce 01       	movw	r24, r28
     4fa:	01 96       	adiw	r24, 0x01	; 1
     4fc:	d3 d3       	rcall	.+1958   	; 0xca4 <_ZN11LCDMenuItemD1Ev>
     4fe:	d8 01       	movw	r26, r16
     500:	ed 91       	ld	r30, X+
     502:	fc 91       	ld	r31, X
     504:	01 90       	ld	r0, Z+
     506:	f0 81       	ld	r31, Z
     508:	e0 2d       	mov	r30, r0
     50a:	c8 01       	movw	r24, r16
     50c:	19 95       	eicall
     50e:	18 16       	cp	r1, r24
     510:	19 06       	cpc	r1, r25
     512:	44 f3       	brlt	.-48     	; 0x4e4 <_ZN10LinkedListI11LCDMenuItemE5clearEv+0x1c>
     514:	27 96       	adiw	r28, 0x07	; 7
     516:	0f b6       	in	r0, 0x3f	; 63
     518:	f8 94       	cli
     51a:	de bf       	out	0x3e, r29	; 62
     51c:	0f be       	out	0x3f, r0	; 63
     51e:	cd bf       	out	0x3d, r28	; 61
     520:	df 91       	pop	r29
     522:	cf 91       	pop	r28
     524:	1f 91       	pop	r17
     526:	0f 91       	pop	r16
     528:	08 95       	ret

0000052a <_ZN10LinkedListI11LCDMenuItemE7unshiftES0_>:
     52a:	cf 92       	push	r12
     52c:	df 92       	push	r13
     52e:	ef 92       	push	r14
     530:	ff 92       	push	r15
     532:	0f 93       	push	r16
     534:	1f 93       	push	r17
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
     53a:	cd b7       	in	r28, 0x3d	; 61
     53c:	de b7       	in	r29, 0x3e	; 62
     53e:	27 97       	sbiw	r28, 0x07	; 7
     540:	0f b6       	in	r0, 0x3f	; 63
     542:	f8 94       	cli
     544:	de bf       	out	0x3e, r29	; 62
     546:	0f be       	out	0x3f, r0	; 63
     548:	cd bf       	out	0x3d, r28	; 61
     54a:	8c 01       	movw	r16, r24
     54c:	6b 01       	movw	r12, r22
     54e:	dc 01       	movw	r26, r24
     550:	12 96       	adiw	r26, 0x02	; 2
     552:	8d 91       	ld	r24, X+
     554:	9c 91       	ld	r25, X
     556:	13 97       	sbiw	r26, 0x03	; 3
     558:	89 2b       	or	r24, r25
     55a:	b1 f4       	brne	.+44     	; 0x588 <_ZN10LinkedListI11LCDMenuItemE7unshiftES0_+0x5e>
     55c:	ed 91       	ld	r30, X+
     55e:	fc 91       	ld	r31, X
     560:	e4 80       	ldd	r14, Z+4	; 0x04
     562:	f5 80       	ldd	r15, Z+5	; 0x05
     564:	ce 01       	movw	r24, r28
     566:	01 96       	adiw	r24, 0x01	; 1
     568:	0e 94 81 16 	call	0x2d02	; 0x2d02 <_ZN6StringC1ERKS_>
     56c:	f6 01       	movw	r30, r12
     56e:	86 81       	ldd	r24, Z+6	; 0x06
     570:	8f 83       	std	Y+7, r24	; 0x07
     572:	be 01       	movw	r22, r28
     574:	6f 5f       	subi	r22, 0xFF	; 255
     576:	7f 4f       	sbci	r23, 0xFF	; 255
     578:	c8 01       	movw	r24, r16
     57a:	f7 01       	movw	r30, r14
     57c:	19 95       	eicall
     57e:	18 2f       	mov	r17, r24
     580:	ce 01       	movw	r24, r28
     582:	01 96       	adiw	r24, 0x01	; 1
     584:	8f d3       	rcall	.+1822   	; 0xca4 <_ZN11LCDMenuItemD1Ev>
     586:	27 c0       	rjmp	.+78     	; 0x5d6 <_ZN10LinkedListI11LCDMenuItemE7unshiftES0_+0xac>
     588:	89 e0       	ldi	r24, 0x09	; 9
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	0e 94 bf 10 	call	0x217e	; 0x217e <_Znwj>
     590:	7c 01       	movw	r14, r24
     592:	89 e0       	ldi	r24, 0x09	; 9
     594:	d7 01       	movw	r26, r14
     596:	1d 92       	st	X+, r1
     598:	8a 95       	dec	r24
     59a:	e9 f7       	brne	.-6      	; 0x596 <_ZN10LinkedListI11LCDMenuItemE7unshiftES0_+0x6c>
     59c:	c7 01       	movw	r24, r14
     59e:	5c d3       	rcall	.+1720   	; 0xc58 <_ZN11LCDMenuItemC1Ev>
     5a0:	f8 01       	movw	r30, r16
     5a2:	84 81       	ldd	r24, Z+4	; 0x04
     5a4:	95 81       	ldd	r25, Z+5	; 0x05
     5a6:	d7 01       	movw	r26, r14
     5a8:	18 96       	adiw	r26, 0x08	; 8
     5aa:	9c 93       	st	X, r25
     5ac:	8e 93       	st	-X, r24
     5ae:	17 97       	sbiw	r26, 0x07	; 7
     5b0:	b6 01       	movw	r22, r12
     5b2:	c7 01       	movw	r24, r14
     5b4:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <_ZN6StringaSERKS_>
     5b8:	f6 01       	movw	r30, r12
     5ba:	86 81       	ldd	r24, Z+6	; 0x06
     5bc:	d7 01       	movw	r26, r14
     5be:	16 96       	adiw	r26, 0x06	; 6
     5c0:	8c 93       	st	X, r24
     5c2:	f8 01       	movw	r30, r16
     5c4:	f5 82       	std	Z+5, r15	; 0x05
     5c6:	e4 82       	std	Z+4, r14	; 0x04
     5c8:	82 81       	ldd	r24, Z+2	; 0x02
     5ca:	93 81       	ldd	r25, Z+3	; 0x03
     5cc:	01 96       	adiw	r24, 0x01	; 1
     5ce:	93 83       	std	Z+3, r25	; 0x03
     5d0:	82 83       	std	Z+2, r24	; 0x02
     5d2:	14 86       	std	Z+12, r1	; 0x0c
     5d4:	11 e0       	ldi	r17, 0x01	; 1
     5d6:	81 2f       	mov	r24, r17
     5d8:	27 96       	adiw	r28, 0x07	; 7
     5da:	0f b6       	in	r0, 0x3f	; 63
     5dc:	f8 94       	cli
     5de:	de bf       	out	0x3e, r29	; 62
     5e0:	0f be       	out	0x3f, r0	; 63
     5e2:	cd bf       	out	0x3d, r28	; 61
     5e4:	df 91       	pop	r29
     5e6:	cf 91       	pop	r28
     5e8:	1f 91       	pop	r17
     5ea:	0f 91       	pop	r16
     5ec:	ff 90       	pop	r15
     5ee:	ef 90       	pop	r14
     5f0:	df 90       	pop	r13
     5f2:	cf 90       	pop	r12
     5f4:	08 95       	ret

000005f6 <_ZN10LinkedListI11LCDMenuItemE3addES0_>:
     5f6:	ef 92       	push	r14
     5f8:	ff 92       	push	r15
     5fa:	0f 93       	push	r16
     5fc:	1f 93       	push	r17
     5fe:	cf 93       	push	r28
     600:	df 93       	push	r29
     602:	8c 01       	movw	r16, r24
     604:	7b 01       	movw	r14, r22
     606:	89 e0       	ldi	r24, 0x09	; 9
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	0e 94 bf 10 	call	0x217e	; 0x217e <_Znwj>
     60e:	ec 01       	movw	r28, r24
     610:	89 e0       	ldi	r24, 0x09	; 9
     612:	de 01       	movw	r26, r28
     614:	1d 92       	st	X+, r1
     616:	8a 95       	dec	r24
     618:	e9 f7       	brne	.-6      	; 0x614 <_ZN10LinkedListI11LCDMenuItemE3addES0_+0x1e>
     61a:	ce 01       	movw	r24, r28
     61c:	1d d3       	rcall	.+1594   	; 0xc58 <_ZN11LCDMenuItemC1Ev>
     61e:	b7 01       	movw	r22, r14
     620:	ce 01       	movw	r24, r28
     622:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <_ZN6StringaSERKS_>
     626:	f7 01       	movw	r30, r14
     628:	86 81       	ldd	r24, Z+6	; 0x06
     62a:	8e 83       	std	Y+6, r24	; 0x06
     62c:	18 86       	std	Y+8, r1	; 0x08
     62e:	1f 82       	std	Y+7, r1	; 0x07
     630:	d8 01       	movw	r26, r16
     632:	14 96       	adiw	r26, 0x04	; 4
     634:	8d 91       	ld	r24, X+
     636:	9c 91       	ld	r25, X
     638:	15 97       	sbiw	r26, 0x05	; 5
     63a:	89 2b       	or	r24, r25
     63c:	59 f0       	breq	.+22     	; 0x654 <_ZN10LinkedListI11LCDMenuItemE3addES0_+0x5e>
     63e:	16 96       	adiw	r26, 0x06	; 6
     640:	ed 91       	ld	r30, X+
     642:	fc 91       	ld	r31, X
     644:	17 97       	sbiw	r26, 0x07	; 7
     646:	d0 87       	std	Z+8, r29	; 0x08
     648:	c7 83       	std	Z+7, r28	; 0x07
     64a:	17 96       	adiw	r26, 0x07	; 7
     64c:	dc 93       	st	X, r29
     64e:	ce 93       	st	-X, r28
     650:	16 97       	sbiw	r26, 0x06	; 6
     652:	05 c0       	rjmp	.+10     	; 0x65e <_ZN10LinkedListI11LCDMenuItemE3addES0_+0x68>
     654:	f8 01       	movw	r30, r16
     656:	d5 83       	std	Z+5, r29	; 0x05
     658:	c4 83       	std	Z+4, r28	; 0x04
     65a:	d7 83       	std	Z+7, r29	; 0x07
     65c:	c6 83       	std	Z+6, r28	; 0x06
     65e:	d8 01       	movw	r26, r16
     660:	12 96       	adiw	r26, 0x02	; 2
     662:	8d 91       	ld	r24, X+
     664:	9c 91       	ld	r25, X
     666:	13 97       	sbiw	r26, 0x03	; 3
     668:	01 96       	adiw	r24, 0x01	; 1
     66a:	13 96       	adiw	r26, 0x03	; 3
     66c:	9c 93       	st	X, r25
     66e:	8e 93       	st	-X, r24
     670:	12 97       	sbiw	r26, 0x02	; 2
     672:	1c 96       	adiw	r26, 0x0c	; 12
     674:	1c 92       	st	X, r1
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	df 91       	pop	r29
     67a:	cf 91       	pop	r28
     67c:	1f 91       	pop	r17
     67e:	0f 91       	pop	r16
     680:	ff 90       	pop	r15
     682:	ef 90       	pop	r14
     684:	08 95       	ret

00000686 <_ZN10LinkedListI11LCDMenuItemE5shiftEv>:
     686:	af 92       	push	r10
     688:	bf 92       	push	r11
     68a:	cf 92       	push	r12
     68c:	df 92       	push	r13
     68e:	ef 92       	push	r14
     690:	ff 92       	push	r15
     692:	0f 93       	push	r16
     694:	1f 93       	push	r17
     696:	cf 93       	push	r28
     698:	df 93       	push	r29
     69a:	cd b7       	in	r28, 0x3d	; 61
     69c:	de b7       	in	r29, 0x3e	; 62
     69e:	27 97       	sbiw	r28, 0x07	; 7
     6a0:	0f b6       	in	r0, 0x3f	; 63
     6a2:	f8 94       	cli
     6a4:	de bf       	out	0x3e, r29	; 62
     6a6:	0f be       	out	0x3f, r0	; 63
     6a8:	cd bf       	out	0x3d, r28	; 61
     6aa:	7c 01       	movw	r14, r24
     6ac:	8b 01       	movw	r16, r22
     6ae:	db 01       	movw	r26, r22
     6b0:	12 96       	adiw	r26, 0x02	; 2
     6b2:	8d 91       	ld	r24, X+
     6b4:	9c 91       	ld	r25, X
     6b6:	13 97       	sbiw	r26, 0x03	; 3
     6b8:	18 16       	cp	r1, r24
     6ba:	19 06       	cpc	r1, r25
     6bc:	1c f0       	brlt	.+6      	; 0x6c4 <_ZN10LinkedListI11LCDMenuItemE5shiftEv+0x3e>
     6be:	c7 01       	movw	r24, r14
     6c0:	cb d2       	rcall	.+1430   	; 0xc58 <_ZN11LCDMenuItemC1Ev>
     6c2:	3e c0       	rjmp	.+124    	; 0x740 <_ZN10LinkedListI11LCDMenuItemE5shiftEv+0xba>
     6c4:	02 97       	sbiw	r24, 0x02	; 2
     6c6:	a4 f1       	brlt	.+104    	; 0x730 <_ZN10LinkedListI11LCDMenuItemE5shiftEv+0xaa>
     6c8:	fb 01       	movw	r30, r22
     6ca:	c4 80       	ldd	r12, Z+4	; 0x04
     6cc:	d5 80       	ldd	r13, Z+5	; 0x05
     6ce:	d6 01       	movw	r26, r12
     6d0:	17 96       	adiw	r26, 0x07	; 7
     6d2:	ad 90       	ld	r10, X+
     6d4:	bc 90       	ld	r11, X
     6d6:	18 97       	sbiw	r26, 0x08	; 8
     6d8:	b6 01       	movw	r22, r12
     6da:	ce 01       	movw	r24, r28
     6dc:	01 96       	adiw	r24, 0x01	; 1
     6de:	0e 94 81 16 	call	0x2d02	; 0x2d02 <_ZN6StringC1ERKS_>
     6e2:	f6 01       	movw	r30, r12
     6e4:	86 81       	ldd	r24, Z+6	; 0x06
     6e6:	8f 83       	std	Y+7, r24	; 0x07
     6e8:	d8 01       	movw	r26, r16
     6ea:	14 96       	adiw	r26, 0x04	; 4
     6ec:	cd 90       	ld	r12, X+
     6ee:	dc 90       	ld	r13, X
     6f0:	15 97       	sbiw	r26, 0x05	; 5
     6f2:	c1 14       	cp	r12, r1
     6f4:	d1 04       	cpc	r13, r1
     6f6:	29 f0       	breq	.+10     	; 0x702 <_ZN10LinkedListI11LCDMenuItemE5shiftEv+0x7c>
     6f8:	c6 01       	movw	r24, r12
     6fa:	d4 d2       	rcall	.+1448   	; 0xca4 <_ZN11LCDMenuItemD1Ev>
     6fc:	c6 01       	movw	r24, r12
     6fe:	0e 94 c1 10 	call	0x2182	; 0x2182 <_ZdlPv>
     702:	f8 01       	movw	r30, r16
     704:	b5 82       	std	Z+5, r11	; 0x05
     706:	a4 82       	std	Z+4, r10	; 0x04
     708:	82 81       	ldd	r24, Z+2	; 0x02
     70a:	93 81       	ldd	r25, Z+3	; 0x03
     70c:	01 97       	sbiw	r24, 0x01	; 1
     70e:	93 83       	std	Z+3, r25	; 0x03
     710:	82 83       	std	Z+2, r24	; 0x02
     712:	14 86       	std	Z+12, r1	; 0x0c
     714:	be 01       	movw	r22, r28
     716:	6f 5f       	subi	r22, 0xFF	; 255
     718:	7f 4f       	sbci	r23, 0xFF	; 255
     71a:	c7 01       	movw	r24, r14
     71c:	0e 94 81 16 	call	0x2d02	; 0x2d02 <_ZN6StringC1ERKS_>
     720:	8f 81       	ldd	r24, Y+7	; 0x07
     722:	d7 01       	movw	r26, r14
     724:	16 96       	adiw	r26, 0x06	; 6
     726:	8c 93       	st	X, r24
     728:	ce 01       	movw	r24, r28
     72a:	01 96       	adiw	r24, 0x01	; 1
     72c:	bb d2       	rcall	.+1398   	; 0xca4 <_ZN11LCDMenuItemD1Ev>
     72e:	08 c0       	rjmp	.+16     	; 0x740 <_ZN10LinkedListI11LCDMenuItemE5shiftEv+0xba>
     730:	db 01       	movw	r26, r22
     732:	ed 91       	ld	r30, X+
     734:	fc 91       	ld	r31, X
     736:	04 84       	ldd	r0, Z+12	; 0x0c
     738:	f5 85       	ldd	r31, Z+13	; 0x0d
     73a:	e0 2d       	mov	r30, r0
     73c:	c7 01       	movw	r24, r14
     73e:	19 95       	eicall
     740:	c7 01       	movw	r24, r14
     742:	27 96       	adiw	r28, 0x07	; 7
     744:	0f b6       	in	r0, 0x3f	; 63
     746:	f8 94       	cli
     748:	de bf       	out	0x3e, r29	; 62
     74a:	0f be       	out	0x3f, r0	; 63
     74c:	cd bf       	out	0x3d, r28	; 61
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	1f 91       	pop	r17
     754:	0f 91       	pop	r16
     756:	ff 90       	pop	r15
     758:	ef 90       	pop	r14
     75a:	df 90       	pop	r13
     75c:	cf 90       	pop	r12
     75e:	bf 90       	pop	r11
     760:	af 90       	pop	r10
     762:	08 95       	ret

00000764 <_ZN7LCDMenuC1E6String>:
     764:	ef 92       	push	r14
     766:	ff 92       	push	r15
     768:	0f 93       	push	r16
     76a:	1f 93       	push	r17
     76c:	cf 93       	push	r28
     76e:	df 93       	push	r29
     770:	cd b7       	in	r28, 0x3d	; 61
     772:	de b7       	in	r29, 0x3e	; 62
     774:	2c 97       	sbiw	r28, 0x0c	; 12
     776:	0f b6       	in	r0, 0x3f	; 63
     778:	f8 94       	cli
     77a:	de bf       	out	0x3e, r29	; 62
     77c:	0f be       	out	0x3f, r0	; 63
     77e:	cd bf       	out	0x3d, r28	; 61
     780:	8c 01       	movw	r16, r24
     782:	7b 01       	movw	r14, r22
     784:	6a ef       	ldi	r22, 0xFA	; 250
     786:	72 e0       	ldi	r23, 0x02	; 2
     788:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <_ZN6StringC1EPKc>
     78c:	84 e3       	ldi	r24, 0x34	; 52
     78e:	92 e0       	ldi	r25, 0x02	; 2
     790:	f8 01       	movw	r30, r16
     792:	97 83       	std	Z+7, r25	; 0x07
     794:	86 83       	std	Z+6, r24	; 0x06
     796:	13 86       	std	Z+11, r1	; 0x0b
     798:	12 86       	std	Z+10, r1	; 0x0a
     79a:	15 86       	std	Z+13, r1	; 0x0d
     79c:	14 86       	std	Z+12, r1	; 0x0c
     79e:	11 86       	std	Z+9, r1	; 0x09
     7a0:	10 86       	std	Z+8, r1	; 0x08
     7a2:	17 86       	std	Z+15, r1	; 0x0f
     7a4:	16 86       	std	Z+14, r1	; 0x0e
     7a6:	11 8a       	std	Z+17, r1	; 0x11
     7a8:	10 8a       	std	Z+16, r1	; 0x10
     7aa:	12 8a       	std	Z+18, r1	; 0x12
     7ac:	16 8a       	std	Z+22, r1	; 0x16
     7ae:	15 8a       	std	Z+21, r1	; 0x15
     7b0:	b7 01       	movw	r22, r14
     7b2:	c8 01       	movw	r24, r16
     7b4:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <_ZN6StringaSERKS_>
     7b8:	f8 01       	movw	r30, r16
     7ba:	14 8a       	std	Z+20, r1	; 0x14
     7bc:	13 8a       	std	Z+19, r1	; 0x13
     7be:	6b e0       	ldi	r22, 0x0B	; 11
     7c0:	72 e0       	ldi	r23, 0x02	; 2
     7c2:	ce 01       	movw	r24, r28
     7c4:	07 96       	adiw	r24, 0x07	; 7
     7c6:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <_ZN6StringC1EPKc>
     7ca:	be 01       	movw	r22, r28
     7cc:	69 5f       	subi	r22, 0xF9	; 249
     7ce:	7f 4f       	sbci	r23, 0xFF	; 255
     7d0:	ce 01       	movw	r24, r28
     7d2:	01 96       	adiw	r24, 0x01	; 1
     7d4:	0e 94 81 16 	call	0x2d02	; 0x2d02 <_ZN6StringC1ERKS_>
     7d8:	87 e0       	ldi	r24, 0x07	; 7
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	0e 94 bf 10 	call	0x217e	; 0x217e <_Znwj>
     7e0:	7c 01       	movw	r14, r24
     7e2:	be 01       	movw	r22, r28
     7e4:	6f 5f       	subi	r22, 0xFF	; 255
     7e6:	7f 4f       	sbci	r23, 0xFF	; 255
     7e8:	48 d2       	rcall	.+1168   	; 0xc7a <_ZN11LCDMenuItemC1E6String>
     7ea:	f8 01       	movw	r30, r16
     7ec:	f0 8e       	std	Z+24, r15	; 0x18
     7ee:	e7 8a       	std	Z+23, r14	; 0x17
     7f0:	ce 01       	movw	r24, r28
     7f2:	01 96       	adiw	r24, 0x01	; 1
     7f4:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <_ZN6StringD1Ev>
     7f8:	ce 01       	movw	r24, r28
     7fa:	07 96       	adiw	r24, 0x07	; 7
     7fc:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <_ZN6StringD1Ev>
     800:	2c 96       	adiw	r28, 0x0c	; 12
     802:	0f b6       	in	r0, 0x3f	; 63
     804:	f8 94       	cli
     806:	de bf       	out	0x3e, r29	; 62
     808:	0f be       	out	0x3f, r0	; 63
     80a:	cd bf       	out	0x3d, r28	; 61
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	1f 91       	pop	r17
     812:	0f 91       	pop	r16
     814:	ff 90       	pop	r15
     816:	ef 90       	pop	r14
     818:	08 95       	ret

0000081a <_ZN10LinkedListI11LCDMenuItemE7getNodeEi>:
     81a:	dc 01       	movw	r26, r24
     81c:	14 96       	adiw	r26, 0x04	; 4
     81e:	ed 91       	ld	r30, X+
     820:	fc 91       	ld	r31, X
     822:	15 97       	sbiw	r26, 0x05	; 5
     824:	1c 96       	adiw	r26, 0x0c	; 12
     826:	8c 91       	ld	r24, X
     828:	1c 97       	sbiw	r26, 0x0c	; 12
     82a:	88 23       	and	r24, r24
     82c:	61 f0       	breq	.+24     	; 0x846 <_ZN10LinkedListI11LCDMenuItemE7getNodeEi+0x2c>
     82e:	1a 96       	adiw	r26, 0x0a	; 10
     830:	2d 91       	ld	r18, X+
     832:	3c 91       	ld	r19, X
     834:	1b 97       	sbiw	r26, 0x0b	; 11
     836:	62 17       	cp	r22, r18
     838:	73 07       	cpc	r23, r19
     83a:	44 f0       	brlt	.+16     	; 0x84c <_ZN10LinkedListI11LCDMenuItemE7getNodeEi+0x32>
     83c:	18 96       	adiw	r26, 0x08	; 8
     83e:	ed 91       	ld	r30, X+
     840:	fc 91       	ld	r31, X
     842:	19 97       	sbiw	r26, 0x09	; 9
     844:	05 c0       	rjmp	.+10     	; 0x850 <_ZN10LinkedListI11LCDMenuItemE7getNodeEi+0x36>
     846:	20 e0       	ldi	r18, 0x00	; 0
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	02 c0       	rjmp	.+4      	; 0x850 <_ZN10LinkedListI11LCDMenuItemE7getNodeEi+0x36>
     84c:	20 e0       	ldi	r18, 0x00	; 0
     84e:	30 e0       	ldi	r19, 0x00	; 0
     850:	26 17       	cp	r18, r22
     852:	37 07       	cpc	r19, r23
     854:	64 f4       	brge	.+24     	; 0x86e <_ZN10LinkedListI11LCDMenuItemE7getNodeEi+0x54>
     856:	30 97       	sbiw	r30, 0x00	; 0
     858:	51 f0       	breq	.+20     	; 0x86e <_ZN10LinkedListI11LCDMenuItemE7getNodeEi+0x54>
     85a:	07 80       	ldd	r0, Z+7	; 0x07
     85c:	f0 85       	ldd	r31, Z+8	; 0x08
     85e:	e0 2d       	mov	r30, r0
     860:	2f 5f       	subi	r18, 0xFF	; 255
     862:	3f 4f       	sbci	r19, 0xFF	; 255
     864:	26 17       	cp	r18, r22
     866:	37 07       	cpc	r19, r23
     868:	14 f4       	brge	.+4      	; 0x86e <_ZN10LinkedListI11LCDMenuItemE7getNodeEi+0x54>
     86a:	30 97       	sbiw	r30, 0x00	; 0
     86c:	b1 f7       	brne	.-20     	; 0x85a <_ZN10LinkedListI11LCDMenuItemE7getNodeEi+0x40>
     86e:	26 17       	cp	r18, r22
     870:	37 07       	cpc	r19, r23
     872:	79 f4       	brne	.+30     	; 0x892 <_ZN10LinkedListI11LCDMenuItemE7getNodeEi+0x78>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	1c 96       	adiw	r26, 0x0c	; 12
     878:	8c 93       	st	X, r24
     87a:	1c 97       	sbiw	r26, 0x0c	; 12
     87c:	1b 96       	adiw	r26, 0x0b	; 11
     87e:	3c 93       	st	X, r19
     880:	2e 93       	st	-X, r18
     882:	1a 97       	sbiw	r26, 0x0a	; 10
     884:	19 96       	adiw	r26, 0x09	; 9
     886:	fc 93       	st	X, r31
     888:	ee 93       	st	-X, r30
     88a:	18 97       	sbiw	r26, 0x08	; 8
     88c:	8e 2f       	mov	r24, r30
     88e:	9f 2f       	mov	r25, r31
     890:	08 95       	ret
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	08 95       	ret

00000898 <_ZN10LinkedListI11LCDMenuItemE3getEi>:
     898:	0f 93       	push	r16
     89a:	1f 93       	push	r17
     89c:	cf 93       	push	r28
     89e:	df 93       	push	r29
     8a0:	ec 01       	movw	r28, r24
     8a2:	cb 01       	movw	r24, r22
     8a4:	ba 01       	movw	r22, r20
     8a6:	b9 df       	rcall	.-142    	; 0x81a <_ZN10LinkedListI11LCDMenuItemE7getNodeEi>
     8a8:	8c 01       	movw	r16, r24
     8aa:	00 97       	sbiw	r24, 0x00	; 0
     8ac:	41 f0       	breq	.+16     	; 0x8be <_ZN10LinkedListI11LCDMenuItemE3getEi+0x26>
     8ae:	bc 01       	movw	r22, r24
     8b0:	ce 01       	movw	r24, r28
     8b2:	0e 94 81 16 	call	0x2d02	; 0x2d02 <_ZN6StringC1ERKS_>
     8b6:	f8 01       	movw	r30, r16
     8b8:	86 81       	ldd	r24, Z+6	; 0x06
     8ba:	8e 83       	std	Y+6, r24	; 0x06
     8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <_ZN10LinkedListI11LCDMenuItemE3getEi+0x2a>
     8be:	ce 01       	movw	r24, r28
     8c0:	cb d1       	rcall	.+918    	; 0xc58 <_ZN11LCDMenuItemC1Ev>
     8c2:	ce 01       	movw	r24, r28
     8c4:	df 91       	pop	r29
     8c6:	cf 91       	pop	r28
     8c8:	1f 91       	pop	r17
     8ca:	0f 91       	pop	r16
     8cc:	08 95       	ret

000008ce <_ZN10LinkedListI11LCDMenuItemE3popEv>:
	getNode(index)->data = _t;
	return true;
}

template<typename T>
T LinkedList<T>::pop(){
     8ce:	af 92       	push	r10
     8d0:	bf 92       	push	r11
     8d2:	cf 92       	push	r12
     8d4:	df 92       	push	r13
     8d6:	ef 92       	push	r14
     8d8:	ff 92       	push	r15
     8da:	0f 93       	push	r16
     8dc:	1f 93       	push	r17
     8de:	cf 93       	push	r28
     8e0:	df 93       	push	r29
     8e2:	cd b7       	in	r28, 0x3d	; 61
     8e4:	de b7       	in	r29, 0x3e	; 62
     8e6:	27 97       	sbiw	r28, 0x07	; 7
     8e8:	0f b6       	in	r0, 0x3f	; 63
     8ea:	f8 94       	cli
     8ec:	de bf       	out	0x3e, r29	; 62
     8ee:	0f be       	out	0x3f, r0	; 63
     8f0:	cd bf       	out	0x3d, r28	; 61
     8f2:	7c 01       	movw	r14, r24
     8f4:	8b 01       	movw	r16, r22
	if(_size <= 0)
     8f6:	fb 01       	movw	r30, r22
     8f8:	62 81       	ldd	r22, Z+2	; 0x02
     8fa:	73 81       	ldd	r23, Z+3	; 0x03
     8fc:	16 16       	cp	r1, r22
     8fe:	17 06       	cpc	r1, r23
     900:	14 f0       	brlt	.+4      	; 0x906 <_ZN10LinkedListI11LCDMenuItemE3popEv+0x38>
		return T();
     902:	aa d1       	rcall	.+852    	; 0xc58 <_ZN11LCDMenuItemC1Ev>
     904:	61 c0       	rjmp	.+194    	; 0x9c8 <_ZN10LinkedListI11LCDMenuItemE3popEv+0xfa>
	
	isCached = false;
     906:	f8 01       	movw	r30, r16
     908:	14 86       	std	Z+12, r1	; 0x0c

	if(_size >= 2){
     90a:	62 30       	cpi	r22, 0x02	; 2
     90c:	71 05       	cpc	r23, r1
     90e:	9c f1       	brlt	.+102    	; 0x976 <_ZN10LinkedListI11LCDMenuItemE3popEv+0xa8>
		ListNode<T> *tmp = getNode(_size - 2);
     910:	62 50       	subi	r22, 0x02	; 2
     912:	71 09       	sbc	r23, r1
     914:	c8 01       	movw	r24, r16
     916:	81 df       	rcall	.-254    	; 0x81a <_ZN10LinkedListI11LCDMenuItemE7getNodeEi>
     918:	6c 01       	movw	r12, r24
		T ret = tmp->next->data;
     91a:	fc 01       	movw	r30, r24
     91c:	a7 80       	ldd	r10, Z+7	; 0x07
     91e:	b0 84       	ldd	r11, Z+8	; 0x08
#include "../include/LinkedList/LinkedList.h"

#ifndef __LCDMENUITEM_H__
#define __LCDMENUITEM_H__

class LCDMenuItem
     920:	b5 01       	movw	r22, r10
     922:	ce 01       	movw	r24, r28
     924:	01 96       	adiw	r24, 0x01	; 1
     926:	0e 94 81 16 	call	0x2d02	; 0x2d02 <_ZN6StringC1ERKS_>
     92a:	f5 01       	movw	r30, r10
     92c:	86 81       	ldd	r24, Z+6	; 0x06
     92e:	8f 83       	std	Y+7, r24	; 0x07
		delete(tmp->next);
     930:	f6 01       	movw	r30, r12
     932:	a7 80       	ldd	r10, Z+7	; 0x07
     934:	b0 84       	ldd	r11, Z+8	; 0x08
     936:	a1 14       	cp	r10, r1
     938:	b1 04       	cpc	r11, r1
     93a:	29 f0       	breq	.+10     	; 0x946 <_ZN10LinkedListI11LCDMenuItemE3popEv+0x78>

#ifndef LinkedList_h
#define LinkedList_h

template<class T>
struct ListNode
     93c:	c5 01       	movw	r24, r10
     93e:	b2 d1       	rcall	.+868    	; 0xca4 <_ZN11LCDMenuItemD1Ev>
	isCached = false;

	if(_size >= 2){
		ListNode<T> *tmp = getNode(_size - 2);
		T ret = tmp->next->data;
		delete(tmp->next);
     940:	c5 01       	movw	r24, r10
     942:	0e 94 c1 10 	call	0x2182	; 0x2182 <_ZdlPv>
		tmp->next = false;
     946:	f6 01       	movw	r30, r12
     948:	10 86       	std	Z+8, r1	; 0x08
     94a:	17 82       	std	Z+7, r1	; 0x07
		last = tmp;
     94c:	f8 01       	movw	r30, r16
     94e:	d7 82       	std	Z+7, r13	; 0x07
     950:	c6 82       	std	Z+6, r12	; 0x06
		_size--;
     952:	82 81       	ldd	r24, Z+2	; 0x02
     954:	93 81       	ldd	r25, Z+3	; 0x03
     956:	01 97       	sbiw	r24, 0x01	; 1
     958:	93 83       	std	Z+3, r25	; 0x03
     95a:	82 83       	std	Z+2, r24	; 0x02
     95c:	be 01       	movw	r22, r28
     95e:	6f 5f       	subi	r22, 0xFF	; 255
     960:	7f 4f       	sbci	r23, 0xFF	; 255
     962:	c7 01       	movw	r24, r14
     964:	0e 94 81 16 	call	0x2d02	; 0x2d02 <_ZN6StringC1ERKS_>
     968:	8f 81       	ldd	r24, Y+7	; 0x07
     96a:	f7 01       	movw	r30, r14
     96c:	86 83       	std	Z+6, r24	; 0x06
		return ret;
     96e:	ce 01       	movw	r24, r28
     970:	01 96       	adiw	r24, 0x01	; 1
     972:	98 d1       	rcall	.+816    	; 0xca4 <_ZN11LCDMenuItemD1Ev>
     974:	29 c0       	rjmp	.+82     	; 0x9c8 <_ZN10LinkedListI11LCDMenuItemE3popEv+0xfa>
	}else{
		// Only one element left on the list
		T ret = root->data;
     976:	f8 01       	movw	r30, r16
     978:	c4 80       	ldd	r12, Z+4	; 0x04
     97a:	d5 80       	ldd	r13, Z+5	; 0x05
     97c:	b6 01       	movw	r22, r12
     97e:	ce 01       	movw	r24, r28
     980:	01 96       	adiw	r24, 0x01	; 1
     982:	0e 94 81 16 	call	0x2d02	; 0x2d02 <_ZN6StringC1ERKS_>
     986:	f6 01       	movw	r30, r12
     988:	86 81       	ldd	r24, Z+6	; 0x06
     98a:	8f 83       	std	Y+7, r24	; 0x07
		delete(root);
     98c:	f8 01       	movw	r30, r16
     98e:	c4 80       	ldd	r12, Z+4	; 0x04
     990:	d5 80       	ldd	r13, Z+5	; 0x05
     992:	c1 14       	cp	r12, r1
     994:	d1 04       	cpc	r13, r1
     996:	29 f0       	breq	.+10     	; 0x9a2 <_ZN10LinkedListI11LCDMenuItemE3popEv+0xd4>

#ifndef LinkedList_h
#define LinkedList_h

template<class T>
struct ListNode
     998:	c6 01       	movw	r24, r12
     99a:	84 d1       	rcall	.+776    	; 0xca4 <_ZN11LCDMenuItemD1Ev>
		_size--;
		return ret;
	}else{
		// Only one element left on the list
		T ret = root->data;
		delete(root);
     99c:	c6 01       	movw	r24, r12
     99e:	0e 94 c1 10 	call	0x2182	; 0x2182 <_ZdlPv>
		root = false;
     9a2:	f8 01       	movw	r30, r16
     9a4:	15 82       	std	Z+5, r1	; 0x05
     9a6:	14 82       	std	Z+4, r1	; 0x04
		last = false;
     9a8:	17 82       	std	Z+7, r1	; 0x07
     9aa:	16 82       	std	Z+6, r1	; 0x06
		_size = 0;
     9ac:	13 82       	std	Z+3, r1	; 0x03
     9ae:	12 82       	std	Z+2, r1	; 0x02
     9b0:	be 01       	movw	r22, r28
     9b2:	6f 5f       	subi	r22, 0xFF	; 255
     9b4:	7f 4f       	sbci	r23, 0xFF	; 255
     9b6:	c7 01       	movw	r24, r14
     9b8:	0e 94 81 16 	call	0x2d02	; 0x2d02 <_ZN6StringC1ERKS_>
     9bc:	8f 81       	ldd	r24, Y+7	; 0x07
     9be:	f7 01       	movw	r30, r14
     9c0:	86 83       	std	Z+6, r24	; 0x06
		return ret;
     9c2:	ce 01       	movw	r24, r28
     9c4:	01 96       	adiw	r24, 0x01	; 1
     9c6:	6e d1       	rcall	.+732    	; 0xca4 <_ZN11LCDMenuItemD1Ev>
	}
}
     9c8:	c7 01       	movw	r24, r14
     9ca:	27 96       	adiw	r28, 0x07	; 7
     9cc:	0f b6       	in	r0, 0x3f	; 63
     9ce:	f8 94       	cli
     9d0:	de bf       	out	0x3e, r29	; 62
     9d2:	0f be       	out	0x3f, r0	; 63
     9d4:	cd bf       	out	0x3d, r28	; 61
     9d6:	df 91       	pop	r29
     9d8:	cf 91       	pop	r28
     9da:	1f 91       	pop	r17
     9dc:	0f 91       	pop	r16
     9de:	ff 90       	pop	r15
     9e0:	ef 90       	pop	r14
     9e2:	df 90       	pop	r13
     9e4:	cf 90       	pop	r12
     9e6:	bf 90       	pop	r11
     9e8:	af 90       	pop	r10
     9ea:	08 95       	ret

000009ec <_ZN10LinkedListI11LCDMenuItemE6removeEi>:
	}

}

template<typename T>
T LinkedList<T>::remove(int index){
     9ec:	af 92       	push	r10
     9ee:	bf 92       	push	r11
     9f0:	cf 92       	push	r12
     9f2:	df 92       	push	r13
     9f4:	ef 92       	push	r14
     9f6:	ff 92       	push	r15
     9f8:	0f 93       	push	r16
     9fa:	1f 93       	push	r17
     9fc:	cf 93       	push	r28
     9fe:	df 93       	push	r29
     a00:	cd b7       	in	r28, 0x3d	; 61
     a02:	de b7       	in	r29, 0x3e	; 62
     a04:	27 97       	sbiw	r28, 0x07	; 7
     a06:	0f b6       	in	r0, 0x3f	; 63
     a08:	f8 94       	cli
     a0a:	de bf       	out	0x3e, r29	; 62
     a0c:	0f be       	out	0x3f, r0	; 63
     a0e:	cd bf       	out	0x3d, r28	; 61
     a10:	7c 01       	movw	r14, r24
     a12:	8b 01       	movw	r16, r22
	if (index < 0 || index >= _size)
     a14:	55 23       	and	r21, r21
     a16:	44 f0       	brlt	.+16     	; 0xa28 <_ZN10LinkedListI11LCDMenuItemE6removeEi+0x3c>
     a18:	db 01       	movw	r26, r22
     a1a:	12 96       	adiw	r26, 0x02	; 2
     a1c:	8d 91       	ld	r24, X+
     a1e:	9c 91       	ld	r25, X
     a20:	13 97       	sbiw	r26, 0x03	; 3
     a22:	48 17       	cp	r20, r24
     a24:	59 07       	cpc	r21, r25
     a26:	1c f0       	brlt	.+6      	; 0xa2e <_ZN10LinkedListI11LCDMenuItemE6removeEi+0x42>
	{
		return T();
     a28:	c7 01       	movw	r24, r14
     a2a:	16 d1       	rcall	.+556    	; 0xc58 <_ZN11LCDMenuItemC1Ev>
     a2c:	52 c0       	rjmp	.+164    	; 0xad2 <_ZN10LinkedListI11LCDMenuItemE6removeEi+0xe6>
	}

	if(index == 0)
     a2e:	41 15       	cp	r20, r1
     a30:	51 05       	cpc	r21, r1
     a32:	49 f4       	brne	.+18     	; 0xa46 <_ZN10LinkedListI11LCDMenuItemE6removeEi+0x5a>
		return shift();
     a34:	db 01       	movw	r26, r22
     a36:	ed 91       	ld	r30, X+
     a38:	fc 91       	ld	r31, X
     a3a:	06 84       	ldd	r0, Z+14	; 0x0e
     a3c:	f7 85       	ldd	r31, Z+15	; 0x0f
     a3e:	e0 2d       	mov	r30, r0
     a40:	c7 01       	movw	r24, r14
     a42:	19 95       	eicall
     a44:	46 c0       	rjmp	.+140    	; 0xad2 <_ZN10LinkedListI11LCDMenuItemE6removeEi+0xe6>
	
	if (index == _size-1)
     a46:	01 97       	sbiw	r24, 0x01	; 1
     a48:	84 17       	cp	r24, r20
     a4a:	95 07       	cpc	r25, r21
     a4c:	49 f4       	brne	.+18     	; 0xa60 <_ZN10LinkedListI11LCDMenuItemE6removeEi+0x74>
	{
		return pop();
     a4e:	db 01       	movw	r26, r22
     a50:	ed 91       	ld	r30, X+
     a52:	fc 91       	ld	r31, X
     a54:	04 84       	ldd	r0, Z+12	; 0x0c
     a56:	f5 85       	ldd	r31, Z+13	; 0x0d
     a58:	e0 2d       	mov	r30, r0
     a5a:	c7 01       	movw	r24, r14
     a5c:	19 95       	eicall
     a5e:	39 c0       	rjmp	.+114    	; 0xad2 <_ZN10LinkedListI11LCDMenuItemE6removeEi+0xe6>
	}

	ListNode<T> *tmp = getNode(index - 1);
     a60:	ba 01       	movw	r22, r20
     a62:	61 50       	subi	r22, 0x01	; 1
     a64:	71 09       	sbc	r23, r1
     a66:	c8 01       	movw	r24, r16
     a68:	d8 de       	rcall	.-592    	; 0x81a <_ZN10LinkedListI11LCDMenuItemE7getNodeEi>
     a6a:	5c 01       	movw	r10, r24
	ListNode<T> *toDelete = tmp->next;
     a6c:	fc 01       	movw	r30, r24
     a6e:	c7 80       	ldd	r12, Z+7	; 0x07
     a70:	d0 84       	ldd	r13, Z+8	; 0x08
     a72:	b6 01       	movw	r22, r12
     a74:	ce 01       	movw	r24, r28
     a76:	01 96       	adiw	r24, 0x01	; 1
     a78:	0e 94 81 16 	call	0x2d02	; 0x2d02 <_ZN6StringC1ERKS_>
     a7c:	d6 01       	movw	r26, r12
     a7e:	16 96       	adiw	r26, 0x06	; 6
     a80:	8c 91       	ld	r24, X
     a82:	8f 83       	std	Y+7, r24	; 0x07
	T ret = toDelete->data;
	tmp->next = tmp->next->next;
     a84:	d5 01       	movw	r26, r10
     a86:	17 96       	adiw	r26, 0x07	; 7
     a88:	ed 91       	ld	r30, X+
     a8a:	fc 91       	ld	r31, X
     a8c:	18 97       	sbiw	r26, 0x08	; 8
     a8e:	87 81       	ldd	r24, Z+7	; 0x07
     a90:	90 85       	ldd	r25, Z+8	; 0x08
     a92:	18 96       	adiw	r26, 0x08	; 8
     a94:	9c 93       	st	X, r25
     a96:	8e 93       	st	-X, r24
     a98:	17 97       	sbiw	r26, 0x07	; 7
	delete(toDelete);
     a9a:	c1 14       	cp	r12, r1
     a9c:	d1 04       	cpc	r13, r1
     a9e:	29 f0       	breq	.+10     	; 0xaaa <_ZN10LinkedListI11LCDMenuItemE6removeEi+0xbe>

#ifndef LinkedList_h
#define LinkedList_h

template<class T>
struct ListNode
     aa0:	c6 01       	movw	r24, r12
     aa2:	00 d1       	rcall	.+512    	; 0xca4 <_ZN11LCDMenuItemD1Ev>

	ListNode<T> *tmp = getNode(index - 1);
	ListNode<T> *toDelete = tmp->next;
	T ret = toDelete->data;
	tmp->next = tmp->next->next;
	delete(toDelete);
     aa4:	c6 01       	movw	r24, r12
     aa6:	0e 94 c1 10 	call	0x2182	; 0x2182 <_ZdlPv>
	_size--;
     aaa:	f8 01       	movw	r30, r16
     aac:	82 81       	ldd	r24, Z+2	; 0x02
     aae:	93 81       	ldd	r25, Z+3	; 0x03
     ab0:	01 97       	sbiw	r24, 0x01	; 1
     ab2:	93 83       	std	Z+3, r25	; 0x03
     ab4:	82 83       	std	Z+2, r24	; 0x02
	isCached = false;
     ab6:	14 86       	std	Z+12, r1	; 0x0c
     ab8:	be 01       	movw	r22, r28
     aba:	6f 5f       	subi	r22, 0xFF	; 255
     abc:	7f 4f       	sbci	r23, 0xFF	; 255
     abe:	c7 01       	movw	r24, r14
     ac0:	0e 94 81 16 	call	0x2d02	; 0x2d02 <_ZN6StringC1ERKS_>
     ac4:	8f 81       	ldd	r24, Y+7	; 0x07
     ac6:	d7 01       	movw	r26, r14
     ac8:	16 96       	adiw	r26, 0x06	; 6
     aca:	8c 93       	st	X, r24
	return ret;
     acc:	ce 01       	movw	r24, r28
     ace:	01 96       	adiw	r24, 0x01	; 1
     ad0:	e9 d0       	rcall	.+466    	; 0xca4 <_ZN11LCDMenuItemD1Ev>
}
     ad2:	c7 01       	movw	r24, r14
     ad4:	27 96       	adiw	r28, 0x07	; 7
     ad6:	0f b6       	in	r0, 0x3f	; 63
     ad8:	f8 94       	cli
     ada:	de bf       	out	0x3e, r29	; 62
     adc:	0f be       	out	0x3f, r0	; 63
     ade:	cd bf       	out	0x3d, r28	; 61
     ae0:	df 91       	pop	r29
     ae2:	cf 91       	pop	r28
     ae4:	1f 91       	pop	r17
     ae6:	0f 91       	pop	r16
     ae8:	ff 90       	pop	r15
     aea:	ef 90       	pop	r14
     aec:	df 90       	pop	r13
     aee:	cf 90       	pop	r12
     af0:	bf 90       	pop	r11
     af2:	af 90       	pop	r10
     af4:	08 95       	ret

00000af6 <_ZN10LinkedListI11LCDMenuItemE3setEiS0_>:
	
	return true;
}

template<typename T>
bool LinkedList<T>::set(int index, T _t){
     af6:	0f 93       	push	r16
     af8:	1f 93       	push	r17
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
	// Check if index position is in bounds
	if(index < 0 || index >= _size)
     afe:	77 23       	and	r23, r23
     b00:	8c f0       	brlt	.+34     	; 0xb24 <_ZN10LinkedListI11LCDMenuItemE3setEiS0_+0x2e>
     b02:	fc 01       	movw	r30, r24
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	33 81       	ldd	r19, Z+3	; 0x03
     b08:	62 17       	cp	r22, r18
     b0a:	73 07       	cpc	r23, r19
     b0c:	6c f4       	brge	.+26     	; 0xb28 <_ZN10LinkedListI11LCDMenuItemE3setEiS0_+0x32>
     b0e:	ea 01       	movw	r28, r20
		return false;

	getNode(index)->data = _t;
     b10:	84 de       	rcall	.-760    	; 0x81a <_ZN10LinkedListI11LCDMenuItemE7getNodeEi>
     b12:	8c 01       	movw	r16, r24
     b14:	be 01       	movw	r22, r28
     b16:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <_ZN6StringaSERKS_>
     b1a:	8e 81       	ldd	r24, Y+6	; 0x06
     b1c:	f8 01       	movw	r30, r16
     b1e:	86 83       	std	Z+6, r24	; 0x06
	return true;
     b20:	81 e0       	ldi	r24, 0x01	; 1
     b22:	03 c0       	rjmp	.+6      	; 0xb2a <_ZN10LinkedListI11LCDMenuItemE3setEiS0_+0x34>

template<typename T>
bool LinkedList<T>::set(int index, T _t){
	// Check if index position is in bounds
	if(index < 0 || index >= _size)
		return false;
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	01 c0       	rjmp	.+2      	; 0xb2a <_ZN10LinkedListI11LCDMenuItemE3setEiS0_+0x34>
     b28:	80 e0       	ldi	r24, 0x00	; 0

	getNode(index)->data = _t;
	return true;
}
     b2a:	df 91       	pop	r29
     b2c:	cf 91       	pop	r28
     b2e:	1f 91       	pop	r17
     b30:	0f 91       	pop	r16
     b32:	08 95       	ret

00000b34 <_ZN10LinkedListI11LCDMenuItemE3addEiS0_>:
int LinkedList<T>::size(){
	return _size;
}

template<typename T>
bool LinkedList<T>::add(int index, T _t){
     b34:	af 92       	push	r10
     b36:	bf 92       	push	r11
     b38:	cf 92       	push	r12
     b3a:	df 92       	push	r13
     b3c:	ef 92       	push	r14
     b3e:	ff 92       	push	r15
     b40:	0f 93       	push	r16
     b42:	1f 93       	push	r17
     b44:	cf 93       	push	r28
     b46:	df 93       	push	r29
     b48:	cd b7       	in	r28, 0x3d	; 61
     b4a:	de b7       	in	r29, 0x3e	; 62
     b4c:	2e 97       	sbiw	r28, 0x0e	; 14
     b4e:	0f b6       	in	r0, 0x3f	; 63
     b50:	f8 94       	cli
     b52:	de bf       	out	0x3e, r29	; 62
     b54:	0f be       	out	0x3f, r0	; 63
     b56:	cd bf       	out	0x3d, r28	; 61
     b58:	8c 01       	movw	r16, r24
     b5a:	7b 01       	movw	r14, r22
     b5c:	5a 01       	movw	r10, r20

	if(index >= _size)
     b5e:	dc 01       	movw	r26, r24
     b60:	12 96       	adiw	r26, 0x02	; 2
     b62:	8d 91       	ld	r24, X+
     b64:	9c 91       	ld	r25, X
     b66:	13 97       	sbiw	r26, 0x03	; 3
     b68:	68 17       	cp	r22, r24
     b6a:	79 07       	cpc	r23, r25
     b6c:	bc f0       	brlt	.+46     	; 0xb9c <_ZN10LinkedListI11LCDMenuItemE3addEiS0_+0x68>
		return add(_t);
     b6e:	ed 91       	ld	r30, X+
     b70:	fc 91       	ld	r31, X
     b72:	e4 80       	ldd	r14, Z+4	; 0x04
     b74:	f5 80       	ldd	r15, Z+5	; 0x05
     b76:	ba 01       	movw	r22, r20
     b78:	ce 01       	movw	r24, r28
     b7a:	08 96       	adiw	r24, 0x08	; 8
     b7c:	0e 94 81 16 	call	0x2d02	; 0x2d02 <_ZN6StringC1ERKS_>
     b80:	f5 01       	movw	r30, r10
     b82:	86 81       	ldd	r24, Z+6	; 0x06
     b84:	8e 87       	std	Y+14, r24	; 0x0e
     b86:	be 01       	movw	r22, r28
     b88:	68 5f       	subi	r22, 0xF8	; 248
     b8a:	7f 4f       	sbci	r23, 0xFF	; 255
     b8c:	c8 01       	movw	r24, r16
     b8e:	f7 01       	movw	r30, r14
     b90:	19 95       	eicall
     b92:	18 2f       	mov	r17, r24
     b94:	ce 01       	movw	r24, r28
     b96:	08 96       	adiw	r24, 0x08	; 8
     b98:	85 d0       	rcall	.+266    	; 0xca4 <_ZN11LCDMenuItemD1Ev>
     b9a:	4c c0       	rjmp	.+152    	; 0xc34 <_ZN10LinkedListI11LCDMenuItemE3addEiS0_+0x100>

	if(index == 0)
     b9c:	67 2b       	or	r22, r23
     b9e:	c1 f4       	brne	.+48     	; 0xbd0 <_ZN10LinkedListI11LCDMenuItemE3addEiS0_+0x9c>
		return unshift(_t);
     ba0:	d8 01       	movw	r26, r16
     ba2:	ed 91       	ld	r30, X+
     ba4:	fc 91       	ld	r31, X
     ba6:	e6 80       	ldd	r14, Z+6	; 0x06
     ba8:	f7 80       	ldd	r15, Z+7	; 0x07
     baa:	ba 01       	movw	r22, r20
     bac:	ce 01       	movw	r24, r28
     bae:	01 96       	adiw	r24, 0x01	; 1
     bb0:	0e 94 81 16 	call	0x2d02	; 0x2d02 <_ZN6StringC1ERKS_>
     bb4:	f5 01       	movw	r30, r10
     bb6:	86 81       	ldd	r24, Z+6	; 0x06
     bb8:	8f 83       	std	Y+7, r24	; 0x07
     bba:	be 01       	movw	r22, r28
     bbc:	6f 5f       	subi	r22, 0xFF	; 255
     bbe:	7f 4f       	sbci	r23, 0xFF	; 255
     bc0:	c8 01       	movw	r24, r16
     bc2:	f7 01       	movw	r30, r14
     bc4:	19 95       	eicall
     bc6:	18 2f       	mov	r17, r24
     bc8:	ce 01       	movw	r24, r28
     bca:	01 96       	adiw	r24, 0x01	; 1
     bcc:	6b d0       	rcall	.+214    	; 0xca4 <_ZN11LCDMenuItemD1Ev>
     bce:	32 c0       	rjmp	.+100    	; 0xc34 <_ZN10LinkedListI11LCDMenuItemE3addEiS0_+0x100>

	ListNode<T> *tmp = new ListNode<T>(),
     bd0:	89 e0       	ldi	r24, 0x09	; 9
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	0e 94 bf 10 	call	0x217e	; 0x217e <_Znwj>
     bd8:	6c 01       	movw	r12, r24
     bda:	89 e0       	ldi	r24, 0x09	; 9
     bdc:	d6 01       	movw	r26, r12
     bde:	1d 92       	st	X+, r1
     be0:	8a 95       	dec	r24
     be2:	e9 f7       	brne	.-6      	; 0xbde <_ZN10LinkedListI11LCDMenuItemE3addEiS0_+0xaa>

#ifndef LinkedList_h
#define LinkedList_h

template<class T>
struct ListNode
     be4:	c6 01       	movw	r24, r12
     be6:	38 d0       	rcall	.+112    	; 0xc58 <_ZN11LCDMenuItemC1Ev>

	if(index == 0)
		return unshift(_t);

	ListNode<T> *tmp = new ListNode<T>(),
				 *_prev = getNode(index-1);
     be8:	b7 01       	movw	r22, r14
     bea:	61 50       	subi	r22, 0x01	; 1
     bec:	71 09       	sbc	r23, r1
     bee:	c8 01       	movw	r24, r16
     bf0:	14 de       	rcall	.-984    	; 0x81a <_ZN10LinkedListI11LCDMenuItemE7getNodeEi>
     bf2:	7c 01       	movw	r14, r24
     bf4:	b5 01       	movw	r22, r10
     bf6:	c6 01       	movw	r24, r12
     bf8:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <_ZN6StringaSERKS_>
     bfc:	f5 01       	movw	r30, r10
     bfe:	86 81       	ldd	r24, Z+6	; 0x06
     c00:	d6 01       	movw	r26, r12
     c02:	16 96       	adiw	r26, 0x06	; 6
     c04:	8c 93       	st	X, r24
     c06:	16 97       	sbiw	r26, 0x06	; 6
	tmp->data = _t;
	tmp->next = _prev->next;
     c08:	f7 01       	movw	r30, r14
     c0a:	87 81       	ldd	r24, Z+7	; 0x07
     c0c:	90 85       	ldd	r25, Z+8	; 0x08
     c0e:	18 96       	adiw	r26, 0x08	; 8
     c10:	9c 93       	st	X, r25
     c12:	8e 93       	st	-X, r24
     c14:	17 97       	sbiw	r26, 0x07	; 7
	_prev->next = tmp;
     c16:	d0 86       	std	Z+8, r13	; 0x08
     c18:	c7 82       	std	Z+7, r12	; 0x07

	_size++;
     c1a:	d8 01       	movw	r26, r16
     c1c:	12 96       	adiw	r26, 0x02	; 2
     c1e:	8d 91       	ld	r24, X+
     c20:	9c 91       	ld	r25, X
     c22:	13 97       	sbiw	r26, 0x03	; 3
     c24:	01 96       	adiw	r24, 0x01	; 1
     c26:	13 96       	adiw	r26, 0x03	; 3
     c28:	9c 93       	st	X, r25
     c2a:	8e 93       	st	-X, r24
     c2c:	12 97       	sbiw	r26, 0x02	; 2
	isCached = false;
     c2e:	1c 96       	adiw	r26, 0x0c	; 12
     c30:	1c 92       	st	X, r1

	return true;
     c32:	11 e0       	ldi	r17, 0x01	; 1
}
     c34:	81 2f       	mov	r24, r17
     c36:	2e 96       	adiw	r28, 0x0e	; 14
     c38:	0f b6       	in	r0, 0x3f	; 63
     c3a:	f8 94       	cli
     c3c:	de bf       	out	0x3e, r29	; 62
     c3e:	0f be       	out	0x3f, r0	; 63
     c40:	cd bf       	out	0x3d, r28	; 61
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	1f 91       	pop	r17
     c48:	0f 91       	pop	r16
     c4a:	ff 90       	pop	r15
     c4c:	ef 90       	pop	r14
     c4e:	df 90       	pop	r13
     c50:	cf 90       	pop	r12
     c52:	bf 90       	pop	r11
     c54:	af 90       	pop	r10
     c56:	08 95       	ret

00000c58 <_ZN11LCDMenuItemC1Ev>:

#include "../include/LiquidCrystal/LiquidCrystal_I2C.h"
#include "LCDMenuItem.h"

// default constructor
LCDMenuItem::LCDMenuItem()
     c58:	cf 93       	push	r28
     c5a:	df 93       	push	r29
     c5c:	ec 01       	movw	r28, r24
     c5e:	6a ef       	ldi	r22, 0xFA	; 250
     c60:	72 e0       	ldi	r23, 0x02	; 2
     c62:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <_ZN6StringC1EPKc>
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	8e 83       	std	Y+6, r24	; 0x06
{
	Name = "XXX";
     c6a:	68 e4       	ldi	r22, 0x48	; 72
     c6c:	72 e0       	ldi	r23, 0x02	; 2
     c6e:	ce 01       	movw	r24, r28
     c70:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <_ZN6StringaSEPKc>
}
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	08 95       	ret

00000c7a <_ZN11LCDMenuItemC1E6String>:

LCDMenuItem::LCDMenuItem(String _Name)
     c7a:	0f 93       	push	r16
     c7c:	1f 93       	push	r17
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
     c82:	ec 01       	movw	r28, r24
     c84:	8b 01       	movw	r16, r22
     c86:	6a ef       	ldi	r22, 0xFA	; 250
     c88:	72 e0       	ldi	r23, 0x02	; 2
     c8a:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <_ZN6StringC1EPKc>
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	8e 83       	std	Y+6, r24	; 0x06
{
	Name = _Name;
     c92:	b8 01       	movw	r22, r16
     c94:	ce 01       	movw	r24, r28
     c96:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <_ZN6StringaSERKS_>
} 
     c9a:	df 91       	pop	r29
     c9c:	cf 91       	pop	r28
     c9e:	1f 91       	pop	r17
     ca0:	0f 91       	pop	r16
     ca2:	08 95       	ret

00000ca4 <_ZN11LCDMenuItemD1Ev>:

// default destructor
LCDMenuItem::~LCDMenuItem()
     ca4:	0c 94 ec 15 	jmp	0x2bd8	; 0x2bd8 <_ZN6StringD1Ev>
     ca8:	08 95       	ret

00000caa <_ZN19UI_BurnerControllerC1E6StringP17LiquidCrystal_I2CP12ClickEncoder>:

#include "LCDMenu.h"
#include "LCDMenuItem.h"
#include "UI_BurnerController.h"

UI_BurnerController::UI_BurnerController(String _Name, LiquidCrystal_I2C *_LCD, ClickEncoder *_Encoder){
     caa:	8f 92       	push	r8
     cac:	9f 92       	push	r9
     cae:	af 92       	push	r10
     cb0:	bf 92       	push	r11
     cb2:	cf 92       	push	r12
     cb4:	df 92       	push	r13
     cb6:	ef 92       	push	r14
     cb8:	ff 92       	push	r15
     cba:	0f 93       	push	r16
     cbc:	1f 93       	push	r17
     cbe:	cf 93       	push	r28
     cc0:	df 93       	push	r29
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
     cc6:	ad 97       	sbiw	r28, 0x2d	; 45
     cc8:	0f b6       	in	r0, 0x3f	; 63
     cca:	f8 94       	cli
     ccc:	de bf       	out	0x3e, r29	; 62
     cce:	0f be       	out	0x3f, r0	; 63
     cd0:	cd bf       	out	0x3d, r28	; 61
     cd2:	8c 01       	movw	r16, r24
     cd4:	4b 01       	movw	r8, r22
     cd6:	5a 01       	movw	r10, r20
     cd8:	69 01       	movw	r12, r18
     cda:	7c 01       	movw	r14, r24
     cdc:	82 e0       	ldi	r24, 0x02	; 2
     cde:	e8 0e       	add	r14, r24
     ce0:	f1 1c       	adc	r15, r1
     ce2:	6a ef       	ldi	r22, 0xFA	; 250
     ce4:	72 e0       	ldi	r23, 0x02	; 2
     ce6:	c7 01       	movw	r24, r14
     ce8:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <_ZN6StringC1EPKc>
     cec:	f8 01       	movw	r30, r16
     cee:	11 86       	std	Z+9, r1	; 0x09
     cf0:	10 86       	std	Z+8, r1	; 0x08
     cf2:	13 86       	std	Z+11, r1	; 0x0b
     cf4:	12 86       	std	Z+10, r1	; 0x0a
	Name = _Name;
     cf6:	b4 01       	movw	r22, r8
     cf8:	c7 01       	movw	r24, r14
     cfa:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <_ZN6StringaSERKS_>
	LCD = _LCD;
     cfe:	f8 01       	movw	r30, r16
     d00:	b5 86       	std	Z+13, r11	; 0x0d
     d02:	a4 86       	std	Z+12, r10	; 0x0c
	Encoder = _Encoder;
     d04:	d7 86       	std	Z+15, r13	; 0x0f
     d06:	c6 86       	std	Z+14, r12	; 0x0e
	
	MainMenu = new LCDMenu("Main Menu");
     d08:	6b e6       	ldi	r22, 0x6B	; 107
     d0a:	72 e0       	ldi	r23, 0x02	; 2
     d0c:	ce 01       	movw	r24, r28
     d0e:	88 96       	adiw	r24, 0x28	; 40
     d10:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <_ZN6StringC1EPKc>
     d14:	89 e1       	ldi	r24, 0x19	; 25
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	0e 94 bf 10 	call	0x217e	; 0x217e <_Znwj>
     d1c:	7c 01       	movw	r14, r24
     d1e:	be 01       	movw	r22, r28
     d20:	68 5d       	subi	r22, 0xD8	; 216
     d22:	7f 4f       	sbci	r23, 0xFF	; 255
     d24:	1f dd       	rcall	.-1474   	; 0x764 <_ZN7LCDMenuC1E6String>
     d26:	f8 01       	movw	r30, r16
     d28:	f1 82       	std	Z+1, r15	; 0x01
     d2a:	e0 82       	st	Z, r14
     d2c:	ce 01       	movw	r24, r28
     d2e:	88 96       	adiw	r24, 0x28	; 40
     d30:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <_ZN6StringD1Ev>
	LCDMenuItem * MenuItem1 = new LCDMenuItem("Monitor");
     d34:	65 e7       	ldi	r22, 0x75	; 117
     d36:	72 e0       	ldi	r23, 0x02	; 2
     d38:	ce 01       	movw	r24, r28
     d3a:	82 96       	adiw	r24, 0x22	; 34
     d3c:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <_ZN6StringC1EPKc>
     d40:	87 e0       	ldi	r24, 0x07	; 7
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	0e 94 bf 10 	call	0x217e	; 0x217e <_Znwj>
     d48:	7c 01       	movw	r14, r24
     d4a:	be 01       	movw	r22, r28
     d4c:	6e 5d       	subi	r22, 0xDE	; 222
     d4e:	7f 4f       	sbci	r23, 0xFF	; 255
     d50:	94 df       	rcall	.-216    	; 0xc7a <_ZN11LCDMenuItemC1E6String>
     d52:	ce 01       	movw	r24, r28
     d54:	82 96       	adiw	r24, 0x22	; 34
     d56:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <_ZN6StringD1Ev>
     d5a:	b7 01       	movw	r22, r14
     d5c:	ce 01       	movw	r24, r28
     d5e:	4b 96       	adiw	r24, 0x1b	; 27
     d60:	0e 94 81 16 	call	0x2d02	; 0x2d02 <_ZN6StringC1ERKS_>
     d64:	f7 01       	movw	r30, r14
     d66:	86 81       	ldd	r24, Z+6	; 0x06
     d68:	89 a3       	std	Y+33, r24	; 0x21
	MainMenu->Items.add(*MenuItem1);
     d6a:	f8 01       	movw	r30, r16
     d6c:	80 81       	ld	r24, Z
     d6e:	91 81       	ldd	r25, Z+1	; 0x01
     d70:	be 01       	movw	r22, r28
     d72:	65 5e       	subi	r22, 0xE5	; 229
     d74:	7f 4f       	sbci	r23, 0xFF	; 255
     d76:	06 96       	adiw	r24, 0x06	; 6
     d78:	3e dc       	rcall	.-1924   	; 0x5f6 <_ZN10LinkedListI11LCDMenuItemE3addES0_>
     d7a:	ce 01       	movw	r24, r28
     d7c:	4b 96       	adiw	r24, 0x1b	; 27
     d7e:	92 df       	rcall	.-220    	; 0xca4 <_ZN11LCDMenuItemD1Ev>
	LCDMenuItem * MenuItem2 = new LCDMenuItem("Settings");
     d80:	6d e7       	ldi	r22, 0x7D	; 125
     d82:	72 e0       	ldi	r23, 0x02	; 2
     d84:	ce 01       	movw	r24, r28
     d86:	45 96       	adiw	r24, 0x15	; 21
     d88:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <_ZN6StringC1EPKc>
     d8c:	87 e0       	ldi	r24, 0x07	; 7
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	0e 94 bf 10 	call	0x217e	; 0x217e <_Znwj>
     d94:	7c 01       	movw	r14, r24
     d96:	be 01       	movw	r22, r28
     d98:	6b 5e       	subi	r22, 0xEB	; 235
     d9a:	7f 4f       	sbci	r23, 0xFF	; 255
     d9c:	6e df       	rcall	.-292    	; 0xc7a <_ZN11LCDMenuItemC1E6String>
     d9e:	ce 01       	movw	r24, r28
     da0:	45 96       	adiw	r24, 0x15	; 21
     da2:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <_ZN6StringD1Ev>
     da6:	b7 01       	movw	r22, r14
     da8:	ce 01       	movw	r24, r28
     daa:	0e 96       	adiw	r24, 0x0e	; 14
     dac:	0e 94 81 16 	call	0x2d02	; 0x2d02 <_ZN6StringC1ERKS_>
     db0:	f7 01       	movw	r30, r14
     db2:	86 81       	ldd	r24, Z+6	; 0x06
     db4:	8c 8b       	std	Y+20, r24	; 0x14
	MainMenu->Items.add(*MenuItem2);
     db6:	f8 01       	movw	r30, r16
     db8:	80 81       	ld	r24, Z
     dba:	91 81       	ldd	r25, Z+1	; 0x01
     dbc:	be 01       	movw	r22, r28
     dbe:	62 5f       	subi	r22, 0xF2	; 242
     dc0:	7f 4f       	sbci	r23, 0xFF	; 255
     dc2:	06 96       	adiw	r24, 0x06	; 6
     dc4:	18 dc       	rcall	.-2000   	; 0x5f6 <_ZN10LinkedListI11LCDMenuItemE3addES0_>
     dc6:	ce 01       	movw	r24, r28
     dc8:	0e 96       	adiw	r24, 0x0e	; 14
     dca:	6c df       	rcall	.-296    	; 0xca4 <_ZN11LCDMenuItemD1Ev>
	LCDMenuItem * MenuItem3 = new LCDMenuItem("Diagnostics");
     dcc:	66 e8       	ldi	r22, 0x86	; 134
     dce:	72 e0       	ldi	r23, 0x02	; 2
     dd0:	ce 01       	movw	r24, r28
     dd2:	08 96       	adiw	r24, 0x08	; 8
     dd4:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <_ZN6StringC1EPKc>
     dd8:	87 e0       	ldi	r24, 0x07	; 7
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	0e 94 bf 10 	call	0x217e	; 0x217e <_Znwj>
     de0:	7c 01       	movw	r14, r24
     de2:	be 01       	movw	r22, r28
     de4:	68 5f       	subi	r22, 0xF8	; 248
     de6:	7f 4f       	sbci	r23, 0xFF	; 255
     de8:	48 df       	rcall	.-368    	; 0xc7a <_ZN11LCDMenuItemC1E6String>
     dea:	ce 01       	movw	r24, r28
     dec:	08 96       	adiw	r24, 0x08	; 8
     dee:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <_ZN6StringD1Ev>
     df2:	b7 01       	movw	r22, r14
     df4:	ce 01       	movw	r24, r28
     df6:	01 96       	adiw	r24, 0x01	; 1
     df8:	0e 94 81 16 	call	0x2d02	; 0x2d02 <_ZN6StringC1ERKS_>
     dfc:	f7 01       	movw	r30, r14
     dfe:	86 81       	ldd	r24, Z+6	; 0x06
     e00:	8f 83       	std	Y+7, r24	; 0x07
	MainMenu->Items.add(*MenuItem3);
     e02:	f8 01       	movw	r30, r16
     e04:	80 81       	ld	r24, Z
     e06:	91 81       	ldd	r25, Z+1	; 0x01
     e08:	be 01       	movw	r22, r28
     e0a:	6f 5f       	subi	r22, 0xFF	; 255
     e0c:	7f 4f       	sbci	r23, 0xFF	; 255
     e0e:	06 96       	adiw	r24, 0x06	; 6
     e10:	f2 db       	rcall	.-2076   	; 0x5f6 <_ZN10LinkedListI11LCDMenuItemE3addES0_>
     e12:	ce 01       	movw	r24, r28
     e14:	01 96       	adiw	r24, 0x01	; 1
     e16:	46 df       	rcall	.-372    	; 0xca4 <_ZN11LCDMenuItemD1Ev>
	Serial.println("AddedMenu");
     e18:	62 e9       	ldi	r22, 0x92	; 146
     e1a:	72 e0       	ldi	r23, 0x02	; 2
     e1c:	86 ee       	ldi	r24, 0xE6	; 230
     e1e:	93 e0       	ldi	r25, 0x03	; 3
     e20:	0e 94 1a 11 	call	0x2234	; 0x2234 <_ZN5Print7printlnEPKc>
}
     e24:	ad 96       	adiw	r28, 0x2d	; 45
     e26:	0f b6       	in	r0, 0x3f	; 63
     e28:	f8 94       	cli
     e2a:	de bf       	out	0x3e, r29	; 62
     e2c:	0f be       	out	0x3f, r0	; 63
     e2e:	cd bf       	out	0x3d, r28	; 61
     e30:	df 91       	pop	r29
     e32:	cf 91       	pop	r28
     e34:	1f 91       	pop	r17
     e36:	0f 91       	pop	r16
     e38:	ff 90       	pop	r15
     e3a:	ef 90       	pop	r14
     e3c:	df 90       	pop	r13
     e3e:	cf 90       	pop	r12
     e40:	bf 90       	pop	r11
     e42:	af 90       	pop	r10
     e44:	9f 90       	pop	r9
     e46:	8f 90       	pop	r8
     e48:	08 95       	ret

00000e4a <_ZN12ClickEncoderC1Ehhhhb>:
#  endif
#endif

// ----------------------------------------------------------------------------

ClickEncoder::ClickEncoder(uint8_t A, uint8_t B, uint8_t BTN, uint8_t stepsPerNotch, bool active)
     e4a:	ef 92       	push	r14
     e4c:	0f 93       	push	r16
     e4e:	1f 93       	push	r17
     e50:	cf 93       	push	r28
     e52:	df 93       	push	r29
     e54:	ec 01       	movw	r28, r24
     e56:	86 2f       	mov	r24, r22
  : doubleClickEnabled(true), accelerationEnabled(true),
    delta(0), last(0), acceleration(0),
    button(Open), steps(stepsPerNotch),
    pinA(A), pinB(B), pinBTN(BTN), pinsActive(active)
     e58:	68 83       	st	Y, r22
     e5a:	49 83       	std	Y+1, r20	; 0x01
     e5c:	2a 83       	std	Y+2, r18	; 0x02
     e5e:	eb 82       	std	Y+3, r14	; 0x03
     e60:	1d 82       	std	Y+5, r1	; 0x05
     e62:	1c 82       	std	Y+4, r1	; 0x04
     e64:	1f 82       	std	Y+7, r1	; 0x07
     e66:	1e 82       	std	Y+6, r1	; 0x06
     e68:	08 87       	std	Y+8, r16	; 0x08
     e6a:	1a 86       	std	Y+10, r1	; 0x0a
     e6c:	19 86       	std	Y+9, r1	; 0x09
     e6e:	1b 86       	std	Y+11, r1	; 0x0b
     e70:	91 e0       	ldi	r25, 0x01	; 1
     e72:	9c 87       	std	Y+12, r25	; 0x0c
     e74:	9d 87       	std	Y+13, r25	; 0x0d
{
  uint8_t configType = (pinsActive == LOW) ? INPUT_PULLUP : INPUT;
     e76:	ee 20       	and	r14, r14
     e78:	11 f0       	breq	.+4      	; 0xe7e <_ZN12ClickEncoderC1Ehhhhb+0x34>
     e7a:	10 e0       	ldi	r17, 0x00	; 0
     e7c:	01 c0       	rjmp	.+2      	; 0xe80 <_ZN12ClickEncoderC1Ehhhhb+0x36>
     e7e:	12 e0       	ldi	r17, 0x02	; 2
  pinMode(pinA, configType);
     e80:	61 2f       	mov	r22, r17
     e82:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <pinMode>
  pinMode(pinB, configType);
     e86:	61 2f       	mov	r22, r17
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <pinMode>
  pinMode(pinBTN, configType);
     e8e:	61 2f       	mov	r22, r17
     e90:	8a 81       	ldd	r24, Y+2	; 0x02
     e92:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <pinMode>
  
  if (digitalRead(pinA) == pinsActive) {
     e96:	88 81       	ld	r24, Y
     e98:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <digitalRead>
     e9c:	2b 81       	ldd	r18, Y+3	; 0x03
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	82 17       	cp	r24, r18
     ea2:	93 07       	cpc	r25, r19
     ea4:	21 f4       	brne	.+8      	; 0xeae <_ZN12ClickEncoderC1Ehhhhb+0x64>
    last = 3;
     ea6:	83 e0       	ldi	r24, 0x03	; 3
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	9f 83       	std	Y+7, r25	; 0x07
     eac:	8e 83       	std	Y+6, r24	; 0x06
  }

  if (digitalRead(pinB) == pinsActive) {
     eae:	89 81       	ldd	r24, Y+1	; 0x01
     eb0:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <digitalRead>
     eb4:	2b 81       	ldd	r18, Y+3	; 0x03
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	82 17       	cp	r24, r18
     eba:	93 07       	cpc	r25, r19
     ebc:	31 f4       	brne	.+12     	; 0xeca <_ZN12ClickEncoderC1Ehhhhb+0x80>
    last ^=1;
     ebe:	8e 81       	ldd	r24, Y+6	; 0x06
     ec0:	9f 81       	ldd	r25, Y+7	; 0x07
     ec2:	21 e0       	ldi	r18, 0x01	; 1
     ec4:	82 27       	eor	r24, r18
     ec6:	9f 83       	std	Y+7, r25	; 0x07
     ec8:	8e 83       	std	Y+6, r24	; 0x06
  }
}
     eca:	df 91       	pop	r29
     ecc:	cf 91       	pop	r28
     ece:	1f 91       	pop	r17
     ed0:	0f 91       	pop	r16
     ed2:	ef 90       	pop	r14
     ed4:	08 95       	ret

00000ed6 <_ZN5I2CIOC1Ev>:
      // Remove the values which are not inputs and get the value of the pin
      pinVal = this->read() & _dirMask;
      pinVal = ( pinVal >> pin ) & 0x01; // Get the pin value
   }
   return (pinVal);
}
     ed6:	fc 01       	movw	r30, r24
     ed8:	12 82       	std	Z+2, r1	; 0x02
     eda:	8f ef       	ldi	r24, 0xFF	; 255
     edc:	81 83       	std	Z+1, r24	; 0x01
     ede:	10 82       	st	Z, r1
     ee0:	13 82       	std	Z+3, r1	; 0x03
     ee2:	08 95       	ret

00000ee4 <_ZN5I2CIO8portModeEh>:
     ee4:	fc 01       	movw	r30, r24
     ee6:	23 81       	ldd	r18, Z+3	; 0x03
     ee8:	22 23       	and	r18, r18
     eea:	39 f0       	breq	.+14     	; 0xefa <_ZN5I2CIO8portModeEh+0x16>
     eec:	61 11       	cpse	r22, r1
     eee:	03 c0       	rjmp	.+6      	; 0xef6 <_ZN5I2CIO8portModeEh+0x12>
     ef0:	2f ef       	ldi	r18, 0xFF	; 255
     ef2:	21 83       	std	Z+1, r18	; 0x01
     ef4:	08 95       	ret
     ef6:	fc 01       	movw	r30, r24
     ef8:	11 82       	std	Z+1, r1	; 0x01
     efa:	08 95       	ret

00000efc <_ZN5I2CIO5beginEh>:
     efc:	cf 93       	push	r28
     efe:	df 93       	push	r29
     f00:	ec 01       	movw	r28, r24
     f02:	6a 83       	std	Y+2, r22	; 0x02
     f04:	82 e9       	ldi	r24, 0x92	; 146
     f06:	93 e0       	ldi	r25, 0x03	; 3
     f08:	a7 d4       	rcall	.+2382   	; 0x1858 <_ZN7TwoWire5beginEv>
     f0a:	41 e0       	ldi	r20, 0x01	; 1
     f0c:	6a 81       	ldd	r22, Y+2	; 0x02
     f0e:	82 e9       	ldi	r24, 0x92	; 146
     f10:	93 e0       	ldi	r25, 0x03	; 3
     f12:	b8 d4       	rcall	.+2416   	; 0x1884 <_ZN7TwoWire11requestFromEhh>
     f14:	91 e0       	ldi	r25, 0x01	; 1
     f16:	81 11       	cpse	r24, r1
     f18:	01 c0       	rjmp	.+2      	; 0xf1c <_ZN5I2CIO5beginEh+0x20>
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	9b 83       	std	Y+3, r25	; 0x03
     f1e:	82 e9       	ldi	r24, 0x92	; 146
     f20:	93 e0       	ldi	r25, 0x03	; 3
     f22:	07 d4       	rcall	.+2062   	; 0x1732 <_ZN7TwoWire4readEv>
     f24:	88 83       	st	Y, r24
     f26:	8b 81       	ldd	r24, Y+3	; 0x03
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	df 91       	pop	r29
     f2c:	cf 91       	pop	r28
     f2e:	08 95       	ret

00000f30 <_ZN5I2CIO5writeEh>:
}

//
// write
int I2CIO::write ( uint8_t value )
{
     f30:	cf 93       	push	r28
     f32:	df 93       	push	r29
   int status = 0;
   
   if ( _initialised )
     f34:	fc 01       	movw	r30, r24
     f36:	23 81       	ldd	r18, Z+3	; 0x03
     f38:	22 23       	and	r18, r18
     f3a:	99 f0       	breq	.+38     	; 0xf62 <_ZN5I2CIO5writeEh+0x32>
     f3c:	ec 01       	movw	r28, r24
   {
      // Only write HIGH the values of the ports that have been initialised as
      // outputs updating the output shadow of the device
      _shadow = ( value & ~(_dirMask) );
     f3e:	81 81       	ldd	r24, Z+1	; 0x01
     f40:	80 95       	com	r24
     f42:	68 23       	and	r22, r24
     f44:	60 83       	st	Z, r22
   
      Wire.beginTransmission ( _i2cAddr );
     f46:	62 81       	ldd	r22, Z+2	; 0x02
     f48:	82 e9       	ldi	r24, 0x92	; 146
     f4a:	93 e0       	ldi	r25, 0x03	; 3
     f4c:	9e d4       	rcall	.+2364   	; 0x188a <_ZN7TwoWire17beginTransmissionEh>
#if (ARDUINO <  100)
      Wire.send ( _shadow );
#else
      Wire.write ( _shadow );
     f4e:	68 81       	ld	r22, Y
     f50:	82 e9       	ldi	r24, 0x92	; 146
     f52:	93 e0       	ldi	r25, 0x03	; 3
     f54:	41 d4       	rcall	.+2178   	; 0x17d8 <_ZN7TwoWire5writeEh>
#endif  
      status = Wire.endTransmission ();
     f56:	82 e9       	ldi	r24, 0x92	; 146
     f58:	93 e0       	ldi	r25, 0x03	; 3
     f5a:	b3 d4       	rcall	.+2406   	; 0x18c2 <_ZN7TwoWire15endTransmissionEv>
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <_ZN5I2CIO5writeEh+0x36>

//
// write
int I2CIO::write ( uint8_t value )
{
   int status = 0;
     f62:	20 e0       	ldi	r18, 0x00	; 0
     f64:	30 e0       	ldi	r19, 0x00	; 0
#else
      Wire.write ( _shadow );
#endif  
      status = Wire.endTransmission ();
   }
   return ( (status == 0) );
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	23 2b       	or	r18, r19
     f6c:	11 f0       	breq	.+4      	; 0xf72 <_ZN5I2CIO5writeEh+0x42>
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	90 e0       	ldi	r25, 0x00	; 0
}
     f72:	df 91       	pop	r29
     f74:	cf 91       	pop	r28
     f76:	08 95       	ret

00000f78 <_ZN3LCD15setBacklightPinEh13t_backlighPol>:
// Switch fully on the LCD (backlight and LCD)
void LCD::on ( void )
{
   display();
   backlight();
}
     f78:	08 95       	ret

00000f7a <_ZN3LCD12setBacklightEh>:
     f7a:	08 95       	ret

00000f7c <_ZN3LCD5writeEh>:
     f7c:	dc 01       	movw	r26, r24
     f7e:	ed 91       	ld	r30, X+
     f80:	fc 91       	ld	r31, X
     f82:	02 84       	ldd	r0, Z+10	; 0x0a
     f84:	f3 85       	ldd	r31, Z+11	; 0x0b
     f86:	e0 2d       	mov	r30, r0
     f88:	41 e0       	ldi	r20, 0x01	; 1
     f8a:	19 95       	eicall
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	08 95       	ret

00000f92 <_ZN3LCDC1Ev>:
     f92:	fc 01       	movw	r30, r24
     f94:	13 82       	std	Z+3, r1	; 0x03
     f96:	12 82       	std	Z+2, r1	; 0x02
     f98:	20 ea       	ldi	r18, 0xA0	; 160
     f9a:	32 e0       	ldi	r19, 0x02	; 2
     f9c:	31 83       	std	Z+1, r19	; 0x01
     f9e:	20 83       	st	Z, r18
     fa0:	08 95       	ret

00000fa2 <_ZN3LCD9backlightEv>:
     fa2:	dc 01       	movw	r26, r24
     fa4:	ed 91       	ld	r30, X+
     fa6:	fc 91       	ld	r31, X
     fa8:	00 84       	ldd	r0, Z+8	; 0x08
     faa:	f1 85       	ldd	r31, Z+9	; 0x09
     fac:	e0 2d       	mov	r30, r0
     fae:	6f ef       	ldi	r22, 0xFF	; 255
     fb0:	19 95       	eicall
     fb2:	08 95       	ret

00000fb4 <_ZN3LCD7commandEh>:
     fb4:	dc 01       	movw	r26, r24
     fb6:	ed 91       	ld	r30, X+
     fb8:	fc 91       	ld	r31, X
     fba:	02 84       	ldd	r0, Z+10	; 0x0a
     fbc:	f3 85       	ldd	r31, Z+11	; 0x0b
     fbe:	e0 2d       	mov	r30, r0
     fc0:	40 e0       	ldi	r20, 0x00	; 0
     fc2:	19 95       	eicall
     fc4:	08 95       	ret

00000fc6 <_ZN3LCD5clearEv>:
     fc6:	61 e0       	ldi	r22, 0x01	; 1
     fc8:	f5 df       	rcall	.-22     	; 0xfb4 <_ZN3LCD7commandEh>
     fca:	80 ed       	ldi	r24, 0xD0	; 208
     fcc:	97 e0       	ldi	r25, 0x07	; 7
     fce:	0c 94 80 14 	jmp	0x2900	; 0x2900 <delayMicroseconds>
     fd2:	08 95       	ret

00000fd4 <_ZN3LCD9setCursorEhh>:
     fd4:	cf 93       	push	r28
     fd6:	df 93       	push	r29
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
     fdc:	28 97       	sbiw	r28, 0x08	; 8
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	f8 94       	cli
     fe2:	de bf       	out	0x3e, r29	; 62
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	cd bf       	out	0x3d, r28	; 61
     fe8:	fc 01       	movw	r30, r24
     fea:	1d 82       	std	Y+5, r1	; 0x05
     fec:	80 e4       	ldi	r24, 0x40	; 64
     fee:	8e 83       	std	Y+6, r24	; 0x06
     ff0:	94 e1       	ldi	r25, 0x14	; 20
     ff2:	9f 83       	std	Y+7, r25	; 0x07
     ff4:	94 e5       	ldi	r25, 0x54	; 84
     ff6:	98 87       	std	Y+8, r25	; 0x08
     ff8:	19 82       	std	Y+1, r1	; 0x01
     ffa:	8a 83       	std	Y+2, r24	; 0x02
     ffc:	80 e1       	ldi	r24, 0x10	; 16
     ffe:	8b 83       	std	Y+3, r24	; 0x03
    1000:	80 e5       	ldi	r24, 0x50	; 80
    1002:	8c 83       	std	Y+4, r24	; 0x04
    1004:	87 81       	ldd	r24, Z+7	; 0x07
    1006:	48 17       	cp	r20, r24
    1008:	10 f0       	brcs	.+4      	; 0x100e <_ZN3LCD9setCursorEhh+0x3a>
    100a:	4f ef       	ldi	r20, 0xFF	; 255
    100c:	48 0f       	add	r20, r24
    100e:	90 85       	ldd	r25, Z+8	; 0x08
    1010:	90 31       	cpi	r25, 0x10	; 16
    1012:	61 f4       	brne	.+24     	; 0x102c <_ZN3LCD9setCursorEhh+0x58>
    1014:	84 30       	cpi	r24, 0x04	; 4
    1016:	51 f4       	brne	.+20     	; 0x102c <_ZN3LCD9setCursorEhh+0x58>
    1018:	de 01       	movw	r26, r28
    101a:	a4 0f       	add	r26, r20
    101c:	b1 1d       	adc	r27, r1
    101e:	11 96       	adiw	r26, 0x01	; 1
    1020:	8c 91       	ld	r24, X
    1022:	68 0f       	add	r22, r24
    1024:	60 68       	ori	r22, 0x80	; 128
    1026:	cf 01       	movw	r24, r30
    1028:	c5 df       	rcall	.-118    	; 0xfb4 <_ZN3LCD7commandEh>
    102a:	09 c0       	rjmp	.+18     	; 0x103e <_ZN3LCD9setCursorEhh+0x6a>
    102c:	de 01       	movw	r26, r28
    102e:	a4 0f       	add	r26, r20
    1030:	b1 1d       	adc	r27, r1
    1032:	15 96       	adiw	r26, 0x05	; 5
    1034:	9c 91       	ld	r25, X
    1036:	69 0f       	add	r22, r25
    1038:	60 68       	ori	r22, 0x80	; 128
    103a:	cf 01       	movw	r24, r30
    103c:	bb df       	rcall	.-138    	; 0xfb4 <_ZN3LCD7commandEh>
    103e:	28 96       	adiw	r28, 0x08	; 8
    1040:	0f b6       	in	r0, 0x3f	; 63
    1042:	f8 94       	cli
    1044:	de bf       	out	0x3e, r29	; 62
    1046:	0f be       	out	0x3f, r0	; 63
    1048:	cd bf       	out	0x3d, r28	; 61
    104a:	df 91       	pop	r29
    104c:	cf 91       	pop	r28
    104e:	08 95       	ret

00001050 <_ZN3LCD7displayEv>:
    1050:	fc 01       	movw	r30, r24
    1052:	65 81       	ldd	r22, Z+5	; 0x05
    1054:	26 2f       	mov	r18, r22
    1056:	24 60       	ori	r18, 0x04	; 4
    1058:	25 83       	std	Z+5, r18	; 0x05
    105a:	6c 60       	ori	r22, 0x0C	; 12
    105c:	ab cf       	rjmp	.-170    	; 0xfb4 <_ZN3LCD7commandEh>
    105e:	08 95       	ret

00001060 <_ZN3LCD5beginEhhh>:
// can't assume that its in that state when a sketch starts (and the
// LiquidCrystal constructor is called).
// A call to begin() will reinitialize the LCD.
//
void LCD::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
    1060:	cf 93       	push	r28
    1062:	df 93       	push	r29
    1064:	ec 01       	movw	r28, r24
   if (lines > 1) 
    1066:	42 30       	cpi	r20, 0x02	; 2
    1068:	18 f0       	brcs	.+6      	; 0x1070 <_ZN3LCD5beginEhhh+0x10>
   {
      _displayfunction |= LCD_2LINE;
    106a:	8c 81       	ldd	r24, Y+4	; 0x04
    106c:	88 60       	ori	r24, 0x08	; 8
    106e:	8c 83       	std	Y+4, r24	; 0x04
   }
   _numlines = lines;
    1070:	4f 83       	std	Y+7, r20	; 0x07
   _cols = cols;
    1072:	68 87       	std	Y+8, r22	; 0x08
   
   // for some 1 line displays you can select a 10 pixel high font
   // ------------------------------------------------------------
   if ((dotsize != LCD_5x8DOTS) && (lines == 1)) 
    1074:	22 23       	and	r18, r18
    1076:	29 f0       	breq	.+10     	; 0x1082 <_ZN3LCD5beginEhhh+0x22>
    1078:	41 30       	cpi	r20, 0x01	; 1
    107a:	19 f4       	brne	.+6      	; 0x1082 <_ZN3LCD5beginEhhh+0x22>
   {
      _displayfunction |= LCD_5x10DOTS;
    107c:	8c 81       	ldd	r24, Y+4	; 0x04
    107e:	84 60       	ori	r24, 0x04	; 4
    1080:	8c 83       	std	Y+4, r24	; 0x04
   // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
   // according to datasheet, we need at least 40ms after power rises above 2.7V
   // before sending commands. Arduino can turn on way before 4.5V so we'll wait 
   // 50
   // ---------------------------------------------------------------------------
   delay (100); // 100ms delay
    1082:	64 e6       	ldi	r22, 0x64	; 100
    1084:	70 e0       	ldi	r23, 0x00	; 0
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	0e 94 57 14 	call	0x28ae	; 0x28ae <delay>
   
   //put the LCD into 4 bit or 8 bit mode
   // -------------------------------------
   if (! (_displayfunction & LCD_8BITMODE)) 
    108e:	6c 81       	ldd	r22, Y+4	; 0x04
    1090:	64 fd       	sbrc	r22, 4
    1092:	31 c0       	rjmp	.+98     	; 0x10f6 <_ZN3LCD5beginEhhh+0x96>
   {
      // this is according to the hitachi HD44780 datasheet
      // figure 24, pg 46
      
      // we start in 8bit mode, try to set 4 bit mode
      send(0x03, FOUR_BITS);
    1094:	e8 81       	ld	r30, Y
    1096:	f9 81       	ldd	r31, Y+1	; 0x01
    1098:	02 84       	ldd	r0, Z+10	; 0x0a
    109a:	f3 85       	ldd	r31, Z+11	; 0x0b
    109c:	e0 2d       	mov	r30, r0
    109e:	42 e0       	ldi	r20, 0x02	; 2
    10a0:	63 e0       	ldi	r22, 0x03	; 3
    10a2:	ce 01       	movw	r24, r28
    10a4:	19 95       	eicall
      delayMicroseconds(4500); // wait min 4.1ms
    10a6:	84 e9       	ldi	r24, 0x94	; 148
    10a8:	91 e1       	ldi	r25, 0x11	; 17
    10aa:	0e 94 80 14 	call	0x2900	; 0x2900 <delayMicroseconds>
      
      // second try
      send ( 0x03, FOUR_BITS );
    10ae:	e8 81       	ld	r30, Y
    10b0:	f9 81       	ldd	r31, Y+1	; 0x01
    10b2:	02 84       	ldd	r0, Z+10	; 0x0a
    10b4:	f3 85       	ldd	r31, Z+11	; 0x0b
    10b6:	e0 2d       	mov	r30, r0
    10b8:	42 e0       	ldi	r20, 0x02	; 2
    10ba:	63 e0       	ldi	r22, 0x03	; 3
    10bc:	ce 01       	movw	r24, r28
    10be:	19 95       	eicall
      delayMicroseconds(4500); // wait min 4.1ms
    10c0:	84 e9       	ldi	r24, 0x94	; 148
    10c2:	91 e1       	ldi	r25, 0x11	; 17
    10c4:	0e 94 80 14 	call	0x2900	; 0x2900 <delayMicroseconds>
      
      // third go!
      send( 0x03, FOUR_BITS );
    10c8:	e8 81       	ld	r30, Y
    10ca:	f9 81       	ldd	r31, Y+1	; 0x01
    10cc:	02 84       	ldd	r0, Z+10	; 0x0a
    10ce:	f3 85       	ldd	r31, Z+11	; 0x0b
    10d0:	e0 2d       	mov	r30, r0
    10d2:	42 e0       	ldi	r20, 0x02	; 2
    10d4:	63 e0       	ldi	r22, 0x03	; 3
    10d6:	ce 01       	movw	r24, r28
    10d8:	19 95       	eicall
      delayMicroseconds(150);
    10da:	86 e9       	ldi	r24, 0x96	; 150
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	0e 94 80 14 	call	0x2900	; 0x2900 <delayMicroseconds>
      
      // finally, set to 4-bit interface
      send ( 0x02, FOUR_BITS ); 
    10e2:	e8 81       	ld	r30, Y
    10e4:	f9 81       	ldd	r31, Y+1	; 0x01
    10e6:	02 84       	ldd	r0, Z+10	; 0x0a
    10e8:	f3 85       	ldd	r31, Z+11	; 0x0b
    10ea:	e0 2d       	mov	r30, r0
    10ec:	42 e0       	ldi	r20, 0x02	; 2
    10ee:	62 e0       	ldi	r22, 0x02	; 2
    10f0:	ce 01       	movw	r24, r28
    10f2:	19 95       	eicall
    10f4:	13 c0       	rjmp	.+38     	; 0x111c <_ZN3LCD5beginEhhh+0xbc>
   {
      // this is according to the hitachi HD44780 datasheet
      // page 45 figure 23
      
      // Send function set command sequence
      command(LCD_FUNCTIONSET | _displayfunction);
    10f6:	60 62       	ori	r22, 0x20	; 32
    10f8:	ce 01       	movw	r24, r28
    10fa:	5c df       	rcall	.-328    	; 0xfb4 <_ZN3LCD7commandEh>
      delayMicroseconds(4500);  // wait more than 4.1ms
    10fc:	84 e9       	ldi	r24, 0x94	; 148
    10fe:	91 e1       	ldi	r25, 0x11	; 17
    1100:	0e 94 80 14 	call	0x2900	; 0x2900 <delayMicroseconds>
      
      // second try
      command(LCD_FUNCTIONSET | _displayfunction);
    1104:	6c 81       	ldd	r22, Y+4	; 0x04
    1106:	60 62       	ori	r22, 0x20	; 32
    1108:	ce 01       	movw	r24, r28
    110a:	54 df       	rcall	.-344    	; 0xfb4 <_ZN3LCD7commandEh>
      delayMicroseconds(150);
    110c:	86 e9       	ldi	r24, 0x96	; 150
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	0e 94 80 14 	call	0x2900	; 0x2900 <delayMicroseconds>
      
      // third go
      command(LCD_FUNCTIONSET | _displayfunction);
    1114:	6c 81       	ldd	r22, Y+4	; 0x04
    1116:	60 62       	ori	r22, 0x20	; 32
    1118:	ce 01       	movw	r24, r28
    111a:	4c df       	rcall	.-360    	; 0xfb4 <_ZN3LCD7commandEh>
   }
   
   // finally, set # lines, font size, etc.
   command(LCD_FUNCTIONSET | _displayfunction);  
    111c:	6c 81       	ldd	r22, Y+4	; 0x04
    111e:	60 62       	ori	r22, 0x20	; 32
    1120:	ce 01       	movw	r24, r28
    1122:	48 df       	rcall	.-368    	; 0xfb4 <_ZN3LCD7commandEh>
   
   // turn the display on with no cursor or blinking default
   _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
    1124:	84 e0       	ldi	r24, 0x04	; 4
    1126:	8d 83       	std	Y+5, r24	; 0x05
   display();
    1128:	ce 01       	movw	r24, r28
    112a:	92 df       	rcall	.-220    	; 0x1050 <_ZN3LCD7displayEv>
   
   // clear the LCD
   clear();
    112c:	ce 01       	movw	r24, r28
    112e:	4b df       	rcall	.-362    	; 0xfc6 <_ZN3LCD5clearEv>
   
   // Initialize to default text direction (for romance languages)
   _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    1130:	82 e0       	ldi	r24, 0x02	; 2
    1132:	8e 83       	std	Y+6, r24	; 0x06
   // set the entry mode
   command(LCD_ENTRYMODESET | _displaymode);
    1134:	66 e0       	ldi	r22, 0x06	; 6
    1136:	ce 01       	movw	r24, r28
    1138:	3d df       	rcall	.-390    	; 0xfb4 <_ZN3LCD7commandEh>

   backlight();
    113a:	ce 01       	movw	r24, r28
    113c:	32 df       	rcall	.-412    	; 0xfa2 <_ZN3LCD9backlightEv>

}
    113e:	df 91       	pop	r29
    1140:	cf 91       	pop	r28
    1142:	08 95       	ret

00001144 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>:
   // Initialise pin mapping
   _data_pins[0] = ( 1 << d4 );
   _data_pins[1] = ( 1 << d5 );
   _data_pins[2] = ( 1 << d6 );
   _data_pins[3] = ( 1 << d7 );   
}
    1144:	21 e0       	ldi	r18, 0x01	; 1
    1146:	01 c0       	rjmp	.+2      	; 0x114a <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x6>
    1148:	22 0f       	add	r18, r18
    114a:	6a 95       	dec	r22
    114c:	ea f7       	brpl	.-6      	; 0x1148 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x4>
    114e:	dc 01       	movw	r26, r24
    1150:	1b 96       	adiw	r26, 0x0b	; 11
    1152:	2c 93       	st	X, r18
    1154:	1b 97       	sbiw	r26, 0x0b	; 11
    1156:	19 96       	adiw	r26, 0x09	; 9
    1158:	4c 93       	st	X, r20
    115a:	19 97       	sbiw	r26, 0x09	; 9
    115c:	ed 91       	ld	r30, X+
    115e:	fc 91       	ld	r31, X
    1160:	00 84       	ldd	r0, Z+8	; 0x08
    1162:	f1 85       	ldd	r31, Z+9	; 0x09
    1164:	e0 2d       	mov	r30, r0
    1166:	60 e0       	ldi	r22, 0x00	; 0
    1168:	19 95       	eicall
    116a:	08 95       	ret

0000116c <_ZN17LiquidCrystal_I2C12setBacklightEh>:
    116c:	fc 01       	movw	r30, r24
    116e:	83 85       	ldd	r24, Z+11	; 0x0b
    1170:	88 23       	and	r24, r24
    1172:	89 f0       	breq	.+34     	; 0x1196 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x2a>
    1174:	91 85       	ldd	r25, Z+9	; 0x09
    1176:	91 11       	cpse	r25, r1
    1178:	03 c0       	rjmp	.+6      	; 0x1180 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x14>
    117a:	61 11       	cpse	r22, r1
    117c:	05 c0       	rjmp	.+10     	; 0x1188 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x1c>
    117e:	06 c0       	rjmp	.+12     	; 0x118c <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    1180:	91 30       	cpi	r25, 0x01	; 1
    1182:	21 f4       	brne	.+8      	; 0x118c <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    1184:	61 11       	cpse	r22, r1
    1186:	02 c0       	rjmp	.+4      	; 0x118c <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    1188:	84 87       	std	Z+12, r24	; 0x0c
    118a:	01 c0       	rjmp	.+2      	; 0x118e <_ZN17LiquidCrystal_I2C12setBacklightEh+0x22>
    118c:	14 86       	std	Z+12, r1	; 0x0c
    118e:	64 85       	ldd	r22, Z+12	; 0x0c
    1190:	cf 01       	movw	r24, r30
    1192:	0d 96       	adiw	r24, 0x0d	; 13
    1194:	cd ce       	rjmp	.-614    	; 0xf30 <_ZN5I2CIO5writeEh>
    1196:	08 95       	ret

00001198 <_ZN17LiquidCrystal_I2CC1Eh>:
    1198:	1f 93       	push	r17
    119a:	cf 93       	push	r28
    119c:	df 93       	push	r29
    119e:	ec 01       	movw	r28, r24
    11a0:	16 2f       	mov	r17, r22
    11a2:	f7 de       	rcall	.-530    	; 0xf92 <_ZN3LCDC1Ev>
    11a4:	80 eb       	ldi	r24, 0xB0	; 176
    11a6:	92 e0       	ldi	r25, 0x02	; 2
    11a8:	99 83       	std	Y+1, r25	; 0x01
    11aa:	88 83       	st	Y, r24
    11ac:	ce 01       	movw	r24, r28
    11ae:	0d 96       	adiw	r24, 0x0d	; 13
    11b0:	92 de       	rcall	.-732    	; 0xed6 <_ZN5I2CIOC1Ev>
    11b2:	1a 87       	std	Y+10, r17	; 0x0a
    11b4:	1b 86       	std	Y+11, r1	; 0x0b
    11b6:	1c 86       	std	Y+12, r1	; 0x0c
    11b8:	19 86       	std	Y+9, r1	; 0x09
    11ba:	80 e4       	ldi	r24, 0x40	; 64
    11bc:	89 8b       	std	Y+17, r24	; 0x11
    11be:	80 e2       	ldi	r24, 0x20	; 32
    11c0:	8a 8b       	std	Y+18, r24	; 0x12
    11c2:	80 e1       	ldi	r24, 0x10	; 16
    11c4:	8b 8b       	std	Y+19, r24	; 0x13
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	8c 8b       	std	Y+20, r24	; 0x14
    11ca:	82 e0       	ldi	r24, 0x02	; 2
    11cc:	8d 8b       	std	Y+21, r24	; 0x15
    11ce:	84 e0       	ldi	r24, 0x04	; 4
    11d0:	8e 8b       	std	Y+22, r24	; 0x16
    11d2:	88 e0       	ldi	r24, 0x08	; 8
    11d4:	8f 8b       	std	Y+23, r24	; 0x17
    11d6:	df 91       	pop	r29
    11d8:	cf 91       	pop	r28
    11da:	1f 91       	pop	r17
    11dc:	08 95       	ret

000011de <_ZN17LiquidCrystal_I2C4initEv>:
    11de:	0f 93       	push	r16
    11e0:	1f 93       	push	r17
    11e2:	cf 93       	push	r28
    11e4:	df 93       	push	r29
    11e6:	ec 01       	movw	r28, r24
    11e8:	8c 01       	movw	r16, r24
    11ea:	03 5f       	subi	r16, 0xF3	; 243
    11ec:	1f 4f       	sbci	r17, 0xFF	; 255
    11ee:	6a 85       	ldd	r22, Y+10	; 0x0a
    11f0:	c8 01       	movw	r24, r16
    11f2:	84 de       	rcall	.-760    	; 0xefc <_ZN5I2CIO5beginEh>
    11f4:	01 97       	sbiw	r24, 0x01	; 1
    11f6:	51 f4       	brne	.+20     	; 0x120c <_ZN17LiquidCrystal_I2C4initEv+0x2e>
    11f8:	61 e0       	ldi	r22, 0x01	; 1
    11fa:	c8 01       	movw	r24, r16
    11fc:	73 de       	rcall	.-794    	; 0xee4 <_ZN5I2CIO8portModeEh>
    11fe:	1c 82       	std	Y+4, r1	; 0x04
    1200:	60 e0       	ldi	r22, 0x00	; 0
    1202:	c8 01       	movw	r24, r16
    1204:	95 de       	rcall	.-726    	; 0xf30 <_ZN5I2CIO5writeEh>
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <_ZN17LiquidCrystal_I2C4initEv+0x32>
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	df 91       	pop	r29
    1212:	cf 91       	pop	r28
    1214:	1f 91       	pop	r17
    1216:	0f 91       	pop	r16
    1218:	08 95       	ret

0000121a <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
}

//
// pulseEnable
void LiquidCrystal_I2C::pulseEnable (uint8_t data)
{
    121a:	ff 92       	push	r15
    121c:	0f 93       	push	r16
    121e:	1f 93       	push	r17
    1220:	cf 93       	push	r28
    1222:	df 93       	push	r29
    1224:	ec 01       	movw	r28, r24
    1226:	f6 2e       	mov	r15, r22
   _i2cio.write (data | _En);   // En HIGH
    1228:	8c 01       	movw	r16, r24
    122a:	03 5f       	subi	r16, 0xF3	; 243
    122c:	1f 4f       	sbci	r17, 0xFF	; 255
    122e:	99 89       	ldd	r25, Y+17	; 0x11
    1230:	69 2b       	or	r22, r25
    1232:	c8 01       	movw	r24, r16
    1234:	7d de       	rcall	.-774    	; 0xf30 <_ZN5I2CIO5writeEh>
   _i2cio.write (data & ~_En);  // En LOW
    1236:	99 89       	ldd	r25, Y+17	; 0x11
    1238:	90 95       	com	r25
    123a:	6f 2d       	mov	r22, r15
    123c:	69 23       	and	r22, r25
    123e:	c8 01       	movw	r24, r16
    1240:	77 de       	rcall	.-786    	; 0xf30 <_ZN5I2CIO5writeEh>
    1242:	df 91       	pop	r29
    1244:	cf 91       	pop	r28
    1246:	1f 91       	pop	r17
    1248:	0f 91       	pop	r16
    124a:	ff 90       	pop	r15
    124c:	08 95       	ret

0000124e <_ZN17LiquidCrystal_I2C10write4bitsEhh>:
}

//
// write4bits
void LiquidCrystal_I2C::write4bits ( uint8_t value, uint8_t mode ) 
{
    124e:	dc 01       	movw	r26, r24
    1250:	fc 01       	movw	r30, r24
    1252:	74 96       	adiw	r30, 0x14	; 20
    1254:	9c 01       	movw	r18, r24
    1256:	28 5e       	subi	r18, 0xE8	; 232
    1258:	3f 4f       	sbci	r19, 0xFF	; 255
   uint8_t pinMapValue = 0;
    125a:	90 e0       	ldi	r25, 0x00	; 0
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
   {
      if ( ( value & 0x1 ) == 1 )
    125c:	60 ff       	sbrs	r22, 0
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x16>
      {
         pinMapValue |= _data_pins[i];
    1260:	80 81       	ld	r24, Z
    1262:	98 2b       	or	r25, r24
      }
      value = ( value >> 1 );
    1264:	66 95       	lsr	r22
    1266:	31 96       	adiw	r30, 0x01	; 1
{
   uint8_t pinMapValue = 0;
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
    1268:	e2 17       	cp	r30, r18
    126a:	f3 07       	cpc	r31, r19
    126c:	b9 f7       	brne	.-18     	; 0x125c <_ZN17LiquidCrystal_I2C10write4bitsEhh+0xe>
      value = ( value >> 1 );
   }
   
   // Is it a command or data
   // -----------------------
   if ( mode == DATA )
    126e:	41 30       	cpi	r20, 0x01	; 1
    1270:	19 f4       	brne	.+6      	; 0x1278 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x2a>
   {
      mode = _Rs;
    1272:	53 96       	adiw	r26, 0x13	; 19
    1274:	4c 91       	ld	r20, X
    1276:	53 97       	sbiw	r26, 0x13	; 19
    1278:	1c 96       	adiw	r26, 0x0c	; 12
    127a:	6c 91       	ld	r22, X
    127c:	1c 97       	sbiw	r26, 0x0c	; 12
    127e:	69 2b       	or	r22, r25
   }
   
   pinMapValue |= mode | _backlightStsMask;
    1280:	64 2b       	or	r22, r20
   pulseEnable ( pinMapValue );
    1282:	cd 01       	movw	r24, r26
    1284:	ca cf       	rjmp	.-108    	; 0x121a <_ZN17LiquidCrystal_I2C11pulseEnableEh>
    1286:	08 95       	ret

00001288 <_ZN17LiquidCrystal_I2C4sendEhh>:
//----------------------------------------------------------------------------

//
// send - write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) 
{
    1288:	0f 93       	push	r16
    128a:	1f 93       	push	r17
    128c:	cf 93       	push	r28
    128e:	df 93       	push	r29
    1290:	8c 01       	movw	r16, r24
    1292:	c6 2f       	mov	r28, r22
    1294:	d4 2f       	mov	r29, r20
   // No need to use the delay routines since the time taken to write takes
   // longer that what is needed both for toggling and enable pin an to execute
   // the command.
   
   if ( mode == FOUR_BITS )
    1296:	42 30       	cpi	r20, 0x02	; 2
    1298:	21 f4       	brne	.+8      	; 0x12a2 <_ZN17LiquidCrystal_I2C4sendEhh+0x1a>
   {
      write4bits( (value & 0x0F), COMMAND );
    129a:	6f 70       	andi	r22, 0x0F	; 15
    129c:	40 e0       	ldi	r20, 0x00	; 0
    129e:	d7 df       	rcall	.-82     	; 0x124e <_ZN17LiquidCrystal_I2C10write4bitsEhh>
    12a0:	0f c0       	rjmp	.+30     	; 0x12c0 <_ZN17LiquidCrystal_I2C4sendEhh+0x38>
   }
   else 
   {
      write4bits( (value >> 4), mode );
    12a2:	70 e0       	ldi	r23, 0x00	; 0
    12a4:	75 95       	asr	r23
    12a6:	67 95       	ror	r22
    12a8:	75 95       	asr	r23
    12aa:	67 95       	ror	r22
    12ac:	75 95       	asr	r23
    12ae:	67 95       	ror	r22
    12b0:	75 95       	asr	r23
    12b2:	67 95       	ror	r22
    12b4:	cc df       	rcall	.-104    	; 0x124e <_ZN17LiquidCrystal_I2C10write4bitsEhh>
      write4bits( (value & 0x0F), mode);
    12b6:	6c 2f       	mov	r22, r28
    12b8:	6f 70       	andi	r22, 0x0F	; 15
    12ba:	4d 2f       	mov	r20, r29
    12bc:	c8 01       	movw	r24, r16
    12be:	c7 df       	rcall	.-114    	; 0x124e <_ZN17LiquidCrystal_I2C10write4bitsEhh>
   }
}
    12c0:	df 91       	pop	r29
    12c2:	cf 91       	pop	r28
    12c4:	1f 91       	pop	r17
    12c6:	0f 91       	pop	r16
    12c8:	08 95       	ret

000012ca <_ZN17LiquidCrystal_I2C5beginEhhh>:
// ---------------------------------------------------------------------------

//
// begin
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
    12ca:	ff 92       	push	r15
    12cc:	0f 93       	push	r16
    12ce:	1f 93       	push	r17
    12d0:	cf 93       	push	r28
    12d2:	df 93       	push	r29
    12d4:	ec 01       	movw	r28, r24
    12d6:	16 2f       	mov	r17, r22
    12d8:	04 2f       	mov	r16, r20
    12da:	f2 2e       	mov	r15, r18
   
   init();     // Initialise the I2C expander interface
    12dc:	80 df       	rcall	.-256    	; 0x11de <_ZN17LiquidCrystal_I2C4initEv>
   LCD::begin ( cols, lines, dotsize );   
    12de:	2f 2d       	mov	r18, r15
    12e0:	40 2f       	mov	r20, r16
    12e2:	61 2f       	mov	r22, r17
    12e4:	ce 01       	movw	r24, r28
    12e6:	bc de       	rcall	.-648    	; 0x1060 <_ZN3LCD5beginEhhh>
}
    12e8:	df 91       	pop	r29
    12ea:	cf 91       	pop	r28
    12ec:	1f 91       	pop	r17
    12ee:	0f 91       	pop	r16
    12f0:	ff 90       	pop	r15
    12f2:	08 95       	ret

000012f4 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    12f4:	10 92 91 03 	sts	0x0391, r1
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	80 93 8f 03 	sts	0x038F, r24
    12fe:	10 92 8e 03 	sts	0x038E, r1
    1302:	61 e0       	ldi	r22, 0x01	; 1
    1304:	84 e1       	ldi	r24, 0x14	; 20
    1306:	0e 94 94 15 	call	0x2b28	; 0x2b28 <digitalWrite>
    130a:	61 e0       	ldi	r22, 0x01	; 1
    130c:	85 e1       	ldi	r24, 0x15	; 21
    130e:	0e 94 94 15 	call	0x2b28	; 0x2b28 <digitalWrite>
    1312:	e9 eb       	ldi	r30, 0xB9	; 185
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	8e 7f       	andi	r24, 0xFE	; 254
    131a:	80 83       	st	Z, r24
    131c:	80 81       	ld	r24, Z
    131e:	8d 7f       	andi	r24, 0xFD	; 253
    1320:	80 83       	st	Z, r24
    1322:	88 e4       	ldi	r24, 0x48	; 72
    1324:	80 93 b8 00 	sts	0x00B8, r24
    1328:	85 e4       	ldi	r24, 0x45	; 69
    132a:	80 93 bc 00 	sts	0x00BC, r24
    132e:	08 95       	ret

00001330 <twi_readFrom>:
    1330:	41 32       	cpi	r20, 0x21	; 33
    1332:	08 f0       	brcs	.+2      	; 0x1336 <twi_readFrom+0x6>
    1334:	46 c0       	rjmp	.+140    	; 0x13c2 <twi_readFrom+0x92>
    1336:	90 91 91 03 	lds	r25, 0x0391
    133a:	91 11       	cpse	r25, r1
    133c:	fc cf       	rjmp	.-8      	; 0x1336 <twi_readFrom+0x6>
    133e:	31 e0       	ldi	r19, 0x01	; 1
    1340:	30 93 91 03 	sts	0x0391, r19
    1344:	20 93 8f 03 	sts	0x038F, r18
    1348:	2f ef       	ldi	r18, 0xFF	; 255
    134a:	20 93 24 03 	sts	0x0324, r18
    134e:	10 92 69 03 	sts	0x0369, r1
    1352:	24 0f       	add	r18, r20
    1354:	20 93 68 03 	sts	0x0368, r18
    1358:	30 93 90 03 	sts	0x0390, r19
    135c:	20 91 90 03 	lds	r18, 0x0390
    1360:	88 0f       	add	r24, r24
    1362:	82 2b       	or	r24, r18
    1364:	80 93 90 03 	sts	0x0390, r24
    1368:	80 91 8e 03 	lds	r24, 0x038E
    136c:	81 30       	cpi	r24, 0x01	; 1
    136e:	51 f4       	brne	.+20     	; 0x1384 <twi_readFrom+0x54>
    1370:	10 92 8e 03 	sts	0x038E, r1
    1374:	80 91 90 03 	lds	r24, 0x0390
    1378:	80 93 bb 00 	sts	0x00BB, r24
    137c:	85 ec       	ldi	r24, 0xC5	; 197
    137e:	80 93 bc 00 	sts	0x00BC, r24
    1382:	03 c0       	rjmp	.+6      	; 0x138a <twi_readFrom+0x5a>
    1384:	85 ee       	ldi	r24, 0xE5	; 229
    1386:	80 93 bc 00 	sts	0x00BC, r24
    138a:	80 91 91 03 	lds	r24, 0x0391
    138e:	81 30       	cpi	r24, 0x01	; 1
    1390:	e1 f3       	breq	.-8      	; 0x138a <twi_readFrom+0x5a>
    1392:	80 91 69 03 	lds	r24, 0x0369
    1396:	84 17       	cp	r24, r20
    1398:	10 f4       	brcc	.+4      	; 0x139e <twi_readFrom+0x6e>
    139a:	40 91 69 03 	lds	r20, 0x0369
    139e:	44 23       	and	r20, r20
    13a0:	89 f0       	breq	.+34     	; 0x13c4 <twi_readFrom+0x94>
    13a2:	aa e6       	ldi	r26, 0x6A	; 106
    13a4:	b3 e0       	ldi	r27, 0x03	; 3
    13a6:	fb 01       	movw	r30, r22
    13a8:	8f ef       	ldi	r24, 0xFF	; 255
    13aa:	84 0f       	add	r24, r20
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	01 96       	adiw	r24, 0x01	; 1
    13b0:	68 0f       	add	r22, r24
    13b2:	79 1f       	adc	r23, r25
    13b4:	8d 91       	ld	r24, X+
    13b6:	81 93       	st	Z+, r24
    13b8:	e6 17       	cp	r30, r22
    13ba:	f7 07       	cpc	r31, r23
    13bc:	d9 f7       	brne	.-10     	; 0x13b4 <twi_readFrom+0x84>
    13be:	94 2f       	mov	r25, r20
    13c0:	01 c0       	rjmp	.+2      	; 0x13c4 <twi_readFrom+0x94>
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	89 2f       	mov	r24, r25
    13c6:	08 95       	ret

000013c8 <twi_writeTo>:
    13c8:	0f 93       	push	r16
    13ca:	41 32       	cpi	r20, 0x21	; 33
    13cc:	08 f0       	brcs	.+2      	; 0x13d0 <twi_writeTo+0x8>
    13ce:	51 c0       	rjmp	.+162    	; 0x1472 <twi_writeTo+0xaa>
    13d0:	30 91 91 03 	lds	r19, 0x0391
    13d4:	31 11       	cpse	r19, r1
    13d6:	fc cf       	rjmp	.-8      	; 0x13d0 <twi_writeTo+0x8>
    13d8:	92 e0       	ldi	r25, 0x02	; 2
    13da:	90 93 91 03 	sts	0x0391, r25
    13de:	00 93 8f 03 	sts	0x038F, r16
    13e2:	9f ef       	ldi	r25, 0xFF	; 255
    13e4:	90 93 24 03 	sts	0x0324, r25
    13e8:	10 92 69 03 	sts	0x0369, r1
    13ec:	40 93 68 03 	sts	0x0368, r20
    13f0:	44 23       	and	r20, r20
    13f2:	71 f0       	breq	.+28     	; 0x1410 <twi_writeTo+0x48>
    13f4:	fb 01       	movw	r30, r22
    13f6:	aa e6       	ldi	r26, 0x6A	; 106
    13f8:	b3 e0       	ldi	r27, 0x03	; 3
    13fa:	41 50       	subi	r20, 0x01	; 1
    13fc:	50 e0       	ldi	r21, 0x00	; 0
    13fe:	4f 5f       	subi	r20, 0xFF	; 255
    1400:	5f 4f       	sbci	r21, 0xFF	; 255
    1402:	64 0f       	add	r22, r20
    1404:	75 1f       	adc	r23, r21
    1406:	91 91       	ld	r25, Z+
    1408:	9d 93       	st	X+, r25
    140a:	e6 17       	cp	r30, r22
    140c:	f7 07       	cpc	r31, r23
    140e:	d9 f7       	brne	.-10     	; 0x1406 <twi_writeTo+0x3e>
    1410:	10 92 90 03 	sts	0x0390, r1
    1414:	90 91 90 03 	lds	r25, 0x0390
    1418:	88 0f       	add	r24, r24
    141a:	89 2b       	or	r24, r25
    141c:	80 93 90 03 	sts	0x0390, r24
    1420:	80 91 8e 03 	lds	r24, 0x038E
    1424:	81 30       	cpi	r24, 0x01	; 1
    1426:	51 f4       	brne	.+20     	; 0x143c <twi_writeTo+0x74>
    1428:	10 92 8e 03 	sts	0x038E, r1
    142c:	80 91 90 03 	lds	r24, 0x0390
    1430:	80 93 bb 00 	sts	0x00BB, r24
    1434:	85 ec       	ldi	r24, 0xC5	; 197
    1436:	80 93 bc 00 	sts	0x00BC, r24
    143a:	03 c0       	rjmp	.+6      	; 0x1442 <twi_writeTo+0x7a>
    143c:	85 ee       	ldi	r24, 0xE5	; 229
    143e:	80 93 bc 00 	sts	0x00BC, r24
    1442:	22 23       	and	r18, r18
    1444:	41 f0       	breq	.+16     	; 0x1456 <twi_writeTo+0x8e>
    1446:	80 91 91 03 	lds	r24, 0x0391
    144a:	82 30       	cpi	r24, 0x02	; 2
    144c:	21 f4       	brne	.+8      	; 0x1456 <twi_writeTo+0x8e>
    144e:	80 91 91 03 	lds	r24, 0x0391
    1452:	82 30       	cpi	r24, 0x02	; 2
    1454:	e1 f3       	breq	.-8      	; 0x144e <twi_writeTo+0x86>
    1456:	80 91 24 03 	lds	r24, 0x0324
    145a:	8f 3f       	cpi	r24, 0xFF	; 255
    145c:	79 f0       	breq	.+30     	; 0x147c <twi_writeTo+0xb4>
    145e:	80 91 24 03 	lds	r24, 0x0324
    1462:	80 32       	cpi	r24, 0x20	; 32
    1464:	41 f0       	breq	.+16     	; 0x1476 <twi_writeTo+0xae>
    1466:	80 91 24 03 	lds	r24, 0x0324
    146a:	80 33       	cpi	r24, 0x30	; 48
    146c:	31 f0       	breq	.+12     	; 0x147a <twi_writeTo+0xb2>
    146e:	34 e0       	ldi	r19, 0x04	; 4
    1470:	05 c0       	rjmp	.+10     	; 0x147c <twi_writeTo+0xb4>
    1472:	31 e0       	ldi	r19, 0x01	; 1
    1474:	03 c0       	rjmp	.+6      	; 0x147c <twi_writeTo+0xb4>
    1476:	32 e0       	ldi	r19, 0x02	; 2
    1478:	01 c0       	rjmp	.+2      	; 0x147c <twi_writeTo+0xb4>
    147a:	33 e0       	ldi	r19, 0x03	; 3
    147c:	83 2f       	mov	r24, r19
    147e:	0f 91       	pop	r16
    1480:	08 95       	ret

00001482 <twi_transmit>:
    1482:	61 32       	cpi	r22, 0x21	; 33
    1484:	c8 f4       	brcc	.+50     	; 0x14b8 <twi_transmit+0x36>
    1486:	20 91 91 03 	lds	r18, 0x0391
    148a:	24 30       	cpi	r18, 0x04	; 4
    148c:	b9 f4       	brne	.+46     	; 0x14bc <twi_transmit+0x3a>
    148e:	60 93 46 03 	sts	0x0346, r22
    1492:	66 23       	and	r22, r22
    1494:	a9 f0       	breq	.+42     	; 0x14c0 <twi_transmit+0x3e>
    1496:	fc 01       	movw	r30, r24
    1498:	a8 e4       	ldi	r26, 0x48	; 72
    149a:	b3 e0       	ldi	r27, 0x03	; 3
    149c:	61 50       	subi	r22, 0x01	; 1
    149e:	26 2f       	mov	r18, r22
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	2f 5f       	subi	r18, 0xFF	; 255
    14a4:	3f 4f       	sbci	r19, 0xFF	; 255
    14a6:	28 0f       	add	r18, r24
    14a8:	39 1f       	adc	r19, r25
    14aa:	91 91       	ld	r25, Z+
    14ac:	9d 93       	st	X+, r25
    14ae:	e2 17       	cp	r30, r18
    14b0:	f3 07       	cpc	r31, r19
    14b2:	d9 f7       	brne	.-10     	; 0x14aa <twi_transmit+0x28>
    14b4:	80 e0       	ldi	r24, 0x00	; 0
    14b6:	08 95       	ret
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	08 95       	ret
    14bc:	82 e0       	ldi	r24, 0x02	; 2
    14be:	08 95       	ret
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	08 95       	ret

000014c4 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    14c4:	85 ed       	ldi	r24, 0xD5	; 213
    14c6:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    14ca:	ec eb       	ldi	r30, 0xBC	; 188
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	84 fd       	sbrc	r24, 4
    14d2:	fd cf       	rjmp	.-6      	; 0x14ce <twi_stop+0xa>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    14d4:	10 92 91 03 	sts	0x0391, r1
    14d8:	08 95       	ret

000014da <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    14da:	85 ec       	ldi	r24, 0xC5	; 197
    14dc:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
    14e0:	10 92 91 03 	sts	0x0391, r1
    14e4:	08 95       	ret

000014e6 <__vector_39>:
}

ISR(TWI_vect)
{
    14e6:	1f 92       	push	r1
    14e8:	0f 92       	push	r0
    14ea:	0f b6       	in	r0, 0x3f	; 63
    14ec:	0f 92       	push	r0
    14ee:	11 24       	eor	r1, r1
    14f0:	0b b6       	in	r0, 0x3b	; 59
    14f2:	0f 92       	push	r0
    14f4:	2f 93       	push	r18
    14f6:	3f 93       	push	r19
    14f8:	4f 93       	push	r20
    14fa:	5f 93       	push	r21
    14fc:	6f 93       	push	r22
    14fe:	7f 93       	push	r23
    1500:	8f 93       	push	r24
    1502:	9f 93       	push	r25
    1504:	af 93       	push	r26
    1506:	bf 93       	push	r27
    1508:	ef 93       	push	r30
    150a:	ff 93       	push	r31
  switch(TW_STATUS){
    150c:	80 91 b9 00 	lds	r24, 0x00B9
    1510:	88 7f       	andi	r24, 0xF8	; 248
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	89 3c       	cpi	r24, 0xC9	; 201
    1516:	91 05       	cpc	r25, r1
    1518:	08 f0       	brcs	.+2      	; 0x151c <__vector_39+0x36>
    151a:	f0 c0       	rjmp	.+480    	; 0x16fc <__vector_39+0x216>
    151c:	fc 01       	movw	r30, r24
    151e:	88 27       	eor	r24, r24
    1520:	ee 58       	subi	r30, 0x8E	; 142
    1522:	ff 4f       	sbci	r31, 0xFF	; 255
    1524:	8f 4f       	sbci	r24, 0xFF	; 255
    1526:	0c 94 c1 16 	jmp	0x2d82	; 0x2d82 <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    152a:	80 91 90 03 	lds	r24, 0x0390
    152e:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1532:	85 ec       	ldi	r24, 0xC5	; 197
    1534:	80 93 bc 00 	sts	0x00BC, r24
    1538:	e1 c0       	rjmp	.+450    	; 0x16fc <__vector_39+0x216>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    153a:	90 91 69 03 	lds	r25, 0x0369
    153e:	80 91 68 03 	lds	r24, 0x0368
    1542:	98 17       	cp	r25, r24
    1544:	80 f4       	brcc	.+32     	; 0x1566 <__vector_39+0x80>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1546:	e0 91 69 03 	lds	r30, 0x0369
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	8e 0f       	add	r24, r30
    154e:	80 93 69 03 	sts	0x0369, r24
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	e6 59       	subi	r30, 0x96	; 150
    1556:	fc 4f       	sbci	r31, 0xFC	; 252
    1558:	80 81       	ld	r24, Z
    155a:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    155e:	85 ec       	ldi	r24, 0xC5	; 197
    1560:	80 93 bc 00 	sts	0x00BC, r24
    1564:	cb c0       	rjmp	.+406    	; 0x16fc <__vector_39+0x216>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
    1566:	80 91 8f 03 	lds	r24, 0x038F
    156a:	88 23       	and	r24, r24
    156c:	11 f0       	breq	.+4      	; 0x1572 <__vector_39+0x8c>
          twi_stop();
    156e:	aa df       	rcall	.-172    	; 0x14c4 <twi_stop>
    1570:	c5 c0       	rjmp	.+394    	; 0x16fc <__vector_39+0x216>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	80 93 8e 03 	sts	0x038E, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1578:	84 ea       	ldi	r24, 0xA4	; 164
    157a:	80 93 bc 00 	sts	0x00BC, r24
	  twi_state = TWI_READY;
    157e:	10 92 91 03 	sts	0x0391, r1
    1582:	bc c0       	rjmp	.+376    	; 0x16fc <__vector_39+0x216>
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    1584:	80 e2       	ldi	r24, 0x20	; 32
    1586:	80 93 24 03 	sts	0x0324, r24
      twi_stop();
    158a:	9c df       	rcall	.-200    	; 0x14c4 <twi_stop>
      break;
    158c:	b7 c0       	rjmp	.+366    	; 0x16fc <__vector_39+0x216>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    158e:	80 e3       	ldi	r24, 0x30	; 48
    1590:	80 93 24 03 	sts	0x0324, r24
      twi_stop();
    1594:	97 df       	rcall	.-210    	; 0x14c4 <twi_stop>
      break;
    1596:	b2 c0       	rjmp	.+356    	; 0x16fc <__vector_39+0x216>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1598:	88 e3       	ldi	r24, 0x38	; 56
    159a:	80 93 24 03 	sts	0x0324, r24
      twi_releaseBus();
    159e:	9d df       	rcall	.-198    	; 0x14da <twi_releaseBus>
      break;
    15a0:	ad c0       	rjmp	.+346    	; 0x16fc <__vector_39+0x216>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    15a2:	e0 91 69 03 	lds	r30, 0x0369
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	8e 0f       	add	r24, r30
    15aa:	80 93 69 03 	sts	0x0369, r24
    15ae:	80 91 bb 00 	lds	r24, 0x00BB
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	e6 59       	subi	r30, 0x96	; 150
    15b6:	fc 4f       	sbci	r31, 0xFC	; 252
    15b8:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    15ba:	90 91 69 03 	lds	r25, 0x0369
    15be:	80 91 68 03 	lds	r24, 0x0368
    15c2:	98 17       	cp	r25, r24
    15c4:	20 f4       	brcc	.+8      	; 0x15ce <__vector_39+0xe8>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    15c6:	85 ec       	ldi	r24, 0xC5	; 197
    15c8:	80 93 bc 00 	sts	0x00BC, r24
    15cc:	97 c0       	rjmp	.+302    	; 0x16fc <__vector_39+0x216>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    15ce:	85 e8       	ldi	r24, 0x85	; 133
    15d0:	80 93 bc 00 	sts	0x00BC, r24
    15d4:	93 c0       	rjmp	.+294    	; 0x16fc <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    15d6:	e0 91 69 03 	lds	r30, 0x0369
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	8e 0f       	add	r24, r30
    15de:	80 93 69 03 	sts	0x0369, r24
    15e2:	80 91 bb 00 	lds	r24, 0x00BB
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	e6 59       	subi	r30, 0x96	; 150
    15ea:	fc 4f       	sbci	r31, 0xFC	; 252
    15ec:	80 83       	st	Z, r24
	if (twi_sendStop)
    15ee:	80 91 8f 03 	lds	r24, 0x038F
    15f2:	88 23       	and	r24, r24
    15f4:	11 f0       	breq	.+4      	; 0x15fa <__vector_39+0x114>
          twi_stop();
    15f6:	66 df       	rcall	.-308    	; 0x14c4 <twi_stop>
    15f8:	81 c0       	rjmp	.+258    	; 0x16fc <__vector_39+0x216>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	80 93 8e 03 	sts	0x038E, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1600:	84 ea       	ldi	r24, 0xA4	; 164
    1602:	80 93 bc 00 	sts	0x00BC, r24
	  twi_state = TWI_READY;
    1606:	10 92 91 03 	sts	0x0391, r1
    160a:	78 c0       	rjmp	.+240    	; 0x16fc <__vector_39+0x216>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    160c:	5b df       	rcall	.-330    	; 0x14c4 <twi_stop>
      break;
    160e:	76 c0       	rjmp	.+236    	; 0x16fc <__vector_39+0x216>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1610:	83 e0       	ldi	r24, 0x03	; 3
    1612:	80 93 91 03 	sts	0x0391, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1616:	10 92 25 03 	sts	0x0325, r1
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    161a:	85 ec       	ldi	r24, 0xC5	; 197
    161c:	80 93 bc 00 	sts	0x00BC, r24
    1620:	6d c0       	rjmp	.+218    	; 0x16fc <__vector_39+0x216>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1622:	80 91 25 03 	lds	r24, 0x0325
    1626:	80 32       	cpi	r24, 0x20	; 32
    1628:	80 f4       	brcc	.+32     	; 0x164a <__vector_39+0x164>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    162a:	e0 91 25 03 	lds	r30, 0x0325
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	8e 0f       	add	r24, r30
    1632:	80 93 25 03 	sts	0x0325, r24
    1636:	80 91 bb 00 	lds	r24, 0x00BB
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	ea 5d       	subi	r30, 0xDA	; 218
    163e:	fc 4f       	sbci	r31, 0xFC	; 252
    1640:	80 83       	st	Z, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1642:	85 ec       	ldi	r24, 0xC5	; 197
    1644:	80 93 bc 00 	sts	0x00BC, r24
    1648:	59 c0       	rjmp	.+178    	; 0x16fc <__vector_39+0x216>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    164a:	85 e8       	ldi	r24, 0x85	; 133
    164c:	80 93 bc 00 	sts	0x00BC, r24
    1650:	55 c0       	rjmp	.+170    	; 0x16fc <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1652:	80 91 25 03 	lds	r24, 0x0325
    1656:	80 32       	cpi	r24, 0x20	; 32
    1658:	30 f4       	brcc	.+12     	; 0x1666 <__vector_39+0x180>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    165a:	e0 91 25 03 	lds	r30, 0x0325
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	ea 5d       	subi	r30, 0xDA	; 218
    1662:	fc 4f       	sbci	r31, 0xFC	; 252
    1664:	10 82       	st	Z, r1
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
    1666:	2e df       	rcall	.-420    	; 0x14c4 <twi_stop>
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1668:	60 91 25 03 	lds	r22, 0x0325
    166c:	70 e0       	ldi	r23, 0x00	; 0
    166e:	e0 91 8a 03 	lds	r30, 0x038A
    1672:	f0 91 8b 03 	lds	r31, 0x038B
    1676:	86 e2       	ldi	r24, 0x26	; 38
    1678:	93 e0       	ldi	r25, 0x03	; 3
    167a:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    167c:	10 92 25 03 	sts	0x0325, r1
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1680:	2c df       	rcall	.-424    	; 0x14da <twi_releaseBus>
      break;
    1682:	3c c0       	rjmp	.+120    	; 0x16fc <__vector_39+0x216>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1684:	85 e8       	ldi	r24, 0x85	; 133
    1686:	80 93 bc 00 	sts	0x00BC, r24
    168a:	38 c0       	rjmp	.+112    	; 0x16fc <__vector_39+0x216>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    168c:	84 e0       	ldi	r24, 0x04	; 4
    168e:	80 93 91 03 	sts	0x0391, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1692:	10 92 47 03 	sts	0x0347, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1696:	10 92 46 03 	sts	0x0346, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    169a:	e0 91 8c 03 	lds	r30, 0x038C
    169e:	f0 91 8d 03 	lds	r31, 0x038D
    16a2:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    16a4:	80 91 46 03 	lds	r24, 0x0346
    16a8:	81 11       	cpse	r24, r1
    16aa:	05 c0       	rjmp	.+10     	; 0x16b6 <__vector_39+0x1d0>
        twi_txBufferLength = 1;
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	80 93 46 03 	sts	0x0346, r24
        twi_txBuffer[0] = 0x00;
    16b2:	10 92 48 03 	sts	0x0348, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    16b6:	e0 91 47 03 	lds	r30, 0x0347
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	8e 0f       	add	r24, r30
    16be:	80 93 47 03 	sts	0x0347, r24
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	e8 5b       	subi	r30, 0xB8	; 184
    16c6:	fc 4f       	sbci	r31, 0xFC	; 252
    16c8:	80 81       	ld	r24, Z
    16ca:	80 93 bb 00 	sts	0x00BB, r24
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    16ce:	90 91 47 03 	lds	r25, 0x0347
    16d2:	80 91 46 03 	lds	r24, 0x0346
    16d6:	98 17       	cp	r25, r24
    16d8:	20 f4       	brcc	.+8      	; 0x16e2 <__vector_39+0x1fc>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    16da:	85 ec       	ldi	r24, 0xC5	; 197
    16dc:	80 93 bc 00 	sts	0x00BC, r24
    16e0:	0d c0       	rjmp	.+26     	; 0x16fc <__vector_39+0x216>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    16e2:	85 e8       	ldi	r24, 0x85	; 133
    16e4:	80 93 bc 00 	sts	0x00BC, r24
    16e8:	09 c0       	rjmp	.+18     	; 0x16fc <__vector_39+0x216>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    16ea:	85 ec       	ldi	r24, 0xC5	; 197
    16ec:	80 93 bc 00 	sts	0x00BC, r24
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    16f0:	10 92 91 03 	sts	0x0391, r1
      break;
    16f4:	03 c0       	rjmp	.+6      	; 0x16fc <__vector_39+0x216>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    16f6:	10 92 24 03 	sts	0x0324, r1
      twi_stop();
    16fa:	e4 de       	rcall	.-568    	; 0x14c4 <twi_stop>
      break;
  }
}
    16fc:	ff 91       	pop	r31
    16fe:	ef 91       	pop	r30
    1700:	bf 91       	pop	r27
    1702:	af 91       	pop	r26
    1704:	9f 91       	pop	r25
    1706:	8f 91       	pop	r24
    1708:	7f 91       	pop	r23
    170a:	6f 91       	pop	r22
    170c:	5f 91       	pop	r21
    170e:	4f 91       	pop	r20
    1710:	3f 91       	pop	r19
    1712:	2f 91       	pop	r18
    1714:	0f 90       	pop	r0
    1716:	0b be       	out	0x3b, r0	; 59
    1718:	0f 90       	pop	r0
    171a:	0f be       	out	0x3f, r0	; 63
    171c:	0f 90       	pop	r0
    171e:	1f 90       	pop	r1
    1720:	18 95       	reti

00001722 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    1722:	80 91 c2 03 	lds	r24, 0x03C2
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	20 91 c3 03 	lds	r18, 0x03C3
    172c:	82 1b       	sub	r24, r18
    172e:	91 09       	sbc	r25, r1
    1730:	08 95       	ret

00001732 <_ZN7TwoWire4readEv>:
    1732:	90 91 c3 03 	lds	r25, 0x03C3
    1736:	80 91 c2 03 	lds	r24, 0x03C2
    173a:	98 17       	cp	r25, r24
    173c:	50 f4       	brcc	.+20     	; 0x1752 <_ZN7TwoWire4readEv+0x20>
    173e:	e9 2f       	mov	r30, r25
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	ec 53       	subi	r30, 0x3C	; 60
    1744:	fc 4f       	sbci	r31, 0xFC	; 252
    1746:	20 81       	ld	r18, Z
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	9f 5f       	subi	r25, 0xFF	; 255
    174c:	90 93 c3 03 	sts	0x03C3, r25
    1750:	02 c0       	rjmp	.+4      	; 0x1756 <_ZN7TwoWire4readEv+0x24>
    1752:	2f ef       	ldi	r18, 0xFF	; 255
    1754:	3f ef       	ldi	r19, 0xFF	; 255
    1756:	c9 01       	movw	r24, r18
    1758:	08 95       	ret

0000175a <_ZN7TwoWire4peekEv>:
    175a:	e0 91 c3 03 	lds	r30, 0x03C3
    175e:	80 91 c2 03 	lds	r24, 0x03C2
    1762:	e8 17       	cp	r30, r24
    1764:	30 f4       	brcc	.+12     	; 0x1772 <_ZN7TwoWire4peekEv+0x18>
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	ec 53       	subi	r30, 0x3C	; 60
    176a:	fc 4f       	sbci	r31, 0xFC	; 252
    176c:	80 81       	ld	r24, Z
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	08 95       	ret
    1772:	8f ef       	ldi	r24, 0xFF	; 255
    1774:	9f ef       	ldi	r25, 0xFF	; 255
    1776:	08 95       	ret

00001778 <_ZN7TwoWire5flushEv>:
    1778:	08 95       	ret

0000177a <_ZN7TwoWire5writeEPKhj>:
    177a:	cf 92       	push	r12
    177c:	df 92       	push	r13
    177e:	ef 92       	push	r14
    1780:	ff 92       	push	r15
    1782:	0f 93       	push	r16
    1784:	1f 93       	push	r17
    1786:	cf 93       	push	r28
    1788:	df 93       	push	r29
    178a:	8c 01       	movw	r16, r24
    178c:	cb 01       	movw	r24, r22
    178e:	6a 01       	movw	r12, r20
    1790:	20 91 9e 03 	lds	r18, 0x039E
    1794:	22 23       	and	r18, r18
    1796:	a1 f0       	breq	.+40     	; 0x17c0 <_ZN7TwoWire5writeEPKhj+0x46>
    1798:	41 15       	cp	r20, r1
    179a:	51 05       	cpc	r21, r1
    179c:	99 f0       	breq	.+38     	; 0x17c4 <_ZN7TwoWire5writeEPKhj+0x4a>
    179e:	eb 01       	movw	r28, r22
    17a0:	7b 01       	movw	r14, r22
    17a2:	e4 0e       	add	r14, r20
    17a4:	f5 1e       	adc	r15, r21
    17a6:	69 91       	ld	r22, Y+
    17a8:	d8 01       	movw	r26, r16
    17aa:	ed 91       	ld	r30, X+
    17ac:	fc 91       	ld	r31, X
    17ae:	01 90       	ld	r0, Z+
    17b0:	f0 81       	ld	r31, Z
    17b2:	e0 2d       	mov	r30, r0
    17b4:	c8 01       	movw	r24, r16
    17b6:	19 95       	eicall
    17b8:	ce 15       	cp	r28, r14
    17ba:	df 05       	cpc	r29, r15
    17bc:	a1 f7       	brne	.-24     	; 0x17a6 <_ZN7TwoWire5writeEPKhj+0x2c>
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <_ZN7TwoWire5writeEPKhj+0x4a>
    17c0:	64 2f       	mov	r22, r20
    17c2:	5f de       	rcall	.-834    	; 0x1482 <twi_transmit>
    17c4:	c6 01       	movw	r24, r12
    17c6:	df 91       	pop	r29
    17c8:	cf 91       	pop	r28
    17ca:	1f 91       	pop	r17
    17cc:	0f 91       	pop	r16
    17ce:	ff 90       	pop	r15
    17d0:	ef 90       	pop	r14
    17d2:	df 90       	pop	r13
    17d4:	cf 90       	pop	r12
    17d6:	08 95       	ret

000017d8 <_ZN7TwoWire5writeEh>:
    17d8:	cf 93       	push	r28
    17da:	df 93       	push	r29
    17dc:	1f 92       	push	r1
    17de:	cd b7       	in	r28, 0x3d	; 61
    17e0:	de b7       	in	r29, 0x3e	; 62
    17e2:	fc 01       	movw	r30, r24
    17e4:	69 83       	std	Y+1, r22	; 0x01
    17e6:	90 91 9e 03 	lds	r25, 0x039E
    17ea:	99 23       	and	r25, r25
    17ec:	d9 f0       	breq	.+54     	; 0x1824 <_ZN7TwoWire5writeEh+0x4c>
    17ee:	90 91 9f 03 	lds	r25, 0x039F
    17f2:	90 32       	cpi	r25, 0x20	; 32
    17f4:	38 f0       	brcs	.+14     	; 0x1804 <_ZN7TwoWire5writeEh+0x2c>
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	93 83       	std	Z+3, r25	; 0x03
    17fc:	82 83       	std	Z+2, r24	; 0x02
    17fe:	80 e0       	ldi	r24, 0x00	; 0
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	16 c0       	rjmp	.+44     	; 0x1830 <_ZN7TwoWire5writeEh+0x58>
    1804:	80 91 a0 03 	lds	r24, 0x03A0
    1808:	e8 2f       	mov	r30, r24
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	ef 55       	subi	r30, 0x5F	; 95
    180e:	fc 4f       	sbci	r31, 0xFC	; 252
    1810:	99 81       	ldd	r25, Y+1	; 0x01
    1812:	90 83       	st	Z, r25
    1814:	8f 5f       	subi	r24, 0xFF	; 255
    1816:	80 93 a0 03 	sts	0x03A0, r24
    181a:	80 93 9f 03 	sts	0x039F, r24
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	06 c0       	rjmp	.+12     	; 0x1830 <_ZN7TwoWire5writeEh+0x58>
    1824:	61 e0       	ldi	r22, 0x01	; 1
    1826:	ce 01       	movw	r24, r28
    1828:	01 96       	adiw	r24, 0x01	; 1
    182a:	2b de       	rcall	.-938    	; 0x1482 <twi_transmit>
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	0f 90       	pop	r0
    1832:	df 91       	pop	r29
    1834:	cf 91       	pop	r28
    1836:	08 95       	ret

00001838 <_ZN7TwoWireC1Ev>:
    1838:	fc 01       	movw	r30, r24
    183a:	13 82       	std	Z+3, r1	; 0x03
    183c:	12 82       	std	Z+2, r1	; 0x02
    183e:	88 ee       	ldi	r24, 0xE8	; 232
    1840:	93 e0       	ldi	r25, 0x03	; 3
    1842:	a0 e0       	ldi	r26, 0x00	; 0
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	84 83       	std	Z+4, r24	; 0x04
    1848:	95 83       	std	Z+5, r25	; 0x05
    184a:	a6 83       	std	Z+6, r26	; 0x06
    184c:	b7 83       	std	Z+7, r27	; 0x07
    184e:	80 ec       	ldi	r24, 0xC0	; 192
    1850:	92 e0       	ldi	r25, 0x02	; 2
    1852:	91 83       	std	Z+1, r25	; 0x01
    1854:	80 83       	st	Z, r24
    1856:	08 95       	ret

00001858 <_ZN7TwoWire5beginEv>:
    1858:	10 92 c3 03 	sts	0x03C3, r1
    185c:	10 92 c2 03 	sts	0x03C2, r1
    1860:	10 92 a0 03 	sts	0x03A0, r1
    1864:	10 92 9f 03 	sts	0x039F, r1
    1868:	45 cd       	rjmp	.-1398   	; 0x12f4 <twi_init>
    186a:	08 95       	ret

0000186c <_ZN7TwoWire11requestFromEhhh>:
    186c:	86 2f       	mov	r24, r22
    186e:	41 32       	cpi	r20, 0x21	; 33
    1870:	08 f0       	brcs	.+2      	; 0x1874 <_ZN7TwoWire11requestFromEhhh+0x8>
    1872:	40 e2       	ldi	r20, 0x20	; 32
    1874:	64 ec       	ldi	r22, 0xC4	; 196
    1876:	73 e0       	ldi	r23, 0x03	; 3
    1878:	5b dd       	rcall	.-1354   	; 0x1330 <twi_readFrom>
    187a:	10 92 c3 03 	sts	0x03C3, r1
    187e:	80 93 c2 03 	sts	0x03C2, r24
    1882:	08 95       	ret

00001884 <_ZN7TwoWire11requestFromEhh>:
    1884:	21 e0       	ldi	r18, 0x01	; 1
    1886:	f2 cf       	rjmp	.-28     	; 0x186c <_ZN7TwoWire11requestFromEhhh>
    1888:	08 95       	ret

0000188a <_ZN7TwoWire17beginTransmissionEh>:
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	80 93 9e 03 	sts	0x039E, r24
    1890:	60 93 c1 03 	sts	0x03C1, r22
    1894:	10 92 a0 03 	sts	0x03A0, r1
    1898:	10 92 9f 03 	sts	0x039F, r1
    189c:	08 95       	ret

0000189e <_ZN7TwoWire15endTransmissionEh>:
    189e:	0f 93       	push	r16
    18a0:	06 2f       	mov	r16, r22
    18a2:	21 e0       	ldi	r18, 0x01	; 1
    18a4:	40 91 9f 03 	lds	r20, 0x039F
    18a8:	61 ea       	ldi	r22, 0xA1	; 161
    18aa:	73 e0       	ldi	r23, 0x03	; 3
    18ac:	80 91 c1 03 	lds	r24, 0x03C1
    18b0:	8b dd       	rcall	.-1258   	; 0x13c8 <twi_writeTo>
    18b2:	10 92 a0 03 	sts	0x03A0, r1
    18b6:	10 92 9f 03 	sts	0x039F, r1
    18ba:	10 92 9e 03 	sts	0x039E, r1
    18be:	0f 91       	pop	r16
    18c0:	08 95       	ret

000018c2 <_ZN7TwoWire15endTransmissionEv>:
    18c2:	61 e0       	ldi	r22, 0x01	; 1
    18c4:	ec cf       	rjmp	.-40     	; 0x189e <_ZN7TwoWire15endTransmissionEh>
    18c6:	08 95       	ret

000018c8 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    18c8:	82 e9       	ldi	r24, 0x92	; 146
    18ca:	93 e0       	ldi	r25, 0x03	; 3
    18cc:	b5 cf       	rjmp	.-150    	; 0x1838 <_ZN7TwoWireC1Ev>
    18ce:	08 95       	ret

000018d0 <loop>:
	delay(3000);
	HLT_LCD.print("HLT.");
	//HLT_UI->display();
}

void loop() {
    18d0:	08 95       	ret

000018d2 <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    18d2:	26 e0       	ldi	r18, 0x06	; 6
    18d4:	40 e8       	ldi	r20, 0x80	; 128
    18d6:	55 e2       	ldi	r21, 0x25	; 37
    18d8:	60 e0       	ldi	r22, 0x00	; 0
    18da:	70 e0       	ldi	r23, 0x00	; 0
    18dc:	86 ee       	ldi	r24, 0xE6	; 230
    18de:	93 e0       	ldi	r25, 0x03	; 3
    18e0:	23 d1       	rcall	.+582    	; 0x1b28 <_ZN14HardwareSerial5beginEmh>
	//Setup the Hardware
	//init_hardware();
	Serial.begin(9600);      // open the serial port at 9600 bps:

	//Create a new Executive
	Exec = new Executive();
    18e2:	82 e0       	ldi	r24, 0x02	; 2
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	4b d4       	rcall	.+2198   	; 0x217e <_Znwj>
    18e8:	fc 01       	movw	r30, r24
    18ea:	11 82       	std	Z+1, r1	; 0x01
    18ec:	10 82       	st	Z, r1
    18ee:	90 93 e5 03 	sts	0x03E5, r25
    18f2:	80 93 e4 03 	sts	0x03E4, r24
	
	HLT_LCD.begin(20,4);
    18f6:	20 e0       	ldi	r18, 0x00	; 0
    18f8:	44 e0       	ldi	r20, 0x04	; 4
    18fa:	64 e1       	ldi	r22, 0x14	; 20
    18fc:	8c e0       	ldi	r24, 0x0C	; 12
    18fe:	93 e0       	ldi	r25, 0x03	; 3
    1900:	e4 dc       	rcall	.-1592   	; 0x12ca <_ZN17LiquidCrystal_I2C5beginEhhh>
	HLT_LCD.setBacklight(HIGH);
    1902:	61 e0       	ldi	r22, 0x01	; 1
    1904:	8c e0       	ldi	r24, 0x0C	; 12
    1906:	93 e0       	ldi	r25, 0x03	; 3
    1908:	31 dc       	rcall	.-1950   	; 0x116c <_ZN17LiquidCrystal_I2C12setBacklightEh>
	
	HLT_LCD.setCursor(0, 0);
    190a:	40 e0       	ldi	r20, 0x00	; 0
    190c:	60 e0       	ldi	r22, 0x00	; 0
    190e:	8c e0       	ldi	r24, 0x0C	; 12
    1910:	93 e0       	ldi	r25, 0x03	; 3
    1912:	60 db       	rcall	.-2368   	; 0xfd4 <_ZN3LCD9setCursorEhh>
	HLT_LCD.print("Project Narwhal.");
    1914:	6c ec       	ldi	r22, 0xCC	; 204
    1916:	72 e0       	ldi	r23, 0x02	; 2
    1918:	8c e0       	ldi	r24, 0x0C	; 12
    191a:	93 e0       	ldi	r25, 0x03	; 3
    191c:	61 d4       	rcall	.+2242   	; 0x21e0 <_ZN5Print5printEPKc>
	delay(3000);
    191e:	68 eb       	ldi	r22, 0xB8	; 184
    1920:	7b e0       	ldi	r23, 0x0B	; 11
    1922:	80 e0       	ldi	r24, 0x00	; 0
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	c3 d7       	rcall	.+3974   	; 0x28ae <delay>
	HLT_LCD.print("HLT.");
    1928:	6d ed       	ldi	r22, 0xDD	; 221
    192a:	72 e0       	ldi	r23, 0x02	; 2
    192c:	8c e0       	ldi	r24, 0x0C	; 12
    192e:	93 e0       	ldi	r25, 0x03	; 3
    1930:	57 c4       	rjmp	.+2222   	; 0x21e0 <_ZN5Print5printEPKc>
    1932:	08 95       	ret

00001934 <__cxa_pure_virtual>:
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
    1934:	0e 94 da 18 	call	0x31b4	; 0x31b4 <abort>

00001938 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1938:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    193a:	91 8d       	ldd	r25, Z+25	; 0x19
    193c:	22 8d       	ldd	r18, Z+26	; 0x1a
    193e:	89 2f       	mov	r24, r25
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	80 5c       	subi	r24, 0xC0	; 192
    1944:	9f 4f       	sbci	r25, 0xFF	; 255
    1946:	82 1b       	sub	r24, r18
    1948:	91 09       	sbc	r25, r1
}
    194a:	8f 73       	andi	r24, 0x3F	; 63
    194c:	99 27       	eor	r25, r25
    194e:	08 95       	ret

00001950 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1950:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1952:	91 8d       	ldd	r25, Z+25	; 0x19
    1954:	82 8d       	ldd	r24, Z+26	; 0x1a
    1956:	98 17       	cp	r25, r24
    1958:	31 f0       	breq	.+12     	; 0x1966 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    195a:	82 8d       	ldd	r24, Z+26	; 0x1a
    195c:	e8 0f       	add	r30, r24
    195e:	f1 1d       	adc	r31, r1
    1960:	85 8d       	ldd	r24, Z+29	; 0x1d
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1966:	8f ef       	ldi	r24, 0xFF	; 255
    1968:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    196a:	08 95       	ret

0000196c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    196c:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    196e:	91 8d       	ldd	r25, Z+25	; 0x19
    1970:	82 8d       	ldd	r24, Z+26	; 0x1a
    1972:	98 17       	cp	r25, r24
    1974:	61 f0       	breq	.+24     	; 0x198e <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1976:	82 8d       	ldd	r24, Z+26	; 0x1a
    1978:	df 01       	movw	r26, r30
    197a:	a8 0f       	add	r26, r24
    197c:	b1 1d       	adc	r27, r1
    197e:	5d 96       	adiw	r26, 0x1d	; 29
    1980:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1982:	92 8d       	ldd	r25, Z+26	; 0x1a
    1984:	9f 5f       	subi	r25, 0xFF	; 255
    1986:	9f 73       	andi	r25, 0x3F	; 63
    1988:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    198e:	8f ef       	ldi	r24, 0xFF	; 255
    1990:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1992:	08 95       	ret

00001994 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1994:	82 e6       	ldi	r24, 0x62	; 98
    1996:	9e e0       	ldi	r25, 0x0E	; 14
    1998:	89 2b       	or	r24, r25
    199a:	41 f0       	breq	.+16     	; 0x19ac <_Z14serialEventRunv+0x18>
    199c:	80 e0       	ldi	r24, 0x00	; 0
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	89 2b       	or	r24, r25
    19a2:	21 f0       	breq	.+8      	; 0x19ac <_Z14serialEventRunv+0x18>
    19a4:	8f d1       	rcall	.+798    	; 0x1cc4 <_Z17Serial0_availablev>
    19a6:	81 11       	cpse	r24, r1
    19a8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    19ac:	8d ef       	ldi	r24, 0xFD	; 253
    19ae:	9e e0       	ldi	r25, 0x0E	; 14
    19b0:	89 2b       	or	r24, r25
    19b2:	41 f0       	breq	.+16     	; 0x19c4 <_Z14serialEventRunv+0x30>
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	89 2b       	or	r24, r25
    19ba:	21 f0       	breq	.+8      	; 0x19c4 <_Z14serialEventRunv+0x30>
    19bc:	1e d2       	rcall	.+1084   	; 0x1dfa <_Z17Serial1_availablev>
    19be:	81 11       	cpse	r24, r1
    19c0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    19c4:	88 e9       	ldi	r24, 0x98	; 152
    19c6:	9f e0       	ldi	r25, 0x0F	; 15
    19c8:	89 2b       	or	r24, r25
    19ca:	41 f0       	breq	.+16     	; 0x19dc <_Z14serialEventRunv+0x48>
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	89 2b       	or	r24, r25
    19d2:	21 f0       	breq	.+8      	; 0x19dc <_Z14serialEventRunv+0x48>
    19d4:	ad d2       	rcall	.+1370   	; 0x1f30 <_Z17Serial2_availablev>
    19d6:	81 11       	cpse	r24, r1
    19d8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    19dc:	83 e3       	ldi	r24, 0x33	; 51
    19de:	90 e1       	ldi	r25, 0x10	; 16
    19e0:	89 2b       	or	r24, r25
    19e2:	41 f0       	breq	.+16     	; 0x19f4 <_Z14serialEventRunv+0x60>
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	89 2b       	or	r24, r25
    19ea:	21 f0       	breq	.+8      	; 0x19f4 <_Z14serialEventRunv+0x60>
    19ec:	3c d3       	rcall	.+1656   	; 0x2066 <_Z17Serial3_availablev>
    19ee:	81 11       	cpse	r24, r1
    19f0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    19f4:	08 95       	ret

000019f6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    19f6:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    19f8:	84 8d       	ldd	r24, Z+28	; 0x1c
    19fa:	df 01       	movw	r26, r30
    19fc:	a8 0f       	add	r26, r24
    19fe:	b1 1d       	adc	r27, r1
    1a00:	a3 5a       	subi	r26, 0xA3	; 163
    1a02:	bf 4f       	sbci	r27, 0xFF	; 255
    1a04:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1a06:	24 8d       	ldd	r18, Z+28	; 0x1c
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	2f 5f       	subi	r18, 0xFF	; 255
    1a0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a0e:	2f 73       	andi	r18, 0x3F	; 63
    1a10:	30 78       	andi	r19, 0x80	; 128
    1a12:	33 23       	and	r19, r19
    1a14:	34 f4       	brge	.+12     	; 0x1a22 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
    1a16:	21 50       	subi	r18, 0x01	; 1
    1a18:	31 09       	sbc	r19, r1
    1a1a:	20 6c       	ori	r18, 0xC0	; 192
    1a1c:	3f 6f       	ori	r19, 0xFF	; 255
    1a1e:	2f 5f       	subi	r18, 0xFF	; 255
    1a20:	3f 4f       	sbci	r19, 0xFF	; 255
    1a22:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
    1a24:	a6 89       	ldd	r26, Z+22	; 0x16
    1a26:	b7 89       	ldd	r27, Z+23	; 0x17
    1a28:	8c 93       	st	X, r24

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    1a2a:	a0 89       	ldd	r26, Z+16	; 0x10
    1a2c:	b1 89       	ldd	r27, Z+17	; 0x11
    1a2e:	8c 91       	ld	r24, X
    1a30:	80 64       	ori	r24, 0x40	; 64
    1a32:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    1a34:	93 8d       	ldd	r25, Z+27	; 0x1b
    1a36:	84 8d       	ldd	r24, Z+28	; 0x1c
    1a38:	98 13       	cpse	r25, r24
    1a3a:	06 c0       	rjmp	.+12     	; 0x1a48 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x52>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1a3c:	02 88       	ldd	r0, Z+18	; 0x12
    1a3e:	f3 89       	ldd	r31, Z+19	; 0x13
    1a40:	e0 2d       	mov	r30, r0
    1a42:	80 81       	ld	r24, Z
    1a44:	8f 7d       	andi	r24, 0xDF	; 223
    1a46:	80 83       	st	Z, r24
    1a48:	08 95       	ret

00001a4a <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1a4a:	cf 93       	push	r28
    1a4c:	df 93       	push	r29
    1a4e:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1a50:	88 8d       	ldd	r24, Y+24	; 0x18
    1a52:	81 11       	cpse	r24, r1
    1a54:	0e c0       	rjmp	.+28     	; 0x1a72 <_ZN14HardwareSerial5flushEv+0x28>
    1a56:	17 c0       	rjmp	.+46     	; 0x1a86 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1a58:	0f b6       	in	r0, 0x3f	; 63
    1a5a:	07 fc       	sbrc	r0, 7
    1a5c:	0c c0       	rjmp	.+24     	; 0x1a76 <_ZN14HardwareSerial5flushEv+0x2c>
    1a5e:	90 81       	ld	r25, Z
    1a60:	95 ff       	sbrs	r25, 5
    1a62:	09 c0       	rjmp	.+18     	; 0x1a76 <_ZN14HardwareSerial5flushEv+0x2c>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1a64:	a8 89       	ldd	r26, Y+16	; 0x10
    1a66:	b9 89       	ldd	r27, Y+17	; 0x11
    1a68:	8c 91       	ld	r24, X
    1a6a:	85 ff       	sbrs	r24, 5
    1a6c:	04 c0       	rjmp	.+8      	; 0x1a76 <_ZN14HardwareSerial5flushEv+0x2c>
	  _tx_udr_empty_irq();
    1a6e:	ce 01       	movw	r24, r28
    1a70:	c2 df       	rcall	.-124    	; 0x19f6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1a72:	ea 89       	ldd	r30, Y+18	; 0x12
    1a74:	fb 89       	ldd	r31, Y+19	; 0x13
    1a76:	90 81       	ld	r25, Z
    1a78:	95 fd       	sbrc	r25, 5
    1a7a:	ee cf       	rjmp	.-36     	; 0x1a58 <_ZN14HardwareSerial5flushEv+0xe>
    1a7c:	a8 89       	ldd	r26, Y+16	; 0x10
    1a7e:	b9 89       	ldd	r27, Y+17	; 0x11
    1a80:	8c 91       	ld	r24, X
    1a82:	86 ff       	sbrs	r24, 6
    1a84:	e9 cf       	rjmp	.-46     	; 0x1a58 <_ZN14HardwareSerial5flushEv+0xe>
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1a86:	df 91       	pop	r29
    1a88:	cf 91       	pop	r28
    1a8a:	08 95       	ret

00001a8c <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    1a8c:	0f 93       	push	r16
    1a8e:	1f 93       	push	r17
    1a90:	cf 93       	push	r28
    1a92:	df 93       	push	r29
    1a94:	fc 01       	movw	r30, r24
  _written = true;
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	80 8f       	std	Z+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1a9a:	93 8d       	ldd	r25, Z+27	; 0x1b
    1a9c:	84 8d       	ldd	r24, Z+28	; 0x1c
    1a9e:	98 13       	cpse	r25, r24
    1aa0:	21 c0       	rjmp	.+66     	; 0x1ae4 <_ZN14HardwareSerial5writeEh+0x58>
    1aa2:	a0 89       	ldd	r26, Z+16	; 0x10
    1aa4:	b1 89       	ldd	r27, Z+17	; 0x11
    1aa6:	8c 91       	ld	r24, X
    1aa8:	85 fd       	sbrc	r24, 5
    1aaa:	2e c0       	rjmp	.+92     	; 0x1b08 <_ZN14HardwareSerial5writeEh+0x7c>
    1aac:	1b c0       	rjmp	.+54     	; 0x1ae4 <_ZN14HardwareSerial5writeEh+0x58>
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    if (bit_is_clear(SREG, SREG_I)) {
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	07 fc       	sbrc	r0, 7
    1ab2:	07 c0       	rjmp	.+14     	; 0x1ac2 <_ZN14HardwareSerial5writeEh+0x36>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1ab4:	e8 89       	ldd	r30, Y+16	; 0x10
    1ab6:	f9 89       	ldd	r31, Y+17	; 0x11
    1ab8:	80 81       	ld	r24, Z
    1aba:	85 ff       	sbrs	r24, 5
    1abc:	02 c0       	rjmp	.+4      	; 0x1ac2 <_ZN14HardwareSerial5writeEh+0x36>
	_tx_udr_empty_irq();
    1abe:	ce 01       	movw	r24, r28
    1ac0:	9a df       	rcall	.-204    	; 0x19f6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1ac2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ac4:	09 17       	cp	r16, r25
    1ac6:	99 f3       	breq	.-26     	; 0x1aae <_ZN14HardwareSerial5writeEh+0x22>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1ac8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1aca:	fe 01       	movw	r30, r28
    1acc:	e8 0f       	add	r30, r24
    1ace:	f1 1d       	adc	r31, r1
    1ad0:	e3 5a       	subi	r30, 0xA3	; 163
    1ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad4:	10 83       	st	Z, r17
  _tx_buffer_head = i;
    1ad6:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    1ad8:	ea 89       	ldd	r30, Y+18	; 0x12
    1ada:	fb 89       	ldd	r31, Y+19	; 0x13
    1adc:	80 81       	ld	r24, Z
    1ade:	80 62       	ori	r24, 0x20	; 32
    1ae0:	80 83       	st	Z, r24
  
  return 1;
    1ae2:	1b c0       	rjmp	.+54     	; 0x1b1a <_ZN14HardwareSerial5writeEh+0x8e>
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1ae4:	23 8d       	ldd	r18, Z+27	; 0x1b
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	2f 5f       	subi	r18, 0xFF	; 255
    1aea:	3f 4f       	sbci	r19, 0xFF	; 255
    1aec:	2f 73       	andi	r18, 0x3F	; 63
    1aee:	30 78       	andi	r19, 0x80	; 128
    1af0:	33 23       	and	r19, r19
    1af2:	34 f4       	brge	.+12     	; 0x1b00 <_ZN14HardwareSerial5writeEh+0x74>
    1af4:	21 50       	subi	r18, 0x01	; 1
    1af6:	31 09       	sbc	r19, r1
    1af8:	20 6c       	ori	r18, 0xC0	; 192
    1afa:	3f 6f       	ori	r19, 0xFF	; 255
    1afc:	2f 5f       	subi	r18, 0xFF	; 255
    1afe:	3f 4f       	sbci	r19, 0xFF	; 255
    1b00:	16 2f       	mov	r17, r22
    1b02:	ef 01       	movw	r28, r30
    1b04:	02 2f       	mov	r16, r18
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1b06:	dd cf       	rjmp	.-70     	; 0x1ac2 <_ZN14HardwareSerial5writeEh+0x36>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    1b08:	a6 89       	ldd	r26, Z+22	; 0x16
    1b0a:	b7 89       	ldd	r27, Z+23	; 0x17
    1b0c:	6c 93       	st	X, r22
    sbi(*_ucsra, TXC0);
    1b0e:	00 88       	ldd	r0, Z+16	; 0x10
    1b10:	f1 89       	ldd	r31, Z+17	; 0x11
    1b12:	e0 2d       	mov	r30, r0
    1b14:	80 81       	ld	r24, Z
    1b16:	80 64       	ori	r24, 0x40	; 64
    1b18:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	df 91       	pop	r29
    1b20:	cf 91       	pop	r28
    1b22:	1f 91       	pop	r17
    1b24:	0f 91       	pop	r16
    1b26:	08 95       	ret

00001b28 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1b28:	bf 92       	push	r11
    1b2a:	cf 92       	push	r12
    1b2c:	df 92       	push	r13
    1b2e:	ef 92       	push	r14
    1b30:	ff 92       	push	r15
    1b32:	0f 93       	push	r16
    1b34:	1f 93       	push	r17
    1b36:	cf 93       	push	r28
    1b38:	df 93       	push	r29
    1b3a:	ec 01       	movw	r28, r24
    1b3c:	6a 01       	movw	r12, r20
    1b3e:	7b 01       	movw	r14, r22
    1b40:	b2 2e       	mov	r11, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1b42:	e8 89       	ldd	r30, Y+16	; 0x10
    1b44:	f9 89       	ldd	r31, Y+17	; 0x11
    1b46:	82 e0       	ldi	r24, 0x02	; 2
    1b48:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1b4a:	41 15       	cp	r20, r1
    1b4c:	51 4e       	sbci	r21, 0xE1	; 225
    1b4e:	61 05       	cpc	r22, r1
    1b50:	71 05       	cpc	r23, r1
    1b52:	b1 f0       	breq	.+44     	; 0x1b80 <_ZN14HardwareSerial5beginEmh+0x58>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1b54:	60 e0       	ldi	r22, 0x00	; 0
    1b56:	79 e0       	ldi	r23, 0x09	; 9
    1b58:	8d e3       	ldi	r24, 0x3D	; 61
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	a7 01       	movw	r20, r14
    1b5e:	96 01       	movw	r18, r12
    1b60:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <__udivmodsi4>
    1b64:	89 01       	movw	r16, r18
    1b66:	9a 01       	movw	r18, r20
    1b68:	01 50       	subi	r16, 0x01	; 1
    1b6a:	11 09       	sbc	r17, r1
    1b6c:	21 09       	sbc	r18, r1
    1b6e:	31 09       	sbc	r19, r1
    1b70:	36 95       	lsr	r19
    1b72:	27 95       	ror	r18
    1b74:	17 95       	ror	r17
    1b76:	07 95       	ror	r16
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1b78:	01 15       	cp	r16, r1
    1b7a:	80 e1       	ldi	r24, 0x10	; 16
    1b7c:	18 07       	cpc	r17, r24
    1b7e:	a8 f0       	brcs	.+42     	; 0x1baa <_ZN14HardwareSerial5beginEmh+0x82>
  {
    *_ucsra = 0;
    1b80:	e8 89       	ldd	r30, Y+16	; 0x10
    1b82:	f9 89       	ldd	r31, Y+17	; 0x11
    1b84:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1b86:	60 e8       	ldi	r22, 0x80	; 128
    1b88:	74 e8       	ldi	r23, 0x84	; 132
    1b8a:	8e e1       	ldi	r24, 0x1E	; 30
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	a7 01       	movw	r20, r14
    1b90:	96 01       	movw	r18, r12
    1b92:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <__udivmodsi4>
    1b96:	da 01       	movw	r26, r20
    1b98:	c9 01       	movw	r24, r18
    1b9a:	01 97       	sbiw	r24, 0x01	; 1
    1b9c:	a1 09       	sbc	r26, r1
    1b9e:	b1 09       	sbc	r27, r1
    1ba0:	b6 95       	lsr	r27
    1ba2:	a7 95       	ror	r26
    1ba4:	97 95       	ror	r25
    1ba6:	87 95       	ror	r24
    1ba8:	8c 01       	movw	r16, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1baa:	ec 85       	ldd	r30, Y+12	; 0x0c
    1bac:	fd 85       	ldd	r31, Y+13	; 0x0d
    1bae:	10 83       	st	Z, r17
  *_ubrrl = baud_setting;
    1bb0:	ee 85       	ldd	r30, Y+14	; 0x0e
    1bb2:	ff 85       	ldd	r31, Y+15	; 0x0f
    1bb4:	00 83       	st	Z, r16

  _written = false;
    1bb6:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1bb8:	ec 89       	ldd	r30, Y+20	; 0x14
    1bba:	fd 89       	ldd	r31, Y+21	; 0x15
    1bbc:	b0 82       	st	Z, r11
  
  sbi(*_ucsrb, RXEN0);
    1bbe:	ea 89       	ldd	r30, Y+18	; 0x12
    1bc0:	fb 89       	ldd	r31, Y+19	; 0x13
    1bc2:	80 81       	ld	r24, Z
    1bc4:	80 61       	ori	r24, 0x10	; 16
    1bc6:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1bc8:	ea 89       	ldd	r30, Y+18	; 0x12
    1bca:	fb 89       	ldd	r31, Y+19	; 0x13
    1bcc:	80 81       	ld	r24, Z
    1bce:	88 60       	ori	r24, 0x08	; 8
    1bd0:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1bd2:	ea 89       	ldd	r30, Y+18	; 0x12
    1bd4:	fb 89       	ldd	r31, Y+19	; 0x13
    1bd6:	80 81       	ld	r24, Z
    1bd8:	80 68       	ori	r24, 0x80	; 128
    1bda:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1bdc:	ea 89       	ldd	r30, Y+18	; 0x12
    1bde:	fb 89       	ldd	r31, Y+19	; 0x13
    1be0:	80 81       	ld	r24, Z
    1be2:	8f 7d       	andi	r24, 0xDF	; 223
    1be4:	80 83       	st	Z, r24
}
    1be6:	df 91       	pop	r29
    1be8:	cf 91       	pop	r28
    1bea:	1f 91       	pop	r17
    1bec:	0f 91       	pop	r16
    1bee:	ff 90       	pop	r15
    1bf0:	ef 90       	pop	r14
    1bf2:	df 90       	pop	r13
    1bf4:	cf 90       	pop	r12
    1bf6:	bf 90       	pop	r11
    1bf8:	08 95       	ret

00001bfa <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1bfa:	1f 92       	push	r1
    1bfc:	0f 92       	push	r0
    1bfe:	0f b6       	in	r0, 0x3f	; 63
    1c00:	0f 92       	push	r0
    1c02:	11 24       	eor	r1, r1
    1c04:	0b b6       	in	r0, 0x3b	; 59
    1c06:	0f 92       	push	r0
    1c08:	2f 93       	push	r18
    1c0a:	8f 93       	push	r24
    1c0c:	9f 93       	push	r25
    1c0e:	af 93       	push	r26
    1c10:	bf 93       	push	r27
    1c12:	ef 93       	push	r30
    1c14:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1c16:	e0 91 f6 03 	lds	r30, 0x03F6
    1c1a:	f0 91 f7 03 	lds	r31, 0x03F7
    1c1e:	80 81       	ld	r24, Z
    1c20:	82 fd       	sbrc	r24, 2
    1c22:	14 c0       	rjmp	.+40     	; 0x1c4c <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1c24:	e6 ee       	ldi	r30, 0xE6	; 230
    1c26:	f3 e0       	ldi	r31, 0x03	; 3
    1c28:	a6 89       	ldd	r26, Z+22	; 0x16
    1c2a:	b7 89       	ldd	r27, Z+23	; 0x17
    1c2c:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1c2e:	81 8d       	ldd	r24, Z+25	; 0x19
    1c30:	8f 5f       	subi	r24, 0xFF	; 255
    1c32:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1c34:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c36:	89 17       	cp	r24, r25
    1c38:	71 f0       	breq	.+28     	; 0x1c56 <__vector_25+0x5c>
      _rx_buffer[_rx_buffer_head] = c;
    1c3a:	df 01       	movw	r26, r30
    1c3c:	e1 8d       	ldd	r30, Z+25	; 0x19
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	ea 51       	subi	r30, 0x1A	; 26
    1c42:	fc 4f       	sbci	r31, 0xFC	; 252
    1c44:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
    1c46:	59 96       	adiw	r26, 0x19	; 25
    1c48:	8c 93       	st	X, r24
    1c4a:	05 c0       	rjmp	.+10     	; 0x1c56 <__vector_25+0x5c>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1c4c:	e0 91 fc 03 	lds	r30, 0x03FC
    1c50:	f0 91 fd 03 	lds	r31, 0x03FD
    1c54:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1c56:	ff 91       	pop	r31
    1c58:	ef 91       	pop	r30
    1c5a:	bf 91       	pop	r27
    1c5c:	af 91       	pop	r26
    1c5e:	9f 91       	pop	r25
    1c60:	8f 91       	pop	r24
    1c62:	2f 91       	pop	r18
    1c64:	0f 90       	pop	r0
    1c66:	0b be       	out	0x3b, r0	; 59
    1c68:	0f 90       	pop	r0
    1c6a:	0f be       	out	0x3f, r0	; 63
    1c6c:	0f 90       	pop	r0
    1c6e:	1f 90       	pop	r1
    1c70:	18 95       	reti

00001c72 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1c72:	1f 92       	push	r1
    1c74:	0f 92       	push	r0
    1c76:	0f b6       	in	r0, 0x3f	; 63
    1c78:	0f 92       	push	r0
    1c7a:	11 24       	eor	r1, r1
    1c7c:	0b b6       	in	r0, 0x3b	; 59
    1c7e:	0f 92       	push	r0
    1c80:	2f 93       	push	r18
    1c82:	3f 93       	push	r19
    1c84:	4f 93       	push	r20
    1c86:	5f 93       	push	r21
    1c88:	6f 93       	push	r22
    1c8a:	7f 93       	push	r23
    1c8c:	8f 93       	push	r24
    1c8e:	9f 93       	push	r25
    1c90:	af 93       	push	r26
    1c92:	bf 93       	push	r27
    1c94:	ef 93       	push	r30
    1c96:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1c98:	86 ee       	ldi	r24, 0xE6	; 230
    1c9a:	93 e0       	ldi	r25, 0x03	; 3
    1c9c:	ac de       	rcall	.-680    	; 0x19f6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1c9e:	ff 91       	pop	r31
    1ca0:	ef 91       	pop	r30
    1ca2:	bf 91       	pop	r27
    1ca4:	af 91       	pop	r26
    1ca6:	9f 91       	pop	r25
    1ca8:	8f 91       	pop	r24
    1caa:	7f 91       	pop	r23
    1cac:	6f 91       	pop	r22
    1cae:	5f 91       	pop	r21
    1cb0:	4f 91       	pop	r20
    1cb2:	3f 91       	pop	r19
    1cb4:	2f 91       	pop	r18
    1cb6:	0f 90       	pop	r0
    1cb8:	0b be       	out	0x3b, r0	; 59
    1cba:	0f 90       	pop	r0
    1cbc:	0f be       	out	0x3f, r0	; 63
    1cbe:	0f 90       	pop	r0
    1cc0:	1f 90       	pop	r1
    1cc2:	18 95       	reti

00001cc4 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1cc4:	86 ee       	ldi	r24, 0xE6	; 230
    1cc6:	93 e0       	ldi	r25, 0x03	; 3
    1cc8:	37 de       	rcall	.-914    	; 0x1938 <_ZN14HardwareSerial9availableEv>
    1cca:	21 e0       	ldi	r18, 0x01	; 1
    1ccc:	89 2b       	or	r24, r25
    1cce:	09 f4       	brne	.+2      	; 0x1cd2 <_Z17Serial0_availablev+0xe>
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
}
    1cd2:	82 2f       	mov	r24, r18
    1cd4:	08 95       	ret

00001cd6 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1cd6:	e6 ee       	ldi	r30, 0xE6	; 230
    1cd8:	f3 e0       	ldi	r31, 0x03	; 3
    1cda:	13 82       	std	Z+3, r1	; 0x03
    1cdc:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1cde:	88 ee       	ldi	r24, 0xE8	; 232
    1ce0:	93 e0       	ldi	r25, 0x03	; 3
    1ce2:	a0 e0       	ldi	r26, 0x00	; 0
    1ce4:	b0 e0       	ldi	r27, 0x00	; 0
    1ce6:	84 83       	std	Z+4, r24	; 0x04
    1ce8:	95 83       	std	Z+5, r25	; 0x05
    1cea:	a6 83       	std	Z+6, r26	; 0x06
    1cec:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1cee:	86 ee       	ldi	r24, 0xE6	; 230
    1cf0:	92 e0       	ldi	r25, 0x02	; 2
    1cf2:	91 83       	std	Z+1, r25	; 0x01
    1cf4:	80 83       	st	Z, r24
    1cf6:	85 ec       	ldi	r24, 0xC5	; 197
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	95 87       	std	Z+13, r25	; 0x0d
    1cfc:	84 87       	std	Z+12, r24	; 0x0c
    1cfe:	84 ec       	ldi	r24, 0xC4	; 196
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	97 87       	std	Z+15, r25	; 0x0f
    1d04:	86 87       	std	Z+14, r24	; 0x0e
    1d06:	80 ec       	ldi	r24, 0xC0	; 192
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	91 8b       	std	Z+17, r25	; 0x11
    1d0c:	80 8b       	std	Z+16, r24	; 0x10
    1d0e:	81 ec       	ldi	r24, 0xC1	; 193
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	93 8b       	std	Z+19, r25	; 0x13
    1d14:	82 8b       	std	Z+18, r24	; 0x12
    1d16:	82 ec       	ldi	r24, 0xC2	; 194
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	95 8b       	std	Z+21, r25	; 0x15
    1d1c:	84 8b       	std	Z+20, r24	; 0x14
    1d1e:	86 ec       	ldi	r24, 0xC6	; 198
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	97 8b       	std	Z+23, r25	; 0x17
    1d24:	86 8b       	std	Z+22, r24	; 0x16
    1d26:	11 8e       	std	Z+25, r1	; 0x19
    1d28:	12 8e       	std	Z+26, r1	; 0x1a
    1d2a:	13 8e       	std	Z+27, r1	; 0x1b
    1d2c:	14 8e       	std	Z+28, r1	; 0x1c
    1d2e:	08 95       	ret

00001d30 <__vector_36>:
#elif defined(USART1_RX_vect)
ISR(USART1_RX_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    1d30:	1f 92       	push	r1
    1d32:	0f 92       	push	r0
    1d34:	0f b6       	in	r0, 0x3f	; 63
    1d36:	0f 92       	push	r0
    1d38:	11 24       	eor	r1, r1
    1d3a:	0b b6       	in	r0, 0x3b	; 59
    1d3c:	0f 92       	push	r0
    1d3e:	2f 93       	push	r18
    1d40:	8f 93       	push	r24
    1d42:	9f 93       	push	r25
    1d44:	af 93       	push	r26
    1d46:	bf 93       	push	r27
    1d48:	ef 93       	push	r30
    1d4a:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1d4c:	e0 91 93 04 	lds	r30, 0x0493
    1d50:	f0 91 94 04 	lds	r31, 0x0494
    1d54:	80 81       	ld	r24, Z
    1d56:	82 fd       	sbrc	r24, 2
    1d58:	14 c0       	rjmp	.+40     	; 0x1d82 <__vector_36+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1d5a:	e3 e8       	ldi	r30, 0x83	; 131
    1d5c:	f4 e0       	ldi	r31, 0x04	; 4
    1d5e:	a6 89       	ldd	r26, Z+22	; 0x16
    1d60:	b7 89       	ldd	r27, Z+23	; 0x17
    1d62:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1d64:	81 8d       	ldd	r24, Z+25	; 0x19
    1d66:	8f 5f       	subi	r24, 0xFF	; 255
    1d68:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1d6a:	92 8d       	ldd	r25, Z+26	; 0x1a
    1d6c:	89 17       	cp	r24, r25
    1d6e:	71 f0       	breq	.+28     	; 0x1d8c <__vector_36+0x5c>
      _rx_buffer[_rx_buffer_head] = c;
    1d70:	df 01       	movw	r26, r30
    1d72:	e1 8d       	ldd	r30, Z+25	; 0x19
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	ed 57       	subi	r30, 0x7D	; 125
    1d78:	fb 4f       	sbci	r31, 0xFB	; 251
    1d7a:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
    1d7c:	59 96       	adiw	r26, 0x19	; 25
    1d7e:	8c 93       	st	X, r24
    1d80:	05 c0       	rjmp	.+10     	; 0x1d8c <__vector_36+0x5c>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1d82:	e0 91 99 04 	lds	r30, 0x0499
    1d86:	f0 91 9a 04 	lds	r31, 0x049A
    1d8a:	80 81       	ld	r24, Z
  Serial1._rx_complete_irq();
}
    1d8c:	ff 91       	pop	r31
    1d8e:	ef 91       	pop	r30
    1d90:	bf 91       	pop	r27
    1d92:	af 91       	pop	r26
    1d94:	9f 91       	pop	r25
    1d96:	8f 91       	pop	r24
    1d98:	2f 91       	pop	r18
    1d9a:	0f 90       	pop	r0
    1d9c:	0b be       	out	0x3b, r0	; 59
    1d9e:	0f 90       	pop	r0
    1da0:	0f be       	out	0x3f, r0	; 63
    1da2:	0f 90       	pop	r0
    1da4:	1f 90       	pop	r1
    1da6:	18 95       	reti

00001da8 <__vector_37>:
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    1da8:	1f 92       	push	r1
    1daa:	0f 92       	push	r0
    1dac:	0f b6       	in	r0, 0x3f	; 63
    1dae:	0f 92       	push	r0
    1db0:	11 24       	eor	r1, r1
    1db2:	0b b6       	in	r0, 0x3b	; 59
    1db4:	0f 92       	push	r0
    1db6:	2f 93       	push	r18
    1db8:	3f 93       	push	r19
    1dba:	4f 93       	push	r20
    1dbc:	5f 93       	push	r21
    1dbe:	6f 93       	push	r22
    1dc0:	7f 93       	push	r23
    1dc2:	8f 93       	push	r24
    1dc4:	9f 93       	push	r25
    1dc6:	af 93       	push	r26
    1dc8:	bf 93       	push	r27
    1dca:	ef 93       	push	r30
    1dcc:	ff 93       	push	r31
  Serial1._tx_udr_empty_irq();
    1dce:	83 e8       	ldi	r24, 0x83	; 131
    1dd0:	94 e0       	ldi	r25, 0x04	; 4
    1dd2:	11 de       	rcall	.-990    	; 0x19f6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1dd4:	ff 91       	pop	r31
    1dd6:	ef 91       	pop	r30
    1dd8:	bf 91       	pop	r27
    1dda:	af 91       	pop	r26
    1ddc:	9f 91       	pop	r25
    1dde:	8f 91       	pop	r24
    1de0:	7f 91       	pop	r23
    1de2:	6f 91       	pop	r22
    1de4:	5f 91       	pop	r21
    1de6:	4f 91       	pop	r20
    1de8:	3f 91       	pop	r19
    1dea:	2f 91       	pop	r18
    1dec:	0f 90       	pop	r0
    1dee:	0b be       	out	0x3b, r0	; 59
    1df0:	0f 90       	pop	r0
    1df2:	0f be       	out	0x3f, r0	; 63
    1df4:	0f 90       	pop	r0
    1df6:	1f 90       	pop	r1
    1df8:	18 95       	reti

00001dfa <_Z17Serial1_availablev>:
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
    1dfa:	83 e8       	ldi	r24, 0x83	; 131
    1dfc:	94 e0       	ldi	r25, 0x04	; 4
    1dfe:	9c dd       	rcall	.-1224   	; 0x1938 <_ZN14HardwareSerial9availableEv>
    1e00:	21 e0       	ldi	r18, 0x01	; 1
    1e02:	89 2b       	or	r24, r25
    1e04:	09 f4       	brne	.+2      	; 0x1e08 <_Z17Serial1_availablev+0xe>
    1e06:	20 e0       	ldi	r18, 0x00	; 0
}
    1e08:	82 2f       	mov	r24, r18
    1e0a:	08 95       	ret

00001e0c <_GLOBAL__sub_I___vector_36>:
    1e0c:	e3 e8       	ldi	r30, 0x83	; 131
    1e0e:	f4 e0       	ldi	r31, 0x04	; 4
    1e10:	13 82       	std	Z+3, r1	; 0x03
    1e12:	12 82       	std	Z+2, r1	; 0x02
    1e14:	88 ee       	ldi	r24, 0xE8	; 232
    1e16:	93 e0       	ldi	r25, 0x03	; 3
    1e18:	a0 e0       	ldi	r26, 0x00	; 0
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	84 83       	std	Z+4, r24	; 0x04
    1e1e:	95 83       	std	Z+5, r25	; 0x05
    1e20:	a6 83       	std	Z+6, r26	; 0x06
    1e22:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1e24:	86 ee       	ldi	r24, 0xE6	; 230
    1e26:	92 e0       	ldi	r25, 0x02	; 2
    1e28:	91 83       	std	Z+1, r25	; 0x01
    1e2a:	80 83       	st	Z, r24
    1e2c:	8d ec       	ldi	r24, 0xCD	; 205
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	95 87       	std	Z+13, r25	; 0x0d
    1e32:	84 87       	std	Z+12, r24	; 0x0c
    1e34:	8c ec       	ldi	r24, 0xCC	; 204
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	97 87       	std	Z+15, r25	; 0x0f
    1e3a:	86 87       	std	Z+14, r24	; 0x0e
    1e3c:	88 ec       	ldi	r24, 0xC8	; 200
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	91 8b       	std	Z+17, r25	; 0x11
    1e42:	80 8b       	std	Z+16, r24	; 0x10
    1e44:	89 ec       	ldi	r24, 0xC9	; 201
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	93 8b       	std	Z+19, r25	; 0x13
    1e4a:	82 8b       	std	Z+18, r24	; 0x12
    1e4c:	8a ec       	ldi	r24, 0xCA	; 202
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	95 8b       	std	Z+21, r25	; 0x15
    1e52:	84 8b       	std	Z+20, r24	; 0x14
    1e54:	8e ec       	ldi	r24, 0xCE	; 206
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	97 8b       	std	Z+23, r25	; 0x17
    1e5a:	86 8b       	std	Z+22, r24	; 0x16
    1e5c:	11 8e       	std	Z+25, r1	; 0x19
    1e5e:	12 8e       	std	Z+26, r1	; 0x1a
    1e60:	13 8e       	std	Z+27, r1	; 0x1b
    1e62:	14 8e       	std	Z+28, r1	; 0x1c
    1e64:	08 95       	ret

00001e66 <__vector_51>:
// first place.

#if defined(HAVE_HWSERIAL2)

ISR(USART2_RX_vect)
{
    1e66:	1f 92       	push	r1
    1e68:	0f 92       	push	r0
    1e6a:	0f b6       	in	r0, 0x3f	; 63
    1e6c:	0f 92       	push	r0
    1e6e:	11 24       	eor	r1, r1
    1e70:	0b b6       	in	r0, 0x3b	; 59
    1e72:	0f 92       	push	r0
    1e74:	2f 93       	push	r18
    1e76:	8f 93       	push	r24
    1e78:	9f 93       	push	r25
    1e7a:	af 93       	push	r26
    1e7c:	bf 93       	push	r27
    1e7e:	ef 93       	push	r30
    1e80:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1e82:	e0 91 30 05 	lds	r30, 0x0530
    1e86:	f0 91 31 05 	lds	r31, 0x0531
    1e8a:	80 81       	ld	r24, Z
    1e8c:	82 fd       	sbrc	r24, 2
    1e8e:	14 c0       	rjmp	.+40     	; 0x1eb8 <__vector_51+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1e90:	e0 e2       	ldi	r30, 0x20	; 32
    1e92:	f5 e0       	ldi	r31, 0x05	; 5
    1e94:	a6 89       	ldd	r26, Z+22	; 0x16
    1e96:	b7 89       	ldd	r27, Z+23	; 0x17
    1e98:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1e9a:	81 8d       	ldd	r24, Z+25	; 0x19
    1e9c:	8f 5f       	subi	r24, 0xFF	; 255
    1e9e:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1ea0:	92 8d       	ldd	r25, Z+26	; 0x1a
    1ea2:	89 17       	cp	r24, r25
    1ea4:	71 f0       	breq	.+28     	; 0x1ec2 <__vector_51+0x5c>
      _rx_buffer[_rx_buffer_head] = c;
    1ea6:	df 01       	movw	r26, r30
    1ea8:	e1 8d       	ldd	r30, Z+25	; 0x19
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	e0 5e       	subi	r30, 0xE0	; 224
    1eae:	fa 4f       	sbci	r31, 0xFA	; 250
    1eb0:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
    1eb2:	59 96       	adiw	r26, 0x19	; 25
    1eb4:	8c 93       	st	X, r24
    1eb6:	05 c0       	rjmp	.+10     	; 0x1ec2 <__vector_51+0x5c>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1eb8:	e0 91 36 05 	lds	r30, 0x0536
    1ebc:	f0 91 37 05 	lds	r31, 0x0537
    1ec0:	80 81       	ld	r24, Z
  Serial2._rx_complete_irq();
}
    1ec2:	ff 91       	pop	r31
    1ec4:	ef 91       	pop	r30
    1ec6:	bf 91       	pop	r27
    1ec8:	af 91       	pop	r26
    1eca:	9f 91       	pop	r25
    1ecc:	8f 91       	pop	r24
    1ece:	2f 91       	pop	r18
    1ed0:	0f 90       	pop	r0
    1ed2:	0b be       	out	0x3b, r0	; 59
    1ed4:	0f 90       	pop	r0
    1ed6:	0f be       	out	0x3f, r0	; 63
    1ed8:	0f 90       	pop	r0
    1eda:	1f 90       	pop	r1
    1edc:	18 95       	reti

00001ede <__vector_52>:

ISR(USART2_UDRE_vect)
{
    1ede:	1f 92       	push	r1
    1ee0:	0f 92       	push	r0
    1ee2:	0f b6       	in	r0, 0x3f	; 63
    1ee4:	0f 92       	push	r0
    1ee6:	11 24       	eor	r1, r1
    1ee8:	0b b6       	in	r0, 0x3b	; 59
    1eea:	0f 92       	push	r0
    1eec:	2f 93       	push	r18
    1eee:	3f 93       	push	r19
    1ef0:	4f 93       	push	r20
    1ef2:	5f 93       	push	r21
    1ef4:	6f 93       	push	r22
    1ef6:	7f 93       	push	r23
    1ef8:	8f 93       	push	r24
    1efa:	9f 93       	push	r25
    1efc:	af 93       	push	r26
    1efe:	bf 93       	push	r27
    1f00:	ef 93       	push	r30
    1f02:	ff 93       	push	r31
  Serial2._tx_udr_empty_irq();
    1f04:	80 e2       	ldi	r24, 0x20	; 32
    1f06:	95 e0       	ldi	r25, 0x05	; 5
    1f08:	76 dd       	rcall	.-1300   	; 0x19f6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1f0a:	ff 91       	pop	r31
    1f0c:	ef 91       	pop	r30
    1f0e:	bf 91       	pop	r27
    1f10:	af 91       	pop	r26
    1f12:	9f 91       	pop	r25
    1f14:	8f 91       	pop	r24
    1f16:	7f 91       	pop	r23
    1f18:	6f 91       	pop	r22
    1f1a:	5f 91       	pop	r21
    1f1c:	4f 91       	pop	r20
    1f1e:	3f 91       	pop	r19
    1f20:	2f 91       	pop	r18
    1f22:	0f 90       	pop	r0
    1f24:	0b be       	out	0x3b, r0	; 59
    1f26:	0f 90       	pop	r0
    1f28:	0f be       	out	0x3f, r0	; 63
    1f2a:	0f 90       	pop	r0
    1f2c:	1f 90       	pop	r1
    1f2e:	18 95       	reti

00001f30 <_Z17Serial2_availablev>:
HardwareSerial Serial2(&UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial2_available() {
  return Serial2.available();
    1f30:	80 e2       	ldi	r24, 0x20	; 32
    1f32:	95 e0       	ldi	r25, 0x05	; 5
    1f34:	01 dd       	rcall	.-1534   	; 0x1938 <_ZN14HardwareSerial9availableEv>
    1f36:	21 e0       	ldi	r18, 0x01	; 1
    1f38:	89 2b       	or	r24, r25
    1f3a:	09 f4       	brne	.+2      	; 0x1f3e <_Z17Serial2_availablev+0xe>
    1f3c:	20 e0       	ldi	r18, 0x00	; 0
}
    1f3e:	82 2f       	mov	r24, r18
    1f40:	08 95       	ret

00001f42 <_GLOBAL__sub_I___vector_51>:
    1f42:	e0 e2       	ldi	r30, 0x20	; 32
    1f44:	f5 e0       	ldi	r31, 0x05	; 5
    1f46:	13 82       	std	Z+3, r1	; 0x03
    1f48:	12 82       	std	Z+2, r1	; 0x02
    1f4a:	88 ee       	ldi	r24, 0xE8	; 232
    1f4c:	93 e0       	ldi	r25, 0x03	; 3
    1f4e:	a0 e0       	ldi	r26, 0x00	; 0
    1f50:	b0 e0       	ldi	r27, 0x00	; 0
    1f52:	84 83       	std	Z+4, r24	; 0x04
    1f54:	95 83       	std	Z+5, r25	; 0x05
    1f56:	a6 83       	std	Z+6, r26	; 0x06
    1f58:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1f5a:	86 ee       	ldi	r24, 0xE6	; 230
    1f5c:	92 e0       	ldi	r25, 0x02	; 2
    1f5e:	91 83       	std	Z+1, r25	; 0x01
    1f60:	80 83       	st	Z, r24
    1f62:	85 ed       	ldi	r24, 0xD5	; 213
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	95 87       	std	Z+13, r25	; 0x0d
    1f68:	84 87       	std	Z+12, r24	; 0x0c
    1f6a:	84 ed       	ldi	r24, 0xD4	; 212
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	97 87       	std	Z+15, r25	; 0x0f
    1f70:	86 87       	std	Z+14, r24	; 0x0e
    1f72:	80 ed       	ldi	r24, 0xD0	; 208
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	91 8b       	std	Z+17, r25	; 0x11
    1f78:	80 8b       	std	Z+16, r24	; 0x10
    1f7a:	81 ed       	ldi	r24, 0xD1	; 209
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	93 8b       	std	Z+19, r25	; 0x13
    1f80:	82 8b       	std	Z+18, r24	; 0x12
    1f82:	82 ed       	ldi	r24, 0xD2	; 210
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	95 8b       	std	Z+21, r25	; 0x15
    1f88:	84 8b       	std	Z+20, r24	; 0x14
    1f8a:	86 ed       	ldi	r24, 0xD6	; 214
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	97 8b       	std	Z+23, r25	; 0x17
    1f90:	86 8b       	std	Z+22, r24	; 0x16
    1f92:	11 8e       	std	Z+25, r1	; 0x19
    1f94:	12 8e       	std	Z+26, r1	; 0x1a
    1f96:	13 8e       	std	Z+27, r1	; 0x1b
    1f98:	14 8e       	std	Z+28, r1	; 0x1c
    1f9a:	08 95       	ret

00001f9c <__vector_54>:
// first place.

#if defined(HAVE_HWSERIAL3)

ISR(USART3_RX_vect)
{
    1f9c:	1f 92       	push	r1
    1f9e:	0f 92       	push	r0
    1fa0:	0f b6       	in	r0, 0x3f	; 63
    1fa2:	0f 92       	push	r0
    1fa4:	11 24       	eor	r1, r1
    1fa6:	0b b6       	in	r0, 0x3b	; 59
    1fa8:	0f 92       	push	r0
    1faa:	2f 93       	push	r18
    1fac:	8f 93       	push	r24
    1fae:	9f 93       	push	r25
    1fb0:	af 93       	push	r26
    1fb2:	bf 93       	push	r27
    1fb4:	ef 93       	push	r30
    1fb6:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1fb8:	e0 91 cd 05 	lds	r30, 0x05CD
    1fbc:	f0 91 ce 05 	lds	r31, 0x05CE
    1fc0:	80 81       	ld	r24, Z
    1fc2:	82 fd       	sbrc	r24, 2
    1fc4:	14 c0       	rjmp	.+40     	; 0x1fee <__vector_54+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1fc6:	ed eb       	ldi	r30, 0xBD	; 189
    1fc8:	f5 e0       	ldi	r31, 0x05	; 5
    1fca:	a6 89       	ldd	r26, Z+22	; 0x16
    1fcc:	b7 89       	ldd	r27, Z+23	; 0x17
    1fce:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1fd0:	81 8d       	ldd	r24, Z+25	; 0x19
    1fd2:	8f 5f       	subi	r24, 0xFF	; 255
    1fd4:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1fd6:	92 8d       	ldd	r25, Z+26	; 0x1a
    1fd8:	89 17       	cp	r24, r25
    1fda:	71 f0       	breq	.+28     	; 0x1ff8 <__vector_54+0x5c>
      _rx_buffer[_rx_buffer_head] = c;
    1fdc:	df 01       	movw	r26, r30
    1fde:	e1 8d       	ldd	r30, Z+25	; 0x19
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	e3 54       	subi	r30, 0x43	; 67
    1fe4:	fa 4f       	sbci	r31, 0xFA	; 250
    1fe6:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
    1fe8:	59 96       	adiw	r26, 0x19	; 25
    1fea:	8c 93       	st	X, r24
    1fec:	05 c0       	rjmp	.+10     	; 0x1ff8 <__vector_54+0x5c>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1fee:	e0 91 d3 05 	lds	r30, 0x05D3
    1ff2:	f0 91 d4 05 	lds	r31, 0x05D4
    1ff6:	80 81       	ld	r24, Z
  Serial3._rx_complete_irq();
}
    1ff8:	ff 91       	pop	r31
    1ffa:	ef 91       	pop	r30
    1ffc:	bf 91       	pop	r27
    1ffe:	af 91       	pop	r26
    2000:	9f 91       	pop	r25
    2002:	8f 91       	pop	r24
    2004:	2f 91       	pop	r18
    2006:	0f 90       	pop	r0
    2008:	0b be       	out	0x3b, r0	; 59
    200a:	0f 90       	pop	r0
    200c:	0f be       	out	0x3f, r0	; 63
    200e:	0f 90       	pop	r0
    2010:	1f 90       	pop	r1
    2012:	18 95       	reti

00002014 <__vector_55>:

ISR(USART3_UDRE_vect)
{
    2014:	1f 92       	push	r1
    2016:	0f 92       	push	r0
    2018:	0f b6       	in	r0, 0x3f	; 63
    201a:	0f 92       	push	r0
    201c:	11 24       	eor	r1, r1
    201e:	0b b6       	in	r0, 0x3b	; 59
    2020:	0f 92       	push	r0
    2022:	2f 93       	push	r18
    2024:	3f 93       	push	r19
    2026:	4f 93       	push	r20
    2028:	5f 93       	push	r21
    202a:	6f 93       	push	r22
    202c:	7f 93       	push	r23
    202e:	8f 93       	push	r24
    2030:	9f 93       	push	r25
    2032:	af 93       	push	r26
    2034:	bf 93       	push	r27
    2036:	ef 93       	push	r30
    2038:	ff 93       	push	r31
  Serial3._tx_udr_empty_irq();
    203a:	8d eb       	ldi	r24, 0xBD	; 189
    203c:	95 e0       	ldi	r25, 0x05	; 5
    203e:	db dc       	rcall	.-1610   	; 0x19f6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    2040:	ff 91       	pop	r31
    2042:	ef 91       	pop	r30
    2044:	bf 91       	pop	r27
    2046:	af 91       	pop	r26
    2048:	9f 91       	pop	r25
    204a:	8f 91       	pop	r24
    204c:	7f 91       	pop	r23
    204e:	6f 91       	pop	r22
    2050:	5f 91       	pop	r21
    2052:	4f 91       	pop	r20
    2054:	3f 91       	pop	r19
    2056:	2f 91       	pop	r18
    2058:	0f 90       	pop	r0
    205a:	0b be       	out	0x3b, r0	; 59
    205c:	0f 90       	pop	r0
    205e:	0f be       	out	0x3f, r0	; 63
    2060:	0f 90       	pop	r0
    2062:	1f 90       	pop	r1
    2064:	18 95       	reti

00002066 <_Z17Serial3_availablev>:
HardwareSerial Serial3(&UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial3_available() {
  return Serial3.available();
    2066:	8d eb       	ldi	r24, 0xBD	; 189
    2068:	95 e0       	ldi	r25, 0x05	; 5
    206a:	66 dc       	rcall	.-1844   	; 0x1938 <_ZN14HardwareSerial9availableEv>
    206c:	21 e0       	ldi	r18, 0x01	; 1
    206e:	89 2b       	or	r24, r25
    2070:	09 f4       	brne	.+2      	; 0x2074 <_Z17Serial3_availablev+0xe>
    2072:	20 e0       	ldi	r18, 0x00	; 0
}
    2074:	82 2f       	mov	r24, r18
    2076:	08 95       	ret

00002078 <_GLOBAL__sub_I___vector_54>:
    2078:	ed eb       	ldi	r30, 0xBD	; 189
    207a:	f5 e0       	ldi	r31, 0x05	; 5
    207c:	13 82       	std	Z+3, r1	; 0x03
    207e:	12 82       	std	Z+2, r1	; 0x02
    2080:	88 ee       	ldi	r24, 0xE8	; 232
    2082:	93 e0       	ldi	r25, 0x03	; 3
    2084:	a0 e0       	ldi	r26, 0x00	; 0
    2086:	b0 e0       	ldi	r27, 0x00	; 0
    2088:	84 83       	std	Z+4, r24	; 0x04
    208a:	95 83       	std	Z+5, r25	; 0x05
    208c:	a6 83       	std	Z+6, r26	; 0x06
    208e:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    2090:	86 ee       	ldi	r24, 0xE6	; 230
    2092:	92 e0       	ldi	r25, 0x02	; 2
    2094:	91 83       	std	Z+1, r25	; 0x01
    2096:	80 83       	st	Z, r24
    2098:	85 e3       	ldi	r24, 0x35	; 53
    209a:	91 e0       	ldi	r25, 0x01	; 1
    209c:	95 87       	std	Z+13, r25	; 0x0d
    209e:	84 87       	std	Z+12, r24	; 0x0c
    20a0:	84 e3       	ldi	r24, 0x34	; 52
    20a2:	91 e0       	ldi	r25, 0x01	; 1
    20a4:	97 87       	std	Z+15, r25	; 0x0f
    20a6:	86 87       	std	Z+14, r24	; 0x0e
    20a8:	80 e3       	ldi	r24, 0x30	; 48
    20aa:	91 e0       	ldi	r25, 0x01	; 1
    20ac:	91 8b       	std	Z+17, r25	; 0x11
    20ae:	80 8b       	std	Z+16, r24	; 0x10
    20b0:	81 e3       	ldi	r24, 0x31	; 49
    20b2:	91 e0       	ldi	r25, 0x01	; 1
    20b4:	93 8b       	std	Z+19, r25	; 0x13
    20b6:	82 8b       	std	Z+18, r24	; 0x12
    20b8:	82 e3       	ldi	r24, 0x32	; 50
    20ba:	91 e0       	ldi	r25, 0x01	; 1
    20bc:	95 8b       	std	Z+21, r25	; 0x15
    20be:	84 8b       	std	Z+20, r24	; 0x14
    20c0:	86 e3       	ldi	r24, 0x36	; 54
    20c2:	91 e0       	ldi	r25, 0x01	; 1
    20c4:	97 8b       	std	Z+23, r25	; 0x17
    20c6:	86 8b       	std	Z+22, r24	; 0x16
    20c8:	11 8e       	std	Z+25, r1	; 0x19
    20ca:	12 8e       	std	Z+26, r1	; 0x1a
    20cc:	13 8e       	std	Z+27, r1	; 0x1b
    20ce:	14 8e       	std	Z+28, r1	; 0x1c
    20d0:	08 95       	ret

000020d2 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    20d2:	08 95       	ret

000020d4 <_ZNK9IPAddress7printToER5Print>:
}

bool IPAddress::operator==(const uint8_t* addr) const
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}
    20d4:	8f 92       	push	r8
    20d6:	9f 92       	push	r9
    20d8:	af 92       	push	r10
    20da:	bf 92       	push	r11
    20dc:	cf 92       	push	r12
    20de:	df 92       	push	r13
    20e0:	ef 92       	push	r14
    20e2:	ff 92       	push	r15
    20e4:	0f 93       	push	r16
    20e6:	1f 93       	push	r17
    20e8:	cf 93       	push	r28
    20ea:	df 93       	push	r29
    20ec:	5c 01       	movw	r10, r24
    20ee:	7b 01       	movw	r14, r22
    20f0:	4c 01       	movw	r8, r24
    20f2:	82 e0       	ldi	r24, 0x02	; 2
    20f4:	88 0e       	add	r8, r24
    20f6:	91 1c       	adc	r9, r1
    20f8:	65 01       	movw	r12, r10
    20fa:	e5 e0       	ldi	r30, 0x05	; 5
    20fc:	ce 0e       	add	r12, r30
    20fe:	d1 1c       	adc	r13, r1
    2100:	00 e0       	ldi	r16, 0x00	; 0
    2102:	10 e0       	ldi	r17, 0x00	; 0
    2104:	f4 01       	movw	r30, r8
    2106:	61 91       	ld	r22, Z+
    2108:	4f 01       	movw	r8, r30
    210a:	4a e0       	ldi	r20, 0x0A	; 10
    210c:	50 e0       	ldi	r21, 0x00	; 0
    210e:	c7 01       	movw	r24, r14
    2110:	21 d1       	rcall	.+578    	; 0x2354 <_ZN5Print5printEhi>
    2112:	ec 01       	movw	r28, r24
    2114:	6e e2       	ldi	r22, 0x2E	; 46
    2116:	c7 01       	movw	r24, r14
    2118:	79 d0       	rcall	.+242    	; 0x220c <_ZN5Print5printEc>
    211a:	8c 0f       	add	r24, r28
    211c:	9d 1f       	adc	r25, r29
    211e:	08 0f       	add	r16, r24
    2120:	19 1f       	adc	r17, r25
    2122:	8c 14       	cp	r8, r12
    2124:	9d 04       	cpc	r9, r13
    2126:	71 f7       	brne	.-36     	; 0x2104 <_ZNK9IPAddress7printToER5Print+0x30>
    2128:	4a e0       	ldi	r20, 0x0A	; 10
    212a:	50 e0       	ldi	r21, 0x00	; 0
    212c:	f5 01       	movw	r30, r10
    212e:	65 81       	ldd	r22, Z+5	; 0x05
    2130:	c7 01       	movw	r24, r14
    2132:	10 d1       	rcall	.+544    	; 0x2354 <_ZN5Print5printEhi>
    2134:	80 0f       	add	r24, r16
    2136:	91 1f       	adc	r25, r17
    2138:	df 91       	pop	r29
    213a:	cf 91       	pop	r28
    213c:	1f 91       	pop	r17
    213e:	0f 91       	pop	r16
    2140:	ff 90       	pop	r15
    2142:	ef 90       	pop	r14
    2144:	df 90       	pop	r13
    2146:	cf 90       	pop	r12
    2148:	bf 90       	pop	r11
    214a:	af 90       	pop	r10
    214c:	9f 90       	pop	r9
    214e:	8f 90       	pop	r8
    2150:	08 95       	ret

00002152 <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    2152:	ea e5       	ldi	r30, 0x5A	; 90
    2154:	f6 e0       	ldi	r31, 0x06	; 6
    2156:	86 ef       	ldi	r24, 0xF6	; 246
    2158:	92 e0       	ldi	r25, 0x02	; 2
    215a:	91 83       	std	Z+1, r25	; 0x01
    215c:	80 83       	st	Z, r24
{
    _address.bytes[0] = first_octet;
    215e:	12 82       	std	Z+2, r1	; 0x02
    _address.bytes[1] = second_octet;
    2160:	13 82       	std	Z+3, r1	; 0x03
    _address.bytes[2] = third_octet;
    2162:	14 82       	std	Z+4, r1	; 0x04
    _address.bytes[3] = fourth_octet;
    2164:	15 82       	std	Z+5, r1	; 0x05
    2166:	08 95       	ret

00002168 <initVariant>:
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    2168:	08 95       	ret

0000216a <main>:

int main(void)
{
	init();
    216a:	d5 d3       	rcall	.+1962   	; 0x2916 <init>

	initVariant();
    216c:	fd df       	rcall	.-6      	; 0x2168 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    216e:	b1 db       	rcall	.-2206   	; 0x18d2 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2170:	ca ec       	ldi	r28, 0xCA	; 202
    2172:	dc e0       	ldi	r29, 0x0C	; 12
#endif
	
	setup();
    
	for (;;) {
		loop();
    2174:	ad db       	rcall	.-2214   	; 0x18d0 <loop>
		if (serialEventRun) serialEventRun();
    2176:	20 97       	sbiw	r28, 0x00	; 0
    2178:	e9 f3       	breq	.-6      	; 0x2174 <main+0xa>
    217a:	0c dc       	rcall	.-2024   	; 0x1994 <_Z14serialEventRunv>
    217c:	fb cf       	rjmp	.-10     	; 0x2174 <main+0xa>

0000217e <_Znwj>:
  return malloc(size);
}

void *operator new[](size_t size) {
  return malloc(size);
}
    217e:	09 c6       	rjmp	.+3090   	; 0x2d92 <malloc>
    2180:	08 95       	ret

00002182 <_ZdlPv>:

void operator delete(void * ptr) {
  free(ptr);
    2182:	9c c6       	rjmp	.+3384   	; 0x2ebc <free>
    2184:	08 95       	ret

00002186 <_ZN5Print5writeEPKhj>:
size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    2186:	cf 92       	push	r12
    2188:	df 92       	push	r13
    218a:	ef 92       	push	r14
    218c:	ff 92       	push	r15
    218e:	0f 93       	push	r16
    2190:	1f 93       	push	r17
    2192:	cf 93       	push	r28
    2194:	df 93       	push	r29
    2196:	41 15       	cp	r20, r1
    2198:	51 05       	cpc	r21, r1
    219a:	b1 f0       	breq	.+44     	; 0x21c8 <_ZN5Print5writeEPKhj+0x42>
    219c:	8c 01       	movw	r16, r24
    219e:	e6 2e       	mov	r14, r22
    21a0:	f7 2e       	mov	r15, r23
    21a2:	ea 01       	movw	r28, r20
    21a4:	c1 2c       	mov	r12, r1
    21a6:	d1 2c       	mov	r13, r1
    21a8:	d7 01       	movw	r26, r14
    21aa:	6d 91       	ld	r22, X+
    21ac:	7d 01       	movw	r14, r26
    21ae:	d8 01       	movw	r26, r16
    21b0:	ed 91       	ld	r30, X+
    21b2:	fc 91       	ld	r31, X
    21b4:	01 90       	ld	r0, Z+
    21b6:	f0 81       	ld	r31, Z
    21b8:	e0 2d       	mov	r30, r0
    21ba:	c8 01       	movw	r24, r16
    21bc:	19 95       	eicall
    21be:	c8 0e       	add	r12, r24
    21c0:	d9 1e       	adc	r13, r25
    21c2:	21 97       	sbiw	r28, 0x01	; 1
    21c4:	89 f7       	brne	.-30     	; 0x21a8 <_ZN5Print5writeEPKhj+0x22>
    21c6:	02 c0       	rjmp	.+4      	; 0x21cc <_ZN5Print5writeEPKhj+0x46>
    21c8:	c1 2c       	mov	r12, r1
    21ca:	d1 2c       	mov	r13, r1
    21cc:	c6 01       	movw	r24, r12
    21ce:	df 91       	pop	r29
    21d0:	cf 91       	pop	r28
    21d2:	1f 91       	pop	r17
    21d4:	0f 91       	pop	r16
    21d6:	ff 90       	pop	r15
    21d8:	ef 90       	pop	r14
    21da:	df 90       	pop	r13
    21dc:	cf 90       	pop	r12
    21de:	08 95       	ret

000021e0 <_ZN5Print5printEPKc>:
    21e0:	61 15       	cp	r22, r1
    21e2:	71 05       	cpc	r23, r1
    21e4:	81 f0       	breq	.+32     	; 0x2206 <__stack+0x7>
    21e6:	fb 01       	movw	r30, r22
    21e8:	01 90       	ld	r0, Z+
    21ea:	00 20       	and	r0, r0
    21ec:	e9 f7       	brne	.-6      	; 0x21e8 <_ZN5Print5printEPKc+0x8>
    21ee:	31 97       	sbiw	r30, 0x01	; 1
    21f0:	af 01       	movw	r20, r30
    21f2:	46 1b       	sub	r20, r22
    21f4:	57 0b       	sbc	r21, r23
    21f6:	dc 01       	movw	r26, r24
    21f8:	ed 91       	ld	r30, X+
    21fa:	fc 91       	ld	r31, X
    21fc:	02 80       	ldd	r0, Z+2	; 0x02
    21fe:	f3 81       	ldd	r31, Z+3	; 0x03
    2200:	e0 2d       	mov	r30, r0
    2202:	19 95       	eicall
    2204:	08 95       	ret
    2206:	80 e0       	ldi	r24, 0x00	; 0
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	08 95       	ret

0000220c <_ZN5Print5printEc>:
    220c:	dc 01       	movw	r26, r24
    220e:	ed 91       	ld	r30, X+
    2210:	fc 91       	ld	r31, X
    2212:	01 90       	ld	r0, Z+
    2214:	f0 81       	ld	r31, Z
    2216:	e0 2d       	mov	r30, r0
    2218:	19 95       	eicall
    221a:	08 95       	ret

0000221c <_ZN5Print7printlnEv>:
    221c:	dc 01       	movw	r26, r24
    221e:	ed 91       	ld	r30, X+
    2220:	fc 91       	ld	r31, X
    2222:	02 80       	ldd	r0, Z+2	; 0x02
    2224:	f3 81       	ldd	r31, Z+3	; 0x03
    2226:	e0 2d       	mov	r30, r0
    2228:	42 e0       	ldi	r20, 0x02	; 2
    222a:	50 e0       	ldi	r21, 0x00	; 0
    222c:	68 ef       	ldi	r22, 0xF8	; 248
    222e:	72 e0       	ldi	r23, 0x02	; 2
    2230:	19 95       	eicall
    2232:	08 95       	ret

00002234 <_ZN5Print7printlnEPKc>:
    2234:	0f 93       	push	r16
    2236:	1f 93       	push	r17
    2238:	cf 93       	push	r28
    223a:	df 93       	push	r29
    223c:	ec 01       	movw	r28, r24
    223e:	d0 df       	rcall	.-96     	; 0x21e0 <_ZN5Print5printEPKc>
    2240:	8c 01       	movw	r16, r24
    2242:	ce 01       	movw	r24, r28
    2244:	eb df       	rcall	.-42     	; 0x221c <_ZN5Print7printlnEv>
    2246:	80 0f       	add	r24, r16
    2248:	91 1f       	adc	r25, r17
    224a:	df 91       	pop	r29
    224c:	cf 91       	pop	r28
    224e:	1f 91       	pop	r17
    2250:	0f 91       	pop	r16
    2252:	08 95       	ret

00002254 <_ZN5Print11printNumberEmh>:
    2254:	4f 92       	push	r4
    2256:	5f 92       	push	r5
    2258:	6f 92       	push	r6
    225a:	7f 92       	push	r7
    225c:	9f 92       	push	r9
    225e:	af 92       	push	r10
    2260:	bf 92       	push	r11
    2262:	cf 92       	push	r12
    2264:	df 92       	push	r13
    2266:	ef 92       	push	r14
    2268:	ff 92       	push	r15
    226a:	0f 93       	push	r16
    226c:	1f 93       	push	r17
    226e:	cf 93       	push	r28
    2270:	df 93       	push	r29
    2272:	cd b7       	in	r28, 0x3d	; 61
    2274:	de b7       	in	r29, 0x3e	; 62
    2276:	a1 97       	sbiw	r28, 0x21	; 33
    2278:	0f b6       	in	r0, 0x3f	; 63
    227a:	f8 94       	cli
    227c:	de bf       	out	0x3e, r29	; 62
    227e:	0f be       	out	0x3f, r0	; 63
    2280:	cd bf       	out	0x3d, r28	; 61
    2282:	5c 01       	movw	r10, r24
    2284:	6a 01       	movw	r12, r20
    2286:	7b 01       	movw	r14, r22
    2288:	92 2e       	mov	r9, r18
    228a:	19 a2       	std	Y+33, r1	; 0x21
    228c:	81 e0       	ldi	r24, 0x01	; 1
    228e:	82 17       	cp	r24, r18
    2290:	20 f0       	brcs	.+8      	; 0x229a <_ZN5Print11printNumberEmh+0x46>
    2292:	0f 2e       	mov	r0, r31
    2294:	fa e0       	ldi	r31, 0x0A	; 10
    2296:	9f 2e       	mov	r9, r31
    2298:	f0 2d       	mov	r31, r0
    229a:	8e 01       	movw	r16, r28
    229c:	0f 5d       	subi	r16, 0xDF	; 223
    229e:	1f 4f       	sbci	r17, 0xFF	; 255
    22a0:	49 2c       	mov	r4, r9
    22a2:	51 2c       	mov	r5, r1
    22a4:	61 2c       	mov	r6, r1
    22a6:	71 2c       	mov	r7, r1
    22a8:	c7 01       	movw	r24, r14
    22aa:	b6 01       	movw	r22, r12
    22ac:	a3 01       	movw	r20, r6
    22ae:	92 01       	movw	r18, r4
    22b0:	46 d5       	rcall	.+2700   	; 0x2d3e <__udivmodsi4>
    22b2:	8c 2d       	mov	r24, r12
    22b4:	92 9e       	mul	r9, r18
    22b6:	80 19       	sub	r24, r0
    22b8:	11 24       	eor	r1, r1
    22ba:	01 50       	subi	r16, 0x01	; 1
    22bc:	11 09       	sbc	r17, r1
    22be:	8a 30       	cpi	r24, 0x0A	; 10
    22c0:	10 f4       	brcc	.+4      	; 0x22c6 <_ZN5Print11printNumberEmh+0x72>
    22c2:	80 5d       	subi	r24, 0xD0	; 208
    22c4:	01 c0       	rjmp	.+2      	; 0x22c8 <_ZN5Print11printNumberEmh+0x74>
    22c6:	89 5c       	subi	r24, 0xC9	; 201
    22c8:	d8 01       	movw	r26, r16
    22ca:	8c 93       	st	X, r24
    22cc:	c2 2e       	mov	r12, r18
    22ce:	d3 2e       	mov	r13, r19
    22d0:	e4 2e       	mov	r14, r20
    22d2:	f5 2e       	mov	r15, r21
    22d4:	c1 14       	cp	r12, r1
    22d6:	d1 04       	cpc	r13, r1
    22d8:	e1 04       	cpc	r14, r1
    22da:	f1 04       	cpc	r15, r1
    22dc:	29 f7       	brne	.-54     	; 0x22a8 <_ZN5Print11printNumberEmh+0x54>
    22de:	01 15       	cp	r16, r1
    22e0:	11 05       	cpc	r17, r1
    22e2:	91 f0       	breq	.+36     	; 0x2308 <_ZN5Print11printNumberEmh+0xb4>
    22e4:	f8 01       	movw	r30, r16
    22e6:	01 90       	ld	r0, Z+
    22e8:	00 20       	and	r0, r0
    22ea:	e9 f7       	brne	.-6      	; 0x22e6 <_ZN5Print11printNumberEmh+0x92>
    22ec:	31 97       	sbiw	r30, 0x01	; 1
    22ee:	af 01       	movw	r20, r30
    22f0:	40 1b       	sub	r20, r16
    22f2:	51 0b       	sbc	r21, r17
    22f4:	d5 01       	movw	r26, r10
    22f6:	ed 91       	ld	r30, X+
    22f8:	fc 91       	ld	r31, X
    22fa:	02 80       	ldd	r0, Z+2	; 0x02
    22fc:	f3 81       	ldd	r31, Z+3	; 0x03
    22fe:	e0 2d       	mov	r30, r0
    2300:	b8 01       	movw	r22, r16
    2302:	c5 01       	movw	r24, r10
    2304:	19 95       	eicall
    2306:	02 c0       	rjmp	.+4      	; 0x230c <_ZN5Print11printNumberEmh+0xb8>
    2308:	80 e0       	ldi	r24, 0x00	; 0
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	a1 96       	adiw	r28, 0x21	; 33
    230e:	0f b6       	in	r0, 0x3f	; 63
    2310:	f8 94       	cli
    2312:	de bf       	out	0x3e, r29	; 62
    2314:	0f be       	out	0x3f, r0	; 63
    2316:	cd bf       	out	0x3d, r28	; 61
    2318:	df 91       	pop	r29
    231a:	cf 91       	pop	r28
    231c:	1f 91       	pop	r17
    231e:	0f 91       	pop	r16
    2320:	ff 90       	pop	r15
    2322:	ef 90       	pop	r14
    2324:	df 90       	pop	r13
    2326:	cf 90       	pop	r12
    2328:	bf 90       	pop	r11
    232a:	af 90       	pop	r10
    232c:	9f 90       	pop	r9
    232e:	7f 90       	pop	r7
    2330:	6f 90       	pop	r6
    2332:	5f 90       	pop	r5
    2334:	4f 90       	pop	r4
    2336:	08 95       	ret

00002338 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    2338:	21 15       	cp	r18, r1
    233a:	31 05       	cpc	r19, r1
    233c:	49 f4       	brne	.+18     	; 0x2350 <_ZN5Print5printEmi+0x18>
    233e:	dc 01       	movw	r26, r24
    2340:	ed 91       	ld	r30, X+
    2342:	fc 91       	ld	r31, X
    2344:	01 90       	ld	r0, Z+
    2346:	f0 81       	ld	r31, Z
    2348:	e0 2d       	mov	r30, r0
    234a:	64 2f       	mov	r22, r20
    234c:	19 95       	eicall
    234e:	08 95       	ret
  else return printNumber(n, base);
    2350:	81 cf       	rjmp	.-254    	; 0x2254 <_ZN5Print11printNumberEmh>
}
    2352:	08 95       	ret

00002354 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    2354:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    2356:	46 2f       	mov	r20, r22
    2358:	50 e0       	ldi	r21, 0x00	; 0
    235a:	60 e0       	ldi	r22, 0x00	; 0
    235c:	70 e0       	ldi	r23, 0x00	; 0
    235e:	ec cf       	rjmp	.-40     	; 0x2338 <_ZN5Print5printEmi>
}
    2360:	08 95       	ret

00002362 <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
    2362:	82 30       	cpi	r24, 0x02	; 2
    2364:	a9 f0       	breq	.+42     	; 0x2390 <_Z12disableTimerh+0x2e>
    2366:	28 f4       	brcc	.+10     	; 0x2372 <_Z12disableTimerh+0x10>
    2368:	88 23       	and	r24, r24
    236a:	49 f0       	breq	.+18     	; 0x237e <_Z12disableTimerh+0x1c>
    236c:	81 30       	cpi	r24, 0x01	; 1
    236e:	51 f0       	breq	.+20     	; 0x2384 <_Z12disableTimerh+0x22>
    2370:	08 95       	ret
    2372:	84 30       	cpi	r24, 0x04	; 4
    2374:	21 f1       	breq	.+72     	; 0x23be <_Z12disableTimerh+0x5c>
    2376:	e8 f0       	brcs	.+58     	; 0x23b2 <_Z12disableTimerh+0x50>
    2378:	85 30       	cpi	r24, 0x05	; 5
    237a:	39 f1       	breq	.+78     	; 0x23ca <_Z12disableTimerh+0x68>
    237c:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
    237e:	10 92 6e 00 	sts	0x006E, r1
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
    2382:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
    2384:	ef e6       	ldi	r30, 0x6F	; 111
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	80 81       	ld	r24, Z
    238a:	8d 7f       	andi	r24, 0xFD	; 253
    238c:	80 83       	st	Z, r24
      break;
    238e:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
    2390:	e0 e7       	ldi	r30, 0x70	; 112
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	80 81       	ld	r24, Z
    2396:	8d 7f       	andi	r24, 0xFD	; 253
    2398:	80 83       	st	Z, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	80 93 b0 00 	sts	0x00B0, r24
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
    23a0:	e1 eb       	ldi	r30, 0xB1	; 177
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	80 81       	ld	r24, Z
    23a6:	88 7f       	andi	r24, 0xF8	; 248
    23a8:	84 60       	ori	r24, 0x04	; 4
    23aa:	80 83       	st	Z, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
    23ac:	10 92 b3 00 	sts	0x00B3, r1
      #endif
      break;
    23b0:	08 95       	ret

#if defined(TIMSK3) && defined(OCIE3A)
    case 3:
      bitWrite(TIMSK3, OCIE3A, 0);
    23b2:	e1 e7       	ldi	r30, 0x71	; 113
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	80 81       	ld	r24, Z
    23b8:	8d 7f       	andi	r24, 0xFD	; 253
    23ba:	80 83       	st	Z, r24
      break;
    23bc:	08 95       	ret
#endif

#if defined(TIMSK4) && defined(OCIE4A)
    case 4:
      bitWrite(TIMSK4, OCIE4A, 0);
    23be:	e2 e7       	ldi	r30, 0x72	; 114
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	80 81       	ld	r24, Z
    23c4:	8d 7f       	andi	r24, 0xFD	; 253
    23c6:	80 83       	st	Z, r24
      break;
    23c8:	08 95       	ret
#endif

#if defined(TIMSK5) && defined(OCIE5A)
    case 5:
      bitWrite(TIMSK5, OCIE5A, 0);
    23ca:	e3 e7       	ldi	r30, 0x73	; 115
    23cc:	f0 e0       	ldi	r31, 0x00	; 0
    23ce:	80 81       	ld	r24, Z
    23d0:	8d 7f       	andi	r24, 0xFD	; 253
    23d2:	80 83       	st	Z, r24
    23d4:	08 95       	ret

000023d6 <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
    23d6:	cf 93       	push	r28
    23d8:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    23da:	80 91 06 02 	lds	r24, 0x0206
    23de:	8c 13       	cpse	r24, r28
    23e0:	08 c0       	rjmp	.+16     	; 0x23f2 <_Z6noToneh+0x1c>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    23e2:	ea e9       	ldi	r30, 0x9A	; 154
    23e4:	f2 e0       	ldi	r31, 0x02	; 2
    23e6:	e4 91       	lpm	r30, Z
    23e8:	8e 2f       	mov	r24, r30
      tone_pins[i] = 255;
    23ea:	9f ef       	ldi	r25, 0xFF	; 255
    23ec:	90 93 06 02 	sts	0x0206, r25
    23f0:	01 c0       	rjmp	.+2      	; 0x23f4 <_Z6noToneh+0x1e>
    23f2:	8f ef       	ldi	r24, 0xFF	; 255
    }
  }
  
  disableTimer(_timer);
    23f4:	b6 df       	rcall	.-148    	; 0x2362 <_Z12disableTimerh>

  digitalWrite(_pin, 0);
    23f6:	60 e0       	ldi	r22, 0x00	; 0
    23f8:	8c 2f       	mov	r24, r28
    23fa:	96 d3       	rcall	.+1836   	; 0x2b28 <digitalWrite>
}
    23fc:	cf 91       	pop	r28
    23fe:	08 95       	ret

00002400 <__vector_13>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
    2400:	1f 92       	push	r1
    2402:	0f 92       	push	r0
    2404:	0f b6       	in	r0, 0x3f	; 63
    2406:	0f 92       	push	r0
    2408:	11 24       	eor	r1, r1
    240a:	0b b6       	in	r0, 0x3b	; 59
    240c:	0f 92       	push	r0
    240e:	2f 93       	push	r18
    2410:	3f 93       	push	r19
    2412:	4f 93       	push	r20
    2414:	5f 93       	push	r21
    2416:	6f 93       	push	r22
    2418:	7f 93       	push	r23
    241a:	8f 93       	push	r24
    241c:	9f 93       	push	r25
    241e:	af 93       	push	r26
    2420:	bf 93       	push	r27
    2422:	ef 93       	push	r30
    2424:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
    2426:	80 91 63 06 	lds	r24, 0x0663
    242a:	90 91 64 06 	lds	r25, 0x0664
    242e:	a0 91 65 06 	lds	r26, 0x0665
    2432:	b0 91 66 06 	lds	r27, 0x0666
    2436:	89 2b       	or	r24, r25
    2438:	8a 2b       	or	r24, r26
    243a:	8b 2b       	or	r24, r27
    243c:	51 f1       	breq	.+84     	; 0x2492 <__vector_13+0x92>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
    243e:	80 91 60 06 	lds	r24, 0x0660
    2442:	e0 91 61 06 	lds	r30, 0x0661
    2446:	f0 91 62 06 	lds	r31, 0x0662
    244a:	90 81       	ld	r25, Z
    244c:	89 27       	eor	r24, r25
    244e:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
    2450:	80 91 63 06 	lds	r24, 0x0663
    2454:	90 91 64 06 	lds	r25, 0x0664
    2458:	a0 91 65 06 	lds	r26, 0x0665
    245c:	b0 91 66 06 	lds	r27, 0x0666
    2460:	18 16       	cp	r1, r24
    2462:	19 06       	cpc	r1, r25
    2464:	1a 06       	cpc	r1, r26
    2466:	1b 06       	cpc	r1, r27
    2468:	bc f4       	brge	.+46     	; 0x2498 <__vector_13+0x98>
      timer2_toggle_count--;
    246a:	80 91 63 06 	lds	r24, 0x0663
    246e:	90 91 64 06 	lds	r25, 0x0664
    2472:	a0 91 65 06 	lds	r26, 0x0665
    2476:	b0 91 66 06 	lds	r27, 0x0666
    247a:	01 97       	sbiw	r24, 0x01	; 1
    247c:	a1 09       	sbc	r26, r1
    247e:	b1 09       	sbc	r27, r1
    2480:	80 93 63 06 	sts	0x0663, r24
    2484:	90 93 64 06 	sts	0x0664, r25
    2488:	a0 93 65 06 	sts	0x0665, r26
    248c:	b0 93 66 06 	sts	0x0666, r27
    2490:	03 c0       	rjmp	.+6      	; 0x2498 <__vector_13+0x98>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
    2492:	80 91 06 02 	lds	r24, 0x0206
    2496:	9f df       	rcall	.-194    	; 0x23d6 <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    2498:	ff 91       	pop	r31
    249a:	ef 91       	pop	r30
    249c:	bf 91       	pop	r27
    249e:	af 91       	pop	r26
    24a0:	9f 91       	pop	r25
    24a2:	8f 91       	pop	r24
    24a4:	7f 91       	pop	r23
    24a6:	6f 91       	pop	r22
    24a8:	5f 91       	pop	r21
    24aa:	4f 91       	pop	r20
    24ac:	3f 91       	pop	r19
    24ae:	2f 91       	pop	r18
    24b0:	0f 90       	pop	r0
    24b2:	0b be       	out	0x3b, r0	; 59
    24b4:	0f 90       	pop	r0
    24b6:	0f be       	out	0x3f, r0	; 63
    24b8:	0f 90       	pop	r0
    24ba:	1f 90       	pop	r1
    24bc:	18 95       	reti

000024be <__vector_1>:
		intFunc[EXTERNAL_INT_4]();
}

#elif defined(EICRA) && defined(EICRB)

ISR(INT0_vect) {
    24be:	1f 92       	push	r1
    24c0:	0f 92       	push	r0
    24c2:	0f b6       	in	r0, 0x3f	; 63
    24c4:	0f 92       	push	r0
    24c6:	11 24       	eor	r1, r1
    24c8:	0b b6       	in	r0, 0x3b	; 59
    24ca:	0f 92       	push	r0
    24cc:	2f 93       	push	r18
    24ce:	3f 93       	push	r19
    24d0:	4f 93       	push	r20
    24d2:	5f 93       	push	r21
    24d4:	6f 93       	push	r22
    24d6:	7f 93       	push	r23
    24d8:	8f 93       	push	r24
    24da:	9f 93       	push	r25
    24dc:	af 93       	push	r26
    24de:	bf 93       	push	r27
    24e0:	ef 93       	push	r30
    24e2:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_2])
    24e4:	80 91 6b 06 	lds	r24, 0x066B
    24e8:	90 91 6c 06 	lds	r25, 0x066C
    24ec:	89 2b       	or	r24, r25
    24ee:	29 f0       	breq	.+10     	; 0x24fa <__vector_1+0x3c>
    intFunc[EXTERNAL_INT_2]();
    24f0:	e0 91 6b 06 	lds	r30, 0x066B
    24f4:	f0 91 6c 06 	lds	r31, 0x066C
    24f8:	19 95       	eicall
}
    24fa:	ff 91       	pop	r31
    24fc:	ef 91       	pop	r30
    24fe:	bf 91       	pop	r27
    2500:	af 91       	pop	r26
    2502:	9f 91       	pop	r25
    2504:	8f 91       	pop	r24
    2506:	7f 91       	pop	r23
    2508:	6f 91       	pop	r22
    250a:	5f 91       	pop	r21
    250c:	4f 91       	pop	r20
    250e:	3f 91       	pop	r19
    2510:	2f 91       	pop	r18
    2512:	0f 90       	pop	r0
    2514:	0b be       	out	0x3b, r0	; 59
    2516:	0f 90       	pop	r0
    2518:	0f be       	out	0x3f, r0	; 63
    251a:	0f 90       	pop	r0
    251c:	1f 90       	pop	r1
    251e:	18 95       	reti

00002520 <__vector_2>:

ISR(INT1_vect) {
    2520:	1f 92       	push	r1
    2522:	0f 92       	push	r0
    2524:	0f b6       	in	r0, 0x3f	; 63
    2526:	0f 92       	push	r0
    2528:	11 24       	eor	r1, r1
    252a:	0b b6       	in	r0, 0x3b	; 59
    252c:	0f 92       	push	r0
    252e:	2f 93       	push	r18
    2530:	3f 93       	push	r19
    2532:	4f 93       	push	r20
    2534:	5f 93       	push	r21
    2536:	6f 93       	push	r22
    2538:	7f 93       	push	r23
    253a:	8f 93       	push	r24
    253c:	9f 93       	push	r25
    253e:	af 93       	push	r26
    2540:	bf 93       	push	r27
    2542:	ef 93       	push	r30
    2544:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_3])
    2546:	80 91 6d 06 	lds	r24, 0x066D
    254a:	90 91 6e 06 	lds	r25, 0x066E
    254e:	89 2b       	or	r24, r25
    2550:	29 f0       	breq	.+10     	; 0x255c <__vector_2+0x3c>
    intFunc[EXTERNAL_INT_3]();
    2552:	e0 91 6d 06 	lds	r30, 0x066D
    2556:	f0 91 6e 06 	lds	r31, 0x066E
    255a:	19 95       	eicall
}
    255c:	ff 91       	pop	r31
    255e:	ef 91       	pop	r30
    2560:	bf 91       	pop	r27
    2562:	af 91       	pop	r26
    2564:	9f 91       	pop	r25
    2566:	8f 91       	pop	r24
    2568:	7f 91       	pop	r23
    256a:	6f 91       	pop	r22
    256c:	5f 91       	pop	r21
    256e:	4f 91       	pop	r20
    2570:	3f 91       	pop	r19
    2572:	2f 91       	pop	r18
    2574:	0f 90       	pop	r0
    2576:	0b be       	out	0x3b, r0	; 59
    2578:	0f 90       	pop	r0
    257a:	0f be       	out	0x3f, r0	; 63
    257c:	0f 90       	pop	r0
    257e:	1f 90       	pop	r1
    2580:	18 95       	reti

00002582 <__vector_3>:

ISR(INT2_vect) {
    2582:	1f 92       	push	r1
    2584:	0f 92       	push	r0
    2586:	0f b6       	in	r0, 0x3f	; 63
    2588:	0f 92       	push	r0
    258a:	11 24       	eor	r1, r1
    258c:	0b b6       	in	r0, 0x3b	; 59
    258e:	0f 92       	push	r0
    2590:	2f 93       	push	r18
    2592:	3f 93       	push	r19
    2594:	4f 93       	push	r20
    2596:	5f 93       	push	r21
    2598:	6f 93       	push	r22
    259a:	7f 93       	push	r23
    259c:	8f 93       	push	r24
    259e:	9f 93       	push	r25
    25a0:	af 93       	push	r26
    25a2:	bf 93       	push	r27
    25a4:	ef 93       	push	r30
    25a6:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_4])
    25a8:	80 91 6f 06 	lds	r24, 0x066F
    25ac:	90 91 70 06 	lds	r25, 0x0670
    25b0:	89 2b       	or	r24, r25
    25b2:	29 f0       	breq	.+10     	; 0x25be <__vector_3+0x3c>
    intFunc[EXTERNAL_INT_4]();
    25b4:	e0 91 6f 06 	lds	r30, 0x066F
    25b8:	f0 91 70 06 	lds	r31, 0x0670
    25bc:	19 95       	eicall
}
    25be:	ff 91       	pop	r31
    25c0:	ef 91       	pop	r30
    25c2:	bf 91       	pop	r27
    25c4:	af 91       	pop	r26
    25c6:	9f 91       	pop	r25
    25c8:	8f 91       	pop	r24
    25ca:	7f 91       	pop	r23
    25cc:	6f 91       	pop	r22
    25ce:	5f 91       	pop	r21
    25d0:	4f 91       	pop	r20
    25d2:	3f 91       	pop	r19
    25d4:	2f 91       	pop	r18
    25d6:	0f 90       	pop	r0
    25d8:	0b be       	out	0x3b, r0	; 59
    25da:	0f 90       	pop	r0
    25dc:	0f be       	out	0x3f, r0	; 63
    25de:	0f 90       	pop	r0
    25e0:	1f 90       	pop	r1
    25e2:	18 95       	reti

000025e4 <__vector_4>:

ISR(INT3_vect) {
    25e4:	1f 92       	push	r1
    25e6:	0f 92       	push	r0
    25e8:	0f b6       	in	r0, 0x3f	; 63
    25ea:	0f 92       	push	r0
    25ec:	11 24       	eor	r1, r1
    25ee:	0b b6       	in	r0, 0x3b	; 59
    25f0:	0f 92       	push	r0
    25f2:	2f 93       	push	r18
    25f4:	3f 93       	push	r19
    25f6:	4f 93       	push	r20
    25f8:	5f 93       	push	r21
    25fa:	6f 93       	push	r22
    25fc:	7f 93       	push	r23
    25fe:	8f 93       	push	r24
    2600:	9f 93       	push	r25
    2602:	af 93       	push	r26
    2604:	bf 93       	push	r27
    2606:	ef 93       	push	r30
    2608:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_5])
    260a:	80 91 71 06 	lds	r24, 0x0671
    260e:	90 91 72 06 	lds	r25, 0x0672
    2612:	89 2b       	or	r24, r25
    2614:	29 f0       	breq	.+10     	; 0x2620 <__vector_4+0x3c>
    intFunc[EXTERNAL_INT_5]();
    2616:	e0 91 71 06 	lds	r30, 0x0671
    261a:	f0 91 72 06 	lds	r31, 0x0672
    261e:	19 95       	eicall
}
    2620:	ff 91       	pop	r31
    2622:	ef 91       	pop	r30
    2624:	bf 91       	pop	r27
    2626:	af 91       	pop	r26
    2628:	9f 91       	pop	r25
    262a:	8f 91       	pop	r24
    262c:	7f 91       	pop	r23
    262e:	6f 91       	pop	r22
    2630:	5f 91       	pop	r21
    2632:	4f 91       	pop	r20
    2634:	3f 91       	pop	r19
    2636:	2f 91       	pop	r18
    2638:	0f 90       	pop	r0
    263a:	0b be       	out	0x3b, r0	; 59
    263c:	0f 90       	pop	r0
    263e:	0f be       	out	0x3f, r0	; 63
    2640:	0f 90       	pop	r0
    2642:	1f 90       	pop	r1
    2644:	18 95       	reti

00002646 <__vector_5>:

ISR(INT4_vect) {
    2646:	1f 92       	push	r1
    2648:	0f 92       	push	r0
    264a:	0f b6       	in	r0, 0x3f	; 63
    264c:	0f 92       	push	r0
    264e:	11 24       	eor	r1, r1
    2650:	0b b6       	in	r0, 0x3b	; 59
    2652:	0f 92       	push	r0
    2654:	2f 93       	push	r18
    2656:	3f 93       	push	r19
    2658:	4f 93       	push	r20
    265a:	5f 93       	push	r21
    265c:	6f 93       	push	r22
    265e:	7f 93       	push	r23
    2660:	8f 93       	push	r24
    2662:	9f 93       	push	r25
    2664:	af 93       	push	r26
    2666:	bf 93       	push	r27
    2668:	ef 93       	push	r30
    266a:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
    266c:	80 91 67 06 	lds	r24, 0x0667
    2670:	90 91 68 06 	lds	r25, 0x0668
    2674:	89 2b       	or	r24, r25
    2676:	29 f0       	breq	.+10     	; 0x2682 <__vector_5+0x3c>
    intFunc[EXTERNAL_INT_0]();
    2678:	e0 91 67 06 	lds	r30, 0x0667
    267c:	f0 91 68 06 	lds	r31, 0x0668
    2680:	19 95       	eicall
}
    2682:	ff 91       	pop	r31
    2684:	ef 91       	pop	r30
    2686:	bf 91       	pop	r27
    2688:	af 91       	pop	r26
    268a:	9f 91       	pop	r25
    268c:	8f 91       	pop	r24
    268e:	7f 91       	pop	r23
    2690:	6f 91       	pop	r22
    2692:	5f 91       	pop	r21
    2694:	4f 91       	pop	r20
    2696:	3f 91       	pop	r19
    2698:	2f 91       	pop	r18
    269a:	0f 90       	pop	r0
    269c:	0b be       	out	0x3b, r0	; 59
    269e:	0f 90       	pop	r0
    26a0:	0f be       	out	0x3f, r0	; 63
    26a2:	0f 90       	pop	r0
    26a4:	1f 90       	pop	r1
    26a6:	18 95       	reti

000026a8 <__vector_6>:

ISR(INT5_vect) {
    26a8:	1f 92       	push	r1
    26aa:	0f 92       	push	r0
    26ac:	0f b6       	in	r0, 0x3f	; 63
    26ae:	0f 92       	push	r0
    26b0:	11 24       	eor	r1, r1
    26b2:	0b b6       	in	r0, 0x3b	; 59
    26b4:	0f 92       	push	r0
    26b6:	2f 93       	push	r18
    26b8:	3f 93       	push	r19
    26ba:	4f 93       	push	r20
    26bc:	5f 93       	push	r21
    26be:	6f 93       	push	r22
    26c0:	7f 93       	push	r23
    26c2:	8f 93       	push	r24
    26c4:	9f 93       	push	r25
    26c6:	af 93       	push	r26
    26c8:	bf 93       	push	r27
    26ca:	ef 93       	push	r30
    26cc:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
    26ce:	80 91 69 06 	lds	r24, 0x0669
    26d2:	90 91 6a 06 	lds	r25, 0x066A
    26d6:	89 2b       	or	r24, r25
    26d8:	29 f0       	breq	.+10     	; 0x26e4 <__vector_6+0x3c>
    intFunc[EXTERNAL_INT_1]();
    26da:	e0 91 69 06 	lds	r30, 0x0669
    26de:	f0 91 6a 06 	lds	r31, 0x066A
    26e2:	19 95       	eicall
}
    26e4:	ff 91       	pop	r31
    26e6:	ef 91       	pop	r30
    26e8:	bf 91       	pop	r27
    26ea:	af 91       	pop	r26
    26ec:	9f 91       	pop	r25
    26ee:	8f 91       	pop	r24
    26f0:	7f 91       	pop	r23
    26f2:	6f 91       	pop	r22
    26f4:	5f 91       	pop	r21
    26f6:	4f 91       	pop	r20
    26f8:	3f 91       	pop	r19
    26fa:	2f 91       	pop	r18
    26fc:	0f 90       	pop	r0
    26fe:	0b be       	out	0x3b, r0	; 59
    2700:	0f 90       	pop	r0
    2702:	0f be       	out	0x3f, r0	; 63
    2704:	0f 90       	pop	r0
    2706:	1f 90       	pop	r1
    2708:	18 95       	reti

0000270a <__vector_7>:

ISR(INT6_vect) {
    270a:	1f 92       	push	r1
    270c:	0f 92       	push	r0
    270e:	0f b6       	in	r0, 0x3f	; 63
    2710:	0f 92       	push	r0
    2712:	11 24       	eor	r1, r1
    2714:	0b b6       	in	r0, 0x3b	; 59
    2716:	0f 92       	push	r0
    2718:	2f 93       	push	r18
    271a:	3f 93       	push	r19
    271c:	4f 93       	push	r20
    271e:	5f 93       	push	r21
    2720:	6f 93       	push	r22
    2722:	7f 93       	push	r23
    2724:	8f 93       	push	r24
    2726:	9f 93       	push	r25
    2728:	af 93       	push	r26
    272a:	bf 93       	push	r27
    272c:	ef 93       	push	r30
    272e:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_6])
    2730:	80 91 73 06 	lds	r24, 0x0673
    2734:	90 91 74 06 	lds	r25, 0x0674
    2738:	89 2b       	or	r24, r25
    273a:	29 f0       	breq	.+10     	; 0x2746 <__vector_7+0x3c>
    intFunc[EXTERNAL_INT_6]();
    273c:	e0 91 73 06 	lds	r30, 0x0673
    2740:	f0 91 74 06 	lds	r31, 0x0674
    2744:	19 95       	eicall
}
    2746:	ff 91       	pop	r31
    2748:	ef 91       	pop	r30
    274a:	bf 91       	pop	r27
    274c:	af 91       	pop	r26
    274e:	9f 91       	pop	r25
    2750:	8f 91       	pop	r24
    2752:	7f 91       	pop	r23
    2754:	6f 91       	pop	r22
    2756:	5f 91       	pop	r21
    2758:	4f 91       	pop	r20
    275a:	3f 91       	pop	r19
    275c:	2f 91       	pop	r18
    275e:	0f 90       	pop	r0
    2760:	0b be       	out	0x3b, r0	; 59
    2762:	0f 90       	pop	r0
    2764:	0f be       	out	0x3f, r0	; 63
    2766:	0f 90       	pop	r0
    2768:	1f 90       	pop	r1
    276a:	18 95       	reti

0000276c <__vector_8>:

ISR(INT7_vect) {
    276c:	1f 92       	push	r1
    276e:	0f 92       	push	r0
    2770:	0f b6       	in	r0, 0x3f	; 63
    2772:	0f 92       	push	r0
    2774:	11 24       	eor	r1, r1
    2776:	0b b6       	in	r0, 0x3b	; 59
    2778:	0f 92       	push	r0
    277a:	2f 93       	push	r18
    277c:	3f 93       	push	r19
    277e:	4f 93       	push	r20
    2780:	5f 93       	push	r21
    2782:	6f 93       	push	r22
    2784:	7f 93       	push	r23
    2786:	8f 93       	push	r24
    2788:	9f 93       	push	r25
    278a:	af 93       	push	r26
    278c:	bf 93       	push	r27
    278e:	ef 93       	push	r30
    2790:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_7])
    2792:	80 91 75 06 	lds	r24, 0x0675
    2796:	90 91 76 06 	lds	r25, 0x0676
    279a:	89 2b       	or	r24, r25
    279c:	29 f0       	breq	.+10     	; 0x27a8 <__vector_8+0x3c>
    intFunc[EXTERNAL_INT_7]();
    279e:	e0 91 75 06 	lds	r30, 0x0675
    27a2:	f0 91 76 06 	lds	r31, 0x0676
    27a6:	19 95       	eicall
}
    27a8:	ff 91       	pop	r31
    27aa:	ef 91       	pop	r30
    27ac:	bf 91       	pop	r27
    27ae:	af 91       	pop	r26
    27b0:	9f 91       	pop	r25
    27b2:	8f 91       	pop	r24
    27b4:	7f 91       	pop	r23
    27b6:	6f 91       	pop	r22
    27b8:	5f 91       	pop	r21
    27ba:	4f 91       	pop	r20
    27bc:	3f 91       	pop	r19
    27be:	2f 91       	pop	r18
    27c0:	0f 90       	pop	r0
    27c2:	0b be       	out	0x3b, r0	; 59
    27c4:	0f 90       	pop	r0
    27c6:	0f be       	out	0x3f, r0	; 63
    27c8:	0f 90       	pop	r0
    27ca:	1f 90       	pop	r1
    27cc:	18 95       	reti

000027ce <__vector_23>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
    27ce:	1f 92       	push	r1
    27d0:	0f 92       	push	r0
    27d2:	0f b6       	in	r0, 0x3f	; 63
    27d4:	0f 92       	push	r0
    27d6:	11 24       	eor	r1, r1
    27d8:	2f 93       	push	r18
    27da:	3f 93       	push	r19
    27dc:	8f 93       	push	r24
    27de:	9f 93       	push	r25
    27e0:	af 93       	push	r26
    27e2:	bf 93       	push	r27
    27e4:	80 91 78 06 	lds	r24, 0x0678
    27e8:	90 91 79 06 	lds	r25, 0x0679
    27ec:	a0 91 7a 06 	lds	r26, 0x067A
    27f0:	b0 91 7b 06 	lds	r27, 0x067B
    27f4:	30 91 77 06 	lds	r19, 0x0677
    27f8:	23 e0       	ldi	r18, 0x03	; 3
    27fa:	23 0f       	add	r18, r19
    27fc:	2d 37       	cpi	r18, 0x7D	; 125
    27fe:	20 f4       	brcc	.+8      	; 0x2808 <__vector_23+0x3a>
    2800:	01 96       	adiw	r24, 0x01	; 1
    2802:	a1 1d       	adc	r26, r1
    2804:	b1 1d       	adc	r27, r1
    2806:	05 c0       	rjmp	.+10     	; 0x2812 <__vector_23+0x44>
    2808:	26 e8       	ldi	r18, 0x86	; 134
    280a:	23 0f       	add	r18, r19
    280c:	02 96       	adiw	r24, 0x02	; 2
    280e:	a1 1d       	adc	r26, r1
    2810:	b1 1d       	adc	r27, r1
    2812:	20 93 77 06 	sts	0x0677, r18
    2816:	80 93 78 06 	sts	0x0678, r24
    281a:	90 93 79 06 	sts	0x0679, r25
    281e:	a0 93 7a 06 	sts	0x067A, r26
    2822:	b0 93 7b 06 	sts	0x067B, r27
    2826:	80 91 7c 06 	lds	r24, 0x067C
    282a:	90 91 7d 06 	lds	r25, 0x067D
    282e:	a0 91 7e 06 	lds	r26, 0x067E
    2832:	b0 91 7f 06 	lds	r27, 0x067F
    2836:	01 96       	adiw	r24, 0x01	; 1
    2838:	a1 1d       	adc	r26, r1
    283a:	b1 1d       	adc	r27, r1
    283c:	80 93 7c 06 	sts	0x067C, r24
    2840:	90 93 7d 06 	sts	0x067D, r25
    2844:	a0 93 7e 06 	sts	0x067E, r26
    2848:	b0 93 7f 06 	sts	0x067F, r27
    284c:	bf 91       	pop	r27
    284e:	af 91       	pop	r26
    2850:	9f 91       	pop	r25
    2852:	8f 91       	pop	r24
    2854:	3f 91       	pop	r19
    2856:	2f 91       	pop	r18
    2858:	0f 90       	pop	r0
    285a:	0f be       	out	0x3f, r0	; 63
    285c:	0f 90       	pop	r0
    285e:	1f 90       	pop	r1
    2860:	18 95       	reti

00002862 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2862:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    2864:	f8 94       	cli
	m = timer0_overflow_count;
    2866:	80 91 7c 06 	lds	r24, 0x067C
    286a:	90 91 7d 06 	lds	r25, 0x067D
    286e:	a0 91 7e 06 	lds	r26, 0x067E
    2872:	b0 91 7f 06 	lds	r27, 0x067F
#if defined(TCNT0)
	t = TCNT0;
    2876:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2878:	a8 9b       	sbis	0x15, 0	; 21
    287a:	05 c0       	rjmp	.+10     	; 0x2886 <micros+0x24>
    287c:	2f 3f       	cpi	r18, 0xFF	; 255
    287e:	19 f0       	breq	.+6      	; 0x2886 <micros+0x24>
		m++;
    2880:	01 96       	adiw	r24, 0x01	; 1
    2882:	a1 1d       	adc	r26, r1
    2884:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2886:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    2888:	ba 2f       	mov	r27, r26
    288a:	a9 2f       	mov	r26, r25
    288c:	98 2f       	mov	r25, r24
    288e:	88 27       	eor	r24, r24
    2890:	82 0f       	add	r24, r18
    2892:	91 1d       	adc	r25, r1
    2894:	a1 1d       	adc	r26, r1
    2896:	b1 1d       	adc	r27, r1
    2898:	bc 01       	movw	r22, r24
    289a:	cd 01       	movw	r24, r26
    289c:	66 0f       	add	r22, r22
    289e:	77 1f       	adc	r23, r23
    28a0:	88 1f       	adc	r24, r24
    28a2:	99 1f       	adc	r25, r25
    28a4:	66 0f       	add	r22, r22
    28a6:	77 1f       	adc	r23, r23
    28a8:	88 1f       	adc	r24, r24
    28aa:	99 1f       	adc	r25, r25
}
    28ac:	08 95       	ret

000028ae <delay>:

void delay(unsigned long ms)
{
    28ae:	cf 92       	push	r12
    28b0:	df 92       	push	r13
    28b2:	ef 92       	push	r14
    28b4:	ff 92       	push	r15
    28b6:	cf 93       	push	r28
    28b8:	df 93       	push	r29
    28ba:	6b 01       	movw	r12, r22
    28bc:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
    28be:	d1 df       	rcall	.-94     	; 0x2862 <micros>
    28c0:	eb 01       	movw	r28, r22

	while (ms > 0) {
    28c2:	c1 14       	cp	r12, r1
    28c4:	d1 04       	cpc	r13, r1
    28c6:	e1 04       	cpc	r14, r1
    28c8:	f1 04       	cpc	r15, r1
    28ca:	99 f0       	breq	.+38     	; 0x28f2 <delay+0x44>
		yield();
    28cc:	02 dc       	rcall	.-2044   	; 0x20d2 <yield>
		if (((uint16_t)micros() - start) >= 1000) {
    28ce:	c9 df       	rcall	.-110    	; 0x2862 <micros>
    28d0:	6c 1b       	sub	r22, r28
    28d2:	7d 0b       	sbc	r23, r29
    28d4:	68 3e       	cpi	r22, 0xE8	; 232
    28d6:	73 40       	sbci	r23, 0x03	; 3
    28d8:	38 f0       	brcs	.+14     	; 0x28e8 <delay+0x3a>
			ms--;
    28da:	81 e0       	ldi	r24, 0x01	; 1
    28dc:	c8 1a       	sub	r12, r24
    28de:	d1 08       	sbc	r13, r1
    28e0:	e1 08       	sbc	r14, r1
    28e2:	f1 08       	sbc	r15, r1
			start += 1000;
    28e4:	c8 51       	subi	r28, 0x18	; 24
    28e6:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    28e8:	c1 14       	cp	r12, r1
    28ea:	d1 04       	cpc	r13, r1
    28ec:	e1 04       	cpc	r14, r1
    28ee:	f1 04       	cpc	r15, r1
    28f0:	69 f7       	brne	.-38     	; 0x28cc <delay+0x1e>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    28f2:	df 91       	pop	r29
    28f4:	cf 91       	pop	r28
    28f6:	ff 90       	pop	r15
    28f8:	ef 90       	pop	r14
    28fa:	df 90       	pop	r13
    28fc:	cf 90       	pop	r12
    28fe:	08 95       	ret

00002900 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    2900:	82 30       	cpi	r24, 0x02	; 2
    2902:	91 05       	cpc	r25, r1
    2904:	38 f0       	brcs	.+14     	; 0x2914 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    2906:	88 0f       	add	r24, r24
    2908:	99 1f       	adc	r25, r25
    290a:	88 0f       	add	r24, r24
    290c:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    290e:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    2910:	01 97       	sbiw	r24, 0x01	; 1
    2912:	f1 f7       	brne	.-4      	; 0x2910 <delayMicroseconds+0x10>
    2914:	08 95       	ret

00002916 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2916:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2918:	84 b5       	in	r24, 0x24	; 36
    291a:	82 60       	ori	r24, 0x02	; 2
    291c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    291e:	84 b5       	in	r24, 0x24	; 36
    2920:	81 60       	ori	r24, 0x01	; 1
    2922:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2924:	85 b5       	in	r24, 0x25	; 37
    2926:	82 60       	ori	r24, 0x02	; 2
    2928:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    292a:	85 b5       	in	r24, 0x25	; 37
    292c:	81 60       	ori	r24, 0x01	; 1
    292e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2930:	ee e6       	ldi	r30, 0x6E	; 110
    2932:	f0 e0       	ldi	r31, 0x00	; 0
    2934:	80 81       	ld	r24, Z
    2936:	81 60       	ori	r24, 0x01	; 1
    2938:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    293a:	e1 e8       	ldi	r30, 0x81	; 129
    293c:	f0 e0       	ldi	r31, 0x00	; 0
    293e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2940:	80 81       	ld	r24, Z
    2942:	82 60       	ori	r24, 0x02	; 2
    2944:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2946:	80 81       	ld	r24, Z
    2948:	81 60       	ori	r24, 0x01	; 1
    294a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    294c:	e0 e8       	ldi	r30, 0x80	; 128
    294e:	f0 e0       	ldi	r31, 0x00	; 0
    2950:	80 81       	ld	r24, Z
    2952:	81 60       	ori	r24, 0x01	; 1
    2954:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2956:	e1 eb       	ldi	r30, 0xB1	; 177
    2958:	f0 e0       	ldi	r31, 0x00	; 0
    295a:	80 81       	ld	r24, Z
    295c:	84 60       	ori	r24, 0x04	; 4
    295e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2960:	e0 eb       	ldi	r30, 0xB0	; 176
    2962:	f0 e0       	ldi	r31, 0x00	; 0
    2964:	80 81       	ld	r24, Z
    2966:	81 60       	ori	r24, 0x01	; 1
    2968:	80 83       	st	Z, r24
#else
	#warning Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    296a:	e1 e9       	ldi	r30, 0x91	; 145
    296c:	f0 e0       	ldi	r31, 0x00	; 0
    296e:	80 81       	ld	r24, Z
    2970:	82 60       	ori	r24, 0x02	; 2
    2972:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    2974:	80 81       	ld	r24, Z
    2976:	81 60       	ori	r24, 0x01	; 1
    2978:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    297a:	e0 e9       	ldi	r30, 0x90	; 144
    297c:	f0 e0       	ldi	r31, 0x00	; 0
    297e:	80 81       	ld	r24, Z
    2980:	81 60       	ori	r24, 0x01	; 1
    2982:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    2984:	e1 ea       	ldi	r30, 0xA1	; 161
    2986:	f0 e0       	ldi	r31, 0x00	; 0
    2988:	80 81       	ld	r24, Z
    298a:	82 60       	ori	r24, 0x02	; 2
    298c:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    298e:	80 81       	ld	r24, Z
    2990:	81 60       	ori	r24, 0x01	; 1
    2992:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    2994:	e0 ea       	ldi	r30, 0xA0	; 160
    2996:	f0 e0       	ldi	r31, 0x00	; 0
    2998:	80 81       	ld	r24, Z
    299a:	81 60       	ori	r24, 0x01	; 1
    299c:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    299e:	e1 e2       	ldi	r30, 0x21	; 33
    29a0:	f1 e0       	ldi	r31, 0x01	; 1
    29a2:	80 81       	ld	r24, Z
    29a4:	82 60       	ori	r24, 0x02	; 2
    29a6:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    29a8:	80 81       	ld	r24, Z
    29aa:	81 60       	ori	r24, 0x01	; 1
    29ac:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    29ae:	e0 e2       	ldi	r30, 0x20	; 32
    29b0:	f1 e0       	ldi	r31, 0x01	; 1
    29b2:	80 81       	ld	r24, Z
    29b4:	81 60       	ori	r24, 0x01	; 1
    29b6:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    29b8:	ea e7       	ldi	r30, 0x7A	; 122
    29ba:	f0 e0       	ldi	r31, 0x00	; 0
    29bc:	80 81       	ld	r24, Z
    29be:	84 60       	ori	r24, 0x04	; 4
    29c0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    29c2:	80 81       	ld	r24, Z
    29c4:	82 60       	ori	r24, 0x02	; 2
    29c6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    29c8:	80 81       	ld	r24, Z
    29ca:	81 60       	ori	r24, 0x01	; 1
    29cc:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    29ce:	80 81       	ld	r24, Z
    29d0:	80 68       	ori	r24, 0x80	; 128
    29d2:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    29d4:	10 92 c1 00 	sts	0x00C1, r1
    29d8:	08 95       	ret

000029da <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	fc 01       	movw	r30, r24
    29de:	31 97       	sbiw	r30, 0x01	; 1
    29e0:	e2 31       	cpi	r30, 0x12	; 18
    29e2:	f1 05       	cpc	r31, r1
    29e4:	08 f0       	brcs	.+2      	; 0x29e8 <turnOffPWM+0xe>
    29e6:	60 c0       	rjmp	.+192    	; 0x2aa8 <turnOffPWM+0xce>
    29e8:	88 27       	eor	r24, r24
    29ea:	e5 5c       	subi	r30, 0xC5	; 197
    29ec:	fe 4f       	sbci	r31, 0xFE	; 254
    29ee:	8f 4f       	sbci	r24, 0xFF	; 255
    29f0:	c8 c1       	rjmp	.+912    	; 0x2d82 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    29f2:	e0 e8       	ldi	r30, 0x80	; 128
    29f4:	f0 e0       	ldi	r31, 0x00	; 0
    29f6:	80 81       	ld	r24, Z
    29f8:	8f 77       	andi	r24, 0x7F	; 127
    29fa:	80 83       	st	Z, r24
    29fc:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    29fe:	e0 e8       	ldi	r30, 0x80	; 128
    2a00:	f0 e0       	ldi	r31, 0x00	; 0
    2a02:	80 81       	ld	r24, Z
    2a04:	8f 7d       	andi	r24, 0xDF	; 223
    2a06:	80 83       	st	Z, r24
    2a08:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    2a0a:	e0 e8       	ldi	r30, 0x80	; 128
    2a0c:	f0 e0       	ldi	r31, 0x00	; 0
    2a0e:	80 81       	ld	r24, Z
    2a10:	87 7f       	andi	r24, 0xF7	; 247
    2a12:	80 83       	st	Z, r24
    2a14:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2a16:	84 b5       	in	r24, 0x24	; 36
    2a18:	8f 77       	andi	r24, 0x7F	; 127
    2a1a:	84 bd       	out	0x24, r24	; 36
    2a1c:	08 95       	ret
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2a1e:	84 b5       	in	r24, 0x24	; 36
    2a20:	8f 7d       	andi	r24, 0xDF	; 223
    2a22:	84 bd       	out	0x24, r24	; 36
    2a24:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2a26:	e0 eb       	ldi	r30, 0xB0	; 176
    2a28:	f0 e0       	ldi	r31, 0x00	; 0
    2a2a:	80 81       	ld	r24, Z
    2a2c:	8f 77       	andi	r24, 0x7F	; 127
    2a2e:	80 83       	st	Z, r24
    2a30:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2a32:	e0 eb       	ldi	r30, 0xB0	; 176
    2a34:	f0 e0       	ldi	r31, 0x00	; 0
    2a36:	80 81       	ld	r24, Z
    2a38:	8f 7d       	andi	r24, 0xDF	; 223
    2a3a:	80 83       	st	Z, r24
    2a3c:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    2a3e:	e0 e9       	ldi	r30, 0x90	; 144
    2a40:	f0 e0       	ldi	r31, 0x00	; 0
    2a42:	80 81       	ld	r24, Z
    2a44:	8f 77       	andi	r24, 0x7F	; 127
    2a46:	80 83       	st	Z, r24
    2a48:	08 95       	ret
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    2a4a:	e0 e9       	ldi	r30, 0x90	; 144
    2a4c:	f0 e0       	ldi	r31, 0x00	; 0
    2a4e:	80 81       	ld	r24, Z
    2a50:	8f 7d       	andi	r24, 0xDF	; 223
    2a52:	80 83       	st	Z, r24
    2a54:	08 95       	ret
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    2a56:	e0 e9       	ldi	r30, 0x90	; 144
    2a58:	f0 e0       	ldi	r31, 0x00	; 0
    2a5a:	80 81       	ld	r24, Z
    2a5c:	87 7f       	andi	r24, 0xF7	; 247
    2a5e:	80 83       	st	Z, r24
    2a60:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    2a62:	e0 ea       	ldi	r30, 0xA0	; 160
    2a64:	f0 e0       	ldi	r31, 0x00	; 0
    2a66:	80 81       	ld	r24, Z
    2a68:	8f 77       	andi	r24, 0x7F	; 127
    2a6a:	80 83       	st	Z, r24
    2a6c:	08 95       	ret
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    2a6e:	e0 ea       	ldi	r30, 0xA0	; 160
    2a70:	f0 e0       	ldi	r31, 0x00	; 0
    2a72:	80 81       	ld	r24, Z
    2a74:	8f 7d       	andi	r24, 0xDF	; 223
    2a76:	80 83       	st	Z, r24
    2a78:	08 95       	ret
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    2a7a:	e0 ea       	ldi	r30, 0xA0	; 160
    2a7c:	f0 e0       	ldi	r31, 0x00	; 0
    2a7e:	80 81       	ld	r24, Z
    2a80:	87 7f       	andi	r24, 0xF7	; 247
    2a82:	80 83       	st	Z, r24
    2a84:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    2a86:	e0 e2       	ldi	r30, 0x20	; 32
    2a88:	f1 e0       	ldi	r31, 0x01	; 1
    2a8a:	80 81       	ld	r24, Z
    2a8c:	8f 77       	andi	r24, 0x7F	; 127
    2a8e:	80 83       	st	Z, r24
    2a90:	08 95       	ret
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    2a92:	e0 e2       	ldi	r30, 0x20	; 32
    2a94:	f1 e0       	ldi	r31, 0x01	; 1
    2a96:	80 81       	ld	r24, Z
    2a98:	8f 7d       	andi	r24, 0xDF	; 223
    2a9a:	80 83       	st	Z, r24
    2a9c:	08 95       	ret
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    2a9e:	e0 e2       	ldi	r30, 0x20	; 32
    2aa0:	f1 e0       	ldi	r31, 0x01	; 1
    2aa2:	80 81       	ld	r24, Z
    2aa4:	87 7f       	andi	r24, 0xF7	; 247
    2aa6:	80 83       	st	Z, r24
    2aa8:	08 95       	ret

00002aaa <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2aaa:	cf 93       	push	r28
    2aac:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	fc 01       	movw	r30, r24
    2ab2:	ef 51       	subi	r30, 0x1F	; 31
    2ab4:	fd 4f       	sbci	r31, 0xFD	; 253
    2ab6:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    2ab8:	fc 01       	movw	r30, r24
    2aba:	e9 5d       	subi	r30, 0xD9	; 217
    2abc:	fc 4f       	sbci	r31, 0xFC	; 252
    2abe:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2ac0:	88 23       	and	r24, r24
    2ac2:	79 f1       	breq	.+94     	; 0x2b22 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	88 0f       	add	r24, r24
    2ac8:	99 1f       	adc	r25, r25
    2aca:	fc 01       	movw	r30, r24
    2acc:	ef 55       	subi	r30, 0x5F	; 95
    2ace:	fc 4f       	sbci	r31, 0xFC	; 252
    2ad0:	a5 91       	lpm	r26, Z+
    2ad2:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    2ad4:	fc 01       	movw	r30, r24
    2ad6:	e9 57       	subi	r30, 0x79	; 121
    2ad8:	fc 4f       	sbci	r31, 0xFC	; 252
    2ada:	c5 91       	lpm	r28, Z+
    2adc:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
    2ade:	61 11       	cpse	r22, r1
    2ae0:	0c c0       	rjmp	.+24     	; 0x2afa <pinMode+0x50>
		uint8_t oldSREG = SREG;
    2ae2:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2ae4:	f8 94       	cli
		*reg &= ~bit;
    2ae6:	8c 91       	ld	r24, X
    2ae8:	e2 2f       	mov	r30, r18
    2aea:	e0 95       	com	r30
    2aec:	8e 23       	and	r24, r30
    2aee:	8c 93       	st	X, r24
		*out &= ~bit;
    2af0:	28 81       	ld	r18, Y
    2af2:	e2 23       	and	r30, r18
    2af4:	e8 83       	st	Y, r30
		SREG = oldSREG;
    2af6:	9f bf       	out	0x3f, r25	; 63
    2af8:	14 c0       	rjmp	.+40     	; 0x2b22 <pinMode+0x78>
	} else if (mode == INPUT_PULLUP) {
    2afa:	62 30       	cpi	r22, 0x02	; 2
    2afc:	61 f4       	brne	.+24     	; 0x2b16 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    2afe:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2b00:	f8 94       	cli
		*reg &= ~bit;
    2b02:	3c 91       	ld	r19, X
    2b04:	82 2f       	mov	r24, r18
    2b06:	80 95       	com	r24
    2b08:	83 23       	and	r24, r19
    2b0a:	8c 93       	st	X, r24
		*out |= bit;
    2b0c:	e8 81       	ld	r30, Y
    2b0e:	e2 2b       	or	r30, r18
    2b10:	e8 83       	st	Y, r30
		SREG = oldSREG;
    2b12:	9f bf       	out	0x3f, r25	; 63
    2b14:	06 c0       	rjmp	.+12     	; 0x2b22 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    2b16:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2b18:	f8 94       	cli
		*reg |= bit;
    2b1a:	ec 91       	ld	r30, X
    2b1c:	e2 2b       	or	r30, r18
    2b1e:	ec 93       	st	X, r30
		SREG = oldSREG;
    2b20:	8f bf       	out	0x3f, r24	; 63
	}
}
    2b22:	df 91       	pop	r29
    2b24:	cf 91       	pop	r28
    2b26:	08 95       	ret

00002b28 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2b28:	1f 93       	push	r17
    2b2a:	cf 93       	push	r28
    2b2c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2b2e:	28 2f       	mov	r18, r24
    2b30:	30 e0       	ldi	r19, 0x00	; 0
    2b32:	f9 01       	movw	r30, r18
    2b34:	e5 56       	subi	r30, 0x65	; 101
    2b36:	fd 4f       	sbci	r31, 0xFD	; 253
    2b38:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2b3a:	f9 01       	movw	r30, r18
    2b3c:	ef 51       	subi	r30, 0x1F	; 31
    2b3e:	fd 4f       	sbci	r31, 0xFD	; 253
    2b40:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
    2b42:	f9 01       	movw	r30, r18
    2b44:	e9 5d       	subi	r30, 0xD9	; 217
    2b46:	fc 4f       	sbci	r31, 0xFC	; 252
    2b48:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2b4a:	cc 23       	and	r28, r28
    2b4c:	c9 f0       	breq	.+50     	; 0x2b80 <digitalWrite+0x58>
    2b4e:	d6 2f       	mov	r29, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2b50:	81 11       	cpse	r24, r1
    2b52:	43 df       	rcall	.-378    	; 0x29da <turnOffPWM>

	out = portOutputRegister(port);
    2b54:	ec 2f       	mov	r30, r28
    2b56:	f0 e0       	ldi	r31, 0x00	; 0
    2b58:	ee 0f       	add	r30, r30
    2b5a:	ff 1f       	adc	r31, r31
    2b5c:	e9 57       	subi	r30, 0x79	; 121
    2b5e:	fc 4f       	sbci	r31, 0xFC	; 252
    2b60:	a5 91       	lpm	r26, Z+
    2b62:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    2b64:	8f b7       	in	r24, 0x3f	; 63
	cli();
    2b66:	f8 94       	cli

	if (val == LOW) {
    2b68:	d1 11       	cpse	r29, r1
    2b6a:	06 c0       	rjmp	.+12     	; 0x2b78 <digitalWrite+0x50>
		*out &= ~bit;
    2b6c:	9c 91       	ld	r25, X
    2b6e:	e1 2f       	mov	r30, r17
    2b70:	e0 95       	com	r30
    2b72:	e9 23       	and	r30, r25
    2b74:	ec 93       	st	X, r30
    2b76:	03 c0       	rjmp	.+6      	; 0x2b7e <digitalWrite+0x56>
	} else {
		*out |= bit;
    2b78:	ec 91       	ld	r30, X
    2b7a:	e1 2b       	or	r30, r17
    2b7c:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    2b7e:	8f bf       	out	0x3f, r24	; 63
}
    2b80:	df 91       	pop	r29
    2b82:	cf 91       	pop	r28
    2b84:	1f 91       	pop	r17
    2b86:	08 95       	ret

00002b88 <digitalRead>:

int digitalRead(uint8_t pin)
{
    2b88:	cf 93       	push	r28
    2b8a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2b8c:	28 2f       	mov	r18, r24
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	f9 01       	movw	r30, r18
    2b92:	e5 56       	subi	r30, 0x65	; 101
    2b94:	fd 4f       	sbci	r31, 0xFD	; 253
    2b96:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2b98:	f9 01       	movw	r30, r18
    2b9a:	ef 51       	subi	r30, 0x1F	; 31
    2b9c:	fd 4f       	sbci	r31, 0xFD	; 253
    2b9e:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2ba0:	f9 01       	movw	r30, r18
    2ba2:	e9 5d       	subi	r30, 0xD9	; 217
    2ba4:	fc 4f       	sbci	r31, 0xFC	; 252
    2ba6:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    2ba8:	cc 23       	and	r28, r28
    2baa:	89 f0       	breq	.+34     	; 0x2bce <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2bac:	81 11       	cpse	r24, r1
    2bae:	15 df       	rcall	.-470    	; 0x29da <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    2bb0:	ec 2f       	mov	r30, r28
    2bb2:	f0 e0       	ldi	r31, 0x00	; 0
    2bb4:	ee 0f       	add	r30, r30
    2bb6:	ff 1f       	adc	r31, r31
    2bb8:	e3 59       	subi	r30, 0x93	; 147
    2bba:	fc 4f       	sbci	r31, 0xFC	; 252
    2bbc:	a5 91       	lpm	r26, Z+
    2bbe:	b4 91       	lpm	r27, Z
    2bc0:	ec 91       	ld	r30, X
    2bc2:	ed 23       	and	r30, r29
    2bc4:	81 e0       	ldi	r24, 0x01	; 1
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	21 f4       	brne	.+8      	; 0x2bd2 <digitalRead+0x4a>
    2bca:	80 e0       	ldi	r24, 0x00	; 0
    2bcc:	02 c0       	rjmp	.+4      	; 0x2bd2 <digitalRead+0x4a>
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    2bce:	80 e0       	ldi	r24, 0x00	; 0
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    2bd2:	df 91       	pop	r29
    2bd4:	cf 91       	pop	r28
    2bd6:	08 95       	ret

00002bd8 <_ZN6StringD1Ev>:
		return *this;
	}
	len = length;
	strcpy_P(buffer, (PGM_P)pstr);
	return *this;
}
    2bd8:	fc 01       	movw	r30, r24
    2bda:	80 81       	ld	r24, Z
    2bdc:	91 81       	ldd	r25, Z+1	; 0x01
    2bde:	6e c1       	rjmp	.+732    	; 0x2ebc <free>
    2be0:	08 95       	ret

00002be2 <_ZN6String10invalidateEv>:
    2be2:	cf 93       	push	r28
    2be4:	df 93       	push	r29
    2be6:	ec 01       	movw	r28, r24
    2be8:	88 81       	ld	r24, Y
    2bea:	99 81       	ldd	r25, Y+1	; 0x01
    2bec:	00 97       	sbiw	r24, 0x00	; 0
    2bee:	09 f0       	breq	.+2      	; 0x2bf2 <_ZN6String10invalidateEv+0x10>
    2bf0:	65 d1       	rcall	.+714    	; 0x2ebc <free>
    2bf2:	19 82       	std	Y+1, r1	; 0x01
    2bf4:	18 82       	st	Y, r1
    2bf6:	1d 82       	std	Y+5, r1	; 0x05
    2bf8:	1c 82       	std	Y+4, r1	; 0x04
    2bfa:	1b 82       	std	Y+3, r1	; 0x03
    2bfc:	1a 82       	std	Y+2, r1	; 0x02
    2bfe:	df 91       	pop	r29
    2c00:	cf 91       	pop	r28
    2c02:	08 95       	ret

00002c04 <_ZN6String12changeBufferEj>:
    2c04:	0f 93       	push	r16
    2c06:	1f 93       	push	r17
    2c08:	cf 93       	push	r28
    2c0a:	df 93       	push	r29
    2c0c:	ec 01       	movw	r28, r24
    2c0e:	8b 01       	movw	r16, r22
    2c10:	6f 5f       	subi	r22, 0xFF	; 255
    2c12:	7f 4f       	sbci	r23, 0xFF	; 255
    2c14:	88 81       	ld	r24, Y
    2c16:	99 81       	ldd	r25, Y+1	; 0x01
    2c18:	e9 d1       	rcall	.+978    	; 0x2fec <realloc>
    2c1a:	00 97       	sbiw	r24, 0x00	; 0
    2c1c:	31 f0       	breq	.+12     	; 0x2c2a <_ZN6String12changeBufferEj+0x26>
    2c1e:	99 83       	std	Y+1, r25	; 0x01
    2c20:	88 83       	st	Y, r24
    2c22:	1b 83       	std	Y+3, r17	; 0x03
    2c24:	0a 83       	std	Y+2, r16	; 0x02
    2c26:	81 e0       	ldi	r24, 0x01	; 1
    2c28:	01 c0       	rjmp	.+2      	; 0x2c2c <_ZN6String12changeBufferEj+0x28>
    2c2a:	80 e0       	ldi	r24, 0x00	; 0
    2c2c:	df 91       	pop	r29
    2c2e:	cf 91       	pop	r28
    2c30:	1f 91       	pop	r17
    2c32:	0f 91       	pop	r16
    2c34:	08 95       	ret

00002c36 <_ZN6String7reserveEj>:
    2c36:	cf 93       	push	r28
    2c38:	df 93       	push	r29
    2c3a:	fc 01       	movw	r30, r24
    2c3c:	20 81       	ld	r18, Z
    2c3e:	31 81       	ldd	r19, Z+1	; 0x01
    2c40:	23 2b       	or	r18, r19
    2c42:	29 f0       	breq	.+10     	; 0x2c4e <_ZN6String7reserveEj+0x18>
    2c44:	22 81       	ldd	r18, Z+2	; 0x02
    2c46:	33 81       	ldd	r19, Z+3	; 0x03
    2c48:	26 17       	cp	r18, r22
    2c4a:	37 07       	cpc	r19, r23
    2c4c:	68 f4       	brcc	.+26     	; 0x2c68 <_ZN6String7reserveEj+0x32>
    2c4e:	ec 01       	movw	r28, r24
    2c50:	d9 df       	rcall	.-78     	; 0x2c04 <_ZN6String12changeBufferEj>
    2c52:	88 23       	and	r24, r24
    2c54:	61 f0       	breq	.+24     	; 0x2c6e <_ZN6String7reserveEj+0x38>
    2c56:	8c 81       	ldd	r24, Y+4	; 0x04
    2c58:	9d 81       	ldd	r25, Y+5	; 0x05
    2c5a:	89 2b       	or	r24, r25
    2c5c:	39 f4       	brne	.+14     	; 0x2c6c <_ZN6String7reserveEj+0x36>
    2c5e:	e8 81       	ld	r30, Y
    2c60:	f9 81       	ldd	r31, Y+1	; 0x01
    2c62:	10 82       	st	Z, r1
    2c64:	81 e0       	ldi	r24, 0x01	; 1
    2c66:	03 c0       	rjmp	.+6      	; 0x2c6e <_ZN6String7reserveEj+0x38>
    2c68:	81 e0       	ldi	r24, 0x01	; 1
    2c6a:	01 c0       	rjmp	.+2      	; 0x2c6e <_ZN6String7reserveEj+0x38>
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	df 91       	pop	r29
    2c70:	cf 91       	pop	r28
    2c72:	08 95       	ret

00002c74 <_ZN6String4copyEPKcj>:
    2c74:	ef 92       	push	r14
    2c76:	ff 92       	push	r15
    2c78:	0f 93       	push	r16
    2c7a:	1f 93       	push	r17
    2c7c:	cf 93       	push	r28
    2c7e:	df 93       	push	r29
    2c80:	ec 01       	movw	r28, r24
    2c82:	7b 01       	movw	r14, r22
    2c84:	8a 01       	movw	r16, r20
    2c86:	ba 01       	movw	r22, r20
    2c88:	d6 df       	rcall	.-84     	; 0x2c36 <_ZN6String7reserveEj>
    2c8a:	81 11       	cpse	r24, r1
    2c8c:	03 c0       	rjmp	.+6      	; 0x2c94 <_ZN6String4copyEPKcj+0x20>
    2c8e:	ce 01       	movw	r24, r28
    2c90:	a8 df       	rcall	.-176    	; 0x2be2 <_ZN6String10invalidateEv>
    2c92:	06 c0       	rjmp	.+12     	; 0x2ca0 <_ZN6String4copyEPKcj+0x2c>
    2c94:	1d 83       	std	Y+5, r17	; 0x05
    2c96:	0c 83       	std	Y+4, r16	; 0x04
    2c98:	b7 01       	movw	r22, r14
    2c9a:	88 81       	ld	r24, Y
    2c9c:	99 81       	ldd	r25, Y+1	; 0x01
    2c9e:	97 d2       	rcall	.+1326   	; 0x31ce <strcpy>
    2ca0:	ce 01       	movw	r24, r28
    2ca2:	df 91       	pop	r29
    2ca4:	cf 91       	pop	r28
    2ca6:	1f 91       	pop	r17
    2ca8:	0f 91       	pop	r16
    2caa:	ff 90       	pop	r15
    2cac:	ef 90       	pop	r14
    2cae:	08 95       	ret

00002cb0 <_ZN6StringC1EPKc>:
    2cb0:	fc 01       	movw	r30, r24
    2cb2:	11 82       	std	Z+1, r1	; 0x01
    2cb4:	10 82       	st	Z, r1
    2cb6:	13 82       	std	Z+3, r1	; 0x03
    2cb8:	12 82       	std	Z+2, r1	; 0x02
    2cba:	15 82       	std	Z+5, r1	; 0x05
    2cbc:	14 82       	std	Z+4, r1	; 0x04
    2cbe:	61 15       	cp	r22, r1
    2cc0:	71 05       	cpc	r23, r1
    2cc2:	49 f0       	breq	.+18     	; 0x2cd6 <_ZN6StringC1EPKc+0x26>
    2cc4:	fb 01       	movw	r30, r22
    2cc6:	01 90       	ld	r0, Z+
    2cc8:	00 20       	and	r0, r0
    2cca:	e9 f7       	brne	.-6      	; 0x2cc6 <_ZN6StringC1EPKc+0x16>
    2ccc:	31 97       	sbiw	r30, 0x01	; 1
    2cce:	af 01       	movw	r20, r30
    2cd0:	46 1b       	sub	r20, r22
    2cd2:	57 0b       	sbc	r21, r23
    2cd4:	cf cf       	rjmp	.-98     	; 0x2c74 <_ZN6String4copyEPKcj>
    2cd6:	08 95       	ret

00002cd8 <_ZN6StringaSERKS_>:
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
    2cd8:	cf 93       	push	r28
    2cda:	df 93       	push	r29
    2cdc:	ec 01       	movw	r28, r24
    2cde:	fb 01       	movw	r30, r22
	if (this == &rhs) return *this;
    2ce0:	86 17       	cp	r24, r22
    2ce2:	97 07       	cpc	r25, r23
    2ce4:	51 f0       	breq	.+20     	; 0x2cfa <_ZN6StringaSERKS_+0x22>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    2ce6:	60 81       	ld	r22, Z
    2ce8:	71 81       	ldd	r23, Z+1	; 0x01
    2cea:	61 15       	cp	r22, r1
    2cec:	71 05       	cpc	r23, r1
    2cee:	21 f0       	breq	.+8      	; 0x2cf8 <_ZN6StringaSERKS_+0x20>
    2cf0:	44 81       	ldd	r20, Z+4	; 0x04
    2cf2:	55 81       	ldd	r21, Z+5	; 0x05
    2cf4:	bf df       	rcall	.-130    	; 0x2c74 <_ZN6String4copyEPKcj>
    2cf6:	01 c0       	rjmp	.+2      	; 0x2cfa <_ZN6StringaSERKS_+0x22>
	else invalidate();
    2cf8:	74 df       	rcall	.-280    	; 0x2be2 <_ZN6String10invalidateEv>
	
	return *this;
}
    2cfa:	ce 01       	movw	r24, r28
    2cfc:	df 91       	pop	r29
    2cfe:	cf 91       	pop	r28
    2d00:	08 95       	ret

00002d02 <_ZN6StringC1ERKS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2d02:	fc 01       	movw	r30, r24
    2d04:	11 82       	std	Z+1, r1	; 0x01
    2d06:	10 82       	st	Z, r1
	capacity = 0;
    2d08:	13 82       	std	Z+3, r1	; 0x03
    2d0a:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2d0c:	15 82       	std	Z+5, r1	; 0x05
    2d0e:	14 82       	std	Z+4, r1	; 0x04
}

String::String(const String &value)
{
	init();
	*this = value;
    2d10:	e3 cf       	rjmp	.-58     	; 0x2cd8 <_ZN6StringaSERKS_>
    2d12:	08 95       	ret

00002d14 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    2d14:	cf 93       	push	r28
    2d16:	df 93       	push	r29
    2d18:	ec 01       	movw	r28, r24
	if (cstr) copy(cstr, strlen(cstr));
    2d1a:	61 15       	cp	r22, r1
    2d1c:	71 05       	cpc	r23, r1
    2d1e:	51 f0       	breq	.+20     	; 0x2d34 <_ZN6StringaSEPKc+0x20>
    2d20:	fb 01       	movw	r30, r22
    2d22:	01 90       	ld	r0, Z+
    2d24:	00 20       	and	r0, r0
    2d26:	e9 f7       	brne	.-6      	; 0x2d22 <_ZN6StringaSEPKc+0xe>
    2d28:	31 97       	sbiw	r30, 0x01	; 1
    2d2a:	af 01       	movw	r20, r30
    2d2c:	46 1b       	sub	r20, r22
    2d2e:	57 0b       	sbc	r21, r23
    2d30:	a1 df       	rcall	.-190    	; 0x2c74 <_ZN6String4copyEPKcj>
    2d32:	01 c0       	rjmp	.+2      	; 0x2d36 <_ZN6StringaSEPKc+0x22>
	else invalidate();
    2d34:	56 df       	rcall	.-340    	; 0x2be2 <_ZN6String10invalidateEv>
	
	return *this;
}
    2d36:	ce 01       	movw	r24, r28
    2d38:	df 91       	pop	r29
    2d3a:	cf 91       	pop	r28
    2d3c:	08 95       	ret

00002d3e <__udivmodsi4>:
    2d3e:	a1 e2       	ldi	r26, 0x21	; 33
    2d40:	1a 2e       	mov	r1, r26
    2d42:	aa 1b       	sub	r26, r26
    2d44:	bb 1b       	sub	r27, r27
    2d46:	fd 01       	movw	r30, r26
    2d48:	0d c0       	rjmp	.+26     	; 0x2d64 <__udivmodsi4_ep>

00002d4a <__udivmodsi4_loop>:
    2d4a:	aa 1f       	adc	r26, r26
    2d4c:	bb 1f       	adc	r27, r27
    2d4e:	ee 1f       	adc	r30, r30
    2d50:	ff 1f       	adc	r31, r31
    2d52:	a2 17       	cp	r26, r18
    2d54:	b3 07       	cpc	r27, r19
    2d56:	e4 07       	cpc	r30, r20
    2d58:	f5 07       	cpc	r31, r21
    2d5a:	20 f0       	brcs	.+8      	; 0x2d64 <__udivmodsi4_ep>
    2d5c:	a2 1b       	sub	r26, r18
    2d5e:	b3 0b       	sbc	r27, r19
    2d60:	e4 0b       	sbc	r30, r20
    2d62:	f5 0b       	sbc	r31, r21

00002d64 <__udivmodsi4_ep>:
    2d64:	66 1f       	adc	r22, r22
    2d66:	77 1f       	adc	r23, r23
    2d68:	88 1f       	adc	r24, r24
    2d6a:	99 1f       	adc	r25, r25
    2d6c:	1a 94       	dec	r1
    2d6e:	69 f7       	brne	.-38     	; 0x2d4a <__udivmodsi4_loop>
    2d70:	60 95       	com	r22
    2d72:	70 95       	com	r23
    2d74:	80 95       	com	r24
    2d76:	90 95       	com	r25
    2d78:	9b 01       	movw	r18, r22
    2d7a:	ac 01       	movw	r20, r24
    2d7c:	bd 01       	movw	r22, r26
    2d7e:	cf 01       	movw	r24, r30
    2d80:	08 95       	ret

00002d82 <__tablejump2__>:
    2d82:	ee 0f       	add	r30, r30
    2d84:	ff 1f       	adc	r31, r31
    2d86:	88 1f       	adc	r24, r24
    2d88:	8b bf       	out	0x3b, r24	; 59
    2d8a:	07 90       	elpm	r0, Z+
    2d8c:	f6 91       	elpm	r31, Z
    2d8e:	e0 2d       	mov	r30, r0
    2d90:	19 94       	eijmp

00002d92 <malloc>:
    2d92:	cf 93       	push	r28
    2d94:	df 93       	push	r29
    2d96:	82 30       	cpi	r24, 0x02	; 2
    2d98:	91 05       	cpc	r25, r1
    2d9a:	10 f4       	brcc	.+4      	; 0x2da0 <malloc+0xe>
    2d9c:	82 e0       	ldi	r24, 0x02	; 2
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	e0 91 82 06 	lds	r30, 0x0682
    2da4:	f0 91 83 06 	lds	r31, 0x0683
    2da8:	20 e0       	ldi	r18, 0x00	; 0
    2daa:	30 e0       	ldi	r19, 0x00	; 0
    2dac:	c0 e0       	ldi	r28, 0x00	; 0
    2dae:	d0 e0       	ldi	r29, 0x00	; 0
    2db0:	30 97       	sbiw	r30, 0x00	; 0
    2db2:	11 f1       	breq	.+68     	; 0x2df8 <malloc+0x66>
    2db4:	40 81       	ld	r20, Z
    2db6:	51 81       	ldd	r21, Z+1	; 0x01
    2db8:	48 17       	cp	r20, r24
    2dba:	59 07       	cpc	r21, r25
    2dbc:	c0 f0       	brcs	.+48     	; 0x2dee <malloc+0x5c>
    2dbe:	48 17       	cp	r20, r24
    2dc0:	59 07       	cpc	r21, r25
    2dc2:	61 f4       	brne	.+24     	; 0x2ddc <malloc+0x4a>
    2dc4:	82 81       	ldd	r24, Z+2	; 0x02
    2dc6:	93 81       	ldd	r25, Z+3	; 0x03
    2dc8:	20 97       	sbiw	r28, 0x00	; 0
    2dca:	19 f0       	breq	.+6      	; 0x2dd2 <malloc+0x40>
    2dcc:	9b 83       	std	Y+3, r25	; 0x03
    2dce:	8a 83       	std	Y+2, r24	; 0x02
    2dd0:	2b c0       	rjmp	.+86     	; 0x2e28 <malloc+0x96>
    2dd2:	90 93 83 06 	sts	0x0683, r25
    2dd6:	80 93 82 06 	sts	0x0682, r24
    2dda:	26 c0       	rjmp	.+76     	; 0x2e28 <malloc+0x96>
    2ddc:	21 15       	cp	r18, r1
    2dde:	31 05       	cpc	r19, r1
    2de0:	19 f0       	breq	.+6      	; 0x2de8 <malloc+0x56>
    2de2:	42 17       	cp	r20, r18
    2de4:	53 07       	cpc	r21, r19
    2de6:	18 f4       	brcc	.+6      	; 0x2dee <malloc+0x5c>
    2de8:	9a 01       	movw	r18, r20
    2dea:	be 01       	movw	r22, r28
    2dec:	df 01       	movw	r26, r30
    2dee:	ef 01       	movw	r28, r30
    2df0:	02 80       	ldd	r0, Z+2	; 0x02
    2df2:	f3 81       	ldd	r31, Z+3	; 0x03
    2df4:	e0 2d       	mov	r30, r0
    2df6:	dc cf       	rjmp	.-72     	; 0x2db0 <malloc+0x1e>
    2df8:	21 15       	cp	r18, r1
    2dfa:	31 05       	cpc	r19, r1
    2dfc:	09 f1       	breq	.+66     	; 0x2e40 <malloc+0xae>
    2dfe:	28 1b       	sub	r18, r24
    2e00:	39 0b       	sbc	r19, r25
    2e02:	24 30       	cpi	r18, 0x04	; 4
    2e04:	31 05       	cpc	r19, r1
    2e06:	90 f4       	brcc	.+36     	; 0x2e2c <malloc+0x9a>
    2e08:	12 96       	adiw	r26, 0x02	; 2
    2e0a:	8d 91       	ld	r24, X+
    2e0c:	9c 91       	ld	r25, X
    2e0e:	13 97       	sbiw	r26, 0x03	; 3
    2e10:	61 15       	cp	r22, r1
    2e12:	71 05       	cpc	r23, r1
    2e14:	21 f0       	breq	.+8      	; 0x2e1e <malloc+0x8c>
    2e16:	fb 01       	movw	r30, r22
    2e18:	93 83       	std	Z+3, r25	; 0x03
    2e1a:	82 83       	std	Z+2, r24	; 0x02
    2e1c:	04 c0       	rjmp	.+8      	; 0x2e26 <malloc+0x94>
    2e1e:	90 93 83 06 	sts	0x0683, r25
    2e22:	80 93 82 06 	sts	0x0682, r24
    2e26:	fd 01       	movw	r30, r26
    2e28:	32 96       	adiw	r30, 0x02	; 2
    2e2a:	44 c0       	rjmp	.+136    	; 0x2eb4 <malloc+0x122>
    2e2c:	fd 01       	movw	r30, r26
    2e2e:	e2 0f       	add	r30, r18
    2e30:	f3 1f       	adc	r31, r19
    2e32:	81 93       	st	Z+, r24
    2e34:	91 93       	st	Z+, r25
    2e36:	22 50       	subi	r18, 0x02	; 2
    2e38:	31 09       	sbc	r19, r1
    2e3a:	2d 93       	st	X+, r18
    2e3c:	3c 93       	st	X, r19
    2e3e:	3a c0       	rjmp	.+116    	; 0x2eb4 <malloc+0x122>
    2e40:	20 91 80 06 	lds	r18, 0x0680
    2e44:	30 91 81 06 	lds	r19, 0x0681
    2e48:	23 2b       	or	r18, r19
    2e4a:	41 f4       	brne	.+16     	; 0x2e5c <malloc+0xca>
    2e4c:	20 91 02 02 	lds	r18, 0x0202
    2e50:	30 91 03 02 	lds	r19, 0x0203
    2e54:	30 93 81 06 	sts	0x0681, r19
    2e58:	20 93 80 06 	sts	0x0680, r18
    2e5c:	20 91 00 02 	lds	r18, 0x0200
    2e60:	30 91 01 02 	lds	r19, 0x0201
    2e64:	21 15       	cp	r18, r1
    2e66:	31 05       	cpc	r19, r1
    2e68:	41 f4       	brne	.+16     	; 0x2e7a <malloc+0xe8>
    2e6a:	2d b7       	in	r18, 0x3d	; 61
    2e6c:	3e b7       	in	r19, 0x3e	; 62
    2e6e:	40 91 04 02 	lds	r20, 0x0204
    2e72:	50 91 05 02 	lds	r21, 0x0205
    2e76:	24 1b       	sub	r18, r20
    2e78:	35 0b       	sbc	r19, r21
    2e7a:	e0 91 80 06 	lds	r30, 0x0680
    2e7e:	f0 91 81 06 	lds	r31, 0x0681
    2e82:	e2 17       	cp	r30, r18
    2e84:	f3 07       	cpc	r31, r19
    2e86:	a0 f4       	brcc	.+40     	; 0x2eb0 <malloc+0x11e>
    2e88:	2e 1b       	sub	r18, r30
    2e8a:	3f 0b       	sbc	r19, r31
    2e8c:	28 17       	cp	r18, r24
    2e8e:	39 07       	cpc	r19, r25
    2e90:	78 f0       	brcs	.+30     	; 0x2eb0 <malloc+0x11e>
    2e92:	ac 01       	movw	r20, r24
    2e94:	4e 5f       	subi	r20, 0xFE	; 254
    2e96:	5f 4f       	sbci	r21, 0xFF	; 255
    2e98:	24 17       	cp	r18, r20
    2e9a:	35 07       	cpc	r19, r21
    2e9c:	48 f0       	brcs	.+18     	; 0x2eb0 <malloc+0x11e>
    2e9e:	4e 0f       	add	r20, r30
    2ea0:	5f 1f       	adc	r21, r31
    2ea2:	50 93 81 06 	sts	0x0681, r21
    2ea6:	40 93 80 06 	sts	0x0680, r20
    2eaa:	81 93       	st	Z+, r24
    2eac:	91 93       	st	Z+, r25
    2eae:	02 c0       	rjmp	.+4      	; 0x2eb4 <malloc+0x122>
    2eb0:	e0 e0       	ldi	r30, 0x00	; 0
    2eb2:	f0 e0       	ldi	r31, 0x00	; 0
    2eb4:	cf 01       	movw	r24, r30
    2eb6:	df 91       	pop	r29
    2eb8:	cf 91       	pop	r28
    2eba:	08 95       	ret

00002ebc <free>:
    2ebc:	0f 93       	push	r16
    2ebe:	1f 93       	push	r17
    2ec0:	cf 93       	push	r28
    2ec2:	df 93       	push	r29
    2ec4:	00 97       	sbiw	r24, 0x00	; 0
    2ec6:	09 f4       	brne	.+2      	; 0x2eca <free+0xe>
    2ec8:	8c c0       	rjmp	.+280    	; 0x2fe2 <free+0x126>
    2eca:	fc 01       	movw	r30, r24
    2ecc:	32 97       	sbiw	r30, 0x02	; 2
    2ece:	13 82       	std	Z+3, r1	; 0x03
    2ed0:	12 82       	std	Z+2, r1	; 0x02
    2ed2:	00 91 82 06 	lds	r16, 0x0682
    2ed6:	10 91 83 06 	lds	r17, 0x0683
    2eda:	01 15       	cp	r16, r1
    2edc:	11 05       	cpc	r17, r1
    2ede:	81 f4       	brne	.+32     	; 0x2f00 <free+0x44>
    2ee0:	20 81       	ld	r18, Z
    2ee2:	31 81       	ldd	r19, Z+1	; 0x01
    2ee4:	82 0f       	add	r24, r18
    2ee6:	93 1f       	adc	r25, r19
    2ee8:	20 91 80 06 	lds	r18, 0x0680
    2eec:	30 91 81 06 	lds	r19, 0x0681
    2ef0:	28 17       	cp	r18, r24
    2ef2:	39 07       	cpc	r19, r25
    2ef4:	79 f5       	brne	.+94     	; 0x2f54 <free+0x98>
    2ef6:	f0 93 81 06 	sts	0x0681, r31
    2efa:	e0 93 80 06 	sts	0x0680, r30
    2efe:	71 c0       	rjmp	.+226    	; 0x2fe2 <free+0x126>
    2f00:	d8 01       	movw	r26, r16
    2f02:	40 e0       	ldi	r20, 0x00	; 0
    2f04:	50 e0       	ldi	r21, 0x00	; 0
    2f06:	ae 17       	cp	r26, r30
    2f08:	bf 07       	cpc	r27, r31
    2f0a:	50 f4       	brcc	.+20     	; 0x2f20 <free+0x64>
    2f0c:	12 96       	adiw	r26, 0x02	; 2
    2f0e:	2d 91       	ld	r18, X+
    2f10:	3c 91       	ld	r19, X
    2f12:	13 97       	sbiw	r26, 0x03	; 3
    2f14:	ad 01       	movw	r20, r26
    2f16:	21 15       	cp	r18, r1
    2f18:	31 05       	cpc	r19, r1
    2f1a:	09 f1       	breq	.+66     	; 0x2f5e <free+0xa2>
    2f1c:	d9 01       	movw	r26, r18
    2f1e:	f3 cf       	rjmp	.-26     	; 0x2f06 <free+0x4a>
    2f20:	9d 01       	movw	r18, r26
    2f22:	da 01       	movw	r26, r20
    2f24:	33 83       	std	Z+3, r19	; 0x03
    2f26:	22 83       	std	Z+2, r18	; 0x02
    2f28:	60 81       	ld	r22, Z
    2f2a:	71 81       	ldd	r23, Z+1	; 0x01
    2f2c:	86 0f       	add	r24, r22
    2f2e:	97 1f       	adc	r25, r23
    2f30:	82 17       	cp	r24, r18
    2f32:	93 07       	cpc	r25, r19
    2f34:	69 f4       	brne	.+26     	; 0x2f50 <free+0x94>
    2f36:	ec 01       	movw	r28, r24
    2f38:	28 81       	ld	r18, Y
    2f3a:	39 81       	ldd	r19, Y+1	; 0x01
    2f3c:	26 0f       	add	r18, r22
    2f3e:	37 1f       	adc	r19, r23
    2f40:	2e 5f       	subi	r18, 0xFE	; 254
    2f42:	3f 4f       	sbci	r19, 0xFF	; 255
    2f44:	31 83       	std	Z+1, r19	; 0x01
    2f46:	20 83       	st	Z, r18
    2f48:	8a 81       	ldd	r24, Y+2	; 0x02
    2f4a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f4c:	93 83       	std	Z+3, r25	; 0x03
    2f4e:	82 83       	std	Z+2, r24	; 0x02
    2f50:	45 2b       	or	r20, r21
    2f52:	29 f4       	brne	.+10     	; 0x2f5e <free+0xa2>
    2f54:	f0 93 83 06 	sts	0x0683, r31
    2f58:	e0 93 82 06 	sts	0x0682, r30
    2f5c:	42 c0       	rjmp	.+132    	; 0x2fe2 <free+0x126>
    2f5e:	13 96       	adiw	r26, 0x03	; 3
    2f60:	fc 93       	st	X, r31
    2f62:	ee 93       	st	-X, r30
    2f64:	12 97       	sbiw	r26, 0x02	; 2
    2f66:	ed 01       	movw	r28, r26
    2f68:	49 91       	ld	r20, Y+
    2f6a:	59 91       	ld	r21, Y+
    2f6c:	9e 01       	movw	r18, r28
    2f6e:	24 0f       	add	r18, r20
    2f70:	35 1f       	adc	r19, r21
    2f72:	e2 17       	cp	r30, r18
    2f74:	f3 07       	cpc	r31, r19
    2f76:	71 f4       	brne	.+28     	; 0x2f94 <free+0xd8>
    2f78:	80 81       	ld	r24, Z
    2f7a:	91 81       	ldd	r25, Z+1	; 0x01
    2f7c:	84 0f       	add	r24, r20
    2f7e:	95 1f       	adc	r25, r21
    2f80:	02 96       	adiw	r24, 0x02	; 2
    2f82:	11 96       	adiw	r26, 0x01	; 1
    2f84:	9c 93       	st	X, r25
    2f86:	8e 93       	st	-X, r24
    2f88:	82 81       	ldd	r24, Z+2	; 0x02
    2f8a:	93 81       	ldd	r25, Z+3	; 0x03
    2f8c:	13 96       	adiw	r26, 0x03	; 3
    2f8e:	9c 93       	st	X, r25
    2f90:	8e 93       	st	-X, r24
    2f92:	12 97       	sbiw	r26, 0x02	; 2
    2f94:	e0 e0       	ldi	r30, 0x00	; 0
    2f96:	f0 e0       	ldi	r31, 0x00	; 0
    2f98:	d8 01       	movw	r26, r16
    2f9a:	12 96       	adiw	r26, 0x02	; 2
    2f9c:	8d 91       	ld	r24, X+
    2f9e:	9c 91       	ld	r25, X
    2fa0:	13 97       	sbiw	r26, 0x03	; 3
    2fa2:	00 97       	sbiw	r24, 0x00	; 0
    2fa4:	19 f0       	breq	.+6      	; 0x2fac <free+0xf0>
    2fa6:	f8 01       	movw	r30, r16
    2fa8:	8c 01       	movw	r16, r24
    2faa:	f6 cf       	rjmp	.-20     	; 0x2f98 <free+0xdc>
    2fac:	8d 91       	ld	r24, X+
    2fae:	9c 91       	ld	r25, X
    2fb0:	98 01       	movw	r18, r16
    2fb2:	2e 5f       	subi	r18, 0xFE	; 254
    2fb4:	3f 4f       	sbci	r19, 0xFF	; 255
    2fb6:	82 0f       	add	r24, r18
    2fb8:	93 1f       	adc	r25, r19
    2fba:	20 91 80 06 	lds	r18, 0x0680
    2fbe:	30 91 81 06 	lds	r19, 0x0681
    2fc2:	28 17       	cp	r18, r24
    2fc4:	39 07       	cpc	r19, r25
    2fc6:	69 f4       	brne	.+26     	; 0x2fe2 <free+0x126>
    2fc8:	30 97       	sbiw	r30, 0x00	; 0
    2fca:	29 f4       	brne	.+10     	; 0x2fd6 <free+0x11a>
    2fcc:	10 92 83 06 	sts	0x0683, r1
    2fd0:	10 92 82 06 	sts	0x0682, r1
    2fd4:	02 c0       	rjmp	.+4      	; 0x2fda <free+0x11e>
    2fd6:	13 82       	std	Z+3, r1	; 0x03
    2fd8:	12 82       	std	Z+2, r1	; 0x02
    2fda:	10 93 81 06 	sts	0x0681, r17
    2fde:	00 93 80 06 	sts	0x0680, r16
    2fe2:	df 91       	pop	r29
    2fe4:	cf 91       	pop	r28
    2fe6:	1f 91       	pop	r17
    2fe8:	0f 91       	pop	r16
    2fea:	08 95       	ret

00002fec <realloc>:
    2fec:	6f 92       	push	r6
    2fee:	7f 92       	push	r7
    2ff0:	8f 92       	push	r8
    2ff2:	9f 92       	push	r9
    2ff4:	af 92       	push	r10
    2ff6:	bf 92       	push	r11
    2ff8:	cf 92       	push	r12
    2ffa:	df 92       	push	r13
    2ffc:	ef 92       	push	r14
    2ffe:	ff 92       	push	r15
    3000:	0f 93       	push	r16
    3002:	1f 93       	push	r17
    3004:	cf 93       	push	r28
    3006:	df 93       	push	r29
    3008:	ec 01       	movw	r28, r24
    300a:	00 97       	sbiw	r24, 0x00	; 0
    300c:	81 f4       	brne	.+32     	; 0x302e <realloc+0x42>
    300e:	cb 01       	movw	r24, r22
    3010:	df 91       	pop	r29
    3012:	cf 91       	pop	r28
    3014:	1f 91       	pop	r17
    3016:	0f 91       	pop	r16
    3018:	ff 90       	pop	r15
    301a:	ef 90       	pop	r14
    301c:	df 90       	pop	r13
    301e:	cf 90       	pop	r12
    3020:	bf 90       	pop	r11
    3022:	af 90       	pop	r10
    3024:	9f 90       	pop	r9
    3026:	8f 90       	pop	r8
    3028:	7f 90       	pop	r7
    302a:	6f 90       	pop	r6
    302c:	b2 ce       	rjmp	.-668    	; 0x2d92 <malloc>
    302e:	fc 01       	movw	r30, r24
    3030:	e6 0f       	add	r30, r22
    3032:	f7 1f       	adc	r31, r23
    3034:	9c 01       	movw	r18, r24
    3036:	22 50       	subi	r18, 0x02	; 2
    3038:	31 09       	sbc	r19, r1
    303a:	e2 17       	cp	r30, r18
    303c:	f3 07       	cpc	r31, r19
    303e:	08 f4       	brcc	.+2      	; 0x3042 <realloc+0x56>
    3040:	a8 c0       	rjmp	.+336    	; 0x3192 <realloc+0x1a6>
    3042:	d9 01       	movw	r26, r18
    3044:	0d 91       	ld	r16, X+
    3046:	1c 91       	ld	r17, X
    3048:	11 97       	sbiw	r26, 0x01	; 1
    304a:	06 17       	cp	r16, r22
    304c:	17 07       	cpc	r17, r23
    304e:	a8 f0       	brcs	.+42     	; 0x307a <realloc+0x8e>
    3050:	05 30       	cpi	r16, 0x05	; 5
    3052:	11 05       	cpc	r17, r1
    3054:	08 f4       	brcc	.+2      	; 0x3058 <realloc+0x6c>
    3056:	9b c0       	rjmp	.+310    	; 0x318e <realloc+0x1a2>
    3058:	c8 01       	movw	r24, r16
    305a:	04 97       	sbiw	r24, 0x04	; 4
    305c:	86 17       	cp	r24, r22
    305e:	97 07       	cpc	r25, r23
    3060:	08 f4       	brcc	.+2      	; 0x3064 <realloc+0x78>
    3062:	95 c0       	rjmp	.+298    	; 0x318e <realloc+0x1a2>
    3064:	02 50       	subi	r16, 0x02	; 2
    3066:	11 09       	sbc	r17, r1
    3068:	06 1b       	sub	r16, r22
    306a:	17 0b       	sbc	r17, r23
    306c:	01 93       	st	Z+, r16
    306e:	11 93       	st	Z+, r17
    3070:	6d 93       	st	X+, r22
    3072:	7c 93       	st	X, r23
    3074:	cf 01       	movw	r24, r30
    3076:	22 df       	rcall	.-444    	; 0x2ebc <free>
    3078:	8a c0       	rjmp	.+276    	; 0x318e <realloc+0x1a2>
    307a:	5b 01       	movw	r10, r22
    307c:	a0 1a       	sub	r10, r16
    307e:	b1 0a       	sbc	r11, r17
    3080:	4c 01       	movw	r8, r24
    3082:	80 0e       	add	r8, r16
    3084:	91 1e       	adc	r9, r17
    3086:	a0 91 82 06 	lds	r26, 0x0682
    308a:	b0 91 83 06 	lds	r27, 0x0683
    308e:	40 e0       	ldi	r20, 0x00	; 0
    3090:	50 e0       	ldi	r21, 0x00	; 0
    3092:	e1 2c       	mov	r14, r1
    3094:	f1 2c       	mov	r15, r1
    3096:	10 97       	sbiw	r26, 0x00	; 0
    3098:	09 f4       	brne	.+2      	; 0x309c <realloc+0xb0>
    309a:	4a c0       	rjmp	.+148    	; 0x3130 <realloc+0x144>
    309c:	a8 15       	cp	r26, r8
    309e:	b9 05       	cpc	r27, r9
    30a0:	d1 f5       	brne	.+116    	; 0x3116 <realloc+0x12a>
    30a2:	6d 90       	ld	r6, X+
    30a4:	7c 90       	ld	r7, X
    30a6:	11 97       	sbiw	r26, 0x01	; 1
    30a8:	63 01       	movw	r12, r6
    30aa:	82 e0       	ldi	r24, 0x02	; 2
    30ac:	c8 0e       	add	r12, r24
    30ae:	d1 1c       	adc	r13, r1
    30b0:	ca 14       	cp	r12, r10
    30b2:	db 04       	cpc	r13, r11
    30b4:	80 f1       	brcs	.+96     	; 0x3116 <realloc+0x12a>
    30b6:	a3 01       	movw	r20, r6
    30b8:	4a 19       	sub	r20, r10
    30ba:	5b 09       	sbc	r21, r11
    30bc:	6a 01       	movw	r12, r20
    30be:	82 e0       	ldi	r24, 0x02	; 2
    30c0:	c8 0e       	add	r12, r24
    30c2:	d1 1c       	adc	r13, r1
    30c4:	12 96       	adiw	r26, 0x02	; 2
    30c6:	bc 90       	ld	r11, X
    30c8:	12 97       	sbiw	r26, 0x02	; 2
    30ca:	13 96       	adiw	r26, 0x03	; 3
    30cc:	ac 91       	ld	r26, X
    30ce:	b5 e0       	ldi	r27, 0x05	; 5
    30d0:	cb 16       	cp	r12, r27
    30d2:	d1 04       	cpc	r13, r1
    30d4:	40 f0       	brcs	.+16     	; 0x30e6 <realloc+0xfa>
    30d6:	b2 82       	std	Z+2, r11	; 0x02
    30d8:	a3 83       	std	Z+3, r26	; 0x03
    30da:	51 83       	std	Z+1, r21	; 0x01
    30dc:	40 83       	st	Z, r20
    30de:	d9 01       	movw	r26, r18
    30e0:	6d 93       	st	X+, r22
    30e2:	7c 93       	st	X, r23
    30e4:	0a c0       	rjmp	.+20     	; 0x30fa <realloc+0x10e>
    30e6:	0e 5f       	subi	r16, 0xFE	; 254
    30e8:	1f 4f       	sbci	r17, 0xFF	; 255
    30ea:	c3 01       	movw	r24, r6
    30ec:	80 0f       	add	r24, r16
    30ee:	91 1f       	adc	r25, r17
    30f0:	f9 01       	movw	r30, r18
    30f2:	91 83       	std	Z+1, r25	; 0x01
    30f4:	80 83       	st	Z, r24
    30f6:	eb 2d       	mov	r30, r11
    30f8:	fa 2f       	mov	r31, r26
    30fa:	e1 14       	cp	r14, r1
    30fc:	f1 04       	cpc	r15, r1
    30fe:	31 f0       	breq	.+12     	; 0x310c <realloc+0x120>
    3100:	d7 01       	movw	r26, r14
    3102:	13 96       	adiw	r26, 0x03	; 3
    3104:	fc 93       	st	X, r31
    3106:	ee 93       	st	-X, r30
    3108:	12 97       	sbiw	r26, 0x02	; 2
    310a:	41 c0       	rjmp	.+130    	; 0x318e <realloc+0x1a2>
    310c:	f0 93 83 06 	sts	0x0683, r31
    3110:	e0 93 82 06 	sts	0x0682, r30
    3114:	3c c0       	rjmp	.+120    	; 0x318e <realloc+0x1a2>
    3116:	8d 91       	ld	r24, X+
    3118:	9c 91       	ld	r25, X
    311a:	11 97       	sbiw	r26, 0x01	; 1
    311c:	48 17       	cp	r20, r24
    311e:	59 07       	cpc	r21, r25
    3120:	08 f4       	brcc	.+2      	; 0x3124 <realloc+0x138>
    3122:	ac 01       	movw	r20, r24
    3124:	7d 01       	movw	r14, r26
    3126:	12 96       	adiw	r26, 0x02	; 2
    3128:	0d 90       	ld	r0, X+
    312a:	bc 91       	ld	r27, X
    312c:	a0 2d       	mov	r26, r0
    312e:	b3 cf       	rjmp	.-154    	; 0x3096 <realloc+0xaa>
    3130:	80 91 80 06 	lds	r24, 0x0680
    3134:	90 91 81 06 	lds	r25, 0x0681
    3138:	88 15       	cp	r24, r8
    313a:	99 05       	cpc	r25, r9
    313c:	e1 f4       	brne	.+56     	; 0x3176 <realloc+0x18a>
    313e:	46 17       	cp	r20, r22
    3140:	57 07       	cpc	r21, r23
    3142:	c8 f4       	brcc	.+50     	; 0x3176 <realloc+0x18a>
    3144:	80 91 00 02 	lds	r24, 0x0200
    3148:	90 91 01 02 	lds	r25, 0x0201
    314c:	00 97       	sbiw	r24, 0x00	; 0
    314e:	41 f4       	brne	.+16     	; 0x3160 <realloc+0x174>
    3150:	8d b7       	in	r24, 0x3d	; 61
    3152:	9e b7       	in	r25, 0x3e	; 62
    3154:	40 91 04 02 	lds	r20, 0x0204
    3158:	50 91 05 02 	lds	r21, 0x0205
    315c:	84 1b       	sub	r24, r20
    315e:	95 0b       	sbc	r25, r21
    3160:	e8 17       	cp	r30, r24
    3162:	f9 07       	cpc	r31, r25
    3164:	b0 f4       	brcc	.+44     	; 0x3192 <realloc+0x1a6>
    3166:	f0 93 81 06 	sts	0x0681, r31
    316a:	e0 93 80 06 	sts	0x0680, r30
    316e:	f9 01       	movw	r30, r18
    3170:	71 83       	std	Z+1, r23	; 0x01
    3172:	60 83       	st	Z, r22
    3174:	0c c0       	rjmp	.+24     	; 0x318e <realloc+0x1a2>
    3176:	cb 01       	movw	r24, r22
    3178:	0c de       	rcall	.-1000   	; 0x2d92 <malloc>
    317a:	7c 01       	movw	r14, r24
    317c:	00 97       	sbiw	r24, 0x00	; 0
    317e:	49 f0       	breq	.+18     	; 0x3192 <realloc+0x1a6>
    3180:	a8 01       	movw	r20, r16
    3182:	be 01       	movw	r22, r28
    3184:	1b d0       	rcall	.+54     	; 0x31bc <memcpy>
    3186:	ce 01       	movw	r24, r28
    3188:	99 de       	rcall	.-718    	; 0x2ebc <free>
    318a:	c7 01       	movw	r24, r14
    318c:	04 c0       	rjmp	.+8      	; 0x3196 <realloc+0x1aa>
    318e:	ce 01       	movw	r24, r28
    3190:	02 c0       	rjmp	.+4      	; 0x3196 <realloc+0x1aa>
    3192:	80 e0       	ldi	r24, 0x00	; 0
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	df 91       	pop	r29
    3198:	cf 91       	pop	r28
    319a:	1f 91       	pop	r17
    319c:	0f 91       	pop	r16
    319e:	ff 90       	pop	r15
    31a0:	ef 90       	pop	r14
    31a2:	df 90       	pop	r13
    31a4:	cf 90       	pop	r12
    31a6:	bf 90       	pop	r11
    31a8:	af 90       	pop	r10
    31aa:	9f 90       	pop	r9
    31ac:	8f 90       	pop	r8
    31ae:	7f 90       	pop	r7
    31b0:	6f 90       	pop	r6
    31b2:	08 95       	ret

000031b4 <abort>:
    31b4:	81 e0       	ldi	r24, 0x01	; 1
    31b6:	90 e0       	ldi	r25, 0x00	; 0
    31b8:	f8 94       	cli
    31ba:	10 c0       	rjmp	.+32     	; 0x31dc <_exit>

000031bc <memcpy>:
    31bc:	fb 01       	movw	r30, r22
    31be:	dc 01       	movw	r26, r24
    31c0:	02 c0       	rjmp	.+4      	; 0x31c6 <memcpy+0xa>
    31c2:	01 90       	ld	r0, Z+
    31c4:	0d 92       	st	X+, r0
    31c6:	41 50       	subi	r20, 0x01	; 1
    31c8:	50 40       	sbci	r21, 0x00	; 0
    31ca:	d8 f7       	brcc	.-10     	; 0x31c2 <memcpy+0x6>
    31cc:	08 95       	ret

000031ce <strcpy>:
    31ce:	fb 01       	movw	r30, r22
    31d0:	dc 01       	movw	r26, r24
    31d2:	01 90       	ld	r0, Z+
    31d4:	0d 92       	st	X+, r0
    31d6:	00 20       	and	r0, r0
    31d8:	e1 f7       	brne	.-8      	; 0x31d2 <strcpy+0x4>
    31da:	08 95       	ret

000031dc <_exit>:
    31dc:	f8 94       	cli

000031de <__stop_program>:
    31de:	ff cf       	rjmp	.-2      	; 0x31de <__stop_program>
