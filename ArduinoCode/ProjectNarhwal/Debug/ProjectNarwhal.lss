
ProjectNarwhal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002fc  00800200  00007b68  00007bfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007b68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003e4  008004fc  008004fc  00007ef8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00007ef8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007f28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000f48  00000000  00000000  00007f68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0003ff07  00000000  00000000  00008eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00007528  00000000  00000000  00048db7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009d2d  00000000  00000000  000502df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003714  00000000  00000000  0005a00c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004e3f  00000000  00000000  0005d720  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001290e  00000000  00000000  0006255f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000dd0  00000000  00000000  00074e6d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f8 c1       	rjmp	.+1008   	; 0x3f2 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 41 34 	jmp	0x6882	; 0x6882 <__vector_1>
       8:	0c 94 72 34 	jmp	0x68e4	; 0x68e4 <__vector_2>
       c:	0c 94 a3 34 	jmp	0x6946	; 0x6946 <__vector_3>
      10:	0c 94 d4 34 	jmp	0x69a8	; 0x69a8 <__vector_4>
      14:	0c 94 05 35 	jmp	0x6a0a	; 0x6a0a <__vector_5>
      18:	0c 94 36 35 	jmp	0x6a6c	; 0x6a6c <__vector_6>
      1c:	0c 94 67 35 	jmp	0x6ace	; 0x6ace <__vector_7>
      20:	0c 94 98 35 	jmp	0x6b30	; 0x6b30 <__vector_8>
      24:	17 c2       	rjmp	.+1070   	; 0x454 <__bad_interrupt>
      26:	00 00       	nop
      28:	15 c2       	rjmp	.+1066   	; 0x454 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	13 c2       	rjmp	.+1062   	; 0x454 <__bad_interrupt>
      2e:	00 00       	nop
      30:	11 c2       	rjmp	.+1058   	; 0x454 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 e2 33 	jmp	0x67c4	; 0x67c4 <__vector_13>
      38:	0d c2       	rjmp	.+1050   	; 0x454 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0b c2       	rjmp	.+1046   	; 0x454 <__bad_interrupt>
      3e:	00 00       	nop
      40:	09 c2       	rjmp	.+1042   	; 0x454 <__bad_interrupt>
      42:	00 00       	nop
      44:	07 c2       	rjmp	.+1038   	; 0x454 <__bad_interrupt>
      46:	00 00       	nop
      48:	05 c2       	rjmp	.+1034   	; 0x454 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	03 c2       	rjmp	.+1030   	; 0x454 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 36 29 	jmp	0x526c	; 0x526c <__vector_20>
      54:	ff c1       	rjmp	.+1022   	; 0x454 <__bad_interrupt>
      56:	00 00       	nop
      58:	fd c1       	rjmp	.+1018   	; 0x454 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 c9 35 	jmp	0x6b92	; 0x6b92 <__vector_23>
      60:	f9 c1       	rjmp	.+1010   	; 0x454 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 74 2e 	jmp	0x5ce8	; 0x5ce8 <__vector_25>
      68:	0c 94 b0 2e 	jmp	0x5d60	; 0x5d60 <__vector_26>
      6c:	f3 c1       	rjmp	.+998    	; 0x454 <__bad_interrupt>
      6e:	00 00       	nop
      70:	f1 c1       	rjmp	.+994    	; 0x454 <__bad_interrupt>
      72:	00 00       	nop
      74:	ef c1       	rjmp	.+990    	; 0x454 <__bad_interrupt>
      76:	00 00       	nop
      78:	ed c1       	rjmp	.+986    	; 0x454 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	eb c1       	rjmp	.+982    	; 0x454 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e9 c1       	rjmp	.+978    	; 0x454 <__bad_interrupt>
      82:	00 00       	nop
      84:	e7 c1       	rjmp	.+974    	; 0x454 <__bad_interrupt>
      86:	00 00       	nop
      88:	e5 c1       	rjmp	.+970    	; 0x454 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e3 c1       	rjmp	.+966    	; 0x454 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 0f 2f 	jmp	0x5e1e	; 0x5e1e <__vector_36>
      94:	0c 94 4b 2f 	jmp	0x5e96	; 0x5e96 <__vector_37>
      98:	dd c1       	rjmp	.+954    	; 0x454 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 5a 2a 	jmp	0x54b4	; 0x54b4 <__vector_39>
      a0:	d9 c1       	rjmp	.+946    	; 0x454 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d7 c1       	rjmp	.+942    	; 0x454 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d5 c1       	rjmp	.+938    	; 0x454 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d3 c1       	rjmp	.+934    	; 0x454 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d1 c1       	rjmp	.+930    	; 0x454 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	cf c1       	rjmp	.+926    	; 0x454 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	cd c1       	rjmp	.+922    	; 0x454 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	cb c1       	rjmp	.+918    	; 0x454 <__bad_interrupt>
      be:	00 00       	nop
      c0:	c9 c1       	rjmp	.+914    	; 0x454 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c7 c1       	rjmp	.+910    	; 0x454 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c5 c1       	rjmp	.+906    	; 0x454 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 aa 2f 	jmp	0x5f54	; 0x5f54 <__vector_51>
      d0:	0c 94 e6 2f 	jmp	0x5fcc	; 0x5fcc <__vector_52>
      d4:	bf c1       	rjmp	.+894    	; 0x454 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 45 30 	jmp	0x608a	; 0x608a <__vector_54>
      dc:	0c 94 81 30 	jmp	0x6102	; 0x6102 <__vector_55>
      e0:	b9 c1       	rjmp	.+882    	; 0x454 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	f9 21       	and	r31, r9
      e6:	d0 21       	and	r29, r0
      e8:	a8 21       	and	r26, r8
      ea:	b3 21       	and	r27, r3
      ec:	bc 21       	and	r27, r12
      ee:	c7 21       	and	r28, r7
      f0:	dd 21       	and	r29, r13
      f2:	e6 21       	and	r30, r6
      f4:	e1 22       	and	r14, r17
      f6:	88 22       	and	r8, r24
      f8:	14 22       	and	r1, r20
      fa:	2d 22       	and	r2, r29
      fc:	46 22       	and	r4, r22
      fe:	67 22       	and	r6, r23
     100:	ab 22       	and	r10, r27
     102:	c0 22       	and	r12, r16
     104:	62 2b       	or	r22, r18
     106:	65 2b       	or	r22, r21
     108:	65 2b       	or	r22, r21
     10a:	65 2b       	or	r22, r21
     10c:	65 2b       	or	r22, r21
     10e:	65 2b       	or	r22, r21
     110:	65 2b       	or	r22, r21
     112:	65 2b       	or	r22, r21
     114:	7c 2a       	or	r7, r28
     116:	65 2b       	or	r22, r21
     118:	65 2b       	or	r22, r21
     11a:	65 2b       	or	r22, r21
     11c:	65 2b       	or	r22, r21
     11e:	65 2b       	or	r22, r21
     120:	65 2b       	or	r22, r21
     122:	65 2b       	or	r22, r21
     124:	7c 2a       	or	r7, r28
     126:	65 2b       	or	r22, r21
     128:	65 2b       	or	r22, r21
     12a:	65 2b       	or	r22, r21
     12c:	65 2b       	or	r22, r21
     12e:	65 2b       	or	r22, r21
     130:	65 2b       	or	r22, r21
     132:	65 2b       	or	r22, r21
     134:	84 2a       	or	r8, r20
     136:	65 2b       	or	r22, r21
     138:	65 2b       	or	r22, r21
     13a:	65 2b       	or	r22, r21
     13c:	65 2b       	or	r22, r21
     13e:	65 2b       	or	r22, r21
     140:	65 2b       	or	r22, r21
     142:	65 2b       	or	r22, r21
     144:	a9 2a       	or	r10, r25
     146:	65 2b       	or	r22, r21
     148:	65 2b       	or	r22, r21
     14a:	65 2b       	or	r22, r21
     14c:	65 2b       	or	r22, r21
     14e:	65 2b       	or	r22, r21
     150:	65 2b       	or	r22, r21
     152:	65 2b       	or	r22, r21
     154:	84 2a       	or	r8, r20
     156:	65 2b       	or	r22, r21
     158:	65 2b       	or	r22, r21
     15a:	65 2b       	or	r22, r21
     15c:	65 2b       	or	r22, r21
     15e:	65 2b       	or	r22, r21
     160:	65 2b       	or	r22, r21
     162:	65 2b       	or	r22, r21
     164:	ae 2a       	or	r10, r30
     166:	65 2b       	or	r22, r21
     168:	65 2b       	or	r22, r21
     16a:	65 2b       	or	r22, r21
     16c:	65 2b       	or	r22, r21
     16e:	65 2b       	or	r22, r21
     170:	65 2b       	or	r22, r21
     172:	65 2b       	or	r22, r21
     174:	b3 2a       	or	r11, r19
     176:	65 2b       	or	r22, r21
     178:	65 2b       	or	r22, r21
     17a:	65 2b       	or	r22, r21
     17c:	65 2b       	or	r22, r21
     17e:	65 2b       	or	r22, r21
     180:	65 2b       	or	r22, r21
     182:	65 2b       	or	r22, r21
     184:	c4 2a       	or	r12, r20
     186:	65 2b       	or	r22, r21
     188:	65 2b       	or	r22, r21
     18a:	65 2b       	or	r22, r21
     18c:	65 2b       	or	r22, r21
     18e:	65 2b       	or	r22, r21
     190:	65 2b       	or	r22, r21
     192:	65 2b       	or	r22, r21
     194:	ed 2a       	or	r14, r29
     196:	65 2b       	or	r22, r21
     198:	65 2b       	or	r22, r21
     19a:	65 2b       	or	r22, r21
     19c:	65 2b       	or	r22, r21
     19e:	65 2b       	or	r22, r21
     1a0:	65 2b       	or	r22, r21
     1a2:	65 2b       	or	r22, r21
     1a4:	b8 2a       	or	r11, r24
     1a6:	65 2b       	or	r22, r21
     1a8:	65 2b       	or	r22, r21
     1aa:	65 2b       	or	r22, r21
     1ac:	65 2b       	or	r22, r21
     1ae:	65 2b       	or	r22, r21
     1b0:	65 2b       	or	r22, r21
     1b2:	65 2b       	or	r22, r21
     1b4:	d2 2a       	or	r13, r18
     1b6:	65 2b       	or	r22, r21
     1b8:	65 2b       	or	r22, r21
     1ba:	65 2b       	or	r22, r21
     1bc:	65 2b       	or	r22, r21
     1be:	65 2b       	or	r22, r21
     1c0:	65 2b       	or	r22, r21
     1c2:	65 2b       	or	r22, r21
     1c4:	ef 2a       	or	r14, r31
     1c6:	65 2b       	or	r22, r21
     1c8:	65 2b       	or	r22, r21
     1ca:	65 2b       	or	r22, r21
     1cc:	65 2b       	or	r22, r21
     1ce:	65 2b       	or	r22, r21
     1d0:	65 2b       	or	r22, r21
     1d2:	65 2b       	or	r22, r21
     1d4:	ef 2a       	or	r14, r31
     1d6:	65 2b       	or	r22, r21
     1d8:	65 2b       	or	r22, r21
     1da:	65 2b       	or	r22, r21
     1dc:	65 2b       	or	r22, r21
     1de:	65 2b       	or	r22, r21
     1e0:	65 2b       	or	r22, r21
     1e2:	65 2b       	or	r22, r21
     1e4:	ef 2a       	or	r14, r31
     1e6:	65 2b       	or	r22, r21
     1e8:	65 2b       	or	r22, r21
     1ea:	65 2b       	or	r22, r21
     1ec:	65 2b       	or	r22, r21
     1ee:	65 2b       	or	r22, r21
     1f0:	65 2b       	or	r22, r21
     1f2:	65 2b       	or	r22, r21
     1f4:	ef 2a       	or	r14, r31
     1f6:	65 2b       	or	r22, r21
     1f8:	65 2b       	or	r22, r21
     1fa:	65 2b       	or	r22, r21
     1fc:	65 2b       	or	r22, r21
     1fe:	65 2b       	or	r22, r21
     200:	65 2b       	or	r22, r21
     202:	65 2b       	or	r22, r21
     204:	f8 2a       	or	r15, r24
     206:	65 2b       	or	r22, r21
     208:	65 2b       	or	r22, r21
     20a:	65 2b       	or	r22, r21
     20c:	65 2b       	or	r22, r21
     20e:	65 2b       	or	r22, r21
     210:	65 2b       	or	r22, r21
     212:	65 2b       	or	r22, r21
     214:	29 2b       	or	r18, r25
     216:	65 2b       	or	r22, r21
     218:	65 2b       	or	r22, r21
     21a:	65 2b       	or	r22, r21
     21c:	65 2b       	or	r22, r21
     21e:	65 2b       	or	r22, r21
     220:	65 2b       	or	r22, r21
     222:	65 2b       	or	r22, r21
     224:	f8 2a       	or	r15, r24
     226:	65 2b       	or	r22, r21
     228:	65 2b       	or	r22, r21
     22a:	65 2b       	or	r22, r21
     22c:	65 2b       	or	r22, r21
     22e:	65 2b       	or	r22, r21
     230:	65 2b       	or	r22, r21
     232:	65 2b       	or	r22, r21
     234:	29 2b       	or	r18, r25
     236:	65 2b       	or	r22, r21
     238:	65 2b       	or	r22, r21
     23a:	65 2b       	or	r22, r21
     23c:	65 2b       	or	r22, r21
     23e:	65 2b       	or	r22, r21
     240:	65 2b       	or	r22, r21
     242:	65 2b       	or	r22, r21
     244:	10 2b       	or	r17, r16
     246:	65 2b       	or	r22, r21
     248:	65 2b       	or	r22, r21
     24a:	65 2b       	or	r22, r21
     24c:	65 2b       	or	r22, r21
     24e:	65 2b       	or	r22, r21
     250:	65 2b       	or	r22, r21
     252:	65 2b       	or	r22, r21
     254:	2d 2b       	or	r18, r29
     256:	65 2b       	or	r22, r21
     258:	65 2b       	or	r22, r21
     25a:	65 2b       	or	r22, r21
     25c:	65 2b       	or	r22, r21
     25e:	65 2b       	or	r22, r21
     260:	65 2b       	or	r22, r21
     262:	65 2b       	or	r22, r21
     264:	2d 2b       	or	r18, r29
     266:	65 2b       	or	r22, r21
     268:	65 2b       	or	r22, r21
     26a:	65 2b       	or	r22, r21
     26c:	65 2b       	or	r22, r21
     26e:	65 2b       	or	r22, r21
     270:	65 2b       	or	r22, r21
     272:	65 2b       	or	r22, r21
     274:	42 2b       	or	r20, r18
     276:	65 2b       	or	r22, r21
     278:	65 2b       	or	r22, r21
     27a:	65 2b       	or	r22, r21
     27c:	65 2b       	or	r22, r21
     27e:	65 2b       	or	r22, r21
     280:	65 2b       	or	r22, r21
     282:	65 2b       	or	r22, r21
     284:	5c 2b       	or	r21, r28
     286:	65 2b       	or	r22, r21
     288:	65 2b       	or	r22, r21
     28a:	65 2b       	or	r22, r21
     28c:	65 2b       	or	r22, r21
     28e:	65 2b       	or	r22, r21
     290:	65 2b       	or	r22, r21
     292:	65 2b       	or	r22, r21
     294:	5c 2b       	or	r21, r28
     296:	f9 36       	cpi	r31, 0x69	; 105
     298:	fd 36       	cpi	r31, 0x6D	; 109
     29a:	e7 36       	cpi	r30, 0x67	; 103
     29c:	ed 36       	cpi	r30, 0x6D	; 109
     29e:	f3 36       	cpi	r31, 0x63	; 99
     2a0:	42 37       	cpi	r20, 0x72	; 114
     2a2:	01 37       	cpi	r16, 0x71	; 113
     2a4:	07 37       	cpi	r16, 0x77	; 119
     2a6:	0d 37       	cpi	r16, 0x7D	; 125
     2a8:	13 37       	cpi	r17, 0x73	; 115
     2aa:	19 37       	cpi	r17, 0x79	; 121
     2ac:	1f 37       	cpi	r17, 0x7F	; 127
     2ae:	25 37       	cpi	r18, 0x75	; 117
     2b0:	2b 37       	cpi	r18, 0x7B	; 123
     2b2:	42 37       	cpi	r20, 0x72	; 114
     2b4:	31 37       	cpi	r19, 0x71	; 113
     2b6:	37 37       	cpi	r19, 0x77	; 119
     2b8:	3d 37       	cpi	r19, 0x7D	; 125

000002ba <__trampolines_end>:
     2ba:	02 00       	.word	0x0002	; ????

000002bb <digital_pin_to_timer_PGM>:
     2bb:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
     2e7:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000301 <digital_pin_to_bit_mask_PGM>:
     301:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     311:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     321:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     331:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     341:	04 08 10 20 40 80                                   ... @.

00000347 <digital_pin_to_port_PGM>:
     347:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     357:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     367:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     377:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     387:	0b 0b 0b 0b 0b 0b                                   ......

0000038d <port_to_input_PGM>:
     38d:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     39d:	00 01 00 00 03 01 06 01 09 01                       ..........

000003a7 <port_to_output_PGM>:
     3a7:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     3b7:	02 01 00 00 05 01 08 01 0b 01                       ..........

000003c1 <port_to_mode_PGM>:
     3c1:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     3d1:	01 01 00 00 04 01 07 01 0a 01 00                    ...........

000003dc <__ctors_start>:
     3dc:	e0 02       	muls	r30, r16
     3de:	eb 05       	cpc	r30, r11
     3e0:	79 0c       	add	r7, r9
     3e2:	ad 0d       	add	r26, r13
     3e4:	4b 2c       	mov	r4, r11
     3e6:	04 2d       	mov	r16, r4
     3e8:	e2 2e       	mov	r14, r18
     3ea:	7d 2f       	mov	r23, r29
     3ec:	18 30       	cpi	r17, 0x08	; 8
     3ee:	b3 30       	cpi	r27, 0x03	; 3
     3f0:	20 31       	cpi	r18, 0x10	; 16

000003f2 <__ctors_end>:
     3f2:	11 24       	eor	r1, r1
     3f4:	1f be       	out	0x3f, r1	; 63
     3f6:	cf ef       	ldi	r28, 0xFF	; 255
     3f8:	d1 e2       	ldi	r29, 0x21	; 33
     3fa:	de bf       	out	0x3e, r29	; 62
     3fc:	cd bf       	out	0x3d, r28	; 61
     3fe:	00 e0       	ldi	r16, 0x00	; 0
     400:	0c bf       	out	0x3c, r16	; 60

00000402 <__do_copy_data>:
     402:	14 e0       	ldi	r17, 0x04	; 4
     404:	a0 e0       	ldi	r26, 0x00	; 0
     406:	b2 e0       	ldi	r27, 0x02	; 2
     408:	e8 e6       	ldi	r30, 0x68	; 104
     40a:	fb e7       	ldi	r31, 0x7B	; 123
     40c:	00 e0       	ldi	r16, 0x00	; 0
     40e:	0b bf       	out	0x3b, r16	; 59
     410:	02 c0       	rjmp	.+4      	; 0x416 <__do_copy_data+0x14>
     412:	07 90       	elpm	r0, Z+
     414:	0d 92       	st	X+, r0
     416:	ac 3f       	cpi	r26, 0xFC	; 252
     418:	b1 07       	cpc	r27, r17
     41a:	d9 f7       	brne	.-10     	; 0x412 <__do_copy_data+0x10>

0000041c <__do_clear_bss>:
     41c:	28 e0       	ldi	r18, 0x08	; 8
     41e:	ac ef       	ldi	r26, 0xFC	; 252
     420:	b4 e0       	ldi	r27, 0x04	; 4
     422:	01 c0       	rjmp	.+2      	; 0x426 <.do_clear_bss_start>

00000424 <.do_clear_bss_loop>:
     424:	1d 92       	st	X+, r1

00000426 <.do_clear_bss_start>:
     426:	a0 3e       	cpi	r26, 0xE0	; 224
     428:	b2 07       	cpc	r27, r18
     42a:	e1 f7       	brne	.-8      	; 0x424 <.do_clear_bss_loop>

0000042c <__do_global_ctors>:
     42c:	11 e0       	ldi	r17, 0x01	; 1
     42e:	c9 ef       	ldi	r28, 0xF9	; 249
     430:	d1 e0       	ldi	r29, 0x01	; 1
     432:	00 e0       	ldi	r16, 0x00	; 0
     434:	06 c0       	rjmp	.+12     	; 0x442 <__do_global_ctors+0x16>
     436:	21 97       	sbiw	r28, 0x01	; 1
     438:	01 09       	sbc	r16, r1
     43a:	80 2f       	mov	r24, r16
     43c:	fe 01       	movw	r30, r28
     43e:	0e 94 68 3b 	call	0x76d0	; 0x76d0 <__tablejump2__>
     442:	ce 3e       	cpi	r28, 0xEE	; 238
     444:	d1 07       	cpc	r29, r17
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	08 07       	cpc	r16, r24
     44a:	a9 f7       	brne	.-22     	; 0x436 <__do_global_ctors+0xa>
     44c:	0e 94 2c 31 	call	0x6258	; 0x6258 <main>
     450:	0c 94 b2 3d 	jmp	0x7b64	; 0x7b64 <_exit>

00000454 <__bad_interrupt>:
     454:	d5 cd       	rjmp	.-1110   	; 0x0 <__vectors>

00000456 <_ZN5DigIO5ValueEv>:
}
	
DigIO::DigIO(int _Pin, DigIO::PinModes _Mode){
	Pin = _Pin;
	Mode = _Mode;
}
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
     45a:	ec 01       	movw	r28, r24
     45c:	8a 81       	ldd	r24, Y+2	; 0x02
     45e:	88 23       	and	r24, r24
     460:	19 f0       	breq	.+6      	; 0x468 <_ZN5DigIO5ValueEv+0x12>
     462:	82 30       	cpi	r24, 0x02	; 2
     464:	39 f0       	breq	.+14     	; 0x474 <_ZN5DigIO5ValueEv+0x1e>
     466:	0b c0       	rjmp	.+22     	; 0x47e <_ZN5DigIO5ValueEv+0x28>
     468:	88 81       	ld	r24, Y
     46a:	0e 94 b2 37 	call	0x6f64	; 0x6f64 <digitalRead>
     46e:	98 8b       	std	Y+16, r25	; 0x10
     470:	8f 87       	std	Y+15, r24	; 0x0f
     472:	05 c0       	rjmp	.+10     	; 0x47e <_ZN5DigIO5ValueEv+0x28>
     474:	88 81       	ld	r24, Y
     476:	0e 94 b2 37 	call	0x6f64	; 0x6f64 <digitalRead>
     47a:	98 8b       	std	Y+16, r25	; 0x10
     47c:	8f 87       	std	Y+15, r24	; 0x0f
     47e:	8f 85       	ldd	r24, Y+15	; 0x0f
     480:	98 89       	ldd	r25, Y+16	; 0x10
     482:	df 91       	pop	r29
     484:	cf 91       	pop	r28
     486:	08 95       	ret

00000488 <_ZN5DigIO5WriteEi>:
     488:	0f 93       	push	r16
     48a:	1f 93       	push	r17
     48c:	cf 93       	push	r28
     48e:	df 93       	push	r29
     490:	ec 01       	movw	r28, r24
     492:	16 2f       	mov	r17, r22
     494:	07 2f       	mov	r16, r23
     496:	8a 81       	ldd	r24, Y+2	; 0x02
     498:	81 30       	cpi	r24, 0x01	; 1
     49a:	21 f0       	breq	.+8      	; 0x4a4 <_ZN5DigIO5WriteEi+0x1c>
     49c:	61 e0       	ldi	r22, 0x01	; 1
     49e:	88 81       	ld	r24, Y
     4a0:	0e 94 43 37 	call	0x6e86	; 0x6e86 <pinMode>
     4a4:	1f 87       	std	Y+15, r17	; 0x0f
     4a6:	08 8b       	std	Y+16, r16	; 0x10
     4a8:	61 2f       	mov	r22, r17
     4aa:	88 81       	ld	r24, Y
     4ac:	0e 94 82 37 	call	0x6f04	; 0x6f04 <digitalWrite>
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	1f 91       	pop	r17
     4b6:	0f 91       	pop	r16
     4b8:	08 95       	ret

000004ba <_ZN5DigIOC1EiNS_8PinModesE6StringS1_>:

DigIO::DigIO(int _Pin, DigIO::PinModes _Mode, String _TrueLabel, String _FalseLabel){
     4ba:	7f 92       	push	r7
     4bc:	8f 92       	push	r8
     4be:	9f 92       	push	r9
     4c0:	af 92       	push	r10
     4c2:	bf 92       	push	r11
     4c4:	cf 92       	push	r12
     4c6:	df 92       	push	r13
     4c8:	ef 92       	push	r14
     4ca:	ff 92       	push	r15
     4cc:	0f 93       	push	r16
     4ce:	1f 93       	push	r17
     4d0:	cf 93       	push	r28
     4d2:	df 93       	push	r29
     4d4:	ec 01       	movw	r28, r24
     4d6:	5b 01       	movw	r10, r22
     4d8:	74 2e       	mov	r7, r20
     4da:	69 01       	movw	r12, r18
     4dc:	48 01       	movw	r8, r16
     4de:	8f ef       	ldi	r24, 0xFF	; 255
     4e0:	9f ef       	ldi	r25, 0xFF	; 255
     4e2:	99 83       	std	Y+1, r25	; 0x01
     4e4:	88 83       	st	Y, r24
     4e6:	1a 82       	std	Y+2, r1	; 0x02
     4e8:	7e 01       	movw	r14, r28
     4ea:	83 e0       	ldi	r24, 0x03	; 3
     4ec:	e8 0e       	add	r14, r24
     4ee:	f1 1c       	adc	r15, r1
     4f0:	68 e0       	ldi	r22, 0x08	; 8
     4f2:	72 e0       	ldi	r23, 0x02	; 2
     4f4:	c7 01       	movw	r24, r14
     4f6:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
     4fa:	8e 01       	movw	r16, r28
     4fc:	07 5f       	subi	r16, 0xF7	; 247
     4fe:	1f 4f       	sbci	r17, 0xFF	; 255
     500:	6d e0       	ldi	r22, 0x0D	; 13
     502:	72 e0       	ldi	r23, 0x02	; 2
     504:	c8 01       	movw	r24, r16
     506:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
	Pin = _Pin;
     50a:	b9 82       	std	Y+1, r11	; 0x01
     50c:	a8 82       	st	Y, r10
	Mode = _Mode;
     50e:	7a 82       	std	Y+2, r7	; 0x02
	TrueLabel = _TrueLabel;
     510:	b6 01       	movw	r22, r12
     512:	c7 01       	movw	r24, r14
     514:	0e 94 5a 38 	call	0x70b4	; 0x70b4 <_ZN6StringaSERKS_>
	FalseLabel = _FalseLabel;
     518:	b4 01       	movw	r22, r8
     51a:	c8 01       	movw	r24, r16
     51c:	0e 94 5a 38 	call	0x70b4	; 0x70b4 <_ZN6StringaSERKS_>
}
     520:	df 91       	pop	r29
     522:	cf 91       	pop	r28
     524:	1f 91       	pop	r17
     526:	0f 91       	pop	r16
     528:	ff 90       	pop	r15
     52a:	ef 90       	pop	r14
     52c:	df 90       	pop	r13
     52e:	cf 90       	pop	r12
     530:	bf 90       	pop	r11
     532:	af 90       	pop	r10
     534:	9f 90       	pop	r9
     536:	8f 90       	pop	r8
     538:	7f 90       	pop	r7
     53a:	08 95       	ret

0000053c <_Z15serviceEncodersv>:

/**************************
*	Functions
**************************/
void serviceEncoders(){
	MAIN_ENC->service();
     53c:	80 91 4c 05 	lds	r24, 0x054C
     540:	90 91 4d 05 	lds	r25, 0x054D
     544:	0e 94 e7 25 	call	0x4bce	; 0x4bce <_ZN12ClickEncoder7serviceEv>
	HLT_ENC->service();
     548:	80 91 32 05 	lds	r24, 0x0532
     54c:	90 91 33 05 	lds	r25, 0x0533
     550:	0e 94 e7 25 	call	0x4bce	; 0x4bce <_ZN12ClickEncoder7serviceEv>
	MLT_ENC->service();
     554:	80 91 18 05 	lds	r24, 0x0518
     558:	90 91 19 05 	lds	r25, 0x0519
     55c:	0e 94 e7 25 	call	0x4bce	; 0x4bce <_ZN12ClickEncoder7serviceEv>
	BK_ENC->service();
     560:	80 91 fe 04 	lds	r24, 0x04FE
     564:	90 91 ff 04 	lds	r25, 0x04FF
     568:	0c 94 e7 25 	jmp	0x4bce	; 0x4bce <_ZN12ClickEncoder7serviceEv>
     56c:	08 95       	ret

0000056e <_ZN22ClickEncoderWithEventsC1Ehhhh>:
		int16_t t_value = 0;

	//functions
	public:
		ClickEncoderWithEvents(uint8_t A, uint8_t B, uint8_t SW) : ClickEncoder(A, B, SW ) {};
		ClickEncoderWithEvents(uint8_t A, uint8_t B, uint8_t SW, uint8_t DEGPERNOTCH) : ClickEncoder(A, B, SW, DEGPERNOTCH) {};
     56e:	ef 92       	push	r14
     570:	0f 93       	push	r16
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
     576:	ec 01       	movw	r28, r24
     578:	e1 2c       	mov	r14, r1
     57a:	0e 94 a1 25 	call	0x4b42	; 0x4b42 <_ZN12ClickEncoderC1Ehhhhb>
     57e:	19 8a       	std	Y+17, r1	; 0x11
     580:	18 8a       	std	Y+16, r1	; 0x10
     582:	1b 8a       	std	Y+19, r1	; 0x13
     584:	1a 8a       	std	Y+18, r1	; 0x12
     586:	1d 8a       	std	Y+21, r1	; 0x15
     588:	1c 8a       	std	Y+20, r1	; 0x14
     58a:	1f 8a       	std	Y+23, r1	; 0x17
     58c:	1e 8a       	std	Y+22, r1	; 0x16
     58e:	19 8e       	std	Y+25, r1	; 0x19
     590:	18 8e       	std	Y+24, r1	; 0x18
     592:	1b 8e       	std	Y+27, r1	; 0x1b
     594:	1a 8e       	std	Y+26, r1	; 0x1a
     596:	1d 8e       	std	Y+29, r1	; 0x1d
     598:	1c 8e       	std	Y+28, r1	; 0x1c
     59a:	1f 8e       	std	Y+31, r1	; 0x1f
     59c:	1e 8e       	std	Y+30, r1	; 0x1e
     59e:	18 a2       	std	Y+32, r1	; 0x20
     5a0:	19 a2       	std	Y+33, r1	; 0x21
     5a2:	1a a2       	std	Y+34, r1	; 0x22
     5a4:	1b a2       	std	Y+35, r1	; 0x23
     5a6:	1c a2       	std	Y+36, r1	; 0x24
     5a8:	1d a2       	std	Y+37, r1	; 0x25
     5aa:	1e a2       	std	Y+38, r1	; 0x26
     5ac:	1f a2       	std	Y+39, r1	; 0x27
     5ae:	19 a6       	std	Y+41, r1	; 0x29
     5b0:	18 a6       	std	Y+40, r1	; 0x28
     5b2:	1b a6       	std	Y+43, r1	; 0x2b
     5b4:	1a a6       	std	Y+42, r1	; 0x2a
     5b6:	df 91       	pop	r29
     5b8:	cf 91       	pop	r28
     5ba:	0f 91       	pop	r16
     5bc:	ef 90       	pop	r14
     5be:	08 95       	ret

000005c0 <_GLOBAL__sub_I__Z15serviceEncodersv>:
/**************************
*	Boil Kettle
**************************/
LiquidCrystal_I2C BK_LCD( BK_LCD_I2C_ADDR, En_pin, Rw_pin, Rs_pin, D4_pin, D5_pin, D6_pin, D7_pin);
ClickEncoderWithEvents *BK_ENC = new ClickEncoderWithEvents( BK_ENC_A, BK_ENC_B, BK_ENC_SW, BK_ENC_DEG_PER_NOTCH );
     5c0:	8f 92       	push	r8
     5c2:	af 92       	push	r10
     5c4:	cf 92       	push	r12
     5c6:	ef 92       	push	r14
     5c8:	ff 92       	push	r15
     5ca:	0f 93       	push	r16
     5cc:	1f 93       	push	r17
     5ce:	cf 93       	push	r28
     5d0:	df 93       	push	r29
     5d2:	cd b7       	in	r28, 0x3d	; 61
     5d4:	de b7       	in	r29, 0x3e	; 62
     5d6:	6e 97       	sbiw	r28, 0x1e	; 30
     5d8:	0f b6       	in	r0, 0x3f	; 63
     5da:	f8 94       	cli
     5dc:	de bf       	out	0x3e, r29	; 62
     5de:	0f be       	out	0x3f, r0	; 63
     5e0:	cd bf       	out	0x3d, r28	; 61
}

/**************************
*	Alarms
**************************/
DigIO * TimerAlarmDIO = new DigIO(TIMER_ALARM_PIN,DigIO::OUT, "ON", "OFF");
     5e2:	63 e1       	ldi	r22, 0x13	; 19
     5e4:	72 e0       	ldi	r23, 0x02	; 2
     5e6:	ce 01       	movw	r24, r28
     5e8:	01 96       	adiw	r24, 0x01	; 1
     5ea:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
     5ee:	66 e1       	ldi	r22, 0x16	; 22
     5f0:	72 e0       	ldi	r23, 0x02	; 2
     5f2:	ce 01       	movw	r24, r28
     5f4:	07 96       	adiw	r24, 0x07	; 7
     5f6:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
     5fa:	81 e1       	ldi	r24, 0x11	; 17
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	0e 94 36 31 	call	0x626c	; 0x626c <_Znwj>
     602:	7c 01       	movw	r14, r24
     604:	8e 01       	movw	r16, r28
     606:	09 5f       	subi	r16, 0xF9	; 249
     608:	1f 4f       	sbci	r17, 0xFF	; 255
     60a:	9e 01       	movw	r18, r28
     60c:	2f 5f       	subi	r18, 0xFF	; 255
     60e:	3f 4f       	sbci	r19, 0xFF	; 255
     610:	41 e0       	ldi	r20, 0x01	; 1
     612:	61 e3       	ldi	r22, 0x31	; 49
     614:	70 e0       	ldi	r23, 0x00	; 0
     616:	51 df       	rcall	.-350    	; 0x4ba <_ZN5DigIOC1EiNS_8PinModesE6StringS1_>
     618:	f0 92 69 05 	sts	0x0569, r15
     61c:	e0 92 68 05 	sts	0x0568, r14
     620:	c8 01       	movw	r24, r16
     622:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <_ZN6StringD1Ev>
     626:	ce 01       	movw	r24, r28
     628:	01 96       	adiw	r24, 0x01	; 1
     62a:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <_ZN6StringD1Ev>
DigIO * TempAlarmDIO = new DigIO(TEMP_ALARM_PIN,DigIO::OUT, "ON", "OFF");
     62e:	63 e1       	ldi	r22, 0x13	; 19
     630:	72 e0       	ldi	r23, 0x02	; 2
     632:	ce 01       	movw	r24, r28
     634:	0d 96       	adiw	r24, 0x0d	; 13
     636:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
     63a:	66 e1       	ldi	r22, 0x16	; 22
     63c:	72 e0       	ldi	r23, 0x02	; 2
     63e:	ce 01       	movw	r24, r28
     640:	43 96       	adiw	r24, 0x13	; 19
     642:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
     646:	81 e1       	ldi	r24, 0x11	; 17
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	0e 94 36 31 	call	0x626c	; 0x626c <_Znwj>
     64e:	7c 01       	movw	r14, r24
     650:	04 5f       	subi	r16, 0xF4	; 244
     652:	1f 4f       	sbci	r17, 0xFF	; 255
     654:	9e 01       	movw	r18, r28
     656:	23 5f       	subi	r18, 0xF3	; 243
     658:	3f 4f       	sbci	r19, 0xFF	; 255
     65a:	41 e0       	ldi	r20, 0x01	; 1
     65c:	60 e3       	ldi	r22, 0x30	; 48
     65e:	70 e0       	ldi	r23, 0x00	; 0
     660:	2c df       	rcall	.-424    	; 0x4ba <_ZN5DigIOC1EiNS_8PinModesE6StringS1_>
     662:	f0 92 67 05 	sts	0x0567, r15
     666:	e0 92 66 05 	sts	0x0566, r14
     66a:	c8 01       	movw	r24, r16
     66c:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <_ZN6StringD1Ev>
     670:	ce 01       	movw	r24, r28
     672:	0d 96       	adiw	r24, 0x0d	; 13
     674:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <_ZN6StringD1Ev>

/**************************
*	Main Screen
**************************/
LiquidCrystal_I2C MAIN_LCD( MAIN_LCD_I2C_ADDR, En_pin, Rw_pin, Rs_pin, D4_pin, D5_pin, D6_pin, D7_pin);
     678:	0f 2e       	mov	r0, r31
     67a:	f7 e0       	ldi	r31, 0x07	; 7
     67c:	8f 2e       	mov	r8, r31
     67e:	f0 2d       	mov	r31, r0
     680:	0f 2e       	mov	r0, r31
     682:	f6 e0       	ldi	r31, 0x06	; 6
     684:	af 2e       	mov	r10, r31
     686:	f0 2d       	mov	r31, r0
     688:	0f 2e       	mov	r0, r31
     68a:	f5 e0       	ldi	r31, 0x05	; 5
     68c:	cf 2e       	mov	r12, r31
     68e:	f0 2d       	mov	r31, r0
     690:	68 94       	set
     692:	ee 24       	eor	r14, r14
     694:	e2 f8       	bld	r14, 2
     696:	00 e0       	ldi	r16, 0x00	; 0
     698:	21 e0       	ldi	r18, 0x01	; 1
     69a:	42 e0       	ldi	r20, 0x02	; 2
     69c:	67 e2       	ldi	r22, 0x27	; 39
     69e:	8e e4       	ldi	r24, 0x4E	; 78
     6a0:	95 e0       	ldi	r25, 0x05	; 5
     6a2:	0e 94 54 28 	call	0x50a8	; 0x50a8 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh>
ClickEncoderWithEvents *MAIN_ENC = new ClickEncoderWithEvents( MAIN_ENC_A, MAIN_ENC_B, MAIN_ENC_SW, MAIN_ENC_DEG_PER_NOTCH );
     6a6:	8c e2       	ldi	r24, 0x2C	; 44
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	0e 94 36 31 	call	0x626c	; 0x626c <_Znwj>
     6ae:	7c 01       	movw	r14, r24
     6b0:	04 e0       	ldi	r16, 0x04	; 4
     6b2:	28 e1       	ldi	r18, 0x18	; 24
     6b4:	47 e1       	ldi	r20, 0x17	; 23
     6b6:	66 e1       	ldi	r22, 0x16	; 22
     6b8:	5a df       	rcall	.-332    	; 0x56e <_ZN22ClickEncoderWithEventsC1Ehhhh>
     6ba:	f0 92 4d 05 	sts	0x054D, r15
     6be:	e0 92 4c 05 	sts	0x054C, r14

/**************************
*	Hot Liquor Tank
**************************/
LiquidCrystal_I2C HLT_LCD( HLT_LCD_I2C_ADDR, En_pin, Rw_pin, Rs_pin, D4_pin, D5_pin, D6_pin, D7_pin);
     6c2:	68 94       	set
     6c4:	ee 24       	eor	r14, r14
     6c6:	e2 f8       	bld	r14, 2
     6c8:	00 e0       	ldi	r16, 0x00	; 0
     6ca:	21 e0       	ldi	r18, 0x01	; 1
     6cc:	42 e0       	ldi	r20, 0x02	; 2
     6ce:	66 e2       	ldi	r22, 0x26	; 38
     6d0:	84 e3       	ldi	r24, 0x34	; 52
     6d2:	95 e0       	ldi	r25, 0x05	; 5
     6d4:	0e 94 54 28 	call	0x50a8	; 0x50a8 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh>
ClickEncoderWithEvents *HLT_ENC = new ClickEncoderWithEvents( HLT_ENC_A, HLT_ENC_B, HLT_ENC_SW, HLT_ENC_DEG_PER_NOTCH );
     6d8:	8c e2       	ldi	r24, 0x2C	; 44
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	0e 94 36 31 	call	0x626c	; 0x626c <_Znwj>
     6e0:	7c 01       	movw	r14, r24
     6e2:	04 e0       	ldi	r16, 0x04	; 4
     6e4:	21 e2       	ldi	r18, 0x21	; 33
     6e6:	40 e2       	ldi	r20, 0x20	; 32
     6e8:	6f e1       	ldi	r22, 0x1F	; 31
     6ea:	41 df       	rcall	.-382    	; 0x56e <_ZN22ClickEncoderWithEventsC1Ehhhh>
     6ec:	f0 92 33 05 	sts	0x0533, r15
     6f0:	e0 92 32 05 	sts	0x0532, r14

/**************************
*	Mash Lauter Tun
**************************/
LiquidCrystal_I2C MLT_LCD( MLT_LCD_I2C_ADDR, En_pin, Rw_pin, Rs_pin, D4_pin, D5_pin, D6_pin, D7_pin);
     6f4:	68 94       	set
     6f6:	ee 24       	eor	r14, r14
     6f8:	e2 f8       	bld	r14, 2
     6fa:	00 e0       	ldi	r16, 0x00	; 0
     6fc:	21 e0       	ldi	r18, 0x01	; 1
     6fe:	42 e0       	ldi	r20, 0x02	; 2
     700:	65 e2       	ldi	r22, 0x25	; 37
     702:	8a e1       	ldi	r24, 0x1A	; 26
     704:	95 e0       	ldi	r25, 0x05	; 5
     706:	0e 94 54 28 	call	0x50a8	; 0x50a8 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh>
ClickEncoderWithEvents *MLT_ENC = new ClickEncoderWithEvents( MLT_ENC_A, MLT_ENC_B, MLT_ENC_SW, MLT_ENC_DEG_PER_NOTCH );
     70a:	8c e2       	ldi	r24, 0x2C	; 44
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	0e 94 36 31 	call	0x626c	; 0x626c <_Znwj>
     712:	7c 01       	movw	r14, r24
     714:	04 e0       	ldi	r16, 0x04	; 4
     716:	2b e1       	ldi	r18, 0x1B	; 27
     718:	4a e1       	ldi	r20, 0x1A	; 26
     71a:	69 e1       	ldi	r22, 0x19	; 25
     71c:	28 df       	rcall	.-432    	; 0x56e <_ZN22ClickEncoderWithEventsC1Ehhhh>
     71e:	f0 92 19 05 	sts	0x0519, r15
     722:	e0 92 18 05 	sts	0x0518, r14

/**************************
*	Boil Kettle
**************************/
LiquidCrystal_I2C BK_LCD( BK_LCD_I2C_ADDR, En_pin, Rw_pin, Rs_pin, D4_pin, D5_pin, D6_pin, D7_pin);
     726:	68 94       	set
     728:	ee 24       	eor	r14, r14
     72a:	e2 f8       	bld	r14, 2
     72c:	00 e0       	ldi	r16, 0x00	; 0
     72e:	21 e0       	ldi	r18, 0x01	; 1
     730:	42 e0       	ldi	r20, 0x02	; 2
     732:	63 e2       	ldi	r22, 0x23	; 35
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	95 e0       	ldi	r25, 0x05	; 5
     738:	0e 94 54 28 	call	0x50a8	; 0x50a8 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh>
ClickEncoderWithEvents *BK_ENC = new ClickEncoderWithEvents( BK_ENC_A, BK_ENC_B, BK_ENC_SW, BK_ENC_DEG_PER_NOTCH );
     73c:	8c e2       	ldi	r24, 0x2C	; 44
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	0e 94 36 31 	call	0x626c	; 0x626c <_Znwj>
     744:	7c 01       	movw	r14, r24
     746:	04 e0       	ldi	r16, 0x04	; 4
     748:	2e e1       	ldi	r18, 0x1E	; 30
     74a:	4d e1       	ldi	r20, 0x1D	; 29
     74c:	6c e1       	ldi	r22, 0x1C	; 28
     74e:	0f df       	rcall	.-482    	; 0x56e <_ZN22ClickEncoderWithEventsC1Ehhhh>
     750:	f0 92 ff 04 	sts	0x04FF, r15
     754:	e0 92 fe 04 	sts	0x04FE, r14
     758:	6a e1       	ldi	r22, 0x1A	; 26
     75a:	72 e0       	ldi	r23, 0x02	; 2
     75c:	ce 01       	movw	r24, r28
     75e:	49 96       	adiw	r24, 0x19	; 25
     760:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
     764:	86 e1       	ldi	r24, 0x16	; 22
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	0e 94 36 31 	call	0x626c	; 0x626c <_Znwj>
     76c:	8c 01       	movw	r16, r24
     76e:	be 01       	movw	r22, r28
     770:	67 5e       	subi	r22, 0xE7	; 231
     772:	7f 4f       	sbci	r23, 0xFF	; 255
     774:	0e 94 11 24 	call	0x4822	; 0x4822 <_ZN13UserInterfaceC1E6String>
     778:	10 93 fd 04 	sts	0x04FD, r17
     77c:	00 93 fc 04 	sts	0x04FC, r16
     780:	ce 01       	movw	r24, r28
     782:	49 96       	adiw	r24, 0x19	; 25
     784:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <_ZN6StringD1Ev>
     788:	6e 96       	adiw	r28, 0x1e	; 30
     78a:	0f b6       	in	r0, 0x3f	; 63
     78c:	f8 94       	cli
     78e:	de bf       	out	0x3e, r29	; 62
     790:	0f be       	out	0x3f, r0	; 63
     792:	cd bf       	out	0x3d, r28	; 61
     794:	df 91       	pop	r29
     796:	cf 91       	pop	r28
     798:	1f 91       	pop	r17
     79a:	0f 91       	pop	r16
     79c:	ff 90       	pop	r15
     79e:	ef 90       	pop	r14
     7a0:	cf 90       	pop	r12
     7a2:	af 90       	pop	r10
     7a4:	8f 90       	pop	r8
     7a6:	08 95       	ret

000007a8 <_Z13hardware_initv>:
void hardware_init(){
	
	//--Setup the LCDs-------
	
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.print("Initializing LCDs...");
     7a8:	6d e1       	ldi	r22, 0x1D	; 29
     7aa:	72 e0       	ldi	r23, 0x02	; 2
     7ac:	82 e4       	ldi	r24, 0x42	; 66
     7ae:	96 e0       	ldi	r25, 0x06	; 6
     7b0:	0e 94 78 31 	call	0x62f0	; 0x62f0 <_ZN5Print5printEPKc>
	#endif
	
	MAIN_LCD.setBacklightPin(LCD_BACKLIGHT_PIN,POSITIVE);
     7b4:	40 e0       	ldi	r20, 0x00	; 0
     7b6:	63 e0       	ldi	r22, 0x03	; 3
     7b8:	8e e4       	ldi	r24, 0x4E	; 78
     7ba:	95 e0       	ldi	r25, 0x05	; 5
     7bc:	0e 94 2a 28 	call	0x5054	; 0x5054 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>
	MAIN_LCD.setBacklight(HIGH);
     7c0:	61 e0       	ldi	r22, 0x01	; 1
     7c2:	8e e4       	ldi	r24, 0x4E	; 78
     7c4:	95 e0       	ldi	r25, 0x05	; 5
     7c6:	0e 94 3e 28 	call	0x507c	; 0x507c <_ZN17LiquidCrystal_I2C12setBacklightEh>
	MAIN_LCD.begin (20,4);
     7ca:	20 e0       	ldi	r18, 0x00	; 0
     7cc:	44 e0       	ldi	r20, 0x04	; 4
     7ce:	64 e1       	ldi	r22, 0x14	; 20
     7d0:	8e e4       	ldi	r24, 0x4E	; 78
     7d2:	95 e0       	ldi	r25, 0x05	; 5
     7d4:	0e 94 21 29 	call	0x5242	; 0x5242 <_ZN17LiquidCrystal_I2C5beginEhhh>
	
	HLT_LCD.setBacklightPin(LCD_BACKLIGHT_PIN,POSITIVE);
     7d8:	40 e0       	ldi	r20, 0x00	; 0
     7da:	63 e0       	ldi	r22, 0x03	; 3
     7dc:	84 e3       	ldi	r24, 0x34	; 52
     7de:	95 e0       	ldi	r25, 0x05	; 5
     7e0:	0e 94 2a 28 	call	0x5054	; 0x5054 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>
	HLT_LCD.setBacklight(HIGH);
     7e4:	61 e0       	ldi	r22, 0x01	; 1
     7e6:	84 e3       	ldi	r24, 0x34	; 52
     7e8:	95 e0       	ldi	r25, 0x05	; 5
     7ea:	0e 94 3e 28 	call	0x507c	; 0x507c <_ZN17LiquidCrystal_I2C12setBacklightEh>
	HLT_LCD.begin (20,4);
     7ee:	20 e0       	ldi	r18, 0x00	; 0
     7f0:	44 e0       	ldi	r20, 0x04	; 4
     7f2:	64 e1       	ldi	r22, 0x14	; 20
     7f4:	84 e3       	ldi	r24, 0x34	; 52
     7f6:	95 e0       	ldi	r25, 0x05	; 5
     7f8:	0e 94 21 29 	call	0x5242	; 0x5242 <_ZN17LiquidCrystal_I2C5beginEhhh>
	
	MLT_LCD.setBacklightPin(LCD_BACKLIGHT_PIN,POSITIVE);
     7fc:	40 e0       	ldi	r20, 0x00	; 0
     7fe:	63 e0       	ldi	r22, 0x03	; 3
     800:	8a e1       	ldi	r24, 0x1A	; 26
     802:	95 e0       	ldi	r25, 0x05	; 5
     804:	0e 94 2a 28 	call	0x5054	; 0x5054 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>
	MLT_LCD.setBacklight(HIGH);
     808:	61 e0       	ldi	r22, 0x01	; 1
     80a:	8a e1       	ldi	r24, 0x1A	; 26
     80c:	95 e0       	ldi	r25, 0x05	; 5
     80e:	0e 94 3e 28 	call	0x507c	; 0x507c <_ZN17LiquidCrystal_I2C12setBacklightEh>
	MLT_LCD.begin (20,4);
     812:	20 e0       	ldi	r18, 0x00	; 0
     814:	44 e0       	ldi	r20, 0x04	; 4
     816:	64 e1       	ldi	r22, 0x14	; 20
     818:	8a e1       	ldi	r24, 0x1A	; 26
     81a:	95 e0       	ldi	r25, 0x05	; 5
     81c:	0e 94 21 29 	call	0x5242	; 0x5242 <_ZN17LiquidCrystal_I2C5beginEhhh>
	
	BK_LCD.setBacklightPin(LCD_BACKLIGHT_PIN,POSITIVE);
     820:	40 e0       	ldi	r20, 0x00	; 0
     822:	63 e0       	ldi	r22, 0x03	; 3
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	95 e0       	ldi	r25, 0x05	; 5
     828:	0e 94 2a 28 	call	0x5054	; 0x5054 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>
	BK_LCD.setBacklight(HIGH);
     82c:	61 e0       	ldi	r22, 0x01	; 1
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	95 e0       	ldi	r25, 0x05	; 5
     832:	0e 94 3e 28 	call	0x507c	; 0x507c <_ZN17LiquidCrystal_I2C12setBacklightEh>
	BK_LCD.begin (20,4);
     836:	20 e0       	ldi	r18, 0x00	; 0
     838:	44 e0       	ldi	r20, 0x04	; 4
     83a:	64 e1       	ldi	r22, 0x14	; 20
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	95 e0       	ldi	r25, 0x05	; 5
     840:	0e 94 21 29 	call	0x5242	; 0x5242 <_ZN17LiquidCrystal_I2C5beginEhhh>
	
	//--Initialize the Encoders-------
	
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.println("Done.");
     844:	62 e3       	ldi	r22, 0x32	; 50
     846:	72 e0       	ldi	r23, 0x02	; 2
     848:	82 e4       	ldi	r24, 0x42	; 66
     84a:	96 e0       	ldi	r25, 0x06	; 6
     84c:	0e 94 a2 31 	call	0x6344	; 0x6344 <_ZN5Print7printlnEPKc>
		Serial.print("Initializing Encoders...");
     850:	68 e3       	ldi	r22, 0x38	; 56
     852:	72 e0       	ldi	r23, 0x02	; 2
     854:	82 e4       	ldi	r24, 0x42	; 66
     856:	96 e0       	ldi	r25, 0x06	; 6
     858:	0e 94 78 31 	call	0x62f0	; 0x62f0 <_ZN5Print5printEPKc>
  public:
    //****************************
    //  Configuration
    //****************************
    void initialize(unsigned long microseconds=1000000) __attribute__((always_inline)) {
	TCCR1B = _BV(WGM13);        // set mode as phase and frequency correct pwm, stop the timer
     85c:	e1 e8       	ldi	r30, 0x81	; 129
     85e:	f0 e0       	ldi	r31, 0x00	; 0
     860:	80 e1       	ldi	r24, 0x10	; 16
     862:	80 83       	st	Z, r24
	TCCR1A = 0;                 // clear control register A 
     864:	10 92 80 00 	sts	0x0080, r1
	setPeriod(microseconds);
    }
    void setPeriod(unsigned long microseconds) __attribute__((always_inline)) {
	const unsigned long cycles = (F_CPU / 2000000) * microseconds;
	if (cycles < TIMER1_RESOLUTION) {
		clockSelectBits = _BV(CS10);
     868:	91 e0       	ldi	r25, 0x01	; 1
     86a:	90 93 79 05 	sts	0x0579, r25
		pwmPeriod = cycles;
     86e:	20 e4       	ldi	r18, 0x40	; 64
     870:	3f e1       	ldi	r19, 0x1F	; 31
     872:	30 93 7b 05 	sts	0x057B, r19
     876:	20 93 7a 05 	sts	0x057A, r18
		pwmPeriod = cycles / 1024;
	} else {
		clockSelectBits = _BV(CS12) | _BV(CS10);
		pwmPeriod = TIMER1_RESOLUTION - 1;
	}
	ICR1 = pwmPeriod;
     87a:	30 93 87 00 	sts	0x0087, r19
     87e:	20 93 86 00 	sts	0x0086, r18
	TCCR1B = _BV(WGM13) | clockSelectBits;
     882:	80 91 79 05 	lds	r24, 0x0579
     886:	80 61       	ori	r24, 0x10	; 16
     888:	80 83       	st	Z, r24

    //****************************
    //  Interrupt Function
    //****************************
    void attachInterrupt(void (*isr)()) __attribute__((always_inline)) {
	isrCallback = isr;
     88a:	2e e9       	ldi	r18, 0x9E	; 158
     88c:	32 e0       	ldi	r19, 0x02	; 2
     88e:	30 93 78 05 	sts	0x0578, r19
     892:	20 93 77 05 	sts	0x0577, r18
	TIMSK1 = _BV(TOIE1);
     896:	90 93 6f 00 	sts	0x006F, r25
	//Attach the Timer
	Timer1.initialize(1000);
	Timer1.attachInterrupt(serviceEncoders);
	
	//--Attatch Hardware-------
	HLT_UI->attatchEncoder(HLT_ENC);
     89a:	60 91 32 05 	lds	r22, 0x0532
     89e:	70 91 33 05 	lds	r23, 0x0533
     8a2:	80 91 6a 05 	lds	r24, 0x056A
     8a6:	90 91 6b 05 	lds	r25, 0x056B
     8aa:	0e 94 34 24 	call	0x4868	; 0x4868 <_ZN13UserInterface14attatchEncoderEP22ClickEncoderWithEvents>
	HLT_UI->attatchLCD(&HLT_LCD);
     8ae:	64 e3       	ldi	r22, 0x34	; 52
     8b0:	75 e0       	ldi	r23, 0x05	; 5
     8b2:	80 91 6a 05 	lds	r24, 0x056A
     8b6:	90 91 6b 05 	lds	r25, 0x056B
     8ba:	0e 94 6a 24 	call	0x48d4	; 0x48d4 <_ZN13UserInterface10attatchLCDEP17LiquidCrystal_I2C>
	
	MLT_UI->attatchEncoder(MLT_ENC);
     8be:	60 91 18 05 	lds	r22, 0x0518
     8c2:	70 91 19 05 	lds	r23, 0x0519
     8c6:	80 91 6e 05 	lds	r24, 0x056E
     8ca:	90 91 6f 05 	lds	r25, 0x056F
     8ce:	0e 94 34 24 	call	0x4868	; 0x4868 <_ZN13UserInterface14attatchEncoderEP22ClickEncoderWithEvents>
	MLT_UI->attatchLCD(&MLT_LCD);
     8d2:	6a e1       	ldi	r22, 0x1A	; 26
     8d4:	75 e0       	ldi	r23, 0x05	; 5
     8d6:	80 91 6e 05 	lds	r24, 0x056E
     8da:	90 91 6f 05 	lds	r25, 0x056F
     8de:	0e 94 6a 24 	call	0x48d4	; 0x48d4 <_ZN13UserInterface10attatchLCDEP17LiquidCrystal_I2C>
	
	BK_UI->attatchEncoder(MLT_ENC);
     8e2:	60 91 18 05 	lds	r22, 0x0518
     8e6:	70 91 19 05 	lds	r23, 0x0519
     8ea:	80 91 fc 04 	lds	r24, 0x04FC
     8ee:	90 91 fd 04 	lds	r25, 0x04FD
     8f2:	0e 94 34 24 	call	0x4868	; 0x4868 <_ZN13UserInterface14attatchEncoderEP22ClickEncoderWithEvents>
	BK_UI->attatchLCD(&MLT_LCD);
     8f6:	6a e1       	ldi	r22, 0x1A	; 26
     8f8:	75 e0       	ldi	r23, 0x05	; 5
     8fa:	80 91 fc 04 	lds	r24, 0x04FC
     8fe:	90 91 fd 04 	lds	r25, 0x04FD
     902:	0e 94 6a 24 	call	0x48d4	; 0x48d4 <_ZN13UserInterface10attatchLCDEP17LiquidCrystal_I2C>
	
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.println("Done.");
     906:	62 e3       	ldi	r22, 0x32	; 50
     908:	72 e0       	ldi	r23, 0x02	; 2
     90a:	82 e4       	ldi	r24, 0x42	; 66
     90c:	96 e0       	ldi	r25, 0x06	; 6
     90e:	0c 94 a2 31 	jmp	0x6344	; 0x6344 <_ZN5Print7printlnEPKc>
     912:	08 95       	ret

00000914 <_ZN10LinkedListI11LCDMenuItemE3addES0_>:

	return true;
}

template<typename T>
bool LinkedList<T>::add(T _t){
     914:	ef 92       	push	r14
     916:	ff 92       	push	r15
     918:	0f 93       	push	r16
     91a:	1f 93       	push	r17
     91c:	cf 93       	push	r28
     91e:	df 93       	push	r29
     920:	8c 01       	movw	r16, r24
     922:	7b 01       	movw	r14, r22

	ListNode<T> *tmp = new ListNode<T>();
     924:	8f e0       	ldi	r24, 0x0F	; 15
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	0e 94 36 31 	call	0x626c	; 0x626c <_Znwj>
     92c:	ec 01       	movw	r28, r24
     92e:	8f e0       	ldi	r24, 0x0F	; 15
     930:	de 01       	movw	r26, r28
     932:	1d 92       	st	X+, r1
     934:	8a 95       	dec	r24
     936:	e9 f7       	brne	.-6      	; 0x932 <_ZN10LinkedListI11LCDMenuItemE3addES0_+0x1e>

#ifndef LinkedList_h
#define LinkedList_h

template<class T>
struct ListNode
     938:	ce 01       	movw	r24, r28
     93a:	0e 94 20 15 	call	0x2a40	; 0x2a40 <_ZN11LCDMenuItemC1Ev>
#include <string.h>

class LCDMenu;
class LCDToggleOption;
class UserInterface;
class LCDMenuItem
     93e:	b7 01       	movw	r22, r14
     940:	ce 01       	movw	r24, r28
     942:	0e 94 5a 38 	call	0x70b4	; 0x70b4 <_ZN6StringaSERKS_>
     946:	f7 01       	movw	r30, r14
     948:	86 81       	ldd	r24, Z+6	; 0x06
     94a:	8e 83       	std	Y+6, r24	; 0x06
     94c:	87 81       	ldd	r24, Z+7	; 0x07
     94e:	90 85       	ldd	r25, Z+8	; 0x08
     950:	98 87       	std	Y+8, r25	; 0x08
     952:	8f 83       	std	Y+7, r24	; 0x07
     954:	81 85       	ldd	r24, Z+9	; 0x09
     956:	92 85       	ldd	r25, Z+10	; 0x0a
     958:	9a 87       	std	Y+10, r25	; 0x0a
     95a:	89 87       	std	Y+9, r24	; 0x09
     95c:	83 85       	ldd	r24, Z+11	; 0x0b
     95e:	94 85       	ldd	r25, Z+12	; 0x0c
     960:	9c 87       	std	Y+12, r25	; 0x0c
     962:	8b 87       	std	Y+11, r24	; 0x0b
template<typename T>
bool LinkedList<T>::add(T _t){

	ListNode<T> *tmp = new ListNode<T>();
	tmp->data = _t;
	tmp->next = false;
     964:	1e 86       	std	Y+14, r1	; 0x0e
     966:	1d 86       	std	Y+13, r1	; 0x0d
	
	if(root){
     968:	d8 01       	movw	r26, r16
     96a:	14 96       	adiw	r26, 0x04	; 4
     96c:	8d 91       	ld	r24, X+
     96e:	9c 91       	ld	r25, X
     970:	15 97       	sbiw	r26, 0x05	; 5
     972:	89 2b       	or	r24, r25
     974:	59 f0       	breq	.+22     	; 0x98c <_ZN10LinkedListI11LCDMenuItemE3addES0_+0x78>
		// Already have elements inserted
		last->next = tmp;
     976:	16 96       	adiw	r26, 0x06	; 6
     978:	ed 91       	ld	r30, X+
     97a:	fc 91       	ld	r31, X
     97c:	17 97       	sbiw	r26, 0x07	; 7
     97e:	d6 87       	std	Z+14, r29	; 0x0e
     980:	c5 87       	std	Z+13, r28	; 0x0d
		last = tmp;
     982:	17 96       	adiw	r26, 0x07	; 7
     984:	dc 93       	st	X, r29
     986:	ce 93       	st	-X, r28
     988:	16 97       	sbiw	r26, 0x06	; 6
     98a:	05 c0       	rjmp	.+10     	; 0x996 <_ZN10LinkedListI11LCDMenuItemE3addES0_+0x82>
	}else{
		// First element being inserted
		root = tmp;
     98c:	f8 01       	movw	r30, r16
     98e:	d5 83       	std	Z+5, r29	; 0x05
     990:	c4 83       	std	Z+4, r28	; 0x04
		last = tmp;
     992:	d7 83       	std	Z+7, r29	; 0x07
     994:	c6 83       	std	Z+6, r28	; 0x06
	}

	_size++;
     996:	d8 01       	movw	r26, r16
     998:	12 96       	adiw	r26, 0x02	; 2
     99a:	8d 91       	ld	r24, X+
     99c:	9c 91       	ld	r25, X
     99e:	13 97       	sbiw	r26, 0x03	; 3
     9a0:	01 96       	adiw	r24, 0x01	; 1
     9a2:	13 96       	adiw	r26, 0x03	; 3
     9a4:	9c 93       	st	X, r25
     9a6:	8e 93       	st	-X, r24
     9a8:	12 97       	sbiw	r26, 0x02	; 2
	isCached = false;
     9aa:	1c 96       	adiw	r26, 0x0c	; 12
     9ac:	1c 92       	st	X, r1

	return true;
}
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	df 91       	pop	r29
     9b2:	cf 91       	pop	r28
     9b4:	1f 91       	pop	r17
     9b6:	0f 91       	pop	r16
     9b8:	ff 90       	pop	r15
     9ba:	ef 90       	pop	r14
     9bc:	08 95       	ret

000009be <_Z11HLT_UI_initv>:

#include "HLT_UI.h"

UserInterface *HLT_UI = new UserInterface("HLT");

void HLT_UI_init(){
     9be:	cf 92       	push	r12
     9c0:	df 92       	push	r13
     9c2:	ef 92       	push	r14
     9c4:	ff 92       	push	r15
     9c6:	0f 93       	push	r16
     9c8:	1f 93       	push	r17
     9ca:	cf 93       	push	r28
     9cc:	df 93       	push	r29
     9ce:	cd b7       	in	r28, 0x3d	; 61
     9d0:	de b7       	in	r29, 0x3e	; 62
     9d2:	c5 54       	subi	r28, 0x45	; 69
     9d4:	d1 09       	sbc	r29, r1
     9d6:	0f b6       	in	r0, 0x3f	; 63
     9d8:	f8 94       	cli
     9da:	de bf       	out	0x3e, r29	; 62
     9dc:	0f be       	out	0x3f, r0	; 63
     9de:	cd bf       	out	0x3d, r28	; 61
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.print("Initializing UI - " + HLT_UI->Name + "...");
     9e0:	00 91 6a 05 	lds	r16, 0x056A
     9e4:	10 91 6b 05 	lds	r17, 0x056B
     9e8:	0c 5f       	subi	r16, 0xFC	; 252
     9ea:	1f 4f       	sbci	r17, 0xFF	; 255

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
     9ec:	61 e5       	ldi	r22, 0x51	; 81
     9ee:	72 e0       	ldi	r23, 0x02	; 2
     9f0:	ce 01       	movw	r24, r28
     9f2:	80 5c       	subi	r24, 0xC0	; 192
     9f4:	9f 4f       	sbci	r25, 0xFF	; 255
     9f6:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
     9fa:	b8 01       	movw	r22, r16
     9fc:	ce 01       	movw	r24, r28
     9fe:	80 5c       	subi	r24, 0xC0	; 192
     a00:	9f 4f       	sbci	r25, 0xFF	; 255
     a02:	0e 94 a6 38 	call	0x714c	; 0x714c <_ZplRK15StringSumHelperRK6String>
     a06:	6e e2       	ldi	r22, 0x2E	; 46
     a08:	72 e0       	ldi	r23, 0x02	; 2
     a0a:	0e 94 b7 38 	call	0x716e	; 0x716e <_ZplRK15StringSumHelperPKc>
     a0e:	bc 01       	movw	r22, r24
     a10:	82 e4       	ldi	r24, 0x42	; 66
     a12:	96 e0       	ldi	r25, 0x06	; 6
     a14:	0e 94 69 31 	call	0x62d2	; 0x62d2 <_ZN5Print5printERK6String>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
     a18:	ce 01       	movw	r24, r28
     a1a:	80 5c       	subi	r24, 0xC0	; 192
     a1c:	9f 4f       	sbci	r25, 0xFF	; 255
     a1e:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <_ZN6StringD1Ev>
	#endif
	
	/***************************************
	  Setup + Initialization
	***************************************/
	HLT_UI->attatchEncoder(HLT_ENC);
     a22:	60 91 32 05 	lds	r22, 0x0532
     a26:	70 91 33 05 	lds	r23, 0x0533
     a2a:	80 91 6a 05 	lds	r24, 0x056A
     a2e:	90 91 6b 05 	lds	r25, 0x056B
     a32:	0e 94 34 24 	call	0x4868	; 0x4868 <_ZN13UserInterface14attatchEncoderEP22ClickEncoderWithEvents>
	HLT_UI->attatchLCD(&HLT_LCD);
     a36:	64 e3       	ldi	r22, 0x34	; 52
     a38:	75 e0       	ldi	r23, 0x05	; 5
     a3a:	80 91 6a 05 	lds	r24, 0x056A
     a3e:	90 91 6b 05 	lds	r25, 0x056B
     a42:	0e 94 6a 24 	call	0x48d4	; 0x48d4 <_ZN13UserInterface10attatchLCDEP17LiquidCrystal_I2C>
	***************************************/
	
	/***************************************
	  HLT Menu
	***************************************/
	LCDMenu * HLTMainMenu = new LCDMenu("MAIN-MENU");
     a46:	64 e6       	ldi	r22, 0x64	; 100
     a48:	72 e0       	ldi	r23, 0x02	; 2
     a4a:	ce 01       	movw	r24, r28
     a4c:	ca 96       	adiw	r24, 0x3a	; 58
     a4e:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
     a52:	8d e1       	ldi	r24, 0x1D	; 29
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	0e 94 36 31 	call	0x626c	; 0x626c <_Znwj>
     a5a:	7c 01       	movw	r14, r24
     a5c:	be 01       	movw	r22, r28
     a5e:	66 5c       	subi	r22, 0xC6	; 198
     a60:	7f 4f       	sbci	r23, 0xFF	; 255
     a62:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <_ZN7LCDMenuC1E6String>
     a66:	ce 01       	movw	r24, r28
     a68:	ca 96       	adiw	r24, 0x3a	; 58
     a6a:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <_ZN6StringD1Ev>
	LCDMenuItem * TestItem1 = new LCDMenuItem("Testing1");
     a6e:	6e e6       	ldi	r22, 0x6E	; 110
     a70:	72 e0       	ldi	r23, 0x02	; 2
     a72:	ce 01       	movw	r24, r28
     a74:	c4 96       	adiw	r24, 0x34	; 52
     a76:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
     a7a:	8d e0       	ldi	r24, 0x0D	; 13
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	0e 94 36 31 	call	0x626c	; 0x626c <_Znwj>
     a82:	8c 01       	movw	r16, r24
     a84:	be 01       	movw	r22, r28
     a86:	6c 5c       	subi	r22, 0xCC	; 204
     a88:	7f 4f       	sbci	r23, 0xFF	; 255
     a8a:	0e 94 97 14 	call	0x292e	; 0x292e <_ZN11LCDMenuItemC1E6String>
     a8e:	ce 01       	movw	r24, r28
     a90:	c4 96       	adiw	r24, 0x34	; 52
     a92:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <_ZN6StringD1Ev>
     a96:	b8 01       	movw	r22, r16
     a98:	ce 01       	movw	r24, r28
     a9a:	87 96       	adiw	r24, 0x27	; 39
     a9c:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
     aa0:	f8 01       	movw	r30, r16
     aa2:	86 81       	ldd	r24, Z+6	; 0x06
     aa4:	8d a7       	std	Y+45, r24	; 0x2d
     aa6:	87 81       	ldd	r24, Z+7	; 0x07
     aa8:	90 85       	ldd	r25, Z+8	; 0x08
     aaa:	9f a7       	std	Y+47, r25	; 0x2f
     aac:	8e a7       	std	Y+46, r24	; 0x2e
     aae:	81 85       	ldd	r24, Z+9	; 0x09
     ab0:	92 85       	ldd	r25, Z+10	; 0x0a
     ab2:	99 ab       	std	Y+49, r25	; 0x31
     ab4:	88 ab       	std	Y+48, r24	; 0x30
     ab6:	83 85       	ldd	r24, Z+11	; 0x0b
     ab8:	94 85       	ldd	r25, Z+12	; 0x0c
     aba:	9b ab       	std	Y+51, r25	; 0x33
     abc:	8a ab       	std	Y+50, r24	; 0x32
	HLTMainMenu->Items.add(*TestItem1);
     abe:	67 01       	movw	r12, r14
     ac0:	f6 e0       	ldi	r31, 0x06	; 6
     ac2:	cf 0e       	add	r12, r31
     ac4:	d1 1c       	adc	r13, r1
     ac6:	be 01       	movw	r22, r28
     ac8:	69 5d       	subi	r22, 0xD9	; 217
     aca:	7f 4f       	sbci	r23, 0xFF	; 255
     acc:	c6 01       	movw	r24, r12
     ace:	22 df       	rcall	.-444    	; 0x914 <_ZN10LinkedListI11LCDMenuItemE3addES0_>
     ad0:	ce 01       	movw	r24, r28
     ad2:	87 96       	adiw	r24, 0x27	; 39
     ad4:	0e 94 32 15 	call	0x2a64	; 0x2a64 <_ZN11LCDMenuItemD1Ev>
	LCDMenuItem * TestItem2 = new LCDMenuItem("Testing2");
     ad8:	67 e7       	ldi	r22, 0x77	; 119
     ada:	72 e0       	ldi	r23, 0x02	; 2
     adc:	ce 01       	movw	r24, r28
     ade:	81 96       	adiw	r24, 0x21	; 33
     ae0:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
     ae4:	8d e0       	ldi	r24, 0x0D	; 13
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	0e 94 36 31 	call	0x626c	; 0x626c <_Znwj>
     aec:	8c 01       	movw	r16, r24
     aee:	be 01       	movw	r22, r28
     af0:	6f 5d       	subi	r22, 0xDF	; 223
     af2:	7f 4f       	sbci	r23, 0xFF	; 255
     af4:	0e 94 97 14 	call	0x292e	; 0x292e <_ZN11LCDMenuItemC1E6String>
     af8:	ce 01       	movw	r24, r28
     afa:	81 96       	adiw	r24, 0x21	; 33
     afc:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <_ZN6StringD1Ev>
     b00:	b8 01       	movw	r22, r16
     b02:	ce 01       	movw	r24, r28
     b04:	44 96       	adiw	r24, 0x14	; 20
     b06:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
     b0a:	f8 01       	movw	r30, r16
     b0c:	86 81       	ldd	r24, Z+6	; 0x06
     b0e:	8a 8f       	std	Y+26, r24	; 0x1a
     b10:	87 81       	ldd	r24, Z+7	; 0x07
     b12:	90 85       	ldd	r25, Z+8	; 0x08
     b14:	9c 8f       	std	Y+28, r25	; 0x1c
     b16:	8b 8f       	std	Y+27, r24	; 0x1b
     b18:	81 85       	ldd	r24, Z+9	; 0x09
     b1a:	92 85       	ldd	r25, Z+10	; 0x0a
     b1c:	9e 8f       	std	Y+30, r25	; 0x1e
     b1e:	8d 8f       	std	Y+29, r24	; 0x1d
     b20:	83 85       	ldd	r24, Z+11	; 0x0b
     b22:	94 85       	ldd	r25, Z+12	; 0x0c
     b24:	98 a3       	std	Y+32, r25	; 0x20
     b26:	8f 8f       	std	Y+31, r24	; 0x1f
	HLTMainMenu->Items.add(*TestItem2);
     b28:	be 01       	movw	r22, r28
     b2a:	6c 5e       	subi	r22, 0xEC	; 236
     b2c:	7f 4f       	sbci	r23, 0xFF	; 255
     b2e:	c6 01       	movw	r24, r12
     b30:	f1 de       	rcall	.-542    	; 0x914 <_ZN10LinkedListI11LCDMenuItemE3addES0_>
     b32:	ce 01       	movw	r24, r28
     b34:	44 96       	adiw	r24, 0x14	; 20
     b36:	0e 94 32 15 	call	0x2a64	; 0x2a64 <_ZN11LCDMenuItemD1Ev>
	LCDMenuItem * TestItem3 = new LCDMenuItem("Testing3");
     b3a:	60 e8       	ldi	r22, 0x80	; 128
     b3c:	72 e0       	ldi	r23, 0x02	; 2
     b3e:	ce 01       	movw	r24, r28
     b40:	0e 96       	adiw	r24, 0x0e	; 14
     b42:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
     b46:	8d e0       	ldi	r24, 0x0D	; 13
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	0e 94 36 31 	call	0x626c	; 0x626c <_Znwj>
     b4e:	8c 01       	movw	r16, r24
     b50:	be 01       	movw	r22, r28
     b52:	62 5f       	subi	r22, 0xF2	; 242
     b54:	7f 4f       	sbci	r23, 0xFF	; 255
     b56:	0e 94 97 14 	call	0x292e	; 0x292e <_ZN11LCDMenuItemC1E6String>
     b5a:	ce 01       	movw	r24, r28
     b5c:	0e 96       	adiw	r24, 0x0e	; 14
     b5e:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <_ZN6StringD1Ev>
     b62:	b8 01       	movw	r22, r16
     b64:	ce 01       	movw	r24, r28
     b66:	01 96       	adiw	r24, 0x01	; 1
     b68:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
     b6c:	f8 01       	movw	r30, r16
     b6e:	86 81       	ldd	r24, Z+6	; 0x06
     b70:	8f 83       	std	Y+7, r24	; 0x07
     b72:	87 81       	ldd	r24, Z+7	; 0x07
     b74:	90 85       	ldd	r25, Z+8	; 0x08
     b76:	99 87       	std	Y+9, r25	; 0x09
     b78:	88 87       	std	Y+8, r24	; 0x08
     b7a:	81 85       	ldd	r24, Z+9	; 0x09
     b7c:	92 85       	ldd	r25, Z+10	; 0x0a
     b7e:	9b 87       	std	Y+11, r25	; 0x0b
     b80:	8a 87       	std	Y+10, r24	; 0x0a
     b82:	83 85       	ldd	r24, Z+11	; 0x0b
     b84:	94 85       	ldd	r25, Z+12	; 0x0c
     b86:	9d 87       	std	Y+13, r25	; 0x0d
     b88:	8c 87       	std	Y+12, r24	; 0x0c
	HLTMainMenu->Items.add(*TestItem3);
     b8a:	be 01       	movw	r22, r28
     b8c:	6f 5f       	subi	r22, 0xFF	; 255
     b8e:	7f 4f       	sbci	r23, 0xFF	; 255
     b90:	c6 01       	movw	r24, r12
     b92:	c0 de       	rcall	.-640    	; 0x914 <_ZN10LinkedListI11LCDMenuItemE3addES0_>
     b94:	ce 01       	movw	r24, r28
     b96:	01 96       	adiw	r24, 0x01	; 1
     b98:	0e 94 32 15 	call	0x2a64	; 0x2a64 <_ZN11LCDMenuItemD1Ev>
	
	HLT_UI->setDisplay(HLTMainMenu);
     b9c:	b7 01       	movw	r22, r14
     b9e:	80 91 6a 05 	lds	r24, 0x056A
     ba2:	90 91 6b 05 	lds	r25, 0x056B
     ba6:	0e 94 be 24 	call	0x497c	; 0x497c <_ZN13UserInterface10setDisplayEP7LCDMenu>
	
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.println("Done.");
     baa:	62 e3       	ldi	r22, 0x32	; 50
     bac:	72 e0       	ldi	r23, 0x02	; 2
     bae:	82 e4       	ldi	r24, 0x42	; 66
     bb0:	96 e0       	ldi	r25, 0x06	; 6
     bb2:	0e 94 a2 31 	call	0x6344	; 0x6344 <_ZN5Print7printlnEPKc>
	#endif
}
     bb6:	cb 5b       	subi	r28, 0xBB	; 187
     bb8:	df 4f       	sbci	r29, 0xFF	; 255
     bba:	0f b6       	in	r0, 0x3f	; 63
     bbc:	f8 94       	cli
     bbe:	de bf       	out	0x3e, r29	; 62
     bc0:	0f be       	out	0x3f, r0	; 63
     bc2:	cd bf       	out	0x3d, r28	; 61
     bc4:	df 91       	pop	r29
     bc6:	cf 91       	pop	r28
     bc8:	1f 91       	pop	r17
     bca:	0f 91       	pop	r16
     bcc:	ff 90       	pop	r15
     bce:	ef 90       	pop	r14
     bd0:	df 90       	pop	r13
     bd2:	cf 90       	pop	r12
     bd4:	08 95       	ret

00000bd6 <_GLOBAL__sub_I_HLT_UI>:
     bd6:	0f 93       	push	r16
     bd8:	1f 93       	push	r17
     bda:	cf 93       	push	r28
     bdc:	df 93       	push	r29
     bde:	00 d0       	rcall	.+0      	; 0xbe0 <_GLOBAL__sub_I_HLT_UI+0xa>
     be0:	00 d0       	rcall	.+0      	; 0xbe2 <_GLOBAL__sub_I_HLT_UI+0xc>
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62
 * ----------------------------------------------------------------
 */

#include "HLT_UI.h"

UserInterface *HLT_UI = new UserInterface("HLT");
     be6:	69 e8       	ldi	r22, 0x89	; 137
     be8:	72 e0       	ldi	r23, 0x02	; 2
     bea:	ce 01       	movw	r24, r28
     bec:	01 96       	adiw	r24, 0x01	; 1
     bee:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
     bf2:	86 e1       	ldi	r24, 0x16	; 22
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	0e 94 36 31 	call	0x626c	; 0x626c <_Znwj>
     bfa:	8c 01       	movw	r16, r24
     bfc:	be 01       	movw	r22, r28
     bfe:	6f 5f       	subi	r22, 0xFF	; 255
     c00:	7f 4f       	sbci	r23, 0xFF	; 255
     c02:	0e 94 11 24 	call	0x4822	; 0x4822 <_ZN13UserInterfaceC1E6String>
     c06:	10 93 6b 05 	sts	0x056B, r17
     c0a:	00 93 6a 05 	sts	0x056A, r16
     c0e:	ce 01       	movw	r24, r28
     c10:	01 96       	adiw	r24, 0x01	; 1
     c12:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <_ZN6StringD1Ev>
	HLT_UI->setDisplay(HLTMainMenu);
	
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.println("Done.");
	#endif
}
     c16:	26 96       	adiw	r28, 0x06	; 6
     c18:	0f b6       	in	r0, 0x3f	; 63
     c1a:	f8 94       	cli
     c1c:	de bf       	out	0x3e, r29	; 62
     c1e:	0f be       	out	0x3f, r0	; 63
     c20:	cd bf       	out	0x3d, r28	; 61
     c22:	df 91       	pop	r29
     c24:	cf 91       	pop	r28
     c26:	1f 91       	pop	r17
     c28:	0f 91       	pop	r16
     c2a:	08 95       	ret

00000c2c <_ZN10LinkedListI11LCDPageItemE3addES0_>:

	return true;
}

template<typename T>
bool LinkedList<T>::add(T _t){
     c2c:	ef 92       	push	r14
     c2e:	ff 92       	push	r15
     c30:	0f 93       	push	r16
     c32:	1f 93       	push	r17
     c34:	cf 93       	push	r28
     c36:	df 93       	push	r29
     c38:	7c 01       	movw	r14, r24
     c3a:	8b 01       	movw	r16, r22

	ListNode<T> *tmp = new ListNode<T>();
     c3c:	8e e3       	ldi	r24, 0x3E	; 62
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	0e 94 36 31 	call	0x626c	; 0x626c <_Znwj>
     c44:	ec 01       	movw	r28, r24
     c46:	8e e3       	ldi	r24, 0x3E	; 62
     c48:	de 01       	movw	r26, r28
     c4a:	1d 92       	st	X+, r1
     c4c:	8a 95       	dec	r24
     c4e:	e9 f7       	brne	.-6      	; 0xc4a <_ZN10LinkedListI11LCDPageItemE3addES0_+0x1e>

#ifndef LinkedList_h
#define LinkedList_h

template<class T>
struct ListNode
     c50:	ce 01       	movw	r24, r28
     c52:	0e 94 63 20 	call	0x40c6	; 0x40c6 <_ZN11LCDPageItemC1Ev>

#include "LCDMenuItem.h"
#include "LCDMenu.h"

class LCDMenuItem;
class LCDPageItem
     c56:	f8 01       	movw	r30, r16
     c58:	80 81       	ld	r24, Z
     c5a:	88 83       	st	Y, r24
     c5c:	81 81       	ldd	r24, Z+1	; 0x01
     c5e:	89 83       	std	Y+1, r24	; 0x01
     c60:	82 81       	ldd	r24, Z+2	; 0x02
     c62:	8a 83       	std	Y+2, r24	; 0x02
     c64:	b8 01       	movw	r22, r16
     c66:	6d 5f       	subi	r22, 0xFD	; 253
     c68:	7f 4f       	sbci	r23, 0xFF	; 255
     c6a:	ce 01       	movw	r24, r28
     c6c:	03 96       	adiw	r24, 0x03	; 3
     c6e:	0e 94 5a 38 	call	0x70b4	; 0x70b4 <_ZN6StringaSERKS_>
     c72:	f8 01       	movw	r30, r16
     c74:	81 85       	ldd	r24, Z+9	; 0x09
     c76:	92 85       	ldd	r25, Z+10	; 0x0a
     c78:	a3 85       	ldd	r26, Z+11	; 0x0b
     c7a:	b4 85       	ldd	r27, Z+12	; 0x0c
     c7c:	89 87       	std	Y+9, r24	; 0x09
     c7e:	9a 87       	std	Y+10, r25	; 0x0a
     c80:	ab 87       	std	Y+11, r26	; 0x0b
     c82:	bc 87       	std	Y+12, r27	; 0x0c
     c84:	85 85       	ldd	r24, Z+13	; 0x0d
     c86:	8d 87       	std	Y+13, r24	; 0x0d
     c88:	86 85       	ldd	r24, Z+14	; 0x0e
     c8a:	97 85       	ldd	r25, Z+15	; 0x0f
     c8c:	9f 87       	std	Y+15, r25	; 0x0f
     c8e:	8e 87       	std	Y+14, r24	; 0x0e
     c90:	80 89       	ldd	r24, Z+16	; 0x10
     c92:	91 89       	ldd	r25, Z+17	; 0x11
     c94:	99 8b       	std	Y+17, r25	; 0x11
     c96:	88 8b       	std	Y+16, r24	; 0x10
     c98:	82 89       	ldd	r24, Z+18	; 0x12
     c9a:	93 89       	ldd	r25, Z+19	; 0x13
     c9c:	9b 8b       	std	Y+19, r25	; 0x13
     c9e:	8a 8b       	std	Y+18, r24	; 0x12
     ca0:	84 89       	ldd	r24, Z+20	; 0x14
     ca2:	95 89       	ldd	r25, Z+21	; 0x15
     ca4:	9d 8b       	std	Y+21, r25	; 0x15
     ca6:	8c 8b       	std	Y+20, r24	; 0x14
     ca8:	86 89       	ldd	r24, Z+22	; 0x16
     caa:	97 89       	ldd	r25, Z+23	; 0x17
     cac:	9f 8b       	std	Y+23, r25	; 0x17
     cae:	8e 8b       	std	Y+22, r24	; 0x16
     cb0:	b8 01       	movw	r22, r16
     cb2:	68 5e       	subi	r22, 0xE8	; 232
     cb4:	7f 4f       	sbci	r23, 0xFF	; 255
     cb6:	ce 01       	movw	r24, r28
     cb8:	48 96       	adiw	r24, 0x18	; 24
     cba:	0e 94 5a 38 	call	0x70b4	; 0x70b4 <_ZN6StringaSERKS_>
     cbe:	b8 01       	movw	r22, r16
     cc0:	62 5e       	subi	r22, 0xE2	; 226
     cc2:	7f 4f       	sbci	r23, 0xFF	; 255
     cc4:	ce 01       	movw	r24, r28
     cc6:	4e 96       	adiw	r24, 0x1e	; 30
     cc8:	0e 94 5a 38 	call	0x70b4	; 0x70b4 <_ZN6StringaSERKS_>
     ccc:	d8 01       	movw	r26, r16
     cce:	94 96       	adiw	r26, 0x24	; 36
     cd0:	8d 91       	ld	r24, X+
     cd2:	9c 91       	ld	r25, X
     cd4:	95 97       	sbiw	r26, 0x25	; 37
     cd6:	9d a3       	std	Y+37, r25	; 0x25
     cd8:	8c a3       	std	Y+36, r24	; 0x24
     cda:	96 96       	adiw	r26, 0x26	; 38
     cdc:	8d 91       	ld	r24, X+
     cde:	9c 91       	ld	r25, X
     ce0:	97 97       	sbiw	r26, 0x27	; 39
     ce2:	9f a3       	std	Y+39, r25	; 0x27
     ce4:	8e a3       	std	Y+38, r24	; 0x26
     ce6:	98 96       	adiw	r26, 0x28	; 40
     ce8:	8d 91       	ld	r24, X+
     cea:	9c 91       	ld	r25, X
     cec:	99 97       	sbiw	r26, 0x29	; 41
     cee:	99 a7       	std	Y+41, r25	; 0x29
     cf0:	88 a7       	std	Y+40, r24	; 0x28
     cf2:	9a 96       	adiw	r26, 0x2a	; 42
     cf4:	8d 91       	ld	r24, X+
     cf6:	9c 91       	ld	r25, X
     cf8:	9b 97       	sbiw	r26, 0x2b	; 43
     cfa:	9b a7       	std	Y+43, r25	; 0x2b
     cfc:	8a a7       	std	Y+42, r24	; 0x2a
     cfe:	9c 96       	adiw	r26, 0x2c	; 44
     d00:	8d 91       	ld	r24, X+
     d02:	9c 91       	ld	r25, X
     d04:	9d 97       	sbiw	r26, 0x2d	; 45
     d06:	9d a7       	std	Y+45, r25	; 0x2d
     d08:	8c a7       	std	Y+44, r24	; 0x2c
     d0a:	9e 96       	adiw	r26, 0x2e	; 46
     d0c:	8d 91       	ld	r24, X+
     d0e:	9c 91       	ld	r25, X
     d10:	9f 97       	sbiw	r26, 0x2f	; 47
     d12:	9f a7       	std	Y+47, r25	; 0x2f
     d14:	8e a7       	std	Y+46, r24	; 0x2e
     d16:	d0 96       	adiw	r26, 0x30	; 48
     d18:	8d 91       	ld	r24, X+
     d1a:	9c 91       	ld	r25, X
     d1c:	d1 97       	sbiw	r26, 0x31	; 49
     d1e:	99 ab       	std	Y+49, r25	; 0x31
     d20:	88 ab       	std	Y+48, r24	; 0x30
     d22:	b8 01       	movw	r22, r16
     d24:	6e 5c       	subi	r22, 0xCE	; 206
     d26:	7f 4f       	sbci	r23, 0xFF	; 255
     d28:	ce 01       	movw	r24, r28
     d2a:	c2 96       	adiw	r24, 0x32	; 50
     d2c:	0e 94 5a 38 	call	0x70b4	; 0x70b4 <_ZN6StringaSERKS_>
     d30:	f8 01       	movw	r30, r16
     d32:	80 ad       	ldd	r24, Z+56	; 0x38
     d34:	91 ad       	ldd	r25, Z+57	; 0x39
     d36:	99 af       	std	Y+57, r25	; 0x39
     d38:	88 af       	std	Y+56, r24	; 0x38
     d3a:	82 ad       	ldd	r24, Z+58	; 0x3a
     d3c:	93 ad       	ldd	r25, Z+59	; 0x3b
     d3e:	9b af       	std	Y+59, r25	; 0x3b
     d40:	8a af       	std	Y+58, r24	; 0x3a
template<typename T>
bool LinkedList<T>::add(T _t){

	ListNode<T> *tmp = new ListNode<T>();
	tmp->data = _t;
	tmp->next = false;
     d42:	1d ae       	std	Y+61, r1	; 0x3d
     d44:	1c ae       	std	Y+60, r1	; 0x3c
	
	if(root){
     d46:	d7 01       	movw	r26, r14
     d48:	14 96       	adiw	r26, 0x04	; 4
     d4a:	8d 91       	ld	r24, X+
     d4c:	9c 91       	ld	r25, X
     d4e:	15 97       	sbiw	r26, 0x05	; 5
     d50:	89 2b       	or	r24, r25
     d52:	59 f0       	breq	.+22     	; 0xd6a <_ZN10LinkedListI11LCDPageItemE3addES0_+0x13e>
		// Already have elements inserted
		last->next = tmp;
     d54:	16 96       	adiw	r26, 0x06	; 6
     d56:	ed 91       	ld	r30, X+
     d58:	fc 91       	ld	r31, X
     d5a:	17 97       	sbiw	r26, 0x07	; 7
     d5c:	d5 af       	std	Z+61, r29	; 0x3d
     d5e:	c4 af       	std	Z+60, r28	; 0x3c
		last = tmp;
     d60:	17 96       	adiw	r26, 0x07	; 7
     d62:	dc 93       	st	X, r29
     d64:	ce 93       	st	-X, r28
     d66:	16 97       	sbiw	r26, 0x06	; 6
     d68:	05 c0       	rjmp	.+10     	; 0xd74 <_ZN10LinkedListI11LCDPageItemE3addES0_+0x148>
	}else{
		// First element being inserted
		root = tmp;
     d6a:	f7 01       	movw	r30, r14
     d6c:	d5 83       	std	Z+5, r29	; 0x05
     d6e:	c4 83       	std	Z+4, r28	; 0x04
		last = tmp;
     d70:	d7 83       	std	Z+7, r29	; 0x07
     d72:	c6 83       	std	Z+6, r28	; 0x06
	}

	_size++;
     d74:	d7 01       	movw	r26, r14
     d76:	12 96       	adiw	r26, 0x02	; 2
     d78:	8d 91       	ld	r24, X+
     d7a:	9c 91       	ld	r25, X
     d7c:	13 97       	sbiw	r26, 0x03	; 3
     d7e:	01 96       	adiw	r24, 0x01	; 1
     d80:	13 96       	adiw	r26, 0x03	; 3
     d82:	9c 93       	st	X, r25
     d84:	8e 93       	st	-X, r24
     d86:	12 97       	sbiw	r26, 0x02	; 2
	isCached = false;
     d88:	1c 96       	adiw	r26, 0x0c	; 12
     d8a:	1c 92       	st	X, r1

	return true;
}
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	df 91       	pop	r29
     d90:	cf 91       	pop	r28
     d92:	1f 91       	pop	r17
     d94:	0f 91       	pop	r16
     d96:	ff 90       	pop	r15
     d98:	ef 90       	pop	r14
     d9a:	08 95       	ret

00000d9c <_Z12MAIN_UI_initv>:

#include "MAIN_UI.h"

UserInterface *MAIN_UI = new UserInterface("MAIN");

void MAIN_UI_init(){
     d9c:	2f 92       	push	r2
     d9e:	3f 92       	push	r3
     da0:	4f 92       	push	r4
     da2:	5f 92       	push	r5
     da4:	6f 92       	push	r6
     da6:	7f 92       	push	r7
     da8:	8f 92       	push	r8
     daa:	9f 92       	push	r9
     dac:	af 92       	push	r10
     dae:	bf 92       	push	r11
     db0:	cf 92       	push	r12
     db2:	df 92       	push	r13
     db4:	ef 92       	push	r14
     db6:	ff 92       	push	r15
     db8:	0f 93       	push	r16
     dba:	1f 93       	push	r17
     dbc:	cf 93       	push	r28
     dbe:	df 93       	push	r29
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
     dc4:	c5 5c       	subi	r28, 0xC5	; 197
     dc6:	d1 09       	sbc	r29, r1
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	f8 94       	cli
     dcc:	de bf       	out	0x3e, r29	; 62
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	cd bf       	out	0x3d, r28	; 61
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.print("Initializing UI - " + MAIN_UI->Name + "...");
     dd2:	00 91 6c 05 	lds	r16, 0x056C
     dd6:	10 91 6d 05 	lds	r17, 0x056D
     dda:	0c 5f       	subi	r16, 0xFC	; 252
     ddc:	1f 4f       	sbci	r17, 0xFF	; 255
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
     dde:	61 e5       	ldi	r22, 0x51	; 81
     de0:	72 e0       	ldi	r23, 0x02	; 2
     de2:	ce 01       	movw	r24, r28
     de4:	82 58       	subi	r24, 0x82	; 130
     de6:	9f 4f       	sbci	r25, 0xFF	; 255
     de8:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
     dec:	b8 01       	movw	r22, r16
     dee:	ce 01       	movw	r24, r28
     df0:	82 58       	subi	r24, 0x82	; 130
     df2:	9f 4f       	sbci	r25, 0xFF	; 255
     df4:	0e 94 a6 38 	call	0x714c	; 0x714c <_ZplRK15StringSumHelperRK6String>
     df8:	6e e2       	ldi	r22, 0x2E	; 46
     dfa:	72 e0       	ldi	r23, 0x02	; 2
     dfc:	0e 94 b7 38 	call	0x716e	; 0x716e <_ZplRK15StringSumHelperPKc>
     e00:	bc 01       	movw	r22, r24
     e02:	82 e4       	ldi	r24, 0x42	; 66
     e04:	96 e0       	ldi	r25, 0x06	; 6
     e06:	0e 94 69 31 	call	0x62d2	; 0x62d2 <_ZN5Print5printERK6String>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
     e0a:	ce 01       	movw	r24, r28
     e0c:	82 58       	subi	r24, 0x82	; 130
     e0e:	9f 4f       	sbci	r25, 0xFF	; 255
     e10:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <_ZN6StringD1Ev>
	#endif
	
	/***************************************
	  Setup + Initialization
	***************************************/
	MAIN_UI->attatchEncoder(MAIN_ENC);
     e14:	60 91 4c 05 	lds	r22, 0x054C
     e18:	70 91 4d 05 	lds	r23, 0x054D
     e1c:	80 91 6c 05 	lds	r24, 0x056C
     e20:	90 91 6d 05 	lds	r25, 0x056D
     e24:	0e 94 34 24 	call	0x4868	; 0x4868 <_ZN13UserInterface14attatchEncoderEP22ClickEncoderWithEvents>
	MAIN_UI->attatchLCD(&MAIN_LCD);
     e28:	6e e4       	ldi	r22, 0x4E	; 78
     e2a:	75 e0       	ldi	r23, 0x05	; 5
     e2c:	80 91 6c 05 	lds	r24, 0x056C
     e30:	90 91 6d 05 	lds	r25, 0x056D
     e34:	0e 94 6a 24 	call	0x48d4	; 0x48d4 <_ZN13UserInterface10attatchLCDEP17LiquidCrystal_I2C>
	
	//Main Menu
	LCDMenu * MainMenu = new LCDMenu("Main");
     e38:	6d e8       	ldi	r22, 0x8D	; 141
     e3a:	72 e0       	ldi	r23, 0x02	; 2
     e3c:	ce 01       	movw	r24, r28
     e3e:	88 58       	subi	r24, 0x88	; 136
     e40:	9f 4f       	sbci	r25, 0xFF	; 255
     e42:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
     e46:	8d e1       	ldi	r24, 0x1D	; 29
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	0e 94 36 31 	call	0x626c	; 0x626c <_Znwj>
     e4e:	3c 01       	movw	r6, r24
     e50:	be 01       	movw	r22, r28
     e52:	68 58       	subi	r22, 0x88	; 136
     e54:	7f 4f       	sbci	r23, 0xFF	; 255
     e56:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <_ZN7LCDMenuC1E6String>
     e5a:	ce 01       	movw	r24, r28
     e5c:	88 58       	subi	r24, 0x88	; 136
     e5e:	9f 4f       	sbci	r25, 0xFF	; 255
     e60:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <_ZN6StringD1Ev>
	
	/***************************************
	  Alarm Test Menu
	***************************************/
	LCDMenu * MenuAlarmTest = new LCDMenu("Alarm Test",MainMenu);
     e64:	62 e9       	ldi	r22, 0x92	; 146
     e66:	72 e0       	ldi	r23, 0x02	; 2
     e68:	ce 01       	movw	r24, r28
     e6a:	8e 58       	subi	r24, 0x8E	; 142
     e6c:	9f 4f       	sbci	r25, 0xFF	; 255
     e6e:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
     e72:	8d e1       	ldi	r24, 0x1D	; 29
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	0e 94 36 31 	call	0x626c	; 0x626c <_Znwj>
     e7a:	ce 53       	subi	r28, 0x3E	; 62
     e7c:	df 4f       	sbci	r29, 0xFF	; 255
     e7e:	99 83       	std	Y+1, r25	; 0x01
     e80:	88 83       	st	Y, r24
     e82:	c2 5c       	subi	r28, 0xC2	; 194
     e84:	d0 40       	sbci	r29, 0x00	; 0
     e86:	a3 01       	movw	r20, r6
     e88:	be 01       	movw	r22, r28
     e8a:	6e 58       	subi	r22, 0x8E	; 142
     e8c:	7f 4f       	sbci	r23, 0xFF	; 255
     e8e:	0e 94 2e 10 	call	0x205c	; 0x205c <_ZN7LCDMenuC1E6StringPS_>
     e92:	ce 01       	movw	r24, r28
     e94:	8e 58       	subi	r24, 0x8E	; 142
     e96:	9f 4f       	sbci	r25, 0xFF	; 255
     e98:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <_ZN6StringD1Ev>
	
	LCDToggleOption *TimerAlarmTgl = new LCDToggleOption("Timer Alarm",TimerAlarmDIO);
     e9c:	6d e9       	ldi	r22, 0x9D	; 157
     e9e:	72 e0       	ldi	r23, 0x02	; 2
     ea0:	ce 01       	movw	r24, r28
     ea2:	84 59       	subi	r24, 0x94	; 148
     ea4:	9f 4f       	sbci	r25, 0xFF	; 255
     ea6:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
     eaa:	88 e1       	ldi	r24, 0x18	; 24
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	0e 94 36 31 	call	0x626c	; 0x626c <_Znwj>
     eb2:	8c 01       	movw	r16, r24
     eb4:	40 91 68 05 	lds	r20, 0x0568
     eb8:	50 91 69 05 	lds	r21, 0x0569
     ebc:	be 01       	movw	r22, r28
     ebe:	64 59       	subi	r22, 0x94	; 148
     ec0:	7f 4f       	sbci	r23, 0xFF	; 255
     ec2:	0e 94 c9 23 	call	0x4792	; 0x4792 <_ZN15LCDToggleOptionC1E6StringP5DigIO>
     ec6:	ce 01       	movw	r24, r28
     ec8:	84 59       	subi	r24, 0x94	; 148
     eca:	9f 4f       	sbci	r25, 0xFF	; 255
     ecc:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <_ZN6StringD1Ev>
	LCDMenuItem * MenuItem_TimerAlarm = new LCDMenuItem("Timer Alarm",TimerAlarmTgl);
     ed0:	6d e9       	ldi	r22, 0x9D	; 157
     ed2:	72 e0       	ldi	r23, 0x02	; 2
     ed4:	ce 01       	movw	r24, r28
     ed6:	8a 59       	subi	r24, 0x9A	; 154
     ed8:	9f 4f       	sbci	r25, 0xFF	; 255
     eda:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
     ede:	8d e0       	ldi	r24, 0x0D	; 13
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	0e 94 36 31 	call	0x626c	; 0x626c <_Znwj>
     ee6:	6c 01       	movw	r12, r24
     ee8:	a8 01       	movw	r20, r16
     eea:	be 01       	movw	r22, r28
     eec:	6a 59       	subi	r22, 0x9A	; 154
     eee:	7f 4f       	sbci	r23, 0xFF	; 255
     ef0:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <_ZN11LCDMenuItemC1E6StringP15LCDToggleOption>
     ef4:	ce 01       	movw	r24, r28
     ef6:	8a 59       	subi	r24, 0x9A	; 154
     ef8:	9f 4f       	sbci	r25, 0xFF	; 255
     efa:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <_ZN6StringD1Ev>
	
	LCDToggleOption *TempAlarmTgl = new LCDToggleOption("Temp Alarm",TempAlarmDIO);
     efe:	69 ea       	ldi	r22, 0xA9	; 169
     f00:	72 e0       	ldi	r23, 0x02	; 2
     f02:	ce 01       	movw	r24, r28
     f04:	80 5a       	subi	r24, 0xA0	; 160
     f06:	9f 4f       	sbci	r25, 0xFF	; 255
     f08:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
     f0c:	88 e1       	ldi	r24, 0x18	; 24
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	0e 94 36 31 	call	0x626c	; 0x626c <_Znwj>
     f14:	8c 01       	movw	r16, r24
     f16:	40 91 66 05 	lds	r20, 0x0566
     f1a:	50 91 67 05 	lds	r21, 0x0567
     f1e:	be 01       	movw	r22, r28
     f20:	60 5a       	subi	r22, 0xA0	; 160
     f22:	7f 4f       	sbci	r23, 0xFF	; 255
     f24:	0e 94 c9 23 	call	0x4792	; 0x4792 <_ZN15LCDToggleOptionC1E6StringP5DigIO>
     f28:	ce 01       	movw	r24, r28
     f2a:	80 5a       	subi	r24, 0xA0	; 160
     f2c:	9f 4f       	sbci	r25, 0xFF	; 255
     f2e:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <_ZN6StringD1Ev>
	LCDMenuItem * MenuItem_TempAlarm = new LCDMenuItem("Temp Alarm",TempAlarmTgl);
     f32:	69 ea       	ldi	r22, 0xA9	; 169
     f34:	72 e0       	ldi	r23, 0x02	; 2
     f36:	ce 01       	movw	r24, r28
     f38:	86 5a       	subi	r24, 0xA6	; 166
     f3a:	9f 4f       	sbci	r25, 0xFF	; 255
     f3c:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
     f40:	8d e0       	ldi	r24, 0x0D	; 13
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	0e 94 36 31 	call	0x626c	; 0x626c <_Znwj>
     f48:	7c 01       	movw	r14, r24
     f4a:	a8 01       	movw	r20, r16
     f4c:	be 01       	movw	r22, r28
     f4e:	66 5a       	subi	r22, 0xA6	; 166
     f50:	7f 4f       	sbci	r23, 0xFF	; 255
     f52:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <_ZN11LCDMenuItemC1E6StringP15LCDToggleOption>
     f56:	ce 01       	movw	r24, r28
     f58:	86 5a       	subi	r24, 0xA6	; 166
     f5a:	9f 4f       	sbci	r25, 0xFF	; 255
     f5c:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <_ZN6StringD1Ev>
	
	LCDMenuItem * MenuItem_Back = new LCDMenuItem("Back",MainMenu);
     f60:	64 eb       	ldi	r22, 0xB4	; 180
     f62:	72 e0       	ldi	r23, 0x02	; 2
     f64:	ce 01       	movw	r24, r28
     f66:	8c 5a       	subi	r24, 0xAC	; 172
     f68:	9f 4f       	sbci	r25, 0xFF	; 255
     f6a:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
     f6e:	8d e0       	ldi	r24, 0x0D	; 13
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	0e 94 36 31 	call	0x626c	; 0x626c <_Znwj>
     f76:	8c 01       	movw	r16, r24
     f78:	a3 01       	movw	r20, r6
     f7a:	be 01       	movw	r22, r28
     f7c:	6c 5a       	subi	r22, 0xAC	; 172
     f7e:	7f 4f       	sbci	r23, 0xFF	; 255
     f80:	0e 94 b5 14 	call	0x296a	; 0x296a <_ZN11LCDMenuItemC1E6StringP7LCDMenu>
     f84:	ce 01       	movw	r24, r28
     f86:	8c 5a       	subi	r24, 0xAC	; 172
     f88:	9f 4f       	sbci	r25, 0xFF	; 255
     f8a:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <_ZN6StringD1Ev>
#include <string.h>

class LCDMenu;
class LCDToggleOption;
class UserInterface;
class LCDMenuItem
     f8e:	b6 01       	movw	r22, r12
     f90:	ce 01       	movw	r24, r28
     f92:	89 5b       	subi	r24, 0xB9	; 185
     f94:	9f 4f       	sbci	r25, 0xFF	; 255
     f96:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
     f9a:	f6 01       	movw	r30, r12
     f9c:	86 81       	ldd	r24, Z+6	; 0x06
     f9e:	2e 96       	adiw	r28, 0x0e	; 14
     fa0:	8f af       	std	Y+63, r24	; 0x3f
     fa2:	2e 97       	sbiw	r28, 0x0e	; 14
     fa4:	87 81       	ldd	r24, Z+7	; 0x07
     fa6:	90 85       	ldd	r25, Z+8	; 0x08
     fa8:	60 96       	adiw	r28, 0x10	; 16
     faa:	9f af       	std	Y+63, r25	; 0x3f
     fac:	8e af       	std	Y+62, r24	; 0x3e
     fae:	60 97       	sbiw	r28, 0x10	; 16
     fb0:	81 85       	ldd	r24, Z+9	; 0x09
     fb2:	92 85       	ldd	r25, Z+10	; 0x0a
     fb4:	62 96       	adiw	r28, 0x12	; 18
     fb6:	9f af       	std	Y+63, r25	; 0x3f
     fb8:	8e af       	std	Y+62, r24	; 0x3e
     fba:	62 97       	sbiw	r28, 0x12	; 18
     fbc:	83 85       	ldd	r24, Z+11	; 0x0b
     fbe:	94 85       	ldd	r25, Z+12	; 0x0c
     fc0:	64 96       	adiw	r28, 0x14	; 20
     fc2:	9f af       	std	Y+63, r25	; 0x3f
     fc4:	8e af       	std	Y+62, r24	; 0x3e
     fc6:	64 97       	sbiw	r28, 0x14	; 20
	
	MenuAlarmTest->Items.add(*MenuItem_TimerAlarm);
     fc8:	ce 53       	subi	r28, 0x3E	; 62
     fca:	df 4f       	sbci	r29, 0xFF	; 255
     fcc:	c8 80       	ld	r12, Y
     fce:	d9 80       	ldd	r13, Y+1	; 0x01
     fd0:	c2 5c       	subi	r28, 0xC2	; 194
     fd2:	d0 40       	sbci	r29, 0x00	; 0
     fd4:	f6 e0       	ldi	r31, 0x06	; 6
     fd6:	cf 0e       	add	r12, r31
     fd8:	d1 1c       	adc	r13, r1
     fda:	be 01       	movw	r22, r28
     fdc:	69 5b       	subi	r22, 0xB9	; 185
     fde:	7f 4f       	sbci	r23, 0xFF	; 255
     fe0:	c6 01       	movw	r24, r12
     fe2:	98 dc       	rcall	.-1744   	; 0x914 <_ZN10LinkedListI11LCDMenuItemE3addES0_>
     fe4:	ce 01       	movw	r24, r28
     fe6:	89 5b       	subi	r24, 0xB9	; 185
     fe8:	9f 4f       	sbci	r25, 0xFF	; 255
     fea:	0e 94 32 15 	call	0x2a64	; 0x2a64 <_ZN11LCDMenuItemD1Ev>
     fee:	b7 01       	movw	r22, r14
     ff0:	ce 01       	movw	r24, r28
     ff2:	ca 96       	adiw	r24, 0x3a	; 58
     ff4:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
     ff8:	f7 01       	movw	r30, r14
     ffa:	86 81       	ldd	r24, Z+6	; 0x06
     ffc:	21 96       	adiw	r28, 0x01	; 1
     ffe:	8f af       	std	Y+63, r24	; 0x3f
    1000:	21 97       	sbiw	r28, 0x01	; 1
    1002:	87 81       	ldd	r24, Z+7	; 0x07
    1004:	90 85       	ldd	r25, Z+8	; 0x08
    1006:	23 96       	adiw	r28, 0x03	; 3
    1008:	9f af       	std	Y+63, r25	; 0x3f
    100a:	8e af       	std	Y+62, r24	; 0x3e
    100c:	23 97       	sbiw	r28, 0x03	; 3
    100e:	81 85       	ldd	r24, Z+9	; 0x09
    1010:	92 85       	ldd	r25, Z+10	; 0x0a
    1012:	25 96       	adiw	r28, 0x05	; 5
    1014:	9f af       	std	Y+63, r25	; 0x3f
    1016:	8e af       	std	Y+62, r24	; 0x3e
    1018:	25 97       	sbiw	r28, 0x05	; 5
    101a:	83 85       	ldd	r24, Z+11	; 0x0b
    101c:	94 85       	ldd	r25, Z+12	; 0x0c
    101e:	27 96       	adiw	r28, 0x07	; 7
    1020:	9f af       	std	Y+63, r25	; 0x3f
    1022:	8e af       	std	Y+62, r24	; 0x3e
    1024:	27 97       	sbiw	r28, 0x07	; 7
	MenuAlarmTest->Items.add(*MenuItem_TempAlarm);
    1026:	be 01       	movw	r22, r28
    1028:	66 5c       	subi	r22, 0xC6	; 198
    102a:	7f 4f       	sbci	r23, 0xFF	; 255
    102c:	c6 01       	movw	r24, r12
    102e:	72 dc       	rcall	.-1820   	; 0x914 <_ZN10LinkedListI11LCDMenuItemE3addES0_>
    1030:	ce 01       	movw	r24, r28
    1032:	ca 96       	adiw	r24, 0x3a	; 58
    1034:	0e 94 32 15 	call	0x2a64	; 0x2a64 <_ZN11LCDMenuItemD1Ev>
    1038:	b8 01       	movw	r22, r16
    103a:	ce 01       	movw	r24, r28
    103c:	8d 96       	adiw	r24, 0x2d	; 45
    103e:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    1042:	f8 01       	movw	r30, r16
    1044:	86 81       	ldd	r24, Z+6	; 0x06
    1046:	8b ab       	std	Y+51, r24	; 0x33
    1048:	87 81       	ldd	r24, Z+7	; 0x07
    104a:	90 85       	ldd	r25, Z+8	; 0x08
    104c:	9d ab       	std	Y+53, r25	; 0x35
    104e:	8c ab       	std	Y+52, r24	; 0x34
    1050:	81 85       	ldd	r24, Z+9	; 0x09
    1052:	92 85       	ldd	r25, Z+10	; 0x0a
    1054:	9f ab       	std	Y+55, r25	; 0x37
    1056:	8e ab       	std	Y+54, r24	; 0x36
    1058:	83 85       	ldd	r24, Z+11	; 0x0b
    105a:	94 85       	ldd	r25, Z+12	; 0x0c
    105c:	99 af       	std	Y+57, r25	; 0x39
    105e:	88 af       	std	Y+56, r24	; 0x38
	MenuAlarmTest->Items.add(*MenuItem_Back);
    1060:	be 01       	movw	r22, r28
    1062:	63 5d       	subi	r22, 0xD3	; 211
    1064:	7f 4f       	sbci	r23, 0xFF	; 255
    1066:	c6 01       	movw	r24, r12
    1068:	55 dc       	rcall	.-1878   	; 0x914 <_ZN10LinkedListI11LCDMenuItemE3addES0_>
    106a:	ce 01       	movw	r24, r28
    106c:	8d 96       	adiw	r24, 0x2d	; 45
    106e:	0e 94 32 15 	call	0x2a64	; 0x2a64 <_ZN11LCDMenuItemD1Ev>
	
	/***************************************
	  Pump Monitor Page
	***************************************/
	LCDPage * PagePumpMonitor = new LCDPage("PumpMonitor");
    1072:	69 eb       	ldi	r22, 0xB9	; 185
    1074:	72 e0       	ldi	r23, 0x02	; 2
    1076:	ce 01       	movw	r24, r28
    1078:	87 96       	adiw	r24, 0x27	; 39
    107a:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
    107e:	89 e1       	ldi	r24, 0x19	; 25
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	0e 94 36 31 	call	0x626c	; 0x626c <_Znwj>
    1086:	cc 53       	subi	r28, 0x3C	; 60
    1088:	df 4f       	sbci	r29, 0xFF	; 255
    108a:	99 83       	std	Y+1, r25	; 0x01
    108c:	88 83       	st	Y, r24
    108e:	c4 5c       	subi	r28, 0xC4	; 196
    1090:	d0 40       	sbci	r29, 0x00	; 0
    1092:	be 01       	movw	r22, r28
    1094:	69 5d       	subi	r22, 0xD9	; 217
    1096:	7f 4f       	sbci	r23, 0xFF	; 255
    1098:	0e 94 1f 19 	call	0x323e	; 0x323e <_ZN7LCDPageC1E6String>
    109c:	ce 01       	movw	r24, r28
    109e:	87 96       	adiw	r24, 0x27	; 39
    10a0:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <_ZN6StringD1Ev>
	LCDPageItem * PageItem_Pump1Label = new LCDPageItem(0,0,new String("Pump#1"));
    10a4:	86 e0       	ldi	r24, 0x06	; 6
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	0e 94 36 31 	call	0x626c	; 0x626c <_Znwj>
    10ac:	8c 01       	movw	r16, r24
    10ae:	65 ec       	ldi	r22, 0xC5	; 197
    10b0:	72 e0       	ldi	r23, 0x02	; 2
    10b2:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
    10b6:	8c e3       	ldi	r24, 0x3C	; 60
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	0e 94 36 31 	call	0x626c	; 0x626c <_Znwj>
    10be:	4c 01       	movw	r8, r24
    10c0:	98 01       	movw	r18, r16
    10c2:	40 e0       	ldi	r20, 0x00	; 0
    10c4:	60 e0       	ldi	r22, 0x00	; 0
    10c6:	0e 94 1e 21 	call	0x423c	; 0x423c <_ZN11LCDPageItemC1EhhP6String>
	LCDPageItem * PageItem_Pump1Status = new LCDPageItem(0,7,new String("OFF"));
    10ca:	86 e0       	ldi	r24, 0x06	; 6
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	0e 94 36 31 	call	0x626c	; 0x626c <_Znwj>
    10d2:	8c 01       	movw	r16, r24
    10d4:	66 e1       	ldi	r22, 0x16	; 22
    10d6:	72 e0       	ldi	r23, 0x02	; 2
    10d8:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
    10dc:	8c e3       	ldi	r24, 0x3C	; 60
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	0e 94 36 31 	call	0x626c	; 0x626c <_Znwj>
    10e4:	5c 01       	movw	r10, r24
    10e6:	98 01       	movw	r18, r16
    10e8:	47 e0       	ldi	r20, 0x07	; 7
    10ea:	60 e0       	ldi	r22, 0x00	; 0
    10ec:	0e 94 1e 21 	call	0x423c	; 0x423c <_ZN11LCDPageItemC1EhhP6String>
	LCDPageItem * PageItem_Pump2Label = new LCDPageItem(1,0,new String("Pump#2"));
    10f0:	86 e0       	ldi	r24, 0x06	; 6
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	0e 94 36 31 	call	0x626c	; 0x626c <_Znwj>
    10f8:	8c 01       	movw	r16, r24
    10fa:	6c ec       	ldi	r22, 0xCC	; 204
    10fc:	72 e0       	ldi	r23, 0x02	; 2
    10fe:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
    1102:	8c e3       	ldi	r24, 0x3C	; 60
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	0e 94 36 31 	call	0x626c	; 0x626c <_Znwj>
    110a:	6c 01       	movw	r12, r24
    110c:	98 01       	movw	r18, r16
    110e:	40 e0       	ldi	r20, 0x00	; 0
    1110:	61 e0       	ldi	r22, 0x01	; 1
    1112:	0e 94 1e 21 	call	0x423c	; 0x423c <_ZN11LCDPageItemC1EhhP6String>
	LCDPageItem * PageItem_Pump2Status = new LCDPageItem(1,7,new String("OFF"));
    1116:	86 e0       	ldi	r24, 0x06	; 6
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	0e 94 36 31 	call	0x626c	; 0x626c <_Znwj>
    111e:	8c 01       	movw	r16, r24
    1120:	66 e1       	ldi	r22, 0x16	; 22
    1122:	72 e0       	ldi	r23, 0x02	; 2
    1124:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
    1128:	8c e3       	ldi	r24, 0x3C	; 60
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	0e 94 36 31 	call	0x626c	; 0x626c <_Znwj>
    1130:	7c 01       	movw	r14, r24
    1132:	98 01       	movw	r18, r16
    1134:	47 e0       	ldi	r20, 0x07	; 7
    1136:	61 e0       	ldi	r22, 0x01	; 1
    1138:	0e 94 1e 21 	call	0x423c	; 0x423c <_ZN11LCDPageItemC1EhhP6String>
	LCDPageItem * PageItem_ExecTimeLabel = new LCDPageItem(3,0,new String("Time:"));
    113c:	86 e0       	ldi	r24, 0x06	; 6
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	0e 94 36 31 	call	0x626c	; 0x626c <_Znwj>
    1144:	8c 01       	movw	r16, r24
    1146:	63 ed       	ldi	r22, 0xD3	; 211
    1148:	72 e0       	ldi	r23, 0x02	; 2
    114a:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
    114e:	8c e3       	ldi	r24, 0x3C	; 60
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	0e 94 36 31 	call	0x626c	; 0x626c <_Znwj>
    1156:	98 01       	movw	r18, r16
    1158:	40 e0       	ldi	r20, 0x00	; 0
    115a:	63 e0       	ldi	r22, 0x03	; 3
    115c:	0e 94 1e 21 	call	0x423c	; 0x423c <_ZN11LCDPageItemC1EhhP6String>
	LCDPageItem * PageItem_ExecStatus = new LCDPageItem(3,6,(float)1.234);
    1160:	8c e3       	ldi	r24, 0x3C	; 60
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	0e 94 36 31 	call	0x626c	; 0x626c <_Znwj>
    1168:	06 eb       	ldi	r16, 0xB6	; 182
    116a:	13 ef       	ldi	r17, 0xF3	; 243
    116c:	2d e9       	ldi	r18, 0x9D	; 157
    116e:	3f e3       	ldi	r19, 0x3F	; 63
    1170:	46 e0       	ldi	r20, 0x06	; 6
    1172:	63 e0       	ldi	r22, 0x03	; 3
    1174:	0e 94 bd 20 	call	0x417a	; 0x417a <_ZN11LCDPageItemC1Ehhf>
    1178:	f4 01       	movw	r30, r8
    117a:	80 81       	ld	r24, Z
    117c:	cc 57       	subi	r28, 0x7C	; 124
    117e:	df 4f       	sbci	r29, 0xFF	; 255
    1180:	88 83       	st	Y, r24
    1182:	c4 58       	subi	r28, 0x84	; 132
    1184:	d0 40       	sbci	r29, 0x00	; 0
    1186:	81 81       	ldd	r24, Z+1	; 0x01
    1188:	cb 57       	subi	r28, 0x7B	; 123
    118a:	df 4f       	sbci	r29, 0xFF	; 255
    118c:	88 83       	st	Y, r24
    118e:	c5 58       	subi	r28, 0x85	; 133
    1190:	d0 40       	sbci	r29, 0x00	; 0
    1192:	82 81       	ldd	r24, Z+2	; 0x02
    1194:	ca 57       	subi	r28, 0x7A	; 122
    1196:	df 4f       	sbci	r29, 0xFF	; 255
    1198:	88 83       	st	Y, r24
    119a:	c6 58       	subi	r28, 0x86	; 134
    119c:	d0 40       	sbci	r29, 0x00	; 0
    119e:	b4 01       	movw	r22, r8
    11a0:	6d 5f       	subi	r22, 0xFD	; 253
    11a2:	7f 4f       	sbci	r23, 0xFF	; 255
    11a4:	04 e8       	ldi	r16, 0x84	; 132
    11a6:	10 e0       	ldi	r17, 0x00	; 0
    11a8:	0c 0f       	add	r16, r28
    11aa:	1d 1f       	adc	r17, r29
    11ac:	0d 5f       	subi	r16, 0xFD	; 253
    11ae:	1f 4f       	sbci	r17, 0xFF	; 255
    11b0:	c8 01       	movw	r24, r16
    11b2:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    11b6:	f4 01       	movw	r30, r8
    11b8:	81 85       	ldd	r24, Z+9	; 0x09
    11ba:	92 85       	ldd	r25, Z+10	; 0x0a
    11bc:	a3 85       	ldd	r26, Z+11	; 0x0b
    11be:	b4 85       	ldd	r27, Z+12	; 0x0c
    11c0:	c3 57       	subi	r28, 0x73	; 115
    11c2:	df 4f       	sbci	r29, 0xFF	; 255
    11c4:	88 83       	st	Y, r24
    11c6:	99 83       	std	Y+1, r25	; 0x01
    11c8:	aa 83       	std	Y+2, r26	; 0x02
    11ca:	bb 83       	std	Y+3, r27	; 0x03
    11cc:	cd 58       	subi	r28, 0x8D	; 141
    11ce:	d0 40       	sbci	r29, 0x00	; 0
    11d0:	85 85       	ldd	r24, Z+13	; 0x0d
    11d2:	cf 56       	subi	r28, 0x6F	; 111
    11d4:	df 4f       	sbci	r29, 0xFF	; 255
    11d6:	88 83       	st	Y, r24
    11d8:	c1 59       	subi	r28, 0x91	; 145
    11da:	d0 40       	sbci	r29, 0x00	; 0
    11dc:	86 85       	ldd	r24, Z+14	; 0x0e
    11de:	97 85       	ldd	r25, Z+15	; 0x0f
    11e0:	ce 56       	subi	r28, 0x6E	; 110
    11e2:	df 4f       	sbci	r29, 0xFF	; 255
    11e4:	99 83       	std	Y+1, r25	; 0x01
    11e6:	88 83       	st	Y, r24
    11e8:	c2 59       	subi	r28, 0x92	; 146
    11ea:	d0 40       	sbci	r29, 0x00	; 0
    11ec:	80 89       	ldd	r24, Z+16	; 0x10
    11ee:	91 89       	ldd	r25, Z+17	; 0x11
    11f0:	cc 56       	subi	r28, 0x6C	; 108
    11f2:	df 4f       	sbci	r29, 0xFF	; 255
    11f4:	99 83       	std	Y+1, r25	; 0x01
    11f6:	88 83       	st	Y, r24
    11f8:	c4 59       	subi	r28, 0x94	; 148
    11fa:	d0 40       	sbci	r29, 0x00	; 0
    11fc:	82 89       	ldd	r24, Z+18	; 0x12
    11fe:	93 89       	ldd	r25, Z+19	; 0x13
    1200:	ca 56       	subi	r28, 0x6A	; 106
    1202:	df 4f       	sbci	r29, 0xFF	; 255
    1204:	99 83       	std	Y+1, r25	; 0x01
    1206:	88 83       	st	Y, r24
    1208:	c6 59       	subi	r28, 0x96	; 150
    120a:	d0 40       	sbci	r29, 0x00	; 0
    120c:	84 89       	ldd	r24, Z+20	; 0x14
    120e:	95 89       	ldd	r25, Z+21	; 0x15
    1210:	c8 56       	subi	r28, 0x68	; 104
    1212:	df 4f       	sbci	r29, 0xFF	; 255
    1214:	99 83       	std	Y+1, r25	; 0x01
    1216:	88 83       	st	Y, r24
    1218:	c8 59       	subi	r28, 0x98	; 152
    121a:	d0 40       	sbci	r29, 0x00	; 0
    121c:	86 89       	ldd	r24, Z+22	; 0x16
    121e:	97 89       	ldd	r25, Z+23	; 0x17
    1220:	c6 56       	subi	r28, 0x66	; 102
    1222:	df 4f       	sbci	r29, 0xFF	; 255
    1224:	99 83       	std	Y+1, r25	; 0x01
    1226:	88 83       	st	Y, r24
    1228:	ca 59       	subi	r28, 0x9A	; 154
    122a:	d0 40       	sbci	r29, 0x00	; 0
    122c:	b4 01       	movw	r22, r8
    122e:	68 5e       	subi	r22, 0xE8	; 232
    1230:	7f 4f       	sbci	r23, 0xFF	; 255
    1232:	84 e8       	ldi	r24, 0x84	; 132
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	8c 0f       	add	r24, r28
    1238:	9d 1f       	adc	r25, r29
    123a:	48 96       	adiw	r24, 0x18	; 24
    123c:	c0 54       	subi	r28, 0x40	; 64
    123e:	df 4f       	sbci	r29, 0xFF	; 255
    1240:	99 83       	std	Y+1, r25	; 0x01
    1242:	88 83       	st	Y, r24
    1244:	c0 5c       	subi	r28, 0xC0	; 192
    1246:	d0 40       	sbci	r29, 0x00	; 0
    1248:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    124c:	b4 01       	movw	r22, r8
    124e:	62 5e       	subi	r22, 0xE2	; 226
    1250:	7f 4f       	sbci	r23, 0xFF	; 255
    1252:	0f 2e       	mov	r0, r31
    1254:	f4 e8       	ldi	r31, 0x84	; 132
    1256:	4f 2e       	mov	r4, r31
    1258:	51 2c       	mov	r5, r1
    125a:	f0 2d       	mov	r31, r0
    125c:	4c 0e       	add	r4, r28
    125e:	5d 1e       	adc	r5, r29
    1260:	9e e1       	ldi	r25, 0x1E	; 30
    1262:	49 0e       	add	r4, r25
    1264:	51 1c       	adc	r5, r1
    1266:	c2 01       	movw	r24, r4
    1268:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    126c:	f4 01       	movw	r30, r8
    126e:	84 a1       	ldd	r24, Z+36	; 0x24
    1270:	95 a1       	ldd	r25, Z+37	; 0x25
    1272:	c8 55       	subi	r28, 0x58	; 88
    1274:	df 4f       	sbci	r29, 0xFF	; 255
    1276:	99 83       	std	Y+1, r25	; 0x01
    1278:	88 83       	st	Y, r24
    127a:	c8 5a       	subi	r28, 0xA8	; 168
    127c:	d0 40       	sbci	r29, 0x00	; 0
    127e:	86 a1       	ldd	r24, Z+38	; 0x26
    1280:	97 a1       	ldd	r25, Z+39	; 0x27
    1282:	c6 55       	subi	r28, 0x56	; 86
    1284:	df 4f       	sbci	r29, 0xFF	; 255
    1286:	99 83       	std	Y+1, r25	; 0x01
    1288:	88 83       	st	Y, r24
    128a:	ca 5a       	subi	r28, 0xAA	; 170
    128c:	d0 40       	sbci	r29, 0x00	; 0
    128e:	80 a5       	ldd	r24, Z+40	; 0x28
    1290:	91 a5       	ldd	r25, Z+41	; 0x29
    1292:	c4 55       	subi	r28, 0x54	; 84
    1294:	df 4f       	sbci	r29, 0xFF	; 255
    1296:	99 83       	std	Y+1, r25	; 0x01
    1298:	88 83       	st	Y, r24
    129a:	cc 5a       	subi	r28, 0xAC	; 172
    129c:	d0 40       	sbci	r29, 0x00	; 0
    129e:	82 a5       	ldd	r24, Z+42	; 0x2a
    12a0:	93 a5       	ldd	r25, Z+43	; 0x2b
    12a2:	c2 55       	subi	r28, 0x52	; 82
    12a4:	df 4f       	sbci	r29, 0xFF	; 255
    12a6:	99 83       	std	Y+1, r25	; 0x01
    12a8:	88 83       	st	Y, r24
    12aa:	ce 5a       	subi	r28, 0xAE	; 174
    12ac:	d0 40       	sbci	r29, 0x00	; 0
    12ae:	84 a5       	ldd	r24, Z+44	; 0x2c
    12b0:	95 a5       	ldd	r25, Z+45	; 0x2d
    12b2:	c0 55       	subi	r28, 0x50	; 80
    12b4:	df 4f       	sbci	r29, 0xFF	; 255
    12b6:	99 83       	std	Y+1, r25	; 0x01
    12b8:	88 83       	st	Y, r24
    12ba:	c0 5b       	subi	r28, 0xB0	; 176
    12bc:	d0 40       	sbci	r29, 0x00	; 0
    12be:	86 a5       	ldd	r24, Z+46	; 0x2e
    12c0:	97 a5       	ldd	r25, Z+47	; 0x2f
    12c2:	ce 54       	subi	r28, 0x4E	; 78
    12c4:	df 4f       	sbci	r29, 0xFF	; 255
    12c6:	99 83       	std	Y+1, r25	; 0x01
    12c8:	88 83       	st	Y, r24
    12ca:	c2 5b       	subi	r28, 0xB2	; 178
    12cc:	d0 40       	sbci	r29, 0x00	; 0
    12ce:	80 a9       	ldd	r24, Z+48	; 0x30
    12d0:	91 a9       	ldd	r25, Z+49	; 0x31
    12d2:	cc 54       	subi	r28, 0x4C	; 76
    12d4:	df 4f       	sbci	r29, 0xFF	; 255
    12d6:	99 83       	std	Y+1, r25	; 0x01
    12d8:	88 83       	st	Y, r24
    12da:	c4 5b       	subi	r28, 0xB4	; 180
    12dc:	d0 40       	sbci	r29, 0x00	; 0
    12de:	b4 01       	movw	r22, r8
    12e0:	6e 5c       	subi	r22, 0xCE	; 206
    12e2:	7f 4f       	sbci	r23, 0xFF	; 255
    12e4:	0f 2e       	mov	r0, r31
    12e6:	f4 e8       	ldi	r31, 0x84	; 132
    12e8:	2f 2e       	mov	r2, r31
    12ea:	31 2c       	mov	r3, r1
    12ec:	f0 2d       	mov	r31, r0
    12ee:	2c 0e       	add	r2, r28
    12f0:	3d 1e       	adc	r3, r29
    12f2:	f2 e3       	ldi	r31, 0x32	; 50
    12f4:	2f 0e       	add	r2, r31
    12f6:	31 1c       	adc	r3, r1
    12f8:	c1 01       	movw	r24, r2
    12fa:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    12fe:	f4 01       	movw	r30, r8
    1300:	80 ad       	ldd	r24, Z+56	; 0x38
    1302:	91 ad       	ldd	r25, Z+57	; 0x39
    1304:	c4 54       	subi	r28, 0x44	; 68
    1306:	df 4f       	sbci	r29, 0xFF	; 255
    1308:	99 83       	std	Y+1, r25	; 0x01
    130a:	88 83       	st	Y, r24
    130c:	cc 5b       	subi	r28, 0xBC	; 188
    130e:	d0 40       	sbci	r29, 0x00	; 0
    1310:	82 ad       	ldd	r24, Z+58	; 0x3a
    1312:	93 ad       	ldd	r25, Z+59	; 0x3b
    1314:	c2 54       	subi	r28, 0x42	; 66
    1316:	df 4f       	sbci	r29, 0xFF	; 255
    1318:	99 83       	std	Y+1, r25	; 0x01
    131a:	88 83       	st	Y, r24
    131c:	ce 5b       	subi	r28, 0xBE	; 190
    131e:	d0 40       	sbci	r29, 0x00	; 0
	
	PagePumpMonitor->Items.add(*PageItem_Pump1Label);
    1320:	cc 53       	subi	r28, 0x3C	; 60
    1322:	df 4f       	sbci	r29, 0xFF	; 255
    1324:	88 80       	ld	r8, Y
    1326:	99 80       	ldd	r9, Y+1	; 0x01
    1328:	c4 5c       	subi	r28, 0xC4	; 196
    132a:	d0 40       	sbci	r29, 0x00	; 0
    132c:	f8 e0       	ldi	r31, 0x08	; 8
    132e:	8f 0e       	add	r8, r31
    1330:	91 1c       	adc	r9, r1
    1332:	be 01       	movw	r22, r28
    1334:	6c 57       	subi	r22, 0x7C	; 124
    1336:	7f 4f       	sbci	r23, 0xFF	; 255
    1338:	c4 01       	movw	r24, r8
    133a:	78 dc       	rcall	.-1808   	; 0xc2c <_ZN10LinkedListI11LCDPageItemE3addES0_>
    133c:	ce 01       	movw	r24, r28
    133e:	8c 57       	subi	r24, 0x7C	; 124
    1340:	9f 4f       	sbci	r25, 0xFF	; 255
    1342:	0e 94 a8 20 	call	0x4150	; 0x4150 <_ZN11LCDPageItemD1Ev>
    1346:	f5 01       	movw	r30, r10
    1348:	80 81       	ld	r24, Z
    134a:	cc 57       	subi	r28, 0x7C	; 124
    134c:	df 4f       	sbci	r29, 0xFF	; 255
    134e:	88 83       	st	Y, r24
    1350:	c4 58       	subi	r28, 0x84	; 132
    1352:	d0 40       	sbci	r29, 0x00	; 0
    1354:	81 81       	ldd	r24, Z+1	; 0x01
    1356:	cb 57       	subi	r28, 0x7B	; 123
    1358:	df 4f       	sbci	r29, 0xFF	; 255
    135a:	88 83       	st	Y, r24
    135c:	c5 58       	subi	r28, 0x85	; 133
    135e:	d0 40       	sbci	r29, 0x00	; 0
    1360:	82 81       	ldd	r24, Z+2	; 0x02
    1362:	ca 57       	subi	r28, 0x7A	; 122
    1364:	df 4f       	sbci	r29, 0xFF	; 255
    1366:	88 83       	st	Y, r24
    1368:	c6 58       	subi	r28, 0x86	; 134
    136a:	d0 40       	sbci	r29, 0x00	; 0
    136c:	b5 01       	movw	r22, r10
    136e:	6d 5f       	subi	r22, 0xFD	; 253
    1370:	7f 4f       	sbci	r23, 0xFF	; 255
    1372:	c8 01       	movw	r24, r16
    1374:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    1378:	f5 01       	movw	r30, r10
    137a:	81 85       	ldd	r24, Z+9	; 0x09
    137c:	92 85       	ldd	r25, Z+10	; 0x0a
    137e:	a3 85       	ldd	r26, Z+11	; 0x0b
    1380:	b4 85       	ldd	r27, Z+12	; 0x0c
    1382:	c3 57       	subi	r28, 0x73	; 115
    1384:	df 4f       	sbci	r29, 0xFF	; 255
    1386:	88 83       	st	Y, r24
    1388:	99 83       	std	Y+1, r25	; 0x01
    138a:	aa 83       	std	Y+2, r26	; 0x02
    138c:	bb 83       	std	Y+3, r27	; 0x03
    138e:	cd 58       	subi	r28, 0x8D	; 141
    1390:	d0 40       	sbci	r29, 0x00	; 0
    1392:	85 85       	ldd	r24, Z+13	; 0x0d
    1394:	cf 56       	subi	r28, 0x6F	; 111
    1396:	df 4f       	sbci	r29, 0xFF	; 255
    1398:	88 83       	st	Y, r24
    139a:	c1 59       	subi	r28, 0x91	; 145
    139c:	d0 40       	sbci	r29, 0x00	; 0
    139e:	86 85       	ldd	r24, Z+14	; 0x0e
    13a0:	97 85       	ldd	r25, Z+15	; 0x0f
    13a2:	ce 56       	subi	r28, 0x6E	; 110
    13a4:	df 4f       	sbci	r29, 0xFF	; 255
    13a6:	99 83       	std	Y+1, r25	; 0x01
    13a8:	88 83       	st	Y, r24
    13aa:	c2 59       	subi	r28, 0x92	; 146
    13ac:	d0 40       	sbci	r29, 0x00	; 0
    13ae:	80 89       	ldd	r24, Z+16	; 0x10
    13b0:	91 89       	ldd	r25, Z+17	; 0x11
    13b2:	cc 56       	subi	r28, 0x6C	; 108
    13b4:	df 4f       	sbci	r29, 0xFF	; 255
    13b6:	99 83       	std	Y+1, r25	; 0x01
    13b8:	88 83       	st	Y, r24
    13ba:	c4 59       	subi	r28, 0x94	; 148
    13bc:	d0 40       	sbci	r29, 0x00	; 0
    13be:	82 89       	ldd	r24, Z+18	; 0x12
    13c0:	93 89       	ldd	r25, Z+19	; 0x13
    13c2:	ca 56       	subi	r28, 0x6A	; 106
    13c4:	df 4f       	sbci	r29, 0xFF	; 255
    13c6:	99 83       	std	Y+1, r25	; 0x01
    13c8:	88 83       	st	Y, r24
    13ca:	c6 59       	subi	r28, 0x96	; 150
    13cc:	d0 40       	sbci	r29, 0x00	; 0
    13ce:	84 89       	ldd	r24, Z+20	; 0x14
    13d0:	95 89       	ldd	r25, Z+21	; 0x15
    13d2:	c8 56       	subi	r28, 0x68	; 104
    13d4:	df 4f       	sbci	r29, 0xFF	; 255
    13d6:	99 83       	std	Y+1, r25	; 0x01
    13d8:	88 83       	st	Y, r24
    13da:	c8 59       	subi	r28, 0x98	; 152
    13dc:	d0 40       	sbci	r29, 0x00	; 0
    13de:	86 89       	ldd	r24, Z+22	; 0x16
    13e0:	97 89       	ldd	r25, Z+23	; 0x17
    13e2:	c6 56       	subi	r28, 0x66	; 102
    13e4:	df 4f       	sbci	r29, 0xFF	; 255
    13e6:	99 83       	std	Y+1, r25	; 0x01
    13e8:	88 83       	st	Y, r24
    13ea:	ca 59       	subi	r28, 0x9A	; 154
    13ec:	d0 40       	sbci	r29, 0x00	; 0
    13ee:	b5 01       	movw	r22, r10
    13f0:	68 5e       	subi	r22, 0xE8	; 232
    13f2:	7f 4f       	sbci	r23, 0xFF	; 255
    13f4:	c0 54       	subi	r28, 0x40	; 64
    13f6:	df 4f       	sbci	r29, 0xFF	; 255
    13f8:	88 81       	ld	r24, Y
    13fa:	99 81       	ldd	r25, Y+1	; 0x01
    13fc:	c0 5c       	subi	r28, 0xC0	; 192
    13fe:	d0 40       	sbci	r29, 0x00	; 0
    1400:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    1404:	b5 01       	movw	r22, r10
    1406:	62 5e       	subi	r22, 0xE2	; 226
    1408:	7f 4f       	sbci	r23, 0xFF	; 255
    140a:	c2 01       	movw	r24, r4
    140c:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    1410:	f5 01       	movw	r30, r10
    1412:	84 a1       	ldd	r24, Z+36	; 0x24
    1414:	95 a1       	ldd	r25, Z+37	; 0x25
    1416:	c8 55       	subi	r28, 0x58	; 88
    1418:	df 4f       	sbci	r29, 0xFF	; 255
    141a:	99 83       	std	Y+1, r25	; 0x01
    141c:	88 83       	st	Y, r24
    141e:	c8 5a       	subi	r28, 0xA8	; 168
    1420:	d0 40       	sbci	r29, 0x00	; 0
    1422:	86 a1       	ldd	r24, Z+38	; 0x26
    1424:	97 a1       	ldd	r25, Z+39	; 0x27
    1426:	c6 55       	subi	r28, 0x56	; 86
    1428:	df 4f       	sbci	r29, 0xFF	; 255
    142a:	99 83       	std	Y+1, r25	; 0x01
    142c:	88 83       	st	Y, r24
    142e:	ca 5a       	subi	r28, 0xAA	; 170
    1430:	d0 40       	sbci	r29, 0x00	; 0
    1432:	80 a5       	ldd	r24, Z+40	; 0x28
    1434:	91 a5       	ldd	r25, Z+41	; 0x29
    1436:	c4 55       	subi	r28, 0x54	; 84
    1438:	df 4f       	sbci	r29, 0xFF	; 255
    143a:	99 83       	std	Y+1, r25	; 0x01
    143c:	88 83       	st	Y, r24
    143e:	cc 5a       	subi	r28, 0xAC	; 172
    1440:	d0 40       	sbci	r29, 0x00	; 0
    1442:	82 a5       	ldd	r24, Z+42	; 0x2a
    1444:	93 a5       	ldd	r25, Z+43	; 0x2b
    1446:	c2 55       	subi	r28, 0x52	; 82
    1448:	df 4f       	sbci	r29, 0xFF	; 255
    144a:	99 83       	std	Y+1, r25	; 0x01
    144c:	88 83       	st	Y, r24
    144e:	ce 5a       	subi	r28, 0xAE	; 174
    1450:	d0 40       	sbci	r29, 0x00	; 0
    1452:	84 a5       	ldd	r24, Z+44	; 0x2c
    1454:	95 a5       	ldd	r25, Z+45	; 0x2d
    1456:	c0 55       	subi	r28, 0x50	; 80
    1458:	df 4f       	sbci	r29, 0xFF	; 255
    145a:	99 83       	std	Y+1, r25	; 0x01
    145c:	88 83       	st	Y, r24
    145e:	c0 5b       	subi	r28, 0xB0	; 176
    1460:	d0 40       	sbci	r29, 0x00	; 0
    1462:	86 a5       	ldd	r24, Z+46	; 0x2e
    1464:	97 a5       	ldd	r25, Z+47	; 0x2f
    1466:	ce 54       	subi	r28, 0x4E	; 78
    1468:	df 4f       	sbci	r29, 0xFF	; 255
    146a:	99 83       	std	Y+1, r25	; 0x01
    146c:	88 83       	st	Y, r24
    146e:	c2 5b       	subi	r28, 0xB2	; 178
    1470:	d0 40       	sbci	r29, 0x00	; 0
    1472:	80 a9       	ldd	r24, Z+48	; 0x30
    1474:	91 a9       	ldd	r25, Z+49	; 0x31
    1476:	cc 54       	subi	r28, 0x4C	; 76
    1478:	df 4f       	sbci	r29, 0xFF	; 255
    147a:	99 83       	std	Y+1, r25	; 0x01
    147c:	88 83       	st	Y, r24
    147e:	c4 5b       	subi	r28, 0xB4	; 180
    1480:	d0 40       	sbci	r29, 0x00	; 0
    1482:	b5 01       	movw	r22, r10
    1484:	6e 5c       	subi	r22, 0xCE	; 206
    1486:	7f 4f       	sbci	r23, 0xFF	; 255
    1488:	c1 01       	movw	r24, r2
    148a:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    148e:	f5 01       	movw	r30, r10
    1490:	80 ad       	ldd	r24, Z+56	; 0x38
    1492:	91 ad       	ldd	r25, Z+57	; 0x39
    1494:	c4 54       	subi	r28, 0x44	; 68
    1496:	df 4f       	sbci	r29, 0xFF	; 255
    1498:	99 83       	std	Y+1, r25	; 0x01
    149a:	88 83       	st	Y, r24
    149c:	cc 5b       	subi	r28, 0xBC	; 188
    149e:	d0 40       	sbci	r29, 0x00	; 0
    14a0:	82 ad       	ldd	r24, Z+58	; 0x3a
    14a2:	93 ad       	ldd	r25, Z+59	; 0x3b
    14a4:	c2 54       	subi	r28, 0x42	; 66
    14a6:	df 4f       	sbci	r29, 0xFF	; 255
    14a8:	99 83       	std	Y+1, r25	; 0x01
    14aa:	88 83       	st	Y, r24
    14ac:	ce 5b       	subi	r28, 0xBE	; 190
    14ae:	d0 40       	sbci	r29, 0x00	; 0
	PagePumpMonitor->Items.add(*PageItem_Pump1Status);
    14b0:	be 01       	movw	r22, r28
    14b2:	6c 57       	subi	r22, 0x7C	; 124
    14b4:	7f 4f       	sbci	r23, 0xFF	; 255
    14b6:	c4 01       	movw	r24, r8
    14b8:	b9 db       	rcall	.-2190   	; 0xc2c <_ZN10LinkedListI11LCDPageItemE3addES0_>
    14ba:	ce 01       	movw	r24, r28
    14bc:	8c 57       	subi	r24, 0x7C	; 124
    14be:	9f 4f       	sbci	r25, 0xFF	; 255
    14c0:	0e 94 a8 20 	call	0x4150	; 0x4150 <_ZN11LCDPageItemD1Ev>
    14c4:	f6 01       	movw	r30, r12
    14c6:	80 81       	ld	r24, Z
    14c8:	cc 57       	subi	r28, 0x7C	; 124
    14ca:	df 4f       	sbci	r29, 0xFF	; 255
    14cc:	88 83       	st	Y, r24
    14ce:	c4 58       	subi	r28, 0x84	; 132
    14d0:	d0 40       	sbci	r29, 0x00	; 0
    14d2:	81 81       	ldd	r24, Z+1	; 0x01
    14d4:	cb 57       	subi	r28, 0x7B	; 123
    14d6:	df 4f       	sbci	r29, 0xFF	; 255
    14d8:	88 83       	st	Y, r24
    14da:	c5 58       	subi	r28, 0x85	; 133
    14dc:	d0 40       	sbci	r29, 0x00	; 0
    14de:	82 81       	ldd	r24, Z+2	; 0x02
    14e0:	ca 57       	subi	r28, 0x7A	; 122
    14e2:	df 4f       	sbci	r29, 0xFF	; 255
    14e4:	88 83       	st	Y, r24
    14e6:	c6 58       	subi	r28, 0x86	; 134
    14e8:	d0 40       	sbci	r29, 0x00	; 0
    14ea:	b6 01       	movw	r22, r12
    14ec:	6d 5f       	subi	r22, 0xFD	; 253
    14ee:	7f 4f       	sbci	r23, 0xFF	; 255
    14f0:	c8 01       	movw	r24, r16
    14f2:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    14f6:	f6 01       	movw	r30, r12
    14f8:	81 85       	ldd	r24, Z+9	; 0x09
    14fa:	92 85       	ldd	r25, Z+10	; 0x0a
    14fc:	a3 85       	ldd	r26, Z+11	; 0x0b
    14fe:	b4 85       	ldd	r27, Z+12	; 0x0c
    1500:	c3 57       	subi	r28, 0x73	; 115
    1502:	df 4f       	sbci	r29, 0xFF	; 255
    1504:	88 83       	st	Y, r24
    1506:	99 83       	std	Y+1, r25	; 0x01
    1508:	aa 83       	std	Y+2, r26	; 0x02
    150a:	bb 83       	std	Y+3, r27	; 0x03
    150c:	cd 58       	subi	r28, 0x8D	; 141
    150e:	d0 40       	sbci	r29, 0x00	; 0
    1510:	85 85       	ldd	r24, Z+13	; 0x0d
    1512:	cf 56       	subi	r28, 0x6F	; 111
    1514:	df 4f       	sbci	r29, 0xFF	; 255
    1516:	88 83       	st	Y, r24
    1518:	c1 59       	subi	r28, 0x91	; 145
    151a:	d0 40       	sbci	r29, 0x00	; 0
    151c:	86 85       	ldd	r24, Z+14	; 0x0e
    151e:	97 85       	ldd	r25, Z+15	; 0x0f
    1520:	ce 56       	subi	r28, 0x6E	; 110
    1522:	df 4f       	sbci	r29, 0xFF	; 255
    1524:	99 83       	std	Y+1, r25	; 0x01
    1526:	88 83       	st	Y, r24
    1528:	c2 59       	subi	r28, 0x92	; 146
    152a:	d0 40       	sbci	r29, 0x00	; 0
    152c:	80 89       	ldd	r24, Z+16	; 0x10
    152e:	91 89       	ldd	r25, Z+17	; 0x11
    1530:	cc 56       	subi	r28, 0x6C	; 108
    1532:	df 4f       	sbci	r29, 0xFF	; 255
    1534:	99 83       	std	Y+1, r25	; 0x01
    1536:	88 83       	st	Y, r24
    1538:	c4 59       	subi	r28, 0x94	; 148
    153a:	d0 40       	sbci	r29, 0x00	; 0
    153c:	82 89       	ldd	r24, Z+18	; 0x12
    153e:	93 89       	ldd	r25, Z+19	; 0x13
    1540:	ca 56       	subi	r28, 0x6A	; 106
    1542:	df 4f       	sbci	r29, 0xFF	; 255
    1544:	99 83       	std	Y+1, r25	; 0x01
    1546:	88 83       	st	Y, r24
    1548:	c6 59       	subi	r28, 0x96	; 150
    154a:	d0 40       	sbci	r29, 0x00	; 0
    154c:	84 89       	ldd	r24, Z+20	; 0x14
    154e:	95 89       	ldd	r25, Z+21	; 0x15
    1550:	c8 56       	subi	r28, 0x68	; 104
    1552:	df 4f       	sbci	r29, 0xFF	; 255
    1554:	99 83       	std	Y+1, r25	; 0x01
    1556:	88 83       	st	Y, r24
    1558:	c8 59       	subi	r28, 0x98	; 152
    155a:	d0 40       	sbci	r29, 0x00	; 0
    155c:	86 89       	ldd	r24, Z+22	; 0x16
    155e:	97 89       	ldd	r25, Z+23	; 0x17
    1560:	c6 56       	subi	r28, 0x66	; 102
    1562:	df 4f       	sbci	r29, 0xFF	; 255
    1564:	99 83       	std	Y+1, r25	; 0x01
    1566:	88 83       	st	Y, r24
    1568:	ca 59       	subi	r28, 0x9A	; 154
    156a:	d0 40       	sbci	r29, 0x00	; 0
    156c:	b6 01       	movw	r22, r12
    156e:	68 5e       	subi	r22, 0xE8	; 232
    1570:	7f 4f       	sbci	r23, 0xFF	; 255
    1572:	c0 54       	subi	r28, 0x40	; 64
    1574:	df 4f       	sbci	r29, 0xFF	; 255
    1576:	88 81       	ld	r24, Y
    1578:	99 81       	ldd	r25, Y+1	; 0x01
    157a:	c0 5c       	subi	r28, 0xC0	; 192
    157c:	d0 40       	sbci	r29, 0x00	; 0
    157e:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    1582:	b6 01       	movw	r22, r12
    1584:	62 5e       	subi	r22, 0xE2	; 226
    1586:	7f 4f       	sbci	r23, 0xFF	; 255
    1588:	c2 01       	movw	r24, r4
    158a:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    158e:	f6 01       	movw	r30, r12
    1590:	84 a1       	ldd	r24, Z+36	; 0x24
    1592:	95 a1       	ldd	r25, Z+37	; 0x25
    1594:	c8 55       	subi	r28, 0x58	; 88
    1596:	df 4f       	sbci	r29, 0xFF	; 255
    1598:	99 83       	std	Y+1, r25	; 0x01
    159a:	88 83       	st	Y, r24
    159c:	c8 5a       	subi	r28, 0xA8	; 168
    159e:	d0 40       	sbci	r29, 0x00	; 0
    15a0:	86 a1       	ldd	r24, Z+38	; 0x26
    15a2:	97 a1       	ldd	r25, Z+39	; 0x27
    15a4:	c6 55       	subi	r28, 0x56	; 86
    15a6:	df 4f       	sbci	r29, 0xFF	; 255
    15a8:	99 83       	std	Y+1, r25	; 0x01
    15aa:	88 83       	st	Y, r24
    15ac:	ca 5a       	subi	r28, 0xAA	; 170
    15ae:	d0 40       	sbci	r29, 0x00	; 0
    15b0:	80 a5       	ldd	r24, Z+40	; 0x28
    15b2:	91 a5       	ldd	r25, Z+41	; 0x29
    15b4:	c4 55       	subi	r28, 0x54	; 84
    15b6:	df 4f       	sbci	r29, 0xFF	; 255
    15b8:	99 83       	std	Y+1, r25	; 0x01
    15ba:	88 83       	st	Y, r24
    15bc:	cc 5a       	subi	r28, 0xAC	; 172
    15be:	d0 40       	sbci	r29, 0x00	; 0
    15c0:	82 a5       	ldd	r24, Z+42	; 0x2a
    15c2:	93 a5       	ldd	r25, Z+43	; 0x2b
    15c4:	c2 55       	subi	r28, 0x52	; 82
    15c6:	df 4f       	sbci	r29, 0xFF	; 255
    15c8:	99 83       	std	Y+1, r25	; 0x01
    15ca:	88 83       	st	Y, r24
    15cc:	ce 5a       	subi	r28, 0xAE	; 174
    15ce:	d0 40       	sbci	r29, 0x00	; 0
    15d0:	84 a5       	ldd	r24, Z+44	; 0x2c
    15d2:	95 a5       	ldd	r25, Z+45	; 0x2d
    15d4:	c0 55       	subi	r28, 0x50	; 80
    15d6:	df 4f       	sbci	r29, 0xFF	; 255
    15d8:	99 83       	std	Y+1, r25	; 0x01
    15da:	88 83       	st	Y, r24
    15dc:	c0 5b       	subi	r28, 0xB0	; 176
    15de:	d0 40       	sbci	r29, 0x00	; 0
    15e0:	86 a5       	ldd	r24, Z+46	; 0x2e
    15e2:	97 a5       	ldd	r25, Z+47	; 0x2f
    15e4:	ce 54       	subi	r28, 0x4E	; 78
    15e6:	df 4f       	sbci	r29, 0xFF	; 255
    15e8:	99 83       	std	Y+1, r25	; 0x01
    15ea:	88 83       	st	Y, r24
    15ec:	c2 5b       	subi	r28, 0xB2	; 178
    15ee:	d0 40       	sbci	r29, 0x00	; 0
    15f0:	80 a9       	ldd	r24, Z+48	; 0x30
    15f2:	91 a9       	ldd	r25, Z+49	; 0x31
    15f4:	cc 54       	subi	r28, 0x4C	; 76
    15f6:	df 4f       	sbci	r29, 0xFF	; 255
    15f8:	99 83       	std	Y+1, r25	; 0x01
    15fa:	88 83       	st	Y, r24
    15fc:	c4 5b       	subi	r28, 0xB4	; 180
    15fe:	d0 40       	sbci	r29, 0x00	; 0
    1600:	b6 01       	movw	r22, r12
    1602:	6e 5c       	subi	r22, 0xCE	; 206
    1604:	7f 4f       	sbci	r23, 0xFF	; 255
    1606:	c1 01       	movw	r24, r2
    1608:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    160c:	f6 01       	movw	r30, r12
    160e:	80 ad       	ldd	r24, Z+56	; 0x38
    1610:	91 ad       	ldd	r25, Z+57	; 0x39
    1612:	c4 54       	subi	r28, 0x44	; 68
    1614:	df 4f       	sbci	r29, 0xFF	; 255
    1616:	99 83       	std	Y+1, r25	; 0x01
    1618:	88 83       	st	Y, r24
    161a:	cc 5b       	subi	r28, 0xBC	; 188
    161c:	d0 40       	sbci	r29, 0x00	; 0
    161e:	82 ad       	ldd	r24, Z+58	; 0x3a
    1620:	93 ad       	ldd	r25, Z+59	; 0x3b
    1622:	c2 54       	subi	r28, 0x42	; 66
    1624:	df 4f       	sbci	r29, 0xFF	; 255
    1626:	99 83       	std	Y+1, r25	; 0x01
    1628:	88 83       	st	Y, r24
    162a:	ce 5b       	subi	r28, 0xBE	; 190
    162c:	d0 40       	sbci	r29, 0x00	; 0
	PagePumpMonitor->Items.add(*PageItem_Pump2Label);
    162e:	be 01       	movw	r22, r28
    1630:	6c 57       	subi	r22, 0x7C	; 124
    1632:	7f 4f       	sbci	r23, 0xFF	; 255
    1634:	c4 01       	movw	r24, r8
    1636:	fa da       	rcall	.-2572   	; 0xc2c <_ZN10LinkedListI11LCDPageItemE3addES0_>
    1638:	ce 01       	movw	r24, r28
    163a:	8c 57       	subi	r24, 0x7C	; 124
    163c:	9f 4f       	sbci	r25, 0xFF	; 255
    163e:	0e 94 a8 20 	call	0x4150	; 0x4150 <_ZN11LCDPageItemD1Ev>
    1642:	f7 01       	movw	r30, r14
    1644:	80 81       	ld	r24, Z
    1646:	cc 57       	subi	r28, 0x7C	; 124
    1648:	df 4f       	sbci	r29, 0xFF	; 255
    164a:	88 83       	st	Y, r24
    164c:	c4 58       	subi	r28, 0x84	; 132
    164e:	d0 40       	sbci	r29, 0x00	; 0
    1650:	81 81       	ldd	r24, Z+1	; 0x01
    1652:	cb 57       	subi	r28, 0x7B	; 123
    1654:	df 4f       	sbci	r29, 0xFF	; 255
    1656:	88 83       	st	Y, r24
    1658:	c5 58       	subi	r28, 0x85	; 133
    165a:	d0 40       	sbci	r29, 0x00	; 0
    165c:	82 81       	ldd	r24, Z+2	; 0x02
    165e:	ca 57       	subi	r28, 0x7A	; 122
    1660:	df 4f       	sbci	r29, 0xFF	; 255
    1662:	88 83       	st	Y, r24
    1664:	c6 58       	subi	r28, 0x86	; 134
    1666:	d0 40       	sbci	r29, 0x00	; 0
    1668:	b7 01       	movw	r22, r14
    166a:	6d 5f       	subi	r22, 0xFD	; 253
    166c:	7f 4f       	sbci	r23, 0xFF	; 255
    166e:	c8 01       	movw	r24, r16
    1670:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    1674:	f7 01       	movw	r30, r14
    1676:	81 85       	ldd	r24, Z+9	; 0x09
    1678:	92 85       	ldd	r25, Z+10	; 0x0a
    167a:	a3 85       	ldd	r26, Z+11	; 0x0b
    167c:	b4 85       	ldd	r27, Z+12	; 0x0c
    167e:	c3 57       	subi	r28, 0x73	; 115
    1680:	df 4f       	sbci	r29, 0xFF	; 255
    1682:	88 83       	st	Y, r24
    1684:	99 83       	std	Y+1, r25	; 0x01
    1686:	aa 83       	std	Y+2, r26	; 0x02
    1688:	bb 83       	std	Y+3, r27	; 0x03
    168a:	cd 58       	subi	r28, 0x8D	; 141
    168c:	d0 40       	sbci	r29, 0x00	; 0
    168e:	85 85       	ldd	r24, Z+13	; 0x0d
    1690:	cf 56       	subi	r28, 0x6F	; 111
    1692:	df 4f       	sbci	r29, 0xFF	; 255
    1694:	88 83       	st	Y, r24
    1696:	c1 59       	subi	r28, 0x91	; 145
    1698:	d0 40       	sbci	r29, 0x00	; 0
    169a:	86 85       	ldd	r24, Z+14	; 0x0e
    169c:	97 85       	ldd	r25, Z+15	; 0x0f
    169e:	ce 56       	subi	r28, 0x6E	; 110
    16a0:	df 4f       	sbci	r29, 0xFF	; 255
    16a2:	99 83       	std	Y+1, r25	; 0x01
    16a4:	88 83       	st	Y, r24
    16a6:	c2 59       	subi	r28, 0x92	; 146
    16a8:	d0 40       	sbci	r29, 0x00	; 0
    16aa:	80 89       	ldd	r24, Z+16	; 0x10
    16ac:	91 89       	ldd	r25, Z+17	; 0x11
    16ae:	cc 56       	subi	r28, 0x6C	; 108
    16b0:	df 4f       	sbci	r29, 0xFF	; 255
    16b2:	99 83       	std	Y+1, r25	; 0x01
    16b4:	88 83       	st	Y, r24
    16b6:	c4 59       	subi	r28, 0x94	; 148
    16b8:	d0 40       	sbci	r29, 0x00	; 0
    16ba:	82 89       	ldd	r24, Z+18	; 0x12
    16bc:	93 89       	ldd	r25, Z+19	; 0x13
    16be:	ca 56       	subi	r28, 0x6A	; 106
    16c0:	df 4f       	sbci	r29, 0xFF	; 255
    16c2:	99 83       	std	Y+1, r25	; 0x01
    16c4:	88 83       	st	Y, r24
    16c6:	c6 59       	subi	r28, 0x96	; 150
    16c8:	d0 40       	sbci	r29, 0x00	; 0
    16ca:	84 89       	ldd	r24, Z+20	; 0x14
    16cc:	95 89       	ldd	r25, Z+21	; 0x15
    16ce:	c8 56       	subi	r28, 0x68	; 104
    16d0:	df 4f       	sbci	r29, 0xFF	; 255
    16d2:	99 83       	std	Y+1, r25	; 0x01
    16d4:	88 83       	st	Y, r24
    16d6:	c8 59       	subi	r28, 0x98	; 152
    16d8:	d0 40       	sbci	r29, 0x00	; 0
    16da:	86 89       	ldd	r24, Z+22	; 0x16
    16dc:	97 89       	ldd	r25, Z+23	; 0x17
    16de:	c6 56       	subi	r28, 0x66	; 102
    16e0:	df 4f       	sbci	r29, 0xFF	; 255
    16e2:	99 83       	std	Y+1, r25	; 0x01
    16e4:	88 83       	st	Y, r24
    16e6:	ca 59       	subi	r28, 0x9A	; 154
    16e8:	d0 40       	sbci	r29, 0x00	; 0
    16ea:	b7 01       	movw	r22, r14
    16ec:	68 5e       	subi	r22, 0xE8	; 232
    16ee:	7f 4f       	sbci	r23, 0xFF	; 255
    16f0:	c0 54       	subi	r28, 0x40	; 64
    16f2:	df 4f       	sbci	r29, 0xFF	; 255
    16f4:	88 81       	ld	r24, Y
    16f6:	99 81       	ldd	r25, Y+1	; 0x01
    16f8:	c0 5c       	subi	r28, 0xC0	; 192
    16fa:	d0 40       	sbci	r29, 0x00	; 0
    16fc:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    1700:	b7 01       	movw	r22, r14
    1702:	62 5e       	subi	r22, 0xE2	; 226
    1704:	7f 4f       	sbci	r23, 0xFF	; 255
    1706:	c2 01       	movw	r24, r4
    1708:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    170c:	f7 01       	movw	r30, r14
    170e:	84 a1       	ldd	r24, Z+36	; 0x24
    1710:	95 a1       	ldd	r25, Z+37	; 0x25
    1712:	c8 55       	subi	r28, 0x58	; 88
    1714:	df 4f       	sbci	r29, 0xFF	; 255
    1716:	99 83       	std	Y+1, r25	; 0x01
    1718:	88 83       	st	Y, r24
    171a:	c8 5a       	subi	r28, 0xA8	; 168
    171c:	d0 40       	sbci	r29, 0x00	; 0
    171e:	86 a1       	ldd	r24, Z+38	; 0x26
    1720:	97 a1       	ldd	r25, Z+39	; 0x27
    1722:	c6 55       	subi	r28, 0x56	; 86
    1724:	df 4f       	sbci	r29, 0xFF	; 255
    1726:	99 83       	std	Y+1, r25	; 0x01
    1728:	88 83       	st	Y, r24
    172a:	ca 5a       	subi	r28, 0xAA	; 170
    172c:	d0 40       	sbci	r29, 0x00	; 0
    172e:	80 a5       	ldd	r24, Z+40	; 0x28
    1730:	91 a5       	ldd	r25, Z+41	; 0x29
    1732:	c4 55       	subi	r28, 0x54	; 84
    1734:	df 4f       	sbci	r29, 0xFF	; 255
    1736:	99 83       	std	Y+1, r25	; 0x01
    1738:	88 83       	st	Y, r24
    173a:	cc 5a       	subi	r28, 0xAC	; 172
    173c:	d0 40       	sbci	r29, 0x00	; 0
    173e:	82 a5       	ldd	r24, Z+42	; 0x2a
    1740:	93 a5       	ldd	r25, Z+43	; 0x2b
    1742:	c2 55       	subi	r28, 0x52	; 82
    1744:	df 4f       	sbci	r29, 0xFF	; 255
    1746:	99 83       	std	Y+1, r25	; 0x01
    1748:	88 83       	st	Y, r24
    174a:	ce 5a       	subi	r28, 0xAE	; 174
    174c:	d0 40       	sbci	r29, 0x00	; 0
    174e:	84 a5       	ldd	r24, Z+44	; 0x2c
    1750:	95 a5       	ldd	r25, Z+45	; 0x2d
    1752:	c0 55       	subi	r28, 0x50	; 80
    1754:	df 4f       	sbci	r29, 0xFF	; 255
    1756:	99 83       	std	Y+1, r25	; 0x01
    1758:	88 83       	st	Y, r24
    175a:	c0 5b       	subi	r28, 0xB0	; 176
    175c:	d0 40       	sbci	r29, 0x00	; 0
    175e:	86 a5       	ldd	r24, Z+46	; 0x2e
    1760:	97 a5       	ldd	r25, Z+47	; 0x2f
    1762:	ce 54       	subi	r28, 0x4E	; 78
    1764:	df 4f       	sbci	r29, 0xFF	; 255
    1766:	99 83       	std	Y+1, r25	; 0x01
    1768:	88 83       	st	Y, r24
    176a:	c2 5b       	subi	r28, 0xB2	; 178
    176c:	d0 40       	sbci	r29, 0x00	; 0
    176e:	80 a9       	ldd	r24, Z+48	; 0x30
    1770:	91 a9       	ldd	r25, Z+49	; 0x31
    1772:	cc 54       	subi	r28, 0x4C	; 76
    1774:	df 4f       	sbci	r29, 0xFF	; 255
    1776:	99 83       	std	Y+1, r25	; 0x01
    1778:	88 83       	st	Y, r24
    177a:	c4 5b       	subi	r28, 0xB4	; 180
    177c:	d0 40       	sbci	r29, 0x00	; 0
    177e:	b7 01       	movw	r22, r14
    1780:	6e 5c       	subi	r22, 0xCE	; 206
    1782:	7f 4f       	sbci	r23, 0xFF	; 255
    1784:	c1 01       	movw	r24, r2
    1786:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    178a:	f7 01       	movw	r30, r14
    178c:	80 ad       	ldd	r24, Z+56	; 0x38
    178e:	91 ad       	ldd	r25, Z+57	; 0x39
    1790:	c4 54       	subi	r28, 0x44	; 68
    1792:	df 4f       	sbci	r29, 0xFF	; 255
    1794:	99 83       	std	Y+1, r25	; 0x01
    1796:	88 83       	st	Y, r24
    1798:	cc 5b       	subi	r28, 0xBC	; 188
    179a:	d0 40       	sbci	r29, 0x00	; 0
    179c:	82 ad       	ldd	r24, Z+58	; 0x3a
    179e:	93 ad       	ldd	r25, Z+59	; 0x3b
    17a0:	c2 54       	subi	r28, 0x42	; 66
    17a2:	df 4f       	sbci	r29, 0xFF	; 255
    17a4:	99 83       	std	Y+1, r25	; 0x01
    17a6:	88 83       	st	Y, r24
    17a8:	ce 5b       	subi	r28, 0xBE	; 190
    17aa:	d0 40       	sbci	r29, 0x00	; 0
	PagePumpMonitor->Items.add(*PageItem_Pump2Status);
    17ac:	be 01       	movw	r22, r28
    17ae:	6c 57       	subi	r22, 0x7C	; 124
    17b0:	7f 4f       	sbci	r23, 0xFF	; 255
    17b2:	c4 01       	movw	r24, r8
    17b4:	3b da       	rcall	.-2954   	; 0xc2c <_ZN10LinkedListI11LCDPageItemE3addES0_>
    17b6:	ce 01       	movw	r24, r28
    17b8:	8c 57       	subi	r24, 0x7C	; 124
    17ba:	9f 4f       	sbci	r25, 0xFF	; 255
    17bc:	0e 94 a8 20 	call	0x4150	; 0x4150 <_ZN11LCDPageItemD1Ev>
	
	LCDMenuItem * MenuItemAlarmTest = new LCDMenuItem("Alarm Test",MenuAlarmTest);
    17c0:	62 e9       	ldi	r22, 0x92	; 146
    17c2:	72 e0       	ldi	r23, 0x02	; 2
    17c4:	ce 01       	movw	r24, r28
    17c6:	81 96       	adiw	r24, 0x21	; 33
    17c8:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
    17cc:	8d e0       	ldi	r24, 0x0D	; 13
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	0e 94 36 31 	call	0x626c	; 0x626c <_Znwj>
    17d4:	8c 01       	movw	r16, r24
    17d6:	ce 53       	subi	r28, 0x3E	; 62
    17d8:	df 4f       	sbci	r29, 0xFF	; 255
    17da:	48 81       	ld	r20, Y
    17dc:	59 81       	ldd	r21, Y+1	; 0x01
    17de:	c2 5c       	subi	r28, 0xC2	; 194
    17e0:	d0 40       	sbci	r29, 0x00	; 0
    17e2:	be 01       	movw	r22, r28
    17e4:	6f 5d       	subi	r22, 0xDF	; 223
    17e6:	7f 4f       	sbci	r23, 0xFF	; 255
    17e8:	0e 94 b5 14 	call	0x296a	; 0x296a <_ZN11LCDMenuItemC1E6StringP7LCDMenu>
    17ec:	ce 01       	movw	r24, r28
    17ee:	81 96       	adiw	r24, 0x21	; 33
    17f0:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <_ZN6StringD1Ev>
    17f4:	b8 01       	movw	r22, r16
    17f6:	ce 01       	movw	r24, r28
    17f8:	44 96       	adiw	r24, 0x14	; 20
    17fa:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    17fe:	f8 01       	movw	r30, r16
    1800:	86 81       	ldd	r24, Z+6	; 0x06
    1802:	8a 8f       	std	Y+26, r24	; 0x1a
    1804:	87 81       	ldd	r24, Z+7	; 0x07
    1806:	90 85       	ldd	r25, Z+8	; 0x08
    1808:	9c 8f       	std	Y+28, r25	; 0x1c
    180a:	8b 8f       	std	Y+27, r24	; 0x1b
    180c:	81 85       	ldd	r24, Z+9	; 0x09
    180e:	92 85       	ldd	r25, Z+10	; 0x0a
    1810:	9e 8f       	std	Y+30, r25	; 0x1e
    1812:	8d 8f       	std	Y+29, r24	; 0x1d
    1814:	83 85       	ldd	r24, Z+11	; 0x0b
    1816:	94 85       	ldd	r25, Z+12	; 0x0c
    1818:	98 a3       	std	Y+32, r25	; 0x20
    181a:	8f 8f       	std	Y+31, r24	; 0x1f
	MainMenu->Items.add(*MenuItemAlarmTest);
    181c:	73 01       	movw	r14, r6
    181e:	f6 e0       	ldi	r31, 0x06	; 6
    1820:	ef 0e       	add	r14, r31
    1822:	f1 1c       	adc	r15, r1
    1824:	be 01       	movw	r22, r28
    1826:	6c 5e       	subi	r22, 0xEC	; 236
    1828:	7f 4f       	sbci	r23, 0xFF	; 255
    182a:	c7 01       	movw	r24, r14
    182c:	73 d8       	rcall	.-3866   	; 0x914 <_ZN10LinkedListI11LCDMenuItemE3addES0_>
    182e:	ce 01       	movw	r24, r28
    1830:	44 96       	adiw	r24, 0x14	; 20
    1832:	0e 94 32 15 	call	0x2a64	; 0x2a64 <_ZN11LCDMenuItemD1Ev>
	LCDMenuItem * MenuItemPumpMonitor = new LCDMenuItem("Pump Monitor",PagePumpMonitor);
    1836:	69 ed       	ldi	r22, 0xD9	; 217
    1838:	72 e0       	ldi	r23, 0x02	; 2
    183a:	ce 01       	movw	r24, r28
    183c:	0e 96       	adiw	r24, 0x0e	; 14
    183e:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
    1842:	8d e0       	ldi	r24, 0x0D	; 13
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	0e 94 36 31 	call	0x626c	; 0x626c <_Znwj>
    184a:	8c 01       	movw	r16, r24
    184c:	cc 53       	subi	r28, 0x3C	; 60
    184e:	df 4f       	sbci	r29, 0xFF	; 255
    1850:	48 81       	ld	r20, Y
    1852:	59 81       	ldd	r21, Y+1	; 0x01
    1854:	c4 5c       	subi	r28, 0xC4	; 196
    1856:	d0 40       	sbci	r29, 0x00	; 0
    1858:	be 01       	movw	r22, r28
    185a:	62 5f       	subi	r22, 0xF2	; 242
    185c:	7f 4f       	sbci	r23, 0xFF	; 255
    185e:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <_ZN11LCDMenuItemC1E6StringP7LCDPage>
    1862:	ce 01       	movw	r24, r28
    1864:	0e 96       	adiw	r24, 0x0e	; 14
    1866:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <_ZN6StringD1Ev>
    186a:	b8 01       	movw	r22, r16
    186c:	ce 01       	movw	r24, r28
    186e:	01 96       	adiw	r24, 0x01	; 1
    1870:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    1874:	f8 01       	movw	r30, r16
    1876:	86 81       	ldd	r24, Z+6	; 0x06
    1878:	8f 83       	std	Y+7, r24	; 0x07
    187a:	87 81       	ldd	r24, Z+7	; 0x07
    187c:	90 85       	ldd	r25, Z+8	; 0x08
    187e:	99 87       	std	Y+9, r25	; 0x09
    1880:	88 87       	std	Y+8, r24	; 0x08
    1882:	81 85       	ldd	r24, Z+9	; 0x09
    1884:	92 85       	ldd	r25, Z+10	; 0x0a
    1886:	9b 87       	std	Y+11, r25	; 0x0b
    1888:	8a 87       	std	Y+10, r24	; 0x0a
    188a:	83 85       	ldd	r24, Z+11	; 0x0b
    188c:	94 85       	ldd	r25, Z+12	; 0x0c
    188e:	9d 87       	std	Y+13, r25	; 0x0d
    1890:	8c 87       	std	Y+12, r24	; 0x0c
	MainMenu->Items.add(*MenuItemPumpMonitor);
    1892:	be 01       	movw	r22, r28
    1894:	6f 5f       	subi	r22, 0xFF	; 255
    1896:	7f 4f       	sbci	r23, 0xFF	; 255
    1898:	c7 01       	movw	r24, r14
    189a:	3c d8       	rcall	.-3976   	; 0x914 <_ZN10LinkedListI11LCDMenuItemE3addES0_>
    189c:	ce 01       	movw	r24, r28
    189e:	01 96       	adiw	r24, 0x01	; 1
    18a0:	0e 94 32 15 	call	0x2a64	; 0x2a64 <_ZN11LCDMenuItemD1Ev>

	MAIN_UI->setDisplay(MainMenu);
    18a4:	b3 01       	movw	r22, r6
    18a6:	80 91 6c 05 	lds	r24, 0x056C
    18aa:	90 91 6d 05 	lds	r25, 0x056D
    18ae:	0e 94 be 24 	call	0x497c	; 0x497c <_ZN13UserInterface10setDisplayEP7LCDMenu>
	
	///////////////////////////////////
	
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.println("Done.");
    18b2:	62 e3       	ldi	r22, 0x32	; 50
    18b4:	72 e0       	ldi	r23, 0x02	; 2
    18b6:	82 e4       	ldi	r24, 0x42	; 66
    18b8:	96 e0       	ldi	r25, 0x06	; 6
    18ba:	0e 94 a2 31 	call	0x6344	; 0x6344 <_ZN5Print7printlnEPKc>
	#endif
}
    18be:	cb 53       	subi	r28, 0x3B	; 59
    18c0:	df 4f       	sbci	r29, 0xFF	; 255
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	f8 94       	cli
    18c6:	de bf       	out	0x3e, r29	; 62
    18c8:	0f be       	out	0x3f, r0	; 63
    18ca:	cd bf       	out	0x3d, r28	; 61
    18cc:	df 91       	pop	r29
    18ce:	cf 91       	pop	r28
    18d0:	1f 91       	pop	r17
    18d2:	0f 91       	pop	r16
    18d4:	ff 90       	pop	r15
    18d6:	ef 90       	pop	r14
    18d8:	df 90       	pop	r13
    18da:	cf 90       	pop	r12
    18dc:	bf 90       	pop	r11
    18de:	af 90       	pop	r10
    18e0:	9f 90       	pop	r9
    18e2:	8f 90       	pop	r8
    18e4:	7f 90       	pop	r7
    18e6:	6f 90       	pop	r6
    18e8:	5f 90       	pop	r5
    18ea:	4f 90       	pop	r4
    18ec:	3f 90       	pop	r3
    18ee:	2f 90       	pop	r2
    18f0:	08 95       	ret

000018f2 <_GLOBAL__sub_I_MAIN_UI>:
    18f2:	0f 93       	push	r16
    18f4:	1f 93       	push	r17
    18f6:	cf 93       	push	r28
    18f8:	df 93       	push	r29
    18fa:	00 d0       	rcall	.+0      	; 0x18fc <_GLOBAL__sub_I_MAIN_UI+0xa>
    18fc:	00 d0       	rcall	.+0      	; 0x18fe <_GLOBAL__sub_I_MAIN_UI+0xc>
    18fe:	cd b7       	in	r28, 0x3d	; 61
    1900:	de b7       	in	r29, 0x3e	; 62
 * ----------------------------------------------------------------
 */

#include "MAIN_UI.h"

UserInterface *MAIN_UI = new UserInterface("MAIN");
    1902:	66 ee       	ldi	r22, 0xE6	; 230
    1904:	72 e0       	ldi	r23, 0x02	; 2
    1906:	ce 01       	movw	r24, r28
    1908:	01 96       	adiw	r24, 0x01	; 1
    190a:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
    190e:	86 e1       	ldi	r24, 0x16	; 22
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	0e 94 36 31 	call	0x626c	; 0x626c <_Znwj>
    1916:	8c 01       	movw	r16, r24
    1918:	be 01       	movw	r22, r28
    191a:	6f 5f       	subi	r22, 0xFF	; 255
    191c:	7f 4f       	sbci	r23, 0xFF	; 255
    191e:	0e 94 11 24 	call	0x4822	; 0x4822 <_ZN13UserInterfaceC1E6String>
    1922:	10 93 6d 05 	sts	0x056D, r17
    1926:	00 93 6c 05 	sts	0x056C, r16
    192a:	ce 01       	movw	r24, r28
    192c:	01 96       	adiw	r24, 0x01	; 1
    192e:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <_ZN6StringD1Ev>
	///////////////////////////////////
	
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.println("Done.");
	#endif
}
    1932:	26 96       	adiw	r28, 0x06	; 6
    1934:	0f b6       	in	r0, 0x3f	; 63
    1936:	f8 94       	cli
    1938:	de bf       	out	0x3e, r29	; 62
    193a:	0f be       	out	0x3f, r0	; 63
    193c:	cd bf       	out	0x3d, r28	; 61
    193e:	df 91       	pop	r29
    1940:	cf 91       	pop	r28
    1942:	1f 91       	pop	r17
    1944:	0f 91       	pop	r16
    1946:	08 95       	ret

00001948 <_Z11MLT_UI_initv>:

#include "MLT_UI.h"

UserInterface *MLT_UI = new UserInterface("MLT");

void MLT_UI_init(){
    1948:	cf 92       	push	r12
    194a:	df 92       	push	r13
    194c:	ef 92       	push	r14
    194e:	ff 92       	push	r15
    1950:	0f 93       	push	r16
    1952:	1f 93       	push	r17
    1954:	cf 93       	push	r28
    1956:	df 93       	push	r29
    1958:	cd b7       	in	r28, 0x3d	; 61
    195a:	de b7       	in	r29, 0x3e	; 62
    195c:	c5 54       	subi	r28, 0x45	; 69
    195e:	d1 09       	sbc	r29, r1
    1960:	0f b6       	in	r0, 0x3f	; 63
    1962:	f8 94       	cli
    1964:	de bf       	out	0x3e, r29	; 62
    1966:	0f be       	out	0x3f, r0	; 63
    1968:	cd bf       	out	0x3d, r28	; 61
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.print("Initializing UI - " + MLT_UI->Name + "...");
    196a:	00 91 6e 05 	lds	r16, 0x056E
    196e:	10 91 6f 05 	lds	r17, 0x056F
    1972:	0c 5f       	subi	r16, 0xFC	; 252
    1974:	1f 4f       	sbci	r17, 0xFF	; 255
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1976:	61 e5       	ldi	r22, 0x51	; 81
    1978:	72 e0       	ldi	r23, 0x02	; 2
    197a:	ce 01       	movw	r24, r28
    197c:	80 5c       	subi	r24, 0xC0	; 192
    197e:	9f 4f       	sbci	r25, 0xFF	; 255
    1980:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
    1984:	b8 01       	movw	r22, r16
    1986:	ce 01       	movw	r24, r28
    1988:	80 5c       	subi	r24, 0xC0	; 192
    198a:	9f 4f       	sbci	r25, 0xFF	; 255
    198c:	0e 94 a6 38 	call	0x714c	; 0x714c <_ZplRK15StringSumHelperRK6String>
    1990:	6e e2       	ldi	r22, 0x2E	; 46
    1992:	72 e0       	ldi	r23, 0x02	; 2
    1994:	0e 94 b7 38 	call	0x716e	; 0x716e <_ZplRK15StringSumHelperPKc>
    1998:	bc 01       	movw	r22, r24
    199a:	82 e4       	ldi	r24, 0x42	; 66
    199c:	96 e0       	ldi	r25, 0x06	; 6
    199e:	0e 94 69 31 	call	0x62d2	; 0x62d2 <_ZN5Print5printERK6String>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    19a2:	ce 01       	movw	r24, r28
    19a4:	80 5c       	subi	r24, 0xC0	; 192
    19a6:	9f 4f       	sbci	r25, 0xFF	; 255
    19a8:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <_ZN6StringD1Ev>
	#endif
	
	/***************************************
	  Setup + Initialization
	***************************************/
	MLT_UI->attatchEncoder(MLT_ENC);
    19ac:	60 91 18 05 	lds	r22, 0x0518
    19b0:	70 91 19 05 	lds	r23, 0x0519
    19b4:	80 91 6e 05 	lds	r24, 0x056E
    19b8:	90 91 6f 05 	lds	r25, 0x056F
    19bc:	0e 94 34 24 	call	0x4868	; 0x4868 <_ZN13UserInterface14attatchEncoderEP22ClickEncoderWithEvents>
	MLT_UI->attatchLCD(&MLT_LCD);
    19c0:	6a e1       	ldi	r22, 0x1A	; 26
    19c2:	75 e0       	ldi	r23, 0x05	; 5
    19c4:	80 91 6e 05 	lds	r24, 0x056E
    19c8:	90 91 6f 05 	lds	r25, 0x056F
    19cc:	0e 94 6a 24 	call	0x48d4	; 0x48d4 <_ZN13UserInterface10attatchLCDEP17LiquidCrystal_I2C>
	***************************************/
	
	/***************************************
	  MLT Menu
	***************************************/
	LCDMenu * MLTMainMenu = new LCDMenu("MAIN-MENU");
    19d0:	64 e6       	ldi	r22, 0x64	; 100
    19d2:	72 e0       	ldi	r23, 0x02	; 2
    19d4:	ce 01       	movw	r24, r28
    19d6:	ca 96       	adiw	r24, 0x3a	; 58
    19d8:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
    19dc:	8d e1       	ldi	r24, 0x1D	; 29
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	0e 94 36 31 	call	0x626c	; 0x626c <_Znwj>
    19e4:	7c 01       	movw	r14, r24
    19e6:	be 01       	movw	r22, r28
    19e8:	66 5c       	subi	r22, 0xC6	; 198
    19ea:	7f 4f       	sbci	r23, 0xFF	; 255
    19ec:	d5 d2       	rcall	.+1450   	; 0x1f98 <_ZN7LCDMenuC1E6String>
    19ee:	ce 01       	movw	r24, r28
    19f0:	ca 96       	adiw	r24, 0x3a	; 58
    19f2:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <_ZN6StringD1Ev>
	LCDMenuItem * TestItem1 = new LCDMenuItem("Testing1");
    19f6:	6e e6       	ldi	r22, 0x6E	; 110
    19f8:	72 e0       	ldi	r23, 0x02	; 2
    19fa:	ce 01       	movw	r24, r28
    19fc:	c4 96       	adiw	r24, 0x34	; 52
    19fe:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
    1a02:	8d e0       	ldi	r24, 0x0D	; 13
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	0e 94 36 31 	call	0x626c	; 0x626c <_Znwj>
    1a0a:	8c 01       	movw	r16, r24
    1a0c:	be 01       	movw	r22, r28
    1a0e:	6c 5c       	subi	r22, 0xCC	; 204
    1a10:	7f 4f       	sbci	r23, 0xFF	; 255
    1a12:	8d d7       	rcall	.+3866   	; 0x292e <_ZN11LCDMenuItemC1E6String>
    1a14:	ce 01       	movw	r24, r28
    1a16:	c4 96       	adiw	r24, 0x34	; 52
    1a18:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <_ZN6StringD1Ev>
#include <string.h>

class LCDMenu;
class LCDToggleOption;
class UserInterface;
class LCDMenuItem
    1a1c:	b8 01       	movw	r22, r16
    1a1e:	ce 01       	movw	r24, r28
    1a20:	87 96       	adiw	r24, 0x27	; 39
    1a22:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    1a26:	f8 01       	movw	r30, r16
    1a28:	86 81       	ldd	r24, Z+6	; 0x06
    1a2a:	8d a7       	std	Y+45, r24	; 0x2d
    1a2c:	87 81       	ldd	r24, Z+7	; 0x07
    1a2e:	90 85       	ldd	r25, Z+8	; 0x08
    1a30:	9f a7       	std	Y+47, r25	; 0x2f
    1a32:	8e a7       	std	Y+46, r24	; 0x2e
    1a34:	81 85       	ldd	r24, Z+9	; 0x09
    1a36:	92 85       	ldd	r25, Z+10	; 0x0a
    1a38:	99 ab       	std	Y+49, r25	; 0x31
    1a3a:	88 ab       	std	Y+48, r24	; 0x30
    1a3c:	83 85       	ldd	r24, Z+11	; 0x0b
    1a3e:	94 85       	ldd	r25, Z+12	; 0x0c
    1a40:	9b ab       	std	Y+51, r25	; 0x33
    1a42:	8a ab       	std	Y+50, r24	; 0x32
	MLTMainMenu->Items.add(*TestItem1);
    1a44:	67 01       	movw	r12, r14
    1a46:	f6 e0       	ldi	r31, 0x06	; 6
    1a48:	cf 0e       	add	r12, r31
    1a4a:	d1 1c       	adc	r13, r1
    1a4c:	be 01       	movw	r22, r28
    1a4e:	69 5d       	subi	r22, 0xD9	; 217
    1a50:	7f 4f       	sbci	r23, 0xFF	; 255
    1a52:	c6 01       	movw	r24, r12
    1a54:	0e 94 8a 04 	call	0x914	; 0x914 <_ZN10LinkedListI11LCDMenuItemE3addES0_>
    1a58:	ce 01       	movw	r24, r28
    1a5a:	87 96       	adiw	r24, 0x27	; 39
    1a5c:	0e 94 32 15 	call	0x2a64	; 0x2a64 <_ZN11LCDMenuItemD1Ev>
	LCDMenuItem * TestItem2 = new LCDMenuItem("Testing2");
    1a60:	67 e7       	ldi	r22, 0x77	; 119
    1a62:	72 e0       	ldi	r23, 0x02	; 2
    1a64:	ce 01       	movw	r24, r28
    1a66:	81 96       	adiw	r24, 0x21	; 33
    1a68:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
    1a6c:	8d e0       	ldi	r24, 0x0D	; 13
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	0e 94 36 31 	call	0x626c	; 0x626c <_Znwj>
    1a74:	8c 01       	movw	r16, r24
    1a76:	be 01       	movw	r22, r28
    1a78:	6f 5d       	subi	r22, 0xDF	; 223
    1a7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a7c:	58 d7       	rcall	.+3760   	; 0x292e <_ZN11LCDMenuItemC1E6String>
    1a7e:	ce 01       	movw	r24, r28
    1a80:	81 96       	adiw	r24, 0x21	; 33
    1a82:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <_ZN6StringD1Ev>
    1a86:	b8 01       	movw	r22, r16
    1a88:	ce 01       	movw	r24, r28
    1a8a:	44 96       	adiw	r24, 0x14	; 20
    1a8c:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    1a90:	f8 01       	movw	r30, r16
    1a92:	86 81       	ldd	r24, Z+6	; 0x06
    1a94:	8a 8f       	std	Y+26, r24	; 0x1a
    1a96:	87 81       	ldd	r24, Z+7	; 0x07
    1a98:	90 85       	ldd	r25, Z+8	; 0x08
    1a9a:	9c 8f       	std	Y+28, r25	; 0x1c
    1a9c:	8b 8f       	std	Y+27, r24	; 0x1b
    1a9e:	81 85       	ldd	r24, Z+9	; 0x09
    1aa0:	92 85       	ldd	r25, Z+10	; 0x0a
    1aa2:	9e 8f       	std	Y+30, r25	; 0x1e
    1aa4:	8d 8f       	std	Y+29, r24	; 0x1d
    1aa6:	83 85       	ldd	r24, Z+11	; 0x0b
    1aa8:	94 85       	ldd	r25, Z+12	; 0x0c
    1aaa:	98 a3       	std	Y+32, r25	; 0x20
    1aac:	8f 8f       	std	Y+31, r24	; 0x1f
	MLTMainMenu->Items.add(*TestItem2);
    1aae:	be 01       	movw	r22, r28
    1ab0:	6c 5e       	subi	r22, 0xEC	; 236
    1ab2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ab4:	c6 01       	movw	r24, r12
    1ab6:	0e 94 8a 04 	call	0x914	; 0x914 <_ZN10LinkedListI11LCDMenuItemE3addES0_>
    1aba:	ce 01       	movw	r24, r28
    1abc:	44 96       	adiw	r24, 0x14	; 20
    1abe:	d2 d7       	rcall	.+4004   	; 0x2a64 <_ZN11LCDMenuItemD1Ev>
	LCDMenuItem * TestItem3 = new LCDMenuItem("Testing3");
    1ac0:	60 e8       	ldi	r22, 0x80	; 128
    1ac2:	72 e0       	ldi	r23, 0x02	; 2
    1ac4:	ce 01       	movw	r24, r28
    1ac6:	0e 96       	adiw	r24, 0x0e	; 14
    1ac8:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
    1acc:	8d e0       	ldi	r24, 0x0D	; 13
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	0e 94 36 31 	call	0x626c	; 0x626c <_Znwj>
    1ad4:	8c 01       	movw	r16, r24
    1ad6:	be 01       	movw	r22, r28
    1ad8:	62 5f       	subi	r22, 0xF2	; 242
    1ada:	7f 4f       	sbci	r23, 0xFF	; 255
    1adc:	28 d7       	rcall	.+3664   	; 0x292e <_ZN11LCDMenuItemC1E6String>
    1ade:	ce 01       	movw	r24, r28
    1ae0:	0e 96       	adiw	r24, 0x0e	; 14
    1ae2:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <_ZN6StringD1Ev>
    1ae6:	b8 01       	movw	r22, r16
    1ae8:	ce 01       	movw	r24, r28
    1aea:	01 96       	adiw	r24, 0x01	; 1
    1aec:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    1af0:	f8 01       	movw	r30, r16
    1af2:	86 81       	ldd	r24, Z+6	; 0x06
    1af4:	8f 83       	std	Y+7, r24	; 0x07
    1af6:	87 81       	ldd	r24, Z+7	; 0x07
    1af8:	90 85       	ldd	r25, Z+8	; 0x08
    1afa:	99 87       	std	Y+9, r25	; 0x09
    1afc:	88 87       	std	Y+8, r24	; 0x08
    1afe:	81 85       	ldd	r24, Z+9	; 0x09
    1b00:	92 85       	ldd	r25, Z+10	; 0x0a
    1b02:	9b 87       	std	Y+11, r25	; 0x0b
    1b04:	8a 87       	std	Y+10, r24	; 0x0a
    1b06:	83 85       	ldd	r24, Z+11	; 0x0b
    1b08:	94 85       	ldd	r25, Z+12	; 0x0c
    1b0a:	9d 87       	std	Y+13, r25	; 0x0d
    1b0c:	8c 87       	std	Y+12, r24	; 0x0c
	MLTMainMenu->Items.add(*TestItem3);
    1b0e:	be 01       	movw	r22, r28
    1b10:	6f 5f       	subi	r22, 0xFF	; 255
    1b12:	7f 4f       	sbci	r23, 0xFF	; 255
    1b14:	c6 01       	movw	r24, r12
    1b16:	0e 94 8a 04 	call	0x914	; 0x914 <_ZN10LinkedListI11LCDMenuItemE3addES0_>
    1b1a:	ce 01       	movw	r24, r28
    1b1c:	01 96       	adiw	r24, 0x01	; 1
    1b1e:	a2 d7       	rcall	.+3908   	; 0x2a64 <_ZN11LCDMenuItemD1Ev>
		
	MLT_UI->setDisplay(MLTMainMenu);
    1b20:	b7 01       	movw	r22, r14
    1b22:	80 91 6e 05 	lds	r24, 0x056E
    1b26:	90 91 6f 05 	lds	r25, 0x056F
    1b2a:	0e 94 be 24 	call	0x497c	; 0x497c <_ZN13UserInterface10setDisplayEP7LCDMenu>
	
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.println("Done.");
    1b2e:	62 e3       	ldi	r22, 0x32	; 50
    1b30:	72 e0       	ldi	r23, 0x02	; 2
    1b32:	82 e4       	ldi	r24, 0x42	; 66
    1b34:	96 e0       	ldi	r25, 0x06	; 6
    1b36:	0e 94 a2 31 	call	0x6344	; 0x6344 <_ZN5Print7printlnEPKc>
	#endif
}
    1b3a:	cb 5b       	subi	r28, 0xBB	; 187
    1b3c:	df 4f       	sbci	r29, 0xFF	; 255
    1b3e:	0f b6       	in	r0, 0x3f	; 63
    1b40:	f8 94       	cli
    1b42:	de bf       	out	0x3e, r29	; 62
    1b44:	0f be       	out	0x3f, r0	; 63
    1b46:	cd bf       	out	0x3d, r28	; 61
    1b48:	df 91       	pop	r29
    1b4a:	cf 91       	pop	r28
    1b4c:	1f 91       	pop	r17
    1b4e:	0f 91       	pop	r16
    1b50:	ff 90       	pop	r15
    1b52:	ef 90       	pop	r14
    1b54:	df 90       	pop	r13
    1b56:	cf 90       	pop	r12
    1b58:	08 95       	ret

00001b5a <_GLOBAL__sub_I_MLT_UI>:
    1b5a:	0f 93       	push	r16
    1b5c:	1f 93       	push	r17
    1b5e:	cf 93       	push	r28
    1b60:	df 93       	push	r29
    1b62:	00 d0       	rcall	.+0      	; 0x1b64 <_GLOBAL__sub_I_MLT_UI+0xa>
    1b64:	00 d0       	rcall	.+0      	; 0x1b66 <_GLOBAL__sub_I_MLT_UI+0xc>
    1b66:	cd b7       	in	r28, 0x3d	; 61
    1b68:	de b7       	in	r29, 0x3e	; 62
 * ----------------------------------------------------------------
 */

#include "MLT_UI.h"

UserInterface *MLT_UI = new UserInterface("MLT");
    1b6a:	6b ee       	ldi	r22, 0xEB	; 235
    1b6c:	72 e0       	ldi	r23, 0x02	; 2
    1b6e:	ce 01       	movw	r24, r28
    1b70:	01 96       	adiw	r24, 0x01	; 1
    1b72:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
    1b76:	86 e1       	ldi	r24, 0x16	; 22
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	0e 94 36 31 	call	0x626c	; 0x626c <_Znwj>
    1b7e:	8c 01       	movw	r16, r24
    1b80:	be 01       	movw	r22, r28
    1b82:	6f 5f       	subi	r22, 0xFF	; 255
    1b84:	7f 4f       	sbci	r23, 0xFF	; 255
    1b86:	0e 94 11 24 	call	0x4822	; 0x4822 <_ZN13UserInterfaceC1E6String>
    1b8a:	10 93 6f 05 	sts	0x056F, r17
    1b8e:	00 93 6e 05 	sts	0x056E, r16
    1b92:	ce 01       	movw	r24, r28
    1b94:	01 96       	adiw	r24, 0x01	; 1
    1b96:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <_ZN6StringD1Ev>
	MLT_UI->setDisplay(MLTMainMenu);
	
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.println("Done.");
	#endif
}
    1b9a:	26 96       	adiw	r28, 0x06	; 6
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	f8 94       	cli
    1ba0:	de bf       	out	0x3e, r29	; 62
    1ba2:	0f be       	out	0x3f, r0	; 63
    1ba4:	cd bf       	out	0x3d, r28	; 61
    1ba6:	df 91       	pop	r29
    1ba8:	cf 91       	pop	r28
    1baa:	1f 91       	pop	r17
    1bac:	0f 91       	pop	r16
    1bae:	08 95       	ret

00001bb0 <_ZN22ClickEncoderWithEvents4ReadEv>:
// default destructor
ClickEncoderWithEvents::~ClickEncoderWithEvents()
{
} //~ClickEncoderWithEvents

void ClickEncoderWithEvents::Read(){
    1bb0:	cf 93       	push	r28
    1bb2:	df 93       	push	r29
    1bb4:	ec 01       	movw	r28, r24
	//	Serial.print("Encoder Value: ");
	//	Serial.println(value);
	//}
	
			//See if Incremented or not
			t_value += this->getValue();
    1bb6:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <_ZN12ClickEncoder8getValueEv>
    1bba:	2a a5       	ldd	r18, Y+42	; 0x2a
    1bbc:	3b a5       	ldd	r19, Y+43	; 0x2b
    1bbe:	82 0f       	add	r24, r18
    1bc0:	93 1f       	adc	r25, r19
    1bc2:	9b a7       	std	Y+43, r25	; 0x2b
    1bc4:	8a a7       	std	Y+42, r24	; 0x2a
			if(t_value > t_prev_value){
    1bc6:	28 a5       	ldd	r18, Y+40	; 0x28
    1bc8:	39 a5       	ldd	r19, Y+41	; 0x29
    1bca:	28 17       	cp	r18, r24
    1bcc:	39 07       	cpc	r19, r25
    1bce:	1c f5       	brge	.+70     	; 0x1c16 <_ZN22ClickEncoderWithEvents4ReadEv+0x66>
				if( !(IncrementHandler == NULL)){
    1bd0:	e8 8d       	ldd	r30, Y+24	; 0x18
    1bd2:	f9 8d       	ldd	r31, Y+25	; 0x19
    1bd4:	30 97       	sbiw	r30, 0x00	; 0
    1bd6:	19 f4       	brne	.+6      	; 0x1bde <_ZN22ClickEncoderWithEvents4ReadEv+0x2e>
    1bd8:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1bda:	20 ff       	sbrs	r18, 0
    1bdc:	41 c0       	rjmp	.+130    	; 0x1c60 <_ZN22ClickEncoderWithEvents4ReadEv+0xb0>
				
					t_prev_value = t_value;
    1bde:	99 a7       	std	Y+41, r25	; 0x29
    1be0:	88 a7       	std	Y+40, r24	; 0x28
					(UI->*IncrementHandler)();
    1be2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1be4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1be6:	80 ff       	sbrs	r24, 0
    1be8:	0e c0       	rjmp	.+28     	; 0x1c06 <_ZN22ClickEncoderWithEvents4ReadEv+0x56>
    1bea:	ae 85       	ldd	r26, Y+14	; 0x0e
    1bec:	bf 85       	ldd	r27, Y+15	; 0x0f
    1bee:	9c 01       	movw	r18, r24
    1bf0:	35 95       	asr	r19
    1bf2:	27 95       	ror	r18
    1bf4:	a2 0f       	add	r26, r18
    1bf6:	b3 1f       	adc	r27, r19
    1bf8:	2d 91       	ld	r18, X+
    1bfa:	3c 91       	ld	r19, X
    1bfc:	e2 0f       	add	r30, r18
    1bfe:	f3 1f       	adc	r31, r19
    1c00:	01 90       	ld	r0, Z+
    1c02:	f0 81       	ld	r31, Z
    1c04:	e0 2d       	mov	r30, r0
    1c06:	95 95       	asr	r25
    1c08:	87 95       	ror	r24
    1c0a:	2e 85       	ldd	r18, Y+14	; 0x0e
    1c0c:	3f 85       	ldd	r19, Y+15	; 0x0f
    1c0e:	82 0f       	add	r24, r18
    1c10:	93 1f       	adc	r25, r19
    1c12:	19 95       	eicall
    1c14:	25 c0       	rjmp	.+74     	; 0x1c60 <_ZN22ClickEncoderWithEvents4ReadEv+0xb0>
				}
			}else if(t_value < t_prev_value){
    1c16:	82 17       	cp	r24, r18
    1c18:	93 07       	cpc	r25, r19
    1c1a:	14 f5       	brge	.+68     	; 0x1c60 <_ZN22ClickEncoderWithEvents4ReadEv+0xb0>
				if( !(DecrementHandler == NULL)){
    1c1c:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1c1e:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1c20:	30 97       	sbiw	r30, 0x00	; 0
    1c22:	19 f4       	brne	.+6      	; 0x1c2a <_ZN22ClickEncoderWithEvents4ReadEv+0x7a>
    1c24:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1c26:	20 ff       	sbrs	r18, 0
    1c28:	1b c0       	rjmp	.+54     	; 0x1c60 <_ZN22ClickEncoderWithEvents4ReadEv+0xb0>
				
					t_prev_value = t_value;
    1c2a:	99 a7       	std	Y+41, r25	; 0x29
    1c2c:	88 a7       	std	Y+40, r24	; 0x28
					(UI->*DecrementHandler)();
    1c2e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c30:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1c32:	80 ff       	sbrs	r24, 0
    1c34:	0e c0       	rjmp	.+28     	; 0x1c52 <_ZN22ClickEncoderWithEvents4ReadEv+0xa2>
    1c36:	ae 85       	ldd	r26, Y+14	; 0x0e
    1c38:	bf 85       	ldd	r27, Y+15	; 0x0f
    1c3a:	9c 01       	movw	r18, r24
    1c3c:	35 95       	asr	r19
    1c3e:	27 95       	ror	r18
    1c40:	a2 0f       	add	r26, r18
    1c42:	b3 1f       	adc	r27, r19
    1c44:	2d 91       	ld	r18, X+
    1c46:	3c 91       	ld	r19, X
    1c48:	e2 0f       	add	r30, r18
    1c4a:	f3 1f       	adc	r31, r19
    1c4c:	01 90       	ld	r0, Z+
    1c4e:	f0 81       	ld	r31, Z
    1c50:	e0 2d       	mov	r30, r0
    1c52:	95 95       	asr	r25
    1c54:	87 95       	ror	r24
    1c56:	2e 85       	ldd	r18, Y+14	; 0x0e
    1c58:	3f 85       	ldd	r19, Y+15	; 0x0f
    1c5a:	82 0f       	add	r24, r18
    1c5c:	93 1f       	adc	r25, r19
    1c5e:	19 95       	eicall
				}
			}
	
			//See if Buttons Clicked
			ClickEncoder::Button b = this->getButton();
    1c60:	ce 01       	movw	r24, r28
    1c62:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <_ZN12ClickEncoder9getButtonEv>
			if (b != ClickEncoder::Open) {
    1c66:	88 23       	and	r24, r24
    1c68:	09 f4       	brne	.+2      	; 0x1c6c <_ZN22ClickEncoderWithEvents4ReadEv+0xbc>
    1c6a:	4a c0       	rjmp	.+148    	; 0x1d00 <_ZN22ClickEncoderWithEvents4ReadEv+0x150>
				 switch (b) {
    1c6c:	85 30       	cpi	r24, 0x05	; 5
    1c6e:	19 f0       	breq	.+6      	; 0x1c76 <_ZN22ClickEncoderWithEvents4ReadEv+0xc6>
    1c70:	86 30       	cpi	r24, 0x06	; 6
    1c72:	21 f1       	breq	.+72     	; 0x1cbc <_ZN22ClickEncoderWithEvents4ReadEv+0x10c>
    1c74:	45 c0       	rjmp	.+138    	; 0x1d00 <_ZN22ClickEncoderWithEvents4ReadEv+0x150>
					 case(ClickEncoder::Held):
						break;
					 case(ClickEncoder::Released):
						break;
					 case(ClickEncoder::Clicked):
						if (!(ClickHandler == NULL)){
    1c76:	e8 89       	ldd	r30, Y+16	; 0x10
    1c78:	f9 89       	ldd	r31, Y+17	; 0x11
    1c7a:	30 97       	sbiw	r30, 0x00	; 0
    1c7c:	29 f4       	brne	.+10     	; 0x1c88 <_ZN22ClickEncoderWithEvents4ReadEv+0xd8>
    1c7e:	8a 89       	ldd	r24, Y+18	; 0x12
    1c80:	9b 89       	ldd	r25, Y+19	; 0x13
    1c82:	80 fd       	sbrc	r24, 0
    1c84:	05 c0       	rjmp	.+10     	; 0x1c90 <_ZN22ClickEncoderWithEvents4ReadEv+0xe0>
    1c86:	3c c0       	rjmp	.+120    	; 0x1d00 <_ZN22ClickEncoderWithEvents4ReadEv+0x150>
							(UI->*ClickHandler)();
    1c88:	8a 89       	ldd	r24, Y+18	; 0x12
    1c8a:	9b 89       	ldd	r25, Y+19	; 0x13
    1c8c:	80 ff       	sbrs	r24, 0
    1c8e:	0e c0       	rjmp	.+28     	; 0x1cac <_ZN22ClickEncoderWithEvents4ReadEv+0xfc>
    1c90:	ae 85       	ldd	r26, Y+14	; 0x0e
    1c92:	bf 85       	ldd	r27, Y+15	; 0x0f
    1c94:	9c 01       	movw	r18, r24
    1c96:	35 95       	asr	r19
    1c98:	27 95       	ror	r18
    1c9a:	a2 0f       	add	r26, r18
    1c9c:	b3 1f       	adc	r27, r19
    1c9e:	2d 91       	ld	r18, X+
    1ca0:	3c 91       	ld	r19, X
    1ca2:	e2 0f       	add	r30, r18
    1ca4:	f3 1f       	adc	r31, r19
    1ca6:	01 90       	ld	r0, Z+
    1ca8:	f0 81       	ld	r31, Z
    1caa:	e0 2d       	mov	r30, r0
    1cac:	95 95       	asr	r25
    1cae:	87 95       	ror	r24
    1cb0:	2e 85       	ldd	r18, Y+14	; 0x0e
    1cb2:	3f 85       	ldd	r19, Y+15	; 0x0f
    1cb4:	82 0f       	add	r24, r18
    1cb6:	93 1f       	adc	r25, r19
    1cb8:	19 95       	eicall
    1cba:	22 c0       	rjmp	.+68     	; 0x1d00 <_ZN22ClickEncoderWithEvents4ReadEv+0x150>
					}
					break;
					 case (ClickEncoder::DoubleClicked):
						if (!(DblClickHandler == NULL)){
    1cbc:	ec 89       	ldd	r30, Y+20	; 0x14
    1cbe:	fd 89       	ldd	r31, Y+21	; 0x15
    1cc0:	30 97       	sbiw	r30, 0x00	; 0
    1cc2:	29 f4       	brne	.+10     	; 0x1cce <_ZN22ClickEncoderWithEvents4ReadEv+0x11e>
    1cc4:	8e 89       	ldd	r24, Y+22	; 0x16
    1cc6:	9f 89       	ldd	r25, Y+23	; 0x17
    1cc8:	80 fd       	sbrc	r24, 0
    1cca:	05 c0       	rjmp	.+10     	; 0x1cd6 <_ZN22ClickEncoderWithEvents4ReadEv+0x126>
    1ccc:	19 c0       	rjmp	.+50     	; 0x1d00 <_ZN22ClickEncoderWithEvents4ReadEv+0x150>
							(UI->*DblClickHandler)();
    1cce:	8e 89       	ldd	r24, Y+22	; 0x16
    1cd0:	9f 89       	ldd	r25, Y+23	; 0x17
    1cd2:	80 ff       	sbrs	r24, 0
    1cd4:	0e c0       	rjmp	.+28     	; 0x1cf2 <_ZN22ClickEncoderWithEvents4ReadEv+0x142>
    1cd6:	ae 85       	ldd	r26, Y+14	; 0x0e
    1cd8:	bf 85       	ldd	r27, Y+15	; 0x0f
    1cda:	9c 01       	movw	r18, r24
    1cdc:	35 95       	asr	r19
    1cde:	27 95       	ror	r18
    1ce0:	a2 0f       	add	r26, r18
    1ce2:	b3 1f       	adc	r27, r19
    1ce4:	2d 91       	ld	r18, X+
    1ce6:	3c 91       	ld	r19, X
    1ce8:	e2 0f       	add	r30, r18
    1cea:	f3 1f       	adc	r31, r19
    1cec:	01 90       	ld	r0, Z+
    1cee:	f0 81       	ld	r31, Z
    1cf0:	e0 2d       	mov	r30, r0
    1cf2:	95 95       	asr	r25
    1cf4:	87 95       	ror	r24
    1cf6:	2e 85       	ldd	r18, Y+14	; 0x0e
    1cf8:	3f 85       	ldd	r19, Y+15	; 0x0f
    1cfa:	82 0f       	add	r24, r18
    1cfc:	93 1f       	adc	r25, r19
    1cfe:	19 95       	eicall
						}
						break;
				 }
			}
}
    1d00:	df 91       	pop	r29
    1d02:	cf 91       	pop	r28
    1d04:	08 95       	ret

00001d06 <_ZN10LinkedListI11LCDMenuItemE4sizeEv>:


// default destructor
LCDMenu::~LCDMenu()
{
}
    1d06:	fc 01       	movw	r30, r24
    1d08:	82 81       	ldd	r24, Z+2	; 0x02
    1d0a:	93 81       	ldd	r25, Z+3	; 0x03
    1d0c:	08 95       	ret

00001d0e <_ZN10LinkedListI11LCDMenuItemE5clearEv>:
    1d0e:	0f 93       	push	r16
    1d10:	1f 93       	push	r17
    1d12:	cf 93       	push	r28
    1d14:	df 93       	push	r29
    1d16:	cd b7       	in	r28, 0x3d	; 61
    1d18:	de b7       	in	r29, 0x3e	; 62
    1d1a:	2d 97       	sbiw	r28, 0x0d	; 13
    1d1c:	0f b6       	in	r0, 0x3f	; 63
    1d1e:	f8 94       	cli
    1d20:	de bf       	out	0x3e, r29	; 62
    1d22:	0f be       	out	0x3f, r0	; 63
    1d24:	cd bf       	out	0x3d, r28	; 61
    1d26:	8c 01       	movw	r16, r24
    1d28:	0d c0       	rjmp	.+26     	; 0x1d44 <_ZN10LinkedListI11LCDMenuItemE5clearEv+0x36>
    1d2a:	d8 01       	movw	r26, r16
    1d2c:	ed 91       	ld	r30, X+
    1d2e:	fc 91       	ld	r31, X
    1d30:	06 84       	ldd	r0, Z+14	; 0x0e
    1d32:	f7 85       	ldd	r31, Z+15	; 0x0f
    1d34:	e0 2d       	mov	r30, r0
    1d36:	b8 01       	movw	r22, r16
    1d38:	ce 01       	movw	r24, r28
    1d3a:	01 96       	adiw	r24, 0x01	; 1
    1d3c:	19 95       	eicall
    1d3e:	ce 01       	movw	r24, r28
    1d40:	01 96       	adiw	r24, 0x01	; 1
    1d42:	90 d6       	rcall	.+3360   	; 0x2a64 <_ZN11LCDMenuItemD1Ev>
    1d44:	d8 01       	movw	r26, r16
    1d46:	ed 91       	ld	r30, X+
    1d48:	fc 91       	ld	r31, X
    1d4a:	01 90       	ld	r0, Z+
    1d4c:	f0 81       	ld	r31, Z
    1d4e:	e0 2d       	mov	r30, r0
    1d50:	c8 01       	movw	r24, r16
    1d52:	19 95       	eicall
    1d54:	18 16       	cp	r1, r24
    1d56:	19 06       	cpc	r1, r25
    1d58:	44 f3       	brlt	.-48     	; 0x1d2a <_ZN10LinkedListI11LCDMenuItemE5clearEv+0x1c>
    1d5a:	2d 96       	adiw	r28, 0x0d	; 13
    1d5c:	0f b6       	in	r0, 0x3f	; 63
    1d5e:	f8 94       	cli
    1d60:	de bf       	out	0x3e, r29	; 62
    1d62:	0f be       	out	0x3f, r0	; 63
    1d64:	cd bf       	out	0x3d, r28	; 61
    1d66:	df 91       	pop	r29
    1d68:	cf 91       	pop	r28
    1d6a:	1f 91       	pop	r17
    1d6c:	0f 91       	pop	r16
    1d6e:	08 95       	ret

00001d70 <_ZN10LinkedListI11LCDMenuItemE7unshiftES0_>:
    1d70:	cf 92       	push	r12
    1d72:	df 92       	push	r13
    1d74:	ef 92       	push	r14
    1d76:	ff 92       	push	r15
    1d78:	0f 93       	push	r16
    1d7a:	1f 93       	push	r17
    1d7c:	cf 93       	push	r28
    1d7e:	df 93       	push	r29
    1d80:	cd b7       	in	r28, 0x3d	; 61
    1d82:	de b7       	in	r29, 0x3e	; 62
    1d84:	2d 97       	sbiw	r28, 0x0d	; 13
    1d86:	0f b6       	in	r0, 0x3f	; 63
    1d88:	f8 94       	cli
    1d8a:	de bf       	out	0x3e, r29	; 62
    1d8c:	0f be       	out	0x3f, r0	; 63
    1d8e:	cd bf       	out	0x3d, r28	; 61
    1d90:	6c 01       	movw	r12, r24
    1d92:	7b 01       	movw	r14, r22
    1d94:	dc 01       	movw	r26, r24
    1d96:	12 96       	adiw	r26, 0x02	; 2
    1d98:	8d 91       	ld	r24, X+
    1d9a:	9c 91       	ld	r25, X
    1d9c:	13 97       	sbiw	r26, 0x03	; 3
    1d9e:	89 2b       	or	r24, r25
    1da0:	11 f5       	brne	.+68     	; 0x1de6 <_ZN10LinkedListI11LCDMenuItemE7unshiftES0_+0x76>
    1da2:	ed 91       	ld	r30, X+
    1da4:	fc 91       	ld	r31, X
    1da6:	04 81       	ldd	r16, Z+4	; 0x04
    1da8:	15 81       	ldd	r17, Z+5	; 0x05
    1daa:	ce 01       	movw	r24, r28
    1dac:	01 96       	adiw	r24, 0x01	; 1
    1dae:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    1db2:	f7 01       	movw	r30, r14
    1db4:	86 81       	ldd	r24, Z+6	; 0x06
    1db6:	8f 83       	std	Y+7, r24	; 0x07
    1db8:	87 81       	ldd	r24, Z+7	; 0x07
    1dba:	90 85       	ldd	r25, Z+8	; 0x08
    1dbc:	99 87       	std	Y+9, r25	; 0x09
    1dbe:	88 87       	std	Y+8, r24	; 0x08
    1dc0:	81 85       	ldd	r24, Z+9	; 0x09
    1dc2:	92 85       	ldd	r25, Z+10	; 0x0a
    1dc4:	9b 87       	std	Y+11, r25	; 0x0b
    1dc6:	8a 87       	std	Y+10, r24	; 0x0a
    1dc8:	83 85       	ldd	r24, Z+11	; 0x0b
    1dca:	94 85       	ldd	r25, Z+12	; 0x0c
    1dcc:	9d 87       	std	Y+13, r25	; 0x0d
    1dce:	8c 87       	std	Y+12, r24	; 0x0c
    1dd0:	be 01       	movw	r22, r28
    1dd2:	6f 5f       	subi	r22, 0xFF	; 255
    1dd4:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd6:	c6 01       	movw	r24, r12
    1dd8:	f8 01       	movw	r30, r16
    1dda:	19 95       	eicall
    1ddc:	18 2f       	mov	r17, r24
    1dde:	ce 01       	movw	r24, r28
    1de0:	01 96       	adiw	r24, 0x01	; 1
    1de2:	40 d6       	rcall	.+3200   	; 0x2a64 <_ZN11LCDMenuItemD1Ev>
    1de4:	3a c0       	rjmp	.+116    	; 0x1e5a <_ZN10LinkedListI11LCDMenuItemE7unshiftES0_+0xea>
    1de6:	8f e0       	ldi	r24, 0x0F	; 15
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	0e 94 36 31 	call	0x626c	; 0x626c <_Znwj>
    1dee:	8c 01       	movw	r16, r24
    1df0:	8f e0       	ldi	r24, 0x0F	; 15
    1df2:	d8 01       	movw	r26, r16
    1df4:	1d 92       	st	X+, r1
    1df6:	8a 95       	dec	r24
    1df8:	e9 f7       	brne	.-6      	; 0x1df4 <_ZN10LinkedListI11LCDMenuItemE7unshiftES0_+0x84>
    1dfa:	c8 01       	movw	r24, r16
    1dfc:	21 d6       	rcall	.+3138   	; 0x2a40 <_ZN11LCDMenuItemC1Ev>
    1dfe:	f6 01       	movw	r30, r12
    1e00:	84 81       	ldd	r24, Z+4	; 0x04
    1e02:	95 81       	ldd	r25, Z+5	; 0x05
    1e04:	d8 01       	movw	r26, r16
    1e06:	1e 96       	adiw	r26, 0x0e	; 14
    1e08:	9c 93       	st	X, r25
    1e0a:	8e 93       	st	-X, r24
    1e0c:	1d 97       	sbiw	r26, 0x0d	; 13
    1e0e:	b7 01       	movw	r22, r14
    1e10:	c8 01       	movw	r24, r16
    1e12:	0e 94 5a 38 	call	0x70b4	; 0x70b4 <_ZN6StringaSERKS_>
    1e16:	f7 01       	movw	r30, r14
    1e18:	86 81       	ldd	r24, Z+6	; 0x06
    1e1a:	d8 01       	movw	r26, r16
    1e1c:	16 96       	adiw	r26, 0x06	; 6
    1e1e:	8c 93       	st	X, r24
    1e20:	16 97       	sbiw	r26, 0x06	; 6
    1e22:	87 81       	ldd	r24, Z+7	; 0x07
    1e24:	90 85       	ldd	r25, Z+8	; 0x08
    1e26:	18 96       	adiw	r26, 0x08	; 8
    1e28:	9c 93       	st	X, r25
    1e2a:	8e 93       	st	-X, r24
    1e2c:	17 97       	sbiw	r26, 0x07	; 7
    1e2e:	81 85       	ldd	r24, Z+9	; 0x09
    1e30:	92 85       	ldd	r25, Z+10	; 0x0a
    1e32:	1a 96       	adiw	r26, 0x0a	; 10
    1e34:	9c 93       	st	X, r25
    1e36:	8e 93       	st	-X, r24
    1e38:	19 97       	sbiw	r26, 0x09	; 9
    1e3a:	83 85       	ldd	r24, Z+11	; 0x0b
    1e3c:	94 85       	ldd	r25, Z+12	; 0x0c
    1e3e:	1c 96       	adiw	r26, 0x0c	; 12
    1e40:	9c 93       	st	X, r25
    1e42:	8e 93       	st	-X, r24
    1e44:	1b 97       	sbiw	r26, 0x0b	; 11
    1e46:	f6 01       	movw	r30, r12
    1e48:	15 83       	std	Z+5, r17	; 0x05
    1e4a:	04 83       	std	Z+4, r16	; 0x04
    1e4c:	82 81       	ldd	r24, Z+2	; 0x02
    1e4e:	93 81       	ldd	r25, Z+3	; 0x03
    1e50:	01 96       	adiw	r24, 0x01	; 1
    1e52:	93 83       	std	Z+3, r25	; 0x03
    1e54:	82 83       	std	Z+2, r24	; 0x02
    1e56:	14 86       	std	Z+12, r1	; 0x0c
    1e58:	11 e0       	ldi	r17, 0x01	; 1
    1e5a:	81 2f       	mov	r24, r17
    1e5c:	2d 96       	adiw	r28, 0x0d	; 13
    1e5e:	0f b6       	in	r0, 0x3f	; 63
    1e60:	f8 94       	cli
    1e62:	de bf       	out	0x3e, r29	; 62
    1e64:	0f be       	out	0x3f, r0	; 63
    1e66:	cd bf       	out	0x3d, r28	; 61
    1e68:	df 91       	pop	r29
    1e6a:	cf 91       	pop	r28
    1e6c:	1f 91       	pop	r17
    1e6e:	0f 91       	pop	r16
    1e70:	ff 90       	pop	r15
    1e72:	ef 90       	pop	r14
    1e74:	df 90       	pop	r13
    1e76:	cf 90       	pop	r12
    1e78:	08 95       	ret

00001e7a <_ZN10LinkedListI11LCDMenuItemE5shiftEv>:
    1e7a:	af 92       	push	r10
    1e7c:	bf 92       	push	r11
    1e7e:	cf 92       	push	r12
    1e80:	df 92       	push	r13
    1e82:	ef 92       	push	r14
    1e84:	ff 92       	push	r15
    1e86:	0f 93       	push	r16
    1e88:	1f 93       	push	r17
    1e8a:	cf 93       	push	r28
    1e8c:	df 93       	push	r29
    1e8e:	cd b7       	in	r28, 0x3d	; 61
    1e90:	de b7       	in	r29, 0x3e	; 62
    1e92:	2d 97       	sbiw	r28, 0x0d	; 13
    1e94:	0f b6       	in	r0, 0x3f	; 63
    1e96:	f8 94       	cli
    1e98:	de bf       	out	0x3e, r29	; 62
    1e9a:	0f be       	out	0x3f, r0	; 63
    1e9c:	cd bf       	out	0x3d, r28	; 61
    1e9e:	7c 01       	movw	r14, r24
    1ea0:	8b 01       	movw	r16, r22
    1ea2:	db 01       	movw	r26, r22
    1ea4:	12 96       	adiw	r26, 0x02	; 2
    1ea6:	8d 91       	ld	r24, X+
    1ea8:	9c 91       	ld	r25, X
    1eaa:	13 97       	sbiw	r26, 0x03	; 3
    1eac:	18 16       	cp	r1, r24
    1eae:	19 06       	cpc	r1, r25
    1eb0:	1c f0       	brlt	.+6      	; 0x1eb8 <_ZN10LinkedListI11LCDMenuItemE5shiftEv+0x3e>
    1eb2:	c7 01       	movw	r24, r14
    1eb4:	c5 d5       	rcall	.+2954   	; 0x2a40 <_ZN11LCDMenuItemC1Ev>
    1eb6:	5e c0       	rjmp	.+188    	; 0x1f74 <_ZN10LinkedListI11LCDMenuItemE5shiftEv+0xfa>
    1eb8:	02 97       	sbiw	r24, 0x02	; 2
    1eba:	0c f4       	brge	.+2      	; 0x1ebe <_ZN10LinkedListI11LCDMenuItemE5shiftEv+0x44>
    1ebc:	53 c0       	rjmp	.+166    	; 0x1f64 <_ZN10LinkedListI11LCDMenuItemE5shiftEv+0xea>
    1ebe:	fb 01       	movw	r30, r22
    1ec0:	c4 80       	ldd	r12, Z+4	; 0x04
    1ec2:	d5 80       	ldd	r13, Z+5	; 0x05
    1ec4:	d6 01       	movw	r26, r12
    1ec6:	1d 96       	adiw	r26, 0x0d	; 13
    1ec8:	ad 90       	ld	r10, X+
    1eca:	bc 90       	ld	r11, X
    1ecc:	1e 97       	sbiw	r26, 0x0e	; 14
    1ece:	b6 01       	movw	r22, r12
    1ed0:	ce 01       	movw	r24, r28
    1ed2:	01 96       	adiw	r24, 0x01	; 1
    1ed4:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    1ed8:	f6 01       	movw	r30, r12
    1eda:	86 81       	ldd	r24, Z+6	; 0x06
    1edc:	8f 83       	std	Y+7, r24	; 0x07
    1ede:	87 81       	ldd	r24, Z+7	; 0x07
    1ee0:	90 85       	ldd	r25, Z+8	; 0x08
    1ee2:	99 87       	std	Y+9, r25	; 0x09
    1ee4:	88 87       	std	Y+8, r24	; 0x08
    1ee6:	81 85       	ldd	r24, Z+9	; 0x09
    1ee8:	92 85       	ldd	r25, Z+10	; 0x0a
    1eea:	9b 87       	std	Y+11, r25	; 0x0b
    1eec:	8a 87       	std	Y+10, r24	; 0x0a
    1eee:	83 85       	ldd	r24, Z+11	; 0x0b
    1ef0:	94 85       	ldd	r25, Z+12	; 0x0c
    1ef2:	9d 87       	std	Y+13, r25	; 0x0d
    1ef4:	8c 87       	std	Y+12, r24	; 0x0c
    1ef6:	d8 01       	movw	r26, r16
    1ef8:	14 96       	adiw	r26, 0x04	; 4
    1efa:	cd 90       	ld	r12, X+
    1efc:	dc 90       	ld	r13, X
    1efe:	15 97       	sbiw	r26, 0x05	; 5
    1f00:	c1 14       	cp	r12, r1
    1f02:	d1 04       	cpc	r13, r1
    1f04:	29 f0       	breq	.+10     	; 0x1f10 <_ZN10LinkedListI11LCDMenuItemE5shiftEv+0x96>
    1f06:	c6 01       	movw	r24, r12
    1f08:	ad d5       	rcall	.+2906   	; 0x2a64 <_ZN11LCDMenuItemD1Ev>
    1f0a:	c6 01       	movw	r24, r12
    1f0c:	0e 94 39 31 	call	0x6272	; 0x6272 <_ZdlPv>
    1f10:	f8 01       	movw	r30, r16
    1f12:	b5 82       	std	Z+5, r11	; 0x05
    1f14:	a4 82       	std	Z+4, r10	; 0x04
    1f16:	82 81       	ldd	r24, Z+2	; 0x02
    1f18:	93 81       	ldd	r25, Z+3	; 0x03
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	93 83       	std	Z+3, r25	; 0x03
    1f1e:	82 83       	std	Z+2, r24	; 0x02
    1f20:	14 86       	std	Z+12, r1	; 0x0c
    1f22:	be 01       	movw	r22, r28
    1f24:	6f 5f       	subi	r22, 0xFF	; 255
    1f26:	7f 4f       	sbci	r23, 0xFF	; 255
    1f28:	c7 01       	movw	r24, r14
    1f2a:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    1f2e:	8f 81       	ldd	r24, Y+7	; 0x07
    1f30:	d7 01       	movw	r26, r14
    1f32:	16 96       	adiw	r26, 0x06	; 6
    1f34:	8c 93       	st	X, r24
    1f36:	16 97       	sbiw	r26, 0x06	; 6
    1f38:	88 85       	ldd	r24, Y+8	; 0x08
    1f3a:	99 85       	ldd	r25, Y+9	; 0x09
    1f3c:	18 96       	adiw	r26, 0x08	; 8
    1f3e:	9c 93       	st	X, r25
    1f40:	8e 93       	st	-X, r24
    1f42:	17 97       	sbiw	r26, 0x07	; 7
    1f44:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f46:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f48:	1a 96       	adiw	r26, 0x0a	; 10
    1f4a:	9c 93       	st	X, r25
    1f4c:	8e 93       	st	-X, r24
    1f4e:	19 97       	sbiw	r26, 0x09	; 9
    1f50:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f52:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f54:	1c 96       	adiw	r26, 0x0c	; 12
    1f56:	9c 93       	st	X, r25
    1f58:	8e 93       	st	-X, r24
    1f5a:	1b 97       	sbiw	r26, 0x0b	; 11
    1f5c:	ce 01       	movw	r24, r28
    1f5e:	01 96       	adiw	r24, 0x01	; 1
    1f60:	81 d5       	rcall	.+2818   	; 0x2a64 <_ZN11LCDMenuItemD1Ev>
    1f62:	08 c0       	rjmp	.+16     	; 0x1f74 <_ZN10LinkedListI11LCDMenuItemE5shiftEv+0xfa>
    1f64:	db 01       	movw	r26, r22
    1f66:	ed 91       	ld	r30, X+
    1f68:	fc 91       	ld	r31, X
    1f6a:	04 84       	ldd	r0, Z+12	; 0x0c
    1f6c:	f5 85       	ldd	r31, Z+13	; 0x0d
    1f6e:	e0 2d       	mov	r30, r0
    1f70:	c7 01       	movw	r24, r14
    1f72:	19 95       	eicall
    1f74:	c7 01       	movw	r24, r14
    1f76:	2d 96       	adiw	r28, 0x0d	; 13
    1f78:	0f b6       	in	r0, 0x3f	; 63
    1f7a:	f8 94       	cli
    1f7c:	de bf       	out	0x3e, r29	; 62
    1f7e:	0f be       	out	0x3f, r0	; 63
    1f80:	cd bf       	out	0x3d, r28	; 61
    1f82:	df 91       	pop	r29
    1f84:	cf 91       	pop	r28
    1f86:	1f 91       	pop	r17
    1f88:	0f 91       	pop	r16
    1f8a:	ff 90       	pop	r15
    1f8c:	ef 90       	pop	r14
    1f8e:	df 90       	pop	r13
    1f90:	cf 90       	pop	r12
    1f92:	bf 90       	pop	r11
    1f94:	af 90       	pop	r10
    1f96:	08 95       	ret

00001f98 <_ZN7LCDMenuC1E6String>:
    1f98:	ef 92       	push	r14
    1f9a:	ff 92       	push	r15
    1f9c:	0f 93       	push	r16
    1f9e:	1f 93       	push	r17
    1fa0:	cf 93       	push	r28
    1fa2:	df 93       	push	r29
    1fa4:	cd b7       	in	r28, 0x3d	; 61
    1fa6:	de b7       	in	r29, 0x3e	; 62
    1fa8:	2c 97       	sbiw	r28, 0x0c	; 12
    1faa:	0f b6       	in	r0, 0x3f	; 63
    1fac:	f8 94       	cli
    1fae:	de bf       	out	0x3e, r29	; 62
    1fb0:	0f be       	out	0x3f, r0	; 63
    1fb2:	cd bf       	out	0x3d, r28	; 61
    1fb4:	8c 01       	movw	r16, r24
    1fb6:	7b 01       	movw	r14, r22
    1fb8:	6e ee       	ldi	r22, 0xEE	; 238
    1fba:	74 e0       	ldi	r23, 0x04	; 4
    1fbc:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
    1fc0:	8b e0       	ldi	r24, 0x0B	; 11
    1fc2:	93 e0       	ldi	r25, 0x03	; 3
    1fc4:	f8 01       	movw	r30, r16
    1fc6:	97 83       	std	Z+7, r25	; 0x07
    1fc8:	86 83       	std	Z+6, r24	; 0x06
    1fca:	13 86       	std	Z+11, r1	; 0x0b
    1fcc:	12 86       	std	Z+10, r1	; 0x0a
    1fce:	15 86       	std	Z+13, r1	; 0x0d
    1fd0:	14 86       	std	Z+12, r1	; 0x0c
    1fd2:	11 86       	std	Z+9, r1	; 0x09
    1fd4:	10 86       	std	Z+8, r1	; 0x08
    1fd6:	17 86       	std	Z+15, r1	; 0x0f
    1fd8:	16 86       	std	Z+14, r1	; 0x0e
    1fda:	11 8a       	std	Z+17, r1	; 0x11
    1fdc:	10 8a       	std	Z+16, r1	; 0x10
    1fde:	12 8a       	std	Z+18, r1	; 0x12
    1fe0:	14 8a       	std	Z+20, r1	; 0x14
    1fe2:	13 8a       	std	Z+19, r1	; 0x13
    1fe4:	16 8a       	std	Z+22, r1	; 0x16
    1fe6:	15 8a       	std	Z+21, r1	; 0x15
    1fe8:	10 8e       	std	Z+24, r1	; 0x18
    1fea:	17 8a       	std	Z+23, r1	; 0x17
    1fec:	12 8e       	std	Z+26, r1	; 0x1a
    1fee:	11 8e       	std	Z+25, r1	; 0x19
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	94 8f       	std	Z+28, r25	; 0x1c
    1ff6:	83 8f       	std	Z+27, r24	; 0x1b
    1ff8:	b7 01       	movw	r22, r14
    1ffa:	c8 01       	movw	r24, r16
    1ffc:	0e 94 5a 38 	call	0x70b4	; 0x70b4 <_ZN6StringaSERKS_>
    2000:	6f ee       	ldi	r22, 0xEF	; 239
    2002:	72 e0       	ldi	r23, 0x02	; 2
    2004:	ce 01       	movw	r24, r28
    2006:	07 96       	adiw	r24, 0x07	; 7
    2008:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
    200c:	be 01       	movw	r22, r28
    200e:	69 5f       	subi	r22, 0xF9	; 249
    2010:	7f 4f       	sbci	r23, 0xFF	; 255
    2012:	ce 01       	movw	r24, r28
    2014:	01 96       	adiw	r24, 0x01	; 1
    2016:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    201a:	8d e0       	ldi	r24, 0x0D	; 13
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	0e 94 36 31 	call	0x626c	; 0x626c <_Znwj>
    2022:	7c 01       	movw	r14, r24
    2024:	be 01       	movw	r22, r28
    2026:	6f 5f       	subi	r22, 0xFF	; 255
    2028:	7f 4f       	sbci	r23, 0xFF	; 255
    202a:	81 d4       	rcall	.+2306   	; 0x292e <_ZN11LCDMenuItemC1E6String>
    202c:	f8 01       	movw	r30, r16
    202e:	f0 8e       	std	Z+24, r15	; 0x18
    2030:	e7 8a       	std	Z+23, r14	; 0x17
    2032:	ce 01       	movw	r24, r28
    2034:	01 96       	adiw	r24, 0x01	; 1
    2036:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <_ZN6StringD1Ev>
    203a:	ce 01       	movw	r24, r28
    203c:	07 96       	adiw	r24, 0x07	; 7
    203e:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <_ZN6StringD1Ev>
    2042:	2c 96       	adiw	r28, 0x0c	; 12
    2044:	0f b6       	in	r0, 0x3f	; 63
    2046:	f8 94       	cli
    2048:	de bf       	out	0x3e, r29	; 62
    204a:	0f be       	out	0x3f, r0	; 63
    204c:	cd bf       	out	0x3d, r28	; 61
    204e:	df 91       	pop	r29
    2050:	cf 91       	pop	r28
    2052:	1f 91       	pop	r17
    2054:	0f 91       	pop	r16
    2056:	ff 90       	pop	r15
    2058:	ef 90       	pop	r14
    205a:	08 95       	ret

0000205c <_ZN7LCDMenuC1E6StringPS_>:
    205c:	cf 92       	push	r12
    205e:	df 92       	push	r13
    2060:	ef 92       	push	r14
    2062:	ff 92       	push	r15
    2064:	0f 93       	push	r16
    2066:	1f 93       	push	r17
    2068:	cf 93       	push	r28
    206a:	df 93       	push	r29
    206c:	cd b7       	in	r28, 0x3d	; 61
    206e:	de b7       	in	r29, 0x3e	; 62
    2070:	2c 97       	sbiw	r28, 0x0c	; 12
    2072:	0f b6       	in	r0, 0x3f	; 63
    2074:	f8 94       	cli
    2076:	de bf       	out	0x3e, r29	; 62
    2078:	0f be       	out	0x3f, r0	; 63
    207a:	cd bf       	out	0x3d, r28	; 61
    207c:	8c 01       	movw	r16, r24
    207e:	6b 01       	movw	r12, r22
    2080:	7a 01       	movw	r14, r20
    2082:	6e ee       	ldi	r22, 0xEE	; 238
    2084:	74 e0       	ldi	r23, 0x04	; 4
    2086:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
    208a:	8b e0       	ldi	r24, 0x0B	; 11
    208c:	93 e0       	ldi	r25, 0x03	; 3
    208e:	f8 01       	movw	r30, r16
    2090:	97 83       	std	Z+7, r25	; 0x07
    2092:	86 83       	std	Z+6, r24	; 0x06
    2094:	13 86       	std	Z+11, r1	; 0x0b
    2096:	12 86       	std	Z+10, r1	; 0x0a
    2098:	15 86       	std	Z+13, r1	; 0x0d
    209a:	14 86       	std	Z+12, r1	; 0x0c
    209c:	11 86       	std	Z+9, r1	; 0x09
    209e:	10 86       	std	Z+8, r1	; 0x08
    20a0:	17 86       	std	Z+15, r1	; 0x0f
    20a2:	16 86       	std	Z+14, r1	; 0x0e
    20a4:	11 8a       	std	Z+17, r1	; 0x11
    20a6:	10 8a       	std	Z+16, r1	; 0x10
    20a8:	12 8a       	std	Z+18, r1	; 0x12
    20aa:	14 8a       	std	Z+20, r1	; 0x14
    20ac:	13 8a       	std	Z+19, r1	; 0x13
    20ae:	16 8a       	std	Z+22, r1	; 0x16
    20b0:	15 8a       	std	Z+21, r1	; 0x15
    20b2:	10 8e       	std	Z+24, r1	; 0x18
    20b4:	17 8a       	std	Z+23, r1	; 0x17
    20b6:	12 8e       	std	Z+26, r1	; 0x1a
    20b8:	11 8e       	std	Z+25, r1	; 0x19
    20ba:	81 e0       	ldi	r24, 0x01	; 1
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	94 8f       	std	Z+28, r25	; 0x1c
    20c0:	83 8f       	std	Z+27, r24	; 0x1b
    20c2:	b6 01       	movw	r22, r12
    20c4:	c8 01       	movw	r24, r16
    20c6:	0e 94 5a 38 	call	0x70b4	; 0x70b4 <_ZN6StringaSERKS_>
    20ca:	f8 01       	movw	r30, r16
    20cc:	f4 8a       	std	Z+20, r15	; 0x14
    20ce:	e3 8a       	std	Z+19, r14	; 0x13
    20d0:	64 eb       	ldi	r22, 0xB4	; 180
    20d2:	72 e0       	ldi	r23, 0x02	; 2
    20d4:	ce 01       	movw	r24, r28
    20d6:	07 96       	adiw	r24, 0x07	; 7
    20d8:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
    20dc:	be 01       	movw	r22, r28
    20de:	69 5f       	subi	r22, 0xF9	; 249
    20e0:	7f 4f       	sbci	r23, 0xFF	; 255
    20e2:	ce 01       	movw	r24, r28
    20e4:	01 96       	adiw	r24, 0x01	; 1
    20e6:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    20ea:	8d e0       	ldi	r24, 0x0D	; 13
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	0e 94 36 31 	call	0x626c	; 0x626c <_Znwj>
    20f2:	7c 01       	movw	r14, r24
    20f4:	be 01       	movw	r22, r28
    20f6:	6f 5f       	subi	r22, 0xFF	; 255
    20f8:	7f 4f       	sbci	r23, 0xFF	; 255
    20fa:	19 d4       	rcall	.+2098   	; 0x292e <_ZN11LCDMenuItemC1E6String>
    20fc:	f8 01       	movw	r30, r16
    20fe:	f0 8e       	std	Z+24, r15	; 0x18
    2100:	e7 8a       	std	Z+23, r14	; 0x17
    2102:	ce 01       	movw	r24, r28
    2104:	01 96       	adiw	r24, 0x01	; 1
    2106:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <_ZN6StringD1Ev>
    210a:	ce 01       	movw	r24, r28
    210c:	07 96       	adiw	r24, 0x07	; 7
    210e:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <_ZN6StringD1Ev>
    2112:	2c 96       	adiw	r28, 0x0c	; 12
    2114:	0f b6       	in	r0, 0x3f	; 63
    2116:	f8 94       	cli
    2118:	de bf       	out	0x3e, r29	; 62
    211a:	0f be       	out	0x3f, r0	; 63
    211c:	cd bf       	out	0x3d, r28	; 61
    211e:	df 91       	pop	r29
    2120:	cf 91       	pop	r28
    2122:	1f 91       	pop	r17
    2124:	0f 91       	pop	r16
    2126:	ff 90       	pop	r15
    2128:	ef 90       	pop	r14
    212a:	df 90       	pop	r13
    212c:	cf 90       	pop	r12
    212e:	08 95       	ret

00002130 <_ZN7LCDMenu8prevItemEv>:
		}
		refresh = 0;
	}
}

void LCDMenu::prevItem(void){
    2130:	cf 93       	push	r28
    2132:	df 93       	push	r29
    2134:	ec 01       	movw	r28, r24
	currentItem--;
    2136:	89 8d       	ldd	r24, Y+25	; 0x19
    2138:	9a 8d       	ldd	r25, Y+26	; 0x1a
    213a:	01 97       	sbiw	r24, 0x01	; 1
	if (currentItem < 0){ 
    213c:	1a f0       	brmi	.+6      	; 0x2144 <_ZN7LCDMenu8prevItemEv+0x14>
		refresh = 0;
	}
}

void LCDMenu::prevItem(void){
	currentItem--;
    213e:	9a 8f       	std	Y+26, r25	; 0x1a
    2140:	89 8f       	std	Y+25, r24	; 0x19
    2142:	02 c0       	rjmp	.+4      	; 0x2148 <_ZN7LCDMenu8prevItemEv+0x18>
	if (currentItem < 0){ 
		currentItem = 0;
    2144:	1a 8e       	std	Y+26, r1	; 0x1a
    2146:	19 8e       	std	Y+25, r1	; 0x19
	}
	Serial.print("Encoder Item: ");
    2148:	64 ef       	ldi	r22, 0xF4	; 244
    214a:	72 e0       	ldi	r23, 0x02	; 2
    214c:	82 e4       	ldi	r24, 0x42	; 66
    214e:	96 e0       	ldi	r25, 0x06	; 6
    2150:	0e 94 78 31 	call	0x62f0	; 0x62f0 <_ZN5Print5printEPKc>
	Serial.println(currentItem);
    2154:	69 8d       	ldd	r22, Y+25	; 0x19
    2156:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2158:	4a e0       	ldi	r20, 0x0A	; 10
    215a:	50 e0       	ldi	r21, 0x00	; 0
    215c:	82 e4       	ldi	r24, 0x42	; 66
    215e:	96 e0       	ldi	r25, 0x06	; 6
    2160:	0e 94 64 32 	call	0x64c8	; 0x64c8 <_ZN5Print7printlnEii>
	refresh = 1;
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	9c 8f       	std	Y+28, r25	; 0x1c
    216a:	8b 8f       	std	Y+27, r24	; 0x1b
}
    216c:	df 91       	pop	r29
    216e:	cf 91       	pop	r28
    2170:	08 95       	ret

00002172 <_ZN7LCDMenu8nextItemEv>:

void LCDMenu::nextItem(void){
    2172:	cf 93       	push	r28
    2174:	df 93       	push	r29
    2176:	ec 01       	movw	r28, r24
	currentItem++;
    2178:	89 8d       	ldd	r24, Y+25	; 0x19
    217a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    217c:	01 96       	adiw	r24, 0x01	; 1
    217e:	9a 8f       	std	Y+26, r25	; 0x1a
    2180:	89 8f       	std	Y+25, r24	; 0x19
	return false;
}

template<typename T>
int LinkedList<T>::size(){
	return _size;
    2182:	28 85       	ldd	r18, Y+8	; 0x08
    2184:	39 85       	ldd	r19, Y+9	; 0x09
	if (currentItem > Items.size()){
    2186:	28 17       	cp	r18, r24
    2188:	39 07       	cpc	r19, r25
    218a:	14 f4       	brge	.+4      	; 0x2190 <_ZN7LCDMenu8nextItemEv+0x1e>
		currentItem = Items.size();
    218c:	3a 8f       	std	Y+26, r19	; 0x1a
    218e:	29 8f       	std	Y+25, r18	; 0x19
	}
	Serial.print("Encoder Item: ");
    2190:	64 ef       	ldi	r22, 0xF4	; 244
    2192:	72 e0       	ldi	r23, 0x02	; 2
    2194:	82 e4       	ldi	r24, 0x42	; 66
    2196:	96 e0       	ldi	r25, 0x06	; 6
    2198:	0e 94 78 31 	call	0x62f0	; 0x62f0 <_ZN5Print5printEPKc>
	Serial.println(currentItem);
    219c:	69 8d       	ldd	r22, Y+25	; 0x19
    219e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21a0:	4a e0       	ldi	r20, 0x0A	; 10
    21a2:	50 e0       	ldi	r21, 0x00	; 0
    21a4:	82 e4       	ldi	r24, 0x42	; 66
    21a6:	96 e0       	ldi	r25, 0x06	; 6
    21a8:	0e 94 64 32 	call	0x64c8	; 0x64c8 <_ZN5Print7printlnEii>
	refresh = 1;
    21ac:	81 e0       	ldi	r24, 0x01	; 1
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	9c 8f       	std	Y+28, r25	; 0x1c
    21b2:	8b 8f       	std	Y+27, r24	; 0x1b
}
    21b4:	df 91       	pop	r29
    21b6:	cf 91       	pop	r28
    21b8:	08 95       	ret

000021ba <_ZN10LinkedListI11LCDMenuItemE7getNodeEi>:
/*
	Actualy "logic" coding
*/

template<typename T>
ListNode<T>* LinkedList<T>::getNode(int index){
    21ba:	dc 01       	movw	r26, r24

	int _pos = 0;
	ListNode<T>* current = root;
    21bc:	14 96       	adiw	r26, 0x04	; 4
    21be:	ed 91       	ld	r30, X+
    21c0:	fc 91       	ld	r31, X
    21c2:	15 97       	sbiw	r26, 0x05	; 5

	// Check if the node trying to get is
	// immediatly AFTER the previous got one
	if(isCached && lastIndexGot <= index){
    21c4:	1c 96       	adiw	r26, 0x0c	; 12
    21c6:	8c 91       	ld	r24, X
    21c8:	1c 97       	sbiw	r26, 0x0c	; 12
    21ca:	88 23       	and	r24, r24
    21cc:	61 f0       	breq	.+24     	; 0x21e6 <_ZN10LinkedListI11LCDMenuItemE7getNodeEi+0x2c>
    21ce:	1a 96       	adiw	r26, 0x0a	; 10
    21d0:	2d 91       	ld	r18, X+
    21d2:	3c 91       	ld	r19, X
    21d4:	1b 97       	sbiw	r26, 0x0b	; 11
    21d6:	62 17       	cp	r22, r18
    21d8:	73 07       	cpc	r23, r19
    21da:	44 f0       	brlt	.+16     	; 0x21ec <_ZN10LinkedListI11LCDMenuItemE7getNodeEi+0x32>
		_pos = lastIndexGot;
		current = lastNodeGot;
    21dc:	18 96       	adiw	r26, 0x08	; 8
    21de:	ed 91       	ld	r30, X+
    21e0:	fc 91       	ld	r31, X
    21e2:	19 97       	sbiw	r26, 0x09	; 9
    21e4:	05 c0       	rjmp	.+10     	; 0x21f0 <_ZN10LinkedListI11LCDMenuItemE7getNodeEi+0x36>
*/

template<typename T>
ListNode<T>* LinkedList<T>::getNode(int index){

	int _pos = 0;
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	02 c0       	rjmp	.+4      	; 0x21f0 <_ZN10LinkedListI11LCDMenuItemE7getNodeEi+0x36>
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	30 e0       	ldi	r19, 0x00	; 0
	if(isCached && lastIndexGot <= index){
		_pos = lastIndexGot;
		current = lastNodeGot;
	}

	while(_pos < index && current){
    21f0:	26 17       	cp	r18, r22
    21f2:	37 07       	cpc	r19, r23
    21f4:	64 f4       	brge	.+24     	; 0x220e <__stack+0xf>
    21f6:	30 97       	sbiw	r30, 0x00	; 0
    21f8:	51 f0       	breq	.+20     	; 0x220e <__stack+0xf>
		current = current->next;
    21fa:	05 84       	ldd	r0, Z+13	; 0x0d
    21fc:	f6 85       	ldd	r31, Z+14	; 0x0e
    21fe:	e0 2d       	mov	r30, r0

		_pos++;
    2200:	2f 5f       	subi	r18, 0xFF	; 255
    2202:	3f 4f       	sbci	r19, 0xFF	; 255
	if(isCached && lastIndexGot <= index){
		_pos = lastIndexGot;
		current = lastNodeGot;
	}

	while(_pos < index && current){
    2204:	26 17       	cp	r18, r22
    2206:	37 07       	cpc	r19, r23
    2208:	14 f4       	brge	.+4      	; 0x220e <__stack+0xf>
    220a:	30 97       	sbiw	r30, 0x00	; 0
    220c:	b1 f7       	brne	.-20     	; 0x21fa <_ZN10LinkedListI11LCDMenuItemE7getNodeEi+0x40>

		_pos++;
	}

	// Check if the object index got is the same as the required
	if(_pos == index){
    220e:	26 17       	cp	r18, r22
    2210:	37 07       	cpc	r19, r23
    2212:	79 f4       	brne	.+30     	; 0x2232 <__stack+0x33>
		isCached = true;
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	1c 96       	adiw	r26, 0x0c	; 12
    2218:	8c 93       	st	X, r24
    221a:	1c 97       	sbiw	r26, 0x0c	; 12
		lastIndexGot = index;
    221c:	1b 96       	adiw	r26, 0x0b	; 11
    221e:	3c 93       	st	X, r19
    2220:	2e 93       	st	-X, r18
    2222:	1a 97       	sbiw	r26, 0x0a	; 10
		lastNodeGot = current;
    2224:	19 96       	adiw	r26, 0x09	; 9
    2226:	fc 93       	st	X, r31
    2228:	ee 93       	st	-X, r30
    222a:	18 97       	sbiw	r26, 0x08	; 8

		return current;
    222c:	8e 2f       	mov	r24, r30
    222e:	9f 2f       	mov	r25, r31
    2230:	08 95       	ret
	}

	return false;
    2232:	80 e0       	ldi	r24, 0x00	; 0
    2234:	90 e0       	ldi	r25, 0x00	; 0
}
    2236:	08 95       	ret

00002238 <_ZN10LinkedListI11LCDMenuItemE3getEi>:
	return ret;
}


template<typename T>
T LinkedList<T>::get(int index){
    2238:	0f 93       	push	r16
    223a:	1f 93       	push	r17
    223c:	cf 93       	push	r28
    223e:	df 93       	push	r29
    2240:	ec 01       	movw	r28, r24
    2242:	cb 01       	movw	r24, r22
	ListNode<T> *tmp = getNode(index);
    2244:	ba 01       	movw	r22, r20
    2246:	b9 df       	rcall	.-142    	; 0x21ba <_ZN10LinkedListI11LCDMenuItemE7getNodeEi>
    2248:	8c 01       	movw	r16, r24

	return (tmp ? tmp->data : T());
    224a:	00 97       	sbiw	r24, 0x00	; 0
    224c:	a1 f0       	breq	.+40     	; 0x2276 <_ZN10LinkedListI11LCDMenuItemE3getEi+0x3e>
#include <string.h>

class LCDMenu;
class LCDToggleOption;
class UserInterface;
class LCDMenuItem
    224e:	bc 01       	movw	r22, r24
    2250:	ce 01       	movw	r24, r28
    2252:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    2256:	f8 01       	movw	r30, r16
    2258:	86 81       	ldd	r24, Z+6	; 0x06
    225a:	8e 83       	std	Y+6, r24	; 0x06
    225c:	87 81       	ldd	r24, Z+7	; 0x07
    225e:	90 85       	ldd	r25, Z+8	; 0x08
    2260:	98 87       	std	Y+8, r25	; 0x08
    2262:	8f 83       	std	Y+7, r24	; 0x07
    2264:	81 85       	ldd	r24, Z+9	; 0x09
    2266:	92 85       	ldd	r25, Z+10	; 0x0a
    2268:	9a 87       	std	Y+10, r25	; 0x0a
    226a:	89 87       	std	Y+9, r24	; 0x09
    226c:	83 85       	ldd	r24, Z+11	; 0x0b
    226e:	94 85       	ldd	r25, Z+12	; 0x0c
    2270:	9c 87       	std	Y+12, r25	; 0x0c
    2272:	8b 87       	std	Y+11, r24	; 0x0b
    2274:	02 c0       	rjmp	.+4      	; 0x227a <_ZN10LinkedListI11LCDMenuItemE3getEi+0x42>
    2276:	ce 01       	movw	r24, r28
    2278:	e3 d3       	rcall	.+1990   	; 0x2a40 <_ZN11LCDMenuItemC1Ev>
}
    227a:	ce 01       	movw	r24, r28
    227c:	df 91       	pop	r29
    227e:	cf 91       	pop	r28
    2280:	1f 91       	pop	r17
    2282:	0f 91       	pop	r16
    2284:	08 95       	ret

00002286 <_ZN7LCDMenu7displayEP13UserInterface>:
// default destructor
LCDMenu::~LCDMenu()
{
}

void LCDMenu::display(UserInterface *UI){
    2286:	2f 92       	push	r2
    2288:	3f 92       	push	r3
    228a:	4f 92       	push	r4
    228c:	5f 92       	push	r5
    228e:	6f 92       	push	r6
    2290:	7f 92       	push	r7
    2292:	8f 92       	push	r8
    2294:	9f 92       	push	r9
    2296:	af 92       	push	r10
    2298:	bf 92       	push	r11
    229a:	cf 92       	push	r12
    229c:	df 92       	push	r13
    229e:	ef 92       	push	r14
    22a0:	ff 92       	push	r15
    22a2:	0f 93       	push	r16
    22a4:	1f 93       	push	r17
    22a6:	cf 93       	push	r28
    22a8:	df 93       	push	r29
    22aa:	cd b7       	in	r28, 0x3d	; 61
    22ac:	de b7       	in	r29, 0x3e	; 62
    22ae:	2d 97       	sbiw	r28, 0x0d	; 13
    22b0:	0f b6       	in	r0, 0x3f	; 63
    22b2:	f8 94       	cli
    22b4:	de bf       	out	0x3e, r29	; 62
    22b6:	0f be       	out	0x3f, r0	; 63
    22b8:	cd bf       	out	0x3d, r28	; 61
	LiquidCrystal_I2C *LCD = UI->LCD;
    22ba:	fb 01       	movw	r30, r22
    22bc:	06 85       	ldd	r16, Z+14	; 0x0e
    22be:	17 85       	ldd	r17, Z+15	; 0x0f
	if (refresh==1){
    22c0:	fc 01       	movw	r30, r24
    22c2:	23 8d       	ldd	r18, Z+27	; 0x1b
    22c4:	34 8d       	ldd	r19, Z+28	; 0x1c
    22c6:	21 30       	cpi	r18, 0x01	; 1
    22c8:	31 05       	cpc	r19, r1
    22ca:	09 f0       	breq	.+2      	; 0x22ce <_ZN7LCDMenu7displayEP13UserInterface+0x48>
    22cc:	93 c0       	rjmp	.+294    	; 0x23f4 <_ZN7LCDMenu7displayEP13UserInterface+0x16e>
    22ce:	3b 01       	movw	r6, r22
    22d0:	7c 01       	movw	r14, r24
		//Print the Menu Header
		LCD->clear();
    22d2:	50 2e       	mov	r5, r16
    22d4:	41 2e       	mov	r4, r17
    22d6:	80 2f       	mov	r24, r16
    22d8:	91 2f       	mov	r25, r17
    22da:	0e 94 6b 27 	call	0x4ed6	; 0x4ed6 <_ZN3LCD5clearEv>
		LCD->setCursor(0,0);
    22de:	40 e0       	ldi	r20, 0x00	; 0
    22e0:	60 e0       	ldi	r22, 0x00	; 0
    22e2:	80 2f       	mov	r24, r16
    22e4:	91 2f       	mov	r25, r17
    22e6:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <_ZN3LCD9setCursorEhh>
		LCD->print("=");
    22ea:	63 e0       	ldi	r22, 0x03	; 3
    22ec:	73 e0       	ldi	r23, 0x03	; 3
    22ee:	80 2f       	mov	r24, r16
    22f0:	91 2f       	mov	r25, r17
    22f2:	0e 94 78 31 	call	0x62f0	; 0x62f0 <_ZN5Print5printEPKc>
		LCD->print(Name);
    22f6:	b7 01       	movw	r22, r14
    22f8:	80 2f       	mov	r24, r16
    22fa:	91 2f       	mov	r25, r17
    22fc:	0e 94 69 31 	call	0x62d2	; 0x62d2 <_ZN5Print5printERK6String>
	
		for(int i=0; i<(20 - Name.length() - 1); i++){
    2300:	f7 01       	movw	r30, r14
    2302:	84 81       	ldd	r24, Z+4	; 0x04
    2304:	95 81       	ldd	r25, Z+5	; 0x05
    2306:	43 97       	sbiw	r24, 0x13	; 19
    2308:	c1 f0       	breq	.+48     	; 0x233a <_ZN7LCDMenu7displayEP13UserInterface+0xb4>
    230a:	00 e0       	ldi	r16, 0x00	; 0
    230c:	10 e0       	ldi	r17, 0x00	; 0
    230e:	0f 2e       	mov	r0, r31
    2310:	f3 e1       	ldi	r31, 0x13	; 19
    2312:	cf 2e       	mov	r12, r31
    2314:	d1 2c       	mov	r13, r1
    2316:	f0 2d       	mov	r31, r0
			LCD->print("=");
    2318:	63 e0       	ldi	r22, 0x03	; 3
    231a:	73 e0       	ldi	r23, 0x03	; 3
    231c:	85 2d       	mov	r24, r5
    231e:	94 2d       	mov	r25, r4
    2320:	0e 94 78 31 	call	0x62f0	; 0x62f0 <_ZN5Print5printEPKc>
		LCD->clear();
		LCD->setCursor(0,0);
		LCD->print("=");
		LCD->print(Name);
	
		for(int i=0; i<(20 - Name.length() - 1); i++){
    2324:	0f 5f       	subi	r16, 0xFF	; 255
    2326:	1f 4f       	sbci	r17, 0xFF	; 255
    2328:	f7 01       	movw	r30, r14
    232a:	84 81       	ldd	r24, Z+4	; 0x04
    232c:	95 81       	ldd	r25, Z+5	; 0x05
    232e:	96 01       	movw	r18, r12
    2330:	28 1b       	sub	r18, r24
    2332:	39 0b       	sbc	r19, r25
    2334:	02 17       	cp	r16, r18
    2336:	13 07       	cpc	r17, r19
    2338:	78 f3       	brcs	.-34     	; 0x2318 <_ZN7LCDMenu7displayEP13UserInterface+0x92>
			LCD->print("=");
		}
	
		//Print each menu item (3 items left on line)
		int firstItemToPrint = (int)(currentItem/3);
    233a:	f7 01       	movw	r30, r14
    233c:	81 8d       	ldd	r24, Z+25	; 0x19
    233e:	92 8d       	ldd	r25, Z+26	; 0x1a
    2340:	63 e0       	ldi	r22, 0x03	; 3
    2342:	70 e0       	ldi	r23, 0x00	; 0
    2344:	0e 94 33 3b 	call	0x7666	; 0x7666 <__divmodhi4>
    2348:	8b 01       	movw	r16, r22
		int ln = 1;
		for(int i=firstItemToPrint; i<min(Items.size(),firstItemToPrint + 3); i++){
    234a:	47 01       	movw	r8, r14
    234c:	f6 e0       	ldi	r31, 0x06	; 6
    234e:	8f 0e       	add	r8, r31
    2350:	91 1c       	adc	r9, r1
    2352:	5b 01       	movw	r10, r22
    2354:	23 e0       	ldi	r18, 0x03	; 3
    2356:	a2 0e       	add	r10, r18
    2358:	b1 1c       	adc	r11, r1
    235a:	f7 01       	movw	r30, r14
    235c:	20 85       	ldd	r18, Z+8	; 0x08
    235e:	31 85       	ldd	r19, Z+9	; 0x09
    2360:	c5 01       	movw	r24, r10
    2362:	2a 15       	cp	r18, r10
    2364:	3b 05       	cpc	r19, r11
    2366:	0c f4       	brge	.+2      	; 0x236a <_ZN7LCDMenu7displayEP13UserInterface+0xe4>
    2368:	c9 01       	movw	r24, r18
    236a:	08 17       	cp	r16, r24
    236c:	19 07       	cpc	r17, r25
    236e:	0c f0       	brlt	.+2      	; 0x2372 <_ZN7LCDMenu7displayEP13UserInterface+0xec>
    2370:	3e c0       	rjmp	.+124    	; 0x23ee <_ZN7LCDMenu7displayEP13UserInterface+0x168>
    2372:	cc 24       	eor	r12, r12
    2374:	c3 94       	inc	r12
    2376:	d1 2c       	mov	r13, r1
    2378:	2a 2c       	mov	r2, r10
    237a:	3b 2c       	mov	r3, r11
			LCD->setCursor(0,ln);
    237c:	4c 2d       	mov	r20, r12
    237e:	60 e0       	ldi	r22, 0x00	; 0
    2380:	85 2d       	mov	r24, r5
    2382:	94 2d       	mov	r25, r4
    2384:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <_ZN3LCD9setCursorEhh>
			if (i == currentItem){
    2388:	f7 01       	movw	r30, r14
    238a:	81 8d       	ldd	r24, Z+25	; 0x19
    238c:	92 8d       	ldd	r25, Z+26	; 0x1a
    238e:	80 17       	cp	r24, r16
    2390:	91 07       	cpc	r25, r17
    2392:	39 f4       	brne	.+14     	; 0x23a2 <_ZN7LCDMenu7displayEP13UserInterface+0x11c>
				LCD->print(">");
    2394:	65 e0       	ldi	r22, 0x05	; 5
    2396:	73 e0       	ldi	r23, 0x03	; 3
    2398:	85 2d       	mov	r24, r5
    239a:	94 2d       	mov	r25, r4
    239c:	0e 94 78 31 	call	0x62f0	; 0x62f0 <_ZN5Print5printEPKc>
    23a0:	06 c0       	rjmp	.+12     	; 0x23ae <_ZN7LCDMenu7displayEP13UserInterface+0x128>
			}else{
				LCD->print(" ");
    23a2:	63 e6       	ldi	r22, 0x63	; 99
    23a4:	74 e0       	ldi	r23, 0x04	; 4
    23a6:	85 2d       	mov	r24, r5
    23a8:	94 2d       	mov	r25, r4
    23aa:	0e 94 78 31 	call	0x62f0	; 0x62f0 <_ZN5Print5printEPKc>
			}
			Items.get(i).Print(1,ln,UI);
    23ae:	a8 01       	movw	r20, r16
    23b0:	b4 01       	movw	r22, r8
    23b2:	ce 01       	movw	r24, r28
    23b4:	01 96       	adiw	r24, 0x01	; 1
    23b6:	40 df       	rcall	.-384    	; 0x2238 <_ZN10LinkedListI11LCDMenuItemE3getEi>
    23b8:	93 01       	movw	r18, r6
    23ba:	a6 01       	movw	r20, r12
    23bc:	61 e0       	ldi	r22, 0x01	; 1
    23be:	70 e0       	ldi	r23, 0x00	; 0
    23c0:	ce 01       	movw	r24, r28
    23c2:	01 96       	adiw	r24, 0x01	; 1
    23c4:	52 d3       	rcall	.+1700   	; 0x2a6a <_ZN11LCDMenuItem5PrintEiiP13UserInterface>
    23c6:	ce 01       	movw	r24, r28
    23c8:	01 96       	adiw	r24, 0x01	; 1
    23ca:	4c d3       	rcall	.+1688   	; 0x2a64 <_ZN11LCDMenuItemD1Ev>
			ln++;
    23cc:	ff ef       	ldi	r31, 0xFF	; 255
    23ce:	cf 1a       	sub	r12, r31
    23d0:	df 0a       	sbc	r13, r31
		}
	
		//Print each menu item (3 items left on line)
		int firstItemToPrint = (int)(currentItem/3);
		int ln = 1;
		for(int i=firstItemToPrint; i<min(Items.size(),firstItemToPrint + 3); i++){
    23d2:	0f 5f       	subi	r16, 0xFF	; 255
    23d4:	1f 4f       	sbci	r17, 0xFF	; 255
    23d6:	f7 01       	movw	r30, r14
    23d8:	20 85       	ldd	r18, Z+8	; 0x08
    23da:	31 85       	ldd	r19, Z+9	; 0x09
    23dc:	82 2d       	mov	r24, r2
    23de:	93 2d       	mov	r25, r3
    23e0:	2a 15       	cp	r18, r10
    23e2:	3b 05       	cpc	r19, r11
    23e4:	0c f4       	brge	.+2      	; 0x23e8 <_ZN7LCDMenu7displayEP13UserInterface+0x162>
    23e6:	c9 01       	movw	r24, r18
    23e8:	08 17       	cp	r16, r24
    23ea:	19 07       	cpc	r17, r25
    23ec:	3c f2       	brlt	.-114    	; 0x237c <_ZN7LCDMenu7displayEP13UserInterface+0xf6>
				LCD->print(" ");
			}
			Items.get(i).Print(1,ln,UI);
			ln++;
		}
		refresh = 0;
    23ee:	f7 01       	movw	r30, r14
    23f0:	14 8e       	std	Z+28, r1	; 0x1c
    23f2:	13 8e       	std	Z+27, r1	; 0x1b
	}
}
    23f4:	2d 96       	adiw	r28, 0x0d	; 13
    23f6:	0f b6       	in	r0, 0x3f	; 63
    23f8:	f8 94       	cli
    23fa:	de bf       	out	0x3e, r29	; 62
    23fc:	0f be       	out	0x3f, r0	; 63
    23fe:	cd bf       	out	0x3d, r28	; 61
    2400:	df 91       	pop	r29
    2402:	cf 91       	pop	r28
    2404:	1f 91       	pop	r17
    2406:	0f 91       	pop	r16
    2408:	ff 90       	pop	r15
    240a:	ef 90       	pop	r14
    240c:	df 90       	pop	r13
    240e:	cf 90       	pop	r12
    2410:	bf 90       	pop	r11
    2412:	af 90       	pop	r10
    2414:	9f 90       	pop	r9
    2416:	8f 90       	pop	r8
    2418:	7f 90       	pop	r7
    241a:	6f 90       	pop	r6
    241c:	5f 90       	pop	r5
    241e:	4f 90       	pop	r4
    2420:	3f 90       	pop	r3
    2422:	2f 90       	pop	r2
    2424:	08 95       	ret

00002426 <_ZN7LCDMenu10selectItemEP13UserInterface>:
	Serial.print("Encoder Item: ");
	Serial.println(currentItem);
	refresh = 1;
}

void LCDMenu::selectItem(UserInterface *UI){
    2426:	ef 92       	push	r14
    2428:	ff 92       	push	r15
    242a:	0f 93       	push	r16
    242c:	1f 93       	push	r17
    242e:	cf 93       	push	r28
    2430:	df 93       	push	r29
    2432:	cd b7       	in	r28, 0x3d	; 61
    2434:	de b7       	in	r29, 0x3e	; 62
    2436:	2d 97       	sbiw	r28, 0x0d	; 13
    2438:	0f b6       	in	r0, 0x3f	; 63
    243a:	f8 94       	cli
    243c:	de bf       	out	0x3e, r29	; 62
    243e:	0f be       	out	0x3f, r0	; 63
    2440:	cd bf       	out	0x3d, r28	; 61
    2442:	8c 01       	movw	r16, r24
    2444:	7b 01       	movw	r14, r22
	Items.get(currentItem).ItemSelect(UI);
    2446:	fc 01       	movw	r30, r24
    2448:	41 8d       	ldd	r20, Z+25	; 0x19
    244a:	52 8d       	ldd	r21, Z+26	; 0x1a
    244c:	bc 01       	movw	r22, r24
    244e:	6a 5f       	subi	r22, 0xFA	; 250
    2450:	7f 4f       	sbci	r23, 0xFF	; 255
    2452:	ce 01       	movw	r24, r28
    2454:	01 96       	adiw	r24, 0x01	; 1
    2456:	f0 de       	rcall	.-544    	; 0x2238 <_ZN10LinkedListI11LCDMenuItemE3getEi>
    2458:	b7 01       	movw	r22, r14
    245a:	ce 01       	movw	r24, r28
    245c:	01 96       	adiw	r24, 0x01	; 1
    245e:	97 d3       	rcall	.+1838   	; 0x2b8e <_ZN11LCDMenuItem10ItemSelectEP13UserInterface>
    2460:	ce 01       	movw	r24, r28
    2462:	01 96       	adiw	r24, 0x01	; 1
    2464:	ff d2       	rcall	.+1534   	; 0x2a64 <_ZN11LCDMenuItemD1Ev>
	refresh = 1;
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	f8 01       	movw	r30, r16
    246c:	94 8f       	std	Z+28, r25	; 0x1c
    246e:	83 8f       	std	Z+27, r24	; 0x1b
}
    2470:	2d 96       	adiw	r28, 0x0d	; 13
    2472:	0f b6       	in	r0, 0x3f	; 63
    2474:	f8 94       	cli
    2476:	de bf       	out	0x3e, r29	; 62
    2478:	0f be       	out	0x3f, r0	; 63
    247a:	cd bf       	out	0x3d, r28	; 61
    247c:	df 91       	pop	r29
    247e:	cf 91       	pop	r28
    2480:	1f 91       	pop	r17
    2482:	0f 91       	pop	r16
    2484:	ff 90       	pop	r15
    2486:	ef 90       	pop	r14
    2488:	08 95       	ret

0000248a <_ZN10LinkedListI11LCDMenuItemE3popEv>:
	getNode(index)->data = _t;
	return true;
}

template<typename T>
T LinkedList<T>::pop(){
    248a:	af 92       	push	r10
    248c:	bf 92       	push	r11
    248e:	cf 92       	push	r12
    2490:	df 92       	push	r13
    2492:	ef 92       	push	r14
    2494:	ff 92       	push	r15
    2496:	0f 93       	push	r16
    2498:	1f 93       	push	r17
    249a:	cf 93       	push	r28
    249c:	df 93       	push	r29
    249e:	cd b7       	in	r28, 0x3d	; 61
    24a0:	de b7       	in	r29, 0x3e	; 62
    24a2:	2d 97       	sbiw	r28, 0x0d	; 13
    24a4:	0f b6       	in	r0, 0x3f	; 63
    24a6:	f8 94       	cli
    24a8:	de bf       	out	0x3e, r29	; 62
    24aa:	0f be       	out	0x3f, r0	; 63
    24ac:	cd bf       	out	0x3d, r28	; 61
    24ae:	7c 01       	movw	r14, r24
    24b0:	8b 01       	movw	r16, r22
	if(_size <= 0)
    24b2:	fb 01       	movw	r30, r22
    24b4:	62 81       	ldd	r22, Z+2	; 0x02
    24b6:	73 81       	ldd	r23, Z+3	; 0x03
    24b8:	16 16       	cp	r1, r22
    24ba:	17 06       	cpc	r1, r23
    24bc:	14 f0       	brlt	.+4      	; 0x24c2 <_ZN10LinkedListI11LCDMenuItemE3popEv+0x38>
		return T();
    24be:	c0 d2       	rcall	.+1408   	; 0x2a40 <_ZN11LCDMenuItemC1Ev>
    24c0:	92 c0       	rjmp	.+292    	; 0x25e6 <_ZN10LinkedListI11LCDMenuItemE3popEv+0x15c>
	
	isCached = false;
    24c2:	f8 01       	movw	r30, r16
    24c4:	14 86       	std	Z+12, r1	; 0x0c

	if(_size >= 2){
    24c6:	62 30       	cpi	r22, 0x02	; 2
    24c8:	71 05       	cpc	r23, r1
    24ca:	0c f4       	brge	.+2      	; 0x24ce <_ZN10LinkedListI11LCDMenuItemE3popEv+0x44>
    24cc:	4b c0       	rjmp	.+150    	; 0x2564 <_ZN10LinkedListI11LCDMenuItemE3popEv+0xda>
		ListNode<T> *tmp = getNode(_size - 2);
    24ce:	62 50       	subi	r22, 0x02	; 2
    24d0:	71 09       	sbc	r23, r1
    24d2:	c8 01       	movw	r24, r16
    24d4:	72 de       	rcall	.-796    	; 0x21ba <_ZN10LinkedListI11LCDMenuItemE7getNodeEi>
    24d6:	5c 01       	movw	r10, r24
		T ret = tmp->next->data;
    24d8:	fc 01       	movw	r30, r24
    24da:	c5 84       	ldd	r12, Z+13	; 0x0d
    24dc:	d6 84       	ldd	r13, Z+14	; 0x0e
    24de:	b6 01       	movw	r22, r12
    24e0:	ce 01       	movw	r24, r28
    24e2:	01 96       	adiw	r24, 0x01	; 1
    24e4:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    24e8:	f6 01       	movw	r30, r12
    24ea:	86 81       	ldd	r24, Z+6	; 0x06
    24ec:	8f 83       	std	Y+7, r24	; 0x07
    24ee:	87 81       	ldd	r24, Z+7	; 0x07
    24f0:	90 85       	ldd	r25, Z+8	; 0x08
    24f2:	99 87       	std	Y+9, r25	; 0x09
    24f4:	88 87       	std	Y+8, r24	; 0x08
    24f6:	81 85       	ldd	r24, Z+9	; 0x09
    24f8:	92 85       	ldd	r25, Z+10	; 0x0a
    24fa:	9b 87       	std	Y+11, r25	; 0x0b
    24fc:	8a 87       	std	Y+10, r24	; 0x0a
    24fe:	83 85       	ldd	r24, Z+11	; 0x0b
    2500:	94 85       	ldd	r25, Z+12	; 0x0c
    2502:	9d 87       	std	Y+13, r25	; 0x0d
    2504:	8c 87       	std	Y+12, r24	; 0x0c
		delete(tmp->next);
    2506:	f5 01       	movw	r30, r10
    2508:	c5 84       	ldd	r12, Z+13	; 0x0d
    250a:	d6 84       	ldd	r13, Z+14	; 0x0e
    250c:	c1 14       	cp	r12, r1
    250e:	d1 04       	cpc	r13, r1
    2510:	29 f0       	breq	.+10     	; 0x251c <_ZN10LinkedListI11LCDMenuItemE3popEv+0x92>

#ifndef LinkedList_h
#define LinkedList_h

template<class T>
struct ListNode
    2512:	c6 01       	movw	r24, r12
    2514:	a7 d2       	rcall	.+1358   	; 0x2a64 <_ZN11LCDMenuItemD1Ev>
	isCached = false;

	if(_size >= 2){
		ListNode<T> *tmp = getNode(_size - 2);
		T ret = tmp->next->data;
		delete(tmp->next);
    2516:	c6 01       	movw	r24, r12
    2518:	0e 94 39 31 	call	0x6272	; 0x6272 <_ZdlPv>
		tmp->next = false;
    251c:	f5 01       	movw	r30, r10
    251e:	16 86       	std	Z+14, r1	; 0x0e
    2520:	15 86       	std	Z+13, r1	; 0x0d
		last = tmp;
    2522:	f8 01       	movw	r30, r16
    2524:	b7 82       	std	Z+7, r11	; 0x07
    2526:	a6 82       	std	Z+6, r10	; 0x06
		_size--;
    2528:	82 81       	ldd	r24, Z+2	; 0x02
    252a:	93 81       	ldd	r25, Z+3	; 0x03
    252c:	01 97       	sbiw	r24, 0x01	; 1
    252e:	93 83       	std	Z+3, r25	; 0x03
    2530:	82 83       	std	Z+2, r24	; 0x02
    2532:	be 01       	movw	r22, r28
    2534:	6f 5f       	subi	r22, 0xFF	; 255
    2536:	7f 4f       	sbci	r23, 0xFF	; 255
    2538:	c7 01       	movw	r24, r14
    253a:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    253e:	8f 81       	ldd	r24, Y+7	; 0x07
    2540:	f7 01       	movw	r30, r14
    2542:	86 83       	std	Z+6, r24	; 0x06
    2544:	88 85       	ldd	r24, Y+8	; 0x08
    2546:	99 85       	ldd	r25, Y+9	; 0x09
    2548:	90 87       	std	Z+8, r25	; 0x08
    254a:	87 83       	std	Z+7, r24	; 0x07
    254c:	8a 85       	ldd	r24, Y+10	; 0x0a
    254e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2550:	92 87       	std	Z+10, r25	; 0x0a
    2552:	81 87       	std	Z+9, r24	; 0x09
    2554:	8c 85       	ldd	r24, Y+12	; 0x0c
    2556:	9d 85       	ldd	r25, Y+13	; 0x0d
    2558:	94 87       	std	Z+12, r25	; 0x0c
    255a:	83 87       	std	Z+11, r24	; 0x0b
		return ret;
    255c:	ce 01       	movw	r24, r28
    255e:	01 96       	adiw	r24, 0x01	; 1
    2560:	81 d2       	rcall	.+1282   	; 0x2a64 <_ZN11LCDMenuItemD1Ev>
    2562:	41 c0       	rjmp	.+130    	; 0x25e6 <_ZN10LinkedListI11LCDMenuItemE3popEv+0x15c>
	}else{
		// Only one element left on the list
		T ret = root->data;
    2564:	f8 01       	movw	r30, r16
    2566:	c4 80       	ldd	r12, Z+4	; 0x04
    2568:	d5 80       	ldd	r13, Z+5	; 0x05
    256a:	b6 01       	movw	r22, r12
    256c:	ce 01       	movw	r24, r28
    256e:	01 96       	adiw	r24, 0x01	; 1
    2570:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    2574:	f6 01       	movw	r30, r12
    2576:	86 81       	ldd	r24, Z+6	; 0x06
    2578:	8f 83       	std	Y+7, r24	; 0x07
    257a:	87 81       	ldd	r24, Z+7	; 0x07
    257c:	90 85       	ldd	r25, Z+8	; 0x08
    257e:	99 87       	std	Y+9, r25	; 0x09
    2580:	88 87       	std	Y+8, r24	; 0x08
    2582:	81 85       	ldd	r24, Z+9	; 0x09
    2584:	92 85       	ldd	r25, Z+10	; 0x0a
    2586:	9b 87       	std	Y+11, r25	; 0x0b
    2588:	8a 87       	std	Y+10, r24	; 0x0a
    258a:	83 85       	ldd	r24, Z+11	; 0x0b
    258c:	94 85       	ldd	r25, Z+12	; 0x0c
    258e:	9d 87       	std	Y+13, r25	; 0x0d
    2590:	8c 87       	std	Y+12, r24	; 0x0c
		delete(root);
    2592:	f8 01       	movw	r30, r16
    2594:	c4 80       	ldd	r12, Z+4	; 0x04
    2596:	d5 80       	ldd	r13, Z+5	; 0x05
    2598:	c1 14       	cp	r12, r1
    259a:	d1 04       	cpc	r13, r1
    259c:	29 f0       	breq	.+10     	; 0x25a8 <_ZN10LinkedListI11LCDMenuItemE3popEv+0x11e>

#ifndef LinkedList_h
#define LinkedList_h

template<class T>
struct ListNode
    259e:	c6 01       	movw	r24, r12
    25a0:	61 d2       	rcall	.+1218   	; 0x2a64 <_ZN11LCDMenuItemD1Ev>
		_size--;
		return ret;
	}else{
		// Only one element left on the list
		T ret = root->data;
		delete(root);
    25a2:	c6 01       	movw	r24, r12
    25a4:	0e 94 39 31 	call	0x6272	; 0x6272 <_ZdlPv>
		root = false;
    25a8:	f8 01       	movw	r30, r16
    25aa:	15 82       	std	Z+5, r1	; 0x05
    25ac:	14 82       	std	Z+4, r1	; 0x04
		last = false;
    25ae:	17 82       	std	Z+7, r1	; 0x07
    25b0:	16 82       	std	Z+6, r1	; 0x06
		_size = 0;
    25b2:	13 82       	std	Z+3, r1	; 0x03
    25b4:	12 82       	std	Z+2, r1	; 0x02
    25b6:	be 01       	movw	r22, r28
    25b8:	6f 5f       	subi	r22, 0xFF	; 255
    25ba:	7f 4f       	sbci	r23, 0xFF	; 255
    25bc:	c7 01       	movw	r24, r14
    25be:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    25c2:	8f 81       	ldd	r24, Y+7	; 0x07
    25c4:	f7 01       	movw	r30, r14
    25c6:	86 83       	std	Z+6, r24	; 0x06
    25c8:	88 85       	ldd	r24, Y+8	; 0x08
    25ca:	99 85       	ldd	r25, Y+9	; 0x09
    25cc:	90 87       	std	Z+8, r25	; 0x08
    25ce:	87 83       	std	Z+7, r24	; 0x07
    25d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    25d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    25d4:	92 87       	std	Z+10, r25	; 0x0a
    25d6:	81 87       	std	Z+9, r24	; 0x09
    25d8:	8c 85       	ldd	r24, Y+12	; 0x0c
    25da:	9d 85       	ldd	r25, Y+13	; 0x0d
    25dc:	94 87       	std	Z+12, r25	; 0x0c
    25de:	83 87       	std	Z+11, r24	; 0x0b
		return ret;
    25e0:	ce 01       	movw	r24, r28
    25e2:	01 96       	adiw	r24, 0x01	; 1
    25e4:	3f d2       	rcall	.+1150   	; 0x2a64 <_ZN11LCDMenuItemD1Ev>
	}
}
    25e6:	c7 01       	movw	r24, r14
    25e8:	2d 96       	adiw	r28, 0x0d	; 13
    25ea:	0f b6       	in	r0, 0x3f	; 63
    25ec:	f8 94       	cli
    25ee:	de bf       	out	0x3e, r29	; 62
    25f0:	0f be       	out	0x3f, r0	; 63
    25f2:	cd bf       	out	0x3d, r28	; 61
    25f4:	df 91       	pop	r29
    25f6:	cf 91       	pop	r28
    25f8:	1f 91       	pop	r17
    25fa:	0f 91       	pop	r16
    25fc:	ff 90       	pop	r15
    25fe:	ef 90       	pop	r14
    2600:	df 90       	pop	r13
    2602:	cf 90       	pop	r12
    2604:	bf 90       	pop	r11
    2606:	af 90       	pop	r10
    2608:	08 95       	ret

0000260a <_ZN10LinkedListI11LCDMenuItemE6removeEi>:
	}

}

template<typename T>
T LinkedList<T>::remove(int index){
    260a:	af 92       	push	r10
    260c:	bf 92       	push	r11
    260e:	cf 92       	push	r12
    2610:	df 92       	push	r13
    2612:	ef 92       	push	r14
    2614:	ff 92       	push	r15
    2616:	0f 93       	push	r16
    2618:	1f 93       	push	r17
    261a:	cf 93       	push	r28
    261c:	df 93       	push	r29
    261e:	cd b7       	in	r28, 0x3d	; 61
    2620:	de b7       	in	r29, 0x3e	; 62
    2622:	2d 97       	sbiw	r28, 0x0d	; 13
    2624:	0f b6       	in	r0, 0x3f	; 63
    2626:	f8 94       	cli
    2628:	de bf       	out	0x3e, r29	; 62
    262a:	0f be       	out	0x3f, r0	; 63
    262c:	cd bf       	out	0x3d, r28	; 61
    262e:	8c 01       	movw	r16, r24
    2630:	7b 01       	movw	r14, r22
	if (index < 0 || index >= _size)
    2632:	55 23       	and	r21, r21
    2634:	44 f0       	brlt	.+16     	; 0x2646 <_ZN10LinkedListI11LCDMenuItemE6removeEi+0x3c>
    2636:	db 01       	movw	r26, r22
    2638:	12 96       	adiw	r26, 0x02	; 2
    263a:	8d 91       	ld	r24, X+
    263c:	9c 91       	ld	r25, X
    263e:	13 97       	sbiw	r26, 0x03	; 3
    2640:	48 17       	cp	r20, r24
    2642:	59 07       	cpc	r21, r25
    2644:	1c f0       	brlt	.+6      	; 0x264c <_ZN10LinkedListI11LCDMenuItemE6removeEi+0x42>
	{
		return T();
    2646:	c8 01       	movw	r24, r16
    2648:	fb d1       	rcall	.+1014   	; 0x2a40 <_ZN11LCDMenuItemC1Ev>
    264a:	78 c0       	rjmp	.+240    	; 0x273c <_ZN10LinkedListI11LCDMenuItemE6removeEi+0x132>
	}

	if(index == 0)
    264c:	41 15       	cp	r20, r1
    264e:	51 05       	cpc	r21, r1
    2650:	49 f4       	brne	.+18     	; 0x2664 <_ZN10LinkedListI11LCDMenuItemE6removeEi+0x5a>
		return shift();
    2652:	db 01       	movw	r26, r22
    2654:	ed 91       	ld	r30, X+
    2656:	fc 91       	ld	r31, X
    2658:	06 84       	ldd	r0, Z+14	; 0x0e
    265a:	f7 85       	ldd	r31, Z+15	; 0x0f
    265c:	e0 2d       	mov	r30, r0
    265e:	c8 01       	movw	r24, r16
    2660:	19 95       	eicall
    2662:	6c c0       	rjmp	.+216    	; 0x273c <_ZN10LinkedListI11LCDMenuItemE6removeEi+0x132>
	
	if (index == _size-1)
    2664:	01 97       	sbiw	r24, 0x01	; 1
    2666:	84 17       	cp	r24, r20
    2668:	95 07       	cpc	r25, r21
    266a:	49 f4       	brne	.+18     	; 0x267e <_ZN10LinkedListI11LCDMenuItemE6removeEi+0x74>
	{
		return pop();
    266c:	db 01       	movw	r26, r22
    266e:	ed 91       	ld	r30, X+
    2670:	fc 91       	ld	r31, X
    2672:	04 84       	ldd	r0, Z+12	; 0x0c
    2674:	f5 85       	ldd	r31, Z+13	; 0x0d
    2676:	e0 2d       	mov	r30, r0
    2678:	c8 01       	movw	r24, r16
    267a:	19 95       	eicall
    267c:	5f c0       	rjmp	.+190    	; 0x273c <_ZN10LinkedListI11LCDMenuItemE6removeEi+0x132>
	}

	ListNode<T> *tmp = getNode(index - 1);
    267e:	ba 01       	movw	r22, r20
    2680:	61 50       	subi	r22, 0x01	; 1
    2682:	71 09       	sbc	r23, r1
    2684:	c7 01       	movw	r24, r14
    2686:	99 dd       	rcall	.-1230   	; 0x21ba <_ZN10LinkedListI11LCDMenuItemE7getNodeEi>
    2688:	5c 01       	movw	r10, r24
	ListNode<T> *toDelete = tmp->next;
    268a:	fc 01       	movw	r30, r24
    268c:	c5 84       	ldd	r12, Z+13	; 0x0d
    268e:	d6 84       	ldd	r13, Z+14	; 0x0e
    2690:	b6 01       	movw	r22, r12
    2692:	ce 01       	movw	r24, r28
    2694:	01 96       	adiw	r24, 0x01	; 1
    2696:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    269a:	d6 01       	movw	r26, r12
    269c:	16 96       	adiw	r26, 0x06	; 6
    269e:	8c 91       	ld	r24, X
    26a0:	16 97       	sbiw	r26, 0x06	; 6
    26a2:	8f 83       	std	Y+7, r24	; 0x07
    26a4:	17 96       	adiw	r26, 0x07	; 7
    26a6:	8d 91       	ld	r24, X+
    26a8:	9c 91       	ld	r25, X
    26aa:	18 97       	sbiw	r26, 0x08	; 8
    26ac:	99 87       	std	Y+9, r25	; 0x09
    26ae:	88 87       	std	Y+8, r24	; 0x08
    26b0:	19 96       	adiw	r26, 0x09	; 9
    26b2:	8d 91       	ld	r24, X+
    26b4:	9c 91       	ld	r25, X
    26b6:	1a 97       	sbiw	r26, 0x0a	; 10
    26b8:	9b 87       	std	Y+11, r25	; 0x0b
    26ba:	8a 87       	std	Y+10, r24	; 0x0a
    26bc:	1b 96       	adiw	r26, 0x0b	; 11
    26be:	8d 91       	ld	r24, X+
    26c0:	9c 91       	ld	r25, X
    26c2:	1c 97       	sbiw	r26, 0x0c	; 12
    26c4:	9d 87       	std	Y+13, r25	; 0x0d
    26c6:	8c 87       	std	Y+12, r24	; 0x0c
	T ret = toDelete->data;
	tmp->next = tmp->next->next;
    26c8:	d5 01       	movw	r26, r10
    26ca:	1d 96       	adiw	r26, 0x0d	; 13
    26cc:	ed 91       	ld	r30, X+
    26ce:	fc 91       	ld	r31, X
    26d0:	1e 97       	sbiw	r26, 0x0e	; 14
    26d2:	85 85       	ldd	r24, Z+13	; 0x0d
    26d4:	96 85       	ldd	r25, Z+14	; 0x0e
    26d6:	1e 96       	adiw	r26, 0x0e	; 14
    26d8:	9c 93       	st	X, r25
    26da:	8e 93       	st	-X, r24
    26dc:	1d 97       	sbiw	r26, 0x0d	; 13
	delete(toDelete);
    26de:	c1 14       	cp	r12, r1
    26e0:	d1 04       	cpc	r13, r1
    26e2:	29 f0       	breq	.+10     	; 0x26ee <_ZN10LinkedListI11LCDMenuItemE6removeEi+0xe4>

#ifndef LinkedList_h
#define LinkedList_h

template<class T>
struct ListNode
    26e4:	c6 01       	movw	r24, r12
    26e6:	be d1       	rcall	.+892    	; 0x2a64 <_ZN11LCDMenuItemD1Ev>

	ListNode<T> *tmp = getNode(index - 1);
	ListNode<T> *toDelete = tmp->next;
	T ret = toDelete->data;
	tmp->next = tmp->next->next;
	delete(toDelete);
    26e8:	c6 01       	movw	r24, r12
    26ea:	0e 94 39 31 	call	0x6272	; 0x6272 <_ZdlPv>
	_size--;
    26ee:	f7 01       	movw	r30, r14
    26f0:	82 81       	ldd	r24, Z+2	; 0x02
    26f2:	93 81       	ldd	r25, Z+3	; 0x03
    26f4:	01 97       	sbiw	r24, 0x01	; 1
    26f6:	93 83       	std	Z+3, r25	; 0x03
    26f8:	82 83       	std	Z+2, r24	; 0x02
	isCached = false;
    26fa:	14 86       	std	Z+12, r1	; 0x0c
    26fc:	be 01       	movw	r22, r28
    26fe:	6f 5f       	subi	r22, 0xFF	; 255
    2700:	7f 4f       	sbci	r23, 0xFF	; 255
    2702:	c8 01       	movw	r24, r16
    2704:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    2708:	8f 81       	ldd	r24, Y+7	; 0x07
    270a:	d8 01       	movw	r26, r16
    270c:	16 96       	adiw	r26, 0x06	; 6
    270e:	8c 93       	st	X, r24
    2710:	16 97       	sbiw	r26, 0x06	; 6
    2712:	88 85       	ldd	r24, Y+8	; 0x08
    2714:	99 85       	ldd	r25, Y+9	; 0x09
    2716:	18 96       	adiw	r26, 0x08	; 8
    2718:	9c 93       	st	X, r25
    271a:	8e 93       	st	-X, r24
    271c:	17 97       	sbiw	r26, 0x07	; 7
    271e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2720:	9b 85       	ldd	r25, Y+11	; 0x0b
    2722:	1a 96       	adiw	r26, 0x0a	; 10
    2724:	9c 93       	st	X, r25
    2726:	8e 93       	st	-X, r24
    2728:	19 97       	sbiw	r26, 0x09	; 9
    272a:	8c 85       	ldd	r24, Y+12	; 0x0c
    272c:	9d 85       	ldd	r25, Y+13	; 0x0d
    272e:	1c 96       	adiw	r26, 0x0c	; 12
    2730:	9c 93       	st	X, r25
    2732:	8e 93       	st	-X, r24
    2734:	1b 97       	sbiw	r26, 0x0b	; 11
	return ret;
    2736:	ce 01       	movw	r24, r28
    2738:	01 96       	adiw	r24, 0x01	; 1
    273a:	94 d1       	rcall	.+808    	; 0x2a64 <_ZN11LCDMenuItemD1Ev>
}
    273c:	c8 01       	movw	r24, r16
    273e:	2d 96       	adiw	r28, 0x0d	; 13
    2740:	0f b6       	in	r0, 0x3f	; 63
    2742:	f8 94       	cli
    2744:	de bf       	out	0x3e, r29	; 62
    2746:	0f be       	out	0x3f, r0	; 63
    2748:	cd bf       	out	0x3d, r28	; 61
    274a:	df 91       	pop	r29
    274c:	cf 91       	pop	r28
    274e:	1f 91       	pop	r17
    2750:	0f 91       	pop	r16
    2752:	ff 90       	pop	r15
    2754:	ef 90       	pop	r14
    2756:	df 90       	pop	r13
    2758:	cf 90       	pop	r12
    275a:	bf 90       	pop	r11
    275c:	af 90       	pop	r10
    275e:	08 95       	ret

00002760 <_ZN10LinkedListI11LCDMenuItemE3setEiS0_>:
	
	return true;
}

template<typename T>
bool LinkedList<T>::set(int index, T _t){
    2760:	0f 93       	push	r16
    2762:	1f 93       	push	r17
    2764:	cf 93       	push	r28
    2766:	df 93       	push	r29
	// Check if index position is in bounds
	if(index < 0 || index >= _size)
    2768:	77 23       	and	r23, r23
    276a:	ec f0       	brlt	.+58     	; 0x27a6 <_ZN10LinkedListI11LCDMenuItemE3setEiS0_+0x46>
    276c:	fc 01       	movw	r30, r24
    276e:	22 81       	ldd	r18, Z+2	; 0x02
    2770:	33 81       	ldd	r19, Z+3	; 0x03
    2772:	62 17       	cp	r22, r18
    2774:	73 07       	cpc	r23, r19
    2776:	cc f4       	brge	.+50     	; 0x27aa <_ZN10LinkedListI11LCDMenuItemE3setEiS0_+0x4a>
    2778:	ea 01       	movw	r28, r20
		return false;

	getNode(index)->data = _t;
    277a:	1f dd       	rcall	.-1474   	; 0x21ba <_ZN10LinkedListI11LCDMenuItemE7getNodeEi>
    277c:	8c 01       	movw	r16, r24
    277e:	be 01       	movw	r22, r28
    2780:	0e 94 5a 38 	call	0x70b4	; 0x70b4 <_ZN6StringaSERKS_>
    2784:	8e 81       	ldd	r24, Y+6	; 0x06
    2786:	f8 01       	movw	r30, r16
    2788:	86 83       	std	Z+6, r24	; 0x06
    278a:	8f 81       	ldd	r24, Y+7	; 0x07
    278c:	98 85       	ldd	r25, Y+8	; 0x08
    278e:	90 87       	std	Z+8, r25	; 0x08
    2790:	87 83       	std	Z+7, r24	; 0x07
    2792:	89 85       	ldd	r24, Y+9	; 0x09
    2794:	9a 85       	ldd	r25, Y+10	; 0x0a
    2796:	92 87       	std	Z+10, r25	; 0x0a
    2798:	81 87       	std	Z+9, r24	; 0x09
    279a:	8b 85       	ldd	r24, Y+11	; 0x0b
    279c:	9c 85       	ldd	r25, Y+12	; 0x0c
    279e:	94 87       	std	Z+12, r25	; 0x0c
    27a0:	83 87       	std	Z+11, r24	; 0x0b
	return true;
    27a2:	81 e0       	ldi	r24, 0x01	; 1
    27a4:	03 c0       	rjmp	.+6      	; 0x27ac <_ZN10LinkedListI11LCDMenuItemE3setEiS0_+0x4c>

template<typename T>
bool LinkedList<T>::set(int index, T _t){
	// Check if index position is in bounds
	if(index < 0 || index >= _size)
		return false;
    27a6:	80 e0       	ldi	r24, 0x00	; 0
    27a8:	01 c0       	rjmp	.+2      	; 0x27ac <_ZN10LinkedListI11LCDMenuItemE3setEiS0_+0x4c>
    27aa:	80 e0       	ldi	r24, 0x00	; 0

	getNode(index)->data = _t;
	return true;
}
    27ac:	df 91       	pop	r29
    27ae:	cf 91       	pop	r28
    27b0:	1f 91       	pop	r17
    27b2:	0f 91       	pop	r16
    27b4:	08 95       	ret

000027b6 <_ZN10LinkedListI11LCDMenuItemE3addEiS0_>:
int LinkedList<T>::size(){
	return _size;
}

template<typename T>
bool LinkedList<T>::add(int index, T _t){
    27b6:	af 92       	push	r10
    27b8:	bf 92       	push	r11
    27ba:	cf 92       	push	r12
    27bc:	df 92       	push	r13
    27be:	ef 92       	push	r14
    27c0:	ff 92       	push	r15
    27c2:	0f 93       	push	r16
    27c4:	1f 93       	push	r17
    27c6:	cf 93       	push	r28
    27c8:	df 93       	push	r29
    27ca:	cd b7       	in	r28, 0x3d	; 61
    27cc:	de b7       	in	r29, 0x3e	; 62
    27ce:	6a 97       	sbiw	r28, 0x1a	; 26
    27d0:	0f b6       	in	r0, 0x3f	; 63
    27d2:	f8 94       	cli
    27d4:	de bf       	out	0x3e, r29	; 62
    27d6:	0f be       	out	0x3f, r0	; 63
    27d8:	cd bf       	out	0x3d, r28	; 61
    27da:	7c 01       	movw	r14, r24
    27dc:	5b 01       	movw	r10, r22
    27de:	8a 01       	movw	r16, r20

	if(index >= _size)
    27e0:	dc 01       	movw	r26, r24
    27e2:	12 96       	adiw	r26, 0x02	; 2
    27e4:	8d 91       	ld	r24, X+
    27e6:	9c 91       	ld	r25, X
    27e8:	13 97       	sbiw	r26, 0x03	; 3
    27ea:	68 17       	cp	r22, r24
    27ec:	79 07       	cpc	r23, r25
    27ee:	1c f1       	brlt	.+70     	; 0x2836 <_ZN10LinkedListI11LCDMenuItemE3addEiS0_+0x80>
		return add(_t);
    27f0:	ed 91       	ld	r30, X+
    27f2:	fc 91       	ld	r31, X
    27f4:	c4 80       	ldd	r12, Z+4	; 0x04
    27f6:	d5 80       	ldd	r13, Z+5	; 0x05
    27f8:	ba 01       	movw	r22, r20
    27fa:	ce 01       	movw	r24, r28
    27fc:	0e 96       	adiw	r24, 0x0e	; 14
    27fe:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    2802:	f8 01       	movw	r30, r16
    2804:	86 81       	ldd	r24, Z+6	; 0x06
    2806:	8c 8b       	std	Y+20, r24	; 0x14
    2808:	87 81       	ldd	r24, Z+7	; 0x07
    280a:	90 85       	ldd	r25, Z+8	; 0x08
    280c:	9e 8b       	std	Y+22, r25	; 0x16
    280e:	8d 8b       	std	Y+21, r24	; 0x15
    2810:	81 85       	ldd	r24, Z+9	; 0x09
    2812:	92 85       	ldd	r25, Z+10	; 0x0a
    2814:	98 8f       	std	Y+24, r25	; 0x18
    2816:	8f 8b       	std	Y+23, r24	; 0x17
    2818:	83 85       	ldd	r24, Z+11	; 0x0b
    281a:	94 85       	ldd	r25, Z+12	; 0x0c
    281c:	9a 8f       	std	Y+26, r25	; 0x1a
    281e:	89 8f       	std	Y+25, r24	; 0x19
    2820:	be 01       	movw	r22, r28
    2822:	62 5f       	subi	r22, 0xF2	; 242
    2824:	7f 4f       	sbci	r23, 0xFF	; 255
    2826:	c7 01       	movw	r24, r14
    2828:	f6 01       	movw	r30, r12
    282a:	19 95       	eicall
    282c:	18 2f       	mov	r17, r24
    282e:	ce 01       	movw	r24, r28
    2830:	0e 96       	adiw	r24, 0x0e	; 14
    2832:	18 d1       	rcall	.+560    	; 0x2a64 <_ZN11LCDMenuItemD1Ev>
    2834:	6a c0       	rjmp	.+212    	; 0x290a <_ZN10LinkedListI11LCDMenuItemE3addEiS0_+0x154>

	if(index == 0)
    2836:	67 2b       	or	r22, r23
    2838:	21 f5       	brne	.+72     	; 0x2882 <_ZN10LinkedListI11LCDMenuItemE3addEiS0_+0xcc>
		return unshift(_t);
    283a:	d7 01       	movw	r26, r14
    283c:	ed 91       	ld	r30, X+
    283e:	fc 91       	ld	r31, X
    2840:	c6 80       	ldd	r12, Z+6	; 0x06
    2842:	d7 80       	ldd	r13, Z+7	; 0x07
    2844:	ba 01       	movw	r22, r20
    2846:	ce 01       	movw	r24, r28
    2848:	01 96       	adiw	r24, 0x01	; 1
    284a:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    284e:	f8 01       	movw	r30, r16
    2850:	86 81       	ldd	r24, Z+6	; 0x06
    2852:	8f 83       	std	Y+7, r24	; 0x07
    2854:	87 81       	ldd	r24, Z+7	; 0x07
    2856:	90 85       	ldd	r25, Z+8	; 0x08
    2858:	99 87       	std	Y+9, r25	; 0x09
    285a:	88 87       	std	Y+8, r24	; 0x08
    285c:	81 85       	ldd	r24, Z+9	; 0x09
    285e:	92 85       	ldd	r25, Z+10	; 0x0a
    2860:	9b 87       	std	Y+11, r25	; 0x0b
    2862:	8a 87       	std	Y+10, r24	; 0x0a
    2864:	83 85       	ldd	r24, Z+11	; 0x0b
    2866:	94 85       	ldd	r25, Z+12	; 0x0c
    2868:	9d 87       	std	Y+13, r25	; 0x0d
    286a:	8c 87       	std	Y+12, r24	; 0x0c
    286c:	be 01       	movw	r22, r28
    286e:	6f 5f       	subi	r22, 0xFF	; 255
    2870:	7f 4f       	sbci	r23, 0xFF	; 255
    2872:	c7 01       	movw	r24, r14
    2874:	f6 01       	movw	r30, r12
    2876:	19 95       	eicall
    2878:	18 2f       	mov	r17, r24
    287a:	ce 01       	movw	r24, r28
    287c:	01 96       	adiw	r24, 0x01	; 1
    287e:	f2 d0       	rcall	.+484    	; 0x2a64 <_ZN11LCDMenuItemD1Ev>
    2880:	44 c0       	rjmp	.+136    	; 0x290a <_ZN10LinkedListI11LCDMenuItemE3addEiS0_+0x154>

	ListNode<T> *tmp = new ListNode<T>(),
    2882:	8f e0       	ldi	r24, 0x0F	; 15
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	0e 94 36 31 	call	0x626c	; 0x626c <_Znwj>
    288a:	6c 01       	movw	r12, r24
    288c:	8f e0       	ldi	r24, 0x0F	; 15
    288e:	d6 01       	movw	r26, r12
    2890:	1d 92       	st	X+, r1
    2892:	8a 95       	dec	r24
    2894:	e9 f7       	brne	.-6      	; 0x2890 <_ZN10LinkedListI11LCDMenuItemE3addEiS0_+0xda>

#ifndef LinkedList_h
#define LinkedList_h

template<class T>
struct ListNode
    2896:	c6 01       	movw	r24, r12
    2898:	d3 d0       	rcall	.+422    	; 0x2a40 <_ZN11LCDMenuItemC1Ev>

	if(index == 0)
		return unshift(_t);

	ListNode<T> *tmp = new ListNode<T>(),
				 *_prev = getNode(index-1);
    289a:	b5 01       	movw	r22, r10
    289c:	61 50       	subi	r22, 0x01	; 1
    289e:	71 09       	sbc	r23, r1
    28a0:	c7 01       	movw	r24, r14
    28a2:	8b dc       	rcall	.-1770   	; 0x21ba <_ZN10LinkedListI11LCDMenuItemE7getNodeEi>
    28a4:	5c 01       	movw	r10, r24
    28a6:	b8 01       	movw	r22, r16
    28a8:	c6 01       	movw	r24, r12
    28aa:	0e 94 5a 38 	call	0x70b4	; 0x70b4 <_ZN6StringaSERKS_>
    28ae:	f8 01       	movw	r30, r16
    28b0:	86 81       	ldd	r24, Z+6	; 0x06
    28b2:	d6 01       	movw	r26, r12
    28b4:	16 96       	adiw	r26, 0x06	; 6
    28b6:	8c 93       	st	X, r24
    28b8:	16 97       	sbiw	r26, 0x06	; 6
    28ba:	87 81       	ldd	r24, Z+7	; 0x07
    28bc:	90 85       	ldd	r25, Z+8	; 0x08
    28be:	18 96       	adiw	r26, 0x08	; 8
    28c0:	9c 93       	st	X, r25
    28c2:	8e 93       	st	-X, r24
    28c4:	17 97       	sbiw	r26, 0x07	; 7
    28c6:	81 85       	ldd	r24, Z+9	; 0x09
    28c8:	92 85       	ldd	r25, Z+10	; 0x0a
    28ca:	1a 96       	adiw	r26, 0x0a	; 10
    28cc:	9c 93       	st	X, r25
    28ce:	8e 93       	st	-X, r24
    28d0:	19 97       	sbiw	r26, 0x09	; 9
    28d2:	83 85       	ldd	r24, Z+11	; 0x0b
    28d4:	94 85       	ldd	r25, Z+12	; 0x0c
    28d6:	1c 96       	adiw	r26, 0x0c	; 12
    28d8:	9c 93       	st	X, r25
    28da:	8e 93       	st	-X, r24
    28dc:	1b 97       	sbiw	r26, 0x0b	; 11
	tmp->data = _t;
	tmp->next = _prev->next;
    28de:	f5 01       	movw	r30, r10
    28e0:	85 85       	ldd	r24, Z+13	; 0x0d
    28e2:	96 85       	ldd	r25, Z+14	; 0x0e
    28e4:	1e 96       	adiw	r26, 0x0e	; 14
    28e6:	9c 93       	st	X, r25
    28e8:	8e 93       	st	-X, r24
    28ea:	1d 97       	sbiw	r26, 0x0d	; 13
	_prev->next = tmp;
    28ec:	d6 86       	std	Z+14, r13	; 0x0e
    28ee:	c5 86       	std	Z+13, r12	; 0x0d

	_size++;
    28f0:	d7 01       	movw	r26, r14
    28f2:	12 96       	adiw	r26, 0x02	; 2
    28f4:	8d 91       	ld	r24, X+
    28f6:	9c 91       	ld	r25, X
    28f8:	13 97       	sbiw	r26, 0x03	; 3
    28fa:	01 96       	adiw	r24, 0x01	; 1
    28fc:	13 96       	adiw	r26, 0x03	; 3
    28fe:	9c 93       	st	X, r25
    2900:	8e 93       	st	-X, r24
    2902:	12 97       	sbiw	r26, 0x02	; 2
	isCached = false;
    2904:	1c 96       	adiw	r26, 0x0c	; 12
    2906:	1c 92       	st	X, r1

	return true;
    2908:	11 e0       	ldi	r17, 0x01	; 1
}
    290a:	81 2f       	mov	r24, r17
    290c:	6a 96       	adiw	r28, 0x1a	; 26
    290e:	0f b6       	in	r0, 0x3f	; 63
    2910:	f8 94       	cli
    2912:	de bf       	out	0x3e, r29	; 62
    2914:	0f be       	out	0x3f, r0	; 63
    2916:	cd bf       	out	0x3d, r28	; 61
    2918:	df 91       	pop	r29
    291a:	cf 91       	pop	r28
    291c:	1f 91       	pop	r17
    291e:	0f 91       	pop	r16
    2920:	ff 90       	pop	r15
    2922:	ef 90       	pop	r14
    2924:	df 90       	pop	r13
    2926:	cf 90       	pop	r12
    2928:	bf 90       	pop	r11
    292a:	af 90       	pop	r10
    292c:	08 95       	ret

0000292e <_ZN11LCDMenuItemC1E6String>:
*/

#include "LCDMenuItem.h"

//Constructor - No Action
LCDMenuItem::LCDMenuItem(String _Name)
    292e:	ef 92       	push	r14
    2930:	ff 92       	push	r15
    2932:	1f 93       	push	r17
    2934:	cf 93       	push	r28
    2936:	df 93       	push	r29
    2938:	ec 01       	movw	r28, r24
    293a:	7b 01       	movw	r14, r22
    293c:	6e ee       	ldi	r22, 0xEE	; 238
    293e:	74 e0       	ldi	r23, 0x04	; 4
    2940:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
    2944:	13 e0       	ldi	r17, 0x03	; 3
    2946:	1e 83       	std	Y+6, r17	; 0x06
    2948:	18 86       	std	Y+8, r1	; 0x08
    294a:	1f 82       	std	Y+7, r1	; 0x07
    294c:	1a 86       	std	Y+10, r1	; 0x0a
    294e:	19 86       	std	Y+9, r1	; 0x09
    2950:	1c 86       	std	Y+12, r1	; 0x0c
    2952:	1b 86       	std	Y+11, r1	; 0x0b
{
	Name = _Name;
    2954:	b7 01       	movw	r22, r14
    2956:	ce 01       	movw	r24, r28
    2958:	0e 94 5a 38 	call	0x70b4	; 0x70b4 <_ZN6StringaSERKS_>
	Type = None;
    295c:	1e 83       	std	Y+6, r17	; 0x06
}
    295e:	df 91       	pop	r29
    2960:	cf 91       	pop	r28
    2962:	1f 91       	pop	r17
    2964:	ff 90       	pop	r15
    2966:	ef 90       	pop	r14
    2968:	08 95       	ret

0000296a <_ZN11LCDMenuItemC1E6StringP7LCDMenu>:

//Constructor - LCD Menu
LCDMenuItem::LCDMenuItem(String _Name, LCDMenu * _Menu)
    296a:	ef 92       	push	r14
    296c:	ff 92       	push	r15
    296e:	0f 93       	push	r16
    2970:	1f 93       	push	r17
    2972:	cf 93       	push	r28
    2974:	df 93       	push	r29
    2976:	ec 01       	movw	r28, r24
    2978:	7b 01       	movw	r14, r22
    297a:	8a 01       	movw	r16, r20
    297c:	6e ee       	ldi	r22, 0xEE	; 238
    297e:	74 e0       	ldi	r23, 0x04	; 4
    2980:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
    2984:	83 e0       	ldi	r24, 0x03	; 3
    2986:	8e 83       	std	Y+6, r24	; 0x06
    2988:	18 86       	std	Y+8, r1	; 0x08
    298a:	1f 82       	std	Y+7, r1	; 0x07
    298c:	1a 86       	std	Y+10, r1	; 0x0a
    298e:	19 86       	std	Y+9, r1	; 0x09
    2990:	1c 86       	std	Y+12, r1	; 0x0c
    2992:	1b 86       	std	Y+11, r1	; 0x0b
{
	Name = _Name;
    2994:	b7 01       	movw	r22, r14
    2996:	ce 01       	movw	r24, r28
    2998:	0e 94 5a 38 	call	0x70b4	; 0x70b4 <_ZN6StringaSERKS_>
	MenuRef = _Menu;
    299c:	1a 87       	std	Y+10, r17	; 0x0a
    299e:	09 87       	std	Y+9, r16	; 0x09
	Type = SubMenu;
    29a0:	81 e0       	ldi	r24, 0x01	; 1
    29a2:	8e 83       	std	Y+6, r24	; 0x06
} 
    29a4:	df 91       	pop	r29
    29a6:	cf 91       	pop	r28
    29a8:	1f 91       	pop	r17
    29aa:	0f 91       	pop	r16
    29ac:	ff 90       	pop	r15
    29ae:	ef 90       	pop	r14
    29b0:	08 95       	ret

000029b2 <_ZN11LCDMenuItemC1E6StringP7LCDPage>:

//Constructor - LCD Page
LCDMenuItem::LCDMenuItem(String _Name, LCDPage * _Page)
    29b2:	ef 92       	push	r14
    29b4:	ff 92       	push	r15
    29b6:	0f 93       	push	r16
    29b8:	1f 93       	push	r17
    29ba:	cf 93       	push	r28
    29bc:	df 93       	push	r29
    29be:	ec 01       	movw	r28, r24
    29c0:	7b 01       	movw	r14, r22
    29c2:	8a 01       	movw	r16, r20
    29c4:	6e ee       	ldi	r22, 0xEE	; 238
    29c6:	74 e0       	ldi	r23, 0x04	; 4
    29c8:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
    29cc:	83 e0       	ldi	r24, 0x03	; 3
    29ce:	8e 83       	std	Y+6, r24	; 0x06
    29d0:	18 86       	std	Y+8, r1	; 0x08
    29d2:	1f 82       	std	Y+7, r1	; 0x07
    29d4:	1a 86       	std	Y+10, r1	; 0x0a
    29d6:	19 86       	std	Y+9, r1	; 0x09
    29d8:	1c 86       	std	Y+12, r1	; 0x0c
    29da:	1b 86       	std	Y+11, r1	; 0x0b
{
	Name = _Name;
    29dc:	b7 01       	movw	r22, r14
    29de:	ce 01       	movw	r24, r28
    29e0:	0e 94 5a 38 	call	0x70b4	; 0x70b4 <_ZN6StringaSERKS_>
	PageRef = _Page;
    29e4:	18 87       	std	Y+8, r17	; 0x08
    29e6:	0f 83       	std	Y+7, r16	; 0x07
	Type = SubPage;
    29e8:	1e 82       	std	Y+6, r1	; 0x06
}
    29ea:	df 91       	pop	r29
    29ec:	cf 91       	pop	r28
    29ee:	1f 91       	pop	r17
    29f0:	0f 91       	pop	r16
    29f2:	ff 90       	pop	r15
    29f4:	ef 90       	pop	r14
    29f6:	08 95       	ret

000029f8 <_ZN11LCDMenuItemC1E6StringP15LCDToggleOption>:

//Constructor - LCD Page
LCDMenuItem::LCDMenuItem(String _Name, LCDToggleOption * _ToggleOpt)
    29f8:	ef 92       	push	r14
    29fa:	ff 92       	push	r15
    29fc:	0f 93       	push	r16
    29fe:	1f 93       	push	r17
    2a00:	cf 93       	push	r28
    2a02:	df 93       	push	r29
    2a04:	ec 01       	movw	r28, r24
    2a06:	7b 01       	movw	r14, r22
    2a08:	8a 01       	movw	r16, r20
    2a0a:	6e ee       	ldi	r22, 0xEE	; 238
    2a0c:	74 e0       	ldi	r23, 0x04	; 4
    2a0e:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
    2a12:	83 e0       	ldi	r24, 0x03	; 3
    2a14:	8e 83       	std	Y+6, r24	; 0x06
    2a16:	18 86       	std	Y+8, r1	; 0x08
    2a18:	1f 82       	std	Y+7, r1	; 0x07
    2a1a:	1a 86       	std	Y+10, r1	; 0x0a
    2a1c:	19 86       	std	Y+9, r1	; 0x09
    2a1e:	1c 86       	std	Y+12, r1	; 0x0c
    2a20:	1b 86       	std	Y+11, r1	; 0x0b
{
	Name = _Name;
    2a22:	b7 01       	movw	r22, r14
    2a24:	ce 01       	movw	r24, r28
    2a26:	0e 94 5a 38 	call	0x70b4	; 0x70b4 <_ZN6StringaSERKS_>
	ToggleOptRef = _ToggleOpt;
    2a2a:	1c 87       	std	Y+12, r17	; 0x0c
    2a2c:	0b 87       	std	Y+11, r16	; 0x0b
	Type = ToggleOption;
    2a2e:	82 e0       	ldi	r24, 0x02	; 2
    2a30:	8e 83       	std	Y+6, r24	; 0x06
}
    2a32:	df 91       	pop	r29
    2a34:	cf 91       	pop	r28
    2a36:	1f 91       	pop	r17
    2a38:	0f 91       	pop	r16
    2a3a:	ff 90       	pop	r15
    2a3c:	ef 90       	pop	r14
    2a3e:	08 95       	ret

00002a40 <_ZN11LCDMenuItemC1Ev>:

// default constructor
LCDMenuItem::LCDMenuItem()
    2a40:	cf 93       	push	r28
    2a42:	df 93       	push	r29
    2a44:	ec 01       	movw	r28, r24
    2a46:	6e ee       	ldi	r22, 0xEE	; 238
    2a48:	74 e0       	ldi	r23, 0x04	; 4
    2a4a:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
    2a4e:	83 e0       	ldi	r24, 0x03	; 3
    2a50:	8e 83       	std	Y+6, r24	; 0x06
    2a52:	18 86       	std	Y+8, r1	; 0x08
    2a54:	1f 82       	std	Y+7, r1	; 0x07
    2a56:	1a 86       	std	Y+10, r1	; 0x0a
    2a58:	19 86       	std	Y+9, r1	; 0x09
    2a5a:	1c 86       	std	Y+12, r1	; 0x0c
    2a5c:	1b 86       	std	Y+11, r1	; 0x0b
{
}
    2a5e:	df 91       	pop	r29
    2a60:	cf 91       	pop	r28
    2a62:	08 95       	ret

00002a64 <_ZN11LCDMenuItemD1Ev>:

// default destructor
LCDMenuItem::~LCDMenuItem()
    2a64:	0c 94 da 37 	jmp	0x6fb4	; 0x6fb4 <_ZN6StringD1Ev>
    2a68:	08 95       	ret

00002a6a <_ZN11LCDMenuItem5PrintEiiP13UserInterface>:
{
}

//Print
void LCDMenuItem::Print(int _col, int _rw, UserInterface *UI ){
    2a6a:	df 92       	push	r13
    2a6c:	ef 92       	push	r14
    2a6e:	ff 92       	push	r15
    2a70:	0f 93       	push	r16
    2a72:	1f 93       	push	r17
    2a74:	cf 93       	push	r28
    2a76:	df 93       	push	r29
    2a78:	cd b7       	in	r28, 0x3d	; 61
    2a7a:	de b7       	in	r29, 0x3e	; 62
    2a7c:	a4 97       	sbiw	r28, 0x24	; 36
    2a7e:	0f b6       	in	r0, 0x3f	; 63
    2a80:	f8 94       	cli
    2a82:	de bf       	out	0x3e, r29	; 62
    2a84:	0f be       	out	0x3f, r0	; 63
    2a86:	cd bf       	out	0x3d, r28	; 61
    2a88:	7c 01       	movw	r14, r24
    2a8a:	d4 2e       	mov	r13, r20
	
	LiquidCrystal_I2C *LCD = UI->LCD;
	LCD->setCursor(_col, _rw);
    2a8c:	f9 01       	movw	r30, r18
    2a8e:	06 85       	ldd	r16, Z+14	; 0x0e
    2a90:	17 85       	ldd	r17, Z+15	; 0x0f
    2a92:	c8 01       	movw	r24, r16
    2a94:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <_ZN3LCD9setCursorEhh>
	LCD->print(Name);
    2a98:	b7 01       	movw	r22, r14
    2a9a:	c8 01       	movw	r24, r16
    2a9c:	0e 94 69 31 	call	0x62d2	; 0x62d2 <_ZN5Print5printERK6String>
	
	if(Type == ToggleOption){
    2aa0:	f7 01       	movw	r30, r14
    2aa2:	86 81       	ldd	r24, Z+6	; 0x06
    2aa4:	82 30       	cpi	r24, 0x02	; 2
    2aa6:	09 f0       	breq	.+2      	; 0x2aaa <_ZN11LCDMenuItem5PrintEiiP13UserInterface+0x40>
    2aa8:	64 c0       	rjmp	.+200    	; 0x2b72 <_ZN11LCDMenuItem5PrintEiiP13UserInterface+0x108>
		LCDToggleOption TglOpt = *ToggleOptRef;
    2aaa:	e3 84       	ldd	r14, Z+11	; 0x0b
    2aac:	f4 84       	ldd	r15, Z+12	; 0x0c
#include "../DigIO.h"

#ifndef __LCDTOGGLEOPTION_H__
#define __LCDTOGGLEOPTION_H__

class LCDToggleOption
    2aae:	b7 01       	movw	r22, r14
    2ab0:	ce 01       	movw	r24, r28
    2ab2:	01 96       	adiw	r24, 0x01	; 1
    2ab4:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    2ab8:	f7 01       	movw	r30, r14
    2aba:	86 81       	ldd	r24, Z+6	; 0x06
    2abc:	8f 83       	std	Y+7, r24	; 0x07
    2abe:	b7 01       	movw	r22, r14
    2ac0:	69 5f       	subi	r22, 0xF9	; 249
    2ac2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ac4:	ce 01       	movw	r24, r28
    2ac6:	08 96       	adiw	r24, 0x08	; 8
    2ac8:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    2acc:	b7 01       	movw	r22, r14
    2ace:	63 5f       	subi	r22, 0xF3	; 243
    2ad0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ad2:	ce 01       	movw	r24, r28
    2ad4:	0e 96       	adiw	r24, 0x0e	; 14
    2ad6:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    2ada:	f7 01       	movw	r30, r14
    2adc:	83 89       	ldd	r24, Z+19	; 0x13
    2ade:	8c 8b       	std	Y+20, r24	; 0x14
    2ae0:	84 89       	ldd	r24, Z+20	; 0x14
    2ae2:	95 89       	ldd	r25, Z+21	; 0x15
    2ae4:	9e 8b       	std	Y+22, r25	; 0x16
    2ae6:	8d 8b       	std	Y+21, r24	; 0x15
    2ae8:	86 89       	ldd	r24, Z+22	; 0x16
    2aea:	97 89       	ldd	r25, Z+23	; 0x17
    2aec:	98 8f       	std	Y+24, r25	; 0x18
    2aee:	8f 8b       	std	Y+23, r24	; 0x17
		
		String TrueLabel = TglOpt.TrueLabel();
    2af0:	be 01       	movw	r22, r28
    2af2:	6f 5f       	subi	r22, 0xFF	; 255
    2af4:	7f 4f       	sbci	r23, 0xFF	; 255
    2af6:	ce 01       	movw	r24, r28
    2af8:	4f 96       	adiw	r24, 0x1f	; 31
    2afa:	0e 94 30 23 	call	0x4660	; 0x4660 <_ZN15LCDToggleOption9TrueLabelEv>
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
    2afe:	eb a0       	ldd	r14, Y+35	; 0x23
    2b00:	fc a0       	ldd	r15, Y+36	; 0x24
		int TrueTextLen = TrueLabel.length();
		String FalseLabel = TglOpt.FalseLabel();
    2b02:	be 01       	movw	r22, r28
    2b04:	6f 5f       	subi	r22, 0xFF	; 255
    2b06:	7f 4f       	sbci	r23, 0xFF	; 255
    2b08:	ce 01       	movw	r24, r28
    2b0a:	49 96       	adiw	r24, 0x19	; 25
    2b0c:	0e 94 54 23 	call	0x46a8	; 0x46a8 <_ZN15LCDToggleOption10FalseLabelEv>
    2b10:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b12:	9e 8d       	ldd	r25, Y+30	; 0x1e
		int FalseTextLen = FalseLabel.length();
		
		//Set Cursor Position
		if(TrueTextLen>FalseTextLen){
    2b14:	8e 15       	cp	r24, r14
    2b16:	9f 05       	cpc	r25, r15
    2b18:	3c f4       	brge	.+14     	; 0x2b28 <_ZN11LCDMenuItem5PrintEiiP13UserInterface+0xbe>
			LCD->setCursor(20-TrueTextLen-1,_rw);
    2b1a:	63 e1       	ldi	r22, 0x13	; 19
    2b1c:	6e 19       	sub	r22, r14
    2b1e:	4d 2d       	mov	r20, r13
    2b20:	c8 01       	movw	r24, r16
    2b22:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <_ZN3LCD9setCursorEhh>
    2b26:	06 c0       	rjmp	.+12     	; 0x2b34 <_ZN11LCDMenuItem5PrintEiiP13UserInterface+0xca>
		}else{
			LCD->setCursor(20-FalseTextLen-1,_rw);	
    2b28:	63 e1       	ldi	r22, 0x13	; 19
    2b2a:	68 1b       	sub	r22, r24
    2b2c:	4d 2d       	mov	r20, r13
    2b2e:	c8 01       	movw	r24, r16
    2b30:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <_ZN3LCD9setCursorEhh>
		}
		
		//Print current value
		if(TglOpt.Value() == 1){
    2b34:	ce 01       	movw	r24, r28
    2b36:	01 96       	adiw	r24, 0x01	; 1
    2b38:	0e 94 78 23 	call	0x46f0	; 0x46f0 <_ZN15LCDToggleOption5ValueEv>
    2b3c:	01 97       	sbiw	r24, 0x01	; 1
    2b3e:	39 f4       	brne	.+14     	; 0x2b4e <_ZN11LCDMenuItem5PrintEiiP13UserInterface+0xe4>
			LCD->print(TrueLabel);
    2b40:	be 01       	movw	r22, r28
    2b42:	61 5e       	subi	r22, 0xE1	; 225
    2b44:	7f 4f       	sbci	r23, 0xFF	; 255
    2b46:	c8 01       	movw	r24, r16
    2b48:	0e 94 69 31 	call	0x62d2	; 0x62d2 <_ZN5Print5printERK6String>
    2b4c:	06 c0       	rjmp	.+12     	; 0x2b5a <_ZN11LCDMenuItem5PrintEiiP13UserInterface+0xf0>
		}else{
			LCD->print(FalseLabel);
    2b4e:	be 01       	movw	r22, r28
    2b50:	67 5e       	subi	r22, 0xE7	; 231
    2b52:	7f 4f       	sbci	r23, 0xFF	; 255
    2b54:	c8 01       	movw	r24, r16
    2b56:	0e 94 69 31 	call	0x62d2	; 0x62d2 <_ZN5Print5printERK6String>
	if(Type == ToggleOption){
		LCDToggleOption TglOpt = *ToggleOptRef;
		
		String TrueLabel = TglOpt.TrueLabel();
		int TrueTextLen = TrueLabel.length();
		String FalseLabel = TglOpt.FalseLabel();
    2b5a:	ce 01       	movw	r24, r28
    2b5c:	49 96       	adiw	r24, 0x19	; 25
    2b5e:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <_ZN6StringD1Ev>
	LCD->print(Name);
	
	if(Type == ToggleOption){
		LCDToggleOption TglOpt = *ToggleOptRef;
		
		String TrueLabel = TglOpt.TrueLabel();
    2b62:	ce 01       	movw	r24, r28
    2b64:	4f 96       	adiw	r24, 0x1f	; 31
    2b66:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <_ZN6StringD1Ev>
		//Print current value
		if(TglOpt.Value() == 1){
			LCD->print(TrueLabel);
		}else{
			LCD->print(FalseLabel);
		}
    2b6a:	ce 01       	movw	r24, r28
    2b6c:	01 96       	adiw	r24, 0x01	; 1
    2b6e:	0e 94 20 23 	call	0x4640	; 0x4640 <_ZN15LCDToggleOptionD1Ev>
	}
}
    2b72:	a4 96       	adiw	r28, 0x24	; 36
    2b74:	0f b6       	in	r0, 0x3f	; 63
    2b76:	f8 94       	cli
    2b78:	de bf       	out	0x3e, r29	; 62
    2b7a:	0f be       	out	0x3f, r0	; 63
    2b7c:	cd bf       	out	0x3d, r28	; 61
    2b7e:	df 91       	pop	r29
    2b80:	cf 91       	pop	r28
    2b82:	1f 91       	pop	r17
    2b84:	0f 91       	pop	r16
    2b86:	ff 90       	pop	r15
    2b88:	ef 90       	pop	r14
    2b8a:	df 90       	pop	r13
    2b8c:	08 95       	ret

00002b8e <_ZN11LCDMenuItem10ItemSelectEP13UserInterface>:

//Item Select
void LCDMenuItem::ItemSelect(UserInterface *UI){
    2b8e:	cf 93       	push	r28
    2b90:	df 93       	push	r29
    2b92:	fc 01       	movw	r30, r24
    2b94:	eb 01       	movw	r28, r22
	 switch (Type) {
    2b96:	96 81       	ldd	r25, Z+6	; 0x06
    2b98:	91 30       	cpi	r25, 0x01	; 1
    2b9a:	29 f0       	breq	.+10     	; 0x2ba6 <_ZN11LCDMenuItem10ItemSelectEP13UserInterface+0x18>
    2b9c:	38 f1       	brcs	.+78     	; 0x2bec <_ZN11LCDMenuItem10ItemSelectEP13UserInterface+0x5e>
    2b9e:	92 30       	cpi	r25, 0x02	; 2
    2ba0:	09 f4       	brne	.+2      	; 0x2ba4 <_ZN11LCDMenuItem10ItemSelectEP13UserInterface+0x16>
    2ba2:	47 c0       	rjmp	.+142    	; 0x2c32 <_ZN11LCDMenuItem10ItemSelectEP13UserInterface+0xa4>
    2ba4:	4e c0       	rjmp	.+156    	; 0x2c42 <_ZN11LCDMenuItem10ItemSelectEP13UserInterface+0xb4>
		case(SubMenu):
			if (MenuRef == NULL){
    2ba6:	61 85       	ldd	r22, Z+9	; 0x09
    2ba8:	72 85       	ldd	r23, Z+10	; 0x0a
    2baa:	61 15       	cp	r22, r1
    2bac:	71 05       	cpc	r23, r1
    2bae:	d1 f4       	brne	.+52     	; 0x2be4 <_ZN11LCDMenuItem10ItemSelectEP13UserInterface+0x56>
				UI->LCD->clear();
    2bb0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2bb2:	9f 85       	ldd	r25, Y+15	; 0x0f
    2bb4:	0e 94 6b 27 	call	0x4ed6	; 0x4ed6 <_ZN3LCD5clearEv>
				UI->LCD->println("Error!");
    2bb8:	6f e1       	ldi	r22, 0x1F	; 31
    2bba:	73 e0       	ldi	r23, 0x03	; 3
    2bbc:	8e 85       	ldd	r24, Y+14	; 0x0e
    2bbe:	9f 85       	ldd	r25, Y+15	; 0x0f
    2bc0:	0e 94 a2 31 	call	0x6344	; 0x6344 <_ZN5Print7printlnEPKc>
				UI->LCD->println("Selected Menu item null");
    2bc4:	66 e2       	ldi	r22, 0x26	; 38
    2bc6:	73 e0       	ldi	r23, 0x03	; 3
    2bc8:	8e 85       	ldd	r24, Y+14	; 0x0e
    2bca:	9f 85       	ldd	r25, Y+15	; 0x0f
    2bcc:	0e 94 a2 31 	call	0x6344	; 0x6344 <_ZN5Print7printlnEPKc>
				delay(3000);
    2bd0:	68 eb       	ldi	r22, 0xB8	; 184
    2bd2:	7b e0       	ldi	r23, 0x0B	; 11
    2bd4:	80 e0       	ldi	r24, 0x00	; 0
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	0e 94 45 36 	call	0x6c8a	; 0x6c8a <delay>
				UI->display();
    2bdc:	ce 01       	movw	r24, r28
    2bde:	0e 94 6e 24 	call	0x48dc	; 0x48dc <_ZN13UserInterface7displayEv>
    2be2:	48 c0       	rjmp	.+144    	; 0x2c74 <_ZN11LCDMenuItem10ItemSelectEP13UserInterface+0xe6>
			}else{
				UI->setDisplay(MenuRef);
    2be4:	ce 01       	movw	r24, r28
    2be6:	0e 94 be 24 	call	0x497c	; 0x497c <_ZN13UserInterface10setDisplayEP7LCDMenu>
    2bea:	44 c0       	rjmp	.+136    	; 0x2c74 <_ZN11LCDMenuItem10ItemSelectEP13UserInterface+0xe6>
			}
			break;
		case(SubPage):
			if (PageRef == NULL){
    2bec:	67 81       	ldd	r22, Z+7	; 0x07
    2bee:	70 85       	ldd	r23, Z+8	; 0x08
    2bf0:	61 15       	cp	r22, r1
    2bf2:	71 05       	cpc	r23, r1
    2bf4:	d1 f4       	brne	.+52     	; 0x2c2a <_ZN11LCDMenuItem10ItemSelectEP13UserInterface+0x9c>
				UI->LCD->clear();
    2bf6:	8e 85       	ldd	r24, Y+14	; 0x0e
    2bf8:	9f 85       	ldd	r25, Y+15	; 0x0f
    2bfa:	0e 94 6b 27 	call	0x4ed6	; 0x4ed6 <_ZN3LCD5clearEv>
				UI->LCD->println("Error!");
    2bfe:	6f e1       	ldi	r22, 0x1F	; 31
    2c00:	73 e0       	ldi	r23, 0x03	; 3
    2c02:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c04:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c06:	0e 94 a2 31 	call	0x6344	; 0x6344 <_ZN5Print7printlnEPKc>
				UI->LCD->println("Selected Menu item null");
    2c0a:	66 e2       	ldi	r22, 0x26	; 38
    2c0c:	73 e0       	ldi	r23, 0x03	; 3
    2c0e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c10:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c12:	0e 94 a2 31 	call	0x6344	; 0x6344 <_ZN5Print7printlnEPKc>
				delay(3000);
    2c16:	68 eb       	ldi	r22, 0xB8	; 184
    2c18:	7b e0       	ldi	r23, 0x0B	; 11
    2c1a:	80 e0       	ldi	r24, 0x00	; 0
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	0e 94 45 36 	call	0x6c8a	; 0x6c8a <delay>
				UI->display();
    2c22:	ce 01       	movw	r24, r28
    2c24:	0e 94 6e 24 	call	0x48dc	; 0x48dc <_ZN13UserInterface7displayEv>
    2c28:	25 c0       	rjmp	.+74     	; 0x2c74 <_ZN11LCDMenuItem10ItemSelectEP13UserInterface+0xe6>
			}else{
				UI->setDisplay(PageRef);
    2c2a:	ce 01       	movw	r24, r28
    2c2c:	0e 94 c4 24 	call	0x4988	; 0x4988 <_ZN13UserInterface10setDisplayEP7LCDPage>
    2c30:	21 c0       	rjmp	.+66     	; 0x2c74 <_ZN11LCDMenuItem10ItemSelectEP13UserInterface+0xe6>
			}
			break;
		case(ToggleOption):
			(*ToggleOptRef).Toggle();
    2c32:	83 85       	ldd	r24, Z+11	; 0x0b
    2c34:	94 85       	ldd	r25, Z+12	; 0x0c
    2c36:	0e 94 9a 23 	call	0x4734	; 0x4734 <_ZN15LCDToggleOption6ToggleEv>
			UI->display();
    2c3a:	ce 01       	movw	r24, r28
    2c3c:	0e 94 6e 24 	call	0x48dc	; 0x48dc <_ZN13UserInterface7displayEv>
			break;
    2c40:	19 c0       	rjmp	.+50     	; 0x2c74 <_ZN11LCDMenuItem10ItemSelectEP13UserInterface+0xe6>
		default:
			UI->LCD->clear();
    2c42:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c44:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c46:	0e 94 6b 27 	call	0x4ed6	; 0x4ed6 <_ZN3LCD5clearEv>
			UI->LCD->println("ERROR!:");
    2c4a:	6e e3       	ldi	r22, 0x3E	; 62
    2c4c:	73 e0       	ldi	r23, 0x03	; 3
    2c4e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c50:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c52:	0e 94 a2 31 	call	0x6344	; 0x6344 <_ZN5Print7printlnEPKc>
			UI->LCD->println("  Menu Type not yet Supported");
    2c56:	66 e4       	ldi	r22, 0x46	; 70
    2c58:	73 e0       	ldi	r23, 0x03	; 3
    2c5a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c5c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c5e:	0e 94 a2 31 	call	0x6344	; 0x6344 <_ZN5Print7printlnEPKc>
			delay(3000);
    2c62:	68 eb       	ldi	r22, 0xB8	; 184
    2c64:	7b e0       	ldi	r23, 0x0B	; 11
    2c66:	80 e0       	ldi	r24, 0x00	; 0
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	0e 94 45 36 	call	0x6c8a	; 0x6c8a <delay>
			UI->display();
    2c6e:	ce 01       	movw	r24, r28
    2c70:	0e 94 6e 24 	call	0x48dc	; 0x48dc <_ZN13UserInterface7displayEv>
			break;
	}
}
    2c74:	df 91       	pop	r29
    2c76:	cf 91       	pop	r28
    2c78:	08 95       	ret

00002c7a <_ZN10LinkedListI11LCDPageItemE4sizeEv>:
}

// default destructor
LCDPage::~LCDPage()
{
} //~LCDPage
    2c7a:	fc 01       	movw	r30, r24
    2c7c:	82 81       	ldd	r24, Z+2	; 0x02
    2c7e:	93 81       	ldd	r25, Z+3	; 0x03
    2c80:	08 95       	ret

00002c82 <_ZN10LinkedListI11LCDPageItemE5clearEv>:
    2c82:	0f 93       	push	r16
    2c84:	1f 93       	push	r17
    2c86:	cf 93       	push	r28
    2c88:	df 93       	push	r29
    2c8a:	cd b7       	in	r28, 0x3d	; 61
    2c8c:	de b7       	in	r29, 0x3e	; 62
    2c8e:	ec 97       	sbiw	r28, 0x3c	; 60
    2c90:	0f b6       	in	r0, 0x3f	; 63
    2c92:	f8 94       	cli
    2c94:	de bf       	out	0x3e, r29	; 62
    2c96:	0f be       	out	0x3f, r0	; 63
    2c98:	cd bf       	out	0x3d, r28	; 61
    2c9a:	8c 01       	movw	r16, r24
    2c9c:	0e c0       	rjmp	.+28     	; 0x2cba <_ZN10LinkedListI11LCDPageItemE5clearEv+0x38>
    2c9e:	d8 01       	movw	r26, r16
    2ca0:	ed 91       	ld	r30, X+
    2ca2:	fc 91       	ld	r31, X
    2ca4:	06 84       	ldd	r0, Z+14	; 0x0e
    2ca6:	f7 85       	ldd	r31, Z+15	; 0x0f
    2ca8:	e0 2d       	mov	r30, r0
    2caa:	b8 01       	movw	r22, r16
    2cac:	ce 01       	movw	r24, r28
    2cae:	01 96       	adiw	r24, 0x01	; 1
    2cb0:	19 95       	eicall
    2cb2:	ce 01       	movw	r24, r28
    2cb4:	01 96       	adiw	r24, 0x01	; 1
    2cb6:	0e 94 a8 20 	call	0x4150	; 0x4150 <_ZN11LCDPageItemD1Ev>
    2cba:	d8 01       	movw	r26, r16
    2cbc:	ed 91       	ld	r30, X+
    2cbe:	fc 91       	ld	r31, X
    2cc0:	01 90       	ld	r0, Z+
    2cc2:	f0 81       	ld	r31, Z
    2cc4:	e0 2d       	mov	r30, r0
    2cc6:	c8 01       	movw	r24, r16
    2cc8:	19 95       	eicall
    2cca:	18 16       	cp	r1, r24
    2ccc:	19 06       	cpc	r1, r25
    2cce:	3c f3       	brlt	.-50     	; 0x2c9e <_ZN10LinkedListI11LCDPageItemE5clearEv+0x1c>
    2cd0:	ec 96       	adiw	r28, 0x3c	; 60
    2cd2:	0f b6       	in	r0, 0x3f	; 63
    2cd4:	f8 94       	cli
    2cd6:	de bf       	out	0x3e, r29	; 62
    2cd8:	0f be       	out	0x3f, r0	; 63
    2cda:	cd bf       	out	0x3d, r28	; 61
    2cdc:	df 91       	pop	r29
    2cde:	cf 91       	pop	r28
    2ce0:	1f 91       	pop	r17
    2ce2:	0f 91       	pop	r16
    2ce4:	08 95       	ret

00002ce6 <_ZN10LinkedListI11LCDPageItemE5shiftEv>:
    2ce6:	af 92       	push	r10
    2ce8:	bf 92       	push	r11
    2cea:	cf 92       	push	r12
    2cec:	df 92       	push	r13
    2cee:	ef 92       	push	r14
    2cf0:	ff 92       	push	r15
    2cf2:	0f 93       	push	r16
    2cf4:	1f 93       	push	r17
    2cf6:	cf 93       	push	r28
    2cf8:	df 93       	push	r29
    2cfa:	cd b7       	in	r28, 0x3d	; 61
    2cfc:	de b7       	in	r29, 0x3e	; 62
    2cfe:	ec 97       	sbiw	r28, 0x3c	; 60
    2d00:	0f b6       	in	r0, 0x3f	; 63
    2d02:	f8 94       	cli
    2d04:	de bf       	out	0x3e, r29	; 62
    2d06:	0f be       	out	0x3f, r0	; 63
    2d08:	cd bf       	out	0x3d, r28	; 61
    2d0a:	8c 01       	movw	r16, r24
    2d0c:	6b 01       	movw	r12, r22
    2d0e:	db 01       	movw	r26, r22
    2d10:	12 96       	adiw	r26, 0x02	; 2
    2d12:	8d 91       	ld	r24, X+
    2d14:	9c 91       	ld	r25, X
    2d16:	13 97       	sbiw	r26, 0x03	; 3
    2d18:	18 16       	cp	r1, r24
    2d1a:	19 06       	cpc	r1, r25
    2d1c:	24 f0       	brlt	.+8      	; 0x2d26 <_ZN10LinkedListI11LCDPageItemE5shiftEv+0x40>
    2d1e:	c8 01       	movw	r24, r16
    2d20:	0e 94 63 20 	call	0x40c6	; 0x40c6 <_ZN11LCDPageItemC1Ev>
    2d24:	20 c1       	rjmp	.+576    	; 0x2f66 <_ZN10LinkedListI11LCDPageItemE5shiftEv+0x280>
    2d26:	02 97       	sbiw	r24, 0x02	; 2
    2d28:	0c f4       	brge	.+2      	; 0x2d2c <_ZN10LinkedListI11LCDPageItemE5shiftEv+0x46>
    2d2a:	15 c1       	rjmp	.+554    	; 0x2f56 <_ZN10LinkedListI11LCDPageItemE5shiftEv+0x270>
    2d2c:	fb 01       	movw	r30, r22
    2d2e:	e4 80       	ldd	r14, Z+4	; 0x04
    2d30:	f5 80       	ldd	r15, Z+5	; 0x05
    2d32:	d7 01       	movw	r26, r14
    2d34:	dc 96       	adiw	r26, 0x3c	; 60
    2d36:	ad 90       	ld	r10, X+
    2d38:	bc 90       	ld	r11, X
    2d3a:	dd 97       	sbiw	r26, 0x3d	; 61
    2d3c:	8c 91       	ld	r24, X
    2d3e:	89 83       	std	Y+1, r24	; 0x01
    2d40:	11 96       	adiw	r26, 0x01	; 1
    2d42:	8c 91       	ld	r24, X
    2d44:	11 97       	sbiw	r26, 0x01	; 1
    2d46:	8a 83       	std	Y+2, r24	; 0x02
    2d48:	12 96       	adiw	r26, 0x02	; 2
    2d4a:	8c 91       	ld	r24, X
    2d4c:	8b 83       	std	Y+3, r24	; 0x03
    2d4e:	b7 01       	movw	r22, r14
    2d50:	6d 5f       	subi	r22, 0xFD	; 253
    2d52:	7f 4f       	sbci	r23, 0xFF	; 255
    2d54:	ce 01       	movw	r24, r28
    2d56:	04 96       	adiw	r24, 0x04	; 4
    2d58:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    2d5c:	f7 01       	movw	r30, r14
    2d5e:	81 85       	ldd	r24, Z+9	; 0x09
    2d60:	92 85       	ldd	r25, Z+10	; 0x0a
    2d62:	a3 85       	ldd	r26, Z+11	; 0x0b
    2d64:	b4 85       	ldd	r27, Z+12	; 0x0c
    2d66:	8a 87       	std	Y+10, r24	; 0x0a
    2d68:	9b 87       	std	Y+11, r25	; 0x0b
    2d6a:	ac 87       	std	Y+12, r26	; 0x0c
    2d6c:	bd 87       	std	Y+13, r27	; 0x0d
    2d6e:	85 85       	ldd	r24, Z+13	; 0x0d
    2d70:	8e 87       	std	Y+14, r24	; 0x0e
    2d72:	86 85       	ldd	r24, Z+14	; 0x0e
    2d74:	97 85       	ldd	r25, Z+15	; 0x0f
    2d76:	98 8b       	std	Y+16, r25	; 0x10
    2d78:	8f 87       	std	Y+15, r24	; 0x0f
    2d7a:	80 89       	ldd	r24, Z+16	; 0x10
    2d7c:	91 89       	ldd	r25, Z+17	; 0x11
    2d7e:	9a 8b       	std	Y+18, r25	; 0x12
    2d80:	89 8b       	std	Y+17, r24	; 0x11
    2d82:	82 89       	ldd	r24, Z+18	; 0x12
    2d84:	93 89       	ldd	r25, Z+19	; 0x13
    2d86:	9c 8b       	std	Y+20, r25	; 0x14
    2d88:	8b 8b       	std	Y+19, r24	; 0x13
    2d8a:	84 89       	ldd	r24, Z+20	; 0x14
    2d8c:	95 89       	ldd	r25, Z+21	; 0x15
    2d8e:	9e 8b       	std	Y+22, r25	; 0x16
    2d90:	8d 8b       	std	Y+21, r24	; 0x15
    2d92:	86 89       	ldd	r24, Z+22	; 0x16
    2d94:	97 89       	ldd	r25, Z+23	; 0x17
    2d96:	98 8f       	std	Y+24, r25	; 0x18
    2d98:	8f 8b       	std	Y+23, r24	; 0x17
    2d9a:	b7 01       	movw	r22, r14
    2d9c:	68 5e       	subi	r22, 0xE8	; 232
    2d9e:	7f 4f       	sbci	r23, 0xFF	; 255
    2da0:	ce 01       	movw	r24, r28
    2da2:	49 96       	adiw	r24, 0x19	; 25
    2da4:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    2da8:	b7 01       	movw	r22, r14
    2daa:	62 5e       	subi	r22, 0xE2	; 226
    2dac:	7f 4f       	sbci	r23, 0xFF	; 255
    2dae:	ce 01       	movw	r24, r28
    2db0:	4f 96       	adiw	r24, 0x1f	; 31
    2db2:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    2db6:	d7 01       	movw	r26, r14
    2db8:	94 96       	adiw	r26, 0x24	; 36
    2dba:	8d 91       	ld	r24, X+
    2dbc:	9c 91       	ld	r25, X
    2dbe:	95 97       	sbiw	r26, 0x25	; 37
    2dc0:	9e a3       	std	Y+38, r25	; 0x26
    2dc2:	8d a3       	std	Y+37, r24	; 0x25
    2dc4:	96 96       	adiw	r26, 0x26	; 38
    2dc6:	8d 91       	ld	r24, X+
    2dc8:	9c 91       	ld	r25, X
    2dca:	97 97       	sbiw	r26, 0x27	; 39
    2dcc:	98 a7       	std	Y+40, r25	; 0x28
    2dce:	8f a3       	std	Y+39, r24	; 0x27
    2dd0:	98 96       	adiw	r26, 0x28	; 40
    2dd2:	8d 91       	ld	r24, X+
    2dd4:	9c 91       	ld	r25, X
    2dd6:	99 97       	sbiw	r26, 0x29	; 41
    2dd8:	9a a7       	std	Y+42, r25	; 0x2a
    2dda:	89 a7       	std	Y+41, r24	; 0x29
    2ddc:	9a 96       	adiw	r26, 0x2a	; 42
    2dde:	8d 91       	ld	r24, X+
    2de0:	9c 91       	ld	r25, X
    2de2:	9b 97       	sbiw	r26, 0x2b	; 43
    2de4:	9c a7       	std	Y+44, r25	; 0x2c
    2de6:	8b a7       	std	Y+43, r24	; 0x2b
    2de8:	9c 96       	adiw	r26, 0x2c	; 44
    2dea:	8d 91       	ld	r24, X+
    2dec:	9c 91       	ld	r25, X
    2dee:	9d 97       	sbiw	r26, 0x2d	; 45
    2df0:	9e a7       	std	Y+46, r25	; 0x2e
    2df2:	8d a7       	std	Y+45, r24	; 0x2d
    2df4:	9e 96       	adiw	r26, 0x2e	; 46
    2df6:	8d 91       	ld	r24, X+
    2df8:	9c 91       	ld	r25, X
    2dfa:	9f 97       	sbiw	r26, 0x2f	; 47
    2dfc:	98 ab       	std	Y+48, r25	; 0x30
    2dfe:	8f a7       	std	Y+47, r24	; 0x2f
    2e00:	d0 96       	adiw	r26, 0x30	; 48
    2e02:	8d 91       	ld	r24, X+
    2e04:	9c 91       	ld	r25, X
    2e06:	d1 97       	sbiw	r26, 0x31	; 49
    2e08:	9a ab       	std	Y+50, r25	; 0x32
    2e0a:	89 ab       	std	Y+49, r24	; 0x31
    2e0c:	b7 01       	movw	r22, r14
    2e0e:	6e 5c       	subi	r22, 0xCE	; 206
    2e10:	7f 4f       	sbci	r23, 0xFF	; 255
    2e12:	ce 01       	movw	r24, r28
    2e14:	c3 96       	adiw	r24, 0x33	; 51
    2e16:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    2e1a:	f7 01       	movw	r30, r14
    2e1c:	80 ad       	ldd	r24, Z+56	; 0x38
    2e1e:	91 ad       	ldd	r25, Z+57	; 0x39
    2e20:	9a af       	std	Y+58, r25	; 0x3a
    2e22:	89 af       	std	Y+57, r24	; 0x39
    2e24:	82 ad       	ldd	r24, Z+58	; 0x3a
    2e26:	93 ad       	ldd	r25, Z+59	; 0x3b
    2e28:	9c af       	std	Y+60, r25	; 0x3c
    2e2a:	8b af       	std	Y+59, r24	; 0x3b
    2e2c:	d6 01       	movw	r26, r12
    2e2e:	14 96       	adiw	r26, 0x04	; 4
    2e30:	ed 90       	ld	r14, X+
    2e32:	fc 90       	ld	r15, X
    2e34:	15 97       	sbiw	r26, 0x05	; 5
    2e36:	e1 14       	cp	r14, r1
    2e38:	f1 04       	cpc	r15, r1
    2e3a:	31 f0       	breq	.+12     	; 0x2e48 <_ZN10LinkedListI11LCDPageItemE5shiftEv+0x162>
    2e3c:	c7 01       	movw	r24, r14
    2e3e:	0e 94 a8 20 	call	0x4150	; 0x4150 <_ZN11LCDPageItemD1Ev>
    2e42:	c7 01       	movw	r24, r14
    2e44:	0e 94 39 31 	call	0x6272	; 0x6272 <_ZdlPv>
    2e48:	f6 01       	movw	r30, r12
    2e4a:	b5 82       	std	Z+5, r11	; 0x05
    2e4c:	a4 82       	std	Z+4, r10	; 0x04
    2e4e:	82 81       	ldd	r24, Z+2	; 0x02
    2e50:	93 81       	ldd	r25, Z+3	; 0x03
    2e52:	01 97       	sbiw	r24, 0x01	; 1
    2e54:	93 83       	std	Z+3, r25	; 0x03
    2e56:	82 83       	std	Z+2, r24	; 0x02
    2e58:	14 86       	std	Z+12, r1	; 0x0c
    2e5a:	89 81       	ldd	r24, Y+1	; 0x01
    2e5c:	d8 01       	movw	r26, r16
    2e5e:	8c 93       	st	X, r24
    2e60:	8a 81       	ldd	r24, Y+2	; 0x02
    2e62:	11 96       	adiw	r26, 0x01	; 1
    2e64:	8c 93       	st	X, r24
    2e66:	11 97       	sbiw	r26, 0x01	; 1
    2e68:	8b 81       	ldd	r24, Y+3	; 0x03
    2e6a:	12 96       	adiw	r26, 0x02	; 2
    2e6c:	8c 93       	st	X, r24
    2e6e:	be 01       	movw	r22, r28
    2e70:	6c 5f       	subi	r22, 0xFC	; 252
    2e72:	7f 4f       	sbci	r23, 0xFF	; 255
    2e74:	c8 01       	movw	r24, r16
    2e76:	03 96       	adiw	r24, 0x03	; 3
    2e78:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    2e7c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e7e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e80:	ac 85       	ldd	r26, Y+12	; 0x0c
    2e82:	bd 85       	ldd	r27, Y+13	; 0x0d
    2e84:	f8 01       	movw	r30, r16
    2e86:	81 87       	std	Z+9, r24	; 0x09
    2e88:	92 87       	std	Z+10, r25	; 0x0a
    2e8a:	a3 87       	std	Z+11, r26	; 0x0b
    2e8c:	b4 87       	std	Z+12, r27	; 0x0c
    2e8e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e90:	85 87       	std	Z+13, r24	; 0x0d
    2e92:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e94:	98 89       	ldd	r25, Y+16	; 0x10
    2e96:	97 87       	std	Z+15, r25	; 0x0f
    2e98:	86 87       	std	Z+14, r24	; 0x0e
    2e9a:	89 89       	ldd	r24, Y+17	; 0x11
    2e9c:	9a 89       	ldd	r25, Y+18	; 0x12
    2e9e:	91 8b       	std	Z+17, r25	; 0x11
    2ea0:	80 8b       	std	Z+16, r24	; 0x10
    2ea2:	8b 89       	ldd	r24, Y+19	; 0x13
    2ea4:	9c 89       	ldd	r25, Y+20	; 0x14
    2ea6:	93 8b       	std	Z+19, r25	; 0x13
    2ea8:	82 8b       	std	Z+18, r24	; 0x12
    2eaa:	8d 89       	ldd	r24, Y+21	; 0x15
    2eac:	9e 89       	ldd	r25, Y+22	; 0x16
    2eae:	95 8b       	std	Z+21, r25	; 0x15
    2eb0:	84 8b       	std	Z+20, r24	; 0x14
    2eb2:	8f 89       	ldd	r24, Y+23	; 0x17
    2eb4:	98 8d       	ldd	r25, Y+24	; 0x18
    2eb6:	97 8b       	std	Z+23, r25	; 0x17
    2eb8:	86 8b       	std	Z+22, r24	; 0x16
    2eba:	be 01       	movw	r22, r28
    2ebc:	67 5e       	subi	r22, 0xE7	; 231
    2ebe:	7f 4f       	sbci	r23, 0xFF	; 255
    2ec0:	c8 01       	movw	r24, r16
    2ec2:	48 96       	adiw	r24, 0x18	; 24
    2ec4:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    2ec8:	be 01       	movw	r22, r28
    2eca:	61 5e       	subi	r22, 0xE1	; 225
    2ecc:	7f 4f       	sbci	r23, 0xFF	; 255
    2ece:	c8 01       	movw	r24, r16
    2ed0:	4e 96       	adiw	r24, 0x1e	; 30
    2ed2:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    2ed6:	8d a1       	ldd	r24, Y+37	; 0x25
    2ed8:	9e a1       	ldd	r25, Y+38	; 0x26
    2eda:	d8 01       	movw	r26, r16
    2edc:	95 96       	adiw	r26, 0x25	; 37
    2ede:	9c 93       	st	X, r25
    2ee0:	8e 93       	st	-X, r24
    2ee2:	94 97       	sbiw	r26, 0x24	; 36
    2ee4:	8f a1       	ldd	r24, Y+39	; 0x27
    2ee6:	98 a5       	ldd	r25, Y+40	; 0x28
    2ee8:	97 96       	adiw	r26, 0x27	; 39
    2eea:	9c 93       	st	X, r25
    2eec:	8e 93       	st	-X, r24
    2eee:	96 97       	sbiw	r26, 0x26	; 38
    2ef0:	89 a5       	ldd	r24, Y+41	; 0x29
    2ef2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ef4:	99 96       	adiw	r26, 0x29	; 41
    2ef6:	9c 93       	st	X, r25
    2ef8:	8e 93       	st	-X, r24
    2efa:	98 97       	sbiw	r26, 0x28	; 40
    2efc:	8b a5       	ldd	r24, Y+43	; 0x2b
    2efe:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f00:	9b 96       	adiw	r26, 0x2b	; 43
    2f02:	9c 93       	st	X, r25
    2f04:	8e 93       	st	-X, r24
    2f06:	9a 97       	sbiw	r26, 0x2a	; 42
    2f08:	8d a5       	ldd	r24, Y+45	; 0x2d
    2f0a:	9e a5       	ldd	r25, Y+46	; 0x2e
    2f0c:	9d 96       	adiw	r26, 0x2d	; 45
    2f0e:	9c 93       	st	X, r25
    2f10:	8e 93       	st	-X, r24
    2f12:	9c 97       	sbiw	r26, 0x2c	; 44
    2f14:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f16:	98 a9       	ldd	r25, Y+48	; 0x30
    2f18:	9f 96       	adiw	r26, 0x2f	; 47
    2f1a:	9c 93       	st	X, r25
    2f1c:	8e 93       	st	-X, r24
    2f1e:	9e 97       	sbiw	r26, 0x2e	; 46
    2f20:	89 a9       	ldd	r24, Y+49	; 0x31
    2f22:	9a a9       	ldd	r25, Y+50	; 0x32
    2f24:	d1 96       	adiw	r26, 0x31	; 49
    2f26:	9c 93       	st	X, r25
    2f28:	8e 93       	st	-X, r24
    2f2a:	d0 97       	sbiw	r26, 0x30	; 48
    2f2c:	be 01       	movw	r22, r28
    2f2e:	6d 5c       	subi	r22, 0xCD	; 205
    2f30:	7f 4f       	sbci	r23, 0xFF	; 255
    2f32:	c8 01       	movw	r24, r16
    2f34:	c2 96       	adiw	r24, 0x32	; 50
    2f36:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    2f3a:	89 ad       	ldd	r24, Y+57	; 0x39
    2f3c:	9a ad       	ldd	r25, Y+58	; 0x3a
    2f3e:	f8 01       	movw	r30, r16
    2f40:	91 af       	std	Z+57, r25	; 0x39
    2f42:	80 af       	std	Z+56, r24	; 0x38
    2f44:	8b ad       	ldd	r24, Y+59	; 0x3b
    2f46:	9c ad       	ldd	r25, Y+60	; 0x3c
    2f48:	93 af       	std	Z+59, r25	; 0x3b
    2f4a:	82 af       	std	Z+58, r24	; 0x3a
    2f4c:	ce 01       	movw	r24, r28
    2f4e:	01 96       	adiw	r24, 0x01	; 1
    2f50:	0e 94 a8 20 	call	0x4150	; 0x4150 <_ZN11LCDPageItemD1Ev>
    2f54:	08 c0       	rjmp	.+16     	; 0x2f66 <_ZN10LinkedListI11LCDPageItemE5shiftEv+0x280>
    2f56:	db 01       	movw	r26, r22
    2f58:	ed 91       	ld	r30, X+
    2f5a:	fc 91       	ld	r31, X
    2f5c:	04 84       	ldd	r0, Z+12	; 0x0c
    2f5e:	f5 85       	ldd	r31, Z+13	; 0x0d
    2f60:	e0 2d       	mov	r30, r0
    2f62:	c8 01       	movw	r24, r16
    2f64:	19 95       	eicall
    2f66:	c8 01       	movw	r24, r16
    2f68:	ec 96       	adiw	r28, 0x3c	; 60
    2f6a:	0f b6       	in	r0, 0x3f	; 63
    2f6c:	f8 94       	cli
    2f6e:	de bf       	out	0x3e, r29	; 62
    2f70:	0f be       	out	0x3f, r0	; 63
    2f72:	cd bf       	out	0x3d, r28	; 61
    2f74:	df 91       	pop	r29
    2f76:	cf 91       	pop	r28
    2f78:	1f 91       	pop	r17
    2f7a:	0f 91       	pop	r16
    2f7c:	ff 90       	pop	r15
    2f7e:	ef 90       	pop	r14
    2f80:	df 90       	pop	r13
    2f82:	cf 90       	pop	r12
    2f84:	bf 90       	pop	r11
    2f86:	af 90       	pop	r10
    2f88:	08 95       	ret

00002f8a <_ZN10LinkedListI11LCDPageItemE7unshiftES0_>:
    2f8a:	cf 92       	push	r12
    2f8c:	df 92       	push	r13
    2f8e:	ef 92       	push	r14
    2f90:	ff 92       	push	r15
    2f92:	0f 93       	push	r16
    2f94:	1f 93       	push	r17
    2f96:	cf 93       	push	r28
    2f98:	df 93       	push	r29
    2f9a:	cd b7       	in	r28, 0x3d	; 61
    2f9c:	de b7       	in	r29, 0x3e	; 62
    2f9e:	ec 97       	sbiw	r28, 0x3c	; 60
    2fa0:	0f b6       	in	r0, 0x3f	; 63
    2fa2:	f8 94       	cli
    2fa4:	de bf       	out	0x3e, r29	; 62
    2fa6:	0f be       	out	0x3f, r0	; 63
    2fa8:	cd bf       	out	0x3d, r28	; 61
    2faa:	6c 01       	movw	r12, r24
    2fac:	8b 01       	movw	r16, r22
    2fae:	dc 01       	movw	r26, r24
    2fb0:	12 96       	adiw	r26, 0x02	; 2
    2fb2:	8d 91       	ld	r24, X+
    2fb4:	9c 91       	ld	r25, X
    2fb6:	13 97       	sbiw	r26, 0x03	; 3
    2fb8:	89 2b       	or	r24, r25
    2fba:	09 f0       	breq	.+2      	; 0x2fbe <_ZN10LinkedListI11LCDPageItemE7unshiftES0_+0x34>
    2fbc:	85 c0       	rjmp	.+266    	; 0x30c8 <_ZN10LinkedListI11LCDPageItemE7unshiftES0_+0x13e>
    2fbe:	ed 91       	ld	r30, X+
    2fc0:	fc 91       	ld	r31, X
    2fc2:	e4 80       	ldd	r14, Z+4	; 0x04
    2fc4:	f5 80       	ldd	r15, Z+5	; 0x05
    2fc6:	fb 01       	movw	r30, r22
    2fc8:	80 81       	ld	r24, Z
    2fca:	89 83       	std	Y+1, r24	; 0x01
    2fcc:	81 81       	ldd	r24, Z+1	; 0x01
    2fce:	8a 83       	std	Y+2, r24	; 0x02
    2fd0:	82 81       	ldd	r24, Z+2	; 0x02
    2fd2:	8b 83       	std	Y+3, r24	; 0x03
    2fd4:	6d 5f       	subi	r22, 0xFD	; 253
    2fd6:	7f 4f       	sbci	r23, 0xFF	; 255
    2fd8:	ce 01       	movw	r24, r28
    2fda:	04 96       	adiw	r24, 0x04	; 4
    2fdc:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    2fe0:	f8 01       	movw	r30, r16
    2fe2:	81 85       	ldd	r24, Z+9	; 0x09
    2fe4:	92 85       	ldd	r25, Z+10	; 0x0a
    2fe6:	a3 85       	ldd	r26, Z+11	; 0x0b
    2fe8:	b4 85       	ldd	r27, Z+12	; 0x0c
    2fea:	8a 87       	std	Y+10, r24	; 0x0a
    2fec:	9b 87       	std	Y+11, r25	; 0x0b
    2fee:	ac 87       	std	Y+12, r26	; 0x0c
    2ff0:	bd 87       	std	Y+13, r27	; 0x0d
    2ff2:	85 85       	ldd	r24, Z+13	; 0x0d
    2ff4:	8e 87       	std	Y+14, r24	; 0x0e
    2ff6:	86 85       	ldd	r24, Z+14	; 0x0e
    2ff8:	97 85       	ldd	r25, Z+15	; 0x0f
    2ffa:	98 8b       	std	Y+16, r25	; 0x10
    2ffc:	8f 87       	std	Y+15, r24	; 0x0f
    2ffe:	80 89       	ldd	r24, Z+16	; 0x10
    3000:	91 89       	ldd	r25, Z+17	; 0x11
    3002:	9a 8b       	std	Y+18, r25	; 0x12
    3004:	89 8b       	std	Y+17, r24	; 0x11
    3006:	82 89       	ldd	r24, Z+18	; 0x12
    3008:	93 89       	ldd	r25, Z+19	; 0x13
    300a:	9c 8b       	std	Y+20, r25	; 0x14
    300c:	8b 8b       	std	Y+19, r24	; 0x13
    300e:	84 89       	ldd	r24, Z+20	; 0x14
    3010:	95 89       	ldd	r25, Z+21	; 0x15
    3012:	9e 8b       	std	Y+22, r25	; 0x16
    3014:	8d 8b       	std	Y+21, r24	; 0x15
    3016:	86 89       	ldd	r24, Z+22	; 0x16
    3018:	97 89       	ldd	r25, Z+23	; 0x17
    301a:	98 8f       	std	Y+24, r25	; 0x18
    301c:	8f 8b       	std	Y+23, r24	; 0x17
    301e:	b8 01       	movw	r22, r16
    3020:	68 5e       	subi	r22, 0xE8	; 232
    3022:	7f 4f       	sbci	r23, 0xFF	; 255
    3024:	ce 01       	movw	r24, r28
    3026:	49 96       	adiw	r24, 0x19	; 25
    3028:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    302c:	b8 01       	movw	r22, r16
    302e:	62 5e       	subi	r22, 0xE2	; 226
    3030:	7f 4f       	sbci	r23, 0xFF	; 255
    3032:	ce 01       	movw	r24, r28
    3034:	4f 96       	adiw	r24, 0x1f	; 31
    3036:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    303a:	d8 01       	movw	r26, r16
    303c:	94 96       	adiw	r26, 0x24	; 36
    303e:	8d 91       	ld	r24, X+
    3040:	9c 91       	ld	r25, X
    3042:	95 97       	sbiw	r26, 0x25	; 37
    3044:	9e a3       	std	Y+38, r25	; 0x26
    3046:	8d a3       	std	Y+37, r24	; 0x25
    3048:	96 96       	adiw	r26, 0x26	; 38
    304a:	8d 91       	ld	r24, X+
    304c:	9c 91       	ld	r25, X
    304e:	97 97       	sbiw	r26, 0x27	; 39
    3050:	98 a7       	std	Y+40, r25	; 0x28
    3052:	8f a3       	std	Y+39, r24	; 0x27
    3054:	98 96       	adiw	r26, 0x28	; 40
    3056:	8d 91       	ld	r24, X+
    3058:	9c 91       	ld	r25, X
    305a:	99 97       	sbiw	r26, 0x29	; 41
    305c:	9a a7       	std	Y+42, r25	; 0x2a
    305e:	89 a7       	std	Y+41, r24	; 0x29
    3060:	9a 96       	adiw	r26, 0x2a	; 42
    3062:	8d 91       	ld	r24, X+
    3064:	9c 91       	ld	r25, X
    3066:	9b 97       	sbiw	r26, 0x2b	; 43
    3068:	9c a7       	std	Y+44, r25	; 0x2c
    306a:	8b a7       	std	Y+43, r24	; 0x2b
    306c:	9c 96       	adiw	r26, 0x2c	; 44
    306e:	8d 91       	ld	r24, X+
    3070:	9c 91       	ld	r25, X
    3072:	9d 97       	sbiw	r26, 0x2d	; 45
    3074:	9e a7       	std	Y+46, r25	; 0x2e
    3076:	8d a7       	std	Y+45, r24	; 0x2d
    3078:	9e 96       	adiw	r26, 0x2e	; 46
    307a:	8d 91       	ld	r24, X+
    307c:	9c 91       	ld	r25, X
    307e:	9f 97       	sbiw	r26, 0x2f	; 47
    3080:	98 ab       	std	Y+48, r25	; 0x30
    3082:	8f a7       	std	Y+47, r24	; 0x2f
    3084:	d0 96       	adiw	r26, 0x30	; 48
    3086:	8d 91       	ld	r24, X+
    3088:	9c 91       	ld	r25, X
    308a:	d1 97       	sbiw	r26, 0x31	; 49
    308c:	9a ab       	std	Y+50, r25	; 0x32
    308e:	89 ab       	std	Y+49, r24	; 0x31
    3090:	b8 01       	movw	r22, r16
    3092:	6e 5c       	subi	r22, 0xCE	; 206
    3094:	7f 4f       	sbci	r23, 0xFF	; 255
    3096:	ce 01       	movw	r24, r28
    3098:	c3 96       	adiw	r24, 0x33	; 51
    309a:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    309e:	f8 01       	movw	r30, r16
    30a0:	80 ad       	ldd	r24, Z+56	; 0x38
    30a2:	91 ad       	ldd	r25, Z+57	; 0x39
    30a4:	9a af       	std	Y+58, r25	; 0x3a
    30a6:	89 af       	std	Y+57, r24	; 0x39
    30a8:	82 ad       	ldd	r24, Z+58	; 0x3a
    30aa:	93 ad       	ldd	r25, Z+59	; 0x3b
    30ac:	9c af       	std	Y+60, r25	; 0x3c
    30ae:	8b af       	std	Y+59, r24	; 0x3b
    30b0:	be 01       	movw	r22, r28
    30b2:	6f 5f       	subi	r22, 0xFF	; 255
    30b4:	7f 4f       	sbci	r23, 0xFF	; 255
    30b6:	c6 01       	movw	r24, r12
    30b8:	f7 01       	movw	r30, r14
    30ba:	19 95       	eicall
    30bc:	18 2f       	mov	r17, r24
    30be:	ce 01       	movw	r24, r28
    30c0:	01 96       	adiw	r24, 0x01	; 1
    30c2:	0e 94 a8 20 	call	0x4150	; 0x4150 <_ZN11LCDPageItemD1Ev>
    30c6:	ab c0       	rjmp	.+342    	; 0x321e <_ZN10LinkedListI11LCDPageItemE7unshiftES0_+0x294>
    30c8:	8e e3       	ldi	r24, 0x3E	; 62
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	0e 94 36 31 	call	0x626c	; 0x626c <_Znwj>
    30d0:	7c 01       	movw	r14, r24
    30d2:	8e e3       	ldi	r24, 0x3E	; 62
    30d4:	d7 01       	movw	r26, r14
    30d6:	1d 92       	st	X+, r1
    30d8:	8a 95       	dec	r24
    30da:	e9 f7       	brne	.-6      	; 0x30d6 <_ZN10LinkedListI11LCDPageItemE7unshiftES0_+0x14c>
    30dc:	c7 01       	movw	r24, r14
    30de:	f3 d7       	rcall	.+4070   	; 0x40c6 <_ZN11LCDPageItemC1Ev>
    30e0:	f6 01       	movw	r30, r12
    30e2:	84 81       	ldd	r24, Z+4	; 0x04
    30e4:	95 81       	ldd	r25, Z+5	; 0x05
    30e6:	d7 01       	movw	r26, r14
    30e8:	dd 96       	adiw	r26, 0x3d	; 61
    30ea:	9c 93       	st	X, r25
    30ec:	8e 93       	st	-X, r24
    30ee:	dc 97       	sbiw	r26, 0x3c	; 60
    30f0:	f8 01       	movw	r30, r16
    30f2:	80 81       	ld	r24, Z
    30f4:	8c 93       	st	X, r24
    30f6:	81 81       	ldd	r24, Z+1	; 0x01
    30f8:	11 96       	adiw	r26, 0x01	; 1
    30fa:	8c 93       	st	X, r24
    30fc:	11 97       	sbiw	r26, 0x01	; 1
    30fe:	82 81       	ldd	r24, Z+2	; 0x02
    3100:	12 96       	adiw	r26, 0x02	; 2
    3102:	8c 93       	st	X, r24
    3104:	b8 01       	movw	r22, r16
    3106:	6d 5f       	subi	r22, 0xFD	; 253
    3108:	7f 4f       	sbci	r23, 0xFF	; 255
    310a:	c7 01       	movw	r24, r14
    310c:	03 96       	adiw	r24, 0x03	; 3
    310e:	0e 94 5a 38 	call	0x70b4	; 0x70b4 <_ZN6StringaSERKS_>
    3112:	f8 01       	movw	r30, r16
    3114:	81 85       	ldd	r24, Z+9	; 0x09
    3116:	92 85       	ldd	r25, Z+10	; 0x0a
    3118:	a3 85       	ldd	r26, Z+11	; 0x0b
    311a:	b4 85       	ldd	r27, Z+12	; 0x0c
    311c:	f7 01       	movw	r30, r14
    311e:	81 87       	std	Z+9, r24	; 0x09
    3120:	92 87       	std	Z+10, r25	; 0x0a
    3122:	a3 87       	std	Z+11, r26	; 0x0b
    3124:	b4 87       	std	Z+12, r27	; 0x0c
    3126:	d8 01       	movw	r26, r16
    3128:	1d 96       	adiw	r26, 0x0d	; 13
    312a:	8c 91       	ld	r24, X
    312c:	1d 97       	sbiw	r26, 0x0d	; 13
    312e:	85 87       	std	Z+13, r24	; 0x0d
    3130:	1e 96       	adiw	r26, 0x0e	; 14
    3132:	8d 91       	ld	r24, X+
    3134:	9c 91       	ld	r25, X
    3136:	1f 97       	sbiw	r26, 0x0f	; 15
    3138:	97 87       	std	Z+15, r25	; 0x0f
    313a:	86 87       	std	Z+14, r24	; 0x0e
    313c:	50 96       	adiw	r26, 0x10	; 16
    313e:	8d 91       	ld	r24, X+
    3140:	9c 91       	ld	r25, X
    3142:	51 97       	sbiw	r26, 0x11	; 17
    3144:	91 8b       	std	Z+17, r25	; 0x11
    3146:	80 8b       	std	Z+16, r24	; 0x10
    3148:	52 96       	adiw	r26, 0x12	; 18
    314a:	8d 91       	ld	r24, X+
    314c:	9c 91       	ld	r25, X
    314e:	53 97       	sbiw	r26, 0x13	; 19
    3150:	93 8b       	std	Z+19, r25	; 0x13
    3152:	82 8b       	std	Z+18, r24	; 0x12
    3154:	54 96       	adiw	r26, 0x14	; 20
    3156:	8d 91       	ld	r24, X+
    3158:	9c 91       	ld	r25, X
    315a:	55 97       	sbiw	r26, 0x15	; 21
    315c:	95 8b       	std	Z+21, r25	; 0x15
    315e:	84 8b       	std	Z+20, r24	; 0x14
    3160:	56 96       	adiw	r26, 0x16	; 22
    3162:	8d 91       	ld	r24, X+
    3164:	9c 91       	ld	r25, X
    3166:	57 97       	sbiw	r26, 0x17	; 23
    3168:	97 8b       	std	Z+23, r25	; 0x17
    316a:	86 8b       	std	Z+22, r24	; 0x16
    316c:	b8 01       	movw	r22, r16
    316e:	68 5e       	subi	r22, 0xE8	; 232
    3170:	7f 4f       	sbci	r23, 0xFF	; 255
    3172:	c7 01       	movw	r24, r14
    3174:	48 96       	adiw	r24, 0x18	; 24
    3176:	0e 94 5a 38 	call	0x70b4	; 0x70b4 <_ZN6StringaSERKS_>
    317a:	b8 01       	movw	r22, r16
    317c:	62 5e       	subi	r22, 0xE2	; 226
    317e:	7f 4f       	sbci	r23, 0xFF	; 255
    3180:	c7 01       	movw	r24, r14
    3182:	4e 96       	adiw	r24, 0x1e	; 30
    3184:	0e 94 5a 38 	call	0x70b4	; 0x70b4 <_ZN6StringaSERKS_>
    3188:	f8 01       	movw	r30, r16
    318a:	84 a1       	ldd	r24, Z+36	; 0x24
    318c:	95 a1       	ldd	r25, Z+37	; 0x25
    318e:	d7 01       	movw	r26, r14
    3190:	95 96       	adiw	r26, 0x25	; 37
    3192:	9c 93       	st	X, r25
    3194:	8e 93       	st	-X, r24
    3196:	94 97       	sbiw	r26, 0x24	; 36
    3198:	86 a1       	ldd	r24, Z+38	; 0x26
    319a:	97 a1       	ldd	r25, Z+39	; 0x27
    319c:	97 96       	adiw	r26, 0x27	; 39
    319e:	9c 93       	st	X, r25
    31a0:	8e 93       	st	-X, r24
    31a2:	96 97       	sbiw	r26, 0x26	; 38
    31a4:	80 a5       	ldd	r24, Z+40	; 0x28
    31a6:	91 a5       	ldd	r25, Z+41	; 0x29
    31a8:	99 96       	adiw	r26, 0x29	; 41
    31aa:	9c 93       	st	X, r25
    31ac:	8e 93       	st	-X, r24
    31ae:	98 97       	sbiw	r26, 0x28	; 40
    31b0:	82 a5       	ldd	r24, Z+42	; 0x2a
    31b2:	93 a5       	ldd	r25, Z+43	; 0x2b
    31b4:	9b 96       	adiw	r26, 0x2b	; 43
    31b6:	9c 93       	st	X, r25
    31b8:	8e 93       	st	-X, r24
    31ba:	9a 97       	sbiw	r26, 0x2a	; 42
    31bc:	84 a5       	ldd	r24, Z+44	; 0x2c
    31be:	95 a5       	ldd	r25, Z+45	; 0x2d
    31c0:	9d 96       	adiw	r26, 0x2d	; 45
    31c2:	9c 93       	st	X, r25
    31c4:	8e 93       	st	-X, r24
    31c6:	9c 97       	sbiw	r26, 0x2c	; 44
    31c8:	86 a5       	ldd	r24, Z+46	; 0x2e
    31ca:	97 a5       	ldd	r25, Z+47	; 0x2f
    31cc:	9f 96       	adiw	r26, 0x2f	; 47
    31ce:	9c 93       	st	X, r25
    31d0:	8e 93       	st	-X, r24
    31d2:	9e 97       	sbiw	r26, 0x2e	; 46
    31d4:	80 a9       	ldd	r24, Z+48	; 0x30
    31d6:	91 a9       	ldd	r25, Z+49	; 0x31
    31d8:	d1 96       	adiw	r26, 0x31	; 49
    31da:	9c 93       	st	X, r25
    31dc:	8e 93       	st	-X, r24
    31de:	d0 97       	sbiw	r26, 0x30	; 48
    31e0:	b8 01       	movw	r22, r16
    31e2:	6e 5c       	subi	r22, 0xCE	; 206
    31e4:	7f 4f       	sbci	r23, 0xFF	; 255
    31e6:	c7 01       	movw	r24, r14
    31e8:	c2 96       	adiw	r24, 0x32	; 50
    31ea:	0e 94 5a 38 	call	0x70b4	; 0x70b4 <_ZN6StringaSERKS_>
    31ee:	f8 01       	movw	r30, r16
    31f0:	80 ad       	ldd	r24, Z+56	; 0x38
    31f2:	91 ad       	ldd	r25, Z+57	; 0x39
    31f4:	d7 01       	movw	r26, r14
    31f6:	d9 96       	adiw	r26, 0x39	; 57
    31f8:	9c 93       	st	X, r25
    31fa:	8e 93       	st	-X, r24
    31fc:	d8 97       	sbiw	r26, 0x38	; 56
    31fe:	82 ad       	ldd	r24, Z+58	; 0x3a
    3200:	93 ad       	ldd	r25, Z+59	; 0x3b
    3202:	db 96       	adiw	r26, 0x3b	; 59
    3204:	9c 93       	st	X, r25
    3206:	8e 93       	st	-X, r24
    3208:	da 97       	sbiw	r26, 0x3a	; 58
    320a:	f6 01       	movw	r30, r12
    320c:	f5 82       	std	Z+5, r15	; 0x05
    320e:	e4 82       	std	Z+4, r14	; 0x04
    3210:	82 81       	ldd	r24, Z+2	; 0x02
    3212:	93 81       	ldd	r25, Z+3	; 0x03
    3214:	01 96       	adiw	r24, 0x01	; 1
    3216:	93 83       	std	Z+3, r25	; 0x03
    3218:	82 83       	std	Z+2, r24	; 0x02
    321a:	14 86       	std	Z+12, r1	; 0x0c
    321c:	11 e0       	ldi	r17, 0x01	; 1
    321e:	81 2f       	mov	r24, r17
    3220:	ec 96       	adiw	r28, 0x3c	; 60
    3222:	0f b6       	in	r0, 0x3f	; 63
    3224:	f8 94       	cli
    3226:	de bf       	out	0x3e, r29	; 62
    3228:	0f be       	out	0x3f, r0	; 63
    322a:	cd bf       	out	0x3d, r28	; 61
    322c:	df 91       	pop	r29
    322e:	cf 91       	pop	r28
    3230:	1f 91       	pop	r17
    3232:	0f 91       	pop	r16
    3234:	ff 90       	pop	r15
    3236:	ef 90       	pop	r14
    3238:	df 90       	pop	r13
    323a:	cf 90       	pop	r12
    323c:	08 95       	ret

0000323e <_ZN7LCDPageC1E6String>:
    323e:	ef 92       	push	r14
    3240:	ff 92       	push	r15
    3242:	0f 93       	push	r16
    3244:	1f 93       	push	r17
    3246:	cf 93       	push	r28
    3248:	df 93       	push	r29
    324a:	ec 01       	movw	r28, r24
    324c:	7b 01       	movw	r14, r22
    324e:	88 ee       	ldi	r24, 0xE8	; 232
    3250:	93 e0       	ldi	r25, 0x03	; 3
    3252:	fe 01       	movw	r30, r28
    3254:	81 93       	st	Z+, r24
    3256:	91 93       	st	Z+, r25
    3258:	8f 01       	movw	r16, r30
    325a:	6e ee       	ldi	r22, 0xEE	; 238
    325c:	74 e0       	ldi	r23, 0x04	; 4
    325e:	cf 01       	movw	r24, r30
    3260:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
    3264:	88 e6       	ldi	r24, 0x68	; 104
    3266:	93 e0       	ldi	r25, 0x03	; 3
    3268:	99 87       	std	Y+9, r25	; 0x09
    326a:	88 87       	std	Y+8, r24	; 0x08
    326c:	1d 86       	std	Y+13, r1	; 0x0d
    326e:	1c 86       	std	Y+12, r1	; 0x0c
    3270:	1f 86       	std	Y+15, r1	; 0x0f
    3272:	1e 86       	std	Y+14, r1	; 0x0e
    3274:	1b 86       	std	Y+11, r1	; 0x0b
    3276:	1a 86       	std	Y+10, r1	; 0x0a
    3278:	19 8a       	std	Y+17, r1	; 0x11
    327a:	18 8a       	std	Y+16, r1	; 0x10
    327c:	1b 8a       	std	Y+19, r1	; 0x13
    327e:	1a 8a       	std	Y+18, r1	; 0x12
    3280:	1c 8a       	std	Y+20, r1	; 0x14
    3282:	1d 8a       	std	Y+21, r1	; 0x15
    3284:	1e 8a       	std	Y+22, r1	; 0x16
    3286:	1f 8a       	std	Y+23, r1	; 0x17
    3288:	18 8e       	std	Y+24, r1	; 0x18
    328a:	b7 01       	movw	r22, r14
    328c:	c8 01       	movw	r24, r16
    328e:	0e 94 5a 38 	call	0x70b4	; 0x70b4 <_ZN6StringaSERKS_>
    3292:	df 91       	pop	r29
    3294:	cf 91       	pop	r28
    3296:	1f 91       	pop	r17
    3298:	0f 91       	pop	r16
    329a:	ff 90       	pop	r15
    329c:	ef 90       	pop	r14
    329e:	08 95       	ret

000032a0 <_ZN10LinkedListI11LCDPageItemE7getNodeEi>:
/*
	Actualy "logic" coding
*/

template<typename T>
ListNode<T>* LinkedList<T>::getNode(int index){
    32a0:	dc 01       	movw	r26, r24

	int _pos = 0;
	ListNode<T>* current = root;
    32a2:	14 96       	adiw	r26, 0x04	; 4
    32a4:	ed 91       	ld	r30, X+
    32a6:	fc 91       	ld	r31, X
    32a8:	15 97       	sbiw	r26, 0x05	; 5

	// Check if the node trying to get is
	// immediatly AFTER the previous got one
	if(isCached && lastIndexGot <= index){
    32aa:	1c 96       	adiw	r26, 0x0c	; 12
    32ac:	8c 91       	ld	r24, X
    32ae:	1c 97       	sbiw	r26, 0x0c	; 12
    32b0:	88 23       	and	r24, r24
    32b2:	61 f0       	breq	.+24     	; 0x32cc <_ZN10LinkedListI11LCDPageItemE7getNodeEi+0x2c>
    32b4:	1a 96       	adiw	r26, 0x0a	; 10
    32b6:	2d 91       	ld	r18, X+
    32b8:	3c 91       	ld	r19, X
    32ba:	1b 97       	sbiw	r26, 0x0b	; 11
    32bc:	62 17       	cp	r22, r18
    32be:	73 07       	cpc	r23, r19
    32c0:	44 f0       	brlt	.+16     	; 0x32d2 <_ZN10LinkedListI11LCDPageItemE7getNodeEi+0x32>
		_pos = lastIndexGot;
		current = lastNodeGot;
    32c2:	18 96       	adiw	r26, 0x08	; 8
    32c4:	ed 91       	ld	r30, X+
    32c6:	fc 91       	ld	r31, X
    32c8:	19 97       	sbiw	r26, 0x09	; 9
    32ca:	05 c0       	rjmp	.+10     	; 0x32d6 <_ZN10LinkedListI11LCDPageItemE7getNodeEi+0x36>
*/

template<typename T>
ListNode<T>* LinkedList<T>::getNode(int index){

	int _pos = 0;
    32cc:	20 e0       	ldi	r18, 0x00	; 0
    32ce:	30 e0       	ldi	r19, 0x00	; 0
    32d0:	02 c0       	rjmp	.+4      	; 0x32d6 <_ZN10LinkedListI11LCDPageItemE7getNodeEi+0x36>
    32d2:	20 e0       	ldi	r18, 0x00	; 0
    32d4:	30 e0       	ldi	r19, 0x00	; 0
	if(isCached && lastIndexGot <= index){
		_pos = lastIndexGot;
		current = lastNodeGot;
	}

	while(_pos < index && current){
    32d6:	26 17       	cp	r18, r22
    32d8:	37 07       	cpc	r19, r23
    32da:	64 f4       	brge	.+24     	; 0x32f4 <_ZN10LinkedListI11LCDPageItemE7getNodeEi+0x54>
    32dc:	30 97       	sbiw	r30, 0x00	; 0
    32de:	51 f0       	breq	.+20     	; 0x32f4 <_ZN10LinkedListI11LCDPageItemE7getNodeEi+0x54>
		current = current->next;
    32e0:	04 ac       	ldd	r0, Z+60	; 0x3c
    32e2:	f5 ad       	ldd	r31, Z+61	; 0x3d
    32e4:	e0 2d       	mov	r30, r0

		_pos++;
    32e6:	2f 5f       	subi	r18, 0xFF	; 255
    32e8:	3f 4f       	sbci	r19, 0xFF	; 255
	if(isCached && lastIndexGot <= index){
		_pos = lastIndexGot;
		current = lastNodeGot;
	}

	while(_pos < index && current){
    32ea:	26 17       	cp	r18, r22
    32ec:	37 07       	cpc	r19, r23
    32ee:	14 f4       	brge	.+4      	; 0x32f4 <_ZN10LinkedListI11LCDPageItemE7getNodeEi+0x54>
    32f0:	30 97       	sbiw	r30, 0x00	; 0
    32f2:	b1 f7       	brne	.-20     	; 0x32e0 <_ZN10LinkedListI11LCDPageItemE7getNodeEi+0x40>

		_pos++;
	}

	// Check if the object index got is the same as the required
	if(_pos == index){
    32f4:	26 17       	cp	r18, r22
    32f6:	37 07       	cpc	r19, r23
    32f8:	79 f4       	brne	.+30     	; 0x3318 <_ZN10LinkedListI11LCDPageItemE7getNodeEi+0x78>
		isCached = true;
    32fa:	81 e0       	ldi	r24, 0x01	; 1
    32fc:	1c 96       	adiw	r26, 0x0c	; 12
    32fe:	8c 93       	st	X, r24
    3300:	1c 97       	sbiw	r26, 0x0c	; 12
		lastIndexGot = index;
    3302:	1b 96       	adiw	r26, 0x0b	; 11
    3304:	3c 93       	st	X, r19
    3306:	2e 93       	st	-X, r18
    3308:	1a 97       	sbiw	r26, 0x0a	; 10
		lastNodeGot = current;
    330a:	19 96       	adiw	r26, 0x09	; 9
    330c:	fc 93       	st	X, r31
    330e:	ee 93       	st	-X, r30
    3310:	18 97       	sbiw	r26, 0x08	; 8

		return current;
    3312:	8e 2f       	mov	r24, r30
    3314:	9f 2f       	mov	r25, r31
    3316:	08 95       	ret
	}

	return false;
    3318:	80 e0       	ldi	r24, 0x00	; 0
    331a:	90 e0       	ldi	r25, 0x00	; 0
}
    331c:	08 95       	ret

0000331e <_ZN10LinkedListI11LCDPageItemE3getEi>:
	return ret;
}


template<typename T>
T LinkedList<T>::get(int index){
    331e:	0f 93       	push	r16
    3320:	1f 93       	push	r17
    3322:	cf 93       	push	r28
    3324:	df 93       	push	r29
    3326:	ec 01       	movw	r28, r24
    3328:	cb 01       	movw	r24, r22
	ListNode<T> *tmp = getNode(index);
    332a:	ba 01       	movw	r22, r20
    332c:	b9 df       	rcall	.-142    	; 0x32a0 <_ZN10LinkedListI11LCDPageItemE7getNodeEi>
    332e:	8c 01       	movw	r16, r24

	return (tmp ? tmp->data : T());
    3330:	00 97       	sbiw	r24, 0x00	; 0
    3332:	09 f4       	brne	.+2      	; 0x3336 <_ZN10LinkedListI11LCDPageItemE3getEi+0x18>
    3334:	69 c0       	rjmp	.+210    	; 0x3408 <_ZN10LinkedListI11LCDPageItemE3getEi+0xea>

#include "LCDMenuItem.h"
#include "LCDMenu.h"

class LCDMenuItem;
class LCDPageItem
    3336:	fc 01       	movw	r30, r24
    3338:	80 81       	ld	r24, Z
    333a:	88 83       	st	Y, r24
    333c:	81 81       	ldd	r24, Z+1	; 0x01
    333e:	89 83       	std	Y+1, r24	; 0x01
    3340:	82 81       	ldd	r24, Z+2	; 0x02
    3342:	8a 83       	std	Y+2, r24	; 0x02
    3344:	b8 01       	movw	r22, r16
    3346:	6d 5f       	subi	r22, 0xFD	; 253
    3348:	7f 4f       	sbci	r23, 0xFF	; 255
    334a:	ce 01       	movw	r24, r28
    334c:	03 96       	adiw	r24, 0x03	; 3
    334e:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    3352:	f8 01       	movw	r30, r16
    3354:	81 85       	ldd	r24, Z+9	; 0x09
    3356:	92 85       	ldd	r25, Z+10	; 0x0a
    3358:	a3 85       	ldd	r26, Z+11	; 0x0b
    335a:	b4 85       	ldd	r27, Z+12	; 0x0c
    335c:	89 87       	std	Y+9, r24	; 0x09
    335e:	9a 87       	std	Y+10, r25	; 0x0a
    3360:	ab 87       	std	Y+11, r26	; 0x0b
    3362:	bc 87       	std	Y+12, r27	; 0x0c
    3364:	85 85       	ldd	r24, Z+13	; 0x0d
    3366:	8d 87       	std	Y+13, r24	; 0x0d
    3368:	86 85       	ldd	r24, Z+14	; 0x0e
    336a:	97 85       	ldd	r25, Z+15	; 0x0f
    336c:	9f 87       	std	Y+15, r25	; 0x0f
    336e:	8e 87       	std	Y+14, r24	; 0x0e
    3370:	80 89       	ldd	r24, Z+16	; 0x10
    3372:	91 89       	ldd	r25, Z+17	; 0x11
    3374:	99 8b       	std	Y+17, r25	; 0x11
    3376:	88 8b       	std	Y+16, r24	; 0x10
    3378:	82 89       	ldd	r24, Z+18	; 0x12
    337a:	93 89       	ldd	r25, Z+19	; 0x13
    337c:	9b 8b       	std	Y+19, r25	; 0x13
    337e:	8a 8b       	std	Y+18, r24	; 0x12
    3380:	84 89       	ldd	r24, Z+20	; 0x14
    3382:	95 89       	ldd	r25, Z+21	; 0x15
    3384:	9d 8b       	std	Y+21, r25	; 0x15
    3386:	8c 8b       	std	Y+20, r24	; 0x14
    3388:	86 89       	ldd	r24, Z+22	; 0x16
    338a:	97 89       	ldd	r25, Z+23	; 0x17
    338c:	9f 8b       	std	Y+23, r25	; 0x17
    338e:	8e 8b       	std	Y+22, r24	; 0x16
    3390:	b8 01       	movw	r22, r16
    3392:	68 5e       	subi	r22, 0xE8	; 232
    3394:	7f 4f       	sbci	r23, 0xFF	; 255
    3396:	ce 01       	movw	r24, r28
    3398:	48 96       	adiw	r24, 0x18	; 24
    339a:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    339e:	b8 01       	movw	r22, r16
    33a0:	62 5e       	subi	r22, 0xE2	; 226
    33a2:	7f 4f       	sbci	r23, 0xFF	; 255
    33a4:	ce 01       	movw	r24, r28
    33a6:	4e 96       	adiw	r24, 0x1e	; 30
    33a8:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    33ac:	f8 01       	movw	r30, r16
    33ae:	84 a1       	ldd	r24, Z+36	; 0x24
    33b0:	95 a1       	ldd	r25, Z+37	; 0x25
    33b2:	9d a3       	std	Y+37, r25	; 0x25
    33b4:	8c a3       	std	Y+36, r24	; 0x24
    33b6:	86 a1       	ldd	r24, Z+38	; 0x26
    33b8:	97 a1       	ldd	r25, Z+39	; 0x27
    33ba:	9f a3       	std	Y+39, r25	; 0x27
    33bc:	8e a3       	std	Y+38, r24	; 0x26
    33be:	80 a5       	ldd	r24, Z+40	; 0x28
    33c0:	91 a5       	ldd	r25, Z+41	; 0x29
    33c2:	99 a7       	std	Y+41, r25	; 0x29
    33c4:	88 a7       	std	Y+40, r24	; 0x28
    33c6:	82 a5       	ldd	r24, Z+42	; 0x2a
    33c8:	93 a5       	ldd	r25, Z+43	; 0x2b
    33ca:	9b a7       	std	Y+43, r25	; 0x2b
    33cc:	8a a7       	std	Y+42, r24	; 0x2a
    33ce:	84 a5       	ldd	r24, Z+44	; 0x2c
    33d0:	95 a5       	ldd	r25, Z+45	; 0x2d
    33d2:	9d a7       	std	Y+45, r25	; 0x2d
    33d4:	8c a7       	std	Y+44, r24	; 0x2c
    33d6:	86 a5       	ldd	r24, Z+46	; 0x2e
    33d8:	97 a5       	ldd	r25, Z+47	; 0x2f
    33da:	9f a7       	std	Y+47, r25	; 0x2f
    33dc:	8e a7       	std	Y+46, r24	; 0x2e
    33de:	80 a9       	ldd	r24, Z+48	; 0x30
    33e0:	91 a9       	ldd	r25, Z+49	; 0x31
    33e2:	99 ab       	std	Y+49, r25	; 0x31
    33e4:	88 ab       	std	Y+48, r24	; 0x30
    33e6:	b8 01       	movw	r22, r16
    33e8:	6e 5c       	subi	r22, 0xCE	; 206
    33ea:	7f 4f       	sbci	r23, 0xFF	; 255
    33ec:	ce 01       	movw	r24, r28
    33ee:	c2 96       	adiw	r24, 0x32	; 50
    33f0:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    33f4:	f8 01       	movw	r30, r16
    33f6:	80 ad       	ldd	r24, Z+56	; 0x38
    33f8:	91 ad       	ldd	r25, Z+57	; 0x39
    33fa:	99 af       	std	Y+57, r25	; 0x39
    33fc:	88 af       	std	Y+56, r24	; 0x38
    33fe:	82 ad       	ldd	r24, Z+58	; 0x3a
    3400:	93 ad       	ldd	r25, Z+59	; 0x3b
    3402:	9b af       	std	Y+59, r25	; 0x3b
    3404:	8a af       	std	Y+58, r24	; 0x3a
    3406:	02 c0       	rjmp	.+4      	; 0x340c <_ZN10LinkedListI11LCDPageItemE3getEi+0xee>
    3408:	ce 01       	movw	r24, r28
    340a:	5d d6       	rcall	.+3258   	; 0x40c6 <_ZN11LCDPageItemC1Ev>
}
    340c:	ce 01       	movw	r24, r28
    340e:	df 91       	pop	r29
    3410:	cf 91       	pop	r28
    3412:	1f 91       	pop	r17
    3414:	0f 91       	pop	r16
    3416:	08 95       	ret

00003418 <_ZN7LCDPage7displayEP13UserInterface>:

void LCDPage::display(UserInterface *UI){
    3418:	8f 92       	push	r8
    341a:	9f 92       	push	r9
    341c:	af 92       	push	r10
    341e:	bf 92       	push	r11
    3420:	cf 92       	push	r12
    3422:	df 92       	push	r13
    3424:	ef 92       	push	r14
    3426:	ff 92       	push	r15
    3428:	0f 93       	push	r16
    342a:	1f 93       	push	r17
    342c:	cf 93       	push	r28
    342e:	df 93       	push	r29
    3430:	cd b7       	in	r28, 0x3d	; 61
    3432:	de b7       	in	r29, 0x3e	; 62
    3434:	ec 97       	sbiw	r28, 0x3c	; 60
    3436:	0f b6       	in	r0, 0x3f	; 63
    3438:	f8 94       	cli
    343a:	de bf       	out	0x3e, r29	; 62
    343c:	0f be       	out	0x3f, r0	; 63
    343e:	cd bf       	out	0x3d, r28	; 61
    3440:	7c 01       	movw	r14, r24
    3442:	8b 01       	movw	r16, r22
	if((millis() - lastUpdate)>refreshRate){
    3444:	0e 94 13 36 	call	0x6c26	; 0x6c26 <millis>
    3448:	f7 01       	movw	r30, r14
    344a:	85 88       	ldd	r8, Z+21	; 0x15
    344c:	96 88       	ldd	r9, Z+22	; 0x16
    344e:	a7 88       	ldd	r10, Z+23	; 0x17
    3450:	b0 8c       	ldd	r11, Z+24	; 0x18
    3452:	ab 01       	movw	r20, r22
    3454:	bc 01       	movw	r22, r24
    3456:	48 19       	sub	r20, r8
    3458:	59 09       	sbc	r21, r9
    345a:	6a 09       	sbc	r22, r10
    345c:	7b 09       	sbc	r23, r11
    345e:	80 81       	ld	r24, Z
    3460:	91 81       	ldd	r25, Z+1	; 0x01
    3462:	09 2e       	mov	r0, r25
    3464:	00 0c       	add	r0, r0
    3466:	aa 0b       	sbc	r26, r26
    3468:	bb 0b       	sbc	r27, r27
    346a:	84 17       	cp	r24, r20
    346c:	95 07       	cpc	r25, r21
    346e:	a6 07       	cpc	r26, r22
    3470:	b7 07       	cpc	r27, r23
    3472:	68 f5       	brcc	.+90     	; 0x34ce <_ZN7LCDPage7displayEP13UserInterface+0xb6>
		lastUpdate = millis();
    3474:	0e 94 13 36 	call	0x6c26	; 0x6c26 <millis>
    3478:	f7 01       	movw	r30, r14
    347a:	65 8b       	std	Z+21, r22	; 0x15
    347c:	76 8b       	std	Z+22, r23	; 0x16
    347e:	87 8b       	std	Z+23, r24	; 0x17
    3480:	90 8f       	std	Z+24, r25	; 0x18
		
		LiquidCrystal_I2C *LCD = UI->LCD;
    3482:	f8 01       	movw	r30, r16
    3484:	c6 84       	ldd	r12, Z+14	; 0x0e
    3486:	d7 84       	ldd	r13, Z+15	; 0x0f
		LCD->clear();
    3488:	c6 01       	movw	r24, r12
    348a:	0e 94 6b 27 	call	0x4ed6	; 0x4ed6 <_ZN3LCD5clearEv>
		for(int i=0; i<Items.size(); i++){
    348e:	57 01       	movw	r10, r14
    3490:	f8 e0       	ldi	r31, 0x08	; 8
    3492:	af 0e       	add	r10, r31
    3494:	b1 1c       	adc	r11, r1
    3496:	f7 01       	movw	r30, r14
    3498:	82 85       	ldd	r24, Z+10	; 0x0a
    349a:	93 85       	ldd	r25, Z+11	; 0x0b
    349c:	18 16       	cp	r1, r24
    349e:	19 06       	cpc	r1, r25
    34a0:	b4 f4       	brge	.+44     	; 0x34ce <_ZN7LCDPage7displayEP13UserInterface+0xb6>
    34a2:	00 e0       	ldi	r16, 0x00	; 0
    34a4:	10 e0       	ldi	r17, 0x00	; 0
			Items.get(i).print(LCD);
    34a6:	a8 01       	movw	r20, r16
    34a8:	b5 01       	movw	r22, r10
    34aa:	ce 01       	movw	r24, r28
    34ac:	01 96       	adiw	r24, 0x01	; 1
    34ae:	37 df       	rcall	.-402    	; 0x331e <_ZN10LinkedListI11LCDPageItemE3getEi>
    34b0:	b6 01       	movw	r22, r12
    34b2:	ce 01       	movw	r24, r28
    34b4:	01 96       	adiw	r24, 0x01	; 1
    34b6:	22 d7       	rcall	.+3652   	; 0x42fc <_ZN11LCDPageItem5printEP17LiquidCrystal_I2C>
    34b8:	ce 01       	movw	r24, r28
    34ba:	01 96       	adiw	r24, 0x01	; 1
    34bc:	49 d6       	rcall	.+3218   	; 0x4150 <_ZN11LCDPageItemD1Ev>
	if((millis() - lastUpdate)>refreshRate){
		lastUpdate = millis();
		
		LiquidCrystal_I2C *LCD = UI->LCD;
		LCD->clear();
		for(int i=0; i<Items.size(); i++){
    34be:	0f 5f       	subi	r16, 0xFF	; 255
    34c0:	1f 4f       	sbci	r17, 0xFF	; 255
    34c2:	f7 01       	movw	r30, r14
    34c4:	22 85       	ldd	r18, Z+10	; 0x0a
    34c6:	33 85       	ldd	r19, Z+11	; 0x0b
    34c8:	02 17       	cp	r16, r18
    34ca:	13 07       	cpc	r17, r19
    34cc:	64 f3       	brlt	.-40     	; 0x34a6 <_ZN7LCDPage7displayEP13UserInterface+0x8e>
			Items.get(i).print(LCD);
		}
	}
    34ce:	ec 96       	adiw	r28, 0x3c	; 60
    34d0:	0f b6       	in	r0, 0x3f	; 63
    34d2:	f8 94       	cli
    34d4:	de bf       	out	0x3e, r29	; 62
    34d6:	0f be       	out	0x3f, r0	; 63
    34d8:	cd bf       	out	0x3d, r28	; 61
    34da:	df 91       	pop	r29
    34dc:	cf 91       	pop	r28
    34de:	1f 91       	pop	r17
    34e0:	0f 91       	pop	r16
    34e2:	ff 90       	pop	r15
    34e4:	ef 90       	pop	r14
    34e6:	df 90       	pop	r13
    34e8:	cf 90       	pop	r12
    34ea:	bf 90       	pop	r11
    34ec:	af 90       	pop	r10
    34ee:	9f 90       	pop	r9
    34f0:	8f 90       	pop	r8
    34f2:	08 95       	ret

000034f4 <_ZN10LinkedListI11LCDPageItemE3popEv>:
	getNode(index)->data = _t;
	return true;
}

template<typename T>
T LinkedList<T>::pop(){
    34f4:	af 92       	push	r10
    34f6:	bf 92       	push	r11
    34f8:	cf 92       	push	r12
    34fa:	df 92       	push	r13
    34fc:	ef 92       	push	r14
    34fe:	ff 92       	push	r15
    3500:	0f 93       	push	r16
    3502:	1f 93       	push	r17
    3504:	cf 93       	push	r28
    3506:	df 93       	push	r29
    3508:	cd b7       	in	r28, 0x3d	; 61
    350a:	de b7       	in	r29, 0x3e	; 62
    350c:	ec 97       	sbiw	r28, 0x3c	; 60
    350e:	0f b6       	in	r0, 0x3f	; 63
    3510:	f8 94       	cli
    3512:	de bf       	out	0x3e, r29	; 62
    3514:	0f be       	out	0x3f, r0	; 63
    3516:	cd bf       	out	0x3d, r28	; 61
    3518:	8c 01       	movw	r16, r24
    351a:	6b 01       	movw	r12, r22
	if(_size <= 0)
    351c:	fb 01       	movw	r30, r22
    351e:	62 81       	ldd	r22, Z+2	; 0x02
    3520:	73 81       	ldd	r23, Z+3	; 0x03
    3522:	16 16       	cp	r1, r22
    3524:	17 06       	cpc	r1, r23
    3526:	14 f0       	brlt	.+4      	; 0x352c <_ZN10LinkedListI11LCDPageItemE3popEv+0x38>
		return T();
    3528:	ce d5       	rcall	.+2972   	; 0x40c6 <_ZN11LCDPageItemC1Ev>
    352a:	e0 c1       	rjmp	.+960    	; 0x38ec <_ZN10LinkedListI11LCDPageItemE3popEv+0x3f8>
	
	isCached = false;
    352c:	f6 01       	movw	r30, r12
    352e:	14 86       	std	Z+12, r1	; 0x0c

	if(_size >= 2){
    3530:	62 30       	cpi	r22, 0x02	; 2
    3532:	71 05       	cpc	r23, r1
    3534:	0c f4       	brge	.+2      	; 0x3538 <_ZN10LinkedListI11LCDPageItemE3popEv+0x44>
    3536:	f2 c0       	rjmp	.+484    	; 0x371c <_ZN10LinkedListI11LCDPageItemE3popEv+0x228>
		ListNode<T> *tmp = getNode(_size - 2);
    3538:	62 50       	subi	r22, 0x02	; 2
    353a:	71 09       	sbc	r23, r1
    353c:	c6 01       	movw	r24, r12
    353e:	b0 de       	rcall	.-672    	; 0x32a0 <_ZN10LinkedListI11LCDPageItemE7getNodeEi>
    3540:	5c 01       	movw	r10, r24
		T ret = tmp->next->data;
    3542:	fc 01       	movw	r30, r24
    3544:	e4 ac       	ldd	r14, Z+60	; 0x3c
    3546:	f5 ac       	ldd	r15, Z+61	; 0x3d
    3548:	f7 01       	movw	r30, r14
    354a:	80 81       	ld	r24, Z
    354c:	89 83       	std	Y+1, r24	; 0x01
    354e:	81 81       	ldd	r24, Z+1	; 0x01
    3550:	8a 83       	std	Y+2, r24	; 0x02
    3552:	82 81       	ldd	r24, Z+2	; 0x02
    3554:	8b 83       	std	Y+3, r24	; 0x03
    3556:	b7 01       	movw	r22, r14
    3558:	6d 5f       	subi	r22, 0xFD	; 253
    355a:	7f 4f       	sbci	r23, 0xFF	; 255
    355c:	ce 01       	movw	r24, r28
    355e:	04 96       	adiw	r24, 0x04	; 4
    3560:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    3564:	f7 01       	movw	r30, r14
    3566:	81 85       	ldd	r24, Z+9	; 0x09
    3568:	92 85       	ldd	r25, Z+10	; 0x0a
    356a:	a3 85       	ldd	r26, Z+11	; 0x0b
    356c:	b4 85       	ldd	r27, Z+12	; 0x0c
    356e:	8a 87       	std	Y+10, r24	; 0x0a
    3570:	9b 87       	std	Y+11, r25	; 0x0b
    3572:	ac 87       	std	Y+12, r26	; 0x0c
    3574:	bd 87       	std	Y+13, r27	; 0x0d
    3576:	85 85       	ldd	r24, Z+13	; 0x0d
    3578:	8e 87       	std	Y+14, r24	; 0x0e
    357a:	86 85       	ldd	r24, Z+14	; 0x0e
    357c:	97 85       	ldd	r25, Z+15	; 0x0f
    357e:	98 8b       	std	Y+16, r25	; 0x10
    3580:	8f 87       	std	Y+15, r24	; 0x0f
    3582:	80 89       	ldd	r24, Z+16	; 0x10
    3584:	91 89       	ldd	r25, Z+17	; 0x11
    3586:	9a 8b       	std	Y+18, r25	; 0x12
    3588:	89 8b       	std	Y+17, r24	; 0x11
    358a:	82 89       	ldd	r24, Z+18	; 0x12
    358c:	93 89       	ldd	r25, Z+19	; 0x13
    358e:	9c 8b       	std	Y+20, r25	; 0x14
    3590:	8b 8b       	std	Y+19, r24	; 0x13
    3592:	84 89       	ldd	r24, Z+20	; 0x14
    3594:	95 89       	ldd	r25, Z+21	; 0x15
    3596:	9e 8b       	std	Y+22, r25	; 0x16
    3598:	8d 8b       	std	Y+21, r24	; 0x15
    359a:	86 89       	ldd	r24, Z+22	; 0x16
    359c:	97 89       	ldd	r25, Z+23	; 0x17
    359e:	98 8f       	std	Y+24, r25	; 0x18
    35a0:	8f 8b       	std	Y+23, r24	; 0x17
    35a2:	b7 01       	movw	r22, r14
    35a4:	68 5e       	subi	r22, 0xE8	; 232
    35a6:	7f 4f       	sbci	r23, 0xFF	; 255
    35a8:	ce 01       	movw	r24, r28
    35aa:	49 96       	adiw	r24, 0x19	; 25
    35ac:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    35b0:	b7 01       	movw	r22, r14
    35b2:	62 5e       	subi	r22, 0xE2	; 226
    35b4:	7f 4f       	sbci	r23, 0xFF	; 255
    35b6:	ce 01       	movw	r24, r28
    35b8:	4f 96       	adiw	r24, 0x1f	; 31
    35ba:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    35be:	f7 01       	movw	r30, r14
    35c0:	84 a1       	ldd	r24, Z+36	; 0x24
    35c2:	95 a1       	ldd	r25, Z+37	; 0x25
    35c4:	9e a3       	std	Y+38, r25	; 0x26
    35c6:	8d a3       	std	Y+37, r24	; 0x25
    35c8:	86 a1       	ldd	r24, Z+38	; 0x26
    35ca:	97 a1       	ldd	r25, Z+39	; 0x27
    35cc:	98 a7       	std	Y+40, r25	; 0x28
    35ce:	8f a3       	std	Y+39, r24	; 0x27
    35d0:	80 a5       	ldd	r24, Z+40	; 0x28
    35d2:	91 a5       	ldd	r25, Z+41	; 0x29
    35d4:	9a a7       	std	Y+42, r25	; 0x2a
    35d6:	89 a7       	std	Y+41, r24	; 0x29
    35d8:	82 a5       	ldd	r24, Z+42	; 0x2a
    35da:	93 a5       	ldd	r25, Z+43	; 0x2b
    35dc:	9c a7       	std	Y+44, r25	; 0x2c
    35de:	8b a7       	std	Y+43, r24	; 0x2b
    35e0:	84 a5       	ldd	r24, Z+44	; 0x2c
    35e2:	95 a5       	ldd	r25, Z+45	; 0x2d
    35e4:	9e a7       	std	Y+46, r25	; 0x2e
    35e6:	8d a7       	std	Y+45, r24	; 0x2d
    35e8:	86 a5       	ldd	r24, Z+46	; 0x2e
    35ea:	97 a5       	ldd	r25, Z+47	; 0x2f
    35ec:	98 ab       	std	Y+48, r25	; 0x30
    35ee:	8f a7       	std	Y+47, r24	; 0x2f
    35f0:	80 a9       	ldd	r24, Z+48	; 0x30
    35f2:	91 a9       	ldd	r25, Z+49	; 0x31
    35f4:	9a ab       	std	Y+50, r25	; 0x32
    35f6:	89 ab       	std	Y+49, r24	; 0x31
    35f8:	b7 01       	movw	r22, r14
    35fa:	6e 5c       	subi	r22, 0xCE	; 206
    35fc:	7f 4f       	sbci	r23, 0xFF	; 255
    35fe:	ce 01       	movw	r24, r28
    3600:	c3 96       	adiw	r24, 0x33	; 51
    3602:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    3606:	f7 01       	movw	r30, r14
    3608:	80 ad       	ldd	r24, Z+56	; 0x38
    360a:	91 ad       	ldd	r25, Z+57	; 0x39
    360c:	9a af       	std	Y+58, r25	; 0x3a
    360e:	89 af       	std	Y+57, r24	; 0x39
    3610:	82 ad       	ldd	r24, Z+58	; 0x3a
    3612:	93 ad       	ldd	r25, Z+59	; 0x3b
    3614:	9c af       	std	Y+60, r25	; 0x3c
    3616:	8b af       	std	Y+59, r24	; 0x3b
		delete(tmp->next);
    3618:	f5 01       	movw	r30, r10
    361a:	e4 ac       	ldd	r14, Z+60	; 0x3c
    361c:	f5 ac       	ldd	r15, Z+61	; 0x3d
    361e:	e1 14       	cp	r14, r1
    3620:	f1 04       	cpc	r15, r1
    3622:	29 f0       	breq	.+10     	; 0x362e <_ZN10LinkedListI11LCDPageItemE3popEv+0x13a>

#ifndef LinkedList_h
#define LinkedList_h

template<class T>
struct ListNode
    3624:	c7 01       	movw	r24, r14
    3626:	94 d5       	rcall	.+2856   	; 0x4150 <_ZN11LCDPageItemD1Ev>
	isCached = false;

	if(_size >= 2){
		ListNode<T> *tmp = getNode(_size - 2);
		T ret = tmp->next->data;
		delete(tmp->next);
    3628:	c7 01       	movw	r24, r14
    362a:	0e 94 39 31 	call	0x6272	; 0x6272 <_ZdlPv>
		tmp->next = false;
    362e:	f5 01       	movw	r30, r10
    3630:	15 ae       	std	Z+61, r1	; 0x3d
    3632:	14 ae       	std	Z+60, r1	; 0x3c
		last = tmp;
    3634:	f6 01       	movw	r30, r12
    3636:	b7 82       	std	Z+7, r11	; 0x07
    3638:	a6 82       	std	Z+6, r10	; 0x06
		_size--;
    363a:	82 81       	ldd	r24, Z+2	; 0x02
    363c:	93 81       	ldd	r25, Z+3	; 0x03
    363e:	01 97       	sbiw	r24, 0x01	; 1
    3640:	93 83       	std	Z+3, r25	; 0x03
    3642:	82 83       	std	Z+2, r24	; 0x02
    3644:	89 81       	ldd	r24, Y+1	; 0x01
    3646:	f8 01       	movw	r30, r16
    3648:	80 83       	st	Z, r24
    364a:	8a 81       	ldd	r24, Y+2	; 0x02
    364c:	81 83       	std	Z+1, r24	; 0x01
    364e:	8b 81       	ldd	r24, Y+3	; 0x03
    3650:	82 83       	std	Z+2, r24	; 0x02
    3652:	be 01       	movw	r22, r28
    3654:	6c 5f       	subi	r22, 0xFC	; 252
    3656:	7f 4f       	sbci	r23, 0xFF	; 255
    3658:	c8 01       	movw	r24, r16
    365a:	03 96       	adiw	r24, 0x03	; 3
    365c:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    3660:	8a 85       	ldd	r24, Y+10	; 0x0a
    3662:	9b 85       	ldd	r25, Y+11	; 0x0b
    3664:	ac 85       	ldd	r26, Y+12	; 0x0c
    3666:	bd 85       	ldd	r27, Y+13	; 0x0d
    3668:	f8 01       	movw	r30, r16
    366a:	81 87       	std	Z+9, r24	; 0x09
    366c:	92 87       	std	Z+10, r25	; 0x0a
    366e:	a3 87       	std	Z+11, r26	; 0x0b
    3670:	b4 87       	std	Z+12, r27	; 0x0c
    3672:	8e 85       	ldd	r24, Y+14	; 0x0e
    3674:	85 87       	std	Z+13, r24	; 0x0d
    3676:	8f 85       	ldd	r24, Y+15	; 0x0f
    3678:	98 89       	ldd	r25, Y+16	; 0x10
    367a:	97 87       	std	Z+15, r25	; 0x0f
    367c:	86 87       	std	Z+14, r24	; 0x0e
    367e:	89 89       	ldd	r24, Y+17	; 0x11
    3680:	9a 89       	ldd	r25, Y+18	; 0x12
    3682:	91 8b       	std	Z+17, r25	; 0x11
    3684:	80 8b       	std	Z+16, r24	; 0x10
    3686:	8b 89       	ldd	r24, Y+19	; 0x13
    3688:	9c 89       	ldd	r25, Y+20	; 0x14
    368a:	93 8b       	std	Z+19, r25	; 0x13
    368c:	82 8b       	std	Z+18, r24	; 0x12
    368e:	8d 89       	ldd	r24, Y+21	; 0x15
    3690:	9e 89       	ldd	r25, Y+22	; 0x16
    3692:	95 8b       	std	Z+21, r25	; 0x15
    3694:	84 8b       	std	Z+20, r24	; 0x14
    3696:	8f 89       	ldd	r24, Y+23	; 0x17
    3698:	98 8d       	ldd	r25, Y+24	; 0x18
    369a:	97 8b       	std	Z+23, r25	; 0x17
    369c:	86 8b       	std	Z+22, r24	; 0x16
    369e:	be 01       	movw	r22, r28
    36a0:	67 5e       	subi	r22, 0xE7	; 231
    36a2:	7f 4f       	sbci	r23, 0xFF	; 255
    36a4:	c8 01       	movw	r24, r16
    36a6:	48 96       	adiw	r24, 0x18	; 24
    36a8:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    36ac:	be 01       	movw	r22, r28
    36ae:	61 5e       	subi	r22, 0xE1	; 225
    36b0:	7f 4f       	sbci	r23, 0xFF	; 255
    36b2:	c8 01       	movw	r24, r16
    36b4:	4e 96       	adiw	r24, 0x1e	; 30
    36b6:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    36ba:	8d a1       	ldd	r24, Y+37	; 0x25
    36bc:	9e a1       	ldd	r25, Y+38	; 0x26
    36be:	f8 01       	movw	r30, r16
    36c0:	95 a3       	std	Z+37, r25	; 0x25
    36c2:	84 a3       	std	Z+36, r24	; 0x24
    36c4:	8f a1       	ldd	r24, Y+39	; 0x27
    36c6:	98 a5       	ldd	r25, Y+40	; 0x28
    36c8:	97 a3       	std	Z+39, r25	; 0x27
    36ca:	86 a3       	std	Z+38, r24	; 0x26
    36cc:	89 a5       	ldd	r24, Y+41	; 0x29
    36ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    36d0:	91 a7       	std	Z+41, r25	; 0x29
    36d2:	80 a7       	std	Z+40, r24	; 0x28
    36d4:	8b a5       	ldd	r24, Y+43	; 0x2b
    36d6:	9c a5       	ldd	r25, Y+44	; 0x2c
    36d8:	93 a7       	std	Z+43, r25	; 0x2b
    36da:	82 a7       	std	Z+42, r24	; 0x2a
    36dc:	8d a5       	ldd	r24, Y+45	; 0x2d
    36de:	9e a5       	ldd	r25, Y+46	; 0x2e
    36e0:	95 a7       	std	Z+45, r25	; 0x2d
    36e2:	84 a7       	std	Z+44, r24	; 0x2c
    36e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    36e6:	98 a9       	ldd	r25, Y+48	; 0x30
    36e8:	97 a7       	std	Z+47, r25	; 0x2f
    36ea:	86 a7       	std	Z+46, r24	; 0x2e
    36ec:	89 a9       	ldd	r24, Y+49	; 0x31
    36ee:	9a a9       	ldd	r25, Y+50	; 0x32
    36f0:	91 ab       	std	Z+49, r25	; 0x31
    36f2:	80 ab       	std	Z+48, r24	; 0x30
    36f4:	be 01       	movw	r22, r28
    36f6:	6d 5c       	subi	r22, 0xCD	; 205
    36f8:	7f 4f       	sbci	r23, 0xFF	; 255
    36fa:	c8 01       	movw	r24, r16
    36fc:	c2 96       	adiw	r24, 0x32	; 50
    36fe:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    3702:	89 ad       	ldd	r24, Y+57	; 0x39
    3704:	9a ad       	ldd	r25, Y+58	; 0x3a
    3706:	f8 01       	movw	r30, r16
    3708:	91 af       	std	Z+57, r25	; 0x39
    370a:	80 af       	std	Z+56, r24	; 0x38
    370c:	8b ad       	ldd	r24, Y+59	; 0x3b
    370e:	9c ad       	ldd	r25, Y+60	; 0x3c
    3710:	93 af       	std	Z+59, r25	; 0x3b
    3712:	82 af       	std	Z+58, r24	; 0x3a
		return ret;
    3714:	ce 01       	movw	r24, r28
    3716:	01 96       	adiw	r24, 0x01	; 1
    3718:	1b d5       	rcall	.+2614   	; 0x4150 <_ZN11LCDPageItemD1Ev>
    371a:	e8 c0       	rjmp	.+464    	; 0x38ec <_ZN10LinkedListI11LCDPageItemE3popEv+0x3f8>
	}else{
		// Only one element left on the list
		T ret = root->data;
    371c:	f6 01       	movw	r30, r12
    371e:	e4 80       	ldd	r14, Z+4	; 0x04
    3720:	f5 80       	ldd	r15, Z+5	; 0x05
    3722:	f7 01       	movw	r30, r14
    3724:	80 81       	ld	r24, Z
    3726:	89 83       	std	Y+1, r24	; 0x01
    3728:	81 81       	ldd	r24, Z+1	; 0x01
    372a:	8a 83       	std	Y+2, r24	; 0x02
    372c:	82 81       	ldd	r24, Z+2	; 0x02
    372e:	8b 83       	std	Y+3, r24	; 0x03
    3730:	b7 01       	movw	r22, r14
    3732:	6d 5f       	subi	r22, 0xFD	; 253
    3734:	7f 4f       	sbci	r23, 0xFF	; 255
    3736:	ce 01       	movw	r24, r28
    3738:	04 96       	adiw	r24, 0x04	; 4
    373a:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    373e:	f7 01       	movw	r30, r14
    3740:	81 85       	ldd	r24, Z+9	; 0x09
    3742:	92 85       	ldd	r25, Z+10	; 0x0a
    3744:	a3 85       	ldd	r26, Z+11	; 0x0b
    3746:	b4 85       	ldd	r27, Z+12	; 0x0c
    3748:	8a 87       	std	Y+10, r24	; 0x0a
    374a:	9b 87       	std	Y+11, r25	; 0x0b
    374c:	ac 87       	std	Y+12, r26	; 0x0c
    374e:	bd 87       	std	Y+13, r27	; 0x0d
    3750:	85 85       	ldd	r24, Z+13	; 0x0d
    3752:	8e 87       	std	Y+14, r24	; 0x0e
    3754:	86 85       	ldd	r24, Z+14	; 0x0e
    3756:	97 85       	ldd	r25, Z+15	; 0x0f
    3758:	98 8b       	std	Y+16, r25	; 0x10
    375a:	8f 87       	std	Y+15, r24	; 0x0f
    375c:	80 89       	ldd	r24, Z+16	; 0x10
    375e:	91 89       	ldd	r25, Z+17	; 0x11
    3760:	9a 8b       	std	Y+18, r25	; 0x12
    3762:	89 8b       	std	Y+17, r24	; 0x11
    3764:	82 89       	ldd	r24, Z+18	; 0x12
    3766:	93 89       	ldd	r25, Z+19	; 0x13
    3768:	9c 8b       	std	Y+20, r25	; 0x14
    376a:	8b 8b       	std	Y+19, r24	; 0x13
    376c:	84 89       	ldd	r24, Z+20	; 0x14
    376e:	95 89       	ldd	r25, Z+21	; 0x15
    3770:	9e 8b       	std	Y+22, r25	; 0x16
    3772:	8d 8b       	std	Y+21, r24	; 0x15
    3774:	86 89       	ldd	r24, Z+22	; 0x16
    3776:	97 89       	ldd	r25, Z+23	; 0x17
    3778:	98 8f       	std	Y+24, r25	; 0x18
    377a:	8f 8b       	std	Y+23, r24	; 0x17
    377c:	b7 01       	movw	r22, r14
    377e:	68 5e       	subi	r22, 0xE8	; 232
    3780:	7f 4f       	sbci	r23, 0xFF	; 255
    3782:	ce 01       	movw	r24, r28
    3784:	49 96       	adiw	r24, 0x19	; 25
    3786:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    378a:	b7 01       	movw	r22, r14
    378c:	62 5e       	subi	r22, 0xE2	; 226
    378e:	7f 4f       	sbci	r23, 0xFF	; 255
    3790:	ce 01       	movw	r24, r28
    3792:	4f 96       	adiw	r24, 0x1f	; 31
    3794:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    3798:	f7 01       	movw	r30, r14
    379a:	84 a1       	ldd	r24, Z+36	; 0x24
    379c:	95 a1       	ldd	r25, Z+37	; 0x25
    379e:	9e a3       	std	Y+38, r25	; 0x26
    37a0:	8d a3       	std	Y+37, r24	; 0x25
    37a2:	86 a1       	ldd	r24, Z+38	; 0x26
    37a4:	97 a1       	ldd	r25, Z+39	; 0x27
    37a6:	98 a7       	std	Y+40, r25	; 0x28
    37a8:	8f a3       	std	Y+39, r24	; 0x27
    37aa:	80 a5       	ldd	r24, Z+40	; 0x28
    37ac:	91 a5       	ldd	r25, Z+41	; 0x29
    37ae:	9a a7       	std	Y+42, r25	; 0x2a
    37b0:	89 a7       	std	Y+41, r24	; 0x29
    37b2:	82 a5       	ldd	r24, Z+42	; 0x2a
    37b4:	93 a5       	ldd	r25, Z+43	; 0x2b
    37b6:	9c a7       	std	Y+44, r25	; 0x2c
    37b8:	8b a7       	std	Y+43, r24	; 0x2b
    37ba:	84 a5       	ldd	r24, Z+44	; 0x2c
    37bc:	95 a5       	ldd	r25, Z+45	; 0x2d
    37be:	9e a7       	std	Y+46, r25	; 0x2e
    37c0:	8d a7       	std	Y+45, r24	; 0x2d
    37c2:	86 a5       	ldd	r24, Z+46	; 0x2e
    37c4:	97 a5       	ldd	r25, Z+47	; 0x2f
    37c6:	98 ab       	std	Y+48, r25	; 0x30
    37c8:	8f a7       	std	Y+47, r24	; 0x2f
    37ca:	80 a9       	ldd	r24, Z+48	; 0x30
    37cc:	91 a9       	ldd	r25, Z+49	; 0x31
    37ce:	9a ab       	std	Y+50, r25	; 0x32
    37d0:	89 ab       	std	Y+49, r24	; 0x31
    37d2:	b7 01       	movw	r22, r14
    37d4:	6e 5c       	subi	r22, 0xCE	; 206
    37d6:	7f 4f       	sbci	r23, 0xFF	; 255
    37d8:	ce 01       	movw	r24, r28
    37da:	c3 96       	adiw	r24, 0x33	; 51
    37dc:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    37e0:	f7 01       	movw	r30, r14
    37e2:	80 ad       	ldd	r24, Z+56	; 0x38
    37e4:	91 ad       	ldd	r25, Z+57	; 0x39
    37e6:	9a af       	std	Y+58, r25	; 0x3a
    37e8:	89 af       	std	Y+57, r24	; 0x39
    37ea:	82 ad       	ldd	r24, Z+58	; 0x3a
    37ec:	93 ad       	ldd	r25, Z+59	; 0x3b
    37ee:	9c af       	std	Y+60, r25	; 0x3c
    37f0:	8b af       	std	Y+59, r24	; 0x3b
		delete(root);
    37f2:	f6 01       	movw	r30, r12
    37f4:	e4 80       	ldd	r14, Z+4	; 0x04
    37f6:	f5 80       	ldd	r15, Z+5	; 0x05
    37f8:	e1 14       	cp	r14, r1
    37fa:	f1 04       	cpc	r15, r1
    37fc:	29 f0       	breq	.+10     	; 0x3808 <_ZN10LinkedListI11LCDPageItemE3popEv+0x314>

#ifndef LinkedList_h
#define LinkedList_h

template<class T>
struct ListNode
    37fe:	c7 01       	movw	r24, r14
    3800:	a7 d4       	rcall	.+2382   	; 0x4150 <_ZN11LCDPageItemD1Ev>
		_size--;
		return ret;
	}else{
		// Only one element left on the list
		T ret = root->data;
		delete(root);
    3802:	c7 01       	movw	r24, r14
    3804:	0e 94 39 31 	call	0x6272	; 0x6272 <_ZdlPv>
		root = false;
    3808:	f6 01       	movw	r30, r12
    380a:	15 82       	std	Z+5, r1	; 0x05
    380c:	14 82       	std	Z+4, r1	; 0x04
		last = false;
    380e:	17 82       	std	Z+7, r1	; 0x07
    3810:	16 82       	std	Z+6, r1	; 0x06
		_size = 0;
    3812:	13 82       	std	Z+3, r1	; 0x03
    3814:	12 82       	std	Z+2, r1	; 0x02
    3816:	89 81       	ldd	r24, Y+1	; 0x01
    3818:	f8 01       	movw	r30, r16
    381a:	80 83       	st	Z, r24
    381c:	8a 81       	ldd	r24, Y+2	; 0x02
    381e:	81 83       	std	Z+1, r24	; 0x01
    3820:	8b 81       	ldd	r24, Y+3	; 0x03
    3822:	82 83       	std	Z+2, r24	; 0x02
    3824:	be 01       	movw	r22, r28
    3826:	6c 5f       	subi	r22, 0xFC	; 252
    3828:	7f 4f       	sbci	r23, 0xFF	; 255
    382a:	c8 01       	movw	r24, r16
    382c:	03 96       	adiw	r24, 0x03	; 3
    382e:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    3832:	8a 85       	ldd	r24, Y+10	; 0x0a
    3834:	9b 85       	ldd	r25, Y+11	; 0x0b
    3836:	ac 85       	ldd	r26, Y+12	; 0x0c
    3838:	bd 85       	ldd	r27, Y+13	; 0x0d
    383a:	f8 01       	movw	r30, r16
    383c:	81 87       	std	Z+9, r24	; 0x09
    383e:	92 87       	std	Z+10, r25	; 0x0a
    3840:	a3 87       	std	Z+11, r26	; 0x0b
    3842:	b4 87       	std	Z+12, r27	; 0x0c
    3844:	8e 85       	ldd	r24, Y+14	; 0x0e
    3846:	85 87       	std	Z+13, r24	; 0x0d
    3848:	8f 85       	ldd	r24, Y+15	; 0x0f
    384a:	98 89       	ldd	r25, Y+16	; 0x10
    384c:	97 87       	std	Z+15, r25	; 0x0f
    384e:	86 87       	std	Z+14, r24	; 0x0e
    3850:	89 89       	ldd	r24, Y+17	; 0x11
    3852:	9a 89       	ldd	r25, Y+18	; 0x12
    3854:	91 8b       	std	Z+17, r25	; 0x11
    3856:	80 8b       	std	Z+16, r24	; 0x10
    3858:	8b 89       	ldd	r24, Y+19	; 0x13
    385a:	9c 89       	ldd	r25, Y+20	; 0x14
    385c:	93 8b       	std	Z+19, r25	; 0x13
    385e:	82 8b       	std	Z+18, r24	; 0x12
    3860:	8d 89       	ldd	r24, Y+21	; 0x15
    3862:	9e 89       	ldd	r25, Y+22	; 0x16
    3864:	95 8b       	std	Z+21, r25	; 0x15
    3866:	84 8b       	std	Z+20, r24	; 0x14
    3868:	8f 89       	ldd	r24, Y+23	; 0x17
    386a:	98 8d       	ldd	r25, Y+24	; 0x18
    386c:	97 8b       	std	Z+23, r25	; 0x17
    386e:	86 8b       	std	Z+22, r24	; 0x16
    3870:	be 01       	movw	r22, r28
    3872:	67 5e       	subi	r22, 0xE7	; 231
    3874:	7f 4f       	sbci	r23, 0xFF	; 255
    3876:	c8 01       	movw	r24, r16
    3878:	48 96       	adiw	r24, 0x18	; 24
    387a:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    387e:	be 01       	movw	r22, r28
    3880:	61 5e       	subi	r22, 0xE1	; 225
    3882:	7f 4f       	sbci	r23, 0xFF	; 255
    3884:	c8 01       	movw	r24, r16
    3886:	4e 96       	adiw	r24, 0x1e	; 30
    3888:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    388c:	8d a1       	ldd	r24, Y+37	; 0x25
    388e:	9e a1       	ldd	r25, Y+38	; 0x26
    3890:	f8 01       	movw	r30, r16
    3892:	95 a3       	std	Z+37, r25	; 0x25
    3894:	84 a3       	std	Z+36, r24	; 0x24
    3896:	8f a1       	ldd	r24, Y+39	; 0x27
    3898:	98 a5       	ldd	r25, Y+40	; 0x28
    389a:	97 a3       	std	Z+39, r25	; 0x27
    389c:	86 a3       	std	Z+38, r24	; 0x26
    389e:	89 a5       	ldd	r24, Y+41	; 0x29
    38a0:	9a a5       	ldd	r25, Y+42	; 0x2a
    38a2:	91 a7       	std	Z+41, r25	; 0x29
    38a4:	80 a7       	std	Z+40, r24	; 0x28
    38a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    38a8:	9c a5       	ldd	r25, Y+44	; 0x2c
    38aa:	93 a7       	std	Z+43, r25	; 0x2b
    38ac:	82 a7       	std	Z+42, r24	; 0x2a
    38ae:	8d a5       	ldd	r24, Y+45	; 0x2d
    38b0:	9e a5       	ldd	r25, Y+46	; 0x2e
    38b2:	95 a7       	std	Z+45, r25	; 0x2d
    38b4:	84 a7       	std	Z+44, r24	; 0x2c
    38b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    38b8:	98 a9       	ldd	r25, Y+48	; 0x30
    38ba:	97 a7       	std	Z+47, r25	; 0x2f
    38bc:	86 a7       	std	Z+46, r24	; 0x2e
    38be:	89 a9       	ldd	r24, Y+49	; 0x31
    38c0:	9a a9       	ldd	r25, Y+50	; 0x32
    38c2:	91 ab       	std	Z+49, r25	; 0x31
    38c4:	80 ab       	std	Z+48, r24	; 0x30
    38c6:	be 01       	movw	r22, r28
    38c8:	6d 5c       	subi	r22, 0xCD	; 205
    38ca:	7f 4f       	sbci	r23, 0xFF	; 255
    38cc:	c8 01       	movw	r24, r16
    38ce:	c2 96       	adiw	r24, 0x32	; 50
    38d0:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    38d4:	89 ad       	ldd	r24, Y+57	; 0x39
    38d6:	9a ad       	ldd	r25, Y+58	; 0x3a
    38d8:	f8 01       	movw	r30, r16
    38da:	91 af       	std	Z+57, r25	; 0x39
    38dc:	80 af       	std	Z+56, r24	; 0x38
    38de:	8b ad       	ldd	r24, Y+59	; 0x3b
    38e0:	9c ad       	ldd	r25, Y+60	; 0x3c
    38e2:	93 af       	std	Z+59, r25	; 0x3b
    38e4:	82 af       	std	Z+58, r24	; 0x3a
		return ret;
    38e6:	ce 01       	movw	r24, r28
    38e8:	01 96       	adiw	r24, 0x01	; 1
    38ea:	32 d4       	rcall	.+2148   	; 0x4150 <_ZN11LCDPageItemD1Ev>
	}
}
    38ec:	c8 01       	movw	r24, r16
    38ee:	ec 96       	adiw	r28, 0x3c	; 60
    38f0:	0f b6       	in	r0, 0x3f	; 63
    38f2:	f8 94       	cli
    38f4:	de bf       	out	0x3e, r29	; 62
    38f6:	0f be       	out	0x3f, r0	; 63
    38f8:	cd bf       	out	0x3d, r28	; 61
    38fa:	df 91       	pop	r29
    38fc:	cf 91       	pop	r28
    38fe:	1f 91       	pop	r17
    3900:	0f 91       	pop	r16
    3902:	ff 90       	pop	r15
    3904:	ef 90       	pop	r14
    3906:	df 90       	pop	r13
    3908:	cf 90       	pop	r12
    390a:	bf 90       	pop	r11
    390c:	af 90       	pop	r10
    390e:	08 95       	ret

00003910 <_ZN10LinkedListI11LCDPageItemE6removeEi>:
	}

}

template<typename T>
T LinkedList<T>::remove(int index){
    3910:	af 92       	push	r10
    3912:	bf 92       	push	r11
    3914:	cf 92       	push	r12
    3916:	df 92       	push	r13
    3918:	ef 92       	push	r14
    391a:	ff 92       	push	r15
    391c:	0f 93       	push	r16
    391e:	1f 93       	push	r17
    3920:	cf 93       	push	r28
    3922:	df 93       	push	r29
    3924:	cd b7       	in	r28, 0x3d	; 61
    3926:	de b7       	in	r29, 0x3e	; 62
    3928:	ec 97       	sbiw	r28, 0x3c	; 60
    392a:	0f b6       	in	r0, 0x3f	; 63
    392c:	f8 94       	cli
    392e:	de bf       	out	0x3e, r29	; 62
    3930:	0f be       	out	0x3f, r0	; 63
    3932:	cd bf       	out	0x3d, r28	; 61
    3934:	8c 01       	movw	r16, r24
    3936:	6b 01       	movw	r12, r22
	if (index < 0 || index >= _size)
    3938:	55 23       	and	r21, r21
    393a:	44 f0       	brlt	.+16     	; 0x394c <_ZN10LinkedListI11LCDPageItemE6removeEi+0x3c>
    393c:	db 01       	movw	r26, r22
    393e:	12 96       	adiw	r26, 0x02	; 2
    3940:	8d 91       	ld	r24, X+
    3942:	9c 91       	ld	r25, X
    3944:	13 97       	sbiw	r26, 0x03	; 3
    3946:	48 17       	cp	r20, r24
    3948:	59 07       	cpc	r21, r25
    394a:	1c f0       	brlt	.+6      	; 0x3952 <_ZN10LinkedListI11LCDPageItemE6removeEi+0x42>
	{
		return T();
    394c:	c8 01       	movw	r24, r16
    394e:	bb d3       	rcall	.+1910   	; 0x40c6 <_ZN11LCDPageItemC1Ev>
    3950:	31 c1       	rjmp	.+610    	; 0x3bb4 <_ZN10LinkedListI11LCDPageItemE6removeEi+0x2a4>
	}

	if(index == 0)
    3952:	41 15       	cp	r20, r1
    3954:	51 05       	cpc	r21, r1
    3956:	49 f4       	brne	.+18     	; 0x396a <_ZN10LinkedListI11LCDPageItemE6removeEi+0x5a>
		return shift();
    3958:	db 01       	movw	r26, r22
    395a:	ed 91       	ld	r30, X+
    395c:	fc 91       	ld	r31, X
    395e:	06 84       	ldd	r0, Z+14	; 0x0e
    3960:	f7 85       	ldd	r31, Z+15	; 0x0f
    3962:	e0 2d       	mov	r30, r0
    3964:	c8 01       	movw	r24, r16
    3966:	19 95       	eicall
    3968:	25 c1       	rjmp	.+586    	; 0x3bb4 <_ZN10LinkedListI11LCDPageItemE6removeEi+0x2a4>
	
	if (index == _size-1)
    396a:	01 97       	sbiw	r24, 0x01	; 1
    396c:	84 17       	cp	r24, r20
    396e:	95 07       	cpc	r25, r21
    3970:	49 f4       	brne	.+18     	; 0x3984 <_ZN10LinkedListI11LCDPageItemE6removeEi+0x74>
	{
		return pop();
    3972:	db 01       	movw	r26, r22
    3974:	ed 91       	ld	r30, X+
    3976:	fc 91       	ld	r31, X
    3978:	04 84       	ldd	r0, Z+12	; 0x0c
    397a:	f5 85       	ldd	r31, Z+13	; 0x0d
    397c:	e0 2d       	mov	r30, r0
    397e:	c8 01       	movw	r24, r16
    3980:	19 95       	eicall
    3982:	18 c1       	rjmp	.+560    	; 0x3bb4 <_ZN10LinkedListI11LCDPageItemE6removeEi+0x2a4>
	}

	ListNode<T> *tmp = getNode(index - 1);
    3984:	ba 01       	movw	r22, r20
    3986:	61 50       	subi	r22, 0x01	; 1
    3988:	71 09       	sbc	r23, r1
    398a:	c6 01       	movw	r24, r12
    398c:	89 dc       	rcall	.-1774   	; 0x32a0 <_ZN10LinkedListI11LCDPageItemE7getNodeEi>
    398e:	5c 01       	movw	r10, r24
	ListNode<T> *toDelete = tmp->next;
    3990:	fc 01       	movw	r30, r24
    3992:	e4 ac       	ldd	r14, Z+60	; 0x3c
    3994:	f5 ac       	ldd	r15, Z+61	; 0x3d
    3996:	d7 01       	movw	r26, r14
    3998:	8c 91       	ld	r24, X
    399a:	89 83       	std	Y+1, r24	; 0x01
    399c:	11 96       	adiw	r26, 0x01	; 1
    399e:	8c 91       	ld	r24, X
    39a0:	11 97       	sbiw	r26, 0x01	; 1
    39a2:	8a 83       	std	Y+2, r24	; 0x02
    39a4:	12 96       	adiw	r26, 0x02	; 2
    39a6:	8c 91       	ld	r24, X
    39a8:	8b 83       	std	Y+3, r24	; 0x03
    39aa:	b7 01       	movw	r22, r14
    39ac:	6d 5f       	subi	r22, 0xFD	; 253
    39ae:	7f 4f       	sbci	r23, 0xFF	; 255
    39b0:	ce 01       	movw	r24, r28
    39b2:	04 96       	adiw	r24, 0x04	; 4
    39b4:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    39b8:	f7 01       	movw	r30, r14
    39ba:	81 85       	ldd	r24, Z+9	; 0x09
    39bc:	92 85       	ldd	r25, Z+10	; 0x0a
    39be:	a3 85       	ldd	r26, Z+11	; 0x0b
    39c0:	b4 85       	ldd	r27, Z+12	; 0x0c
    39c2:	8a 87       	std	Y+10, r24	; 0x0a
    39c4:	9b 87       	std	Y+11, r25	; 0x0b
    39c6:	ac 87       	std	Y+12, r26	; 0x0c
    39c8:	bd 87       	std	Y+13, r27	; 0x0d
    39ca:	85 85       	ldd	r24, Z+13	; 0x0d
    39cc:	8e 87       	std	Y+14, r24	; 0x0e
    39ce:	86 85       	ldd	r24, Z+14	; 0x0e
    39d0:	97 85       	ldd	r25, Z+15	; 0x0f
    39d2:	98 8b       	std	Y+16, r25	; 0x10
    39d4:	8f 87       	std	Y+15, r24	; 0x0f
    39d6:	80 89       	ldd	r24, Z+16	; 0x10
    39d8:	91 89       	ldd	r25, Z+17	; 0x11
    39da:	9a 8b       	std	Y+18, r25	; 0x12
    39dc:	89 8b       	std	Y+17, r24	; 0x11
    39de:	82 89       	ldd	r24, Z+18	; 0x12
    39e0:	93 89       	ldd	r25, Z+19	; 0x13
    39e2:	9c 8b       	std	Y+20, r25	; 0x14
    39e4:	8b 8b       	std	Y+19, r24	; 0x13
    39e6:	84 89       	ldd	r24, Z+20	; 0x14
    39e8:	95 89       	ldd	r25, Z+21	; 0x15
    39ea:	9e 8b       	std	Y+22, r25	; 0x16
    39ec:	8d 8b       	std	Y+21, r24	; 0x15
    39ee:	86 89       	ldd	r24, Z+22	; 0x16
    39f0:	97 89       	ldd	r25, Z+23	; 0x17
    39f2:	98 8f       	std	Y+24, r25	; 0x18
    39f4:	8f 8b       	std	Y+23, r24	; 0x17
    39f6:	b7 01       	movw	r22, r14
    39f8:	68 5e       	subi	r22, 0xE8	; 232
    39fa:	7f 4f       	sbci	r23, 0xFF	; 255
    39fc:	ce 01       	movw	r24, r28
    39fe:	49 96       	adiw	r24, 0x19	; 25
    3a00:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    3a04:	b7 01       	movw	r22, r14
    3a06:	62 5e       	subi	r22, 0xE2	; 226
    3a08:	7f 4f       	sbci	r23, 0xFF	; 255
    3a0a:	ce 01       	movw	r24, r28
    3a0c:	4f 96       	adiw	r24, 0x1f	; 31
    3a0e:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    3a12:	d7 01       	movw	r26, r14
    3a14:	94 96       	adiw	r26, 0x24	; 36
    3a16:	8d 91       	ld	r24, X+
    3a18:	9c 91       	ld	r25, X
    3a1a:	95 97       	sbiw	r26, 0x25	; 37
    3a1c:	9e a3       	std	Y+38, r25	; 0x26
    3a1e:	8d a3       	std	Y+37, r24	; 0x25
    3a20:	96 96       	adiw	r26, 0x26	; 38
    3a22:	8d 91       	ld	r24, X+
    3a24:	9c 91       	ld	r25, X
    3a26:	97 97       	sbiw	r26, 0x27	; 39
    3a28:	98 a7       	std	Y+40, r25	; 0x28
    3a2a:	8f a3       	std	Y+39, r24	; 0x27
    3a2c:	98 96       	adiw	r26, 0x28	; 40
    3a2e:	8d 91       	ld	r24, X+
    3a30:	9c 91       	ld	r25, X
    3a32:	99 97       	sbiw	r26, 0x29	; 41
    3a34:	9a a7       	std	Y+42, r25	; 0x2a
    3a36:	89 a7       	std	Y+41, r24	; 0x29
    3a38:	9a 96       	adiw	r26, 0x2a	; 42
    3a3a:	8d 91       	ld	r24, X+
    3a3c:	9c 91       	ld	r25, X
    3a3e:	9b 97       	sbiw	r26, 0x2b	; 43
    3a40:	9c a7       	std	Y+44, r25	; 0x2c
    3a42:	8b a7       	std	Y+43, r24	; 0x2b
    3a44:	9c 96       	adiw	r26, 0x2c	; 44
    3a46:	8d 91       	ld	r24, X+
    3a48:	9c 91       	ld	r25, X
    3a4a:	9d 97       	sbiw	r26, 0x2d	; 45
    3a4c:	9e a7       	std	Y+46, r25	; 0x2e
    3a4e:	8d a7       	std	Y+45, r24	; 0x2d
    3a50:	9e 96       	adiw	r26, 0x2e	; 46
    3a52:	8d 91       	ld	r24, X+
    3a54:	9c 91       	ld	r25, X
    3a56:	9f 97       	sbiw	r26, 0x2f	; 47
    3a58:	98 ab       	std	Y+48, r25	; 0x30
    3a5a:	8f a7       	std	Y+47, r24	; 0x2f
    3a5c:	d0 96       	adiw	r26, 0x30	; 48
    3a5e:	8d 91       	ld	r24, X+
    3a60:	9c 91       	ld	r25, X
    3a62:	d1 97       	sbiw	r26, 0x31	; 49
    3a64:	9a ab       	std	Y+50, r25	; 0x32
    3a66:	89 ab       	std	Y+49, r24	; 0x31
    3a68:	b7 01       	movw	r22, r14
    3a6a:	6e 5c       	subi	r22, 0xCE	; 206
    3a6c:	7f 4f       	sbci	r23, 0xFF	; 255
    3a6e:	ce 01       	movw	r24, r28
    3a70:	c3 96       	adiw	r24, 0x33	; 51
    3a72:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    3a76:	f7 01       	movw	r30, r14
    3a78:	80 ad       	ldd	r24, Z+56	; 0x38
    3a7a:	91 ad       	ldd	r25, Z+57	; 0x39
    3a7c:	9a af       	std	Y+58, r25	; 0x3a
    3a7e:	89 af       	std	Y+57, r24	; 0x39
    3a80:	82 ad       	ldd	r24, Z+58	; 0x3a
    3a82:	93 ad       	ldd	r25, Z+59	; 0x3b
    3a84:	9c af       	std	Y+60, r25	; 0x3c
    3a86:	8b af       	std	Y+59, r24	; 0x3b
	T ret = toDelete->data;
	tmp->next = tmp->next->next;
    3a88:	d5 01       	movw	r26, r10
    3a8a:	dc 96       	adiw	r26, 0x3c	; 60
    3a8c:	ed 91       	ld	r30, X+
    3a8e:	fc 91       	ld	r31, X
    3a90:	dd 97       	sbiw	r26, 0x3d	; 61
    3a92:	84 ad       	ldd	r24, Z+60	; 0x3c
    3a94:	95 ad       	ldd	r25, Z+61	; 0x3d
    3a96:	dd 96       	adiw	r26, 0x3d	; 61
    3a98:	9c 93       	st	X, r25
    3a9a:	8e 93       	st	-X, r24
    3a9c:	dc 97       	sbiw	r26, 0x3c	; 60
	delete(toDelete);
    3a9e:	e1 14       	cp	r14, r1
    3aa0:	f1 04       	cpc	r15, r1
    3aa2:	29 f0       	breq	.+10     	; 0x3aae <_ZN10LinkedListI11LCDPageItemE6removeEi+0x19e>

#ifndef LinkedList_h
#define LinkedList_h

template<class T>
struct ListNode
    3aa4:	c7 01       	movw	r24, r14
    3aa6:	54 d3       	rcall	.+1704   	; 0x4150 <_ZN11LCDPageItemD1Ev>

	ListNode<T> *tmp = getNode(index - 1);
	ListNode<T> *toDelete = tmp->next;
	T ret = toDelete->data;
	tmp->next = tmp->next->next;
	delete(toDelete);
    3aa8:	c7 01       	movw	r24, r14
    3aaa:	0e 94 39 31 	call	0x6272	; 0x6272 <_ZdlPv>
	_size--;
    3aae:	f6 01       	movw	r30, r12
    3ab0:	82 81       	ldd	r24, Z+2	; 0x02
    3ab2:	93 81       	ldd	r25, Z+3	; 0x03
    3ab4:	01 97       	sbiw	r24, 0x01	; 1
    3ab6:	93 83       	std	Z+3, r25	; 0x03
    3ab8:	82 83       	std	Z+2, r24	; 0x02
	isCached = false;
    3aba:	14 86       	std	Z+12, r1	; 0x0c
    3abc:	89 81       	ldd	r24, Y+1	; 0x01
    3abe:	d8 01       	movw	r26, r16
    3ac0:	8c 93       	st	X, r24
    3ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ac4:	11 96       	adiw	r26, 0x01	; 1
    3ac6:	8c 93       	st	X, r24
    3ac8:	11 97       	sbiw	r26, 0x01	; 1
    3aca:	8b 81       	ldd	r24, Y+3	; 0x03
    3acc:	12 96       	adiw	r26, 0x02	; 2
    3ace:	8c 93       	st	X, r24
    3ad0:	be 01       	movw	r22, r28
    3ad2:	6c 5f       	subi	r22, 0xFC	; 252
    3ad4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ad6:	c8 01       	movw	r24, r16
    3ad8:	03 96       	adiw	r24, 0x03	; 3
    3ada:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    3ade:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ae0:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ae2:	ac 85       	ldd	r26, Y+12	; 0x0c
    3ae4:	bd 85       	ldd	r27, Y+13	; 0x0d
    3ae6:	f8 01       	movw	r30, r16
    3ae8:	81 87       	std	Z+9, r24	; 0x09
    3aea:	92 87       	std	Z+10, r25	; 0x0a
    3aec:	a3 87       	std	Z+11, r26	; 0x0b
    3aee:	b4 87       	std	Z+12, r27	; 0x0c
    3af0:	8e 85       	ldd	r24, Y+14	; 0x0e
    3af2:	85 87       	std	Z+13, r24	; 0x0d
    3af4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3af6:	98 89       	ldd	r25, Y+16	; 0x10
    3af8:	97 87       	std	Z+15, r25	; 0x0f
    3afa:	86 87       	std	Z+14, r24	; 0x0e
    3afc:	89 89       	ldd	r24, Y+17	; 0x11
    3afe:	9a 89       	ldd	r25, Y+18	; 0x12
    3b00:	91 8b       	std	Z+17, r25	; 0x11
    3b02:	80 8b       	std	Z+16, r24	; 0x10
    3b04:	8b 89       	ldd	r24, Y+19	; 0x13
    3b06:	9c 89       	ldd	r25, Y+20	; 0x14
    3b08:	93 8b       	std	Z+19, r25	; 0x13
    3b0a:	82 8b       	std	Z+18, r24	; 0x12
    3b0c:	8d 89       	ldd	r24, Y+21	; 0x15
    3b0e:	9e 89       	ldd	r25, Y+22	; 0x16
    3b10:	95 8b       	std	Z+21, r25	; 0x15
    3b12:	84 8b       	std	Z+20, r24	; 0x14
    3b14:	8f 89       	ldd	r24, Y+23	; 0x17
    3b16:	98 8d       	ldd	r25, Y+24	; 0x18
    3b18:	97 8b       	std	Z+23, r25	; 0x17
    3b1a:	86 8b       	std	Z+22, r24	; 0x16
    3b1c:	be 01       	movw	r22, r28
    3b1e:	67 5e       	subi	r22, 0xE7	; 231
    3b20:	7f 4f       	sbci	r23, 0xFF	; 255
    3b22:	c8 01       	movw	r24, r16
    3b24:	48 96       	adiw	r24, 0x18	; 24
    3b26:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    3b2a:	be 01       	movw	r22, r28
    3b2c:	61 5e       	subi	r22, 0xE1	; 225
    3b2e:	7f 4f       	sbci	r23, 0xFF	; 255
    3b30:	c8 01       	movw	r24, r16
    3b32:	4e 96       	adiw	r24, 0x1e	; 30
    3b34:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    3b38:	8d a1       	ldd	r24, Y+37	; 0x25
    3b3a:	9e a1       	ldd	r25, Y+38	; 0x26
    3b3c:	d8 01       	movw	r26, r16
    3b3e:	95 96       	adiw	r26, 0x25	; 37
    3b40:	9c 93       	st	X, r25
    3b42:	8e 93       	st	-X, r24
    3b44:	94 97       	sbiw	r26, 0x24	; 36
    3b46:	8f a1       	ldd	r24, Y+39	; 0x27
    3b48:	98 a5       	ldd	r25, Y+40	; 0x28
    3b4a:	97 96       	adiw	r26, 0x27	; 39
    3b4c:	9c 93       	st	X, r25
    3b4e:	8e 93       	st	-X, r24
    3b50:	96 97       	sbiw	r26, 0x26	; 38
    3b52:	89 a5       	ldd	r24, Y+41	; 0x29
    3b54:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b56:	99 96       	adiw	r26, 0x29	; 41
    3b58:	9c 93       	st	X, r25
    3b5a:	8e 93       	st	-X, r24
    3b5c:	98 97       	sbiw	r26, 0x28	; 40
    3b5e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3b60:	9c a5       	ldd	r25, Y+44	; 0x2c
    3b62:	9b 96       	adiw	r26, 0x2b	; 43
    3b64:	9c 93       	st	X, r25
    3b66:	8e 93       	st	-X, r24
    3b68:	9a 97       	sbiw	r26, 0x2a	; 42
    3b6a:	8d a5       	ldd	r24, Y+45	; 0x2d
    3b6c:	9e a5       	ldd	r25, Y+46	; 0x2e
    3b6e:	9d 96       	adiw	r26, 0x2d	; 45
    3b70:	9c 93       	st	X, r25
    3b72:	8e 93       	st	-X, r24
    3b74:	9c 97       	sbiw	r26, 0x2c	; 44
    3b76:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b78:	98 a9       	ldd	r25, Y+48	; 0x30
    3b7a:	9f 96       	adiw	r26, 0x2f	; 47
    3b7c:	9c 93       	st	X, r25
    3b7e:	8e 93       	st	-X, r24
    3b80:	9e 97       	sbiw	r26, 0x2e	; 46
    3b82:	89 a9       	ldd	r24, Y+49	; 0x31
    3b84:	9a a9       	ldd	r25, Y+50	; 0x32
    3b86:	d1 96       	adiw	r26, 0x31	; 49
    3b88:	9c 93       	st	X, r25
    3b8a:	8e 93       	st	-X, r24
    3b8c:	d0 97       	sbiw	r26, 0x30	; 48
    3b8e:	be 01       	movw	r22, r28
    3b90:	6d 5c       	subi	r22, 0xCD	; 205
    3b92:	7f 4f       	sbci	r23, 0xFF	; 255
    3b94:	c8 01       	movw	r24, r16
    3b96:	c2 96       	adiw	r24, 0x32	; 50
    3b98:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    3b9c:	89 ad       	ldd	r24, Y+57	; 0x39
    3b9e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3ba0:	f8 01       	movw	r30, r16
    3ba2:	91 af       	std	Z+57, r25	; 0x39
    3ba4:	80 af       	std	Z+56, r24	; 0x38
    3ba6:	8b ad       	ldd	r24, Y+59	; 0x3b
    3ba8:	9c ad       	ldd	r25, Y+60	; 0x3c
    3baa:	93 af       	std	Z+59, r25	; 0x3b
    3bac:	82 af       	std	Z+58, r24	; 0x3a
	return ret;
    3bae:	ce 01       	movw	r24, r28
    3bb0:	01 96       	adiw	r24, 0x01	; 1
    3bb2:	ce d2       	rcall	.+1436   	; 0x4150 <_ZN11LCDPageItemD1Ev>
}
    3bb4:	c8 01       	movw	r24, r16
    3bb6:	ec 96       	adiw	r28, 0x3c	; 60
    3bb8:	0f b6       	in	r0, 0x3f	; 63
    3bba:	f8 94       	cli
    3bbc:	de bf       	out	0x3e, r29	; 62
    3bbe:	0f be       	out	0x3f, r0	; 63
    3bc0:	cd bf       	out	0x3d, r28	; 61
    3bc2:	df 91       	pop	r29
    3bc4:	cf 91       	pop	r28
    3bc6:	1f 91       	pop	r17
    3bc8:	0f 91       	pop	r16
    3bca:	ff 90       	pop	r15
    3bcc:	ef 90       	pop	r14
    3bce:	df 90       	pop	r13
    3bd0:	cf 90       	pop	r12
    3bd2:	bf 90       	pop	r11
    3bd4:	af 90       	pop	r10
    3bd6:	08 95       	ret

00003bd8 <_ZN10LinkedListI11LCDPageItemE3setEiS0_>:
	
	return true;
}

template<typename T>
bool LinkedList<T>::set(int index, T _t){
    3bd8:	0f 93       	push	r16
    3bda:	1f 93       	push	r17
    3bdc:	cf 93       	push	r28
    3bde:	df 93       	push	r29
	// Check if index position is in bounds
	if(index < 0 || index >= _size)
    3be0:	77 23       	and	r23, r23
    3be2:	0c f4       	brge	.+2      	; 0x3be6 <_ZN10LinkedListI11LCDPageItemE3setEiS0_+0xe>
    3be4:	74 c0       	rjmp	.+232    	; 0x3cce <_ZN10LinkedListI11LCDPageItemE3setEiS0_+0xf6>
    3be6:	fc 01       	movw	r30, r24
    3be8:	22 81       	ldd	r18, Z+2	; 0x02
    3bea:	33 81       	ldd	r19, Z+3	; 0x03
    3bec:	62 17       	cp	r22, r18
    3bee:	73 07       	cpc	r23, r19
    3bf0:	0c f0       	brlt	.+2      	; 0x3bf4 <_ZN10LinkedListI11LCDPageItemE3setEiS0_+0x1c>
    3bf2:	6f c0       	rjmp	.+222    	; 0x3cd2 <_ZN10LinkedListI11LCDPageItemE3setEiS0_+0xfa>
    3bf4:	ea 01       	movw	r28, r20
		return false;

	getNode(index)->data = _t;
    3bf6:	54 db       	rcall	.-2392   	; 0x32a0 <_ZN10LinkedListI11LCDPageItemE7getNodeEi>
    3bf8:	8c 01       	movw	r16, r24
    3bfa:	88 81       	ld	r24, Y
    3bfc:	f8 01       	movw	r30, r16
    3bfe:	80 83       	st	Z, r24
    3c00:	89 81       	ldd	r24, Y+1	; 0x01
    3c02:	81 83       	std	Z+1, r24	; 0x01
    3c04:	8a 81       	ldd	r24, Y+2	; 0x02
    3c06:	82 83       	std	Z+2, r24	; 0x02
    3c08:	be 01       	movw	r22, r28
    3c0a:	6d 5f       	subi	r22, 0xFD	; 253
    3c0c:	7f 4f       	sbci	r23, 0xFF	; 255
    3c0e:	c8 01       	movw	r24, r16
    3c10:	03 96       	adiw	r24, 0x03	; 3
    3c12:	0e 94 5a 38 	call	0x70b4	; 0x70b4 <_ZN6StringaSERKS_>
    3c16:	89 85       	ldd	r24, Y+9	; 0x09
    3c18:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c1a:	ab 85       	ldd	r26, Y+11	; 0x0b
    3c1c:	bc 85       	ldd	r27, Y+12	; 0x0c
    3c1e:	f8 01       	movw	r30, r16
    3c20:	81 87       	std	Z+9, r24	; 0x09
    3c22:	92 87       	std	Z+10, r25	; 0x0a
    3c24:	a3 87       	std	Z+11, r26	; 0x0b
    3c26:	b4 87       	std	Z+12, r27	; 0x0c
    3c28:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c2a:	85 87       	std	Z+13, r24	; 0x0d
    3c2c:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c2e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3c30:	97 87       	std	Z+15, r25	; 0x0f
    3c32:	86 87       	std	Z+14, r24	; 0x0e
    3c34:	88 89       	ldd	r24, Y+16	; 0x10
    3c36:	99 89       	ldd	r25, Y+17	; 0x11
    3c38:	91 8b       	std	Z+17, r25	; 0x11
    3c3a:	80 8b       	std	Z+16, r24	; 0x10
    3c3c:	8a 89       	ldd	r24, Y+18	; 0x12
    3c3e:	9b 89       	ldd	r25, Y+19	; 0x13
    3c40:	93 8b       	std	Z+19, r25	; 0x13
    3c42:	82 8b       	std	Z+18, r24	; 0x12
    3c44:	8c 89       	ldd	r24, Y+20	; 0x14
    3c46:	9d 89       	ldd	r25, Y+21	; 0x15
    3c48:	95 8b       	std	Z+21, r25	; 0x15
    3c4a:	84 8b       	std	Z+20, r24	; 0x14
    3c4c:	8e 89       	ldd	r24, Y+22	; 0x16
    3c4e:	9f 89       	ldd	r25, Y+23	; 0x17
    3c50:	97 8b       	std	Z+23, r25	; 0x17
    3c52:	86 8b       	std	Z+22, r24	; 0x16
    3c54:	be 01       	movw	r22, r28
    3c56:	68 5e       	subi	r22, 0xE8	; 232
    3c58:	7f 4f       	sbci	r23, 0xFF	; 255
    3c5a:	c8 01       	movw	r24, r16
    3c5c:	48 96       	adiw	r24, 0x18	; 24
    3c5e:	0e 94 5a 38 	call	0x70b4	; 0x70b4 <_ZN6StringaSERKS_>
    3c62:	be 01       	movw	r22, r28
    3c64:	62 5e       	subi	r22, 0xE2	; 226
    3c66:	7f 4f       	sbci	r23, 0xFF	; 255
    3c68:	c8 01       	movw	r24, r16
    3c6a:	4e 96       	adiw	r24, 0x1e	; 30
    3c6c:	0e 94 5a 38 	call	0x70b4	; 0x70b4 <_ZN6StringaSERKS_>
    3c70:	8c a1       	ldd	r24, Y+36	; 0x24
    3c72:	9d a1       	ldd	r25, Y+37	; 0x25
    3c74:	f8 01       	movw	r30, r16
    3c76:	95 a3       	std	Z+37, r25	; 0x25
    3c78:	84 a3       	std	Z+36, r24	; 0x24
    3c7a:	8e a1       	ldd	r24, Y+38	; 0x26
    3c7c:	9f a1       	ldd	r25, Y+39	; 0x27
    3c7e:	97 a3       	std	Z+39, r25	; 0x27
    3c80:	86 a3       	std	Z+38, r24	; 0x26
    3c82:	88 a5       	ldd	r24, Y+40	; 0x28
    3c84:	99 a5       	ldd	r25, Y+41	; 0x29
    3c86:	91 a7       	std	Z+41, r25	; 0x29
    3c88:	80 a7       	std	Z+40, r24	; 0x28
    3c8a:	8a a5       	ldd	r24, Y+42	; 0x2a
    3c8c:	9b a5       	ldd	r25, Y+43	; 0x2b
    3c8e:	93 a7       	std	Z+43, r25	; 0x2b
    3c90:	82 a7       	std	Z+42, r24	; 0x2a
    3c92:	8c a5       	ldd	r24, Y+44	; 0x2c
    3c94:	9d a5       	ldd	r25, Y+45	; 0x2d
    3c96:	95 a7       	std	Z+45, r25	; 0x2d
    3c98:	84 a7       	std	Z+44, r24	; 0x2c
    3c9a:	8e a5       	ldd	r24, Y+46	; 0x2e
    3c9c:	9f a5       	ldd	r25, Y+47	; 0x2f
    3c9e:	97 a7       	std	Z+47, r25	; 0x2f
    3ca0:	86 a7       	std	Z+46, r24	; 0x2e
    3ca2:	88 a9       	ldd	r24, Y+48	; 0x30
    3ca4:	99 a9       	ldd	r25, Y+49	; 0x31
    3ca6:	91 ab       	std	Z+49, r25	; 0x31
    3ca8:	80 ab       	std	Z+48, r24	; 0x30
    3caa:	be 01       	movw	r22, r28
    3cac:	6e 5c       	subi	r22, 0xCE	; 206
    3cae:	7f 4f       	sbci	r23, 0xFF	; 255
    3cb0:	c8 01       	movw	r24, r16
    3cb2:	c2 96       	adiw	r24, 0x32	; 50
    3cb4:	0e 94 5a 38 	call	0x70b4	; 0x70b4 <_ZN6StringaSERKS_>
    3cb8:	88 ad       	ldd	r24, Y+56	; 0x38
    3cba:	99 ad       	ldd	r25, Y+57	; 0x39
    3cbc:	f8 01       	movw	r30, r16
    3cbe:	91 af       	std	Z+57, r25	; 0x39
    3cc0:	80 af       	std	Z+56, r24	; 0x38
    3cc2:	8a ad       	ldd	r24, Y+58	; 0x3a
    3cc4:	9b ad       	ldd	r25, Y+59	; 0x3b
    3cc6:	93 af       	std	Z+59, r25	; 0x3b
    3cc8:	82 af       	std	Z+58, r24	; 0x3a
	return true;
    3cca:	81 e0       	ldi	r24, 0x01	; 1
    3ccc:	03 c0       	rjmp	.+6      	; 0x3cd4 <_ZN10LinkedListI11LCDPageItemE3setEiS0_+0xfc>

template<typename T>
bool LinkedList<T>::set(int index, T _t){
	// Check if index position is in bounds
	if(index < 0 || index >= _size)
		return false;
    3cce:	80 e0       	ldi	r24, 0x00	; 0
    3cd0:	01 c0       	rjmp	.+2      	; 0x3cd4 <_ZN10LinkedListI11LCDPageItemE3setEiS0_+0xfc>
    3cd2:	80 e0       	ldi	r24, 0x00	; 0

	getNode(index)->data = _t;
	return true;
}
    3cd4:	df 91       	pop	r29
    3cd6:	cf 91       	pop	r28
    3cd8:	1f 91       	pop	r17
    3cda:	0f 91       	pop	r16
    3cdc:	08 95       	ret

00003cde <_ZN10LinkedListI11LCDPageItemE3addEiS0_>:
int LinkedList<T>::size(){
	return _size;
}

template<typename T>
bool LinkedList<T>::add(int index, T _t){
    3cde:	af 92       	push	r10
    3ce0:	bf 92       	push	r11
    3ce2:	cf 92       	push	r12
    3ce4:	df 92       	push	r13
    3ce6:	ef 92       	push	r14
    3ce8:	ff 92       	push	r15
    3cea:	0f 93       	push	r16
    3cec:	1f 93       	push	r17
    3cee:	cf 93       	push	r28
    3cf0:	df 93       	push	r29
    3cf2:	cd b7       	in	r28, 0x3d	; 61
    3cf4:	de b7       	in	r29, 0x3e	; 62
    3cf6:	ec 97       	sbiw	r28, 0x3c	; 60
    3cf8:	0f b6       	in	r0, 0x3f	; 63
    3cfa:	f8 94       	cli
    3cfc:	de bf       	out	0x3e, r29	; 62
    3cfe:	0f be       	out	0x3f, r0	; 63
    3d00:	cd bf       	out	0x3d, r28	; 61
    3d02:	6c 01       	movw	r12, r24
    3d04:	5b 01       	movw	r10, r22
    3d06:	8a 01       	movw	r16, r20

	if(index >= _size)
    3d08:	dc 01       	movw	r26, r24
    3d0a:	12 96       	adiw	r26, 0x02	; 2
    3d0c:	8d 91       	ld	r24, X+
    3d0e:	9c 91       	ld	r25, X
    3d10:	13 97       	sbiw	r26, 0x03	; 3
    3d12:	68 17       	cp	r22, r24
    3d14:	79 07       	cpc	r23, r25
    3d16:	0c f4       	brge	.+2      	; 0x3d1a <_ZN10LinkedListI11LCDPageItemE3addEiS0_+0x3c>
    3d18:	85 c0       	rjmp	.+266    	; 0x3e24 <_ZN10LinkedListI11LCDPageItemE3addEiS0_+0x146>
		return add(_t);
    3d1a:	ed 91       	ld	r30, X+
    3d1c:	fc 91       	ld	r31, X
    3d1e:	e4 80       	ldd	r14, Z+4	; 0x04
    3d20:	f5 80       	ldd	r15, Z+5	; 0x05
    3d22:	fa 01       	movw	r30, r20
    3d24:	80 81       	ld	r24, Z
    3d26:	89 83       	std	Y+1, r24	; 0x01
    3d28:	81 81       	ldd	r24, Z+1	; 0x01
    3d2a:	8a 83       	std	Y+2, r24	; 0x02
    3d2c:	82 81       	ldd	r24, Z+2	; 0x02
    3d2e:	8b 83       	std	Y+3, r24	; 0x03
    3d30:	ba 01       	movw	r22, r20
    3d32:	6d 5f       	subi	r22, 0xFD	; 253
    3d34:	7f 4f       	sbci	r23, 0xFF	; 255
    3d36:	ce 01       	movw	r24, r28
    3d38:	04 96       	adiw	r24, 0x04	; 4
    3d3a:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    3d3e:	f8 01       	movw	r30, r16
    3d40:	81 85       	ldd	r24, Z+9	; 0x09
    3d42:	92 85       	ldd	r25, Z+10	; 0x0a
    3d44:	a3 85       	ldd	r26, Z+11	; 0x0b
    3d46:	b4 85       	ldd	r27, Z+12	; 0x0c
    3d48:	8a 87       	std	Y+10, r24	; 0x0a
    3d4a:	9b 87       	std	Y+11, r25	; 0x0b
    3d4c:	ac 87       	std	Y+12, r26	; 0x0c
    3d4e:	bd 87       	std	Y+13, r27	; 0x0d
    3d50:	85 85       	ldd	r24, Z+13	; 0x0d
    3d52:	8e 87       	std	Y+14, r24	; 0x0e
    3d54:	86 85       	ldd	r24, Z+14	; 0x0e
    3d56:	97 85       	ldd	r25, Z+15	; 0x0f
    3d58:	98 8b       	std	Y+16, r25	; 0x10
    3d5a:	8f 87       	std	Y+15, r24	; 0x0f
    3d5c:	80 89       	ldd	r24, Z+16	; 0x10
    3d5e:	91 89       	ldd	r25, Z+17	; 0x11
    3d60:	9a 8b       	std	Y+18, r25	; 0x12
    3d62:	89 8b       	std	Y+17, r24	; 0x11
    3d64:	82 89       	ldd	r24, Z+18	; 0x12
    3d66:	93 89       	ldd	r25, Z+19	; 0x13
    3d68:	9c 8b       	std	Y+20, r25	; 0x14
    3d6a:	8b 8b       	std	Y+19, r24	; 0x13
    3d6c:	84 89       	ldd	r24, Z+20	; 0x14
    3d6e:	95 89       	ldd	r25, Z+21	; 0x15
    3d70:	9e 8b       	std	Y+22, r25	; 0x16
    3d72:	8d 8b       	std	Y+21, r24	; 0x15
    3d74:	86 89       	ldd	r24, Z+22	; 0x16
    3d76:	97 89       	ldd	r25, Z+23	; 0x17
    3d78:	98 8f       	std	Y+24, r25	; 0x18
    3d7a:	8f 8b       	std	Y+23, r24	; 0x17
    3d7c:	b8 01       	movw	r22, r16
    3d7e:	68 5e       	subi	r22, 0xE8	; 232
    3d80:	7f 4f       	sbci	r23, 0xFF	; 255
    3d82:	ce 01       	movw	r24, r28
    3d84:	49 96       	adiw	r24, 0x19	; 25
    3d86:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    3d8a:	b8 01       	movw	r22, r16
    3d8c:	62 5e       	subi	r22, 0xE2	; 226
    3d8e:	7f 4f       	sbci	r23, 0xFF	; 255
    3d90:	ce 01       	movw	r24, r28
    3d92:	4f 96       	adiw	r24, 0x1f	; 31
    3d94:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    3d98:	d8 01       	movw	r26, r16
    3d9a:	94 96       	adiw	r26, 0x24	; 36
    3d9c:	8d 91       	ld	r24, X+
    3d9e:	9c 91       	ld	r25, X
    3da0:	95 97       	sbiw	r26, 0x25	; 37
    3da2:	9e a3       	std	Y+38, r25	; 0x26
    3da4:	8d a3       	std	Y+37, r24	; 0x25
    3da6:	96 96       	adiw	r26, 0x26	; 38
    3da8:	8d 91       	ld	r24, X+
    3daa:	9c 91       	ld	r25, X
    3dac:	97 97       	sbiw	r26, 0x27	; 39
    3dae:	98 a7       	std	Y+40, r25	; 0x28
    3db0:	8f a3       	std	Y+39, r24	; 0x27
    3db2:	98 96       	adiw	r26, 0x28	; 40
    3db4:	8d 91       	ld	r24, X+
    3db6:	9c 91       	ld	r25, X
    3db8:	99 97       	sbiw	r26, 0x29	; 41
    3dba:	9a a7       	std	Y+42, r25	; 0x2a
    3dbc:	89 a7       	std	Y+41, r24	; 0x29
    3dbe:	9a 96       	adiw	r26, 0x2a	; 42
    3dc0:	8d 91       	ld	r24, X+
    3dc2:	9c 91       	ld	r25, X
    3dc4:	9b 97       	sbiw	r26, 0x2b	; 43
    3dc6:	9c a7       	std	Y+44, r25	; 0x2c
    3dc8:	8b a7       	std	Y+43, r24	; 0x2b
    3dca:	9c 96       	adiw	r26, 0x2c	; 44
    3dcc:	8d 91       	ld	r24, X+
    3dce:	9c 91       	ld	r25, X
    3dd0:	9d 97       	sbiw	r26, 0x2d	; 45
    3dd2:	9e a7       	std	Y+46, r25	; 0x2e
    3dd4:	8d a7       	std	Y+45, r24	; 0x2d
    3dd6:	9e 96       	adiw	r26, 0x2e	; 46
    3dd8:	8d 91       	ld	r24, X+
    3dda:	9c 91       	ld	r25, X
    3ddc:	9f 97       	sbiw	r26, 0x2f	; 47
    3dde:	98 ab       	std	Y+48, r25	; 0x30
    3de0:	8f a7       	std	Y+47, r24	; 0x2f
    3de2:	d0 96       	adiw	r26, 0x30	; 48
    3de4:	8d 91       	ld	r24, X+
    3de6:	9c 91       	ld	r25, X
    3de8:	d1 97       	sbiw	r26, 0x31	; 49
    3dea:	9a ab       	std	Y+50, r25	; 0x32
    3dec:	89 ab       	std	Y+49, r24	; 0x31
    3dee:	b8 01       	movw	r22, r16
    3df0:	6e 5c       	subi	r22, 0xCE	; 206
    3df2:	7f 4f       	sbci	r23, 0xFF	; 255
    3df4:	ce 01       	movw	r24, r28
    3df6:	c3 96       	adiw	r24, 0x33	; 51
    3df8:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    3dfc:	f8 01       	movw	r30, r16
    3dfe:	80 ad       	ldd	r24, Z+56	; 0x38
    3e00:	91 ad       	ldd	r25, Z+57	; 0x39
    3e02:	9a af       	std	Y+58, r25	; 0x3a
    3e04:	89 af       	std	Y+57, r24	; 0x39
    3e06:	82 ad       	ldd	r24, Z+58	; 0x3a
    3e08:	93 ad       	ldd	r25, Z+59	; 0x3b
    3e0a:	9c af       	std	Y+60, r25	; 0x3c
    3e0c:	8b af       	std	Y+59, r24	; 0x3b
    3e0e:	be 01       	movw	r22, r28
    3e10:	6f 5f       	subi	r22, 0xFF	; 255
    3e12:	7f 4f       	sbci	r23, 0xFF	; 255
    3e14:	c6 01       	movw	r24, r12
    3e16:	f7 01       	movw	r30, r14
    3e18:	19 95       	eicall
    3e1a:	18 2f       	mov	r17, r24
    3e1c:	ce 01       	movw	r24, r28
    3e1e:	01 96       	adiw	r24, 0x01	; 1
    3e20:	97 d1       	rcall	.+814    	; 0x4150 <_ZN11LCDPageItemD1Ev>
    3e22:	3f c1       	rjmp	.+638    	; 0x40a2 <_ZN10LinkedListI11LCDPageItemE3addEiS0_+0x3c4>

	if(index == 0)
    3e24:	67 2b       	or	r22, r23
    3e26:	09 f0       	breq	.+2      	; 0x3e2a <_ZN10LinkedListI11LCDPageItemE3addEiS0_+0x14c>
    3e28:	86 c0       	rjmp	.+268    	; 0x3f36 <_ZN10LinkedListI11LCDPageItemE3addEiS0_+0x258>
		return unshift(_t);
    3e2a:	d6 01       	movw	r26, r12
    3e2c:	ed 91       	ld	r30, X+
    3e2e:	fc 91       	ld	r31, X
    3e30:	e6 80       	ldd	r14, Z+6	; 0x06
    3e32:	f7 80       	ldd	r15, Z+7	; 0x07
    3e34:	fa 01       	movw	r30, r20
    3e36:	80 81       	ld	r24, Z
    3e38:	89 83       	std	Y+1, r24	; 0x01
    3e3a:	81 81       	ldd	r24, Z+1	; 0x01
    3e3c:	8a 83       	std	Y+2, r24	; 0x02
    3e3e:	82 81       	ldd	r24, Z+2	; 0x02
    3e40:	8b 83       	std	Y+3, r24	; 0x03
    3e42:	ba 01       	movw	r22, r20
    3e44:	6d 5f       	subi	r22, 0xFD	; 253
    3e46:	7f 4f       	sbci	r23, 0xFF	; 255
    3e48:	ce 01       	movw	r24, r28
    3e4a:	04 96       	adiw	r24, 0x04	; 4
    3e4c:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    3e50:	f8 01       	movw	r30, r16
    3e52:	81 85       	ldd	r24, Z+9	; 0x09
    3e54:	92 85       	ldd	r25, Z+10	; 0x0a
    3e56:	a3 85       	ldd	r26, Z+11	; 0x0b
    3e58:	b4 85       	ldd	r27, Z+12	; 0x0c
    3e5a:	8a 87       	std	Y+10, r24	; 0x0a
    3e5c:	9b 87       	std	Y+11, r25	; 0x0b
    3e5e:	ac 87       	std	Y+12, r26	; 0x0c
    3e60:	bd 87       	std	Y+13, r27	; 0x0d
    3e62:	85 85       	ldd	r24, Z+13	; 0x0d
    3e64:	8e 87       	std	Y+14, r24	; 0x0e
    3e66:	86 85       	ldd	r24, Z+14	; 0x0e
    3e68:	97 85       	ldd	r25, Z+15	; 0x0f
    3e6a:	98 8b       	std	Y+16, r25	; 0x10
    3e6c:	8f 87       	std	Y+15, r24	; 0x0f
    3e6e:	80 89       	ldd	r24, Z+16	; 0x10
    3e70:	91 89       	ldd	r25, Z+17	; 0x11
    3e72:	9a 8b       	std	Y+18, r25	; 0x12
    3e74:	89 8b       	std	Y+17, r24	; 0x11
    3e76:	82 89       	ldd	r24, Z+18	; 0x12
    3e78:	93 89       	ldd	r25, Z+19	; 0x13
    3e7a:	9c 8b       	std	Y+20, r25	; 0x14
    3e7c:	8b 8b       	std	Y+19, r24	; 0x13
    3e7e:	84 89       	ldd	r24, Z+20	; 0x14
    3e80:	95 89       	ldd	r25, Z+21	; 0x15
    3e82:	9e 8b       	std	Y+22, r25	; 0x16
    3e84:	8d 8b       	std	Y+21, r24	; 0x15
    3e86:	86 89       	ldd	r24, Z+22	; 0x16
    3e88:	97 89       	ldd	r25, Z+23	; 0x17
    3e8a:	98 8f       	std	Y+24, r25	; 0x18
    3e8c:	8f 8b       	std	Y+23, r24	; 0x17
    3e8e:	b8 01       	movw	r22, r16
    3e90:	68 5e       	subi	r22, 0xE8	; 232
    3e92:	7f 4f       	sbci	r23, 0xFF	; 255
    3e94:	ce 01       	movw	r24, r28
    3e96:	49 96       	adiw	r24, 0x19	; 25
    3e98:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    3e9c:	b8 01       	movw	r22, r16
    3e9e:	62 5e       	subi	r22, 0xE2	; 226
    3ea0:	7f 4f       	sbci	r23, 0xFF	; 255
    3ea2:	ce 01       	movw	r24, r28
    3ea4:	4f 96       	adiw	r24, 0x1f	; 31
    3ea6:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    3eaa:	d8 01       	movw	r26, r16
    3eac:	94 96       	adiw	r26, 0x24	; 36
    3eae:	8d 91       	ld	r24, X+
    3eb0:	9c 91       	ld	r25, X
    3eb2:	95 97       	sbiw	r26, 0x25	; 37
    3eb4:	9e a3       	std	Y+38, r25	; 0x26
    3eb6:	8d a3       	std	Y+37, r24	; 0x25
    3eb8:	96 96       	adiw	r26, 0x26	; 38
    3eba:	8d 91       	ld	r24, X+
    3ebc:	9c 91       	ld	r25, X
    3ebe:	97 97       	sbiw	r26, 0x27	; 39
    3ec0:	98 a7       	std	Y+40, r25	; 0x28
    3ec2:	8f a3       	std	Y+39, r24	; 0x27
    3ec4:	98 96       	adiw	r26, 0x28	; 40
    3ec6:	8d 91       	ld	r24, X+
    3ec8:	9c 91       	ld	r25, X
    3eca:	99 97       	sbiw	r26, 0x29	; 41
    3ecc:	9a a7       	std	Y+42, r25	; 0x2a
    3ece:	89 a7       	std	Y+41, r24	; 0x29
    3ed0:	9a 96       	adiw	r26, 0x2a	; 42
    3ed2:	8d 91       	ld	r24, X+
    3ed4:	9c 91       	ld	r25, X
    3ed6:	9b 97       	sbiw	r26, 0x2b	; 43
    3ed8:	9c a7       	std	Y+44, r25	; 0x2c
    3eda:	8b a7       	std	Y+43, r24	; 0x2b
    3edc:	9c 96       	adiw	r26, 0x2c	; 44
    3ede:	8d 91       	ld	r24, X+
    3ee0:	9c 91       	ld	r25, X
    3ee2:	9d 97       	sbiw	r26, 0x2d	; 45
    3ee4:	9e a7       	std	Y+46, r25	; 0x2e
    3ee6:	8d a7       	std	Y+45, r24	; 0x2d
    3ee8:	9e 96       	adiw	r26, 0x2e	; 46
    3eea:	8d 91       	ld	r24, X+
    3eec:	9c 91       	ld	r25, X
    3eee:	9f 97       	sbiw	r26, 0x2f	; 47
    3ef0:	98 ab       	std	Y+48, r25	; 0x30
    3ef2:	8f a7       	std	Y+47, r24	; 0x2f
    3ef4:	d0 96       	adiw	r26, 0x30	; 48
    3ef6:	8d 91       	ld	r24, X+
    3ef8:	9c 91       	ld	r25, X
    3efa:	d1 97       	sbiw	r26, 0x31	; 49
    3efc:	9a ab       	std	Y+50, r25	; 0x32
    3efe:	89 ab       	std	Y+49, r24	; 0x31
    3f00:	b8 01       	movw	r22, r16
    3f02:	6e 5c       	subi	r22, 0xCE	; 206
    3f04:	7f 4f       	sbci	r23, 0xFF	; 255
    3f06:	ce 01       	movw	r24, r28
    3f08:	c3 96       	adiw	r24, 0x33	; 51
    3f0a:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    3f0e:	f8 01       	movw	r30, r16
    3f10:	80 ad       	ldd	r24, Z+56	; 0x38
    3f12:	91 ad       	ldd	r25, Z+57	; 0x39
    3f14:	9a af       	std	Y+58, r25	; 0x3a
    3f16:	89 af       	std	Y+57, r24	; 0x39
    3f18:	82 ad       	ldd	r24, Z+58	; 0x3a
    3f1a:	93 ad       	ldd	r25, Z+59	; 0x3b
    3f1c:	9c af       	std	Y+60, r25	; 0x3c
    3f1e:	8b af       	std	Y+59, r24	; 0x3b
    3f20:	be 01       	movw	r22, r28
    3f22:	6f 5f       	subi	r22, 0xFF	; 255
    3f24:	7f 4f       	sbci	r23, 0xFF	; 255
    3f26:	c6 01       	movw	r24, r12
    3f28:	f7 01       	movw	r30, r14
    3f2a:	19 95       	eicall
    3f2c:	18 2f       	mov	r17, r24
    3f2e:	ce 01       	movw	r24, r28
    3f30:	01 96       	adiw	r24, 0x01	; 1
    3f32:	0e d1       	rcall	.+540    	; 0x4150 <_ZN11LCDPageItemD1Ev>
    3f34:	b6 c0       	rjmp	.+364    	; 0x40a2 <_ZN10LinkedListI11LCDPageItemE3addEiS0_+0x3c4>

	ListNode<T> *tmp = new ListNode<T>(),
    3f36:	8e e3       	ldi	r24, 0x3E	; 62
    3f38:	90 e0       	ldi	r25, 0x00	; 0
    3f3a:	0e 94 36 31 	call	0x626c	; 0x626c <_Znwj>
    3f3e:	7c 01       	movw	r14, r24
    3f40:	8e e3       	ldi	r24, 0x3E	; 62
    3f42:	d7 01       	movw	r26, r14
    3f44:	1d 92       	st	X+, r1
    3f46:	8a 95       	dec	r24
    3f48:	e9 f7       	brne	.-6      	; 0x3f44 <_ZN10LinkedListI11LCDPageItemE3addEiS0_+0x266>

#ifndef LinkedList_h
#define LinkedList_h

template<class T>
struct ListNode
    3f4a:	c7 01       	movw	r24, r14
    3f4c:	bc d0       	rcall	.+376    	; 0x40c6 <_ZN11LCDPageItemC1Ev>

	if(index == 0)
		return unshift(_t);

	ListNode<T> *tmp = new ListNode<T>(),
				 *_prev = getNode(index-1);
    3f4e:	b5 01       	movw	r22, r10
    3f50:	61 50       	subi	r22, 0x01	; 1
    3f52:	71 09       	sbc	r23, r1
    3f54:	c6 01       	movw	r24, r12
    3f56:	a4 d9       	rcall	.-3256   	; 0x32a0 <_ZN10LinkedListI11LCDPageItemE7getNodeEi>
    3f58:	5c 01       	movw	r10, r24
    3f5a:	f8 01       	movw	r30, r16
    3f5c:	80 81       	ld	r24, Z
    3f5e:	d7 01       	movw	r26, r14
    3f60:	8c 93       	st	X, r24
    3f62:	81 81       	ldd	r24, Z+1	; 0x01
    3f64:	11 96       	adiw	r26, 0x01	; 1
    3f66:	8c 93       	st	X, r24
    3f68:	11 97       	sbiw	r26, 0x01	; 1
    3f6a:	82 81       	ldd	r24, Z+2	; 0x02
    3f6c:	12 96       	adiw	r26, 0x02	; 2
    3f6e:	8c 93       	st	X, r24
    3f70:	b8 01       	movw	r22, r16
    3f72:	6d 5f       	subi	r22, 0xFD	; 253
    3f74:	7f 4f       	sbci	r23, 0xFF	; 255
    3f76:	c7 01       	movw	r24, r14
    3f78:	03 96       	adiw	r24, 0x03	; 3
    3f7a:	0e 94 5a 38 	call	0x70b4	; 0x70b4 <_ZN6StringaSERKS_>
    3f7e:	f8 01       	movw	r30, r16
    3f80:	81 85       	ldd	r24, Z+9	; 0x09
    3f82:	92 85       	ldd	r25, Z+10	; 0x0a
    3f84:	a3 85       	ldd	r26, Z+11	; 0x0b
    3f86:	b4 85       	ldd	r27, Z+12	; 0x0c
    3f88:	f7 01       	movw	r30, r14
    3f8a:	81 87       	std	Z+9, r24	; 0x09
    3f8c:	92 87       	std	Z+10, r25	; 0x0a
    3f8e:	a3 87       	std	Z+11, r26	; 0x0b
    3f90:	b4 87       	std	Z+12, r27	; 0x0c
    3f92:	d8 01       	movw	r26, r16
    3f94:	1d 96       	adiw	r26, 0x0d	; 13
    3f96:	8c 91       	ld	r24, X
    3f98:	1d 97       	sbiw	r26, 0x0d	; 13
    3f9a:	85 87       	std	Z+13, r24	; 0x0d
    3f9c:	1e 96       	adiw	r26, 0x0e	; 14
    3f9e:	8d 91       	ld	r24, X+
    3fa0:	9c 91       	ld	r25, X
    3fa2:	1f 97       	sbiw	r26, 0x0f	; 15
    3fa4:	97 87       	std	Z+15, r25	; 0x0f
    3fa6:	86 87       	std	Z+14, r24	; 0x0e
    3fa8:	50 96       	adiw	r26, 0x10	; 16
    3faa:	8d 91       	ld	r24, X+
    3fac:	9c 91       	ld	r25, X
    3fae:	51 97       	sbiw	r26, 0x11	; 17
    3fb0:	91 8b       	std	Z+17, r25	; 0x11
    3fb2:	80 8b       	std	Z+16, r24	; 0x10
    3fb4:	52 96       	adiw	r26, 0x12	; 18
    3fb6:	8d 91       	ld	r24, X+
    3fb8:	9c 91       	ld	r25, X
    3fba:	53 97       	sbiw	r26, 0x13	; 19
    3fbc:	93 8b       	std	Z+19, r25	; 0x13
    3fbe:	82 8b       	std	Z+18, r24	; 0x12
    3fc0:	54 96       	adiw	r26, 0x14	; 20
    3fc2:	8d 91       	ld	r24, X+
    3fc4:	9c 91       	ld	r25, X
    3fc6:	55 97       	sbiw	r26, 0x15	; 21
    3fc8:	95 8b       	std	Z+21, r25	; 0x15
    3fca:	84 8b       	std	Z+20, r24	; 0x14
    3fcc:	56 96       	adiw	r26, 0x16	; 22
    3fce:	8d 91       	ld	r24, X+
    3fd0:	9c 91       	ld	r25, X
    3fd2:	57 97       	sbiw	r26, 0x17	; 23
    3fd4:	97 8b       	std	Z+23, r25	; 0x17
    3fd6:	86 8b       	std	Z+22, r24	; 0x16
    3fd8:	b8 01       	movw	r22, r16
    3fda:	68 5e       	subi	r22, 0xE8	; 232
    3fdc:	7f 4f       	sbci	r23, 0xFF	; 255
    3fde:	c7 01       	movw	r24, r14
    3fe0:	48 96       	adiw	r24, 0x18	; 24
    3fe2:	0e 94 5a 38 	call	0x70b4	; 0x70b4 <_ZN6StringaSERKS_>
    3fe6:	b8 01       	movw	r22, r16
    3fe8:	62 5e       	subi	r22, 0xE2	; 226
    3fea:	7f 4f       	sbci	r23, 0xFF	; 255
    3fec:	c7 01       	movw	r24, r14
    3fee:	4e 96       	adiw	r24, 0x1e	; 30
    3ff0:	0e 94 5a 38 	call	0x70b4	; 0x70b4 <_ZN6StringaSERKS_>
    3ff4:	f8 01       	movw	r30, r16
    3ff6:	84 a1       	ldd	r24, Z+36	; 0x24
    3ff8:	95 a1       	ldd	r25, Z+37	; 0x25
    3ffa:	d7 01       	movw	r26, r14
    3ffc:	95 96       	adiw	r26, 0x25	; 37
    3ffe:	9c 93       	st	X, r25
    4000:	8e 93       	st	-X, r24
    4002:	94 97       	sbiw	r26, 0x24	; 36
    4004:	86 a1       	ldd	r24, Z+38	; 0x26
    4006:	97 a1       	ldd	r25, Z+39	; 0x27
    4008:	97 96       	adiw	r26, 0x27	; 39
    400a:	9c 93       	st	X, r25
    400c:	8e 93       	st	-X, r24
    400e:	96 97       	sbiw	r26, 0x26	; 38
    4010:	80 a5       	ldd	r24, Z+40	; 0x28
    4012:	91 a5       	ldd	r25, Z+41	; 0x29
    4014:	99 96       	adiw	r26, 0x29	; 41
    4016:	9c 93       	st	X, r25
    4018:	8e 93       	st	-X, r24
    401a:	98 97       	sbiw	r26, 0x28	; 40
    401c:	82 a5       	ldd	r24, Z+42	; 0x2a
    401e:	93 a5       	ldd	r25, Z+43	; 0x2b
    4020:	9b 96       	adiw	r26, 0x2b	; 43
    4022:	9c 93       	st	X, r25
    4024:	8e 93       	st	-X, r24
    4026:	9a 97       	sbiw	r26, 0x2a	; 42
    4028:	84 a5       	ldd	r24, Z+44	; 0x2c
    402a:	95 a5       	ldd	r25, Z+45	; 0x2d
    402c:	9d 96       	adiw	r26, 0x2d	; 45
    402e:	9c 93       	st	X, r25
    4030:	8e 93       	st	-X, r24
    4032:	9c 97       	sbiw	r26, 0x2c	; 44
    4034:	86 a5       	ldd	r24, Z+46	; 0x2e
    4036:	97 a5       	ldd	r25, Z+47	; 0x2f
    4038:	9f 96       	adiw	r26, 0x2f	; 47
    403a:	9c 93       	st	X, r25
    403c:	8e 93       	st	-X, r24
    403e:	9e 97       	sbiw	r26, 0x2e	; 46
    4040:	80 a9       	ldd	r24, Z+48	; 0x30
    4042:	91 a9       	ldd	r25, Z+49	; 0x31
    4044:	d1 96       	adiw	r26, 0x31	; 49
    4046:	9c 93       	st	X, r25
    4048:	8e 93       	st	-X, r24
    404a:	d0 97       	sbiw	r26, 0x30	; 48
    404c:	b8 01       	movw	r22, r16
    404e:	6e 5c       	subi	r22, 0xCE	; 206
    4050:	7f 4f       	sbci	r23, 0xFF	; 255
    4052:	c7 01       	movw	r24, r14
    4054:	c2 96       	adiw	r24, 0x32	; 50
    4056:	0e 94 5a 38 	call	0x70b4	; 0x70b4 <_ZN6StringaSERKS_>
    405a:	f8 01       	movw	r30, r16
    405c:	80 ad       	ldd	r24, Z+56	; 0x38
    405e:	91 ad       	ldd	r25, Z+57	; 0x39
    4060:	d7 01       	movw	r26, r14
    4062:	d9 96       	adiw	r26, 0x39	; 57
    4064:	9c 93       	st	X, r25
    4066:	8e 93       	st	-X, r24
    4068:	d8 97       	sbiw	r26, 0x38	; 56
    406a:	82 ad       	ldd	r24, Z+58	; 0x3a
    406c:	93 ad       	ldd	r25, Z+59	; 0x3b
    406e:	db 96       	adiw	r26, 0x3b	; 59
    4070:	9c 93       	st	X, r25
    4072:	8e 93       	st	-X, r24
    4074:	da 97       	sbiw	r26, 0x3a	; 58
	tmp->data = _t;
	tmp->next = _prev->next;
    4076:	f5 01       	movw	r30, r10
    4078:	84 ad       	ldd	r24, Z+60	; 0x3c
    407a:	95 ad       	ldd	r25, Z+61	; 0x3d
    407c:	dd 96       	adiw	r26, 0x3d	; 61
    407e:	9c 93       	st	X, r25
    4080:	8e 93       	st	-X, r24
    4082:	dc 97       	sbiw	r26, 0x3c	; 60
	_prev->next = tmp;
    4084:	f5 ae       	std	Z+61, r15	; 0x3d
    4086:	e4 ae       	std	Z+60, r14	; 0x3c

	_size++;
    4088:	d6 01       	movw	r26, r12
    408a:	12 96       	adiw	r26, 0x02	; 2
    408c:	8d 91       	ld	r24, X+
    408e:	9c 91       	ld	r25, X
    4090:	13 97       	sbiw	r26, 0x03	; 3
    4092:	01 96       	adiw	r24, 0x01	; 1
    4094:	13 96       	adiw	r26, 0x03	; 3
    4096:	9c 93       	st	X, r25
    4098:	8e 93       	st	-X, r24
    409a:	12 97       	sbiw	r26, 0x02	; 2
	isCached = false;
    409c:	1c 96       	adiw	r26, 0x0c	; 12
    409e:	1c 92       	st	X, r1

	return true;
    40a0:	11 e0       	ldi	r17, 0x01	; 1
}
    40a2:	81 2f       	mov	r24, r17
    40a4:	ec 96       	adiw	r28, 0x3c	; 60
    40a6:	0f b6       	in	r0, 0x3f	; 63
    40a8:	f8 94       	cli
    40aa:	de bf       	out	0x3e, r29	; 62
    40ac:	0f be       	out	0x3f, r0	; 63
    40ae:	cd bf       	out	0x3d, r28	; 61
    40b0:	df 91       	pop	r29
    40b2:	cf 91       	pop	r28
    40b4:	1f 91       	pop	r17
    40b6:	0f 91       	pop	r16
    40b8:	ff 90       	pop	r15
    40ba:	ef 90       	pop	r14
    40bc:	df 90       	pop	r13
    40be:	cf 90       	pop	r12
    40c0:	bf 90       	pop	r11
    40c2:	af 90       	pop	r10
    40c4:	08 95       	ret

000040c6 <_ZN11LCDPageItemC1Ev>:
LCDPageItem::LCDPageItem(uint8_t colIndx, uint8_t rowIndx, String BtnText, LCDMenuItem * SubMenu){
	col = colIndx;
	row = rowIndx;
	Type = Button;
	ButtonName = BtnText;	
}
    40c6:	cf 93       	push	r28
    40c8:	df 93       	push	r29
    40ca:	ec 01       	movw	r28, r24
    40cc:	18 82       	st	Y, r1
    40ce:	19 82       	std	Y+1, r1	; 0x01
    40d0:	81 e1       	ldi	r24, 0x11	; 17
    40d2:	8a 83       	std	Y+2, r24	; 0x02
    40d4:	6e ee       	ldi	r22, 0xEE	; 238
    40d6:	74 e0       	ldi	r23, 0x04	; 4
    40d8:	ce 01       	movw	r24, r28
    40da:	03 96       	adiw	r24, 0x03	; 3
    40dc:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
    40e0:	19 86       	std	Y+9, r1	; 0x09
    40e2:	1a 86       	std	Y+10, r1	; 0x0a
    40e4:	1b 86       	std	Y+11, r1	; 0x0b
    40e6:	1c 86       	std	Y+12, r1	; 0x0c
    40e8:	1d 86       	std	Y+13, r1	; 0x0d
    40ea:	1f 86       	std	Y+15, r1	; 0x0f
    40ec:	1e 86       	std	Y+14, r1	; 0x0e
    40ee:	19 8a       	std	Y+17, r1	; 0x11
    40f0:	18 8a       	std	Y+16, r1	; 0x10
    40f2:	1b 8a       	std	Y+19, r1	; 0x13
    40f4:	1a 8a       	std	Y+18, r1	; 0x12
    40f6:	1d 8a       	std	Y+21, r1	; 0x15
    40f8:	1c 8a       	std	Y+20, r1	; 0x14
    40fa:	8f ef       	ldi	r24, 0xFF	; 255
    40fc:	9f ef       	ldi	r25, 0xFF	; 255
    40fe:	9f 8b       	std	Y+23, r25	; 0x17
    4100:	8e 8b       	std	Y+22, r24	; 0x16
    4102:	6e ee       	ldi	r22, 0xEE	; 238
    4104:	74 e0       	ldi	r23, 0x04	; 4
    4106:	ce 01       	movw	r24, r28
    4108:	48 96       	adiw	r24, 0x18	; 24
    410a:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
    410e:	6e ee       	ldi	r22, 0xEE	; 238
    4110:	74 e0       	ldi	r23, 0x04	; 4
    4112:	ce 01       	movw	r24, r28
    4114:	4e 96       	adiw	r24, 0x1e	; 30
    4116:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
    411a:	1d a2       	std	Y+37, r1	; 0x25
    411c:	1c a2       	std	Y+36, r1	; 0x24
    411e:	1f a2       	std	Y+39, r1	; 0x27
    4120:	1e a2       	std	Y+38, r1	; 0x26
    4122:	19 a6       	std	Y+41, r1	; 0x29
    4124:	18 a6       	std	Y+40, r1	; 0x28
    4126:	1b a6       	std	Y+43, r1	; 0x2b
    4128:	1a a6       	std	Y+42, r1	; 0x2a
    412a:	1d a6       	std	Y+45, r1	; 0x2d
    412c:	1c a6       	std	Y+44, r1	; 0x2c
    412e:	1f a6       	std	Y+47, r1	; 0x2f
    4130:	1e a6       	std	Y+46, r1	; 0x2e
    4132:	19 aa       	std	Y+49, r1	; 0x31
    4134:	18 aa       	std	Y+48, r1	; 0x30
    4136:	6e ee       	ldi	r22, 0xEE	; 238
    4138:	74 e0       	ldi	r23, 0x04	; 4
    413a:	ce 01       	movw	r24, r28
    413c:	c2 96       	adiw	r24, 0x32	; 50
    413e:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
    4142:	19 ae       	std	Y+57, r1	; 0x39
    4144:	18 ae       	std	Y+56, r1	; 0x38
    4146:	1b ae       	std	Y+59, r1	; 0x3b
    4148:	1a ae       	std	Y+58, r1	; 0x3a
    414a:	df 91       	pop	r29
    414c:	cf 91       	pop	r28
    414e:	08 95       	ret

00004150 <_ZN11LCDPageItemD1Ev>:
    4150:	cf 93       	push	r28
    4152:	df 93       	push	r29
    4154:	ec 01       	movw	r28, r24
    4156:	c2 96       	adiw	r24, 0x32	; 50
    4158:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <_ZN6StringD1Ev>
    415c:	ce 01       	movw	r24, r28
    415e:	4e 96       	adiw	r24, 0x1e	; 30
    4160:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <_ZN6StringD1Ev>
    4164:	ce 01       	movw	r24, r28
    4166:	48 96       	adiw	r24, 0x18	; 24
    4168:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <_ZN6StringD1Ev>
    416c:	ce 01       	movw	r24, r28
    416e:	03 96       	adiw	r24, 0x03	; 3
    4170:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <_ZN6StringD1Ev>
    4174:	df 91       	pop	r29
    4176:	cf 91       	pop	r28
    4178:	08 95       	ret

0000417a <_ZN11LCDPageItemC1Ehhf>:
    417a:	af 92       	push	r10
    417c:	bf 92       	push	r11
    417e:	cf 92       	push	r12
    4180:	df 92       	push	r13
    4182:	ef 92       	push	r14
    4184:	ff 92       	push	r15
    4186:	0f 93       	push	r16
    4188:	1f 93       	push	r17
    418a:	cf 93       	push	r28
    418c:	df 93       	push	r29
    418e:	ec 01       	movw	r28, r24
    4190:	a6 2e       	mov	r10, r22
    4192:	b4 2e       	mov	r11, r20
    4194:	68 01       	movw	r12, r16
    4196:	79 01       	movw	r14, r18
    4198:	18 82       	st	Y, r1
    419a:	19 82       	std	Y+1, r1	; 0x01
    419c:	81 e1       	ldi	r24, 0x11	; 17
    419e:	8a 83       	std	Y+2, r24	; 0x02
    41a0:	6e ee       	ldi	r22, 0xEE	; 238
    41a2:	74 e0       	ldi	r23, 0x04	; 4
    41a4:	ce 01       	movw	r24, r28
    41a6:	03 96       	adiw	r24, 0x03	; 3
    41a8:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
    41ac:	19 86       	std	Y+9, r1	; 0x09
    41ae:	1a 86       	std	Y+10, r1	; 0x0a
    41b0:	1b 86       	std	Y+11, r1	; 0x0b
    41b2:	1c 86       	std	Y+12, r1	; 0x0c
    41b4:	1d 86       	std	Y+13, r1	; 0x0d
    41b6:	1f 86       	std	Y+15, r1	; 0x0f
    41b8:	1e 86       	std	Y+14, r1	; 0x0e
    41ba:	19 8a       	std	Y+17, r1	; 0x11
    41bc:	18 8a       	std	Y+16, r1	; 0x10
    41be:	1b 8a       	std	Y+19, r1	; 0x13
    41c0:	1a 8a       	std	Y+18, r1	; 0x12
    41c2:	1d 8a       	std	Y+21, r1	; 0x15
    41c4:	1c 8a       	std	Y+20, r1	; 0x14
    41c6:	8f ef       	ldi	r24, 0xFF	; 255
    41c8:	9f ef       	ldi	r25, 0xFF	; 255
    41ca:	9f 8b       	std	Y+23, r25	; 0x17
    41cc:	8e 8b       	std	Y+22, r24	; 0x16
    41ce:	6e ee       	ldi	r22, 0xEE	; 238
    41d0:	74 e0       	ldi	r23, 0x04	; 4
    41d2:	ce 01       	movw	r24, r28
    41d4:	48 96       	adiw	r24, 0x18	; 24
    41d6:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
    41da:	6e ee       	ldi	r22, 0xEE	; 238
    41dc:	74 e0       	ldi	r23, 0x04	; 4
    41de:	ce 01       	movw	r24, r28
    41e0:	4e 96       	adiw	r24, 0x1e	; 30
    41e2:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
    41e6:	1d a2       	std	Y+37, r1	; 0x25
    41e8:	1c a2       	std	Y+36, r1	; 0x24
    41ea:	1f a2       	std	Y+39, r1	; 0x27
    41ec:	1e a2       	std	Y+38, r1	; 0x26
    41ee:	19 a6       	std	Y+41, r1	; 0x29
    41f0:	18 a6       	std	Y+40, r1	; 0x28
    41f2:	1b a6       	std	Y+43, r1	; 0x2b
    41f4:	1a a6       	std	Y+42, r1	; 0x2a
    41f6:	1d a6       	std	Y+45, r1	; 0x2d
    41f8:	1c a6       	std	Y+44, r1	; 0x2c
    41fa:	1f a6       	std	Y+47, r1	; 0x2f
    41fc:	1e a6       	std	Y+46, r1	; 0x2e
    41fe:	19 aa       	std	Y+49, r1	; 0x31
    4200:	18 aa       	std	Y+48, r1	; 0x30
    4202:	6e ee       	ldi	r22, 0xEE	; 238
    4204:	74 e0       	ldi	r23, 0x04	; 4
    4206:	ce 01       	movw	r24, r28
    4208:	c2 96       	adiw	r24, 0x32	; 50
    420a:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
    420e:	19 ae       	std	Y+57, r1	; 0x39
    4210:	18 ae       	std	Y+56, r1	; 0x38
    4212:	1b ae       	std	Y+59, r1	; 0x3b
    4214:	1a ae       	std	Y+58, r1	; 0x3a
    4216:	a8 82       	st	Y, r10
    4218:	b9 82       	std	Y+1, r11	; 0x01
    421a:	81 e0       	ldi	r24, 0x01	; 1
    421c:	8a 83       	std	Y+2, r24	; 0x02
    421e:	c9 86       	std	Y+9, r12	; 0x09
    4220:	da 86       	std	Y+10, r13	; 0x0a
    4222:	eb 86       	std	Y+11, r14	; 0x0b
    4224:	fc 86       	std	Y+12, r15	; 0x0c
    4226:	df 91       	pop	r29
    4228:	cf 91       	pop	r28
    422a:	1f 91       	pop	r17
    422c:	0f 91       	pop	r16
    422e:	ff 90       	pop	r15
    4230:	ef 90       	pop	r14
    4232:	df 90       	pop	r13
    4234:	cf 90       	pop	r12
    4236:	bf 90       	pop	r11
    4238:	af 90       	pop	r10
    423a:	08 95       	ret

0000423c <_ZN11LCDPageItemC1EhhP6String>:
    423c:	cf 92       	push	r12
    423e:	df 92       	push	r13
    4240:	ef 92       	push	r14
    4242:	ff 92       	push	r15
    4244:	0f 93       	push	r16
    4246:	1f 93       	push	r17
    4248:	cf 93       	push	r28
    424a:	df 93       	push	r29
    424c:	ec 01       	movw	r28, r24
    424e:	c6 2e       	mov	r12, r22
    4250:	d4 2e       	mov	r13, r20
    4252:	79 01       	movw	r14, r18
    4254:	18 82       	st	Y, r1
    4256:	19 82       	std	Y+1, r1	; 0x01
    4258:	81 e1       	ldi	r24, 0x11	; 17
    425a:	8a 83       	std	Y+2, r24	; 0x02
    425c:	8e 01       	movw	r16, r28
    425e:	0d 5f       	subi	r16, 0xFD	; 253
    4260:	1f 4f       	sbci	r17, 0xFF	; 255
    4262:	6e ee       	ldi	r22, 0xEE	; 238
    4264:	74 e0       	ldi	r23, 0x04	; 4
    4266:	c8 01       	movw	r24, r16
    4268:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
    426c:	19 86       	std	Y+9, r1	; 0x09
    426e:	1a 86       	std	Y+10, r1	; 0x0a
    4270:	1b 86       	std	Y+11, r1	; 0x0b
    4272:	1c 86       	std	Y+12, r1	; 0x0c
    4274:	1d 86       	std	Y+13, r1	; 0x0d
    4276:	1f 86       	std	Y+15, r1	; 0x0f
    4278:	1e 86       	std	Y+14, r1	; 0x0e
    427a:	19 8a       	std	Y+17, r1	; 0x11
    427c:	18 8a       	std	Y+16, r1	; 0x10
    427e:	1b 8a       	std	Y+19, r1	; 0x13
    4280:	1a 8a       	std	Y+18, r1	; 0x12
    4282:	1d 8a       	std	Y+21, r1	; 0x15
    4284:	1c 8a       	std	Y+20, r1	; 0x14
    4286:	8f ef       	ldi	r24, 0xFF	; 255
    4288:	9f ef       	ldi	r25, 0xFF	; 255
    428a:	9f 8b       	std	Y+23, r25	; 0x17
    428c:	8e 8b       	std	Y+22, r24	; 0x16
    428e:	6e ee       	ldi	r22, 0xEE	; 238
    4290:	74 e0       	ldi	r23, 0x04	; 4
    4292:	ce 01       	movw	r24, r28
    4294:	48 96       	adiw	r24, 0x18	; 24
    4296:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
    429a:	6e ee       	ldi	r22, 0xEE	; 238
    429c:	74 e0       	ldi	r23, 0x04	; 4
    429e:	ce 01       	movw	r24, r28
    42a0:	4e 96       	adiw	r24, 0x1e	; 30
    42a2:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
    42a6:	1d a2       	std	Y+37, r1	; 0x25
    42a8:	1c a2       	std	Y+36, r1	; 0x24
    42aa:	1f a2       	std	Y+39, r1	; 0x27
    42ac:	1e a2       	std	Y+38, r1	; 0x26
    42ae:	19 a6       	std	Y+41, r1	; 0x29
    42b0:	18 a6       	std	Y+40, r1	; 0x28
    42b2:	1b a6       	std	Y+43, r1	; 0x2b
    42b4:	1a a6       	std	Y+42, r1	; 0x2a
    42b6:	1d a6       	std	Y+45, r1	; 0x2d
    42b8:	1c a6       	std	Y+44, r1	; 0x2c
    42ba:	1f a6       	std	Y+47, r1	; 0x2f
    42bc:	1e a6       	std	Y+46, r1	; 0x2e
    42be:	19 aa       	std	Y+49, r1	; 0x31
    42c0:	18 aa       	std	Y+48, r1	; 0x30
    42c2:	6e ee       	ldi	r22, 0xEE	; 238
    42c4:	74 e0       	ldi	r23, 0x04	; 4
    42c6:	ce 01       	movw	r24, r28
    42c8:	c2 96       	adiw	r24, 0x32	; 50
    42ca:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
    42ce:	19 ae       	std	Y+57, r1	; 0x39
    42d0:	18 ae       	std	Y+56, r1	; 0x38
    42d2:	1b ae       	std	Y+59, r1	; 0x3b
    42d4:	1a ae       	std	Y+58, r1	; 0x3a
    42d6:	c8 82       	st	Y, r12
    42d8:	d9 82       	std	Y+1, r13	; 0x01
    42da:	88 e0       	ldi	r24, 0x08	; 8
    42dc:	8a 83       	std	Y+2, r24	; 0x02
    42de:	fd a2       	std	Y+37, r15	; 0x25
    42e0:	ec a2       	std	Y+36, r14	; 0x24
    42e2:	b7 01       	movw	r22, r14
    42e4:	c8 01       	movw	r24, r16
    42e6:	0e 94 5a 38 	call	0x70b4	; 0x70b4 <_ZN6StringaSERKS_>
    42ea:	df 91       	pop	r29
    42ec:	cf 91       	pop	r28
    42ee:	1f 91       	pop	r17
    42f0:	0f 91       	pop	r16
    42f2:	ff 90       	pop	r15
    42f4:	ef 90       	pop	r14
    42f6:	df 90       	pop	r13
    42f8:	cf 90       	pop	r12
    42fa:	08 95       	ret

000042fc <_ZN11LCDPageItem5printEP17LiquidCrystal_I2C>:

void LCDPageItem::print(LiquidCrystal_I2C * LCD){
    42fc:	8f 92       	push	r8
    42fe:	9f 92       	push	r9
    4300:	af 92       	push	r10
    4302:	bf 92       	push	r11
    4304:	cf 92       	push	r12
    4306:	df 92       	push	r13
    4308:	ef 92       	push	r14
    430a:	ff 92       	push	r15
    430c:	0f 93       	push	r16
    430e:	1f 93       	push	r17
    4310:	cf 93       	push	r28
    4312:	df 93       	push	r29
    4314:	cd b7       	in	r28, 0x3d	; 61
    4316:	de b7       	in	r29, 0x3e	; 62
    4318:	2c 97       	sbiw	r28, 0x0c	; 12
    431a:	0f b6       	in	r0, 0x3f	; 63
    431c:	f8 94       	cli
    431e:	de bf       	out	0x3e, r29	; 62
    4320:	0f be       	out	0x3f, r0	; 63
    4322:	cd bf       	out	0x3d, r28	; 61
    4324:	8c 01       	movw	r16, r24
    4326:	7b 01       	movw	r14, r22
	LCD->setCursor(row, col);
    4328:	dc 01       	movw	r26, r24
    432a:	4c 91       	ld	r20, X
    432c:	11 96       	adiw	r26, 0x01	; 1
    432e:	6c 91       	ld	r22, X
    4330:	c7 01       	movw	r24, r14
    4332:	d8 d5       	rcall	.+2992   	; 0x4ee4 <_ZN3LCD9setCursorEhh>
	switch(Type){
    4334:	f8 01       	movw	r30, r16
    4336:	42 81       	ldd	r20, Z+2	; 0x02
    4338:	50 e0       	ldi	r21, 0x00	; 0
    433a:	40 31       	cpi	r20, 0x10	; 16
    433c:	51 05       	cpc	r21, r1
    433e:	08 f0       	brcs	.+2      	; 0x4342 <_ZN11LCDPageItem5printEP17LiquidCrystal_I2C+0x46>
    4340:	6c c1       	rjmp	.+728    	; 0x461a <_ZN11LCDPageItem5printEP17LiquidCrystal_I2C+0x31e>
    4342:	fa 01       	movw	r30, r20
    4344:	88 27       	eor	r24, r24
    4346:	ee 58       	subi	r30, 0x8E	; 142
    4348:	ff 4f       	sbci	r31, 0xFF	; 255
    434a:	8f 4f       	sbci	r24, 0xFF	; 255
    434c:	0c 94 68 3b 	jmp	0x76d0	; 0x76d0 <__tablejump2__>
		case None:
			break;
			
		case StaticInt:
			LCD->print(IntVal);
    4350:	d8 01       	movw	r26, r16
    4352:	1e 96       	adiw	r26, 0x0e	; 14
    4354:	6d 91       	ld	r22, X+
    4356:	7c 91       	ld	r23, X
    4358:	1f 97       	sbiw	r26, 0x0f	; 15
    435a:	4a e0       	ldi	r20, 0x0A	; 10
    435c:	50 e0       	ldi	r21, 0x00	; 0
    435e:	c7 01       	movw	r24, r14
    4360:	0e 94 5d 32 	call	0x64ba	; 0x64ba <_ZN5Print5printEii>
			break;
    4364:	5a c1       	rjmp	.+692    	; 0x461a <_ZN11LCDPageItem5printEP17LiquidCrystal_I2C+0x31e>
		
		case StaticUInt:
			LCD->print(UIntVal);
    4366:	f8 01       	movw	r30, r16
    4368:	60 89       	ldd	r22, Z+16	; 0x10
    436a:	71 89       	ldd	r23, Z+17	; 0x11
    436c:	4a e0       	ldi	r20, 0x0A	; 10
    436e:	50 e0       	ldi	r21, 0x00	; 0
    4370:	c7 01       	movw	r24, r14
    4372:	0e 94 5d 32 	call	0x64ba	; 0x64ba <_ZN5Print5printEii>
			break;
    4376:	51 c1       	rjmp	.+674    	; 0x461a <_ZN11LCDPageItem5printEP17LiquidCrystal_I2C+0x31e>
		
		case StaticLong:
			LCD->print(LongVal);
    4378:	d8 01       	movw	r26, r16
    437a:	52 96       	adiw	r26, 0x12	; 18
    437c:	6d 91       	ld	r22, X+
    437e:	7c 91       	ld	r23, X
    4380:	53 97       	sbiw	r26, 0x13	; 19
    4382:	4a e0       	ldi	r20, 0x0A	; 10
    4384:	50 e0       	ldi	r21, 0x00	; 0
    4386:	c7 01       	movw	r24, r14
    4388:	0e 94 5d 32 	call	0x64ba	; 0x64ba <_ZN5Print5printEii>
			break;
    438c:	46 c1       	rjmp	.+652    	; 0x461a <_ZN11LCDPageItem5printEP17LiquidCrystal_I2C+0x31e>
		
		case StaticULong:
			LCD->print(ULongVal);
    438e:	f8 01       	movw	r30, r16
    4390:	64 89       	ldd	r22, Z+20	; 0x14
    4392:	75 89       	ldd	r23, Z+21	; 0x15
    4394:	4a e0       	ldi	r20, 0x0A	; 10
    4396:	50 e0       	ldi	r21, 0x00	; 0
    4398:	c7 01       	movw	r24, r14
    439a:	0e 94 5d 32 	call	0x64ba	; 0x64ba <_ZN5Print5printEii>
			break;
    439e:	3d c1       	rjmp	.+634    	; 0x461a <_ZN11LCDPageItem5printEP17LiquidCrystal_I2C+0x31e>
		
		case StaticFloat:
			LCD->print(FltVal);
    43a0:	d8 01       	movw	r26, r16
    43a2:	19 96       	adiw	r26, 0x09	; 9
    43a4:	4d 91       	ld	r20, X+
    43a6:	5d 91       	ld	r21, X+
    43a8:	6d 91       	ld	r22, X+
    43aa:	7c 91       	ld	r23, X
    43ac:	1c 97       	sbiw	r26, 0x0c	; 12
    43ae:	22 e0       	ldi	r18, 0x02	; 2
    43b0:	30 e0       	ldi	r19, 0x00	; 0
    43b2:	c7 01       	movw	r24, r14
    43b4:	0e 94 81 33 	call	0x6702	; 0x6702 <_ZN5Print5printEdi>
			break;
    43b8:	30 c1       	rjmp	.+608    	; 0x461a <_ZN11LCDPageItem5printEP17LiquidCrystal_I2C+0x31e>
		
		case StaticBool:
			LCD->print(BlnVal);
    43ba:	f8 01       	movw	r30, r16
    43bc:	65 85       	ldd	r22, Z+13	; 0x0d
    43be:	70 e0       	ldi	r23, 0x00	; 0
    43c0:	4a e0       	ldi	r20, 0x0A	; 10
    43c2:	50 e0       	ldi	r21, 0x00	; 0
    43c4:	c7 01       	movw	r24, r14
    43c6:	0e 94 5d 32 	call	0x64ba	; 0x64ba <_ZN5Print5printEii>
			break;
    43ca:	27 c1       	rjmp	.+590    	; 0x461a <_ZN11LCDPageItem5printEP17LiquidCrystal_I2C+0x31e>
		
		case StaticBoolWithText:
			if(BlnVal == true){
    43cc:	d8 01       	movw	r26, r16
    43ce:	1d 96       	adiw	r26, 0x0d	; 13
    43d0:	8c 91       	ld	r24, X
    43d2:	88 23       	and	r24, r24
    43d4:	39 f0       	breq	.+14     	; 0x43e4 <_ZN11LCDPageItem5printEP17LiquidCrystal_I2C+0xe8>
				LCD->print(BoolTrueText);
    43d6:	b8 01       	movw	r22, r16
    43d8:	68 5e       	subi	r22, 0xE8	; 232
    43da:	7f 4f       	sbci	r23, 0xFF	; 255
    43dc:	c7 01       	movw	r24, r14
    43de:	0e 94 69 31 	call	0x62d2	; 0x62d2 <_ZN5Print5printERK6String>
    43e2:	1b c1       	rjmp	.+566    	; 0x461a <_ZN11LCDPageItem5printEP17LiquidCrystal_I2C+0x31e>
			}else{
				LCD->print(BoolFalseText);
    43e4:	b8 01       	movw	r22, r16
    43e6:	62 5e       	subi	r22, 0xE2	; 226
    43e8:	7f 4f       	sbci	r23, 0xFF	; 255
    43ea:	c7 01       	movw	r24, r14
    43ec:	0e 94 69 31 	call	0x62d2	; 0x62d2 <_ZN5Print5printERK6String>
    43f0:	14 c1       	rjmp	.+552    	; 0x461a <_ZN11LCDPageItem5printEP17LiquidCrystal_I2C+0x31e>
			}
			break;
		
		case StaticString:
			Serial.print("Printing Staic String: " + StrVal);
    43f2:	0d 5f       	subi	r16, 0xFD	; 253
    43f4:	1f 4f       	sbci	r17, 0xFF	; 255

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    43f6:	6c e7       	ldi	r22, 0x7C	; 124
    43f8:	73 e0       	ldi	r23, 0x03	; 3
    43fa:	ce 01       	movw	r24, r28
    43fc:	07 96       	adiw	r24, 0x07	; 7
    43fe:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
    4402:	b8 01       	movw	r22, r16
    4404:	ce 01       	movw	r24, r28
    4406:	07 96       	adiw	r24, 0x07	; 7
    4408:	0e 94 a6 38 	call	0x714c	; 0x714c <_ZplRK15StringSumHelperRK6String>
    440c:	bc 01       	movw	r22, r24
    440e:	82 e4       	ldi	r24, 0x42	; 66
    4410:	96 e0       	ldi	r25, 0x06	; 6
    4412:	0e 94 69 31 	call	0x62d2	; 0x62d2 <_ZN5Print5printERK6String>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    4416:	ce 01       	movw	r24, r28
    4418:	07 96       	adiw	r24, 0x07	; 7
    441a:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <_ZN6StringD1Ev>
			LCD->print(StrVal);
    441e:	b8 01       	movw	r22, r16
    4420:	c7 01       	movw	r24, r14
    4422:	0e 94 69 31 	call	0x62d2	; 0x62d2 <_ZN5Print5printERK6String>
			break;
    4426:	f9 c0       	rjmp	.+498    	; 0x461a <_ZN11LCDPageItem5printEP17LiquidCrystal_I2C+0x31e>
		
		case VarInt:
			if( IntVal != *IntRef ){
    4428:	d8 01       	movw	r26, r16
    442a:	9a 96       	adiw	r26, 0x2a	; 42
    442c:	ed 91       	ld	r30, X+
    442e:	fc 91       	ld	r31, X
    4430:	9b 97       	sbiw	r26, 0x2b	; 43
    4432:	60 81       	ld	r22, Z
    4434:	71 81       	ldd	r23, Z+1	; 0x01
    4436:	1e 96       	adiw	r26, 0x0e	; 14
    4438:	8d 91       	ld	r24, X+
    443a:	9c 91       	ld	r25, X
    443c:	1f 97       	sbiw	r26, 0x0f	; 15
    443e:	86 17       	cp	r24, r22
    4440:	97 07       	cpc	r25, r23
    4442:	09 f4       	brne	.+2      	; 0x4446 <_ZN11LCDPageItem5printEP17LiquidCrystal_I2C+0x14a>
    4444:	ea c0       	rjmp	.+468    	; 0x461a <_ZN11LCDPageItem5printEP17LiquidCrystal_I2C+0x31e>
				IntVal = *IntRef;
    4446:	1f 96       	adiw	r26, 0x0f	; 15
    4448:	7c 93       	st	X, r23
    444a:	6e 93       	st	-X, r22
    444c:	1e 97       	sbiw	r26, 0x0e	; 14
				LCD->print(IntVal);
    444e:	4a e0       	ldi	r20, 0x0A	; 10
    4450:	50 e0       	ldi	r21, 0x00	; 0
    4452:	c7 01       	movw	r24, r14
    4454:	0e 94 5d 32 	call	0x64ba	; 0x64ba <_ZN5Print5printEii>
    4458:	e0 c0       	rjmp	.+448    	; 0x461a <_ZN11LCDPageItem5printEP17LiquidCrystal_I2C+0x31e>
			}
			break;
		
		case VarUInt:
			if( UIntVal != *UIntRef ){
    445a:	d8 01       	movw	r26, r16
    445c:	9c 96       	adiw	r26, 0x2c	; 44
    445e:	ed 91       	ld	r30, X+
    4460:	fc 91       	ld	r31, X
    4462:	9d 97       	sbiw	r26, 0x2d	; 45
    4464:	60 81       	ld	r22, Z
    4466:	71 81       	ldd	r23, Z+1	; 0x01
    4468:	50 96       	adiw	r26, 0x10	; 16
    446a:	8d 91       	ld	r24, X+
    446c:	9c 91       	ld	r25, X
    446e:	51 97       	sbiw	r26, 0x11	; 17
    4470:	86 17       	cp	r24, r22
    4472:	97 07       	cpc	r25, r23
    4474:	09 f4       	brne	.+2      	; 0x4478 <_ZN11LCDPageItem5printEP17LiquidCrystal_I2C+0x17c>
    4476:	d1 c0       	rjmp	.+418    	; 0x461a <_ZN11LCDPageItem5printEP17LiquidCrystal_I2C+0x31e>
				UIntVal = *UIntRef;
    4478:	51 96       	adiw	r26, 0x11	; 17
    447a:	7c 93       	st	X, r23
    447c:	6e 93       	st	-X, r22
    447e:	50 97       	sbiw	r26, 0x10	; 16
				LCD->print(UIntVal);
    4480:	4a e0       	ldi	r20, 0x0A	; 10
    4482:	50 e0       	ldi	r21, 0x00	; 0
    4484:	c7 01       	movw	r24, r14
    4486:	0e 94 5d 32 	call	0x64ba	; 0x64ba <_ZN5Print5printEii>
    448a:	c7 c0       	rjmp	.+398    	; 0x461a <_ZN11LCDPageItem5printEP17LiquidCrystal_I2C+0x31e>
			}
			break;
		
		case VarLong:
			if( LongVal != *LongRef ){
    448c:	d8 01       	movw	r26, r16
    448e:	9e 96       	adiw	r26, 0x2e	; 46
    4490:	ed 91       	ld	r30, X+
    4492:	fc 91       	ld	r31, X
    4494:	9f 97       	sbiw	r26, 0x2f	; 47
    4496:	80 80       	ld	r8, Z
    4498:	91 80       	ldd	r9, Z+1	; 0x01
    449a:	a2 80       	ldd	r10, Z+2	; 0x02
    449c:	b3 80       	ldd	r11, Z+3	; 0x03
    449e:	52 96       	adiw	r26, 0x12	; 18
    44a0:	8d 91       	ld	r24, X+
    44a2:	9c 91       	ld	r25, X
    44a4:	53 97       	sbiw	r26, 0x13	; 19
    44a6:	09 2e       	mov	r0, r25
    44a8:	00 0c       	add	r0, r0
    44aa:	aa 0b       	sbc	r26, r26
    44ac:	bb 0b       	sbc	r27, r27
    44ae:	88 15       	cp	r24, r8
    44b0:	99 05       	cpc	r25, r9
    44b2:	aa 05       	cpc	r26, r10
    44b4:	bb 05       	cpc	r27, r11
    44b6:	09 f4       	brne	.+2      	; 0x44ba <_ZN11LCDPageItem5printEP17LiquidCrystal_I2C+0x1be>
    44b8:	b0 c0       	rjmp	.+352    	; 0x461a <_ZN11LCDPageItem5printEP17LiquidCrystal_I2C+0x31e>
				LongVal = *LongRef;
    44ba:	f8 01       	movw	r30, r16
    44bc:	93 8a       	std	Z+19, r9	; 0x13
    44be:	82 8a       	std	Z+18, r8	; 0x12
				LCD->print(LongVal);
    44c0:	4a e0       	ldi	r20, 0x0A	; 10
    44c2:	50 e0       	ldi	r21, 0x00	; 0
    44c4:	b4 01       	movw	r22, r8
    44c6:	c7 01       	movw	r24, r14
    44c8:	0e 94 5d 32 	call	0x64ba	; 0x64ba <_ZN5Print5printEii>
    44cc:	a6 c0       	rjmp	.+332    	; 0x461a <_ZN11LCDPageItem5printEP17LiquidCrystal_I2C+0x31e>
			}
			break;	
		
		case VarULong:
			if( ULongVal != *ULongRef ){
    44ce:	d8 01       	movw	r26, r16
    44d0:	d0 96       	adiw	r26, 0x30	; 48
    44d2:	ed 91       	ld	r30, X+
    44d4:	fc 91       	ld	r31, X
    44d6:	d1 97       	sbiw	r26, 0x31	; 49
    44d8:	80 80       	ld	r8, Z
    44da:	91 80       	ldd	r9, Z+1	; 0x01
    44dc:	a2 80       	ldd	r10, Z+2	; 0x02
    44de:	b3 80       	ldd	r11, Z+3	; 0x03
    44e0:	54 96       	adiw	r26, 0x14	; 20
    44e2:	8d 91       	ld	r24, X+
    44e4:	9c 91       	ld	r25, X
    44e6:	55 97       	sbiw	r26, 0x15	; 21
    44e8:	09 2e       	mov	r0, r25
    44ea:	00 0c       	add	r0, r0
    44ec:	aa 0b       	sbc	r26, r26
    44ee:	bb 0b       	sbc	r27, r27
    44f0:	88 15       	cp	r24, r8
    44f2:	99 05       	cpc	r25, r9
    44f4:	aa 05       	cpc	r26, r10
    44f6:	bb 05       	cpc	r27, r11
    44f8:	09 f4       	brne	.+2      	; 0x44fc <_ZN11LCDPageItem5printEP17LiquidCrystal_I2C+0x200>
    44fa:	8f c0       	rjmp	.+286    	; 0x461a <_ZN11LCDPageItem5printEP17LiquidCrystal_I2C+0x31e>
				ULongVal = *ULongRef;
    44fc:	f8 01       	movw	r30, r16
    44fe:	95 8a       	std	Z+21, r9	; 0x15
    4500:	84 8a       	std	Z+20, r8	; 0x14
				LCD->print(ULongVal);
    4502:	4a e0       	ldi	r20, 0x0A	; 10
    4504:	50 e0       	ldi	r21, 0x00	; 0
    4506:	b4 01       	movw	r22, r8
    4508:	c7 01       	movw	r24, r14
    450a:	0e 94 5d 32 	call	0x64ba	; 0x64ba <_ZN5Print5printEii>
    450e:	85 c0       	rjmp	.+266    	; 0x461a <_ZN11LCDPageItem5printEP17LiquidCrystal_I2C+0x31e>
			}
			break;
			
		case VarFloat:
			if( FltVal != *FltRef ){
    4510:	d8 01       	movw	r26, r16
    4512:	96 96       	adiw	r26, 0x26	; 38
    4514:	ed 91       	ld	r30, X+
    4516:	fc 91       	ld	r31, X
    4518:	97 97       	sbiw	r26, 0x27	; 39
    451a:	80 80       	ld	r8, Z
    451c:	91 80       	ldd	r9, Z+1	; 0x01
    451e:	a2 80       	ldd	r10, Z+2	; 0x02
    4520:	b3 80       	ldd	r11, Z+3	; 0x03
    4522:	a5 01       	movw	r20, r10
    4524:	94 01       	movw	r18, r8
    4526:	19 96       	adiw	r26, 0x09	; 9
    4528:	6d 91       	ld	r22, X+
    452a:	7d 91       	ld	r23, X+
    452c:	8d 91       	ld	r24, X+
    452e:	9c 91       	ld	r25, X
    4530:	1c 97       	sbiw	r26, 0x0c	; 12
    4532:	0e 94 79 39 	call	0x72f2	; 0x72f2 <__cmpsf2>
    4536:	88 23       	and	r24, r24
    4538:	09 f4       	brne	.+2      	; 0x453c <_ZN11LCDPageItem5printEP17LiquidCrystal_I2C+0x240>
    453a:	6f c0       	rjmp	.+222    	; 0x461a <_ZN11LCDPageItem5printEP17LiquidCrystal_I2C+0x31e>
				FltVal = *FltRef;
    453c:	f8 01       	movw	r30, r16
    453e:	81 86       	std	Z+9, r8	; 0x09
    4540:	92 86       	std	Z+10, r9	; 0x0a
    4542:	a3 86       	std	Z+11, r10	; 0x0b
    4544:	b4 86       	std	Z+12, r11	; 0x0c
				LCD->print(FltVal);
    4546:	22 e0       	ldi	r18, 0x02	; 2
    4548:	30 e0       	ldi	r19, 0x00	; 0
    454a:	b5 01       	movw	r22, r10
    454c:	a4 01       	movw	r20, r8
    454e:	c7 01       	movw	r24, r14
    4550:	0e 94 81 33 	call	0x6702	; 0x6702 <_ZN5Print5printEdi>
    4554:	62 c0       	rjmp	.+196    	; 0x461a <_ZN11LCDPageItem5printEP17LiquidCrystal_I2C+0x31e>
			}
			break;
			
		case VarBool:
			if( BlnVal != *BlnRef ){
    4556:	d8 01       	movw	r26, r16
    4558:	98 96       	adiw	r26, 0x28	; 40
    455a:	ed 91       	ld	r30, X+
    455c:	fc 91       	ld	r31, X
    455e:	99 97       	sbiw	r26, 0x29	; 41
    4560:	60 81       	ld	r22, Z
    4562:	1d 96       	adiw	r26, 0x0d	; 13
    4564:	8c 91       	ld	r24, X
    4566:	1d 97       	sbiw	r26, 0x0d	; 13
    4568:	86 17       	cp	r24, r22
    456a:	09 f4       	brne	.+2      	; 0x456e <_ZN11LCDPageItem5printEP17LiquidCrystal_I2C+0x272>
    456c:	56 c0       	rjmp	.+172    	; 0x461a <_ZN11LCDPageItem5printEP17LiquidCrystal_I2C+0x31e>
				BlnVal = *BlnRef;
    456e:	1d 96       	adiw	r26, 0x0d	; 13
    4570:	6c 93       	st	X, r22
				LCD->print(BlnVal);
    4572:	70 e0       	ldi	r23, 0x00	; 0
    4574:	4a e0       	ldi	r20, 0x0A	; 10
    4576:	50 e0       	ldi	r21, 0x00	; 0
    4578:	c7 01       	movw	r24, r14
    457a:	0e 94 5d 32 	call	0x64ba	; 0x64ba <_ZN5Print5printEii>
    457e:	4d c0       	rjmp	.+154    	; 0x461a <_ZN11LCDPageItem5printEP17LiquidCrystal_I2C+0x31e>
			}
			break; 
			
		case VarBoolWithText:
			if(BlnVal != *BlnRef){
    4580:	d8 01       	movw	r26, r16
    4582:	98 96       	adiw	r26, 0x28	; 40
    4584:	ed 91       	ld	r30, X+
    4586:	fc 91       	ld	r31, X
    4588:	99 97       	sbiw	r26, 0x29	; 41
    458a:	1d 96       	adiw	r26, 0x0d	; 13
    458c:	9c 91       	ld	r25, X
    458e:	80 81       	ld	r24, Z
    4590:	98 17       	cp	r25, r24
    4592:	09 f4       	brne	.+2      	; 0x4596 <_ZN11LCDPageItem5printEP17LiquidCrystal_I2C+0x29a>
    4594:	42 c0       	rjmp	.+132    	; 0x461a <_ZN11LCDPageItem5printEP17LiquidCrystal_I2C+0x31e>
				BlnVal = BlnRef;
    4596:	81 e0       	ldi	r24, 0x01	; 1
    4598:	ef 2b       	or	r30, r31
    459a:	09 f4       	brne	.+2      	; 0x459e <_ZN11LCDPageItem5printEP17LiquidCrystal_I2C+0x2a2>
    459c:	80 e0       	ldi	r24, 0x00	; 0
    459e:	f8 01       	movw	r30, r16
    45a0:	85 87       	std	Z+13, r24	; 0x0d
				if(BlnVal == true){
    45a2:	88 23       	and	r24, r24
    45a4:	39 f0       	breq	.+14     	; 0x45b4 <_ZN11LCDPageItem5printEP17LiquidCrystal_I2C+0x2b8>
					LCD->print(BoolTrueText);
    45a6:	b8 01       	movw	r22, r16
    45a8:	68 5e       	subi	r22, 0xE8	; 232
    45aa:	7f 4f       	sbci	r23, 0xFF	; 255
    45ac:	c7 01       	movw	r24, r14
    45ae:	0e 94 69 31 	call	0x62d2	; 0x62d2 <_ZN5Print5printERK6String>
    45b2:	33 c0       	rjmp	.+102    	; 0x461a <_ZN11LCDPageItem5printEP17LiquidCrystal_I2C+0x31e>
				}else{
					LCD->print(BoolFalseText);	
    45b4:	b8 01       	movw	r22, r16
    45b6:	62 5e       	subi	r22, 0xE2	; 226
    45b8:	7f 4f       	sbci	r23, 0xFF	; 255
    45ba:	c7 01       	movw	r24, r14
    45bc:	0e 94 69 31 	call	0x62d2	; 0x62d2 <_ZN5Print5printERK6String>
    45c0:	2c c0       	rjmp	.+88     	; 0x461a <_ZN11LCDPageItem5printEP17LiquidCrystal_I2C+0x31e>
				}
			}
			break;
			
		case VarString:
			if( StrVal != *StrRef ){
    45c2:	68 01       	movw	r12, r16
    45c4:	f3 e0       	ldi	r31, 0x03	; 3
    45c6:	cf 0e       	add	r12, r31
    45c8:	d1 1c       	adc	r13, r1
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
    45ca:	d8 01       	movw	r26, r16
    45cc:	94 96       	adiw	r26, 0x24	; 36
    45ce:	6d 91       	ld	r22, X+
    45d0:	7c 91       	ld	r23, X
    45d2:	95 97       	sbiw	r26, 0x25	; 37
    45d4:	c6 01       	movw	r24, r12
    45d6:	0e 94 02 39 	call	0x7204	; 0x7204 <_ZNK6String6equalsERKS_>
    45da:	81 11       	cpse	r24, r1
    45dc:	1e c0       	rjmp	.+60     	; 0x461a <_ZN11LCDPageItem5printEP17LiquidCrystal_I2C+0x31e>
				StrVal = *StrRef;
    45de:	f8 01       	movw	r30, r16
    45e0:	64 a1       	ldd	r22, Z+36	; 0x24
    45e2:	75 a1       	ldd	r23, Z+37	; 0x25
    45e4:	c6 01       	movw	r24, r12
    45e6:	0e 94 5a 38 	call	0x70b4	; 0x70b4 <_ZN6StringaSERKS_>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    45ea:	64 e9       	ldi	r22, 0x94	; 148
    45ec:	73 e0       	ldi	r23, 0x03	; 3
    45ee:	ce 01       	movw	r24, r28
    45f0:	01 96       	adiw	r24, 0x01	; 1
    45f2:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
				Serial.print("Printing Var String: " + StrVal);
    45f6:	b6 01       	movw	r22, r12
    45f8:	ce 01       	movw	r24, r28
    45fa:	01 96       	adiw	r24, 0x01	; 1
    45fc:	0e 94 a6 38 	call	0x714c	; 0x714c <_ZplRK15StringSumHelperRK6String>
    4600:	bc 01       	movw	r22, r24
    4602:	82 e4       	ldi	r24, 0x42	; 66
    4604:	96 e0       	ldi	r25, 0x06	; 6
    4606:	0e 94 69 31 	call	0x62d2	; 0x62d2 <_ZN5Print5printERK6String>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    460a:	ce 01       	movw	r24, r28
    460c:	01 96       	adiw	r24, 0x01	; 1
    460e:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <_ZN6StringD1Ev>
				LCD->print(StrVal);
    4612:	b6 01       	movw	r22, r12
    4614:	c7 01       	movw	r24, r14
    4616:	0e 94 69 31 	call	0x62d2	; 0x62d2 <_ZN5Print5printERK6String>
			}
			break;
			
	}
    461a:	2c 96       	adiw	r28, 0x0c	; 12
    461c:	0f b6       	in	r0, 0x3f	; 63
    461e:	f8 94       	cli
    4620:	de bf       	out	0x3e, r29	; 62
    4622:	0f be       	out	0x3f, r0	; 63
    4624:	cd bf       	out	0x3d, r28	; 61
    4626:	df 91       	pop	r29
    4628:	cf 91       	pop	r28
    462a:	1f 91       	pop	r17
    462c:	0f 91       	pop	r16
    462e:	ff 90       	pop	r15
    4630:	ef 90       	pop	r14
    4632:	df 90       	pop	r13
    4634:	cf 90       	pop	r12
    4636:	bf 90       	pop	r11
    4638:	af 90       	pop	r10
    463a:	9f 90       	pop	r9
    463c:	8f 90       	pop	r8
    463e:	08 95       	ret

00004640 <_ZN15LCDToggleOptionD1Ev>:
		case(StaticBool):
			BlnVal=_value;
			break;
		case(VarBool):
			*BlnRef = _value;
			BlnVal = *BlnRef;
    4640:	cf 93       	push	r28
    4642:	df 93       	push	r29
    4644:	ec 01       	movw	r28, r24
    4646:	0d 96       	adiw	r24, 0x0d	; 13
    4648:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <_ZN6StringD1Ev>
    464c:	ce 01       	movw	r24, r28
    464e:	07 96       	adiw	r24, 0x07	; 7
    4650:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <_ZN6StringD1Ev>
    4654:	ce 01       	movw	r24, r28
    4656:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <_ZN6StringD1Ev>
    465a:	df 91       	pop	r29
    465c:	cf 91       	pop	r28
    465e:	08 95       	ret

00004660 <_ZN15LCDToggleOption9TrueLabelEv>:
    4660:	cf 93       	push	r28
    4662:	df 93       	push	r29
    4664:	ec 01       	movw	r28, r24
    4666:	fb 01       	movw	r30, r22
    4668:	86 81       	ldd	r24, Z+6	; 0x06
    466a:	81 30       	cpi	r24, 0x01	; 1
    466c:	69 f0       	breq	.+26     	; 0x4688 <_ZN15LCDToggleOption9TrueLabelEv+0x28>
    466e:	18 f0       	brcs	.+6      	; 0x4676 <_ZN15LCDToggleOption9TrueLabelEv+0x16>
    4670:	82 30       	cpi	r24, 0x02	; 2
    4672:	81 f0       	breq	.+32     	; 0x4694 <_ZN15LCDToggleOption9TrueLabelEv+0x34>
    4674:	15 c0       	rjmp	.+42     	; 0x46a0 <_ZN15LCDToggleOption9TrueLabelEv+0x40>
    4676:	fb 01       	movw	r30, r22
    4678:	66 89       	ldd	r22, Z+22	; 0x16
    467a:	77 89       	ldd	r23, Z+23	; 0x17
    467c:	6d 5f       	subi	r22, 0xFD	; 253
    467e:	7f 4f       	sbci	r23, 0xFF	; 255
    4680:	ce 01       	movw	r24, r28
    4682:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    4686:	0c c0       	rjmp	.+24     	; 0x46a0 <_ZN15LCDToggleOption9TrueLabelEv+0x40>
    4688:	69 5f       	subi	r22, 0xF9	; 249
    468a:	7f 4f       	sbci	r23, 0xFF	; 255
    468c:	ce 01       	movw	r24, r28
    468e:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    4692:	06 c0       	rjmp	.+12     	; 0x46a0 <_ZN15LCDToggleOption9TrueLabelEv+0x40>
    4694:	69 5f       	subi	r22, 0xF9	; 249
    4696:	7f 4f       	sbci	r23, 0xFF	; 255
    4698:	ce 01       	movw	r24, r28
    469a:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    469e:	00 c0       	rjmp	.+0      	; 0x46a0 <_ZN15LCDToggleOption9TrueLabelEv+0x40>
    46a0:	ce 01       	movw	r24, r28
    46a2:	df 91       	pop	r29
    46a4:	cf 91       	pop	r28
    46a6:	08 95       	ret

000046a8 <_ZN15LCDToggleOption10FalseLabelEv>:
    46a8:	cf 93       	push	r28
    46aa:	df 93       	push	r29
    46ac:	ec 01       	movw	r28, r24
    46ae:	fb 01       	movw	r30, r22
    46b0:	86 81       	ldd	r24, Z+6	; 0x06
    46b2:	81 30       	cpi	r24, 0x01	; 1
    46b4:	69 f0       	breq	.+26     	; 0x46d0 <_ZN15LCDToggleOption10FalseLabelEv+0x28>
    46b6:	18 f0       	brcs	.+6      	; 0x46be <_ZN15LCDToggleOption10FalseLabelEv+0x16>
    46b8:	82 30       	cpi	r24, 0x02	; 2
    46ba:	81 f0       	breq	.+32     	; 0x46dc <_ZN15LCDToggleOption10FalseLabelEv+0x34>
    46bc:	15 c0       	rjmp	.+42     	; 0x46e8 <_ZN15LCDToggleOption10FalseLabelEv+0x40>
    46be:	fb 01       	movw	r30, r22
    46c0:	66 89       	ldd	r22, Z+22	; 0x16
    46c2:	77 89       	ldd	r23, Z+23	; 0x17
    46c4:	67 5f       	subi	r22, 0xF7	; 247
    46c6:	7f 4f       	sbci	r23, 0xFF	; 255
    46c8:	ce 01       	movw	r24, r28
    46ca:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    46ce:	0c c0       	rjmp	.+24     	; 0x46e8 <_ZN15LCDToggleOption10FalseLabelEv+0x40>
    46d0:	63 5f       	subi	r22, 0xF3	; 243
    46d2:	7f 4f       	sbci	r23, 0xFF	; 255
    46d4:	ce 01       	movw	r24, r28
    46d6:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    46da:	06 c0       	rjmp	.+12     	; 0x46e8 <_ZN15LCDToggleOption10FalseLabelEv+0x40>
    46dc:	63 5f       	subi	r22, 0xF3	; 243
    46de:	7f 4f       	sbci	r23, 0xFF	; 255
    46e0:	ce 01       	movw	r24, r28
    46e2:	0e 94 6f 38 	call	0x70de	; 0x70de <_ZN6StringC1ERKS_>
    46e6:	00 c0       	rjmp	.+0      	; 0x46e8 <_ZN15LCDToggleOption10FalseLabelEv+0x40>
    46e8:	ce 01       	movw	r24, r28
    46ea:	df 91       	pop	r29
    46ec:	cf 91       	pop	r28
    46ee:	08 95       	ret

000046f0 <_ZN15LCDToggleOption5ValueEv>:
    46f0:	dc 01       	movw	r26, r24
    46f2:	16 96       	adiw	r26, 0x06	; 6
    46f4:	2c 91       	ld	r18, X
    46f6:	21 30       	cpi	r18, 0x01	; 1
    46f8:	59 f0       	breq	.+22     	; 0x4710 <_ZN15LCDToggleOption5ValueEv+0x20>
    46fa:	18 f0       	brcs	.+6      	; 0x4702 <_ZN15LCDToggleOption5ValueEv+0x12>
    46fc:	22 30       	cpi	r18, 0x02	; 2
    46fe:	61 f0       	breq	.+24     	; 0x4718 <_ZN15LCDToggleOption5ValueEv+0x28>
    4700:	15 c0       	rjmp	.+42     	; 0x472c <_ZN15LCDToggleOption5ValueEv+0x3c>
    4702:	fc 01       	movw	r30, r24
    4704:	86 89       	ldd	r24, Z+22	; 0x16
    4706:	97 89       	ldd	r25, Z+23	; 0x17
    4708:	0e 94 2b 02 	call	0x456	; 0x456 <_ZN5DigIO5ValueEv>
    470c:	9c 01       	movw	r18, r24
    470e:	0f c0       	rjmp	.+30     	; 0x472e <_ZN15LCDToggleOption5ValueEv+0x3e>
    4710:	fc 01       	movw	r30, r24
    4712:	23 89       	ldd	r18, Z+19	; 0x13
    4714:	30 e0       	ldi	r19, 0x00	; 0
    4716:	0b c0       	rjmp	.+22     	; 0x472e <_ZN15LCDToggleOption5ValueEv+0x3e>
    4718:	dc 01       	movw	r26, r24
    471a:	54 96       	adiw	r26, 0x14	; 20
    471c:	ed 91       	ld	r30, X+
    471e:	fc 91       	ld	r31, X
    4720:	55 97       	sbiw	r26, 0x15	; 21
    4722:	20 81       	ld	r18, Z
    4724:	53 96       	adiw	r26, 0x13	; 19
    4726:	2c 93       	st	X, r18
    4728:	30 e0       	ldi	r19, 0x00	; 0
    472a:	01 c0       	rjmp	.+2      	; 0x472e <_ZN15LCDToggleOption5ValueEv+0x3e>
    472c:	08 95       	ret
    472e:	82 2f       	mov	r24, r18
    4730:	93 2f       	mov	r25, r19
    4732:	08 95       	ret

00004734 <_ZN15LCDToggleOption6ToggleEv>:
			break;
	}
}

void LCDToggleOption::Toggle(void){
    4734:	cf 93       	push	r28
    4736:	df 93       	push	r29
    4738:	fc 01       	movw	r30, r24
	switch(Type){
    473a:	86 81       	ldd	r24, Z+6	; 0x06
    473c:	81 30       	cpi	r24, 0x01	; 1
    473e:	b9 f0       	breq	.+46     	; 0x476e <_ZN15LCDToggleOption6ToggleEv+0x3a>
    4740:	18 f0       	brcs	.+6      	; 0x4748 <_ZN15LCDToggleOption6ToggleEv+0x14>
    4742:	82 30       	cpi	r24, 0x02	; 2
    4744:	c9 f0       	breq	.+50     	; 0x4778 <_ZN15LCDToggleOption6ToggleEv+0x44>
    4746:	22 c0       	rjmp	.+68     	; 0x478c <_ZN15LCDToggleOption6ToggleEv+0x58>
		case(VarDigIO):
			DigIO *DIO;
			DIO = DIORef;
    4748:	c6 89       	ldd	r28, Z+22	; 0x16
    474a:	d7 89       	ldd	r29, Z+23	; 0x17
			if ((*DIO).Value()){
    474c:	ce 01       	movw	r24, r28
    474e:	0e 94 2b 02 	call	0x456	; 0x456 <_ZN5DigIO5ValueEv>
    4752:	89 2b       	or	r24, r25
    4754:	31 f0       	breq	.+12     	; 0x4762 <_ZN15LCDToggleOption6ToggleEv+0x2e>
				(*DIO).Write(0);
    4756:	60 e0       	ldi	r22, 0x00	; 0
    4758:	70 e0       	ldi	r23, 0x00	; 0
    475a:	ce 01       	movw	r24, r28
    475c:	0e 94 44 02 	call	0x488	; 0x488 <_ZN5DigIO5WriteEi>
    4760:	15 c0       	rjmp	.+42     	; 0x478c <_ZN15LCDToggleOption6ToggleEv+0x58>
			}else{
				(*DIO).Write(1);
    4762:	61 e0       	ldi	r22, 0x01	; 1
    4764:	70 e0       	ldi	r23, 0x00	; 0
    4766:	ce 01       	movw	r24, r28
    4768:	0e 94 44 02 	call	0x488	; 0x488 <_ZN5DigIO5WriteEi>
    476c:	0f c0       	rjmp	.+30     	; 0x478c <_ZN15LCDToggleOption6ToggleEv+0x58>
			}
			break;
		case(StaticBool):
			BlnVal=!BlnVal;
    476e:	93 89       	ldd	r25, Z+19	; 0x13
    4770:	81 e0       	ldi	r24, 0x01	; 1
    4772:	89 27       	eor	r24, r25
    4774:	83 8b       	std	Z+19, r24	; 0x13
			break;
    4776:	0a c0       	rjmp	.+20     	; 0x478c <_ZN15LCDToggleOption6ToggleEv+0x58>
		case(VarBool):
			*BlnRef = !BlnVal;
    4778:	a4 89       	ldd	r26, Z+20	; 0x14
    477a:	b5 89       	ldd	r27, Z+21	; 0x15
    477c:	93 89       	ldd	r25, Z+19	; 0x13
    477e:	81 e0       	ldi	r24, 0x01	; 1
    4780:	89 27       	eor	r24, r25
    4782:	8c 93       	st	X, r24
			BlnVal = *BlnRef;
    4784:	a4 89       	ldd	r26, Z+20	; 0x14
    4786:	b5 89       	ldd	r27, Z+21	; 0x15
    4788:	8c 91       	ld	r24, X
    478a:	83 8b       	std	Z+19, r24	; 0x13
			break;
	}
}
    478c:	df 91       	pop	r29
    478e:	cf 91       	pop	r28
    4790:	08 95       	ret

00004792 <_ZN15LCDToggleOptionC1E6StringP5DigIO>:

LCDToggleOption::LCDToggleOption(String _Label, DigIO * DigitalIOObject)
    4792:	ef 92       	push	r14
    4794:	ff 92       	push	r15
    4796:	0f 93       	push	r16
    4798:	1f 93       	push	r17
    479a:	cf 93       	push	r28
    479c:	df 93       	push	r29
    479e:	ec 01       	movw	r28, r24
    47a0:	7b 01       	movw	r14, r22
    47a2:	8a 01       	movw	r16, r20
    47a4:	6e ee       	ldi	r22, 0xEE	; 238
    47a6:	74 e0       	ldi	r23, 0x04	; 4
    47a8:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
    47ac:	81 e0       	ldi	r24, 0x01	; 1
    47ae:	8e 83       	std	Y+6, r24	; 0x06
    47b0:	68 e0       	ldi	r22, 0x08	; 8
    47b2:	72 e0       	ldi	r23, 0x02	; 2
    47b4:	ce 01       	movw	r24, r28
    47b6:	07 96       	adiw	r24, 0x07	; 7
    47b8:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
    47bc:	6d e0       	ldi	r22, 0x0D	; 13
    47be:	72 e0       	ldi	r23, 0x02	; 2
    47c0:	ce 01       	movw	r24, r28
    47c2:	0d 96       	adiw	r24, 0x0d	; 13
    47c4:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
    47c8:	1b 8a       	std	Y+19, r1	; 0x13
    47ca:	1d 8a       	std	Y+21, r1	; 0x15
    47cc:	1c 8a       	std	Y+20, r1	; 0x14
    47ce:	1f 8a       	std	Y+23, r1	; 0x17
    47d0:	1e 8a       	std	Y+22, r1	; 0x16
{
	Label = _Label;
    47d2:	b7 01       	movw	r22, r14
    47d4:	ce 01       	movw	r24, r28
    47d6:	0e 94 5a 38 	call	0x70b4	; 0x70b4 <_ZN6StringaSERKS_>
	Type = VarDigIO;
    47da:	1e 82       	std	Y+6, r1	; 0x06
	DIORef = DigitalIOObject;	
    47dc:	1f 8b       	std	Y+23, r17	; 0x17
    47de:	0e 8b       	std	Y+22, r16	; 0x16
}
    47e0:	df 91       	pop	r29
    47e2:	cf 91       	pop	r28
    47e4:	1f 91       	pop	r17
    47e6:	0f 91       	pop	r16
    47e8:	ff 90       	pop	r15
    47ea:	ef 90       	pop	r14
    47ec:	08 95       	ret

000047ee <_ZN13UserInterface15EncoderDblClickEv>:

UserInterface::UserInterface(String _Name){
	Name = _Name;
}

UserInterface::~UserInterface(){
    47ee:	08 95       	ret

000047f0 <_ZN13UserInterface12EncoderClickEv>:
    47f0:	fc 01       	movw	r30, r24
    47f2:	80 81       	ld	r24, Z
    47f4:	91 81       	ldd	r25, Z+1	; 0x01
    47f6:	00 97       	sbiw	r24, 0x00	; 0
    47f8:	19 f0       	breq	.+6      	; 0x4800 <_ZN13UserInterface12EncoderClickEv+0x10>
    47fa:	bf 01       	movw	r22, r30
    47fc:	0c 94 13 12 	jmp	0x2426	; 0x2426 <_ZN7LCDMenu10selectItemEP13UserInterface>
    4800:	08 95       	ret

00004802 <_ZN13UserInterface16EncoderIncrementEv>:
    4802:	fc 01       	movw	r30, r24
    4804:	80 81       	ld	r24, Z
    4806:	91 81       	ldd	r25, Z+1	; 0x01
    4808:	00 97       	sbiw	r24, 0x00	; 0
    480a:	11 f0       	breq	.+4      	; 0x4810 <_ZN13UserInterface16EncoderIncrementEv+0xe>
    480c:	0c 94 b9 10 	jmp	0x2172	; 0x2172 <_ZN7LCDMenu8nextItemEv>
    4810:	08 95       	ret

00004812 <_ZN13UserInterface16EncoderDecrementEv>:
    4812:	fc 01       	movw	r30, r24
    4814:	80 81       	ld	r24, Z
    4816:	91 81       	ldd	r25, Z+1	; 0x01
    4818:	00 97       	sbiw	r24, 0x00	; 0
    481a:	11 f0       	breq	.+4      	; 0x4820 <_ZN13UserInterface16EncoderDecrementEv+0xe>
    481c:	0c 94 98 10 	jmp	0x2130	; 0x2130 <_ZN7LCDMenu8prevItemEv>
    4820:	08 95       	ret

00004822 <_ZN13UserInterfaceC1E6String>:
    4822:	ef 92       	push	r14
    4824:	ff 92       	push	r15
    4826:	0f 93       	push	r16
    4828:	1f 93       	push	r17
    482a:	cf 93       	push	r28
    482c:	df 93       	push	r29
    482e:	ec 01       	movw	r28, r24
    4830:	7b 01       	movw	r14, r22
    4832:	19 82       	std	Y+1, r1	; 0x01
    4834:	18 82       	st	Y, r1
    4836:	1b 82       	std	Y+3, r1	; 0x03
    4838:	1a 82       	std	Y+2, r1	; 0x02
    483a:	8c 01       	movw	r16, r24
    483c:	0c 5f       	subi	r16, 0xFC	; 252
    483e:	1f 4f       	sbci	r17, 0xFF	; 255
    4840:	6e ee       	ldi	r22, 0xEE	; 238
    4842:	74 e0       	ldi	r23, 0x04	; 4
    4844:	c8 01       	movw	r24, r16
    4846:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1EPKc>
    484a:	1b 86       	std	Y+11, r1	; 0x0b
    484c:	1a 86       	std	Y+10, r1	; 0x0a
    484e:	1d 86       	std	Y+13, r1	; 0x0d
    4850:	1c 86       	std	Y+12, r1	; 0x0c
    4852:	b7 01       	movw	r22, r14
    4854:	c8 01       	movw	r24, r16
    4856:	0e 94 5a 38 	call	0x70b4	; 0x70b4 <_ZN6StringaSERKS_>
    485a:	df 91       	pop	r29
    485c:	cf 91       	pop	r28
    485e:	1f 91       	pop	r17
    4860:	0f 91       	pop	r16
    4862:	ff 90       	pop	r15
    4864:	ef 90       	pop	r14
    4866:	08 95       	ret

00004868 <_ZN13UserInterface14attatchEncoderEP22ClickEncoderWithEvents>:
}

void UserInterface::attatchEncoder(ClickEncoderWithEvents *_Encoder){
    4868:	fc 01       	movw	r30, r24
	Encoder = _Encoder;
    486a:	71 8b       	std	Z+17, r23	; 0x11
    486c:	60 8b       	std	Z+16, r22	; 0x10
	//Encoder->ClearHandlers();
	Encoder->UI = this;
    486e:	db 01       	movw	r26, r22
    4870:	1f 96       	adiw	r26, 0x0f	; 15
    4872:	9c 93       	st	X, r25
    4874:	8e 93       	st	-X, r24
    4876:	1e 97       	sbiw	r26, 0x0e	; 14
	Encoder->ClickHandler = &UserInterface::EncoderClick;
    4878:	a0 89       	ldd	r26, Z+16	; 0x10
    487a:	b1 89       	ldd	r27, Z+17	; 0x11
    487c:	88 ef       	ldi	r24, 0xF8	; 248
    487e:	93 e2       	ldi	r25, 0x23	; 35
    4880:	51 96       	adiw	r26, 0x11	; 17
    4882:	9c 93       	st	X, r25
    4884:	8e 93       	st	-X, r24
    4886:	50 97       	sbiw	r26, 0x10	; 16
    4888:	53 96       	adiw	r26, 0x13	; 19
    488a:	1c 92       	st	X, r1
    488c:	1e 92       	st	-X, r1
    488e:	52 97       	sbiw	r26, 0x12	; 18
	Encoder->DblClickHandler = &UserInterface::EncoderDblClick;
    4890:	a0 89       	ldd	r26, Z+16	; 0x10
    4892:	b1 89       	ldd	r27, Z+17	; 0x11
    4894:	87 ef       	ldi	r24, 0xF7	; 247
    4896:	93 e2       	ldi	r25, 0x23	; 35
    4898:	55 96       	adiw	r26, 0x15	; 21
    489a:	9c 93       	st	X, r25
    489c:	8e 93       	st	-X, r24
    489e:	54 97       	sbiw	r26, 0x14	; 20
    48a0:	57 96       	adiw	r26, 0x17	; 23
    48a2:	1c 92       	st	X, r1
    48a4:	1e 92       	st	-X, r1
    48a6:	56 97       	sbiw	r26, 0x16	; 22
	Encoder->IncrementHandler = &UserInterface::EncoderIncrement;
    48a8:	a0 89       	ldd	r26, Z+16	; 0x10
    48aa:	b1 89       	ldd	r27, Z+17	; 0x11
    48ac:	81 e0       	ldi	r24, 0x01	; 1
    48ae:	94 e2       	ldi	r25, 0x24	; 36
    48b0:	59 96       	adiw	r26, 0x19	; 25
    48b2:	9c 93       	st	X, r25
    48b4:	8e 93       	st	-X, r24
    48b6:	58 97       	sbiw	r26, 0x18	; 24
    48b8:	5b 96       	adiw	r26, 0x1b	; 27
    48ba:	1c 92       	st	X, r1
    48bc:	1e 92       	st	-X, r1
    48be:	5a 97       	sbiw	r26, 0x1a	; 26
	Encoder->DecrementHandler = &UserInterface::EncoderDecrement;
    48c0:	00 88       	ldd	r0, Z+16	; 0x10
    48c2:	f1 89       	ldd	r31, Z+17	; 0x11
    48c4:	e0 2d       	mov	r30, r0
    48c6:	89 e0       	ldi	r24, 0x09	; 9
    48c8:	94 e2       	ldi	r25, 0x24	; 36
    48ca:	95 8f       	std	Z+29, r25	; 0x1d
    48cc:	84 8f       	std	Z+28, r24	; 0x1c
    48ce:	17 8e       	std	Z+31, r1	; 0x1f
    48d0:	16 8e       	std	Z+30, r1	; 0x1e
    48d2:	08 95       	ret

000048d4 <_ZN13UserInterface10attatchLCDEP17LiquidCrystal_I2C>:
}

void UserInterface::attatchLCD( LiquidCrystal_I2C *_LCD ){
	LCD = _LCD;
    48d4:	fc 01       	movw	r30, r24
    48d6:	77 87       	std	Z+15, r23	; 0x0f
    48d8:	66 87       	std	Z+14, r22	; 0x0e
    48da:	08 95       	ret

000048dc <_ZN13UserInterface7displayEv>:
	if (!( CurrentMenu == NULL)){
		CurrentMenu->prevItem();
	}
}

void UserInterface::display(){
    48dc:	0f 93       	push	r16
    48de:	1f 93       	push	r17
    48e0:	cf 93       	push	r28
    48e2:	df 93       	push	r29
    48e4:	ec 01       	movw	r28, r24
	//Attatch all event handlers
	if (CurrentPage != NULL){
    48e6:	8a 81       	ldd	r24, Y+2	; 0x02
    48e8:	9b 81       	ldd	r25, Y+3	; 0x03
    48ea:	89 2b       	or	r24, r25
    48ec:	61 f0       	breq	.+24     	; 0x4906 <_ZN13UserInterface7displayEv+0x2a>
		lastDisplayMillis = millis();
    48ee:	0e 94 13 36 	call	0x6c26	; 0x6c26 <millis>
    48f2:	6a 8b       	std	Y+18, r22	; 0x12
    48f4:	7b 8b       	std	Y+19, r23	; 0x13
    48f6:	8c 8b       	std	Y+20, r24	; 0x14
    48f8:	9d 8b       	std	Y+21, r25	; 0x15
		CurrentPage->display(this);
    48fa:	be 01       	movw	r22, r28
    48fc:	8a 81       	ldd	r24, Y+2	; 0x02
    48fe:	9b 81       	ldd	r25, Y+3	; 0x03
    4900:	0e 94 0c 1a 	call	0x3418	; 0x3418 <_ZN7LCDPage7displayEP13UserInterface>
    4904:	36 c0       	rjmp	.+108    	; 0x4972 <_ZN13UserInterface7displayEv+0x96>
	}else if (CurrentMenu != NULL){
    4906:	88 81       	ld	r24, Y
    4908:	99 81       	ldd	r25, Y+1	; 0x01
    490a:	89 2b       	or	r24, r25
    490c:	61 f0       	breq	.+24     	; 0x4926 <_ZN13UserInterface7displayEv+0x4a>
		lastDisplayMillis = millis();
    490e:	0e 94 13 36 	call	0x6c26	; 0x6c26 <millis>
    4912:	6a 8b       	std	Y+18, r22	; 0x12
    4914:	7b 8b       	std	Y+19, r23	; 0x13
    4916:	8c 8b       	std	Y+20, r24	; 0x14
    4918:	9d 8b       	std	Y+21, r25	; 0x15
		CurrentMenu->display(this);
    491a:	be 01       	movw	r22, r28
    491c:	88 81       	ld	r24, Y
    491e:	99 81       	ldd	r25, Y+1	; 0x01
    4920:	0e 94 43 11 	call	0x2286	; 0x2286 <_ZN7LCDMenu7displayEP13UserInterface>
    4924:	26 c0       	rjmp	.+76     	; 0x4972 <_ZN13UserInterface7displayEv+0x96>
	}else{
		//display nothing
		if((millis() - lastDisplayMillis) > 3000){
    4926:	0e 94 13 36 	call	0x6c26	; 0x6c26 <millis>
    492a:	0a 89       	ldd	r16, Y+18	; 0x12
    492c:	1b 89       	ldd	r17, Y+19	; 0x13
    492e:	2c 89       	ldd	r18, Y+20	; 0x14
    4930:	3d 89       	ldd	r19, Y+21	; 0x15
    4932:	dc 01       	movw	r26, r24
    4934:	cb 01       	movw	r24, r22
    4936:	80 1b       	sub	r24, r16
    4938:	91 0b       	sbc	r25, r17
    493a:	a2 0b       	sbc	r26, r18
    493c:	b3 0b       	sbc	r27, r19
    493e:	89 3b       	cpi	r24, 0xB9	; 185
    4940:	9b 40       	sbci	r25, 0x0B	; 11
    4942:	a1 05       	cpc	r26, r1
    4944:	b1 05       	cpc	r27, r1
    4946:	a8 f0       	brcs	.+42     	; 0x4972 <_ZN13UserInterface7displayEv+0x96>
			lastDisplayMillis = millis();
    4948:	0e 94 13 36 	call	0x6c26	; 0x6c26 <millis>
    494c:	6a 8b       	std	Y+18, r22	; 0x12
    494e:	7b 8b       	std	Y+19, r23	; 0x13
    4950:	8c 8b       	std	Y+20, r24	; 0x14
    4952:	9d 8b       	std	Y+21, r25	; 0x15
			LCD->clear();
    4954:	8e 85       	ldd	r24, Y+14	; 0x0e
    4956:	9f 85       	ldd	r25, Y+15	; 0x0f
    4958:	be d2       	rcall	.+1404   	; 0x4ed6 <_ZN3LCD5clearEv>
			LCD->println("ERROR!");
    495a:	6a ea       	ldi	r22, 0xAA	; 170
    495c:	73 e0       	ldi	r23, 0x03	; 3
    495e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4960:	9f 85       	ldd	r25, Y+15	; 0x0f
    4962:	0e 94 a2 31 	call	0x6344	; 0x6344 <_ZN5Print7printlnEPKc>
			LCD->println("  No Page or Menu");
    4966:	61 eb       	ldi	r22, 0xB1	; 177
    4968:	73 e0       	ldi	r23, 0x03	; 3
    496a:	8e 85       	ldd	r24, Y+14	; 0x0e
    496c:	9f 85       	ldd	r25, Y+15	; 0x0f
    496e:	0e 94 a2 31 	call	0x6344	; 0x6344 <_ZN5Print7printlnEPKc>
		}
	}
}
    4972:	df 91       	pop	r29
    4974:	cf 91       	pop	r28
    4976:	1f 91       	pop	r17
    4978:	0f 91       	pop	r16
    497a:	08 95       	ret

0000497c <_ZN13UserInterface10setDisplayEP7LCDMenu>:

void UserInterface::setDisplay(LCDMenu *Menu){
	CurrentMenu = Menu;
    497c:	fc 01       	movw	r30, r24
    497e:	71 83       	std	Z+1, r23	; 0x01
    4980:	60 83       	st	Z, r22
	CurrentPage = NULL;
    4982:	13 82       	std	Z+3, r1	; 0x03
    4984:	12 82       	std	Z+2, r1	; 0x02
    4986:	08 95       	ret

00004988 <_ZN13UserInterface10setDisplayEP7LCDPage>:
		Serial.println( "  " + Name + "-UI-" + "-DisplayMenu->" + CurrentMenu->Name);
	#endif
}

void UserInterface::setDisplay(LCDPage *Page){
	CurrentMenu = NULL;
    4988:	fc 01       	movw	r30, r24
    498a:	11 82       	std	Z+1, r1	; 0x01
    498c:	10 82       	st	Z, r1
	CurrentPage = Page;
    498e:	73 83       	std	Z+3, r23	; 0x03
    4990:	62 83       	std	Z+2, r22	; 0x02
    4992:	08 95       	ret

00004994 <_ZN9Executive11exec_frame1Ev>:
	MLT_ENC->Read();
	HLT_ENC->Read();
	BK_ENC->Read();
}

void Executive::exec_frame2(){
    4994:	80 91 4c 05 	lds	r24, 0x054C
    4998:	90 91 4d 05 	lds	r25, 0x054D
    499c:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <_ZN22ClickEncoderWithEvents4ReadEv>
    49a0:	80 91 18 05 	lds	r24, 0x0518
    49a4:	90 91 19 05 	lds	r25, 0x0519
    49a8:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <_ZN22ClickEncoderWithEvents4ReadEv>
    49ac:	80 91 32 05 	lds	r24, 0x0532
    49b0:	90 91 33 05 	lds	r25, 0x0533
    49b4:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <_ZN22ClickEncoderWithEvents4ReadEv>
    49b8:	80 91 fe 04 	lds	r24, 0x04FE
    49bc:	90 91 ff 04 	lds	r25, 0x04FF
    49c0:	0c 94 d8 0d 	jmp	0x1bb0	; 0x1bb0 <_ZN22ClickEncoderWithEvents4ReadEv>
    49c4:	08 95       	ret

000049c6 <_ZN9Executive11exec_frame3Ev>:
}

void Executive::exec_frame3(){
	MAIN_UI->display();
    49c6:	80 91 6c 05 	lds	r24, 0x056C
    49ca:	90 91 6d 05 	lds	r25, 0x056D
    49ce:	86 df       	rcall	.-244    	; 0x48dc <_ZN13UserInterface7displayEv>
	MLT_UI->display();
    49d0:	80 91 6e 05 	lds	r24, 0x056E
    49d4:	90 91 6f 05 	lds	r25, 0x056F
    49d8:	81 df       	rcall	.-254    	; 0x48dc <_ZN13UserInterface7displayEv>
	HLT_UI->display();
    49da:	80 91 6a 05 	lds	r24, 0x056A
    49de:	90 91 6b 05 	lds	r25, 0x056B
    49e2:	7c df       	rcall	.-264    	; 0x48dc <_ZN13UserInterface7displayEv>
	BK_UI->display();
    49e4:	80 91 fc 04 	lds	r24, 0x04FC
    49e8:	90 91 fd 04 	lds	r25, 0x04FD
    49ec:	77 cf       	rjmp	.-274    	; 0x48dc <_ZN13UserInterface7displayEv>
    49ee:	08 95       	ret

000049f0 <_ZN9Executive3runEv>:
 * ----------------------------------------------------------------
 */
 
#include "Executive.h"

void Executive::run(){
    49f0:	8f 92       	push	r8
    49f2:	9f 92       	push	r9
    49f4:	af 92       	push	r10
    49f6:	bf 92       	push	r11
    49f8:	cf 92       	push	r12
    49fa:	df 92       	push	r13
    49fc:	ef 92       	push	r14
    49fe:	ff 92       	push	r15
    4a00:	0f 93       	push	r16
    4a02:	1f 93       	push	r17
    4a04:	cf 93       	push	r28
    4a06:	df 93       	push	r29
    4a08:	ec 01       	movw	r28, r24
	frame_count++;
    4a0a:	8c 81       	ldd	r24, Y+4	; 0x04
    4a0c:	9d 81       	ldd	r25, Y+5	; 0x05
    4a0e:	01 96       	adiw	r24, 0x01	; 1
    4a10:	9d 83       	std	Y+5, r25	; 0x05
    4a12:	8c 83       	std	Y+4, r24	; 0x04
	time = millis();
    4a14:	0e 94 13 36 	call	0x6c26	; 0x6c26 <millis>
    4a18:	68 83       	st	Y, r22
    4a1a:	79 83       	std	Y+1, r23	; 0x01
    4a1c:	8a 83       	std	Y+2, r24	; 0x02
    4a1e:	9b 83       	std	Y+3, r25	; 0x03
	exec_frame1();
    4a20:	ce 01       	movw	r24, r28
    4a22:	b8 df       	rcall	.-144    	; 0x4994 <_ZN9Executive11exec_frame1Ev>
	exec_frame2();
	exec_frame3();
    4a24:	ce 01       	movw	r24, r28
    4a26:	cf df       	rcall	.-98     	; 0x49c6 <_ZN9Executive11exec_frame3Ev>
	exec_frame4();
	
	//Execution rate
	temp_frame_count++;
    4a28:	8e 81       	ldd	r24, Y+6	; 0x06
    4a2a:	9f 81       	ldd	r25, Y+7	; 0x07
    4a2c:	a8 85       	ldd	r26, Y+8	; 0x08
    4a2e:	b9 85       	ldd	r27, Y+9	; 0x09
    4a30:	bc 01       	movw	r22, r24
    4a32:	cd 01       	movw	r24, r26
    4a34:	6f 5f       	subi	r22, 0xFF	; 255
    4a36:	7f 4f       	sbci	r23, 0xFF	; 255
    4a38:	8f 4f       	sbci	r24, 0xFF	; 255
    4a3a:	9f 4f       	sbci	r25, 0xFF	; 255
    4a3c:	6e 83       	std	Y+6, r22	; 0x06
    4a3e:	7f 83       	std	Y+7, r23	; 0x07
    4a40:	88 87       	std	Y+8, r24	; 0x08
    4a42:	99 87       	std	Y+9, r25	; 0x09
	if((time - temp_time)>3000){
    4a44:	c8 80       	ld	r12, Y
    4a46:	d9 80       	ldd	r13, Y+1	; 0x01
    4a48:	ea 80       	ldd	r14, Y+2	; 0x02
    4a4a:	fb 80       	ldd	r15, Y+3	; 0x03
    4a4c:	0a 85       	ldd	r16, Y+10	; 0x0a
    4a4e:	1b 85       	ldd	r17, Y+11	; 0x0b
    4a50:	2c 85       	ldd	r18, Y+12	; 0x0c
    4a52:	3d 85       	ldd	r19, Y+13	; 0x0d
    4a54:	c0 1a       	sub	r12, r16
    4a56:	d1 0a       	sbc	r13, r17
    4a58:	e2 0a       	sbc	r14, r18
    4a5a:	f3 0a       	sbc	r15, r19
    4a5c:	29 eb       	ldi	r18, 0xB9	; 185
    4a5e:	c2 16       	cp	r12, r18
    4a60:	2b e0       	ldi	r18, 0x0B	; 11
    4a62:	d2 06       	cpc	r13, r18
    4a64:	e1 04       	cpc	r14, r1
    4a66:	f1 04       	cpc	r15, r1
    4a68:	08 f4       	brcc	.+2      	; 0x4a6c <_ZN9Executive3runEv+0x7c>
    4a6a:	5e c0       	rjmp	.+188    	; 0x4b28 <_ZN9Executive3runEv+0x138>
		float Hz = (((float)temp_frame_count) / ((float)(time-temp_time)/1000));
    4a6c:	0e 94 18 3a 	call	0x7430	; 0x7430 <__floatsisf>
    4a70:	4b 01       	movw	r8, r22
    4a72:	5c 01       	movw	r10, r24
    4a74:	c7 01       	movw	r24, r14
    4a76:	b6 01       	movw	r22, r12
    4a78:	0e 94 16 3a 	call	0x742c	; 0x742c <__floatunsisf>
    4a7c:	20 e0       	ldi	r18, 0x00	; 0
    4a7e:	30 e0       	ldi	r19, 0x00	; 0
    4a80:	4a e7       	ldi	r20, 0x7A	; 122
    4a82:	54 e4       	ldi	r21, 0x44	; 68
    4a84:	0e 94 7d 39 	call	0x72fa	; 0x72fa <__divsf3>
    4a88:	9b 01       	movw	r18, r22
    4a8a:	ac 01       	movw	r20, r24
    4a8c:	c5 01       	movw	r24, r10
    4a8e:	b4 01       	movw	r22, r8
    4a90:	0e 94 7d 39 	call	0x72fa	; 0x72fa <__divsf3>
    4a94:	6b 01       	movw	r12, r22
    4a96:	7c 01       	movw	r14, r24
		Serial.print("Running at ");
    4a98:	63 ec       	ldi	r22, 0xC3	; 195
    4a9a:	73 e0       	ldi	r23, 0x03	; 3
    4a9c:	82 e4       	ldi	r24, 0x42	; 66
    4a9e:	96 e0       	ldi	r25, 0x06	; 6
    4aa0:	0e 94 78 31 	call	0x62f0	; 0x62f0 <_ZN5Print5printEPKc>
		Serial.print(Hz);
    4aa4:	22 e0       	ldi	r18, 0x02	; 2
    4aa6:	30 e0       	ldi	r19, 0x00	; 0
    4aa8:	b7 01       	movw	r22, r14
    4aaa:	a6 01       	movw	r20, r12
    4aac:	82 e4       	ldi	r24, 0x42	; 66
    4aae:	96 e0       	ldi	r25, 0x06	; 6
    4ab0:	0e 94 81 33 	call	0x6702	; 0x6702 <_ZN5Print5printEdi>
		Serial.print(" Hertz (");
    4ab4:	6f ec       	ldi	r22, 0xCF	; 207
    4ab6:	73 e0       	ldi	r23, 0x03	; 3
    4ab8:	82 e4       	ldi	r24, 0x42	; 66
    4aba:	96 e0       	ldi	r25, 0x06	; 6
    4abc:	0e 94 78 31 	call	0x62f0	; 0x62f0 <_ZN5Print5printEPKc>
		Serial.print(temp_frame_count);
    4ac0:	4e 81       	ldd	r20, Y+6	; 0x06
    4ac2:	5f 81       	ldd	r21, Y+7	; 0x07
    4ac4:	68 85       	ldd	r22, Y+8	; 0x08
    4ac6:	79 85       	ldd	r23, Y+9	; 0x09
    4ac8:	2a e0       	ldi	r18, 0x0A	; 10
    4aca:	30 e0       	ldi	r19, 0x00	; 0
    4acc:	82 e4       	ldi	r24, 0x42	; 66
    4ace:	96 e0       	ldi	r25, 0x06	; 6
    4ad0:	0e 94 25 32 	call	0x644a	; 0x644a <_ZN5Print5printEli>
		Serial.print(" frames / ");
    4ad4:	68 ed       	ldi	r22, 0xD8	; 216
    4ad6:	73 e0       	ldi	r23, 0x03	; 3
    4ad8:	82 e4       	ldi	r24, 0x42	; 66
    4ada:	96 e0       	ldi	r25, 0x06	; 6
    4adc:	0e 94 78 31 	call	0x62f0	; 0x62f0 <_ZN5Print5printEPKc>
		Serial.print(time-temp_time);
    4ae0:	48 81       	ld	r20, Y
    4ae2:	59 81       	ldd	r21, Y+1	; 0x01
    4ae4:	6a 81       	ldd	r22, Y+2	; 0x02
    4ae6:	7b 81       	ldd	r23, Y+3	; 0x03
    4ae8:	8a 85       	ldd	r24, Y+10	; 0x0a
    4aea:	9b 85       	ldd	r25, Y+11	; 0x0b
    4aec:	ac 85       	ldd	r26, Y+12	; 0x0c
    4aee:	bd 85       	ldd	r27, Y+13	; 0x0d
    4af0:	48 1b       	sub	r20, r24
    4af2:	59 0b       	sbc	r21, r25
    4af4:	6a 0b       	sbc	r22, r26
    4af6:	7b 0b       	sbc	r23, r27
    4af8:	2a e0       	ldi	r18, 0x0A	; 10
    4afa:	30 e0       	ldi	r19, 0x00	; 0
    4afc:	82 e4       	ldi	r24, 0x42	; 66
    4afe:	96 e0       	ldi	r25, 0x06	; 6
    4b00:	0e 94 79 32 	call	0x64f2	; 0x64f2 <_ZN5Print5printEmi>
		Serial.println(" ms )");
    4b04:	63 ee       	ldi	r22, 0xE3	; 227
    4b06:	73 e0       	ldi	r23, 0x03	; 3
    4b08:	82 e4       	ldi	r24, 0x42	; 66
    4b0a:	96 e0       	ldi	r25, 0x06	; 6
    4b0c:	0e 94 a2 31 	call	0x6344	; 0x6344 <_ZN5Print7printlnEPKc>
		
		//reset counters
		temp_time = time;
    4b10:	88 81       	ld	r24, Y
    4b12:	99 81       	ldd	r25, Y+1	; 0x01
    4b14:	aa 81       	ldd	r26, Y+2	; 0x02
    4b16:	bb 81       	ldd	r27, Y+3	; 0x03
    4b18:	8a 87       	std	Y+10, r24	; 0x0a
    4b1a:	9b 87       	std	Y+11, r25	; 0x0b
    4b1c:	ac 87       	std	Y+12, r26	; 0x0c
    4b1e:	bd 87       	std	Y+13, r27	; 0x0d
		temp_frame_count=0;
    4b20:	1e 82       	std	Y+6, r1	; 0x06
    4b22:	1f 82       	std	Y+7, r1	; 0x07
    4b24:	18 86       	std	Y+8, r1	; 0x08
    4b26:	19 86       	std	Y+9, r1	; 0x09
	}
	
	//global::timems = time;
	//global::timsec = (float)(time/1000);
}
    4b28:	df 91       	pop	r29
    4b2a:	cf 91       	pop	r28
    4b2c:	1f 91       	pop	r17
    4b2e:	0f 91       	pop	r16
    4b30:	ff 90       	pop	r15
    4b32:	ef 90       	pop	r14
    4b34:	df 90       	pop	r13
    4b36:	cf 90       	pop	r12
    4b38:	bf 90       	pop	r11
    4b3a:	af 90       	pop	r10
    4b3c:	9f 90       	pop	r9
    4b3e:	8f 90       	pop	r8
    4b40:	08 95       	ret

00004b42 <_ZN12ClickEncoderC1Ehhhhb>:
#  endif
#endif

// ----------------------------------------------------------------------------

ClickEncoder::ClickEncoder(uint8_t A, uint8_t B, uint8_t BTN, uint8_t stepsPerNotch, bool active)
    4b42:	ef 92       	push	r14
    4b44:	0f 93       	push	r16
    4b46:	1f 93       	push	r17
    4b48:	cf 93       	push	r28
    4b4a:	df 93       	push	r29
    4b4c:	ec 01       	movw	r28, r24
    4b4e:	86 2f       	mov	r24, r22
  : doubleClickEnabled(true), accelerationEnabled(true),
    delta(0), last(0), acceleration(0),
    button(Open), steps(stepsPerNotch),
    pinA(A), pinB(B), pinBTN(BTN), pinsActive(active)
    4b50:	68 83       	st	Y, r22
    4b52:	49 83       	std	Y+1, r20	; 0x01
    4b54:	2a 83       	std	Y+2, r18	; 0x02
    4b56:	eb 82       	std	Y+3, r14	; 0x03
    4b58:	1d 82       	std	Y+5, r1	; 0x05
    4b5a:	1c 82       	std	Y+4, r1	; 0x04
    4b5c:	1f 82       	std	Y+7, r1	; 0x07
    4b5e:	1e 82       	std	Y+6, r1	; 0x06
    4b60:	08 87       	std	Y+8, r16	; 0x08
    4b62:	1a 86       	std	Y+10, r1	; 0x0a
    4b64:	19 86       	std	Y+9, r1	; 0x09
    4b66:	1b 86       	std	Y+11, r1	; 0x0b
    4b68:	91 e0       	ldi	r25, 0x01	; 1
    4b6a:	9c 87       	std	Y+12, r25	; 0x0c
    4b6c:	9d 87       	std	Y+13, r25	; 0x0d
{
  uint8_t configType = (pinsActive == LOW) ? INPUT_PULLUP : INPUT;
    4b6e:	ee 20       	and	r14, r14
    4b70:	11 f0       	breq	.+4      	; 0x4b76 <_ZN12ClickEncoderC1Ehhhhb+0x34>
    4b72:	10 e0       	ldi	r17, 0x00	; 0
    4b74:	01 c0       	rjmp	.+2      	; 0x4b78 <_ZN12ClickEncoderC1Ehhhhb+0x36>
    4b76:	12 e0       	ldi	r17, 0x02	; 2
  pinMode(pinA, configType);
    4b78:	61 2f       	mov	r22, r17
    4b7a:	0e 94 43 37 	call	0x6e86	; 0x6e86 <pinMode>
  pinMode(pinB, configType);
    4b7e:	61 2f       	mov	r22, r17
    4b80:	89 81       	ldd	r24, Y+1	; 0x01
    4b82:	0e 94 43 37 	call	0x6e86	; 0x6e86 <pinMode>
  pinMode(pinBTN, configType);
    4b86:	61 2f       	mov	r22, r17
    4b88:	8a 81       	ldd	r24, Y+2	; 0x02
    4b8a:	0e 94 43 37 	call	0x6e86	; 0x6e86 <pinMode>
  
  if (digitalRead(pinA) == pinsActive) {
    4b8e:	88 81       	ld	r24, Y
    4b90:	0e 94 b2 37 	call	0x6f64	; 0x6f64 <digitalRead>
    4b94:	2b 81       	ldd	r18, Y+3	; 0x03
    4b96:	30 e0       	ldi	r19, 0x00	; 0
    4b98:	82 17       	cp	r24, r18
    4b9a:	93 07       	cpc	r25, r19
    4b9c:	21 f4       	brne	.+8      	; 0x4ba6 <_ZN12ClickEncoderC1Ehhhhb+0x64>
    last = 3;
    4b9e:	83 e0       	ldi	r24, 0x03	; 3
    4ba0:	90 e0       	ldi	r25, 0x00	; 0
    4ba2:	9f 83       	std	Y+7, r25	; 0x07
    4ba4:	8e 83       	std	Y+6, r24	; 0x06
  }

  if (digitalRead(pinB) == pinsActive) {
    4ba6:	89 81       	ldd	r24, Y+1	; 0x01
    4ba8:	0e 94 b2 37 	call	0x6f64	; 0x6f64 <digitalRead>
    4bac:	2b 81       	ldd	r18, Y+3	; 0x03
    4bae:	30 e0       	ldi	r19, 0x00	; 0
    4bb0:	82 17       	cp	r24, r18
    4bb2:	93 07       	cpc	r25, r19
    4bb4:	31 f4       	brne	.+12     	; 0x4bc2 <_ZN12ClickEncoderC1Ehhhhb+0x80>
    last ^=1;
    4bb6:	8e 81       	ldd	r24, Y+6	; 0x06
    4bb8:	9f 81       	ldd	r25, Y+7	; 0x07
    4bba:	21 e0       	ldi	r18, 0x01	; 1
    4bbc:	82 27       	eor	r24, r18
    4bbe:	9f 83       	std	Y+7, r25	; 0x07
    4bc0:	8e 83       	std	Y+6, r24	; 0x06
  }
}
    4bc2:	df 91       	pop	r29
    4bc4:	cf 91       	pop	r28
    4bc6:	1f 91       	pop	r17
    4bc8:	0f 91       	pop	r16
    4bca:	ef 90       	pop	r14
    4bcc:	08 95       	ret

00004bce <_ZN12ClickEncoder7serviceEv>:

// ----------------------------------------------------------------------------
// call this every 1 millisecond via timer ISR
//
void ClickEncoder::service(void)
{
    4bce:	cf 92       	push	r12
    4bd0:	df 92       	push	r13
    4bd2:	ef 92       	push	r14
    4bd4:	ff 92       	push	r15
    4bd6:	0f 93       	push	r16
    4bd8:	1f 93       	push	r17
    4bda:	cf 93       	push	r28
    4bdc:	df 93       	push	r29
    4bde:	ec 01       	movw	r28, r24
  bool moved = false;
  unsigned long now = millis();
    4be0:	0e 94 13 36 	call	0x6c26	; 0x6c26 <millis>
    4be4:	6b 01       	movw	r12, r22
    4be6:	7c 01       	movw	r14, r24

  if (accelerationEnabled) { // decelerate every tick
    4be8:	8d 85       	ldd	r24, Y+13	; 0x0d
    4bea:	88 23       	and	r24, r24
    4bec:	59 f0       	breq	.+22     	; 0x4c04 <_ZN12ClickEncoder7serviceEv+0x36>
    acceleration -= ENC_ACCEL_DEC;
    4bee:	89 85       	ldd	r24, Y+9	; 0x09
    4bf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bf2:	02 97       	sbiw	r24, 0x02	; 2
    4bf4:	9a 87       	std	Y+10, r25	; 0x0a
    4bf6:	89 87       	std	Y+9, r24	; 0x09
    if (acceleration & 0x8000) { // handle overflow of MSB is set
    4bf8:	89 85       	ldd	r24, Y+9	; 0x09
    4bfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bfc:	99 23       	and	r25, r25
    4bfe:	14 f4       	brge	.+4      	; 0x4c04 <_ZN12ClickEncoder7serviceEv+0x36>
      acceleration = 0;
    4c00:	1a 86       	std	Y+10, r1	; 0x0a
    4c02:	19 86       	std	Y+9, r1	; 0x09
    moved = true;
  }
#elif ENC_DECODER == ENC_NORMAL
  int8_t curr = 0;

  if (digitalRead(pinA) == pinsActive) {
    4c04:	88 81       	ld	r24, Y
    4c06:	0e 94 b2 37 	call	0x6f64	; 0x6f64 <digitalRead>
    4c0a:	2b 81       	ldd	r18, Y+3	; 0x03
    4c0c:	30 e0       	ldi	r19, 0x00	; 0
    4c0e:	82 17       	cp	r24, r18
    4c10:	93 07       	cpc	r25, r19
    4c12:	11 f4       	brne	.+4      	; 0x4c18 <_ZN12ClickEncoder7serviceEv+0x4a>
    curr = 3;
    4c14:	13 e0       	ldi	r17, 0x03	; 3
    4c16:	01 c0       	rjmp	.+2      	; 0x4c1a <_ZN12ClickEncoder7serviceEv+0x4c>
  if (tbl) {
    delta += tbl;
    moved = true;
  }
#elif ENC_DECODER == ENC_NORMAL
  int8_t curr = 0;
    4c18:	10 e0       	ldi	r17, 0x00	; 0

  if (digitalRead(pinA) == pinsActive) {
    curr = 3;
  }

  if (digitalRead(pinB) == pinsActive) {
    4c1a:	89 81       	ldd	r24, Y+1	; 0x01
    4c1c:	0e 94 b2 37 	call	0x6f64	; 0x6f64 <digitalRead>
    4c20:	2b 81       	ldd	r18, Y+3	; 0x03
    4c22:	30 e0       	ldi	r19, 0x00	; 0
    4c24:	82 17       	cp	r24, r18
    4c26:	93 07       	cpc	r25, r19
    4c28:	11 f4       	brne	.+4      	; 0x4c2e <_ZN12ClickEncoder7serviceEv+0x60>
    curr ^= 1;
    4c2a:	81 e0       	ldi	r24, 0x01	; 1
    4c2c:	18 27       	eor	r17, r24
  }
  
  int8_t diff = last - curr;
    4c2e:	8e 81       	ldd	r24, Y+6	; 0x06
    4c30:	9f 81       	ldd	r25, Y+7	; 0x07
    4c32:	81 1b       	sub	r24, r17

  if (diff & 1) {            // bit 0 = step
    4c34:	80 ff       	sbrs	r24, 0
    4c36:	1d c0       	rjmp	.+58     	; 0x4c72 <_ZN12ClickEncoder7serviceEv+0xa4>
    last = curr;
    4c38:	21 2f       	mov	r18, r17
    4c3a:	11 0f       	add	r17, r17
    4c3c:	33 0b       	sbc	r19, r19
    4c3e:	3f 83       	std	Y+7, r19	; 0x07
    4c40:	2e 83       	std	Y+6, r18	; 0x06
    delta += (diff & 2) - 1; // bit 1 = direction (+/-)
    4c42:	2c 81       	ldd	r18, Y+4	; 0x04
    4c44:	3d 81       	ldd	r19, Y+5	; 0x05
    4c46:	82 70       	andi	r24, 0x02	; 2
    4c48:	08 2e       	mov	r0, r24
    4c4a:	00 0c       	add	r0, r0
    4c4c:	99 0b       	sbc	r25, r25
    4c4e:	01 97       	sbiw	r24, 0x01	; 1
    4c50:	82 0f       	add	r24, r18
    4c52:	93 1f       	adc	r25, r19
    4c54:	9d 83       	std	Y+5, r25	; 0x05
    4c56:	8c 83       	std	Y+4, r24	; 0x04
  }
#else
# error "Error: define ENC_DECODER to ENC_NORMAL or ENC_FLAKY"
#endif

  if (accelerationEnabled && moved) {
    4c58:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c5a:	88 23       	and	r24, r24
    4c5c:	51 f0       	breq	.+20     	; 0x4c72 <_ZN12ClickEncoder7serviceEv+0xa4>
    // increment accelerator if encoder has been moved
    if (acceleration <= (ENC_ACCEL_TOP - ENC_ACCEL_INC)) {
    4c5e:	89 85       	ldd	r24, Y+9	; 0x09
    4c60:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c62:	88 3e       	cpi	r24, 0xE8	; 232
    4c64:	9b 40       	sbci	r25, 0x0B	; 11
    4c66:	28 f4       	brcc	.+10     	; 0x4c72 <_ZN12ClickEncoder7serviceEv+0xa4>
      acceleration += ENC_ACCEL_INC;
    4c68:	89 85       	ldd	r24, Y+9	; 0x09
    4c6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c6c:	49 96       	adiw	r24, 0x19	; 25
    4c6e:	9a 87       	std	Y+10, r25	; 0x0a
    4c70:	89 87       	std	Y+9, r24	; 0x09
#ifndef WITHOUT_BUTTON
  static uint16_t keyDownTicks = 0;
  static uint8_t doubleClickTicks = 0;
  static unsigned long lastButtonCheck = 0;

  if (pinBTN > 0 // check button only, if a pin has been provided
    4c72:	8a 81       	ldd	r24, Y+2	; 0x02
    4c74:	88 23       	and	r24, r24
    4c76:	09 f4       	brne	.+2      	; 0x4c7a <_ZN12ClickEncoder7serviceEv+0xac>
    4c78:	6b c0       	rjmp	.+214    	; 0x4d50 <_ZN12ClickEncoder7serviceEv+0x182>
      && (now - lastButtonCheck) >= ENC_BUTTONINTERVAL) // checking button is sufficient every 10-30ms
    4c7a:	40 91 73 05 	lds	r20, 0x0573
    4c7e:	50 91 74 05 	lds	r21, 0x0574
    4c82:	60 91 75 05 	lds	r22, 0x0575
    4c86:	70 91 76 05 	lds	r23, 0x0576
    4c8a:	97 01       	movw	r18, r14
    4c8c:	86 01       	movw	r16, r12
    4c8e:	04 1b       	sub	r16, r20
    4c90:	15 0b       	sbc	r17, r21
    4c92:	26 0b       	sbc	r18, r22
    4c94:	37 0b       	sbc	r19, r23
    4c96:	0a 30       	cpi	r16, 0x0A	; 10
    4c98:	11 05       	cpc	r17, r1
    4c9a:	21 05       	cpc	r18, r1
    4c9c:	31 05       	cpc	r19, r1
    4c9e:	08 f4       	brcc	.+2      	; 0x4ca2 <_ZN12ClickEncoder7serviceEv+0xd4>
    4ca0:	57 c0       	rjmp	.+174    	; 0x4d50 <_ZN12ClickEncoder7serviceEv+0x182>
  { 
    lastButtonCheck = now;
    4ca2:	c0 92 73 05 	sts	0x0573, r12
    4ca6:	d0 92 74 05 	sts	0x0574, r13
    4caa:	e0 92 75 05 	sts	0x0575, r14
    4cae:	f0 92 76 05 	sts	0x0576, r15
    
    if (digitalRead(pinBTN) == pinsActive) { // key is down
    4cb2:	0e 94 b2 37 	call	0x6f64	; 0x6f64 <digitalRead>
    4cb6:	2b 81       	ldd	r18, Y+3	; 0x03
    4cb8:	30 e0       	ldi	r19, 0x00	; 0
    4cba:	82 17       	cp	r24, r18
    4cbc:	93 07       	cpc	r25, r19
    4cbe:	71 f4       	brne	.+28     	; 0x4cdc <_ZN12ClickEncoder7serviceEv+0x10e>
      keyDownTicks++;
    4cc0:	80 91 71 05 	lds	r24, 0x0571
    4cc4:	90 91 72 05 	lds	r25, 0x0572
    4cc8:	01 96       	adiw	r24, 0x01	; 1
    4cca:	90 93 72 05 	sts	0x0572, r25
    4cce:	80 93 71 05 	sts	0x0571, r24
      if (keyDownTicks > (ENC_HOLDTIME / ENC_BUTTONINTERVAL)) {
    4cd2:	89 37       	cpi	r24, 0x79	; 121
    4cd4:	91 05       	cpc	r25, r1
    4cd6:	10 f0       	brcs	.+4      	; 0x4cdc <_ZN12ClickEncoder7serviceEv+0x10e>
        button = Held;
    4cd8:	83 e0       	ldi	r24, 0x03	; 3
    4cda:	8b 87       	std	Y+11, r24	; 0x0b
      }
    }

    if (digitalRead(pinBTN) == !pinsActive) { // key is now up
    4cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    4cde:	0e 94 b2 37 	call	0x6f64	; 0x6f64 <digitalRead>
    4ce2:	3b 81       	ldd	r19, Y+3	; 0x03
    4ce4:	21 e0       	ldi	r18, 0x01	; 1
    4ce6:	23 27       	eor	r18, r19
    4ce8:	30 e0       	ldi	r19, 0x00	; 0
    4cea:	82 17       	cp	r24, r18
    4cec:	93 07       	cpc	r25, r19
    4cee:	29 f5       	brne	.+74     	; 0x4d3a <_ZN12ClickEncoder7serviceEv+0x16c>
      if (keyDownTicks /*> ENC_BUTTONINTERVAL*/) {
    4cf0:	80 91 71 05 	lds	r24, 0x0571
    4cf4:	90 91 72 05 	lds	r25, 0x0572
    4cf8:	89 2b       	or	r24, r25
    4cfa:	d9 f0       	breq	.+54     	; 0x4d32 <_ZN12ClickEncoder7serviceEv+0x164>
        if (button == Held) {
    4cfc:	8b 85       	ldd	r24, Y+11	; 0x0b
    4cfe:	83 30       	cpi	r24, 0x03	; 3
    4d00:	29 f4       	brne	.+10     	; 0x4d0c <_ZN12ClickEncoder7serviceEv+0x13e>
          button = Released;
    4d02:	84 e0       	ldi	r24, 0x04	; 4
    4d04:	8b 87       	std	Y+11, r24	; 0x0b
          doubleClickTicks = 0;
    4d06:	10 92 70 05 	sts	0x0570, r1
    4d0a:	13 c0       	rjmp	.+38     	; 0x4d32 <_ZN12ClickEncoder7serviceEv+0x164>
        }
        else {
          #define ENC_SINGLECLICKONLY 1
          if (doubleClickTicks > ENC_SINGLECLICKONLY) {   // prevent trigger in single click mode
    4d0c:	80 91 70 05 	lds	r24, 0x0570
    4d10:	82 30       	cpi	r24, 0x02	; 2
    4d12:	38 f0       	brcs	.+14     	; 0x4d22 <_ZN12ClickEncoder7serviceEv+0x154>
            if (doubleClickTicks < (ENC_DOUBLECLICKTIME / ENC_BUTTONINTERVAL)) {
    4d14:	8c 33       	cpi	r24, 0x3C	; 60
    4d16:	68 f4       	brcc	.+26     	; 0x4d32 <_ZN12ClickEncoder7serviceEv+0x164>
              button = DoubleClicked;
    4d18:	86 e0       	ldi	r24, 0x06	; 6
    4d1a:	8b 87       	std	Y+11, r24	; 0x0b
              doubleClickTicks = 0;
    4d1c:	10 92 70 05 	sts	0x0570, r1
    4d20:	08 c0       	rjmp	.+16     	; 0x4d32 <_ZN12ClickEncoder7serviceEv+0x164>
            }
          }
          else {
            doubleClickTicks = (doubleClickEnabled) ? (ENC_DOUBLECLICKTIME / ENC_BUTTONINTERVAL) : ENC_SINGLECLICKONLY;
    4d22:	8c 85       	ldd	r24, Y+12	; 0x0c
    4d24:	81 11       	cpse	r24, r1
    4d26:	02 c0       	rjmp	.+4      	; 0x4d2c <_ZN12ClickEncoder7serviceEv+0x15e>
    4d28:	81 e0       	ldi	r24, 0x01	; 1
    4d2a:	01 c0       	rjmp	.+2      	; 0x4d2e <_ZN12ClickEncoder7serviceEv+0x160>
    4d2c:	8c e3       	ldi	r24, 0x3C	; 60
    4d2e:	80 93 70 05 	sts	0x0570, r24
          }
        }
      }

      keyDownTicks = 0;
    4d32:	10 92 72 05 	sts	0x0572, r1
    4d36:	10 92 71 05 	sts	0x0571, r1
    }
  
    if (doubleClickTicks > 0) {
    4d3a:	80 91 70 05 	lds	r24, 0x0570
    4d3e:	88 23       	and	r24, r24
    4d40:	39 f0       	breq	.+14     	; 0x4d50 <_ZN12ClickEncoder7serviceEv+0x182>
      doubleClickTicks--;
      if (--doubleClickTicks == 0) {
    4d42:	82 50       	subi	r24, 0x02	; 2
    4d44:	80 93 70 05 	sts	0x0570, r24
    4d48:	81 11       	cpse	r24, r1
    4d4a:	02 c0       	rjmp	.+4      	; 0x4d50 <_ZN12ClickEncoder7serviceEv+0x182>
        button = Clicked;
    4d4c:	85 e0       	ldi	r24, 0x05	; 5
    4d4e:	8b 87       	std	Y+11, r24	; 0x0b
      }
    }
  }
#endif // WITHOUT_BUTTON

}
    4d50:	df 91       	pop	r29
    4d52:	cf 91       	pop	r28
    4d54:	1f 91       	pop	r17
    4d56:	0f 91       	pop	r16
    4d58:	ff 90       	pop	r15
    4d5a:	ef 90       	pop	r14
    4d5c:	df 90       	pop	r13
    4d5e:	cf 90       	pop	r12
    4d60:	08 95       	ret

00004d62 <_ZN12ClickEncoder8getValueEv>:

// ----------------------------------------------------------------------------

int16_t ClickEncoder::getValue(void)
{
    4d62:	fc 01       	movw	r30, r24
  int16_t val;
  
  cli();
    4d64:	f8 94       	cli
  val = delta;
    4d66:	24 81       	ldd	r18, Z+4	; 0x04
    4d68:	35 81       	ldd	r19, Z+5	; 0x05

  if (steps == 2) delta = val & 1;
    4d6a:	80 85       	ldd	r24, Z+8	; 0x08
    4d6c:	82 30       	cpi	r24, 0x02	; 2
    4d6e:	31 f4       	brne	.+12     	; 0x4d7c <_ZN12ClickEncoder8getValueEv+0x1a>
    4d70:	c9 01       	movw	r24, r18
    4d72:	81 70       	andi	r24, 0x01	; 1
    4d74:	99 27       	eor	r25, r25
    4d76:	95 83       	std	Z+5, r25	; 0x05
    4d78:	84 83       	std	Z+4, r24	; 0x04
    4d7a:	0a c0       	rjmp	.+20     	; 0x4d90 <_ZN12ClickEncoder8getValueEv+0x2e>
  else if (steps == 4) delta = val & 3;
    4d7c:	84 30       	cpi	r24, 0x04	; 4
    4d7e:	31 f4       	brne	.+12     	; 0x4d8c <_ZN12ClickEncoder8getValueEv+0x2a>
    4d80:	c9 01       	movw	r24, r18
    4d82:	83 70       	andi	r24, 0x03	; 3
    4d84:	99 27       	eor	r25, r25
    4d86:	95 83       	std	Z+5, r25	; 0x05
    4d88:	84 83       	std	Z+4, r24	; 0x04
    4d8a:	02 c0       	rjmp	.+4      	; 0x4d90 <_ZN12ClickEncoder8getValueEv+0x2e>
  else delta = 0; // default to 1 step per notch
    4d8c:	15 82       	std	Z+5, r1	; 0x05
    4d8e:	14 82       	std	Z+4, r1	; 0x04

  sei();
    4d90:	78 94       	sei
  
  if (steps == 4) val >>= 2;
    4d92:	80 85       	ldd	r24, Z+8	; 0x08
    4d94:	84 30       	cpi	r24, 0x04	; 4
    4d96:	29 f4       	brne	.+10     	; 0x4da2 <_ZN12ClickEncoder8getValueEv+0x40>
    4d98:	35 95       	asr	r19
    4d9a:	27 95       	ror	r18
    4d9c:	35 95       	asr	r19
    4d9e:	27 95       	ror	r18
    4da0:	04 c0       	rjmp	.+8      	; 0x4daa <_ZN12ClickEncoder8getValueEv+0x48>
  if (steps == 2) val >>= 1;
    4da2:	82 30       	cpi	r24, 0x02	; 2
    4da4:	11 f4       	brne	.+4      	; 0x4daa <_ZN12ClickEncoder8getValueEv+0x48>
    4da6:	35 95       	asr	r19
    4da8:	27 95       	ror	r18

  int16_t r = 0;
  int16_t accel = ((accelerationEnabled) ? (acceleration >> 8) : 0);
    4daa:	85 85       	ldd	r24, Z+13	; 0x0d
    4dac:	88 23       	and	r24, r24
    4dae:	29 f0       	breq	.+10     	; 0x4dba <_ZN12ClickEncoder8getValueEv+0x58>
    4db0:	81 85       	ldd	r24, Z+9	; 0x09
    4db2:	92 85       	ldd	r25, Z+10	; 0x0a
    4db4:	89 2f       	mov	r24, r25
    4db6:	99 27       	eor	r25, r25
    4db8:	02 c0       	rjmp	.+4      	; 0x4dbe <_ZN12ClickEncoder8getValueEv+0x5c>
    4dba:	80 e0       	ldi	r24, 0x00	; 0
    4dbc:	90 e0       	ldi	r25, 0x00	; 0

  if (val < 0) {
    4dbe:	33 23       	and	r19, r19
    4dc0:	1c f4       	brge	.+6      	; 0x4dc8 <_ZN12ClickEncoder8getValueEv+0x66>
    r -= 1 + accel;
    4dc2:	80 95       	com	r24
    4dc4:	90 95       	com	r25
    4dc6:	08 95       	ret
  }
  else if (val > 0) {
    4dc8:	12 16       	cp	r1, r18
    4dca:	13 06       	cpc	r1, r19
    4dcc:	14 f4       	brge	.+4      	; 0x4dd2 <_ZN12ClickEncoder8getValueEv+0x70>
    r += 1 + accel;
    4dce:	01 96       	adiw	r24, 0x01	; 1
    4dd0:	08 95       	ret
  sei();
  
  if (steps == 4) val >>= 2;
  if (steps == 2) val >>= 1;

  int16_t r = 0;
    4dd2:	80 e0       	ldi	r24, 0x00	; 0
    4dd4:	90 e0       	ldi	r25, 0x00	; 0
  else if (val > 0) {
    r += 1 + accel;
  }

  return r;
}
    4dd6:	08 95       	ret

00004dd8 <_ZN12ClickEncoder9getButtonEv>:

// ----------------------------------------------------------------------------

#ifndef WITHOUT_BUTTON
ClickEncoder::Button ClickEncoder::getButton(void)
{
    4dd8:	fc 01       	movw	r30, r24
  ClickEncoder::Button ret = button;
    4dda:	83 85       	ldd	r24, Z+11	; 0x0b
  if (button != ClickEncoder::Held) {
    4ddc:	93 85       	ldd	r25, Z+11	; 0x0b
    4dde:	93 30       	cpi	r25, 0x03	; 3
    4de0:	09 f0       	breq	.+2      	; 0x4de4 <_ZN12ClickEncoder9getButtonEv+0xc>
    button = ClickEncoder::Open; // reset
    4de2:	13 86       	std	Z+11, r1	; 0x0b
  }
  return ret;
}
    4de4:	08 95       	ret

00004de6 <_ZN5I2CIOC1Ev>:
      // Remove the values which are not inputs and get the value of the pin
      pinVal = this->read() & _dirMask;
      pinVal = ( pinVal >> pin ) & 0x01; // Get the pin value
   }
   return (pinVal);
}
    4de6:	fc 01       	movw	r30, r24
    4de8:	12 82       	std	Z+2, r1	; 0x02
    4dea:	8f ef       	ldi	r24, 0xFF	; 255
    4dec:	81 83       	std	Z+1, r24	; 0x01
    4dee:	10 82       	st	Z, r1
    4df0:	13 82       	std	Z+3, r1	; 0x03
    4df2:	08 95       	ret

00004df4 <_ZN5I2CIO8portModeEh>:
    4df4:	fc 01       	movw	r30, r24
    4df6:	23 81       	ldd	r18, Z+3	; 0x03
    4df8:	22 23       	and	r18, r18
    4dfa:	39 f0       	breq	.+14     	; 0x4e0a <_ZN5I2CIO8portModeEh+0x16>
    4dfc:	61 11       	cpse	r22, r1
    4dfe:	03 c0       	rjmp	.+6      	; 0x4e06 <_ZN5I2CIO8portModeEh+0x12>
    4e00:	2f ef       	ldi	r18, 0xFF	; 255
    4e02:	21 83       	std	Z+1, r18	; 0x01
    4e04:	08 95       	ret
    4e06:	fc 01       	movw	r30, r24
    4e08:	11 82       	std	Z+1, r1	; 0x01
    4e0a:	08 95       	ret

00004e0c <_ZN5I2CIO5beginEh>:
    4e0c:	cf 93       	push	r28
    4e0e:	df 93       	push	r29
    4e10:	ec 01       	movw	r28, r24
    4e12:	6a 83       	std	Y+2, r22	; 0x02
    4e14:	8a ee       	ldi	r24, 0xEA	; 234
    4e16:	95 e0       	ldi	r25, 0x05	; 5
    4e18:	06 d5       	rcall	.+2572   	; 0x5826 <_ZN7TwoWire5beginEv>
    4e1a:	41 e0       	ldi	r20, 0x01	; 1
    4e1c:	6a 81       	ldd	r22, Y+2	; 0x02
    4e1e:	8a ee       	ldi	r24, 0xEA	; 234
    4e20:	95 e0       	ldi	r25, 0x05	; 5
    4e22:	17 d5       	rcall	.+2606   	; 0x5852 <_ZN7TwoWire11requestFromEhh>
    4e24:	91 e0       	ldi	r25, 0x01	; 1
    4e26:	81 11       	cpse	r24, r1
    4e28:	01 c0       	rjmp	.+2      	; 0x4e2c <_ZN5I2CIO5beginEh+0x20>
    4e2a:	90 e0       	ldi	r25, 0x00	; 0
    4e2c:	9b 83       	std	Y+3, r25	; 0x03
    4e2e:	8a ee       	ldi	r24, 0xEA	; 234
    4e30:	95 e0       	ldi	r25, 0x05	; 5
    4e32:	66 d4       	rcall	.+2252   	; 0x5700 <_ZN7TwoWire4readEv>
    4e34:	88 83       	st	Y, r24
    4e36:	8b 81       	ldd	r24, Y+3	; 0x03
    4e38:	90 e0       	ldi	r25, 0x00	; 0
    4e3a:	df 91       	pop	r29
    4e3c:	cf 91       	pop	r28
    4e3e:	08 95       	ret

00004e40 <_ZN5I2CIO5writeEh>:
}

//
// write
int I2CIO::write ( uint8_t value )
{
    4e40:	cf 93       	push	r28
    4e42:	df 93       	push	r29
   int status = 0;
   
   if ( _initialised )
    4e44:	fc 01       	movw	r30, r24
    4e46:	23 81       	ldd	r18, Z+3	; 0x03
    4e48:	22 23       	and	r18, r18
    4e4a:	99 f0       	breq	.+38     	; 0x4e72 <_ZN5I2CIO5writeEh+0x32>
    4e4c:	ec 01       	movw	r28, r24
   {
      // Only write HIGH the values of the ports that have been initialised as
      // outputs updating the output shadow of the device
      _shadow = ( value & ~(_dirMask) );
    4e4e:	81 81       	ldd	r24, Z+1	; 0x01
    4e50:	80 95       	com	r24
    4e52:	68 23       	and	r22, r24
    4e54:	60 83       	st	Z, r22
   
      Wire.beginTransmission ( _i2cAddr );
    4e56:	62 81       	ldd	r22, Z+2	; 0x02
    4e58:	8a ee       	ldi	r24, 0xEA	; 234
    4e5a:	95 e0       	ldi	r25, 0x05	; 5
    4e5c:	fd d4       	rcall	.+2554   	; 0x5858 <_ZN7TwoWire17beginTransmissionEh>
#if (ARDUINO <  100)
      Wire.send ( _shadow );
#else
      Wire.write ( _shadow );
    4e5e:	68 81       	ld	r22, Y
    4e60:	8a ee       	ldi	r24, 0xEA	; 234
    4e62:	95 e0       	ldi	r25, 0x05	; 5
    4e64:	a0 d4       	rcall	.+2368   	; 0x57a6 <_ZN7TwoWire5writeEh>
#endif  
      status = Wire.endTransmission ();
    4e66:	8a ee       	ldi	r24, 0xEA	; 234
    4e68:	95 e0       	ldi	r25, 0x05	; 5
    4e6a:	12 d5       	rcall	.+2596   	; 0x5890 <_ZN7TwoWire15endTransmissionEv>
    4e6c:	28 2f       	mov	r18, r24
    4e6e:	30 e0       	ldi	r19, 0x00	; 0
    4e70:	02 c0       	rjmp	.+4      	; 0x4e76 <_ZN5I2CIO5writeEh+0x36>

//
// write
int I2CIO::write ( uint8_t value )
{
   int status = 0;
    4e72:	20 e0       	ldi	r18, 0x00	; 0
    4e74:	30 e0       	ldi	r19, 0x00	; 0
#else
      Wire.write ( _shadow );
#endif  
      status = Wire.endTransmission ();
   }
   return ( (status == 0) );
    4e76:	81 e0       	ldi	r24, 0x01	; 1
    4e78:	90 e0       	ldi	r25, 0x00	; 0
    4e7a:	23 2b       	or	r18, r19
    4e7c:	11 f0       	breq	.+4      	; 0x4e82 <_ZN5I2CIO5writeEh+0x42>
    4e7e:	80 e0       	ldi	r24, 0x00	; 0
    4e80:	90 e0       	ldi	r25, 0x00	; 0
}
    4e82:	df 91       	pop	r29
    4e84:	cf 91       	pop	r28
    4e86:	08 95       	ret

00004e88 <_ZN3LCD15setBacklightPinEh13t_backlighPol>:
// Switch fully on the LCD (backlight and LCD)
void LCD::on ( void )
{
   display();
   backlight();
}
    4e88:	08 95       	ret

00004e8a <_ZN3LCD12setBacklightEh>:
    4e8a:	08 95       	ret

00004e8c <_ZN3LCD5writeEh>:
    4e8c:	dc 01       	movw	r26, r24
    4e8e:	ed 91       	ld	r30, X+
    4e90:	fc 91       	ld	r31, X
    4e92:	02 84       	ldd	r0, Z+10	; 0x0a
    4e94:	f3 85       	ldd	r31, Z+11	; 0x0b
    4e96:	e0 2d       	mov	r30, r0
    4e98:	41 e0       	ldi	r20, 0x01	; 1
    4e9a:	19 95       	eicall
    4e9c:	81 e0       	ldi	r24, 0x01	; 1
    4e9e:	90 e0       	ldi	r25, 0x00	; 0
    4ea0:	08 95       	ret

00004ea2 <_ZN3LCDC1Ev>:
    4ea2:	fc 01       	movw	r30, r24
    4ea4:	13 82       	std	Z+3, r1	; 0x03
    4ea6:	12 82       	std	Z+2, r1	; 0x02
    4ea8:	2d ee       	ldi	r18, 0xED	; 237
    4eaa:	33 e0       	ldi	r19, 0x03	; 3
    4eac:	31 83       	std	Z+1, r19	; 0x01
    4eae:	20 83       	st	Z, r18
    4eb0:	08 95       	ret

00004eb2 <_ZN3LCD9backlightEv>:
    4eb2:	dc 01       	movw	r26, r24
    4eb4:	ed 91       	ld	r30, X+
    4eb6:	fc 91       	ld	r31, X
    4eb8:	00 84       	ldd	r0, Z+8	; 0x08
    4eba:	f1 85       	ldd	r31, Z+9	; 0x09
    4ebc:	e0 2d       	mov	r30, r0
    4ebe:	6f ef       	ldi	r22, 0xFF	; 255
    4ec0:	19 95       	eicall
    4ec2:	08 95       	ret

00004ec4 <_ZN3LCD7commandEh>:
    4ec4:	dc 01       	movw	r26, r24
    4ec6:	ed 91       	ld	r30, X+
    4ec8:	fc 91       	ld	r31, X
    4eca:	02 84       	ldd	r0, Z+10	; 0x0a
    4ecc:	f3 85       	ldd	r31, Z+11	; 0x0b
    4ece:	e0 2d       	mov	r30, r0
    4ed0:	40 e0       	ldi	r20, 0x00	; 0
    4ed2:	19 95       	eicall
    4ed4:	08 95       	ret

00004ed6 <_ZN3LCD5clearEv>:
    4ed6:	61 e0       	ldi	r22, 0x01	; 1
    4ed8:	f5 df       	rcall	.-22     	; 0x4ec4 <_ZN3LCD7commandEh>
    4eda:	80 ed       	ldi	r24, 0xD0	; 208
    4edc:	97 e0       	ldi	r25, 0x07	; 7
    4ede:	0c 94 6e 36 	jmp	0x6cdc	; 0x6cdc <delayMicroseconds>
    4ee2:	08 95       	ret

00004ee4 <_ZN3LCD9setCursorEhh>:
    4ee4:	cf 93       	push	r28
    4ee6:	df 93       	push	r29
    4ee8:	cd b7       	in	r28, 0x3d	; 61
    4eea:	de b7       	in	r29, 0x3e	; 62
    4eec:	28 97       	sbiw	r28, 0x08	; 8
    4eee:	0f b6       	in	r0, 0x3f	; 63
    4ef0:	f8 94       	cli
    4ef2:	de bf       	out	0x3e, r29	; 62
    4ef4:	0f be       	out	0x3f, r0	; 63
    4ef6:	cd bf       	out	0x3d, r28	; 61
    4ef8:	fc 01       	movw	r30, r24
    4efa:	1d 82       	std	Y+5, r1	; 0x05
    4efc:	80 e4       	ldi	r24, 0x40	; 64
    4efe:	8e 83       	std	Y+6, r24	; 0x06
    4f00:	94 e1       	ldi	r25, 0x14	; 20
    4f02:	9f 83       	std	Y+7, r25	; 0x07
    4f04:	94 e5       	ldi	r25, 0x54	; 84
    4f06:	98 87       	std	Y+8, r25	; 0x08
    4f08:	19 82       	std	Y+1, r1	; 0x01
    4f0a:	8a 83       	std	Y+2, r24	; 0x02
    4f0c:	80 e1       	ldi	r24, 0x10	; 16
    4f0e:	8b 83       	std	Y+3, r24	; 0x03
    4f10:	80 e5       	ldi	r24, 0x50	; 80
    4f12:	8c 83       	std	Y+4, r24	; 0x04
    4f14:	87 81       	ldd	r24, Z+7	; 0x07
    4f16:	48 17       	cp	r20, r24
    4f18:	10 f0       	brcs	.+4      	; 0x4f1e <_ZN3LCD9setCursorEhh+0x3a>
    4f1a:	4f ef       	ldi	r20, 0xFF	; 255
    4f1c:	48 0f       	add	r20, r24
    4f1e:	90 85       	ldd	r25, Z+8	; 0x08
    4f20:	90 31       	cpi	r25, 0x10	; 16
    4f22:	61 f4       	brne	.+24     	; 0x4f3c <_ZN3LCD9setCursorEhh+0x58>
    4f24:	84 30       	cpi	r24, 0x04	; 4
    4f26:	51 f4       	brne	.+20     	; 0x4f3c <_ZN3LCD9setCursorEhh+0x58>
    4f28:	de 01       	movw	r26, r28
    4f2a:	a4 0f       	add	r26, r20
    4f2c:	b1 1d       	adc	r27, r1
    4f2e:	11 96       	adiw	r26, 0x01	; 1
    4f30:	8c 91       	ld	r24, X
    4f32:	68 0f       	add	r22, r24
    4f34:	60 68       	ori	r22, 0x80	; 128
    4f36:	cf 01       	movw	r24, r30
    4f38:	c5 df       	rcall	.-118    	; 0x4ec4 <_ZN3LCD7commandEh>
    4f3a:	09 c0       	rjmp	.+18     	; 0x4f4e <_ZN3LCD9setCursorEhh+0x6a>
    4f3c:	de 01       	movw	r26, r28
    4f3e:	a4 0f       	add	r26, r20
    4f40:	b1 1d       	adc	r27, r1
    4f42:	15 96       	adiw	r26, 0x05	; 5
    4f44:	9c 91       	ld	r25, X
    4f46:	69 0f       	add	r22, r25
    4f48:	60 68       	ori	r22, 0x80	; 128
    4f4a:	cf 01       	movw	r24, r30
    4f4c:	bb df       	rcall	.-138    	; 0x4ec4 <_ZN3LCD7commandEh>
    4f4e:	28 96       	adiw	r28, 0x08	; 8
    4f50:	0f b6       	in	r0, 0x3f	; 63
    4f52:	f8 94       	cli
    4f54:	de bf       	out	0x3e, r29	; 62
    4f56:	0f be       	out	0x3f, r0	; 63
    4f58:	cd bf       	out	0x3d, r28	; 61
    4f5a:	df 91       	pop	r29
    4f5c:	cf 91       	pop	r28
    4f5e:	08 95       	ret

00004f60 <_ZN3LCD7displayEv>:
    4f60:	fc 01       	movw	r30, r24
    4f62:	65 81       	ldd	r22, Z+5	; 0x05
    4f64:	26 2f       	mov	r18, r22
    4f66:	24 60       	ori	r18, 0x04	; 4
    4f68:	25 83       	std	Z+5, r18	; 0x05
    4f6a:	6c 60       	ori	r22, 0x0C	; 12
    4f6c:	ab cf       	rjmp	.-170    	; 0x4ec4 <_ZN3LCD7commandEh>
    4f6e:	08 95       	ret

00004f70 <_ZN3LCD5beginEhhh>:
// can't assume that its in that state when a sketch starts (and the
// LiquidCrystal constructor is called).
// A call to begin() will reinitialize the LCD.
//
void LCD::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
    4f70:	cf 93       	push	r28
    4f72:	df 93       	push	r29
    4f74:	ec 01       	movw	r28, r24
   if (lines > 1) 
    4f76:	42 30       	cpi	r20, 0x02	; 2
    4f78:	18 f0       	brcs	.+6      	; 0x4f80 <_ZN3LCD5beginEhhh+0x10>
   {
      _displayfunction |= LCD_2LINE;
    4f7a:	8c 81       	ldd	r24, Y+4	; 0x04
    4f7c:	88 60       	ori	r24, 0x08	; 8
    4f7e:	8c 83       	std	Y+4, r24	; 0x04
   }
   _numlines = lines;
    4f80:	4f 83       	std	Y+7, r20	; 0x07
   _cols = cols;
    4f82:	68 87       	std	Y+8, r22	; 0x08
   
   // for some 1 line displays you can select a 10 pixel high font
   // ------------------------------------------------------------
   if ((dotsize != LCD_5x8DOTS) && (lines == 1)) 
    4f84:	22 23       	and	r18, r18
    4f86:	29 f0       	breq	.+10     	; 0x4f92 <_ZN3LCD5beginEhhh+0x22>
    4f88:	41 30       	cpi	r20, 0x01	; 1
    4f8a:	19 f4       	brne	.+6      	; 0x4f92 <_ZN3LCD5beginEhhh+0x22>
   {
      _displayfunction |= LCD_5x10DOTS;
    4f8c:	8c 81       	ldd	r24, Y+4	; 0x04
    4f8e:	84 60       	ori	r24, 0x04	; 4
    4f90:	8c 83       	std	Y+4, r24	; 0x04
   // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
   // according to datasheet, we need at least 40ms after power rises above 2.7V
   // before sending commands. Arduino can turn on way before 4.5V so we'll wait 
   // 50
   // ---------------------------------------------------------------------------
   delay (100); // 100ms delay
    4f92:	64 e6       	ldi	r22, 0x64	; 100
    4f94:	70 e0       	ldi	r23, 0x00	; 0
    4f96:	80 e0       	ldi	r24, 0x00	; 0
    4f98:	90 e0       	ldi	r25, 0x00	; 0
    4f9a:	0e 94 45 36 	call	0x6c8a	; 0x6c8a <delay>
   
   //put the LCD into 4 bit or 8 bit mode
   // -------------------------------------
   if (! (_displayfunction & LCD_8BITMODE)) 
    4f9e:	6c 81       	ldd	r22, Y+4	; 0x04
    4fa0:	64 fd       	sbrc	r22, 4
    4fa2:	31 c0       	rjmp	.+98     	; 0x5006 <_ZN3LCD5beginEhhh+0x96>
   {
      // this is according to the hitachi HD44780 datasheet
      // figure 24, pg 46
      
      // we start in 8bit mode, try to set 4 bit mode
      send(0x03, FOUR_BITS);
    4fa4:	e8 81       	ld	r30, Y
    4fa6:	f9 81       	ldd	r31, Y+1	; 0x01
    4fa8:	02 84       	ldd	r0, Z+10	; 0x0a
    4faa:	f3 85       	ldd	r31, Z+11	; 0x0b
    4fac:	e0 2d       	mov	r30, r0
    4fae:	42 e0       	ldi	r20, 0x02	; 2
    4fb0:	63 e0       	ldi	r22, 0x03	; 3
    4fb2:	ce 01       	movw	r24, r28
    4fb4:	19 95       	eicall
      delayMicroseconds(4500); // wait min 4.1ms
    4fb6:	84 e9       	ldi	r24, 0x94	; 148
    4fb8:	91 e1       	ldi	r25, 0x11	; 17
    4fba:	0e 94 6e 36 	call	0x6cdc	; 0x6cdc <delayMicroseconds>
      
      // second try
      send ( 0x03, FOUR_BITS );
    4fbe:	e8 81       	ld	r30, Y
    4fc0:	f9 81       	ldd	r31, Y+1	; 0x01
    4fc2:	02 84       	ldd	r0, Z+10	; 0x0a
    4fc4:	f3 85       	ldd	r31, Z+11	; 0x0b
    4fc6:	e0 2d       	mov	r30, r0
    4fc8:	42 e0       	ldi	r20, 0x02	; 2
    4fca:	63 e0       	ldi	r22, 0x03	; 3
    4fcc:	ce 01       	movw	r24, r28
    4fce:	19 95       	eicall
      delayMicroseconds(4500); // wait min 4.1ms
    4fd0:	84 e9       	ldi	r24, 0x94	; 148
    4fd2:	91 e1       	ldi	r25, 0x11	; 17
    4fd4:	0e 94 6e 36 	call	0x6cdc	; 0x6cdc <delayMicroseconds>
      
      // third go!
      send( 0x03, FOUR_BITS );
    4fd8:	e8 81       	ld	r30, Y
    4fda:	f9 81       	ldd	r31, Y+1	; 0x01
    4fdc:	02 84       	ldd	r0, Z+10	; 0x0a
    4fde:	f3 85       	ldd	r31, Z+11	; 0x0b
    4fe0:	e0 2d       	mov	r30, r0
    4fe2:	42 e0       	ldi	r20, 0x02	; 2
    4fe4:	63 e0       	ldi	r22, 0x03	; 3
    4fe6:	ce 01       	movw	r24, r28
    4fe8:	19 95       	eicall
      delayMicroseconds(150);
    4fea:	86 e9       	ldi	r24, 0x96	; 150
    4fec:	90 e0       	ldi	r25, 0x00	; 0
    4fee:	0e 94 6e 36 	call	0x6cdc	; 0x6cdc <delayMicroseconds>
      
      // finally, set to 4-bit interface
      send ( 0x02, FOUR_BITS ); 
    4ff2:	e8 81       	ld	r30, Y
    4ff4:	f9 81       	ldd	r31, Y+1	; 0x01
    4ff6:	02 84       	ldd	r0, Z+10	; 0x0a
    4ff8:	f3 85       	ldd	r31, Z+11	; 0x0b
    4ffa:	e0 2d       	mov	r30, r0
    4ffc:	42 e0       	ldi	r20, 0x02	; 2
    4ffe:	62 e0       	ldi	r22, 0x02	; 2
    5000:	ce 01       	movw	r24, r28
    5002:	19 95       	eicall
    5004:	13 c0       	rjmp	.+38     	; 0x502c <_ZN3LCD5beginEhhh+0xbc>
   {
      // this is according to the hitachi HD44780 datasheet
      // page 45 figure 23
      
      // Send function set command sequence
      command(LCD_FUNCTIONSET | _displayfunction);
    5006:	60 62       	ori	r22, 0x20	; 32
    5008:	ce 01       	movw	r24, r28
    500a:	5c df       	rcall	.-328    	; 0x4ec4 <_ZN3LCD7commandEh>
      delayMicroseconds(4500);  // wait more than 4.1ms
    500c:	84 e9       	ldi	r24, 0x94	; 148
    500e:	91 e1       	ldi	r25, 0x11	; 17
    5010:	0e 94 6e 36 	call	0x6cdc	; 0x6cdc <delayMicroseconds>
      
      // second try
      command(LCD_FUNCTIONSET | _displayfunction);
    5014:	6c 81       	ldd	r22, Y+4	; 0x04
    5016:	60 62       	ori	r22, 0x20	; 32
    5018:	ce 01       	movw	r24, r28
    501a:	54 df       	rcall	.-344    	; 0x4ec4 <_ZN3LCD7commandEh>
      delayMicroseconds(150);
    501c:	86 e9       	ldi	r24, 0x96	; 150
    501e:	90 e0       	ldi	r25, 0x00	; 0
    5020:	0e 94 6e 36 	call	0x6cdc	; 0x6cdc <delayMicroseconds>
      
      // third go
      command(LCD_FUNCTIONSET | _displayfunction);
    5024:	6c 81       	ldd	r22, Y+4	; 0x04
    5026:	60 62       	ori	r22, 0x20	; 32
    5028:	ce 01       	movw	r24, r28
    502a:	4c df       	rcall	.-360    	; 0x4ec4 <_ZN3LCD7commandEh>
   }
   
   // finally, set # lines, font size, etc.
   command(LCD_FUNCTIONSET | _displayfunction);  
    502c:	6c 81       	ldd	r22, Y+4	; 0x04
    502e:	60 62       	ori	r22, 0x20	; 32
    5030:	ce 01       	movw	r24, r28
    5032:	48 df       	rcall	.-368    	; 0x4ec4 <_ZN3LCD7commandEh>
   
   // turn the display on with no cursor or blinking default
   _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
    5034:	84 e0       	ldi	r24, 0x04	; 4
    5036:	8d 83       	std	Y+5, r24	; 0x05
   display();
    5038:	ce 01       	movw	r24, r28
    503a:	92 df       	rcall	.-220    	; 0x4f60 <_ZN3LCD7displayEv>
   
   // clear the LCD
   clear();
    503c:	ce 01       	movw	r24, r28
    503e:	4b df       	rcall	.-362    	; 0x4ed6 <_ZN3LCD5clearEv>
   
   // Initialize to default text direction (for romance languages)
   _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    5040:	82 e0       	ldi	r24, 0x02	; 2
    5042:	8e 83       	std	Y+6, r24	; 0x06
   // set the entry mode
   command(LCD_ENTRYMODESET | _displaymode);
    5044:	66 e0       	ldi	r22, 0x06	; 6
    5046:	ce 01       	movw	r24, r28
    5048:	3d df       	rcall	.-390    	; 0x4ec4 <_ZN3LCD7commandEh>

   backlight();
    504a:	ce 01       	movw	r24, r28
    504c:	32 df       	rcall	.-412    	; 0x4eb2 <_ZN3LCD9backlightEv>

}
    504e:	df 91       	pop	r29
    5050:	cf 91       	pop	r28
    5052:	08 95       	ret

00005054 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>:
   // Initialise pin mapping
   _data_pins[0] = ( 1 << d4 );
   _data_pins[1] = ( 1 << d5 );
   _data_pins[2] = ( 1 << d6 );
   _data_pins[3] = ( 1 << d7 );   
}
    5054:	21 e0       	ldi	r18, 0x01	; 1
    5056:	01 c0       	rjmp	.+2      	; 0x505a <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x6>
    5058:	22 0f       	add	r18, r18
    505a:	6a 95       	dec	r22
    505c:	ea f7       	brpl	.-6      	; 0x5058 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x4>
    505e:	dc 01       	movw	r26, r24
    5060:	1b 96       	adiw	r26, 0x0b	; 11
    5062:	2c 93       	st	X, r18
    5064:	1b 97       	sbiw	r26, 0x0b	; 11
    5066:	19 96       	adiw	r26, 0x09	; 9
    5068:	4c 93       	st	X, r20
    506a:	19 97       	sbiw	r26, 0x09	; 9
    506c:	ed 91       	ld	r30, X+
    506e:	fc 91       	ld	r31, X
    5070:	00 84       	ldd	r0, Z+8	; 0x08
    5072:	f1 85       	ldd	r31, Z+9	; 0x09
    5074:	e0 2d       	mov	r30, r0
    5076:	60 e0       	ldi	r22, 0x00	; 0
    5078:	19 95       	eicall
    507a:	08 95       	ret

0000507c <_ZN17LiquidCrystal_I2C12setBacklightEh>:
    507c:	fc 01       	movw	r30, r24
    507e:	83 85       	ldd	r24, Z+11	; 0x0b
    5080:	88 23       	and	r24, r24
    5082:	89 f0       	breq	.+34     	; 0x50a6 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x2a>
    5084:	91 85       	ldd	r25, Z+9	; 0x09
    5086:	91 11       	cpse	r25, r1
    5088:	03 c0       	rjmp	.+6      	; 0x5090 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x14>
    508a:	61 11       	cpse	r22, r1
    508c:	05 c0       	rjmp	.+10     	; 0x5098 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x1c>
    508e:	06 c0       	rjmp	.+12     	; 0x509c <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    5090:	91 30       	cpi	r25, 0x01	; 1
    5092:	21 f4       	brne	.+8      	; 0x509c <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    5094:	61 11       	cpse	r22, r1
    5096:	02 c0       	rjmp	.+4      	; 0x509c <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    5098:	84 87       	std	Z+12, r24	; 0x0c
    509a:	01 c0       	rjmp	.+2      	; 0x509e <_ZN17LiquidCrystal_I2C12setBacklightEh+0x22>
    509c:	14 86       	std	Z+12, r1	; 0x0c
    509e:	64 85       	ldd	r22, Z+12	; 0x0c
    50a0:	cf 01       	movw	r24, r30
    50a2:	0d 96       	adiw	r24, 0x0d	; 13
    50a4:	cd ce       	rjmp	.-614    	; 0x4e40 <_ZN5I2CIO5writeEh>
    50a6:	08 95       	ret

000050a8 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh>:
    50a8:	6f 92       	push	r6
    50aa:	7f 92       	push	r7
    50ac:	8f 92       	push	r8
    50ae:	af 92       	push	r10
    50b0:	cf 92       	push	r12
    50b2:	df 92       	push	r13
    50b4:	ef 92       	push	r14
    50b6:	ff 92       	push	r15
    50b8:	0f 93       	push	r16
    50ba:	1f 93       	push	r17
    50bc:	cf 93       	push	r28
    50be:	df 93       	push	r29
    50c0:	cd b7       	in	r28, 0x3d	; 61
    50c2:	de b7       	in	r29, 0x3e	; 62
    50c4:	3c 01       	movw	r6, r24
    50c6:	d6 2e       	mov	r13, r22
    50c8:	f4 2e       	mov	r15, r20
    50ca:	12 2f       	mov	r17, r18
    50cc:	ea de       	rcall	.-556    	; 0x4ea2 <_ZN3LCDC1Ev>
    50ce:	8d ef       	ldi	r24, 0xFD	; 253
    50d0:	93 e0       	ldi	r25, 0x03	; 3
    50d2:	f3 01       	movw	r30, r6
    50d4:	91 83       	std	Z+1, r25	; 0x01
    50d6:	80 83       	st	Z, r24
    50d8:	c3 01       	movw	r24, r6
    50da:	0d 96       	adiw	r24, 0x0d	; 13
    50dc:	84 de       	rcall	.-760    	; 0x4de6 <_ZN5I2CIOC1Ev>
    50de:	f3 01       	movw	r30, r6
    50e0:	d2 86       	std	Z+10, r13	; 0x0a
    50e2:	13 86       	std	Z+11, r1	; 0x0b
    50e4:	14 86       	std	Z+12, r1	; 0x0c
    50e6:	11 86       	std	Z+9, r1	; 0x09
    50e8:	81 e0       	ldi	r24, 0x01	; 1
    50ea:	98 2f       	mov	r25, r24
    50ec:	01 c0       	rjmp	.+2      	; 0x50f0 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x48>
    50ee:	99 0f       	add	r25, r25
    50f0:	fa 94       	dec	r15
    50f2:	ea f7       	brpl	.-6      	; 0x50ee <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x46>
    50f4:	91 8b       	std	Z+17, r25	; 0x11
    50f6:	98 2f       	mov	r25, r24
    50f8:	01 c0       	rjmp	.+2      	; 0x50fc <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x54>
    50fa:	99 0f       	add	r25, r25
    50fc:	1a 95       	dec	r17
    50fe:	ea f7       	brpl	.-6      	; 0x50fa <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x52>
    5100:	92 8b       	std	Z+18, r25	; 0x12
    5102:	98 2f       	mov	r25, r24
    5104:	01 c0       	rjmp	.+2      	; 0x5108 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x60>
    5106:	99 0f       	add	r25, r25
    5108:	0a 95       	dec	r16
    510a:	ea f7       	brpl	.-6      	; 0x5106 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x5e>
    510c:	93 8b       	std	Z+19, r25	; 0x13
    510e:	98 2f       	mov	r25, r24
    5110:	01 c0       	rjmp	.+2      	; 0x5114 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x6c>
    5112:	99 0f       	add	r25, r25
    5114:	ea 94       	dec	r14
    5116:	ea f7       	brpl	.-6      	; 0x5112 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x6a>
    5118:	94 8b       	std	Z+20, r25	; 0x14
    511a:	98 2f       	mov	r25, r24
    511c:	01 c0       	rjmp	.+2      	; 0x5120 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x78>
    511e:	99 0f       	add	r25, r25
    5120:	ca 94       	dec	r12
    5122:	ea f7       	brpl	.-6      	; 0x511e <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x76>
    5124:	95 8b       	std	Z+21, r25	; 0x15
    5126:	98 2f       	mov	r25, r24
    5128:	01 c0       	rjmp	.+2      	; 0x512c <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x84>
    512a:	99 0f       	add	r25, r25
    512c:	aa 94       	dec	r10
    512e:	ea f7       	brpl	.-6      	; 0x512a <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x82>
    5130:	96 8b       	std	Z+22, r25	; 0x16
    5132:	01 c0       	rjmp	.+2      	; 0x5136 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x8e>
    5134:	88 0f       	add	r24, r24
    5136:	8a 94       	dec	r8
    5138:	ea f7       	brpl	.-6      	; 0x5134 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhh+0x8c>
    513a:	87 8b       	std	Z+23, r24	; 0x17
    513c:	df 91       	pop	r29
    513e:	cf 91       	pop	r28
    5140:	1f 91       	pop	r17
    5142:	0f 91       	pop	r16
    5144:	ff 90       	pop	r15
    5146:	ef 90       	pop	r14
    5148:	df 90       	pop	r13
    514a:	cf 90       	pop	r12
    514c:	af 90       	pop	r10
    514e:	8f 90       	pop	r8
    5150:	7f 90       	pop	r7
    5152:	6f 90       	pop	r6
    5154:	08 95       	ret

00005156 <_ZN17LiquidCrystal_I2C4initEv>:
    5156:	0f 93       	push	r16
    5158:	1f 93       	push	r17
    515a:	cf 93       	push	r28
    515c:	df 93       	push	r29
    515e:	ec 01       	movw	r28, r24
    5160:	8c 01       	movw	r16, r24
    5162:	03 5f       	subi	r16, 0xF3	; 243
    5164:	1f 4f       	sbci	r17, 0xFF	; 255
    5166:	6a 85       	ldd	r22, Y+10	; 0x0a
    5168:	c8 01       	movw	r24, r16
    516a:	50 de       	rcall	.-864    	; 0x4e0c <_ZN5I2CIO5beginEh>
    516c:	01 97       	sbiw	r24, 0x01	; 1
    516e:	51 f4       	brne	.+20     	; 0x5184 <_ZN17LiquidCrystal_I2C4initEv+0x2e>
    5170:	61 e0       	ldi	r22, 0x01	; 1
    5172:	c8 01       	movw	r24, r16
    5174:	3f de       	rcall	.-898    	; 0x4df4 <_ZN5I2CIO8portModeEh>
    5176:	1c 82       	std	Y+4, r1	; 0x04
    5178:	60 e0       	ldi	r22, 0x00	; 0
    517a:	c8 01       	movw	r24, r16
    517c:	61 de       	rcall	.-830    	; 0x4e40 <_ZN5I2CIO5writeEh>
    517e:	81 e0       	ldi	r24, 0x01	; 1
    5180:	90 e0       	ldi	r25, 0x00	; 0
    5182:	02 c0       	rjmp	.+4      	; 0x5188 <_ZN17LiquidCrystal_I2C4initEv+0x32>
    5184:	80 e0       	ldi	r24, 0x00	; 0
    5186:	90 e0       	ldi	r25, 0x00	; 0
    5188:	df 91       	pop	r29
    518a:	cf 91       	pop	r28
    518c:	1f 91       	pop	r17
    518e:	0f 91       	pop	r16
    5190:	08 95       	ret

00005192 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
}

//
// pulseEnable
void LiquidCrystal_I2C::pulseEnable (uint8_t data)
{
    5192:	ff 92       	push	r15
    5194:	0f 93       	push	r16
    5196:	1f 93       	push	r17
    5198:	cf 93       	push	r28
    519a:	df 93       	push	r29
    519c:	ec 01       	movw	r28, r24
    519e:	f6 2e       	mov	r15, r22
   _i2cio.write (data | _En);   // En HIGH
    51a0:	8c 01       	movw	r16, r24
    51a2:	03 5f       	subi	r16, 0xF3	; 243
    51a4:	1f 4f       	sbci	r17, 0xFF	; 255
    51a6:	99 89       	ldd	r25, Y+17	; 0x11
    51a8:	69 2b       	or	r22, r25
    51aa:	c8 01       	movw	r24, r16
    51ac:	49 de       	rcall	.-878    	; 0x4e40 <_ZN5I2CIO5writeEh>
   _i2cio.write (data & ~_En);  // En LOW
    51ae:	99 89       	ldd	r25, Y+17	; 0x11
    51b0:	90 95       	com	r25
    51b2:	6f 2d       	mov	r22, r15
    51b4:	69 23       	and	r22, r25
    51b6:	c8 01       	movw	r24, r16
    51b8:	43 de       	rcall	.-890    	; 0x4e40 <_ZN5I2CIO5writeEh>
    51ba:	df 91       	pop	r29
    51bc:	cf 91       	pop	r28
    51be:	1f 91       	pop	r17
    51c0:	0f 91       	pop	r16
    51c2:	ff 90       	pop	r15
    51c4:	08 95       	ret

000051c6 <_ZN17LiquidCrystal_I2C10write4bitsEhh>:
}

//
// write4bits
void LiquidCrystal_I2C::write4bits ( uint8_t value, uint8_t mode ) 
{
    51c6:	dc 01       	movw	r26, r24
    51c8:	fc 01       	movw	r30, r24
    51ca:	74 96       	adiw	r30, 0x14	; 20
    51cc:	9c 01       	movw	r18, r24
    51ce:	28 5e       	subi	r18, 0xE8	; 232
    51d0:	3f 4f       	sbci	r19, 0xFF	; 255
   uint8_t pinMapValue = 0;
    51d2:	90 e0       	ldi	r25, 0x00	; 0
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
   {
      if ( ( value & 0x1 ) == 1 )
    51d4:	60 ff       	sbrs	r22, 0
    51d6:	02 c0       	rjmp	.+4      	; 0x51dc <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x16>
      {
         pinMapValue |= _data_pins[i];
    51d8:	80 81       	ld	r24, Z
    51da:	98 2b       	or	r25, r24
      }
      value = ( value >> 1 );
    51dc:	66 95       	lsr	r22
    51de:	31 96       	adiw	r30, 0x01	; 1
{
   uint8_t pinMapValue = 0;
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
    51e0:	e2 17       	cp	r30, r18
    51e2:	f3 07       	cpc	r31, r19
    51e4:	b9 f7       	brne	.-18     	; 0x51d4 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0xe>
      value = ( value >> 1 );
   }
   
   // Is it a command or data
   // -----------------------
   if ( mode == DATA )
    51e6:	41 30       	cpi	r20, 0x01	; 1
    51e8:	19 f4       	brne	.+6      	; 0x51f0 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x2a>
   {
      mode = _Rs;
    51ea:	53 96       	adiw	r26, 0x13	; 19
    51ec:	4c 91       	ld	r20, X
    51ee:	53 97       	sbiw	r26, 0x13	; 19
    51f0:	1c 96       	adiw	r26, 0x0c	; 12
    51f2:	6c 91       	ld	r22, X
    51f4:	1c 97       	sbiw	r26, 0x0c	; 12
    51f6:	69 2b       	or	r22, r25
   }
   
   pinMapValue |= mode | _backlightStsMask;
    51f8:	64 2b       	or	r22, r20
   pulseEnable ( pinMapValue );
    51fa:	cd 01       	movw	r24, r26
    51fc:	ca cf       	rjmp	.-108    	; 0x5192 <_ZN17LiquidCrystal_I2C11pulseEnableEh>
    51fe:	08 95       	ret

00005200 <_ZN17LiquidCrystal_I2C4sendEhh>:
//----------------------------------------------------------------------------

//
// send - write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) 
{
    5200:	0f 93       	push	r16
    5202:	1f 93       	push	r17
    5204:	cf 93       	push	r28
    5206:	df 93       	push	r29
    5208:	8c 01       	movw	r16, r24
    520a:	c6 2f       	mov	r28, r22
    520c:	d4 2f       	mov	r29, r20
   // No need to use the delay routines since the time taken to write takes
   // longer that what is needed both for toggling and enable pin an to execute
   // the command.
   
   if ( mode == FOUR_BITS )
    520e:	42 30       	cpi	r20, 0x02	; 2
    5210:	21 f4       	brne	.+8      	; 0x521a <_ZN17LiquidCrystal_I2C4sendEhh+0x1a>
   {
      write4bits( (value & 0x0F), COMMAND );
    5212:	6f 70       	andi	r22, 0x0F	; 15
    5214:	40 e0       	ldi	r20, 0x00	; 0
    5216:	d7 df       	rcall	.-82     	; 0x51c6 <_ZN17LiquidCrystal_I2C10write4bitsEhh>
    5218:	0f c0       	rjmp	.+30     	; 0x5238 <_ZN17LiquidCrystal_I2C4sendEhh+0x38>
   }
   else 
   {
      write4bits( (value >> 4), mode );
    521a:	70 e0       	ldi	r23, 0x00	; 0
    521c:	75 95       	asr	r23
    521e:	67 95       	ror	r22
    5220:	75 95       	asr	r23
    5222:	67 95       	ror	r22
    5224:	75 95       	asr	r23
    5226:	67 95       	ror	r22
    5228:	75 95       	asr	r23
    522a:	67 95       	ror	r22
    522c:	cc df       	rcall	.-104    	; 0x51c6 <_ZN17LiquidCrystal_I2C10write4bitsEhh>
      write4bits( (value & 0x0F), mode);
    522e:	6c 2f       	mov	r22, r28
    5230:	6f 70       	andi	r22, 0x0F	; 15
    5232:	4d 2f       	mov	r20, r29
    5234:	c8 01       	movw	r24, r16
    5236:	c7 df       	rcall	.-114    	; 0x51c6 <_ZN17LiquidCrystal_I2C10write4bitsEhh>
   }
}
    5238:	df 91       	pop	r29
    523a:	cf 91       	pop	r28
    523c:	1f 91       	pop	r17
    523e:	0f 91       	pop	r16
    5240:	08 95       	ret

00005242 <_ZN17LiquidCrystal_I2C5beginEhhh>:
// ---------------------------------------------------------------------------

//
// begin
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
    5242:	ff 92       	push	r15
    5244:	0f 93       	push	r16
    5246:	1f 93       	push	r17
    5248:	cf 93       	push	r28
    524a:	df 93       	push	r29
    524c:	ec 01       	movw	r28, r24
    524e:	16 2f       	mov	r17, r22
    5250:	04 2f       	mov	r16, r20
    5252:	f2 2e       	mov	r15, r18
   
   init();     // Initialise the I2C expander interface
    5254:	80 df       	rcall	.-256    	; 0x5156 <_ZN17LiquidCrystal_I2C4initEv>
   LCD::begin ( cols, lines, dotsize );   
    5256:	2f 2d       	mov	r18, r15
    5258:	40 2f       	mov	r20, r16
    525a:	61 2f       	mov	r22, r17
    525c:	ce 01       	movw	r24, r28
    525e:	88 de       	rcall	.-752    	; 0x4f70 <_ZN3LCD5beginEhhh>
}
    5260:	df 91       	pop	r29
    5262:	cf 91       	pop	r28
    5264:	1f 91       	pop	r17
    5266:	0f 91       	pop	r16
    5268:	ff 90       	pop	r15
    526a:	08 95       	ret

0000526c <__vector_20>:
void (*TimerOne::isrCallback)() = NULL;

// interrupt service routine that wraps a user defined function supplied by attachInterrupt
#if defined(__AVR__)
ISR(TIMER1_OVF_vect)
{
    526c:	1f 92       	push	r1
    526e:	0f 92       	push	r0
    5270:	0f b6       	in	r0, 0x3f	; 63
    5272:	0f 92       	push	r0
    5274:	11 24       	eor	r1, r1
    5276:	0b b6       	in	r0, 0x3b	; 59
    5278:	0f 92       	push	r0
    527a:	2f 93       	push	r18
    527c:	3f 93       	push	r19
    527e:	4f 93       	push	r20
    5280:	5f 93       	push	r21
    5282:	6f 93       	push	r22
    5284:	7f 93       	push	r23
    5286:	8f 93       	push	r24
    5288:	9f 93       	push	r25
    528a:	af 93       	push	r26
    528c:	bf 93       	push	r27
    528e:	ef 93       	push	r30
    5290:	ff 93       	push	r31
  Timer1.isrCallback();
    5292:	e0 91 77 05 	lds	r30, 0x0577
    5296:	f0 91 78 05 	lds	r31, 0x0578
    529a:	19 95       	eicall
}
    529c:	ff 91       	pop	r31
    529e:	ef 91       	pop	r30
    52a0:	bf 91       	pop	r27
    52a2:	af 91       	pop	r26
    52a4:	9f 91       	pop	r25
    52a6:	8f 91       	pop	r24
    52a8:	7f 91       	pop	r23
    52aa:	6f 91       	pop	r22
    52ac:	5f 91       	pop	r21
    52ae:	4f 91       	pop	r20
    52b0:	3f 91       	pop	r19
    52b2:	2f 91       	pop	r18
    52b4:	0f 90       	pop	r0
    52b6:	0b be       	out	0x3b, r0	; 59
    52b8:	0f 90       	pop	r0
    52ba:	0f be       	out	0x3f, r0	; 63
    52bc:	0f 90       	pop	r0
    52be:	1f 90       	pop	r1
    52c0:	18 95       	reti

000052c2 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    52c2:	10 92 e9 05 	sts	0x05E9, r1
    52c6:	81 e0       	ldi	r24, 0x01	; 1
    52c8:	80 93 e7 05 	sts	0x05E7, r24
    52cc:	10 92 e6 05 	sts	0x05E6, r1
    52d0:	61 e0       	ldi	r22, 0x01	; 1
    52d2:	84 e1       	ldi	r24, 0x14	; 20
    52d4:	0e 94 82 37 	call	0x6f04	; 0x6f04 <digitalWrite>
    52d8:	61 e0       	ldi	r22, 0x01	; 1
    52da:	85 e1       	ldi	r24, 0x15	; 21
    52dc:	0e 94 82 37 	call	0x6f04	; 0x6f04 <digitalWrite>
    52e0:	e9 eb       	ldi	r30, 0xB9	; 185
    52e2:	f0 e0       	ldi	r31, 0x00	; 0
    52e4:	80 81       	ld	r24, Z
    52e6:	8e 7f       	andi	r24, 0xFE	; 254
    52e8:	80 83       	st	Z, r24
    52ea:	80 81       	ld	r24, Z
    52ec:	8d 7f       	andi	r24, 0xFD	; 253
    52ee:	80 83       	st	Z, r24
    52f0:	88 e4       	ldi	r24, 0x48	; 72
    52f2:	80 93 b8 00 	sts	0x00B8, r24
    52f6:	85 e4       	ldi	r24, 0x45	; 69
    52f8:	80 93 bc 00 	sts	0x00BC, r24
    52fc:	08 95       	ret

000052fe <twi_readFrom>:
    52fe:	41 32       	cpi	r20, 0x21	; 33
    5300:	08 f0       	brcs	.+2      	; 0x5304 <twi_readFrom+0x6>
    5302:	46 c0       	rjmp	.+140    	; 0x5390 <twi_readFrom+0x92>
    5304:	90 91 e9 05 	lds	r25, 0x05E9
    5308:	91 11       	cpse	r25, r1
    530a:	fc cf       	rjmp	.-8      	; 0x5304 <twi_readFrom+0x6>
    530c:	31 e0       	ldi	r19, 0x01	; 1
    530e:	30 93 e9 05 	sts	0x05E9, r19
    5312:	20 93 e7 05 	sts	0x05E7, r18
    5316:	2f ef       	ldi	r18, 0xFF	; 255
    5318:	20 93 7c 05 	sts	0x057C, r18
    531c:	10 92 c1 05 	sts	0x05C1, r1
    5320:	24 0f       	add	r18, r20
    5322:	20 93 c0 05 	sts	0x05C0, r18
    5326:	30 93 e8 05 	sts	0x05E8, r19
    532a:	20 91 e8 05 	lds	r18, 0x05E8
    532e:	88 0f       	add	r24, r24
    5330:	82 2b       	or	r24, r18
    5332:	80 93 e8 05 	sts	0x05E8, r24
    5336:	80 91 e6 05 	lds	r24, 0x05E6
    533a:	81 30       	cpi	r24, 0x01	; 1
    533c:	51 f4       	brne	.+20     	; 0x5352 <twi_readFrom+0x54>
    533e:	10 92 e6 05 	sts	0x05E6, r1
    5342:	80 91 e8 05 	lds	r24, 0x05E8
    5346:	80 93 bb 00 	sts	0x00BB, r24
    534a:	85 ec       	ldi	r24, 0xC5	; 197
    534c:	80 93 bc 00 	sts	0x00BC, r24
    5350:	03 c0       	rjmp	.+6      	; 0x5358 <twi_readFrom+0x5a>
    5352:	85 ee       	ldi	r24, 0xE5	; 229
    5354:	80 93 bc 00 	sts	0x00BC, r24
    5358:	80 91 e9 05 	lds	r24, 0x05E9
    535c:	81 30       	cpi	r24, 0x01	; 1
    535e:	e1 f3       	breq	.-8      	; 0x5358 <twi_readFrom+0x5a>
    5360:	80 91 c1 05 	lds	r24, 0x05C1
    5364:	84 17       	cp	r24, r20
    5366:	10 f4       	brcc	.+4      	; 0x536c <twi_readFrom+0x6e>
    5368:	40 91 c1 05 	lds	r20, 0x05C1
    536c:	44 23       	and	r20, r20
    536e:	89 f0       	breq	.+34     	; 0x5392 <twi_readFrom+0x94>
    5370:	a2 ec       	ldi	r26, 0xC2	; 194
    5372:	b5 e0       	ldi	r27, 0x05	; 5
    5374:	fb 01       	movw	r30, r22
    5376:	8f ef       	ldi	r24, 0xFF	; 255
    5378:	84 0f       	add	r24, r20
    537a:	90 e0       	ldi	r25, 0x00	; 0
    537c:	01 96       	adiw	r24, 0x01	; 1
    537e:	68 0f       	add	r22, r24
    5380:	79 1f       	adc	r23, r25
    5382:	8d 91       	ld	r24, X+
    5384:	81 93       	st	Z+, r24
    5386:	e6 17       	cp	r30, r22
    5388:	f7 07       	cpc	r31, r23
    538a:	d9 f7       	brne	.-10     	; 0x5382 <twi_readFrom+0x84>
    538c:	94 2f       	mov	r25, r20
    538e:	01 c0       	rjmp	.+2      	; 0x5392 <twi_readFrom+0x94>
    5390:	90 e0       	ldi	r25, 0x00	; 0
    5392:	89 2f       	mov	r24, r25
    5394:	08 95       	ret

00005396 <twi_writeTo>:
    5396:	0f 93       	push	r16
    5398:	41 32       	cpi	r20, 0x21	; 33
    539a:	08 f0       	brcs	.+2      	; 0x539e <twi_writeTo+0x8>
    539c:	51 c0       	rjmp	.+162    	; 0x5440 <twi_writeTo+0xaa>
    539e:	30 91 e9 05 	lds	r19, 0x05E9
    53a2:	31 11       	cpse	r19, r1
    53a4:	fc cf       	rjmp	.-8      	; 0x539e <twi_writeTo+0x8>
    53a6:	92 e0       	ldi	r25, 0x02	; 2
    53a8:	90 93 e9 05 	sts	0x05E9, r25
    53ac:	00 93 e7 05 	sts	0x05E7, r16
    53b0:	9f ef       	ldi	r25, 0xFF	; 255
    53b2:	90 93 7c 05 	sts	0x057C, r25
    53b6:	10 92 c1 05 	sts	0x05C1, r1
    53ba:	40 93 c0 05 	sts	0x05C0, r20
    53be:	44 23       	and	r20, r20
    53c0:	71 f0       	breq	.+28     	; 0x53de <twi_writeTo+0x48>
    53c2:	fb 01       	movw	r30, r22
    53c4:	a2 ec       	ldi	r26, 0xC2	; 194
    53c6:	b5 e0       	ldi	r27, 0x05	; 5
    53c8:	41 50       	subi	r20, 0x01	; 1
    53ca:	50 e0       	ldi	r21, 0x00	; 0
    53cc:	4f 5f       	subi	r20, 0xFF	; 255
    53ce:	5f 4f       	sbci	r21, 0xFF	; 255
    53d0:	64 0f       	add	r22, r20
    53d2:	75 1f       	adc	r23, r21
    53d4:	91 91       	ld	r25, Z+
    53d6:	9d 93       	st	X+, r25
    53d8:	e6 17       	cp	r30, r22
    53da:	f7 07       	cpc	r31, r23
    53dc:	d9 f7       	brne	.-10     	; 0x53d4 <twi_writeTo+0x3e>
    53de:	10 92 e8 05 	sts	0x05E8, r1
    53e2:	90 91 e8 05 	lds	r25, 0x05E8
    53e6:	88 0f       	add	r24, r24
    53e8:	89 2b       	or	r24, r25
    53ea:	80 93 e8 05 	sts	0x05E8, r24
    53ee:	80 91 e6 05 	lds	r24, 0x05E6
    53f2:	81 30       	cpi	r24, 0x01	; 1
    53f4:	51 f4       	brne	.+20     	; 0x540a <twi_writeTo+0x74>
    53f6:	10 92 e6 05 	sts	0x05E6, r1
    53fa:	80 91 e8 05 	lds	r24, 0x05E8
    53fe:	80 93 bb 00 	sts	0x00BB, r24
    5402:	85 ec       	ldi	r24, 0xC5	; 197
    5404:	80 93 bc 00 	sts	0x00BC, r24
    5408:	03 c0       	rjmp	.+6      	; 0x5410 <twi_writeTo+0x7a>
    540a:	85 ee       	ldi	r24, 0xE5	; 229
    540c:	80 93 bc 00 	sts	0x00BC, r24
    5410:	22 23       	and	r18, r18
    5412:	41 f0       	breq	.+16     	; 0x5424 <twi_writeTo+0x8e>
    5414:	80 91 e9 05 	lds	r24, 0x05E9
    5418:	82 30       	cpi	r24, 0x02	; 2
    541a:	21 f4       	brne	.+8      	; 0x5424 <twi_writeTo+0x8e>
    541c:	80 91 e9 05 	lds	r24, 0x05E9
    5420:	82 30       	cpi	r24, 0x02	; 2
    5422:	e1 f3       	breq	.-8      	; 0x541c <twi_writeTo+0x86>
    5424:	80 91 7c 05 	lds	r24, 0x057C
    5428:	8f 3f       	cpi	r24, 0xFF	; 255
    542a:	79 f0       	breq	.+30     	; 0x544a <twi_writeTo+0xb4>
    542c:	80 91 7c 05 	lds	r24, 0x057C
    5430:	80 32       	cpi	r24, 0x20	; 32
    5432:	41 f0       	breq	.+16     	; 0x5444 <twi_writeTo+0xae>
    5434:	80 91 7c 05 	lds	r24, 0x057C
    5438:	80 33       	cpi	r24, 0x30	; 48
    543a:	31 f0       	breq	.+12     	; 0x5448 <twi_writeTo+0xb2>
    543c:	34 e0       	ldi	r19, 0x04	; 4
    543e:	05 c0       	rjmp	.+10     	; 0x544a <twi_writeTo+0xb4>
    5440:	31 e0       	ldi	r19, 0x01	; 1
    5442:	03 c0       	rjmp	.+6      	; 0x544a <twi_writeTo+0xb4>
    5444:	32 e0       	ldi	r19, 0x02	; 2
    5446:	01 c0       	rjmp	.+2      	; 0x544a <twi_writeTo+0xb4>
    5448:	33 e0       	ldi	r19, 0x03	; 3
    544a:	83 2f       	mov	r24, r19
    544c:	0f 91       	pop	r16
    544e:	08 95       	ret

00005450 <twi_transmit>:
    5450:	61 32       	cpi	r22, 0x21	; 33
    5452:	c8 f4       	brcc	.+50     	; 0x5486 <twi_transmit+0x36>
    5454:	20 91 e9 05 	lds	r18, 0x05E9
    5458:	24 30       	cpi	r18, 0x04	; 4
    545a:	b9 f4       	brne	.+46     	; 0x548a <twi_transmit+0x3a>
    545c:	60 93 9e 05 	sts	0x059E, r22
    5460:	66 23       	and	r22, r22
    5462:	a9 f0       	breq	.+42     	; 0x548e <twi_transmit+0x3e>
    5464:	fc 01       	movw	r30, r24
    5466:	a0 ea       	ldi	r26, 0xA0	; 160
    5468:	b5 e0       	ldi	r27, 0x05	; 5
    546a:	61 50       	subi	r22, 0x01	; 1
    546c:	26 2f       	mov	r18, r22
    546e:	30 e0       	ldi	r19, 0x00	; 0
    5470:	2f 5f       	subi	r18, 0xFF	; 255
    5472:	3f 4f       	sbci	r19, 0xFF	; 255
    5474:	28 0f       	add	r18, r24
    5476:	39 1f       	adc	r19, r25
    5478:	91 91       	ld	r25, Z+
    547a:	9d 93       	st	X+, r25
    547c:	e2 17       	cp	r30, r18
    547e:	f3 07       	cpc	r31, r19
    5480:	d9 f7       	brne	.-10     	; 0x5478 <twi_transmit+0x28>
    5482:	80 e0       	ldi	r24, 0x00	; 0
    5484:	08 95       	ret
    5486:	81 e0       	ldi	r24, 0x01	; 1
    5488:	08 95       	ret
    548a:	82 e0       	ldi	r24, 0x02	; 2
    548c:	08 95       	ret
    548e:	80 e0       	ldi	r24, 0x00	; 0
    5490:	08 95       	ret

00005492 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    5492:	85 ed       	ldi	r24, 0xD5	; 213
    5494:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    5498:	ec eb       	ldi	r30, 0xBC	; 188
    549a:	f0 e0       	ldi	r31, 0x00	; 0
    549c:	80 81       	ld	r24, Z
    549e:	84 fd       	sbrc	r24, 4
    54a0:	fd cf       	rjmp	.-6      	; 0x549c <twi_stop+0xa>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    54a2:	10 92 e9 05 	sts	0x05E9, r1
    54a6:	08 95       	ret

000054a8 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    54a8:	85 ec       	ldi	r24, 0xC5	; 197
    54aa:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
    54ae:	10 92 e9 05 	sts	0x05E9, r1
    54b2:	08 95       	ret

000054b4 <__vector_39>:
}

ISR(TWI_vect)
{
    54b4:	1f 92       	push	r1
    54b6:	0f 92       	push	r0
    54b8:	0f b6       	in	r0, 0x3f	; 63
    54ba:	0f 92       	push	r0
    54bc:	11 24       	eor	r1, r1
    54be:	0b b6       	in	r0, 0x3b	; 59
    54c0:	0f 92       	push	r0
    54c2:	2f 93       	push	r18
    54c4:	3f 93       	push	r19
    54c6:	4f 93       	push	r20
    54c8:	5f 93       	push	r21
    54ca:	6f 93       	push	r22
    54cc:	7f 93       	push	r23
    54ce:	8f 93       	push	r24
    54d0:	9f 93       	push	r25
    54d2:	af 93       	push	r26
    54d4:	bf 93       	push	r27
    54d6:	ef 93       	push	r30
    54d8:	ff 93       	push	r31
  switch(TW_STATUS){
    54da:	80 91 b9 00 	lds	r24, 0x00B9
    54de:	88 7f       	andi	r24, 0xF8	; 248
    54e0:	90 e0       	ldi	r25, 0x00	; 0
    54e2:	89 3c       	cpi	r24, 0xC9	; 201
    54e4:	91 05       	cpc	r25, r1
    54e6:	08 f0       	brcs	.+2      	; 0x54ea <__vector_39+0x36>
    54e8:	f0 c0       	rjmp	.+480    	; 0x56ca <__vector_39+0x216>
    54ea:	fc 01       	movw	r30, r24
    54ec:	88 27       	eor	r24, r24
    54ee:	ee 57       	subi	r30, 0x7E	; 126
    54f0:	ff 4f       	sbci	r31, 0xFF	; 255
    54f2:	8f 4f       	sbci	r24, 0xFF	; 255
    54f4:	0c 94 68 3b 	jmp	0x76d0	; 0x76d0 <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    54f8:	80 91 e8 05 	lds	r24, 0x05E8
    54fc:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5500:	85 ec       	ldi	r24, 0xC5	; 197
    5502:	80 93 bc 00 	sts	0x00BC, r24
    5506:	e1 c0       	rjmp	.+450    	; 0x56ca <__vector_39+0x216>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    5508:	90 91 c1 05 	lds	r25, 0x05C1
    550c:	80 91 c0 05 	lds	r24, 0x05C0
    5510:	98 17       	cp	r25, r24
    5512:	80 f4       	brcc	.+32     	; 0x5534 <__vector_39+0x80>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    5514:	e0 91 c1 05 	lds	r30, 0x05C1
    5518:	81 e0       	ldi	r24, 0x01	; 1
    551a:	8e 0f       	add	r24, r30
    551c:	80 93 c1 05 	sts	0x05C1, r24
    5520:	f0 e0       	ldi	r31, 0x00	; 0
    5522:	ee 53       	subi	r30, 0x3E	; 62
    5524:	fa 4f       	sbci	r31, 0xFA	; 250
    5526:	80 81       	ld	r24, Z
    5528:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    552c:	85 ec       	ldi	r24, 0xC5	; 197
    552e:	80 93 bc 00 	sts	0x00BC, r24
    5532:	cb c0       	rjmp	.+406    	; 0x56ca <__vector_39+0x216>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
    5534:	80 91 e7 05 	lds	r24, 0x05E7
    5538:	88 23       	and	r24, r24
    553a:	11 f0       	breq	.+4      	; 0x5540 <__vector_39+0x8c>
          twi_stop();
    553c:	aa df       	rcall	.-172    	; 0x5492 <twi_stop>
    553e:	c5 c0       	rjmp	.+394    	; 0x56ca <__vector_39+0x216>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    5540:	81 e0       	ldi	r24, 0x01	; 1
    5542:	80 93 e6 05 	sts	0x05E6, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    5546:	84 ea       	ldi	r24, 0xA4	; 164
    5548:	80 93 bc 00 	sts	0x00BC, r24
	  twi_state = TWI_READY;
    554c:	10 92 e9 05 	sts	0x05E9, r1
    5550:	bc c0       	rjmp	.+376    	; 0x56ca <__vector_39+0x216>
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    5552:	80 e2       	ldi	r24, 0x20	; 32
    5554:	80 93 7c 05 	sts	0x057C, r24
      twi_stop();
    5558:	9c df       	rcall	.-200    	; 0x5492 <twi_stop>
      break;
    555a:	b7 c0       	rjmp	.+366    	; 0x56ca <__vector_39+0x216>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    555c:	80 e3       	ldi	r24, 0x30	; 48
    555e:	80 93 7c 05 	sts	0x057C, r24
      twi_stop();
    5562:	97 df       	rcall	.-210    	; 0x5492 <twi_stop>
      break;
    5564:	b2 c0       	rjmp	.+356    	; 0x56ca <__vector_39+0x216>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    5566:	88 e3       	ldi	r24, 0x38	; 56
    5568:	80 93 7c 05 	sts	0x057C, r24
      twi_releaseBus();
    556c:	9d df       	rcall	.-198    	; 0x54a8 <twi_releaseBus>
      break;
    556e:	ad c0       	rjmp	.+346    	; 0x56ca <__vector_39+0x216>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    5570:	e0 91 c1 05 	lds	r30, 0x05C1
    5574:	81 e0       	ldi	r24, 0x01	; 1
    5576:	8e 0f       	add	r24, r30
    5578:	80 93 c1 05 	sts	0x05C1, r24
    557c:	80 91 bb 00 	lds	r24, 0x00BB
    5580:	f0 e0       	ldi	r31, 0x00	; 0
    5582:	ee 53       	subi	r30, 0x3E	; 62
    5584:	fa 4f       	sbci	r31, 0xFA	; 250
    5586:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    5588:	90 91 c1 05 	lds	r25, 0x05C1
    558c:	80 91 c0 05 	lds	r24, 0x05C0
    5590:	98 17       	cp	r25, r24
    5592:	20 f4       	brcc	.+8      	; 0x559c <__vector_39+0xe8>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5594:	85 ec       	ldi	r24, 0xC5	; 197
    5596:	80 93 bc 00 	sts	0x00BC, r24
    559a:	97 c0       	rjmp	.+302    	; 0x56ca <__vector_39+0x216>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    559c:	85 e8       	ldi	r24, 0x85	; 133
    559e:	80 93 bc 00 	sts	0x00BC, r24
    55a2:	93 c0       	rjmp	.+294    	; 0x56ca <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    55a4:	e0 91 c1 05 	lds	r30, 0x05C1
    55a8:	81 e0       	ldi	r24, 0x01	; 1
    55aa:	8e 0f       	add	r24, r30
    55ac:	80 93 c1 05 	sts	0x05C1, r24
    55b0:	80 91 bb 00 	lds	r24, 0x00BB
    55b4:	f0 e0       	ldi	r31, 0x00	; 0
    55b6:	ee 53       	subi	r30, 0x3E	; 62
    55b8:	fa 4f       	sbci	r31, 0xFA	; 250
    55ba:	80 83       	st	Z, r24
	if (twi_sendStop)
    55bc:	80 91 e7 05 	lds	r24, 0x05E7
    55c0:	88 23       	and	r24, r24
    55c2:	11 f0       	breq	.+4      	; 0x55c8 <__vector_39+0x114>
          twi_stop();
    55c4:	66 df       	rcall	.-308    	; 0x5492 <twi_stop>
    55c6:	81 c0       	rjmp	.+258    	; 0x56ca <__vector_39+0x216>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    55c8:	81 e0       	ldi	r24, 0x01	; 1
    55ca:	80 93 e6 05 	sts	0x05E6, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    55ce:	84 ea       	ldi	r24, 0xA4	; 164
    55d0:	80 93 bc 00 	sts	0x00BC, r24
	  twi_state = TWI_READY;
    55d4:	10 92 e9 05 	sts	0x05E9, r1
    55d8:	78 c0       	rjmp	.+240    	; 0x56ca <__vector_39+0x216>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    55da:	5b df       	rcall	.-330    	; 0x5492 <twi_stop>
      break;
    55dc:	76 c0       	rjmp	.+236    	; 0x56ca <__vector_39+0x216>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    55de:	83 e0       	ldi	r24, 0x03	; 3
    55e0:	80 93 e9 05 	sts	0x05E9, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    55e4:	10 92 7d 05 	sts	0x057D, r1
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    55e8:	85 ec       	ldi	r24, 0xC5	; 197
    55ea:	80 93 bc 00 	sts	0x00BC, r24
    55ee:	6d c0       	rjmp	.+218    	; 0x56ca <__vector_39+0x216>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    55f0:	80 91 7d 05 	lds	r24, 0x057D
    55f4:	80 32       	cpi	r24, 0x20	; 32
    55f6:	80 f4       	brcc	.+32     	; 0x5618 <__vector_39+0x164>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    55f8:	e0 91 7d 05 	lds	r30, 0x057D
    55fc:	81 e0       	ldi	r24, 0x01	; 1
    55fe:	8e 0f       	add	r24, r30
    5600:	80 93 7d 05 	sts	0x057D, r24
    5604:	80 91 bb 00 	lds	r24, 0x00BB
    5608:	f0 e0       	ldi	r31, 0x00	; 0
    560a:	e2 58       	subi	r30, 0x82	; 130
    560c:	fa 4f       	sbci	r31, 0xFA	; 250
    560e:	80 83       	st	Z, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5610:	85 ec       	ldi	r24, 0xC5	; 197
    5612:	80 93 bc 00 	sts	0x00BC, r24
    5616:	59 c0       	rjmp	.+178    	; 0x56ca <__vector_39+0x216>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5618:	85 e8       	ldi	r24, 0x85	; 133
    561a:	80 93 bc 00 	sts	0x00BC, r24
    561e:	55 c0       	rjmp	.+170    	; 0x56ca <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    5620:	80 91 7d 05 	lds	r24, 0x057D
    5624:	80 32       	cpi	r24, 0x20	; 32
    5626:	30 f4       	brcc	.+12     	; 0x5634 <__vector_39+0x180>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    5628:	e0 91 7d 05 	lds	r30, 0x057D
    562c:	f0 e0       	ldi	r31, 0x00	; 0
    562e:	e2 58       	subi	r30, 0x82	; 130
    5630:	fa 4f       	sbci	r31, 0xFA	; 250
    5632:	10 82       	st	Z, r1
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
    5634:	2e df       	rcall	.-420    	; 0x5492 <twi_stop>
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    5636:	60 91 7d 05 	lds	r22, 0x057D
    563a:	70 e0       	ldi	r23, 0x00	; 0
    563c:	e0 91 e2 05 	lds	r30, 0x05E2
    5640:	f0 91 e3 05 	lds	r31, 0x05E3
    5644:	8e e7       	ldi	r24, 0x7E	; 126
    5646:	95 e0       	ldi	r25, 0x05	; 5
    5648:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    564a:	10 92 7d 05 	sts	0x057D, r1
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    564e:	2c df       	rcall	.-424    	; 0x54a8 <twi_releaseBus>
      break;
    5650:	3c c0       	rjmp	.+120    	; 0x56ca <__vector_39+0x216>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5652:	85 e8       	ldi	r24, 0x85	; 133
    5654:	80 93 bc 00 	sts	0x00BC, r24
    5658:	38 c0       	rjmp	.+112    	; 0x56ca <__vector_39+0x216>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    565a:	84 e0       	ldi	r24, 0x04	; 4
    565c:	80 93 e9 05 	sts	0x05E9, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    5660:	10 92 9f 05 	sts	0x059F, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    5664:	10 92 9e 05 	sts	0x059E, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    5668:	e0 91 e4 05 	lds	r30, 0x05E4
    566c:	f0 91 e5 05 	lds	r31, 0x05E5
    5670:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    5672:	80 91 9e 05 	lds	r24, 0x059E
    5676:	81 11       	cpse	r24, r1
    5678:	05 c0       	rjmp	.+10     	; 0x5684 <__vector_39+0x1d0>
        twi_txBufferLength = 1;
    567a:	81 e0       	ldi	r24, 0x01	; 1
    567c:	80 93 9e 05 	sts	0x059E, r24
        twi_txBuffer[0] = 0x00;
    5680:	10 92 a0 05 	sts	0x05A0, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    5684:	e0 91 9f 05 	lds	r30, 0x059F
    5688:	81 e0       	ldi	r24, 0x01	; 1
    568a:	8e 0f       	add	r24, r30
    568c:	80 93 9f 05 	sts	0x059F, r24
    5690:	f0 e0       	ldi	r31, 0x00	; 0
    5692:	e0 56       	subi	r30, 0x60	; 96
    5694:	fa 4f       	sbci	r31, 0xFA	; 250
    5696:	80 81       	ld	r24, Z
    5698:	80 93 bb 00 	sts	0x00BB, r24
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    569c:	90 91 9f 05 	lds	r25, 0x059F
    56a0:	80 91 9e 05 	lds	r24, 0x059E
    56a4:	98 17       	cp	r25, r24
    56a6:	20 f4       	brcc	.+8      	; 0x56b0 <__vector_39+0x1fc>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    56a8:	85 ec       	ldi	r24, 0xC5	; 197
    56aa:	80 93 bc 00 	sts	0x00BC, r24
    56ae:	0d c0       	rjmp	.+26     	; 0x56ca <__vector_39+0x216>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    56b0:	85 e8       	ldi	r24, 0x85	; 133
    56b2:	80 93 bc 00 	sts	0x00BC, r24
    56b6:	09 c0       	rjmp	.+18     	; 0x56ca <__vector_39+0x216>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    56b8:	85 ec       	ldi	r24, 0xC5	; 197
    56ba:	80 93 bc 00 	sts	0x00BC, r24
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    56be:	10 92 e9 05 	sts	0x05E9, r1
      break;
    56c2:	03 c0       	rjmp	.+6      	; 0x56ca <__vector_39+0x216>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    56c4:	10 92 7c 05 	sts	0x057C, r1
      twi_stop();
    56c8:	e4 de       	rcall	.-568    	; 0x5492 <twi_stop>
      break;
  }
}
    56ca:	ff 91       	pop	r31
    56cc:	ef 91       	pop	r30
    56ce:	bf 91       	pop	r27
    56d0:	af 91       	pop	r26
    56d2:	9f 91       	pop	r25
    56d4:	8f 91       	pop	r24
    56d6:	7f 91       	pop	r23
    56d8:	6f 91       	pop	r22
    56da:	5f 91       	pop	r21
    56dc:	4f 91       	pop	r20
    56de:	3f 91       	pop	r19
    56e0:	2f 91       	pop	r18
    56e2:	0f 90       	pop	r0
    56e4:	0b be       	out	0x3b, r0	; 59
    56e6:	0f 90       	pop	r0
    56e8:	0f be       	out	0x3f, r0	; 63
    56ea:	0f 90       	pop	r0
    56ec:	1f 90       	pop	r1
    56ee:	18 95       	reti

000056f0 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    56f0:	80 91 1a 06 	lds	r24, 0x061A
    56f4:	90 e0       	ldi	r25, 0x00	; 0
    56f6:	20 91 1b 06 	lds	r18, 0x061B
    56fa:	82 1b       	sub	r24, r18
    56fc:	91 09       	sbc	r25, r1
    56fe:	08 95       	ret

00005700 <_ZN7TwoWire4readEv>:
    5700:	90 91 1b 06 	lds	r25, 0x061B
    5704:	80 91 1a 06 	lds	r24, 0x061A
    5708:	98 17       	cp	r25, r24
    570a:	50 f4       	brcc	.+20     	; 0x5720 <_ZN7TwoWire4readEv+0x20>
    570c:	e9 2f       	mov	r30, r25
    570e:	f0 e0       	ldi	r31, 0x00	; 0
    5710:	e4 5e       	subi	r30, 0xE4	; 228
    5712:	f9 4f       	sbci	r31, 0xF9	; 249
    5714:	20 81       	ld	r18, Z
    5716:	30 e0       	ldi	r19, 0x00	; 0
    5718:	9f 5f       	subi	r25, 0xFF	; 255
    571a:	90 93 1b 06 	sts	0x061B, r25
    571e:	02 c0       	rjmp	.+4      	; 0x5724 <_ZN7TwoWire4readEv+0x24>
    5720:	2f ef       	ldi	r18, 0xFF	; 255
    5722:	3f ef       	ldi	r19, 0xFF	; 255
    5724:	c9 01       	movw	r24, r18
    5726:	08 95       	ret

00005728 <_ZN7TwoWire4peekEv>:
    5728:	e0 91 1b 06 	lds	r30, 0x061B
    572c:	80 91 1a 06 	lds	r24, 0x061A
    5730:	e8 17       	cp	r30, r24
    5732:	30 f4       	brcc	.+12     	; 0x5740 <_ZN7TwoWire4peekEv+0x18>
    5734:	f0 e0       	ldi	r31, 0x00	; 0
    5736:	e4 5e       	subi	r30, 0xE4	; 228
    5738:	f9 4f       	sbci	r31, 0xF9	; 249
    573a:	80 81       	ld	r24, Z
    573c:	90 e0       	ldi	r25, 0x00	; 0
    573e:	08 95       	ret
    5740:	8f ef       	ldi	r24, 0xFF	; 255
    5742:	9f ef       	ldi	r25, 0xFF	; 255
    5744:	08 95       	ret

00005746 <_ZN7TwoWire5flushEv>:
    5746:	08 95       	ret

00005748 <_ZN7TwoWire5writeEPKhj>:
    5748:	cf 92       	push	r12
    574a:	df 92       	push	r13
    574c:	ef 92       	push	r14
    574e:	ff 92       	push	r15
    5750:	0f 93       	push	r16
    5752:	1f 93       	push	r17
    5754:	cf 93       	push	r28
    5756:	df 93       	push	r29
    5758:	8c 01       	movw	r16, r24
    575a:	cb 01       	movw	r24, r22
    575c:	6a 01       	movw	r12, r20
    575e:	20 91 f6 05 	lds	r18, 0x05F6
    5762:	22 23       	and	r18, r18
    5764:	a1 f0       	breq	.+40     	; 0x578e <_ZN7TwoWire5writeEPKhj+0x46>
    5766:	41 15       	cp	r20, r1
    5768:	51 05       	cpc	r21, r1
    576a:	99 f0       	breq	.+38     	; 0x5792 <_ZN7TwoWire5writeEPKhj+0x4a>
    576c:	eb 01       	movw	r28, r22
    576e:	7b 01       	movw	r14, r22
    5770:	e4 0e       	add	r14, r20
    5772:	f5 1e       	adc	r15, r21
    5774:	69 91       	ld	r22, Y+
    5776:	d8 01       	movw	r26, r16
    5778:	ed 91       	ld	r30, X+
    577a:	fc 91       	ld	r31, X
    577c:	01 90       	ld	r0, Z+
    577e:	f0 81       	ld	r31, Z
    5780:	e0 2d       	mov	r30, r0
    5782:	c8 01       	movw	r24, r16
    5784:	19 95       	eicall
    5786:	ce 15       	cp	r28, r14
    5788:	df 05       	cpc	r29, r15
    578a:	a1 f7       	brne	.-24     	; 0x5774 <_ZN7TwoWire5writeEPKhj+0x2c>
    578c:	02 c0       	rjmp	.+4      	; 0x5792 <_ZN7TwoWire5writeEPKhj+0x4a>
    578e:	64 2f       	mov	r22, r20
    5790:	5f de       	rcall	.-834    	; 0x5450 <twi_transmit>
    5792:	c6 01       	movw	r24, r12
    5794:	df 91       	pop	r29
    5796:	cf 91       	pop	r28
    5798:	1f 91       	pop	r17
    579a:	0f 91       	pop	r16
    579c:	ff 90       	pop	r15
    579e:	ef 90       	pop	r14
    57a0:	df 90       	pop	r13
    57a2:	cf 90       	pop	r12
    57a4:	08 95       	ret

000057a6 <_ZN7TwoWire5writeEh>:
    57a6:	cf 93       	push	r28
    57a8:	df 93       	push	r29
    57aa:	1f 92       	push	r1
    57ac:	cd b7       	in	r28, 0x3d	; 61
    57ae:	de b7       	in	r29, 0x3e	; 62
    57b0:	fc 01       	movw	r30, r24
    57b2:	69 83       	std	Y+1, r22	; 0x01
    57b4:	90 91 f6 05 	lds	r25, 0x05F6
    57b8:	99 23       	and	r25, r25
    57ba:	d9 f0       	breq	.+54     	; 0x57f2 <_ZN7TwoWire5writeEh+0x4c>
    57bc:	90 91 f7 05 	lds	r25, 0x05F7
    57c0:	90 32       	cpi	r25, 0x20	; 32
    57c2:	38 f0       	brcs	.+14     	; 0x57d2 <_ZN7TwoWire5writeEh+0x2c>
    57c4:	81 e0       	ldi	r24, 0x01	; 1
    57c6:	90 e0       	ldi	r25, 0x00	; 0
    57c8:	93 83       	std	Z+3, r25	; 0x03
    57ca:	82 83       	std	Z+2, r24	; 0x02
    57cc:	80 e0       	ldi	r24, 0x00	; 0
    57ce:	90 e0       	ldi	r25, 0x00	; 0
    57d0:	16 c0       	rjmp	.+44     	; 0x57fe <_ZN7TwoWire5writeEh+0x58>
    57d2:	80 91 f8 05 	lds	r24, 0x05F8
    57d6:	e8 2f       	mov	r30, r24
    57d8:	f0 e0       	ldi	r31, 0x00	; 0
    57da:	e7 50       	subi	r30, 0x07	; 7
    57dc:	fa 4f       	sbci	r31, 0xFA	; 250
    57de:	99 81       	ldd	r25, Y+1	; 0x01
    57e0:	90 83       	st	Z, r25
    57e2:	8f 5f       	subi	r24, 0xFF	; 255
    57e4:	80 93 f8 05 	sts	0x05F8, r24
    57e8:	80 93 f7 05 	sts	0x05F7, r24
    57ec:	81 e0       	ldi	r24, 0x01	; 1
    57ee:	90 e0       	ldi	r25, 0x00	; 0
    57f0:	06 c0       	rjmp	.+12     	; 0x57fe <_ZN7TwoWire5writeEh+0x58>
    57f2:	61 e0       	ldi	r22, 0x01	; 1
    57f4:	ce 01       	movw	r24, r28
    57f6:	01 96       	adiw	r24, 0x01	; 1
    57f8:	2b de       	rcall	.-938    	; 0x5450 <twi_transmit>
    57fa:	81 e0       	ldi	r24, 0x01	; 1
    57fc:	90 e0       	ldi	r25, 0x00	; 0
    57fe:	0f 90       	pop	r0
    5800:	df 91       	pop	r29
    5802:	cf 91       	pop	r28
    5804:	08 95       	ret

00005806 <_ZN7TwoWireC1Ev>:
    5806:	fc 01       	movw	r30, r24
    5808:	13 82       	std	Z+3, r1	; 0x03
    580a:	12 82       	std	Z+2, r1	; 0x02
    580c:	88 ee       	ldi	r24, 0xE8	; 232
    580e:	93 e0       	ldi	r25, 0x03	; 3
    5810:	a0 e0       	ldi	r26, 0x00	; 0
    5812:	b0 e0       	ldi	r27, 0x00	; 0
    5814:	84 83       	std	Z+4, r24	; 0x04
    5816:	95 83       	std	Z+5, r25	; 0x05
    5818:	a6 83       	std	Z+6, r26	; 0x06
    581a:	b7 83       	std	Z+7, r27	; 0x07
    581c:	8d e0       	ldi	r24, 0x0D	; 13
    581e:	94 e0       	ldi	r25, 0x04	; 4
    5820:	91 83       	std	Z+1, r25	; 0x01
    5822:	80 83       	st	Z, r24
    5824:	08 95       	ret

00005826 <_ZN7TwoWire5beginEv>:
    5826:	10 92 1b 06 	sts	0x061B, r1
    582a:	10 92 1a 06 	sts	0x061A, r1
    582e:	10 92 f8 05 	sts	0x05F8, r1
    5832:	10 92 f7 05 	sts	0x05F7, r1
    5836:	45 cd       	rjmp	.-1398   	; 0x52c2 <twi_init>
    5838:	08 95       	ret

0000583a <_ZN7TwoWire11requestFromEhhh>:
    583a:	86 2f       	mov	r24, r22
    583c:	41 32       	cpi	r20, 0x21	; 33
    583e:	08 f0       	brcs	.+2      	; 0x5842 <_ZN7TwoWire11requestFromEhhh+0x8>
    5840:	40 e2       	ldi	r20, 0x20	; 32
    5842:	6c e1       	ldi	r22, 0x1C	; 28
    5844:	76 e0       	ldi	r23, 0x06	; 6
    5846:	5b dd       	rcall	.-1354   	; 0x52fe <twi_readFrom>
    5848:	10 92 1b 06 	sts	0x061B, r1
    584c:	80 93 1a 06 	sts	0x061A, r24
    5850:	08 95       	ret

00005852 <_ZN7TwoWire11requestFromEhh>:
    5852:	21 e0       	ldi	r18, 0x01	; 1
    5854:	f2 cf       	rjmp	.-28     	; 0x583a <_ZN7TwoWire11requestFromEhhh>
    5856:	08 95       	ret

00005858 <_ZN7TwoWire17beginTransmissionEh>:
    5858:	81 e0       	ldi	r24, 0x01	; 1
    585a:	80 93 f6 05 	sts	0x05F6, r24
    585e:	60 93 19 06 	sts	0x0619, r22
    5862:	10 92 f8 05 	sts	0x05F8, r1
    5866:	10 92 f7 05 	sts	0x05F7, r1
    586a:	08 95       	ret

0000586c <_ZN7TwoWire15endTransmissionEh>:
    586c:	0f 93       	push	r16
    586e:	06 2f       	mov	r16, r22
    5870:	21 e0       	ldi	r18, 0x01	; 1
    5872:	40 91 f7 05 	lds	r20, 0x05F7
    5876:	69 ef       	ldi	r22, 0xF9	; 249
    5878:	75 e0       	ldi	r23, 0x05	; 5
    587a:	80 91 19 06 	lds	r24, 0x0619
    587e:	8b dd       	rcall	.-1258   	; 0x5396 <twi_writeTo>
    5880:	10 92 f8 05 	sts	0x05F8, r1
    5884:	10 92 f7 05 	sts	0x05F7, r1
    5888:	10 92 f6 05 	sts	0x05F6, r1
    588c:	0f 91       	pop	r16
    588e:	08 95       	ret

00005890 <_ZN7TwoWire15endTransmissionEv>:
    5890:	61 e0       	ldi	r22, 0x01	; 1
    5892:	ec cf       	rjmp	.-40     	; 0x586c <_ZN7TwoWire15endTransmissionEh>
    5894:	08 95       	ret

00005896 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    5896:	8a ee       	ldi	r24, 0xEA	; 234
    5898:	95 e0       	ldi	r25, 0x05	; 5
    589a:	b5 cf       	rjmp	.-150    	; 0x5806 <_ZN7TwoWireC1Ev>
    589c:	08 95       	ret

0000589e <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    589e:	26 e0       	ldi	r18, 0x06	; 6
    58a0:	40 e8       	ldi	r20, 0x80	; 128
    58a2:	55 e2       	ldi	r21, 0x25	; 37
    58a4:	60 e0       	ldi	r22, 0x00	; 0
    58a6:	70 e0       	ldi	r23, 0x00	; 0
    58a8:	82 e4       	ldi	r24, 0x42	; 66
    58aa:	96 e0       	ldi	r25, 0x06	; 6
    58ac:	b4 d1       	rcall	.+872    	; 0x5c16 <_ZN14HardwareSerial5beginEmh>
void setup() {
	//Setup the Hardware
	Serial.begin(9600);      // open the serial port at 9600 bps:
	
	//Print out the version
	Serial.println("*************************************");
    58ae:	69 e1       	ldi	r22, 0x19	; 25
    58b0:	74 e0       	ldi	r23, 0x04	; 4
    58b2:	82 e4       	ldi	r24, 0x42	; 66
    58b4:	96 e0       	ldi	r25, 0x06	; 6
    58b6:	46 d5       	rcall	.+2700   	; 0x6344 <_ZN5Print7printlnEPKc>
	Serial.println("  Project Narwhal Estd. 2015         ");
    58b8:	6f e3       	ldi	r22, 0x3F	; 63
    58ba:	74 e0       	ldi	r23, 0x04	; 4
    58bc:	82 e4       	ldi	r24, 0x42	; 66
    58be:	96 e0       	ldi	r25, 0x06	; 6
    58c0:	41 d5       	rcall	.+2690   	; 0x6344 <_ZN5Print7printlnEPKc>
	Serial.println("*************************************");
    58c2:	69 e1       	ldi	r22, 0x19	; 25
    58c4:	74 e0       	ldi	r23, 0x04	; 4
    58c6:	82 e4       	ldi	r24, 0x42	; 66
    58c8:	96 e0       	ldi	r25, 0x06	; 6
    58ca:	3c d5       	rcall	.+2680   	; 0x6344 <_ZN5Print7printlnEPKc>
	Serial.print("  Version: ");
    58cc:	65 e6       	ldi	r22, 0x65	; 101
    58ce:	74 e0       	ldi	r23, 0x04	; 4
    58d0:	82 e4       	ldi	r24, 0x42	; 66
    58d2:	96 e0       	ldi	r25, 0x06	; 6
    58d4:	0d d5       	rcall	.+2586   	; 0x62f0 <_ZN5Print5printEPKc>
	Serial.println(VERSION);
    58d6:	22 e0       	ldi	r18, 0x02	; 2
    58d8:	30 e0       	ldi	r19, 0x00	; 0
    58da:	4d ec       	ldi	r20, 0xCD	; 205
    58dc:	5c ec       	ldi	r21, 0xCC	; 204
    58de:	6c ec       	ldi	r22, 0xCC	; 204
    58e0:	7d e3       	ldi	r23, 0x3D	; 61
    58e2:	82 e4       	ldi	r24, 0x42	; 66
    58e4:	96 e0       	ldi	r25, 0x06	; 6
    58e6:	0f d7       	rcall	.+3614   	; 0x6706 <_ZN5Print7printlnEdi>
	Serial.println("");
    58e8:	6e ee       	ldi	r22, 0xEE	; 238
    58ea:	74 e0       	ldi	r23, 0x04	; 4
    58ec:	82 e4       	ldi	r24, 0x42	; 66
    58ee:	96 e0       	ldi	r25, 0x06	; 6
    58f0:	29 d5       	rcall	.+2642   	; 0x6344 <_ZN5Print7printlnEPKc>
		
	#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
		Serial.println("-INITIALIZING-");
    58f2:	61 e7       	ldi	r22, 0x71	; 113
    58f4:	74 e0       	ldi	r23, 0x04	; 4
    58f6:	82 e4       	ldi	r24, 0x42	; 66
    58f8:	96 e0       	ldi	r25, 0x06	; 6
    58fa:	24 d5       	rcall	.+2632   	; 0x6344 <_ZN5Print7printlnEPKc>
	#endif
	
	//Initialize Hardware
	hardware_init();
    58fc:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <_Z13hardware_initv>

	//Display the Boot screens	
	BootScreenTime = millis();
    5900:	0e 94 13 36 	call	0x6c26	; 0x6c26 <millis>
    5904:	60 93 3e 06 	sts	0x063E, r22
    5908:	70 93 3f 06 	sts	0x063F, r23
    590c:	80 93 40 06 	sts	0x0640, r24
    5910:	90 93 41 06 	sts	0x0641, r25
	
	MAIN_LCD.setCursor(3,1);
    5914:	41 e0       	ldi	r20, 0x01	; 1
    5916:	63 e0       	ldi	r22, 0x03	; 3
    5918:	8e e4       	ldi	r24, 0x4E	; 78
    591a:	95 e0       	ldi	r25, 0x05	; 5
    591c:	e3 da       	rcall	.-2618   	; 0x4ee4 <_ZN3LCD9setCursorEhh>
	MAIN_LCD.print("Narwhal v");
    591e:	60 e8       	ldi	r22, 0x80	; 128
    5920:	74 e0       	ldi	r23, 0x04	; 4
    5922:	8e e4       	ldi	r24, 0x4E	; 78
    5924:	95 e0       	ldi	r25, 0x05	; 5
    5926:	e4 d4       	rcall	.+2504   	; 0x62f0 <_ZN5Print5printEPKc>
	MAIN_LCD.print(VERSION);
    5928:	22 e0       	ldi	r18, 0x02	; 2
    592a:	30 e0       	ldi	r19, 0x00	; 0
    592c:	4d ec       	ldi	r20, 0xCD	; 205
    592e:	5c ec       	ldi	r21, 0xCC	; 204
    5930:	6c ec       	ldi	r22, 0xCC	; 204
    5932:	7d e3       	ldi	r23, 0x3D	; 61
    5934:	8e e4       	ldi	r24, 0x4E	; 78
    5936:	95 e0       	ldi	r25, 0x05	; 5
    5938:	e4 d6       	rcall	.+3528   	; 0x6702 <_ZN5Print5printEdi>
	MAIN_LCD.setCursor(2,2);
    593a:	42 e0       	ldi	r20, 0x02	; 2
    593c:	62 e0       	ldi	r22, 0x02	; 2
    593e:	8e e4       	ldi	r24, 0x4E	; 78
    5940:	95 e0       	ldi	r25, 0x05	; 5
    5942:	d0 da       	rcall	.-2656   	; 0x4ee4 <_ZN3LCD9setCursorEhh>
	MAIN_LCD.print("Established 2015");
    5944:	6a e8       	ldi	r22, 0x8A	; 138
    5946:	74 e0       	ldi	r23, 0x04	; 4
    5948:	8e e4       	ldi	r24, 0x4E	; 78
    594a:	95 e0       	ldi	r25, 0x05	; 5
    594c:	d1 d4       	rcall	.+2466   	; 0x62f0 <_ZN5Print5printEPKc>
		
	HLT_LCD.setCursor(2,1);
    594e:	41 e0       	ldi	r20, 0x01	; 1
    5950:	62 e0       	ldi	r22, 0x02	; 2
    5952:	84 e3       	ldi	r24, 0x34	; 52
    5954:	95 e0       	ldi	r25, 0x05	; 5
    5956:	c6 da       	rcall	.-2676   	; 0x4ee4 <_ZN3LCD9setCursorEhh>
	HLT_LCD.print("Hot Liquor Tank");
    5958:	6b e9       	ldi	r22, 0x9B	; 155
    595a:	74 e0       	ldi	r23, 0x04	; 4
    595c:	84 e3       	ldi	r24, 0x34	; 52
    595e:	95 e0       	ldi	r25, 0x05	; 5
    5960:	c7 d4       	rcall	.+2446   	; 0x62f0 <_ZN5Print5printEPKc>
		
	MLT_LCD.setCursor(2,1);
    5962:	41 e0       	ldi	r20, 0x01	; 1
    5964:	62 e0       	ldi	r22, 0x02	; 2
    5966:	8a e1       	ldi	r24, 0x1A	; 26
    5968:	95 e0       	ldi	r25, 0x05	; 5
    596a:	bc da       	rcall	.-2696   	; 0x4ee4 <_ZN3LCD9setCursorEhh>
	MLT_LCD.print("Mash/Lauter Tun");
    596c:	6b ea       	ldi	r22, 0xAB	; 171
    596e:	74 e0       	ldi	r23, 0x04	; 4
    5970:	8a e1       	ldi	r24, 0x1A	; 26
    5972:	95 e0       	ldi	r25, 0x05	; 5
    5974:	bd d4       	rcall	.+2426   	; 0x62f0 <_ZN5Print5printEPKc>
		
	BK_LCD.setCursor(2,1);
    5976:	41 e0       	ldi	r20, 0x01	; 1
    5978:	62 e0       	ldi	r22, 0x02	; 2
    597a:	80 e0       	ldi	r24, 0x00	; 0
    597c:	95 e0       	ldi	r25, 0x05	; 5
    597e:	b2 da       	rcall	.-2716   	; 0x4ee4 <_ZN3LCD9setCursorEhh>
	BK_LCD.print("Boil Kettle");
    5980:	6b eb       	ldi	r22, 0xBB	; 187
    5982:	74 e0       	ldi	r23, 0x04	; 4
    5984:	80 e0       	ldi	r24, 0x00	; 0
    5986:	95 e0       	ldi	r25, 0x05	; 5
    5988:	b3 d4       	rcall	.+2406   	; 0x62f0 <_ZN5Print5printEPKc>

	//Initialize the rest of the programs
	MAIN_UI_init();
    598a:	0e 94 ce 06 	call	0xd9c	; 0xd9c <_Z12MAIN_UI_initv>
	HLT_UI_init();
    598e:	0e 94 df 04 	call	0x9be	; 0x9be <_Z11HLT_UI_initv>
	MLT_UI_init();
    5992:	0e 94 a4 0c 	call	0x1948	; 0x1948 <_Z11MLT_UI_initv>
	delay(3000);
    5996:	68 eb       	ldi	r22, 0xB8	; 184
    5998:	7b e0       	ldi	r23, 0x0B	; 11
    599a:	80 e0       	ldi	r24, 0x00	; 0
    599c:	90 e0       	ldi	r25, 0x00	; 0
    599e:	0c 94 45 36 	jmp	0x6c8a	; 0x6c8a <delay>
    59a2:	08 95       	ret

000059a4 <loop>:
}

void loop() {
    59a4:	0f 93       	push	r16
    59a6:	1f 93       	push	r17
	
	//On first pass print out a verbose message
	if(firstpass){
    59a8:	80 91 06 02 	lds	r24, 0x0206
    59ac:	88 23       	and	r24, r24
    59ae:	29 f0       	breq	.+10     	; 0x59ba <loop+0x16>
		#if defined(SERIAL_VERBOSE) && (SERIAL_VERBOSE>0)
			Serial.println("-MAIN-PROGRAM-");
    59b0:	67 ec       	ldi	r22, 0xC7	; 199
    59b2:	74 e0       	ldi	r23, 0x04	; 4
    59b4:	82 e4       	ldi	r24, 0x42	; 66
    59b6:	96 e0       	ldi	r25, 0x06	; 6
    59b8:	c5 d4       	rcall	.+2442   	; 0x6344 <_ZN5Print7printlnEPKc>
		#endif
	}
	firstpass = false;
    59ba:	10 92 06 02 	sts	0x0206, r1
	
	//Make sure boot screens display for atleast 3 seconds (3000ms)
	while((millis()-BootScreenTime)<3000){
    59be:	06 c0       	rjmp	.+12     	; 0x59cc <loop+0x28>
		//Wait
		delay(500);
    59c0:	64 ef       	ldi	r22, 0xF4	; 244
    59c2:	71 e0       	ldi	r23, 0x01	; 1
    59c4:	80 e0       	ldi	r24, 0x00	; 0
    59c6:	90 e0       	ldi	r25, 0x00	; 0
    59c8:	0e 94 45 36 	call	0x6c8a	; 0x6c8a <delay>
		#endif
	}
	firstpass = false;
	
	//Make sure boot screens display for atleast 3 seconds (3000ms)
	while((millis()-BootScreenTime)<3000){
    59cc:	0e 94 13 36 	call	0x6c26	; 0x6c26 <millis>
    59d0:	00 91 3e 06 	lds	r16, 0x063E
    59d4:	10 91 3f 06 	lds	r17, 0x063F
    59d8:	20 91 40 06 	lds	r18, 0x0640
    59dc:	30 91 41 06 	lds	r19, 0x0641
    59e0:	dc 01       	movw	r26, r24
    59e2:	cb 01       	movw	r24, r22
    59e4:	80 1b       	sub	r24, r16
    59e6:	91 0b       	sbc	r25, r17
    59e8:	a2 0b       	sbc	r26, r18
    59ea:	b3 0b       	sbc	r27, r19
    59ec:	88 3b       	cpi	r24, 0xB8	; 184
    59ee:	9b 40       	sbci	r25, 0x0B	; 11
    59f0:	a1 05       	cpc	r26, r1
    59f2:	b1 05       	cpc	r27, r1
    59f4:	28 f3       	brcs	.-54     	; 0x59c0 <loop+0x1c>
		//Wait
		delay(500);
	}
	
	//Run the Executive
	Exec->run();
    59f6:	80 91 3c 06 	lds	r24, 0x063C
    59fa:	90 91 3d 06 	lds	r25, 0x063D
    59fe:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <_ZN9Executive3runEv>
}
    5a02:	1f 91       	pop	r17
    5a04:	0f 91       	pop	r16
    5a06:	08 95       	ret

00005a08 <_GLOBAL__sub_I_BootScreenTime>:

//typedef FastDelegate2<int, char *> EvtHandler;
unsigned long BootScreenTime = 0;
bool firstpass = true;

Executive *Exec = new Executive();
    5a08:	8e e0       	ldi	r24, 0x0E	; 14
    5a0a:	90 e0       	ldi	r25, 0x00	; 0
    5a0c:	2f d4       	rcall	.+2142   	; 0x626c <_Znwj>
    5a0e:	2e e0       	ldi	r18, 0x0E	; 14
    5a10:	fc 01       	movw	r30, r24
    5a12:	11 92       	st	Z+, r1
    5a14:	2a 95       	dec	r18
    5a16:	e9 f7       	brne	.-6      	; 0x5a12 <_GLOBAL__sub_I_BootScreenTime+0xa>
    5a18:	90 93 3d 06 	sts	0x063D, r25
    5a1c:	80 93 3c 06 	sts	0x063C, r24
    5a20:	08 95       	ret

00005a22 <__cxa_pure_virtual>:
void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this 
  
  
  //std::terminate();
  abort();
    5a22:	0e 94 95 3d 	call	0x7b2a	; 0x7b2a <abort>

00005a26 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    5a26:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    5a28:	91 8d       	ldd	r25, Z+25	; 0x19
    5a2a:	22 8d       	ldd	r18, Z+26	; 0x1a
    5a2c:	89 2f       	mov	r24, r25
    5a2e:	90 e0       	ldi	r25, 0x00	; 0
    5a30:	80 5c       	subi	r24, 0xC0	; 192
    5a32:	9f 4f       	sbci	r25, 0xFF	; 255
    5a34:	82 1b       	sub	r24, r18
    5a36:	91 09       	sbc	r25, r1
}
    5a38:	8f 73       	andi	r24, 0x3F	; 63
    5a3a:	99 27       	eor	r25, r25
    5a3c:	08 95       	ret

00005a3e <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    5a3e:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    5a40:	91 8d       	ldd	r25, Z+25	; 0x19
    5a42:	82 8d       	ldd	r24, Z+26	; 0x1a
    5a44:	98 17       	cp	r25, r24
    5a46:	31 f0       	breq	.+12     	; 0x5a54 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    5a48:	82 8d       	ldd	r24, Z+26	; 0x1a
    5a4a:	e8 0f       	add	r30, r24
    5a4c:	f1 1d       	adc	r31, r1
    5a4e:	85 8d       	ldd	r24, Z+29	; 0x1d
    5a50:	90 e0       	ldi	r25, 0x00	; 0
    5a52:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    5a54:	8f ef       	ldi	r24, 0xFF	; 255
    5a56:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    5a58:	08 95       	ret

00005a5a <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    5a5a:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    5a5c:	91 8d       	ldd	r25, Z+25	; 0x19
    5a5e:	82 8d       	ldd	r24, Z+26	; 0x1a
    5a60:	98 17       	cp	r25, r24
    5a62:	61 f0       	breq	.+24     	; 0x5a7c <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    5a64:	82 8d       	ldd	r24, Z+26	; 0x1a
    5a66:	df 01       	movw	r26, r30
    5a68:	a8 0f       	add	r26, r24
    5a6a:	b1 1d       	adc	r27, r1
    5a6c:	5d 96       	adiw	r26, 0x1d	; 29
    5a6e:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    5a70:	92 8d       	ldd	r25, Z+26	; 0x1a
    5a72:	9f 5f       	subi	r25, 0xFF	; 255
    5a74:	9f 73       	andi	r25, 0x3F	; 63
    5a76:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    5a78:	90 e0       	ldi	r25, 0x00	; 0
    5a7a:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    5a7c:	8f ef       	ldi	r24, 0xFF	; 255
    5a7e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    5a80:	08 95       	ret

00005a82 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    5a82:	89 ed       	ldi	r24, 0xD9	; 217
    5a84:	9e e2       	ldi	r25, 0x2E	; 46
    5a86:	89 2b       	or	r24, r25
    5a88:	41 f0       	breq	.+16     	; 0x5a9a <_Z14serialEventRunv+0x18>
    5a8a:	80 e0       	ldi	r24, 0x00	; 0
    5a8c:	90 e0       	ldi	r25, 0x00	; 0
    5a8e:	89 2b       	or	r24, r25
    5a90:	21 f0       	breq	.+8      	; 0x5a9a <_Z14serialEventRunv+0x18>
    5a92:	8f d1       	rcall	.+798    	; 0x5db2 <_Z17Serial0_availablev>
    5a94:	81 11       	cpse	r24, r1
    5a96:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    5a9a:	84 e7       	ldi	r24, 0x74	; 116
    5a9c:	9f e2       	ldi	r25, 0x2F	; 47
    5a9e:	89 2b       	or	r24, r25
    5aa0:	41 f0       	breq	.+16     	; 0x5ab2 <_Z14serialEventRunv+0x30>
    5aa2:	80 e0       	ldi	r24, 0x00	; 0
    5aa4:	90 e0       	ldi	r25, 0x00	; 0
    5aa6:	89 2b       	or	r24, r25
    5aa8:	21 f0       	breq	.+8      	; 0x5ab2 <_Z14serialEventRunv+0x30>
    5aaa:	1e d2       	rcall	.+1084   	; 0x5ee8 <_Z17Serial1_availablev>
    5aac:	81 11       	cpse	r24, r1
    5aae:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    5ab2:	8f e0       	ldi	r24, 0x0F	; 15
    5ab4:	90 e3       	ldi	r25, 0x30	; 48
    5ab6:	89 2b       	or	r24, r25
    5ab8:	41 f0       	breq	.+16     	; 0x5aca <_Z14serialEventRunv+0x48>
    5aba:	80 e0       	ldi	r24, 0x00	; 0
    5abc:	90 e0       	ldi	r25, 0x00	; 0
    5abe:	89 2b       	or	r24, r25
    5ac0:	21 f0       	breq	.+8      	; 0x5aca <_Z14serialEventRunv+0x48>
    5ac2:	ad d2       	rcall	.+1370   	; 0x601e <_Z17Serial2_availablev>
    5ac4:	81 11       	cpse	r24, r1
    5ac6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    5aca:	8a ea       	ldi	r24, 0xAA	; 170
    5acc:	90 e3       	ldi	r25, 0x30	; 48
    5ace:	89 2b       	or	r24, r25
    5ad0:	41 f0       	breq	.+16     	; 0x5ae2 <_Z14serialEventRunv+0x60>
    5ad2:	80 e0       	ldi	r24, 0x00	; 0
    5ad4:	90 e0       	ldi	r25, 0x00	; 0
    5ad6:	89 2b       	or	r24, r25
    5ad8:	21 f0       	breq	.+8      	; 0x5ae2 <_Z14serialEventRunv+0x60>
    5ada:	3c d3       	rcall	.+1656   	; 0x6154 <_Z17Serial3_availablev>
    5adc:	81 11       	cpse	r24, r1
    5ade:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5ae2:	08 95       	ret

00005ae4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    5ae4:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    5ae6:	84 8d       	ldd	r24, Z+28	; 0x1c
    5ae8:	df 01       	movw	r26, r30
    5aea:	a8 0f       	add	r26, r24
    5aec:	b1 1d       	adc	r27, r1
    5aee:	a3 5a       	subi	r26, 0xA3	; 163
    5af0:	bf 4f       	sbci	r27, 0xFF	; 255
    5af2:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    5af4:	24 8d       	ldd	r18, Z+28	; 0x1c
    5af6:	30 e0       	ldi	r19, 0x00	; 0
    5af8:	2f 5f       	subi	r18, 0xFF	; 255
    5afa:	3f 4f       	sbci	r19, 0xFF	; 255
    5afc:	2f 73       	andi	r18, 0x3F	; 63
    5afe:	30 78       	andi	r19, 0x80	; 128
    5b00:	33 23       	and	r19, r19
    5b02:	34 f4       	brge	.+12     	; 0x5b10 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
    5b04:	21 50       	subi	r18, 0x01	; 1
    5b06:	31 09       	sbc	r19, r1
    5b08:	20 6c       	ori	r18, 0xC0	; 192
    5b0a:	3f 6f       	ori	r19, 0xFF	; 255
    5b0c:	2f 5f       	subi	r18, 0xFF	; 255
    5b0e:	3f 4f       	sbci	r19, 0xFF	; 255
    5b10:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
    5b12:	a6 89       	ldd	r26, Z+22	; 0x16
    5b14:	b7 89       	ldd	r27, Z+23	; 0x17
    5b16:	8c 93       	st	X, r24

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    5b18:	a0 89       	ldd	r26, Z+16	; 0x10
    5b1a:	b1 89       	ldd	r27, Z+17	; 0x11
    5b1c:	8c 91       	ld	r24, X
    5b1e:	80 64       	ori	r24, 0x40	; 64
    5b20:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    5b22:	93 8d       	ldd	r25, Z+27	; 0x1b
    5b24:	84 8d       	ldd	r24, Z+28	; 0x1c
    5b26:	98 13       	cpse	r25, r24
    5b28:	06 c0       	rjmp	.+12     	; 0x5b36 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x52>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    5b2a:	02 88       	ldd	r0, Z+18	; 0x12
    5b2c:	f3 89       	ldd	r31, Z+19	; 0x13
    5b2e:	e0 2d       	mov	r30, r0
    5b30:	80 81       	ld	r24, Z
    5b32:	8f 7d       	andi	r24, 0xDF	; 223
    5b34:	80 83       	st	Z, r24
    5b36:	08 95       	ret

00005b38 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    5b38:	cf 93       	push	r28
    5b3a:	df 93       	push	r29
    5b3c:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    5b3e:	88 8d       	ldd	r24, Y+24	; 0x18
    5b40:	81 11       	cpse	r24, r1
    5b42:	0e c0       	rjmp	.+28     	; 0x5b60 <_ZN14HardwareSerial5flushEv+0x28>
    5b44:	17 c0       	rjmp	.+46     	; 0x5b74 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    5b46:	0f b6       	in	r0, 0x3f	; 63
    5b48:	07 fc       	sbrc	r0, 7
    5b4a:	0c c0       	rjmp	.+24     	; 0x5b64 <_ZN14HardwareSerial5flushEv+0x2c>
    5b4c:	90 81       	ld	r25, Z
    5b4e:	95 ff       	sbrs	r25, 5
    5b50:	09 c0       	rjmp	.+18     	; 0x5b64 <_ZN14HardwareSerial5flushEv+0x2c>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    5b52:	a8 89       	ldd	r26, Y+16	; 0x10
    5b54:	b9 89       	ldd	r27, Y+17	; 0x11
    5b56:	8c 91       	ld	r24, X
    5b58:	85 ff       	sbrs	r24, 5
    5b5a:	04 c0       	rjmp	.+8      	; 0x5b64 <_ZN14HardwareSerial5flushEv+0x2c>
	  _tx_udr_empty_irq();
    5b5c:	ce 01       	movw	r24, r28
    5b5e:	c2 df       	rcall	.-124    	; 0x5ae4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    5b60:	ea 89       	ldd	r30, Y+18	; 0x12
    5b62:	fb 89       	ldd	r31, Y+19	; 0x13
    5b64:	90 81       	ld	r25, Z
    5b66:	95 fd       	sbrc	r25, 5
    5b68:	ee cf       	rjmp	.-36     	; 0x5b46 <_ZN14HardwareSerial5flushEv+0xe>
    5b6a:	a8 89       	ldd	r26, Y+16	; 0x10
    5b6c:	b9 89       	ldd	r27, Y+17	; 0x11
    5b6e:	8c 91       	ld	r24, X
    5b70:	86 ff       	sbrs	r24, 6
    5b72:	e9 cf       	rjmp	.-46     	; 0x5b46 <_ZN14HardwareSerial5flushEv+0xe>
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    5b74:	df 91       	pop	r29
    5b76:	cf 91       	pop	r28
    5b78:	08 95       	ret

00005b7a <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    5b7a:	0f 93       	push	r16
    5b7c:	1f 93       	push	r17
    5b7e:	cf 93       	push	r28
    5b80:	df 93       	push	r29
    5b82:	fc 01       	movw	r30, r24
  _written = true;
    5b84:	81 e0       	ldi	r24, 0x01	; 1
    5b86:	80 8f       	std	Z+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    5b88:	93 8d       	ldd	r25, Z+27	; 0x1b
    5b8a:	84 8d       	ldd	r24, Z+28	; 0x1c
    5b8c:	98 13       	cpse	r25, r24
    5b8e:	21 c0       	rjmp	.+66     	; 0x5bd2 <_ZN14HardwareSerial5writeEh+0x58>
    5b90:	a0 89       	ldd	r26, Z+16	; 0x10
    5b92:	b1 89       	ldd	r27, Z+17	; 0x11
    5b94:	8c 91       	ld	r24, X
    5b96:	85 fd       	sbrc	r24, 5
    5b98:	2e c0       	rjmp	.+92     	; 0x5bf6 <_ZN14HardwareSerial5writeEh+0x7c>
    5b9a:	1b c0       	rjmp	.+54     	; 0x5bd2 <_ZN14HardwareSerial5writeEh+0x58>
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    if (bit_is_clear(SREG, SREG_I)) {
    5b9c:	0f b6       	in	r0, 0x3f	; 63
    5b9e:	07 fc       	sbrc	r0, 7
    5ba0:	07 c0       	rjmp	.+14     	; 0x5bb0 <_ZN14HardwareSerial5writeEh+0x36>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    5ba2:	e8 89       	ldd	r30, Y+16	; 0x10
    5ba4:	f9 89       	ldd	r31, Y+17	; 0x11
    5ba6:	80 81       	ld	r24, Z
    5ba8:	85 ff       	sbrs	r24, 5
    5baa:	02 c0       	rjmp	.+4      	; 0x5bb0 <_ZN14HardwareSerial5writeEh+0x36>
	_tx_udr_empty_irq();
    5bac:	ce 01       	movw	r24, r28
    5bae:	9a df       	rcall	.-204    	; 0x5ae4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    5bb0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5bb2:	09 17       	cp	r16, r25
    5bb4:	99 f3       	breq	.-26     	; 0x5b9c <_ZN14HardwareSerial5writeEh+0x22>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    5bb6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5bb8:	fe 01       	movw	r30, r28
    5bba:	e8 0f       	add	r30, r24
    5bbc:	f1 1d       	adc	r31, r1
    5bbe:	e3 5a       	subi	r30, 0xA3	; 163
    5bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    5bc2:	10 83       	st	Z, r17
  _tx_buffer_head = i;
    5bc4:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    5bc6:	ea 89       	ldd	r30, Y+18	; 0x12
    5bc8:	fb 89       	ldd	r31, Y+19	; 0x13
    5bca:	80 81       	ld	r24, Z
    5bcc:	80 62       	ori	r24, 0x20	; 32
    5bce:	80 83       	st	Z, r24
  
  return 1;
    5bd0:	1b c0       	rjmp	.+54     	; 0x5c08 <_ZN14HardwareSerial5writeEh+0x8e>
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    5bd2:	23 8d       	ldd	r18, Z+27	; 0x1b
    5bd4:	30 e0       	ldi	r19, 0x00	; 0
    5bd6:	2f 5f       	subi	r18, 0xFF	; 255
    5bd8:	3f 4f       	sbci	r19, 0xFF	; 255
    5bda:	2f 73       	andi	r18, 0x3F	; 63
    5bdc:	30 78       	andi	r19, 0x80	; 128
    5bde:	33 23       	and	r19, r19
    5be0:	34 f4       	brge	.+12     	; 0x5bee <_ZN14HardwareSerial5writeEh+0x74>
    5be2:	21 50       	subi	r18, 0x01	; 1
    5be4:	31 09       	sbc	r19, r1
    5be6:	20 6c       	ori	r18, 0xC0	; 192
    5be8:	3f 6f       	ori	r19, 0xFF	; 255
    5bea:	2f 5f       	subi	r18, 0xFF	; 255
    5bec:	3f 4f       	sbci	r19, 0xFF	; 255
    5bee:	16 2f       	mov	r17, r22
    5bf0:	ef 01       	movw	r28, r30
    5bf2:	02 2f       	mov	r16, r18
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    5bf4:	dd cf       	rjmp	.-70     	; 0x5bb0 <_ZN14HardwareSerial5writeEh+0x36>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    5bf6:	a6 89       	ldd	r26, Z+22	; 0x16
    5bf8:	b7 89       	ldd	r27, Z+23	; 0x17
    5bfa:	6c 93       	st	X, r22
    sbi(*_ucsra, TXC0);
    5bfc:	00 88       	ldd	r0, Z+16	; 0x10
    5bfe:	f1 89       	ldd	r31, Z+17	; 0x11
    5c00:	e0 2d       	mov	r30, r0
    5c02:	80 81       	ld	r24, Z
    5c04:	80 64       	ori	r24, 0x40	; 64
    5c06:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    5c08:	81 e0       	ldi	r24, 0x01	; 1
    5c0a:	90 e0       	ldi	r25, 0x00	; 0
    5c0c:	df 91       	pop	r29
    5c0e:	cf 91       	pop	r28
    5c10:	1f 91       	pop	r17
    5c12:	0f 91       	pop	r16
    5c14:	08 95       	ret

00005c16 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    5c16:	bf 92       	push	r11
    5c18:	cf 92       	push	r12
    5c1a:	df 92       	push	r13
    5c1c:	ef 92       	push	r14
    5c1e:	ff 92       	push	r15
    5c20:	0f 93       	push	r16
    5c22:	1f 93       	push	r17
    5c24:	cf 93       	push	r28
    5c26:	df 93       	push	r29
    5c28:	ec 01       	movw	r28, r24
    5c2a:	6a 01       	movw	r12, r20
    5c2c:	7b 01       	movw	r14, r22
    5c2e:	b2 2e       	mov	r11, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    5c30:	e8 89       	ldd	r30, Y+16	; 0x10
    5c32:	f9 89       	ldd	r31, Y+17	; 0x11
    5c34:	82 e0       	ldi	r24, 0x02	; 2
    5c36:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    5c38:	41 15       	cp	r20, r1
    5c3a:	51 4e       	sbci	r21, 0xE1	; 225
    5c3c:	61 05       	cpc	r22, r1
    5c3e:	71 05       	cpc	r23, r1
    5c40:	b1 f0       	breq	.+44     	; 0x5c6e <_ZN14HardwareSerial5beginEmh+0x58>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    5c42:	60 e0       	ldi	r22, 0x00	; 0
    5c44:	79 e0       	ldi	r23, 0x09	; 9
    5c46:	8d e3       	ldi	r24, 0x3D	; 61
    5c48:	90 e0       	ldi	r25, 0x00	; 0
    5c4a:	a7 01       	movw	r20, r14
    5c4c:	96 01       	movw	r18, r12
    5c4e:	0e 94 46 3b 	call	0x768c	; 0x768c <__udivmodsi4>
    5c52:	89 01       	movw	r16, r18
    5c54:	9a 01       	movw	r18, r20
    5c56:	01 50       	subi	r16, 0x01	; 1
    5c58:	11 09       	sbc	r17, r1
    5c5a:	21 09       	sbc	r18, r1
    5c5c:	31 09       	sbc	r19, r1
    5c5e:	36 95       	lsr	r19
    5c60:	27 95       	ror	r18
    5c62:	17 95       	ror	r17
    5c64:	07 95       	ror	r16
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    5c66:	01 15       	cp	r16, r1
    5c68:	80 e1       	ldi	r24, 0x10	; 16
    5c6a:	18 07       	cpc	r17, r24
    5c6c:	a8 f0       	brcs	.+42     	; 0x5c98 <_ZN14HardwareSerial5beginEmh+0x82>
  {
    *_ucsra = 0;
    5c6e:	e8 89       	ldd	r30, Y+16	; 0x10
    5c70:	f9 89       	ldd	r31, Y+17	; 0x11
    5c72:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    5c74:	60 e8       	ldi	r22, 0x80	; 128
    5c76:	74 e8       	ldi	r23, 0x84	; 132
    5c78:	8e e1       	ldi	r24, 0x1E	; 30
    5c7a:	90 e0       	ldi	r25, 0x00	; 0
    5c7c:	a7 01       	movw	r20, r14
    5c7e:	96 01       	movw	r18, r12
    5c80:	0e 94 46 3b 	call	0x768c	; 0x768c <__udivmodsi4>
    5c84:	da 01       	movw	r26, r20
    5c86:	c9 01       	movw	r24, r18
    5c88:	01 97       	sbiw	r24, 0x01	; 1
    5c8a:	a1 09       	sbc	r26, r1
    5c8c:	b1 09       	sbc	r27, r1
    5c8e:	b6 95       	lsr	r27
    5c90:	a7 95       	ror	r26
    5c92:	97 95       	ror	r25
    5c94:	87 95       	ror	r24
    5c96:	8c 01       	movw	r16, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    5c98:	ec 85       	ldd	r30, Y+12	; 0x0c
    5c9a:	fd 85       	ldd	r31, Y+13	; 0x0d
    5c9c:	10 83       	st	Z, r17
  *_ubrrl = baud_setting;
    5c9e:	ee 85       	ldd	r30, Y+14	; 0x0e
    5ca0:	ff 85       	ldd	r31, Y+15	; 0x0f
    5ca2:	00 83       	st	Z, r16

  _written = false;
    5ca4:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    5ca6:	ec 89       	ldd	r30, Y+20	; 0x14
    5ca8:	fd 89       	ldd	r31, Y+21	; 0x15
    5caa:	b0 82       	st	Z, r11
  
  sbi(*_ucsrb, RXEN0);
    5cac:	ea 89       	ldd	r30, Y+18	; 0x12
    5cae:	fb 89       	ldd	r31, Y+19	; 0x13
    5cb0:	80 81       	ld	r24, Z
    5cb2:	80 61       	ori	r24, 0x10	; 16
    5cb4:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    5cb6:	ea 89       	ldd	r30, Y+18	; 0x12
    5cb8:	fb 89       	ldd	r31, Y+19	; 0x13
    5cba:	80 81       	ld	r24, Z
    5cbc:	88 60       	ori	r24, 0x08	; 8
    5cbe:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    5cc0:	ea 89       	ldd	r30, Y+18	; 0x12
    5cc2:	fb 89       	ldd	r31, Y+19	; 0x13
    5cc4:	80 81       	ld	r24, Z
    5cc6:	80 68       	ori	r24, 0x80	; 128
    5cc8:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    5cca:	ea 89       	ldd	r30, Y+18	; 0x12
    5ccc:	fb 89       	ldd	r31, Y+19	; 0x13
    5cce:	80 81       	ld	r24, Z
    5cd0:	8f 7d       	andi	r24, 0xDF	; 223
    5cd2:	80 83       	st	Z, r24
}
    5cd4:	df 91       	pop	r29
    5cd6:	cf 91       	pop	r28
    5cd8:	1f 91       	pop	r17
    5cda:	0f 91       	pop	r16
    5cdc:	ff 90       	pop	r15
    5cde:	ef 90       	pop	r14
    5ce0:	df 90       	pop	r13
    5ce2:	cf 90       	pop	r12
    5ce4:	bf 90       	pop	r11
    5ce6:	08 95       	ret

00005ce8 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    5ce8:	1f 92       	push	r1
    5cea:	0f 92       	push	r0
    5cec:	0f b6       	in	r0, 0x3f	; 63
    5cee:	0f 92       	push	r0
    5cf0:	11 24       	eor	r1, r1
    5cf2:	0b b6       	in	r0, 0x3b	; 59
    5cf4:	0f 92       	push	r0
    5cf6:	2f 93       	push	r18
    5cf8:	8f 93       	push	r24
    5cfa:	9f 93       	push	r25
    5cfc:	af 93       	push	r26
    5cfe:	bf 93       	push	r27
    5d00:	ef 93       	push	r30
    5d02:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    5d04:	e0 91 52 06 	lds	r30, 0x0652
    5d08:	f0 91 53 06 	lds	r31, 0x0653
    5d0c:	80 81       	ld	r24, Z
    5d0e:	82 fd       	sbrc	r24, 2
    5d10:	14 c0       	rjmp	.+40     	; 0x5d3a <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    5d12:	e2 e4       	ldi	r30, 0x42	; 66
    5d14:	f6 e0       	ldi	r31, 0x06	; 6
    5d16:	a6 89       	ldd	r26, Z+22	; 0x16
    5d18:	b7 89       	ldd	r27, Z+23	; 0x17
    5d1a:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    5d1c:	81 8d       	ldd	r24, Z+25	; 0x19
    5d1e:	8f 5f       	subi	r24, 0xFF	; 255
    5d20:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    5d22:	92 8d       	ldd	r25, Z+26	; 0x1a
    5d24:	89 17       	cp	r24, r25
    5d26:	71 f0       	breq	.+28     	; 0x5d44 <__vector_25+0x5c>
      _rx_buffer[_rx_buffer_head] = c;
    5d28:	df 01       	movw	r26, r30
    5d2a:	e1 8d       	ldd	r30, Z+25	; 0x19
    5d2c:	f0 e0       	ldi	r31, 0x00	; 0
    5d2e:	ee 5b       	subi	r30, 0xBE	; 190
    5d30:	f9 4f       	sbci	r31, 0xF9	; 249
    5d32:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
    5d34:	59 96       	adiw	r26, 0x19	; 25
    5d36:	8c 93       	st	X, r24
    5d38:	05 c0       	rjmp	.+10     	; 0x5d44 <__vector_25+0x5c>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    5d3a:	e0 91 58 06 	lds	r30, 0x0658
    5d3e:	f0 91 59 06 	lds	r31, 0x0659
    5d42:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    5d44:	ff 91       	pop	r31
    5d46:	ef 91       	pop	r30
    5d48:	bf 91       	pop	r27
    5d4a:	af 91       	pop	r26
    5d4c:	9f 91       	pop	r25
    5d4e:	8f 91       	pop	r24
    5d50:	2f 91       	pop	r18
    5d52:	0f 90       	pop	r0
    5d54:	0b be       	out	0x3b, r0	; 59
    5d56:	0f 90       	pop	r0
    5d58:	0f be       	out	0x3f, r0	; 63
    5d5a:	0f 90       	pop	r0
    5d5c:	1f 90       	pop	r1
    5d5e:	18 95       	reti

00005d60 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    5d60:	1f 92       	push	r1
    5d62:	0f 92       	push	r0
    5d64:	0f b6       	in	r0, 0x3f	; 63
    5d66:	0f 92       	push	r0
    5d68:	11 24       	eor	r1, r1
    5d6a:	0b b6       	in	r0, 0x3b	; 59
    5d6c:	0f 92       	push	r0
    5d6e:	2f 93       	push	r18
    5d70:	3f 93       	push	r19
    5d72:	4f 93       	push	r20
    5d74:	5f 93       	push	r21
    5d76:	6f 93       	push	r22
    5d78:	7f 93       	push	r23
    5d7a:	8f 93       	push	r24
    5d7c:	9f 93       	push	r25
    5d7e:	af 93       	push	r26
    5d80:	bf 93       	push	r27
    5d82:	ef 93       	push	r30
    5d84:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    5d86:	82 e4       	ldi	r24, 0x42	; 66
    5d88:	96 e0       	ldi	r25, 0x06	; 6
    5d8a:	ac de       	rcall	.-680    	; 0x5ae4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    5d8c:	ff 91       	pop	r31
    5d8e:	ef 91       	pop	r30
    5d90:	bf 91       	pop	r27
    5d92:	af 91       	pop	r26
    5d94:	9f 91       	pop	r25
    5d96:	8f 91       	pop	r24
    5d98:	7f 91       	pop	r23
    5d9a:	6f 91       	pop	r22
    5d9c:	5f 91       	pop	r21
    5d9e:	4f 91       	pop	r20
    5da0:	3f 91       	pop	r19
    5da2:	2f 91       	pop	r18
    5da4:	0f 90       	pop	r0
    5da6:	0b be       	out	0x3b, r0	; 59
    5da8:	0f 90       	pop	r0
    5daa:	0f be       	out	0x3f, r0	; 63
    5dac:	0f 90       	pop	r0
    5dae:	1f 90       	pop	r1
    5db0:	18 95       	reti

00005db2 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    5db2:	82 e4       	ldi	r24, 0x42	; 66
    5db4:	96 e0       	ldi	r25, 0x06	; 6
    5db6:	37 de       	rcall	.-914    	; 0x5a26 <_ZN14HardwareSerial9availableEv>
    5db8:	21 e0       	ldi	r18, 0x01	; 1
    5dba:	89 2b       	or	r24, r25
    5dbc:	09 f4       	brne	.+2      	; 0x5dc0 <_Z17Serial0_availablev+0xe>
    5dbe:	20 e0       	ldi	r18, 0x00	; 0
}
    5dc0:	82 2f       	mov	r24, r18
    5dc2:	08 95       	ret

00005dc4 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    5dc4:	e2 e4       	ldi	r30, 0x42	; 66
    5dc6:	f6 e0       	ldi	r31, 0x06	; 6
    5dc8:	13 82       	std	Z+3, r1	; 0x03
    5dca:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    5dcc:	88 ee       	ldi	r24, 0xE8	; 232
    5dce:	93 e0       	ldi	r25, 0x03	; 3
    5dd0:	a0 e0       	ldi	r26, 0x00	; 0
    5dd2:	b0 e0       	ldi	r27, 0x00	; 0
    5dd4:	84 83       	std	Z+4, r24	; 0x04
    5dd6:	95 83       	std	Z+5, r25	; 0x05
    5dd8:	a6 83       	std	Z+6, r26	; 0x06
    5dda:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    5ddc:	8a ed       	ldi	r24, 0xDA	; 218
    5dde:	94 e0       	ldi	r25, 0x04	; 4
    5de0:	91 83       	std	Z+1, r25	; 0x01
    5de2:	80 83       	st	Z, r24
    5de4:	85 ec       	ldi	r24, 0xC5	; 197
    5de6:	90 e0       	ldi	r25, 0x00	; 0
    5de8:	95 87       	std	Z+13, r25	; 0x0d
    5dea:	84 87       	std	Z+12, r24	; 0x0c
    5dec:	84 ec       	ldi	r24, 0xC4	; 196
    5dee:	90 e0       	ldi	r25, 0x00	; 0
    5df0:	97 87       	std	Z+15, r25	; 0x0f
    5df2:	86 87       	std	Z+14, r24	; 0x0e
    5df4:	80 ec       	ldi	r24, 0xC0	; 192
    5df6:	90 e0       	ldi	r25, 0x00	; 0
    5df8:	91 8b       	std	Z+17, r25	; 0x11
    5dfa:	80 8b       	std	Z+16, r24	; 0x10
    5dfc:	81 ec       	ldi	r24, 0xC1	; 193
    5dfe:	90 e0       	ldi	r25, 0x00	; 0
    5e00:	93 8b       	std	Z+19, r25	; 0x13
    5e02:	82 8b       	std	Z+18, r24	; 0x12
    5e04:	82 ec       	ldi	r24, 0xC2	; 194
    5e06:	90 e0       	ldi	r25, 0x00	; 0
    5e08:	95 8b       	std	Z+21, r25	; 0x15
    5e0a:	84 8b       	std	Z+20, r24	; 0x14
    5e0c:	86 ec       	ldi	r24, 0xC6	; 198
    5e0e:	90 e0       	ldi	r25, 0x00	; 0
    5e10:	97 8b       	std	Z+23, r25	; 0x17
    5e12:	86 8b       	std	Z+22, r24	; 0x16
    5e14:	11 8e       	std	Z+25, r1	; 0x19
    5e16:	12 8e       	std	Z+26, r1	; 0x1a
    5e18:	13 8e       	std	Z+27, r1	; 0x1b
    5e1a:	14 8e       	std	Z+28, r1	; 0x1c
    5e1c:	08 95       	ret

00005e1e <__vector_36>:
#elif defined(USART1_RX_vect)
ISR(USART1_RX_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    5e1e:	1f 92       	push	r1
    5e20:	0f 92       	push	r0
    5e22:	0f b6       	in	r0, 0x3f	; 63
    5e24:	0f 92       	push	r0
    5e26:	11 24       	eor	r1, r1
    5e28:	0b b6       	in	r0, 0x3b	; 59
    5e2a:	0f 92       	push	r0
    5e2c:	2f 93       	push	r18
    5e2e:	8f 93       	push	r24
    5e30:	9f 93       	push	r25
    5e32:	af 93       	push	r26
    5e34:	bf 93       	push	r27
    5e36:	ef 93       	push	r30
    5e38:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    5e3a:	e0 91 ef 06 	lds	r30, 0x06EF
    5e3e:	f0 91 f0 06 	lds	r31, 0x06F0
    5e42:	80 81       	ld	r24, Z
    5e44:	82 fd       	sbrc	r24, 2
    5e46:	14 c0       	rjmp	.+40     	; 0x5e70 <__vector_36+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    5e48:	ef ed       	ldi	r30, 0xDF	; 223
    5e4a:	f6 e0       	ldi	r31, 0x06	; 6
    5e4c:	a6 89       	ldd	r26, Z+22	; 0x16
    5e4e:	b7 89       	ldd	r27, Z+23	; 0x17
    5e50:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    5e52:	81 8d       	ldd	r24, Z+25	; 0x19
    5e54:	8f 5f       	subi	r24, 0xFF	; 255
    5e56:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    5e58:	92 8d       	ldd	r25, Z+26	; 0x1a
    5e5a:	89 17       	cp	r24, r25
    5e5c:	71 f0       	breq	.+28     	; 0x5e7a <__vector_36+0x5c>
      _rx_buffer[_rx_buffer_head] = c;
    5e5e:	df 01       	movw	r26, r30
    5e60:	e1 8d       	ldd	r30, Z+25	; 0x19
    5e62:	f0 e0       	ldi	r31, 0x00	; 0
    5e64:	e1 52       	subi	r30, 0x21	; 33
    5e66:	f9 4f       	sbci	r31, 0xF9	; 249
    5e68:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
    5e6a:	59 96       	adiw	r26, 0x19	; 25
    5e6c:	8c 93       	st	X, r24
    5e6e:	05 c0       	rjmp	.+10     	; 0x5e7a <__vector_36+0x5c>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    5e70:	e0 91 f5 06 	lds	r30, 0x06F5
    5e74:	f0 91 f6 06 	lds	r31, 0x06F6
    5e78:	80 81       	ld	r24, Z
  Serial1._rx_complete_irq();
}
    5e7a:	ff 91       	pop	r31
    5e7c:	ef 91       	pop	r30
    5e7e:	bf 91       	pop	r27
    5e80:	af 91       	pop	r26
    5e82:	9f 91       	pop	r25
    5e84:	8f 91       	pop	r24
    5e86:	2f 91       	pop	r18
    5e88:	0f 90       	pop	r0
    5e8a:	0b be       	out	0x3b, r0	; 59
    5e8c:	0f 90       	pop	r0
    5e8e:	0f be       	out	0x3f, r0	; 63
    5e90:	0f 90       	pop	r0
    5e92:	1f 90       	pop	r1
    5e94:	18 95       	reti

00005e96 <__vector_37>:
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    5e96:	1f 92       	push	r1
    5e98:	0f 92       	push	r0
    5e9a:	0f b6       	in	r0, 0x3f	; 63
    5e9c:	0f 92       	push	r0
    5e9e:	11 24       	eor	r1, r1
    5ea0:	0b b6       	in	r0, 0x3b	; 59
    5ea2:	0f 92       	push	r0
    5ea4:	2f 93       	push	r18
    5ea6:	3f 93       	push	r19
    5ea8:	4f 93       	push	r20
    5eaa:	5f 93       	push	r21
    5eac:	6f 93       	push	r22
    5eae:	7f 93       	push	r23
    5eb0:	8f 93       	push	r24
    5eb2:	9f 93       	push	r25
    5eb4:	af 93       	push	r26
    5eb6:	bf 93       	push	r27
    5eb8:	ef 93       	push	r30
    5eba:	ff 93       	push	r31
  Serial1._tx_udr_empty_irq();
    5ebc:	8f ed       	ldi	r24, 0xDF	; 223
    5ebe:	96 e0       	ldi	r25, 0x06	; 6
    5ec0:	11 de       	rcall	.-990    	; 0x5ae4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    5ec2:	ff 91       	pop	r31
    5ec4:	ef 91       	pop	r30
    5ec6:	bf 91       	pop	r27
    5ec8:	af 91       	pop	r26
    5eca:	9f 91       	pop	r25
    5ecc:	8f 91       	pop	r24
    5ece:	7f 91       	pop	r23
    5ed0:	6f 91       	pop	r22
    5ed2:	5f 91       	pop	r21
    5ed4:	4f 91       	pop	r20
    5ed6:	3f 91       	pop	r19
    5ed8:	2f 91       	pop	r18
    5eda:	0f 90       	pop	r0
    5edc:	0b be       	out	0x3b, r0	; 59
    5ede:	0f 90       	pop	r0
    5ee0:	0f be       	out	0x3f, r0	; 63
    5ee2:	0f 90       	pop	r0
    5ee4:	1f 90       	pop	r1
    5ee6:	18 95       	reti

00005ee8 <_Z17Serial1_availablev>:
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
    5ee8:	8f ed       	ldi	r24, 0xDF	; 223
    5eea:	96 e0       	ldi	r25, 0x06	; 6
    5eec:	9c dd       	rcall	.-1224   	; 0x5a26 <_ZN14HardwareSerial9availableEv>
    5eee:	21 e0       	ldi	r18, 0x01	; 1
    5ef0:	89 2b       	or	r24, r25
    5ef2:	09 f4       	brne	.+2      	; 0x5ef6 <_Z17Serial1_availablev+0xe>
    5ef4:	20 e0       	ldi	r18, 0x00	; 0
}
    5ef6:	82 2f       	mov	r24, r18
    5ef8:	08 95       	ret

00005efa <_GLOBAL__sub_I___vector_36>:
    5efa:	ef ed       	ldi	r30, 0xDF	; 223
    5efc:	f6 e0       	ldi	r31, 0x06	; 6
    5efe:	13 82       	std	Z+3, r1	; 0x03
    5f00:	12 82       	std	Z+2, r1	; 0x02
    5f02:	88 ee       	ldi	r24, 0xE8	; 232
    5f04:	93 e0       	ldi	r25, 0x03	; 3
    5f06:	a0 e0       	ldi	r26, 0x00	; 0
    5f08:	b0 e0       	ldi	r27, 0x00	; 0
    5f0a:	84 83       	std	Z+4, r24	; 0x04
    5f0c:	95 83       	std	Z+5, r25	; 0x05
    5f0e:	a6 83       	std	Z+6, r26	; 0x06
    5f10:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    5f12:	8a ed       	ldi	r24, 0xDA	; 218
    5f14:	94 e0       	ldi	r25, 0x04	; 4
    5f16:	91 83       	std	Z+1, r25	; 0x01
    5f18:	80 83       	st	Z, r24
    5f1a:	8d ec       	ldi	r24, 0xCD	; 205
    5f1c:	90 e0       	ldi	r25, 0x00	; 0
    5f1e:	95 87       	std	Z+13, r25	; 0x0d
    5f20:	84 87       	std	Z+12, r24	; 0x0c
    5f22:	8c ec       	ldi	r24, 0xCC	; 204
    5f24:	90 e0       	ldi	r25, 0x00	; 0
    5f26:	97 87       	std	Z+15, r25	; 0x0f
    5f28:	86 87       	std	Z+14, r24	; 0x0e
    5f2a:	88 ec       	ldi	r24, 0xC8	; 200
    5f2c:	90 e0       	ldi	r25, 0x00	; 0
    5f2e:	91 8b       	std	Z+17, r25	; 0x11
    5f30:	80 8b       	std	Z+16, r24	; 0x10
    5f32:	89 ec       	ldi	r24, 0xC9	; 201
    5f34:	90 e0       	ldi	r25, 0x00	; 0
    5f36:	93 8b       	std	Z+19, r25	; 0x13
    5f38:	82 8b       	std	Z+18, r24	; 0x12
    5f3a:	8a ec       	ldi	r24, 0xCA	; 202
    5f3c:	90 e0       	ldi	r25, 0x00	; 0
    5f3e:	95 8b       	std	Z+21, r25	; 0x15
    5f40:	84 8b       	std	Z+20, r24	; 0x14
    5f42:	8e ec       	ldi	r24, 0xCE	; 206
    5f44:	90 e0       	ldi	r25, 0x00	; 0
    5f46:	97 8b       	std	Z+23, r25	; 0x17
    5f48:	86 8b       	std	Z+22, r24	; 0x16
    5f4a:	11 8e       	std	Z+25, r1	; 0x19
    5f4c:	12 8e       	std	Z+26, r1	; 0x1a
    5f4e:	13 8e       	std	Z+27, r1	; 0x1b
    5f50:	14 8e       	std	Z+28, r1	; 0x1c
    5f52:	08 95       	ret

00005f54 <__vector_51>:
// first place.

#if defined(HAVE_HWSERIAL2)

ISR(USART2_RX_vect)
{
    5f54:	1f 92       	push	r1
    5f56:	0f 92       	push	r0
    5f58:	0f b6       	in	r0, 0x3f	; 63
    5f5a:	0f 92       	push	r0
    5f5c:	11 24       	eor	r1, r1
    5f5e:	0b b6       	in	r0, 0x3b	; 59
    5f60:	0f 92       	push	r0
    5f62:	2f 93       	push	r18
    5f64:	8f 93       	push	r24
    5f66:	9f 93       	push	r25
    5f68:	af 93       	push	r26
    5f6a:	bf 93       	push	r27
    5f6c:	ef 93       	push	r30
    5f6e:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    5f70:	e0 91 8c 07 	lds	r30, 0x078C
    5f74:	f0 91 8d 07 	lds	r31, 0x078D
    5f78:	80 81       	ld	r24, Z
    5f7a:	82 fd       	sbrc	r24, 2
    5f7c:	14 c0       	rjmp	.+40     	; 0x5fa6 <__vector_51+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    5f7e:	ec e7       	ldi	r30, 0x7C	; 124
    5f80:	f7 e0       	ldi	r31, 0x07	; 7
    5f82:	a6 89       	ldd	r26, Z+22	; 0x16
    5f84:	b7 89       	ldd	r27, Z+23	; 0x17
    5f86:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    5f88:	81 8d       	ldd	r24, Z+25	; 0x19
    5f8a:	8f 5f       	subi	r24, 0xFF	; 255
    5f8c:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    5f8e:	92 8d       	ldd	r25, Z+26	; 0x1a
    5f90:	89 17       	cp	r24, r25
    5f92:	71 f0       	breq	.+28     	; 0x5fb0 <__vector_51+0x5c>
      _rx_buffer[_rx_buffer_head] = c;
    5f94:	df 01       	movw	r26, r30
    5f96:	e1 8d       	ldd	r30, Z+25	; 0x19
    5f98:	f0 e0       	ldi	r31, 0x00	; 0
    5f9a:	e4 58       	subi	r30, 0x84	; 132
    5f9c:	f8 4f       	sbci	r31, 0xF8	; 248
    5f9e:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
    5fa0:	59 96       	adiw	r26, 0x19	; 25
    5fa2:	8c 93       	st	X, r24
    5fa4:	05 c0       	rjmp	.+10     	; 0x5fb0 <__vector_51+0x5c>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    5fa6:	e0 91 92 07 	lds	r30, 0x0792
    5faa:	f0 91 93 07 	lds	r31, 0x0793
    5fae:	80 81       	ld	r24, Z
  Serial2._rx_complete_irq();
}
    5fb0:	ff 91       	pop	r31
    5fb2:	ef 91       	pop	r30
    5fb4:	bf 91       	pop	r27
    5fb6:	af 91       	pop	r26
    5fb8:	9f 91       	pop	r25
    5fba:	8f 91       	pop	r24
    5fbc:	2f 91       	pop	r18
    5fbe:	0f 90       	pop	r0
    5fc0:	0b be       	out	0x3b, r0	; 59
    5fc2:	0f 90       	pop	r0
    5fc4:	0f be       	out	0x3f, r0	; 63
    5fc6:	0f 90       	pop	r0
    5fc8:	1f 90       	pop	r1
    5fca:	18 95       	reti

00005fcc <__vector_52>:

ISR(USART2_UDRE_vect)
{
    5fcc:	1f 92       	push	r1
    5fce:	0f 92       	push	r0
    5fd0:	0f b6       	in	r0, 0x3f	; 63
    5fd2:	0f 92       	push	r0
    5fd4:	11 24       	eor	r1, r1
    5fd6:	0b b6       	in	r0, 0x3b	; 59
    5fd8:	0f 92       	push	r0
    5fda:	2f 93       	push	r18
    5fdc:	3f 93       	push	r19
    5fde:	4f 93       	push	r20
    5fe0:	5f 93       	push	r21
    5fe2:	6f 93       	push	r22
    5fe4:	7f 93       	push	r23
    5fe6:	8f 93       	push	r24
    5fe8:	9f 93       	push	r25
    5fea:	af 93       	push	r26
    5fec:	bf 93       	push	r27
    5fee:	ef 93       	push	r30
    5ff0:	ff 93       	push	r31
  Serial2._tx_udr_empty_irq();
    5ff2:	8c e7       	ldi	r24, 0x7C	; 124
    5ff4:	97 e0       	ldi	r25, 0x07	; 7
    5ff6:	76 dd       	rcall	.-1300   	; 0x5ae4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    5ff8:	ff 91       	pop	r31
    5ffa:	ef 91       	pop	r30
    5ffc:	bf 91       	pop	r27
    5ffe:	af 91       	pop	r26
    6000:	9f 91       	pop	r25
    6002:	8f 91       	pop	r24
    6004:	7f 91       	pop	r23
    6006:	6f 91       	pop	r22
    6008:	5f 91       	pop	r21
    600a:	4f 91       	pop	r20
    600c:	3f 91       	pop	r19
    600e:	2f 91       	pop	r18
    6010:	0f 90       	pop	r0
    6012:	0b be       	out	0x3b, r0	; 59
    6014:	0f 90       	pop	r0
    6016:	0f be       	out	0x3f, r0	; 63
    6018:	0f 90       	pop	r0
    601a:	1f 90       	pop	r1
    601c:	18 95       	reti

0000601e <_Z17Serial2_availablev>:
HardwareSerial Serial2(&UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial2_available() {
  return Serial2.available();
    601e:	8c e7       	ldi	r24, 0x7C	; 124
    6020:	97 e0       	ldi	r25, 0x07	; 7
    6022:	01 dd       	rcall	.-1534   	; 0x5a26 <_ZN14HardwareSerial9availableEv>
    6024:	21 e0       	ldi	r18, 0x01	; 1
    6026:	89 2b       	or	r24, r25
    6028:	09 f4       	brne	.+2      	; 0x602c <_Z17Serial2_availablev+0xe>
    602a:	20 e0       	ldi	r18, 0x00	; 0
}
    602c:	82 2f       	mov	r24, r18
    602e:	08 95       	ret

00006030 <_GLOBAL__sub_I___vector_51>:
    6030:	ec e7       	ldi	r30, 0x7C	; 124
    6032:	f7 e0       	ldi	r31, 0x07	; 7
    6034:	13 82       	std	Z+3, r1	; 0x03
    6036:	12 82       	std	Z+2, r1	; 0x02
    6038:	88 ee       	ldi	r24, 0xE8	; 232
    603a:	93 e0       	ldi	r25, 0x03	; 3
    603c:	a0 e0       	ldi	r26, 0x00	; 0
    603e:	b0 e0       	ldi	r27, 0x00	; 0
    6040:	84 83       	std	Z+4, r24	; 0x04
    6042:	95 83       	std	Z+5, r25	; 0x05
    6044:	a6 83       	std	Z+6, r26	; 0x06
    6046:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    6048:	8a ed       	ldi	r24, 0xDA	; 218
    604a:	94 e0       	ldi	r25, 0x04	; 4
    604c:	91 83       	std	Z+1, r25	; 0x01
    604e:	80 83       	st	Z, r24
    6050:	85 ed       	ldi	r24, 0xD5	; 213
    6052:	90 e0       	ldi	r25, 0x00	; 0
    6054:	95 87       	std	Z+13, r25	; 0x0d
    6056:	84 87       	std	Z+12, r24	; 0x0c
    6058:	84 ed       	ldi	r24, 0xD4	; 212
    605a:	90 e0       	ldi	r25, 0x00	; 0
    605c:	97 87       	std	Z+15, r25	; 0x0f
    605e:	86 87       	std	Z+14, r24	; 0x0e
    6060:	80 ed       	ldi	r24, 0xD0	; 208
    6062:	90 e0       	ldi	r25, 0x00	; 0
    6064:	91 8b       	std	Z+17, r25	; 0x11
    6066:	80 8b       	std	Z+16, r24	; 0x10
    6068:	81 ed       	ldi	r24, 0xD1	; 209
    606a:	90 e0       	ldi	r25, 0x00	; 0
    606c:	93 8b       	std	Z+19, r25	; 0x13
    606e:	82 8b       	std	Z+18, r24	; 0x12
    6070:	82 ed       	ldi	r24, 0xD2	; 210
    6072:	90 e0       	ldi	r25, 0x00	; 0
    6074:	95 8b       	std	Z+21, r25	; 0x15
    6076:	84 8b       	std	Z+20, r24	; 0x14
    6078:	86 ed       	ldi	r24, 0xD6	; 214
    607a:	90 e0       	ldi	r25, 0x00	; 0
    607c:	97 8b       	std	Z+23, r25	; 0x17
    607e:	86 8b       	std	Z+22, r24	; 0x16
    6080:	11 8e       	std	Z+25, r1	; 0x19
    6082:	12 8e       	std	Z+26, r1	; 0x1a
    6084:	13 8e       	std	Z+27, r1	; 0x1b
    6086:	14 8e       	std	Z+28, r1	; 0x1c
    6088:	08 95       	ret

0000608a <__vector_54>:
// first place.

#if defined(HAVE_HWSERIAL3)

ISR(USART3_RX_vect)
{
    608a:	1f 92       	push	r1
    608c:	0f 92       	push	r0
    608e:	0f b6       	in	r0, 0x3f	; 63
    6090:	0f 92       	push	r0
    6092:	11 24       	eor	r1, r1
    6094:	0b b6       	in	r0, 0x3b	; 59
    6096:	0f 92       	push	r0
    6098:	2f 93       	push	r18
    609a:	8f 93       	push	r24
    609c:	9f 93       	push	r25
    609e:	af 93       	push	r26
    60a0:	bf 93       	push	r27
    60a2:	ef 93       	push	r30
    60a4:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    60a6:	e0 91 29 08 	lds	r30, 0x0829
    60aa:	f0 91 2a 08 	lds	r31, 0x082A
    60ae:	80 81       	ld	r24, Z
    60b0:	82 fd       	sbrc	r24, 2
    60b2:	14 c0       	rjmp	.+40     	; 0x60dc <__vector_54+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    60b4:	e9 e1       	ldi	r30, 0x19	; 25
    60b6:	f8 e0       	ldi	r31, 0x08	; 8
    60b8:	a6 89       	ldd	r26, Z+22	; 0x16
    60ba:	b7 89       	ldd	r27, Z+23	; 0x17
    60bc:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    60be:	81 8d       	ldd	r24, Z+25	; 0x19
    60c0:	8f 5f       	subi	r24, 0xFF	; 255
    60c2:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    60c4:	92 8d       	ldd	r25, Z+26	; 0x1a
    60c6:	89 17       	cp	r24, r25
    60c8:	71 f0       	breq	.+28     	; 0x60e6 <__vector_54+0x5c>
      _rx_buffer[_rx_buffer_head] = c;
    60ca:	df 01       	movw	r26, r30
    60cc:	e1 8d       	ldd	r30, Z+25	; 0x19
    60ce:	f0 e0       	ldi	r31, 0x00	; 0
    60d0:	e7 5e       	subi	r30, 0xE7	; 231
    60d2:	f7 4f       	sbci	r31, 0xF7	; 247
    60d4:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
    60d6:	59 96       	adiw	r26, 0x19	; 25
    60d8:	8c 93       	st	X, r24
    60da:	05 c0       	rjmp	.+10     	; 0x60e6 <__vector_54+0x5c>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    60dc:	e0 91 2f 08 	lds	r30, 0x082F
    60e0:	f0 91 30 08 	lds	r31, 0x0830
    60e4:	80 81       	ld	r24, Z
  Serial3._rx_complete_irq();
}
    60e6:	ff 91       	pop	r31
    60e8:	ef 91       	pop	r30
    60ea:	bf 91       	pop	r27
    60ec:	af 91       	pop	r26
    60ee:	9f 91       	pop	r25
    60f0:	8f 91       	pop	r24
    60f2:	2f 91       	pop	r18
    60f4:	0f 90       	pop	r0
    60f6:	0b be       	out	0x3b, r0	; 59
    60f8:	0f 90       	pop	r0
    60fa:	0f be       	out	0x3f, r0	; 63
    60fc:	0f 90       	pop	r0
    60fe:	1f 90       	pop	r1
    6100:	18 95       	reti

00006102 <__vector_55>:

ISR(USART3_UDRE_vect)
{
    6102:	1f 92       	push	r1
    6104:	0f 92       	push	r0
    6106:	0f b6       	in	r0, 0x3f	; 63
    6108:	0f 92       	push	r0
    610a:	11 24       	eor	r1, r1
    610c:	0b b6       	in	r0, 0x3b	; 59
    610e:	0f 92       	push	r0
    6110:	2f 93       	push	r18
    6112:	3f 93       	push	r19
    6114:	4f 93       	push	r20
    6116:	5f 93       	push	r21
    6118:	6f 93       	push	r22
    611a:	7f 93       	push	r23
    611c:	8f 93       	push	r24
    611e:	9f 93       	push	r25
    6120:	af 93       	push	r26
    6122:	bf 93       	push	r27
    6124:	ef 93       	push	r30
    6126:	ff 93       	push	r31
  Serial3._tx_udr_empty_irq();
    6128:	89 e1       	ldi	r24, 0x19	; 25
    612a:	98 e0       	ldi	r25, 0x08	; 8
    612c:	db dc       	rcall	.-1610   	; 0x5ae4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    612e:	ff 91       	pop	r31
    6130:	ef 91       	pop	r30
    6132:	bf 91       	pop	r27
    6134:	af 91       	pop	r26
    6136:	9f 91       	pop	r25
    6138:	8f 91       	pop	r24
    613a:	7f 91       	pop	r23
    613c:	6f 91       	pop	r22
    613e:	5f 91       	pop	r21
    6140:	4f 91       	pop	r20
    6142:	3f 91       	pop	r19
    6144:	2f 91       	pop	r18
    6146:	0f 90       	pop	r0
    6148:	0b be       	out	0x3b, r0	; 59
    614a:	0f 90       	pop	r0
    614c:	0f be       	out	0x3f, r0	; 63
    614e:	0f 90       	pop	r0
    6150:	1f 90       	pop	r1
    6152:	18 95       	reti

00006154 <_Z17Serial3_availablev>:
HardwareSerial Serial3(&UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial3_available() {
  return Serial3.available();
    6154:	89 e1       	ldi	r24, 0x19	; 25
    6156:	98 e0       	ldi	r25, 0x08	; 8
    6158:	66 dc       	rcall	.-1844   	; 0x5a26 <_ZN14HardwareSerial9availableEv>
    615a:	21 e0       	ldi	r18, 0x01	; 1
    615c:	89 2b       	or	r24, r25
    615e:	09 f4       	brne	.+2      	; 0x6162 <_Z17Serial3_availablev+0xe>
    6160:	20 e0       	ldi	r18, 0x00	; 0
}
    6162:	82 2f       	mov	r24, r18
    6164:	08 95       	ret

00006166 <_GLOBAL__sub_I___vector_54>:
    6166:	e9 e1       	ldi	r30, 0x19	; 25
    6168:	f8 e0       	ldi	r31, 0x08	; 8
    616a:	13 82       	std	Z+3, r1	; 0x03
    616c:	12 82       	std	Z+2, r1	; 0x02
    616e:	88 ee       	ldi	r24, 0xE8	; 232
    6170:	93 e0       	ldi	r25, 0x03	; 3
    6172:	a0 e0       	ldi	r26, 0x00	; 0
    6174:	b0 e0       	ldi	r27, 0x00	; 0
    6176:	84 83       	std	Z+4, r24	; 0x04
    6178:	95 83       	std	Z+5, r25	; 0x05
    617a:	a6 83       	std	Z+6, r26	; 0x06
    617c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    617e:	8a ed       	ldi	r24, 0xDA	; 218
    6180:	94 e0       	ldi	r25, 0x04	; 4
    6182:	91 83       	std	Z+1, r25	; 0x01
    6184:	80 83       	st	Z, r24
    6186:	85 e3       	ldi	r24, 0x35	; 53
    6188:	91 e0       	ldi	r25, 0x01	; 1
    618a:	95 87       	std	Z+13, r25	; 0x0d
    618c:	84 87       	std	Z+12, r24	; 0x0c
    618e:	84 e3       	ldi	r24, 0x34	; 52
    6190:	91 e0       	ldi	r25, 0x01	; 1
    6192:	97 87       	std	Z+15, r25	; 0x0f
    6194:	86 87       	std	Z+14, r24	; 0x0e
    6196:	80 e3       	ldi	r24, 0x30	; 48
    6198:	91 e0       	ldi	r25, 0x01	; 1
    619a:	91 8b       	std	Z+17, r25	; 0x11
    619c:	80 8b       	std	Z+16, r24	; 0x10
    619e:	81 e3       	ldi	r24, 0x31	; 49
    61a0:	91 e0       	ldi	r25, 0x01	; 1
    61a2:	93 8b       	std	Z+19, r25	; 0x13
    61a4:	82 8b       	std	Z+18, r24	; 0x12
    61a6:	82 e3       	ldi	r24, 0x32	; 50
    61a8:	91 e0       	ldi	r25, 0x01	; 1
    61aa:	95 8b       	std	Z+21, r25	; 0x15
    61ac:	84 8b       	std	Z+20, r24	; 0x14
    61ae:	86 e3       	ldi	r24, 0x36	; 54
    61b0:	91 e0       	ldi	r25, 0x01	; 1
    61b2:	97 8b       	std	Z+23, r25	; 0x17
    61b4:	86 8b       	std	Z+22, r24	; 0x16
    61b6:	11 8e       	std	Z+25, r1	; 0x19
    61b8:	12 8e       	std	Z+26, r1	; 0x1a
    61ba:	13 8e       	std	Z+27, r1	; 0x1b
    61bc:	14 8e       	std	Z+28, r1	; 0x1c
    61be:	08 95       	ret

000061c0 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    61c0:	08 95       	ret

000061c2 <_ZNK9IPAddress7printToER5Print>:
}

bool IPAddress::operator==(const uint8_t* addr) const
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}
    61c2:	8f 92       	push	r8
    61c4:	9f 92       	push	r9
    61c6:	af 92       	push	r10
    61c8:	bf 92       	push	r11
    61ca:	cf 92       	push	r12
    61cc:	df 92       	push	r13
    61ce:	ef 92       	push	r14
    61d0:	ff 92       	push	r15
    61d2:	0f 93       	push	r16
    61d4:	1f 93       	push	r17
    61d6:	cf 93       	push	r28
    61d8:	df 93       	push	r29
    61da:	5c 01       	movw	r10, r24
    61dc:	7b 01       	movw	r14, r22
    61de:	4c 01       	movw	r8, r24
    61e0:	82 e0       	ldi	r24, 0x02	; 2
    61e2:	88 0e       	add	r8, r24
    61e4:	91 1c       	adc	r9, r1
    61e6:	65 01       	movw	r12, r10
    61e8:	e5 e0       	ldi	r30, 0x05	; 5
    61ea:	ce 0e       	add	r12, r30
    61ec:	d1 1c       	adc	r13, r1
    61ee:	00 e0       	ldi	r16, 0x00	; 0
    61f0:	10 e0       	ldi	r17, 0x00	; 0
    61f2:	f4 01       	movw	r30, r8
    61f4:	61 91       	ld	r22, Z+
    61f6:	4f 01       	movw	r8, r30
    61f8:	4a e0       	ldi	r20, 0x0A	; 10
    61fa:	50 e0       	ldi	r21, 0x00	; 0
    61fc:	c7 01       	movw	r24, r14
    61fe:	87 d1       	rcall	.+782    	; 0x650e <_ZN5Print5printEhi>
    6200:	ec 01       	movw	r28, r24
    6202:	6e e2       	ldi	r22, 0x2E	; 46
    6204:	c7 01       	movw	r24, r14
    6206:	8a d0       	rcall	.+276    	; 0x631c <_ZN5Print5printEc>
    6208:	8c 0f       	add	r24, r28
    620a:	9d 1f       	adc	r25, r29
    620c:	08 0f       	add	r16, r24
    620e:	19 1f       	adc	r17, r25
    6210:	8c 14       	cp	r8, r12
    6212:	9d 04       	cpc	r9, r13
    6214:	71 f7       	brne	.-36     	; 0x61f2 <_ZNK9IPAddress7printToER5Print+0x30>
    6216:	4a e0       	ldi	r20, 0x0A	; 10
    6218:	50 e0       	ldi	r21, 0x00	; 0
    621a:	f5 01       	movw	r30, r10
    621c:	65 81       	ldd	r22, Z+5	; 0x05
    621e:	c7 01       	movw	r24, r14
    6220:	76 d1       	rcall	.+748    	; 0x650e <_ZN5Print5printEhi>
    6222:	80 0f       	add	r24, r16
    6224:	91 1f       	adc	r25, r17
    6226:	df 91       	pop	r29
    6228:	cf 91       	pop	r28
    622a:	1f 91       	pop	r17
    622c:	0f 91       	pop	r16
    622e:	ff 90       	pop	r15
    6230:	ef 90       	pop	r14
    6232:	df 90       	pop	r13
    6234:	cf 90       	pop	r12
    6236:	bf 90       	pop	r11
    6238:	af 90       	pop	r10
    623a:	9f 90       	pop	r9
    623c:	8f 90       	pop	r8
    623e:	08 95       	ret

00006240 <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    6240:	e6 eb       	ldi	r30, 0xB6	; 182
    6242:	f8 e0       	ldi	r31, 0x08	; 8
    6244:	8a ee       	ldi	r24, 0xEA	; 234
    6246:	94 e0       	ldi	r25, 0x04	; 4
    6248:	91 83       	std	Z+1, r25	; 0x01
    624a:	80 83       	st	Z, r24
{
    _address.bytes[0] = first_octet;
    624c:	12 82       	std	Z+2, r1	; 0x02
    _address.bytes[1] = second_octet;
    624e:	13 82       	std	Z+3, r1	; 0x03
    _address.bytes[2] = third_octet;
    6250:	14 82       	std	Z+4, r1	; 0x04
    _address.bytes[3] = fourth_octet;
    6252:	15 82       	std	Z+5, r1	; 0x05
    6254:	08 95       	ret

00006256 <initVariant>:
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    6256:	08 95       	ret

00006258 <main>:

int main(void)
{
	init();
    6258:	4c d5       	rcall	.+2712   	; 0x6cf2 <init>

	initVariant();
    625a:	fd df       	rcall	.-6      	; 0x6256 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    625c:	20 db       	rcall	.-2496   	; 0x589e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    625e:	c1 e4       	ldi	r28, 0x41	; 65
    6260:	dd e2       	ldi	r29, 0x2D	; 45
#endif
	
	setup();
    
	for (;;) {
		loop();
    6262:	a0 db       	rcall	.-2240   	; 0x59a4 <loop>
		if (serialEventRun) serialEventRun();
    6264:	20 97       	sbiw	r28, 0x00	; 0
    6266:	e9 f3       	breq	.-6      	; 0x6262 <main+0xa>
    6268:	0c dc       	rcall	.-2024   	; 0x5a82 <_Z14serialEventRunv>
    626a:	fb cf       	rjmp	.-10     	; 0x6262 <main+0xa>

0000626c <_Znwj>:
  return malloc(size);
}

void *operator new[](size_t size) {
  return malloc(size);
}
    626c:	0c 94 84 3b 	jmp	0x7708	; 0x7708 <malloc>
    6270:	08 95       	ret

00006272 <_ZdlPv>:

void operator delete(void * ptr) {
  free(ptr);
    6272:	0c 94 19 3c 	jmp	0x7832	; 0x7832 <free>
    6276:	08 95       	ret

00006278 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
  return n;
}
    6278:	cf 92       	push	r12
    627a:	df 92       	push	r13
    627c:	ef 92       	push	r14
    627e:	ff 92       	push	r15
    6280:	0f 93       	push	r16
    6282:	1f 93       	push	r17
    6284:	cf 93       	push	r28
    6286:	df 93       	push	r29
    6288:	41 15       	cp	r20, r1
    628a:	51 05       	cpc	r21, r1
    628c:	b1 f0       	breq	.+44     	; 0x62ba <_ZN5Print5writeEPKhj+0x42>
    628e:	8c 01       	movw	r16, r24
    6290:	e6 2e       	mov	r14, r22
    6292:	f7 2e       	mov	r15, r23
    6294:	ea 01       	movw	r28, r20
    6296:	c1 2c       	mov	r12, r1
    6298:	d1 2c       	mov	r13, r1
    629a:	d7 01       	movw	r26, r14
    629c:	6d 91       	ld	r22, X+
    629e:	7d 01       	movw	r14, r26
    62a0:	d8 01       	movw	r26, r16
    62a2:	ed 91       	ld	r30, X+
    62a4:	fc 91       	ld	r31, X
    62a6:	01 90       	ld	r0, Z+
    62a8:	f0 81       	ld	r31, Z
    62aa:	e0 2d       	mov	r30, r0
    62ac:	c8 01       	movw	r24, r16
    62ae:	19 95       	eicall
    62b0:	c8 0e       	add	r12, r24
    62b2:	d9 1e       	adc	r13, r25
    62b4:	21 97       	sbiw	r28, 0x01	; 1
    62b6:	89 f7       	brne	.-30     	; 0x629a <_ZN5Print5writeEPKhj+0x22>
    62b8:	02 c0       	rjmp	.+4      	; 0x62be <_ZN5Print5writeEPKhj+0x46>
    62ba:	c1 2c       	mov	r12, r1
    62bc:	d1 2c       	mov	r13, r1
    62be:	c6 01       	movw	r24, r12
    62c0:	df 91       	pop	r29
    62c2:	cf 91       	pop	r28
    62c4:	1f 91       	pop	r17
    62c6:	0f 91       	pop	r16
    62c8:	ff 90       	pop	r15
    62ca:	ef 90       	pop	r14
    62cc:	df 90       	pop	r13
    62ce:	cf 90       	pop	r12
    62d0:	08 95       	ret

000062d2 <_ZN5Print5printERK6String>:
    62d2:	dc 01       	movw	r26, r24
    62d4:	ed 91       	ld	r30, X+
    62d6:	fc 91       	ld	r31, X
    62d8:	db 01       	movw	r26, r22
    62da:	14 96       	adiw	r26, 0x04	; 4
    62dc:	4d 91       	ld	r20, X+
    62de:	5c 91       	ld	r21, X
    62e0:	15 97       	sbiw	r26, 0x05	; 5
    62e2:	6d 91       	ld	r22, X+
    62e4:	7c 91       	ld	r23, X
    62e6:	02 80       	ldd	r0, Z+2	; 0x02
    62e8:	f3 81       	ldd	r31, Z+3	; 0x03
    62ea:	e0 2d       	mov	r30, r0
    62ec:	19 95       	eicall
    62ee:	08 95       	ret

000062f0 <_ZN5Print5printEPKc>:
    62f0:	61 15       	cp	r22, r1
    62f2:	71 05       	cpc	r23, r1
    62f4:	81 f0       	breq	.+32     	; 0x6316 <_ZN5Print5printEPKc+0x26>
    62f6:	fb 01       	movw	r30, r22
    62f8:	01 90       	ld	r0, Z+
    62fa:	00 20       	and	r0, r0
    62fc:	e9 f7       	brne	.-6      	; 0x62f8 <_ZN5Print5printEPKc+0x8>
    62fe:	31 97       	sbiw	r30, 0x01	; 1
    6300:	af 01       	movw	r20, r30
    6302:	46 1b       	sub	r20, r22
    6304:	57 0b       	sbc	r21, r23
    6306:	dc 01       	movw	r26, r24
    6308:	ed 91       	ld	r30, X+
    630a:	fc 91       	ld	r31, X
    630c:	02 80       	ldd	r0, Z+2	; 0x02
    630e:	f3 81       	ldd	r31, Z+3	; 0x03
    6310:	e0 2d       	mov	r30, r0
    6312:	19 95       	eicall
    6314:	08 95       	ret
    6316:	80 e0       	ldi	r24, 0x00	; 0
    6318:	90 e0       	ldi	r25, 0x00	; 0
    631a:	08 95       	ret

0000631c <_ZN5Print5printEc>:
    631c:	dc 01       	movw	r26, r24
    631e:	ed 91       	ld	r30, X+
    6320:	fc 91       	ld	r31, X
    6322:	01 90       	ld	r0, Z+
    6324:	f0 81       	ld	r31, Z
    6326:	e0 2d       	mov	r30, r0
    6328:	19 95       	eicall
    632a:	08 95       	ret

0000632c <_ZN5Print7printlnEv>:
    632c:	dc 01       	movw	r26, r24
    632e:	ed 91       	ld	r30, X+
    6330:	fc 91       	ld	r31, X
    6332:	02 80       	ldd	r0, Z+2	; 0x02
    6334:	f3 81       	ldd	r31, Z+3	; 0x03
    6336:	e0 2d       	mov	r30, r0
    6338:	42 e0       	ldi	r20, 0x02	; 2
    633a:	50 e0       	ldi	r21, 0x00	; 0
    633c:	6c ee       	ldi	r22, 0xEC	; 236
    633e:	74 e0       	ldi	r23, 0x04	; 4
    6340:	19 95       	eicall
    6342:	08 95       	ret

00006344 <_ZN5Print7printlnEPKc>:
    6344:	0f 93       	push	r16
    6346:	1f 93       	push	r17
    6348:	cf 93       	push	r28
    634a:	df 93       	push	r29
    634c:	ec 01       	movw	r28, r24
    634e:	d0 df       	rcall	.-96     	; 0x62f0 <_ZN5Print5printEPKc>
    6350:	8c 01       	movw	r16, r24
    6352:	ce 01       	movw	r24, r28
    6354:	eb df       	rcall	.-42     	; 0x632c <_ZN5Print7printlnEv>
    6356:	80 0f       	add	r24, r16
    6358:	91 1f       	adc	r25, r17
    635a:	df 91       	pop	r29
    635c:	cf 91       	pop	r28
    635e:	1f 91       	pop	r17
    6360:	0f 91       	pop	r16
    6362:	08 95       	ret

00006364 <_ZN5Print11printNumberEmh>:
    6364:	4f 92       	push	r4
    6366:	5f 92       	push	r5
    6368:	6f 92       	push	r6
    636a:	7f 92       	push	r7
    636c:	9f 92       	push	r9
    636e:	af 92       	push	r10
    6370:	bf 92       	push	r11
    6372:	cf 92       	push	r12
    6374:	df 92       	push	r13
    6376:	ef 92       	push	r14
    6378:	ff 92       	push	r15
    637a:	0f 93       	push	r16
    637c:	1f 93       	push	r17
    637e:	cf 93       	push	r28
    6380:	df 93       	push	r29
    6382:	cd b7       	in	r28, 0x3d	; 61
    6384:	de b7       	in	r29, 0x3e	; 62
    6386:	a1 97       	sbiw	r28, 0x21	; 33
    6388:	0f b6       	in	r0, 0x3f	; 63
    638a:	f8 94       	cli
    638c:	de bf       	out	0x3e, r29	; 62
    638e:	0f be       	out	0x3f, r0	; 63
    6390:	cd bf       	out	0x3d, r28	; 61
    6392:	5c 01       	movw	r10, r24
    6394:	6a 01       	movw	r12, r20
    6396:	7b 01       	movw	r14, r22
    6398:	92 2e       	mov	r9, r18
    639a:	19 a2       	std	Y+33, r1	; 0x21
    639c:	81 e0       	ldi	r24, 0x01	; 1
    639e:	82 17       	cp	r24, r18
    63a0:	20 f0       	brcs	.+8      	; 0x63aa <_ZN5Print11printNumberEmh+0x46>
    63a2:	0f 2e       	mov	r0, r31
    63a4:	fa e0       	ldi	r31, 0x0A	; 10
    63a6:	9f 2e       	mov	r9, r31
    63a8:	f0 2d       	mov	r31, r0
    63aa:	8e 01       	movw	r16, r28
    63ac:	0f 5d       	subi	r16, 0xDF	; 223
    63ae:	1f 4f       	sbci	r17, 0xFF	; 255
    63b0:	49 2c       	mov	r4, r9
    63b2:	51 2c       	mov	r5, r1
    63b4:	61 2c       	mov	r6, r1
    63b6:	71 2c       	mov	r7, r1
    63b8:	c7 01       	movw	r24, r14
    63ba:	b6 01       	movw	r22, r12
    63bc:	a3 01       	movw	r20, r6
    63be:	92 01       	movw	r18, r4
    63c0:	0e 94 46 3b 	call	0x768c	; 0x768c <__udivmodsi4>
    63c4:	8c 2d       	mov	r24, r12
    63c6:	92 9e       	mul	r9, r18
    63c8:	80 19       	sub	r24, r0
    63ca:	11 24       	eor	r1, r1
    63cc:	01 50       	subi	r16, 0x01	; 1
    63ce:	11 09       	sbc	r17, r1
    63d0:	8a 30       	cpi	r24, 0x0A	; 10
    63d2:	10 f4       	brcc	.+4      	; 0x63d8 <_ZN5Print11printNumberEmh+0x74>
    63d4:	80 5d       	subi	r24, 0xD0	; 208
    63d6:	01 c0       	rjmp	.+2      	; 0x63da <_ZN5Print11printNumberEmh+0x76>
    63d8:	89 5c       	subi	r24, 0xC9	; 201
    63da:	d8 01       	movw	r26, r16
    63dc:	8c 93       	st	X, r24
    63de:	c2 2e       	mov	r12, r18
    63e0:	d3 2e       	mov	r13, r19
    63e2:	e4 2e       	mov	r14, r20
    63e4:	f5 2e       	mov	r15, r21
    63e6:	c1 14       	cp	r12, r1
    63e8:	d1 04       	cpc	r13, r1
    63ea:	e1 04       	cpc	r14, r1
    63ec:	f1 04       	cpc	r15, r1
    63ee:	21 f7       	brne	.-56     	; 0x63b8 <_ZN5Print11printNumberEmh+0x54>
    63f0:	01 15       	cp	r16, r1
    63f2:	11 05       	cpc	r17, r1
    63f4:	91 f0       	breq	.+36     	; 0x641a <_ZN5Print11printNumberEmh+0xb6>
    63f6:	f8 01       	movw	r30, r16
    63f8:	01 90       	ld	r0, Z+
    63fa:	00 20       	and	r0, r0
    63fc:	e9 f7       	brne	.-6      	; 0x63f8 <_ZN5Print11printNumberEmh+0x94>
    63fe:	31 97       	sbiw	r30, 0x01	; 1
    6400:	af 01       	movw	r20, r30
    6402:	40 1b       	sub	r20, r16
    6404:	51 0b       	sbc	r21, r17
    6406:	d5 01       	movw	r26, r10
    6408:	ed 91       	ld	r30, X+
    640a:	fc 91       	ld	r31, X
    640c:	02 80       	ldd	r0, Z+2	; 0x02
    640e:	f3 81       	ldd	r31, Z+3	; 0x03
    6410:	e0 2d       	mov	r30, r0
    6412:	b8 01       	movw	r22, r16
    6414:	c5 01       	movw	r24, r10
    6416:	19 95       	eicall
    6418:	02 c0       	rjmp	.+4      	; 0x641e <_ZN5Print11printNumberEmh+0xba>
    641a:	80 e0       	ldi	r24, 0x00	; 0
    641c:	90 e0       	ldi	r25, 0x00	; 0
    641e:	a1 96       	adiw	r28, 0x21	; 33
    6420:	0f b6       	in	r0, 0x3f	; 63
    6422:	f8 94       	cli
    6424:	de bf       	out	0x3e, r29	; 62
    6426:	0f be       	out	0x3f, r0	; 63
    6428:	cd bf       	out	0x3d, r28	; 61
    642a:	df 91       	pop	r29
    642c:	cf 91       	pop	r28
    642e:	1f 91       	pop	r17
    6430:	0f 91       	pop	r16
    6432:	ff 90       	pop	r15
    6434:	ef 90       	pop	r14
    6436:	df 90       	pop	r13
    6438:	cf 90       	pop	r12
    643a:	bf 90       	pop	r11
    643c:	af 90       	pop	r10
    643e:	9f 90       	pop	r9
    6440:	7f 90       	pop	r7
    6442:	6f 90       	pop	r6
    6444:	5f 90       	pop	r5
    6446:	4f 90       	pop	r4
    6448:	08 95       	ret

0000644a <_ZN5Print5printEli>:
    644a:	cf 92       	push	r12
    644c:	df 92       	push	r13
    644e:	ef 92       	push	r14
    6450:	ff 92       	push	r15
    6452:	0f 93       	push	r16
    6454:	1f 93       	push	r17
    6456:	cf 93       	push	r28
    6458:	df 93       	push	r29
    645a:	ec 01       	movw	r28, r24
    645c:	6a 01       	movw	r12, r20
    645e:	7b 01       	movw	r14, r22
    6460:	21 15       	cp	r18, r1
    6462:	31 05       	cpc	r19, r1
    6464:	41 f4       	brne	.+16     	; 0x6476 <_ZN5Print5printEli+0x2c>
    6466:	e8 81       	ld	r30, Y
    6468:	f9 81       	ldd	r31, Y+1	; 0x01
    646a:	01 90       	ld	r0, Z+
    646c:	f0 81       	ld	r31, Z
    646e:	e0 2d       	mov	r30, r0
    6470:	64 2f       	mov	r22, r20
    6472:	19 95       	eicall
    6474:	19 c0       	rjmp	.+50     	; 0x64a8 <_ZN5Print5printEli+0x5e>
    6476:	2a 30       	cpi	r18, 0x0A	; 10
    6478:	31 05       	cpc	r19, r1
    647a:	a9 f4       	brne	.+42     	; 0x64a6 <_ZN5Print5printEli+0x5c>
    647c:	77 23       	and	r23, r23
    647e:	84 f4       	brge	.+32     	; 0x64a0 <_ZN5Print5printEli+0x56>
    6480:	6d e2       	ldi	r22, 0x2D	; 45
    6482:	4c df       	rcall	.-360    	; 0x631c <_ZN5Print5printEc>
    6484:	8c 01       	movw	r16, r24
    6486:	44 27       	eor	r20, r20
    6488:	55 27       	eor	r21, r21
    648a:	ba 01       	movw	r22, r20
    648c:	4c 19       	sub	r20, r12
    648e:	5d 09       	sbc	r21, r13
    6490:	6e 09       	sbc	r22, r14
    6492:	7f 09       	sbc	r23, r15
    6494:	2a e0       	ldi	r18, 0x0A	; 10
    6496:	ce 01       	movw	r24, r28
    6498:	65 df       	rcall	.-310    	; 0x6364 <_ZN5Print11printNumberEmh>
    649a:	80 0f       	add	r24, r16
    649c:	91 1f       	adc	r25, r17
    649e:	04 c0       	rjmp	.+8      	; 0x64a8 <_ZN5Print5printEli+0x5e>
    64a0:	2a e0       	ldi	r18, 0x0A	; 10
    64a2:	60 df       	rcall	.-320    	; 0x6364 <_ZN5Print11printNumberEmh>
    64a4:	01 c0       	rjmp	.+2      	; 0x64a8 <_ZN5Print5printEli+0x5e>
    64a6:	5e df       	rcall	.-324    	; 0x6364 <_ZN5Print11printNumberEmh>
    64a8:	df 91       	pop	r29
    64aa:	cf 91       	pop	r28
    64ac:	1f 91       	pop	r17
    64ae:	0f 91       	pop	r16
    64b0:	ff 90       	pop	r15
    64b2:	ef 90       	pop	r14
    64b4:	df 90       	pop	r13
    64b6:	cf 90       	pop	r12
    64b8:	08 95       	ret

000064ba <_ZN5Print5printEii>:
    64ba:	9a 01       	movw	r18, r20
    64bc:	ab 01       	movw	r20, r22
    64be:	77 0f       	add	r23, r23
    64c0:	66 0b       	sbc	r22, r22
    64c2:	77 0b       	sbc	r23, r23
    64c4:	c2 cf       	rjmp	.-124    	; 0x644a <_ZN5Print5printEli>
    64c6:	08 95       	ret

000064c8 <_ZN5Print7printlnEii>:
    64c8:	0f 93       	push	r16
    64ca:	1f 93       	push	r17
    64cc:	cf 93       	push	r28
    64ce:	df 93       	push	r29
    64d0:	ec 01       	movw	r28, r24
    64d2:	9a 01       	movw	r18, r20
    64d4:	ab 01       	movw	r20, r22
    64d6:	77 0f       	add	r23, r23
    64d8:	66 0b       	sbc	r22, r22
    64da:	77 0b       	sbc	r23, r23
    64dc:	b6 df       	rcall	.-148    	; 0x644a <_ZN5Print5printEli>
    64de:	8c 01       	movw	r16, r24
    64e0:	ce 01       	movw	r24, r28
    64e2:	24 df       	rcall	.-440    	; 0x632c <_ZN5Print7printlnEv>
    64e4:	80 0f       	add	r24, r16
    64e6:	91 1f       	adc	r25, r17
    64e8:	df 91       	pop	r29
    64ea:	cf 91       	pop	r28
    64ec:	1f 91       	pop	r17
    64ee:	0f 91       	pop	r16
    64f0:	08 95       	ret

000064f2 <_ZN5Print5printEmi>:
    64f2:	21 15       	cp	r18, r1
    64f4:	31 05       	cpc	r19, r1
    64f6:	49 f4       	brne	.+18     	; 0x650a <_ZN5Print5printEmi+0x18>
    64f8:	dc 01       	movw	r26, r24
    64fa:	ed 91       	ld	r30, X+
    64fc:	fc 91       	ld	r31, X
    64fe:	01 90       	ld	r0, Z+
    6500:	f0 81       	ld	r31, Z
    6502:	e0 2d       	mov	r30, r0
    6504:	64 2f       	mov	r22, r20
    6506:	19 95       	eicall
    6508:	08 95       	ret
    650a:	2c cf       	rjmp	.-424    	; 0x6364 <_ZN5Print11printNumberEmh>
    650c:	08 95       	ret

0000650e <_ZN5Print5printEhi>:
    650e:	9a 01       	movw	r18, r20
    6510:	46 2f       	mov	r20, r22
    6512:	50 e0       	ldi	r21, 0x00	; 0
    6514:	60 e0       	ldi	r22, 0x00	; 0
    6516:	70 e0       	ldi	r23, 0x00	; 0
    6518:	ec cf       	rjmp	.-40     	; 0x64f2 <_ZN5Print5printEmi>
    651a:	08 95       	ret

0000651c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    651c:	4f 92       	push	r4
    651e:	5f 92       	push	r5
    6520:	7f 92       	push	r7
    6522:	8f 92       	push	r8
    6524:	9f 92       	push	r9
    6526:	af 92       	push	r10
    6528:	bf 92       	push	r11
    652a:	cf 92       	push	r12
    652c:	df 92       	push	r13
    652e:	ef 92       	push	r14
    6530:	ff 92       	push	r15
    6532:	0f 93       	push	r16
    6534:	1f 93       	push	r17
    6536:	cf 93       	push	r28
    6538:	df 93       	push	r29
    653a:	00 d0       	rcall	.+0      	; 0x653c <_ZN5Print10printFloatEdh+0x20>
    653c:	1f 92       	push	r1
    653e:	cd b7       	in	r28, 0x3d	; 61
    6540:	de b7       	in	r29, 0x3e	; 62
    6542:	8c 01       	movw	r16, r24
    6544:	4a 01       	movw	r8, r20
    6546:	5b 01       	movw	r10, r22
    6548:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    654a:	9a 01       	movw	r18, r20
    654c:	ab 01       	movw	r20, r22
    654e:	c5 01       	movw	r24, r10
    6550:	b4 01       	movw	r22, r8
    6552:	0e 94 2f 3b 	call	0x765e	; 0x765e <__unordsf2>
    6556:	88 23       	and	r24, r24
    6558:	29 f0       	breq	.+10     	; 0x6564 <_ZN5Print10printFloatEdh+0x48>
    655a:	6f ee       	ldi	r22, 0xEF	; 239
    655c:	74 e0       	ldi	r23, 0x04	; 4
    655e:	c8 01       	movw	r24, r16
    6560:	c7 de       	rcall	.-626    	; 0x62f0 <_ZN5Print5printEPKc>
    6562:	bb c0       	rjmp	.+374    	; 0x66da <_ZN5Print10printFloatEdh+0x1be>
  if (isinf(number)) return print("inf");
    6564:	75 01       	movw	r14, r10
    6566:	64 01       	movw	r12, r8
    6568:	e8 94       	clt
    656a:	f7 f8       	bld	r15, 7
    656c:	2f ef       	ldi	r18, 0xFF	; 255
    656e:	3f ef       	ldi	r19, 0xFF	; 255
    6570:	4f e7       	ldi	r20, 0x7F	; 127
    6572:	5f e7       	ldi	r21, 0x7F	; 127
    6574:	c7 01       	movw	r24, r14
    6576:	b6 01       	movw	r22, r12
    6578:	0e 94 2f 3b 	call	0x765e	; 0x765e <__unordsf2>
    657c:	81 11       	cpse	r24, r1
    657e:	0e c0       	rjmp	.+28     	; 0x659c <_ZN5Print10printFloatEdh+0x80>
    6580:	2f ef       	ldi	r18, 0xFF	; 255
    6582:	3f ef       	ldi	r19, 0xFF	; 255
    6584:	4f e7       	ldi	r20, 0x7F	; 127
    6586:	5f e7       	ldi	r21, 0x7F	; 127
    6588:	c7 01       	movw	r24, r14
    658a:	b6 01       	movw	r22, r12
    658c:	b2 d6       	rcall	.+3428   	; 0x72f2 <__cmpsf2>
    658e:	18 16       	cp	r1, r24
    6590:	2c f4       	brge	.+10     	; 0x659c <_ZN5Print10printFloatEdh+0x80>
    6592:	63 ef       	ldi	r22, 0xF3	; 243
    6594:	74 e0       	ldi	r23, 0x04	; 4
    6596:	c8 01       	movw	r24, r16
    6598:	ab de       	rcall	.-682    	; 0x62f0 <_ZN5Print5printEPKc>
    659a:	9f c0       	rjmp	.+318    	; 0x66da <_ZN5Print10printFloatEdh+0x1be>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    659c:	2f ef       	ldi	r18, 0xFF	; 255
    659e:	3f ef       	ldi	r19, 0xFF	; 255
    65a0:	4f e7       	ldi	r20, 0x7F	; 127
    65a2:	5f e4       	ldi	r21, 0x4F	; 79
    65a4:	c5 01       	movw	r24, r10
    65a6:	b4 01       	movw	r22, r8
    65a8:	f3 d7       	rcall	.+4070   	; 0x7590 <__gesf2>
    65aa:	18 16       	cp	r1, r24
    65ac:	2c f4       	brge	.+10     	; 0x65b8 <_ZN5Print10printFloatEdh+0x9c>
    65ae:	67 ef       	ldi	r22, 0xF7	; 247
    65b0:	74 e0       	ldi	r23, 0x04	; 4
    65b2:	c8 01       	movw	r24, r16
    65b4:	9d de       	rcall	.-710    	; 0x62f0 <_ZN5Print5printEPKc>
    65b6:	91 c0       	rjmp	.+290    	; 0x66da <_ZN5Print10printFloatEdh+0x1be>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    65b8:	2f ef       	ldi	r18, 0xFF	; 255
    65ba:	3f ef       	ldi	r19, 0xFF	; 255
    65bc:	4f e7       	ldi	r20, 0x7F	; 127
    65be:	5f ec       	ldi	r21, 0xCF	; 207
    65c0:	c5 01       	movw	r24, r10
    65c2:	b4 01       	movw	r22, r8
    65c4:	96 d6       	rcall	.+3372   	; 0x72f2 <__cmpsf2>
    65c6:	88 23       	and	r24, r24
    65c8:	2c f4       	brge	.+10     	; 0x65d4 <_ZN5Print10printFloatEdh+0xb8>
    65ca:	67 ef       	ldi	r22, 0xF7	; 247
    65cc:	74 e0       	ldi	r23, 0x04	; 4
    65ce:	c8 01       	movw	r24, r16
    65d0:	8f de       	rcall	.-738    	; 0x62f0 <_ZN5Print5printEPKc>
    65d2:	83 c0       	rjmp	.+262    	; 0x66da <_ZN5Print10printFloatEdh+0x1be>
  
  // Handle negative numbers
  if (number < 0.0)
    65d4:	20 e0       	ldi	r18, 0x00	; 0
    65d6:	30 e0       	ldi	r19, 0x00	; 0
    65d8:	a9 01       	movw	r20, r18
    65da:	c5 01       	movw	r24, r10
    65dc:	b4 01       	movw	r22, r8
    65de:	89 d6       	rcall	.+3346   	; 0x72f2 <__cmpsf2>
    65e0:	88 23       	and	r24, r24
    65e2:	4c f4       	brge	.+18     	; 0x65f6 <_ZN5Print10printFloatEdh+0xda>
  {
     n += print('-');
    65e4:	6d e2       	ldi	r22, 0x2D	; 45
    65e6:	c8 01       	movw	r24, r16
    65e8:	99 de       	rcall	.-718    	; 0x631c <_ZN5Print5printEc>
    65ea:	7c 01       	movw	r14, r24
     number = -number;
    65ec:	b7 fa       	bst	r11, 7
    65ee:	b0 94       	com	r11
    65f0:	b7 f8       	bld	r11, 7
    65f2:	b0 94       	com	r11
    65f4:	02 c0       	rjmp	.+4      	; 0x65fa <_ZN5Print10printFloatEdh+0xde>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    65f6:	e1 2c       	mov	r14, r1
    65f8:	f1 2c       	mov	r15, r1
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    65fa:	77 20       	and	r7, r7
    65fc:	09 f4       	brne	.+2      	; 0x6600 <_ZN5Print10printFloatEdh+0xe4>
    65fe:	5b c0       	rjmp	.+182    	; 0x66b6 <_ZN5Print10printFloatEdh+0x19a>
    6600:	d1 2c       	mov	r13, r1
    6602:	60 e0       	ldi	r22, 0x00	; 0
    6604:	70 e0       	ldi	r23, 0x00	; 0
    6606:	80 e0       	ldi	r24, 0x00	; 0
    6608:	9f e3       	ldi	r25, 0x3F	; 63
    rounding /= 10.0;
    660a:	20 e0       	ldi	r18, 0x00	; 0
    660c:	30 e0       	ldi	r19, 0x00	; 0
    660e:	40 e2       	ldi	r20, 0x20	; 32
    6610:	51 e4       	ldi	r21, 0x41	; 65
    6612:	73 d6       	rcall	.+3302   	; 0x72fa <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    6614:	d3 94       	inc	r13
    6616:	d7 10       	cpse	r13, r7
    6618:	f8 cf       	rjmp	.-16     	; 0x660a <_ZN5Print10printFloatEdh+0xee>
    661a:	26 c0       	rjmp	.+76     	; 0x6668 <_ZN5Print10printFloatEdh+0x14c>
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    661c:	20 e0       	ldi	r18, 0x00	; 0
    661e:	30 e0       	ldi	r19, 0x00	; 0
    6620:	40 e2       	ldi	r20, 0x20	; 32
    6622:	51 e4       	ldi	r21, 0x41	; 65
    6624:	c5 01       	movw	r24, r10
    6626:	b4 01       	movw	r22, r8
    6628:	b7 d7       	rcall	.+3950   	; 0x7598 <__mulsf3>
    662a:	4b 01       	movw	r8, r22
    662c:	5c 01       	movw	r10, r24
    int toPrint = int(remainder);
    662e:	cd d6       	rcall	.+3482   	; 0x73ca <__fixsfsi>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    6630:	6b 01       	movw	r12, r22
    6632:	77 0f       	add	r23, r23
    6634:	ee 08       	sbc	r14, r14
    6636:	ff 08       	sbc	r15, r15
    6638:	2a e0       	ldi	r18, 0x0A	; 10
    663a:	30 e0       	ldi	r19, 0x00	; 0
    663c:	b7 01       	movw	r22, r14
    663e:	a6 01       	movw	r20, r12
    6640:	c8 01       	movw	r24, r16
    6642:	03 df       	rcall	.-506    	; 0x644a <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    6644:	48 0e       	add	r4, r24
    6646:	59 1e       	adc	r5, r25
    remainder -= toPrint; 
    6648:	c7 01       	movw	r24, r14
    664a:	b6 01       	movw	r22, r12
    664c:	f1 d6       	rcall	.+3554   	; 0x7430 <__floatsisf>
    664e:	9b 01       	movw	r18, r22
    6650:	ac 01       	movw	r20, r24
    6652:	c5 01       	movw	r24, r10
    6654:	b4 01       	movw	r22, r8
    6656:	e8 d5       	rcall	.+3024   	; 0x7228 <__subsf3>
    6658:	4b 01       	movw	r8, r22
    665a:	5c 01       	movw	r10, r24
    665c:	7a 94       	dec	r7
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    665e:	71 10       	cpse	r7, r1
    6660:	dd cf       	rjmp	.-70     	; 0x661c <_ZN5Print10printFloatEdh+0x100>
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
    6662:	84 2d       	mov	r24, r4
    6664:	95 2d       	mov	r25, r5
    6666:	39 c0       	rjmp	.+114    	; 0x66da <_ZN5Print10printFloatEdh+0x1be>
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
  
  number += rounding;
    6668:	9b 01       	movw	r18, r22
    666a:	ac 01       	movw	r20, r24
    666c:	c5 01       	movw	r24, r10
    666e:	b4 01       	movw	r22, r8
    6670:	dc d5       	rcall	.+3000   	; 0x722a <__addsf3>
    6672:	4b 01       	movw	r8, r22
    6674:	5c 01       	movw	r10, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    6676:	ae d6       	rcall	.+3420   	; 0x73d4 <__fixunssfsi>
    6678:	69 83       	std	Y+1, r22	; 0x01
    667a:	7a 83       	std	Y+2, r23	; 0x02
    667c:	8b 83       	std	Y+3, r24	; 0x03
    667e:	9c 83       	std	Y+4, r25	; 0x04
  double remainder = number - (double)int_part;
    6680:	d5 d6       	rcall	.+3498   	; 0x742c <__floatunsisf>
    6682:	9b 01       	movw	r18, r22
    6684:	ac 01       	movw	r20, r24
    6686:	c5 01       	movw	r24, r10
    6688:	b4 01       	movw	r22, r8
    668a:	ce d5       	rcall	.+2972   	; 0x7228 <__subsf3>
    668c:	4b 01       	movw	r8, r22
    668e:	5c 01       	movw	r10, r24
  n += print(int_part);
    6690:	2a e0       	ldi	r18, 0x0A	; 10
    6692:	30 e0       	ldi	r19, 0x00	; 0
    6694:	49 81       	ldd	r20, Y+1	; 0x01
    6696:	5a 81       	ldd	r21, Y+2	; 0x02
    6698:	6b 81       	ldd	r22, Y+3	; 0x03
    669a:	7c 81       	ldd	r23, Y+4	; 0x04
    669c:	c8 01       	movw	r24, r16
    669e:	29 df       	rcall	.-430    	; 0x64f2 <_ZN5Print5printEmi>
    66a0:	6c 01       	movw	r12, r24

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    66a2:	60 e3       	ldi	r22, 0x30	; 48
    66a4:	72 e0       	ldi	r23, 0x02	; 2
    66a6:	c8 01       	movw	r24, r16
    66a8:	23 de       	rcall	.-954    	; 0x62f0 <_ZN5Print5printEPKc>
    66aa:	8c 0d       	add	r24, r12
    66ac:	9d 1d       	adc	r25, r13
    66ae:	2c 01       	movw	r4, r24
    66b0:	4e 0c       	add	r4, r14
    66b2:	5f 1c       	adc	r5, r15
    66b4:	b3 cf       	rjmp	.-154    	; 0x661c <_ZN5Print10printFloatEdh+0x100>
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
  
  number += rounding;
    66b6:	20 e0       	ldi	r18, 0x00	; 0
    66b8:	30 e0       	ldi	r19, 0x00	; 0
    66ba:	40 e0       	ldi	r20, 0x00	; 0
    66bc:	5f e3       	ldi	r21, 0x3F	; 63
    66be:	c5 01       	movw	r24, r10
    66c0:	b4 01       	movw	r22, r8
    66c2:	b3 d5       	rcall	.+2918   	; 0x722a <__addsf3>

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    66c4:	87 d6       	rcall	.+3342   	; 0x73d4 <__fixunssfsi>
    66c6:	ab 01       	movw	r20, r22
    66c8:	bc 01       	movw	r22, r24
  double remainder = number - (double)int_part;
  n += print(int_part);
    66ca:	2a e0       	ldi	r18, 0x0A	; 10
    66cc:	30 e0       	ldi	r19, 0x00	; 0
    66ce:	c8 01       	movw	r24, r16
    66d0:	10 df       	rcall	.-480    	; 0x64f2 <_ZN5Print5printEmi>
    66d2:	2c 01       	movw	r4, r24
    66d4:	4e 0c       	add	r4, r14
    66d6:	5f 1c       	adc	r5, r15
    66d8:	c4 cf       	rjmp	.-120    	; 0x6662 <_ZN5Print10printFloatEdh+0x146>
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    66da:	0f 90       	pop	r0
    66dc:	0f 90       	pop	r0
    66de:	0f 90       	pop	r0
    66e0:	0f 90       	pop	r0
    66e2:	df 91       	pop	r29
    66e4:	cf 91       	pop	r28
    66e6:	1f 91       	pop	r17
    66e8:	0f 91       	pop	r16
    66ea:	ff 90       	pop	r15
    66ec:	ef 90       	pop	r14
    66ee:	df 90       	pop	r13
    66f0:	cf 90       	pop	r12
    66f2:	bf 90       	pop	r11
    66f4:	af 90       	pop	r10
    66f6:	9f 90       	pop	r9
    66f8:	8f 90       	pop	r8
    66fa:	7f 90       	pop	r7
    66fc:	5f 90       	pop	r5
    66fe:	4f 90       	pop	r4
    6700:	08 95       	ret

00006702 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    6702:	0c cf       	rjmp	.-488    	; 0x651c <_ZN5Print10printFloatEdh>
}
    6704:	08 95       	ret

00006706 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    6706:	0f 93       	push	r16
    6708:	1f 93       	push	r17
    670a:	cf 93       	push	r28
    670c:	df 93       	push	r29
    670e:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    6710:	05 df       	rcall	.-502    	; 0x651c <_ZN5Print10printFloatEdh>
    6712:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    6714:	ce 01       	movw	r24, r28
    6716:	0a de       	rcall	.-1004   	; 0x632c <_ZN5Print7printlnEv>
  return n;
}
    6718:	80 0f       	add	r24, r16
    671a:	91 1f       	adc	r25, r17
    671c:	df 91       	pop	r29
    671e:	cf 91       	pop	r28
    6720:	1f 91       	pop	r17
    6722:	0f 91       	pop	r16
    6724:	08 95       	ret

00006726 <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
    6726:	82 30       	cpi	r24, 0x02	; 2
    6728:	a9 f0       	breq	.+42     	; 0x6754 <_Z12disableTimerh+0x2e>
    672a:	28 f4       	brcc	.+10     	; 0x6736 <_Z12disableTimerh+0x10>
    672c:	88 23       	and	r24, r24
    672e:	49 f0       	breq	.+18     	; 0x6742 <_Z12disableTimerh+0x1c>
    6730:	81 30       	cpi	r24, 0x01	; 1
    6732:	51 f0       	breq	.+20     	; 0x6748 <_Z12disableTimerh+0x22>
    6734:	08 95       	ret
    6736:	84 30       	cpi	r24, 0x04	; 4
    6738:	21 f1       	breq	.+72     	; 0x6782 <_Z12disableTimerh+0x5c>
    673a:	e8 f0       	brcs	.+58     	; 0x6776 <_Z12disableTimerh+0x50>
    673c:	85 30       	cpi	r24, 0x05	; 5
    673e:	39 f1       	breq	.+78     	; 0x678e <_Z12disableTimerh+0x68>
    6740:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
    6742:	10 92 6e 00 	sts	0x006E, r1
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
    6746:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
    6748:	ef e6       	ldi	r30, 0x6F	; 111
    674a:	f0 e0       	ldi	r31, 0x00	; 0
    674c:	80 81       	ld	r24, Z
    674e:	8d 7f       	andi	r24, 0xFD	; 253
    6750:	80 83       	st	Z, r24
      break;
    6752:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
    6754:	e0 e7       	ldi	r30, 0x70	; 112
    6756:	f0 e0       	ldi	r31, 0x00	; 0
    6758:	80 81       	ld	r24, Z
    675a:	8d 7f       	andi	r24, 0xFD	; 253
    675c:	80 83       	st	Z, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
    675e:	81 e0       	ldi	r24, 0x01	; 1
    6760:	80 93 b0 00 	sts	0x00B0, r24
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
    6764:	e1 eb       	ldi	r30, 0xB1	; 177
    6766:	f0 e0       	ldi	r31, 0x00	; 0
    6768:	80 81       	ld	r24, Z
    676a:	88 7f       	andi	r24, 0xF8	; 248
    676c:	84 60       	ori	r24, 0x04	; 4
    676e:	80 83       	st	Z, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
    6770:	10 92 b3 00 	sts	0x00B3, r1
      #endif
      break;
    6774:	08 95       	ret

#if defined(TIMSK3) && defined(OCIE3A)
    case 3:
      bitWrite(TIMSK3, OCIE3A, 0);
    6776:	e1 e7       	ldi	r30, 0x71	; 113
    6778:	f0 e0       	ldi	r31, 0x00	; 0
    677a:	80 81       	ld	r24, Z
    677c:	8d 7f       	andi	r24, 0xFD	; 253
    677e:	80 83       	st	Z, r24
      break;
    6780:	08 95       	ret
#endif

#if defined(TIMSK4) && defined(OCIE4A)
    case 4:
      bitWrite(TIMSK4, OCIE4A, 0);
    6782:	e2 e7       	ldi	r30, 0x72	; 114
    6784:	f0 e0       	ldi	r31, 0x00	; 0
    6786:	80 81       	ld	r24, Z
    6788:	8d 7f       	andi	r24, 0xFD	; 253
    678a:	80 83       	st	Z, r24
      break;
    678c:	08 95       	ret
#endif

#if defined(TIMSK5) && defined(OCIE5A)
    case 5:
      bitWrite(TIMSK5, OCIE5A, 0);
    678e:	e3 e7       	ldi	r30, 0x73	; 115
    6790:	f0 e0       	ldi	r31, 0x00	; 0
    6792:	80 81       	ld	r24, Z
    6794:	8d 7f       	andi	r24, 0xFD	; 253
    6796:	80 83       	st	Z, r24
    6798:	08 95       	ret

0000679a <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
    679a:	cf 93       	push	r28
    679c:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    679e:	80 91 07 02 	lds	r24, 0x0207
    67a2:	8c 13       	cpse	r24, r28
    67a4:	08 c0       	rjmp	.+16     	; 0x67b6 <_Z6noToneh+0x1c>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    67a6:	ea eb       	ldi	r30, 0xBA	; 186
    67a8:	f2 e0       	ldi	r31, 0x02	; 2
    67aa:	e4 91       	lpm	r30, Z
    67ac:	8e 2f       	mov	r24, r30
      tone_pins[i] = 255;
    67ae:	9f ef       	ldi	r25, 0xFF	; 255
    67b0:	90 93 07 02 	sts	0x0207, r25
    67b4:	01 c0       	rjmp	.+2      	; 0x67b8 <_Z6noToneh+0x1e>
    67b6:	8f ef       	ldi	r24, 0xFF	; 255
    }
  }
  
  disableTimer(_timer);
    67b8:	b6 df       	rcall	.-148    	; 0x6726 <_Z12disableTimerh>

  digitalWrite(_pin, 0);
    67ba:	60 e0       	ldi	r22, 0x00	; 0
    67bc:	8c 2f       	mov	r24, r28
    67be:	a2 d3       	rcall	.+1860   	; 0x6f04 <digitalWrite>
}
    67c0:	cf 91       	pop	r28
    67c2:	08 95       	ret

000067c4 <__vector_13>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
    67c4:	1f 92       	push	r1
    67c6:	0f 92       	push	r0
    67c8:	0f b6       	in	r0, 0x3f	; 63
    67ca:	0f 92       	push	r0
    67cc:	11 24       	eor	r1, r1
    67ce:	0b b6       	in	r0, 0x3b	; 59
    67d0:	0f 92       	push	r0
    67d2:	2f 93       	push	r18
    67d4:	3f 93       	push	r19
    67d6:	4f 93       	push	r20
    67d8:	5f 93       	push	r21
    67da:	6f 93       	push	r22
    67dc:	7f 93       	push	r23
    67de:	8f 93       	push	r24
    67e0:	9f 93       	push	r25
    67e2:	af 93       	push	r26
    67e4:	bf 93       	push	r27
    67e6:	ef 93       	push	r30
    67e8:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
    67ea:	80 91 bf 08 	lds	r24, 0x08BF
    67ee:	90 91 c0 08 	lds	r25, 0x08C0
    67f2:	a0 91 c1 08 	lds	r26, 0x08C1
    67f6:	b0 91 c2 08 	lds	r27, 0x08C2
    67fa:	89 2b       	or	r24, r25
    67fc:	8a 2b       	or	r24, r26
    67fe:	8b 2b       	or	r24, r27
    6800:	51 f1       	breq	.+84     	; 0x6856 <__vector_13+0x92>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
    6802:	80 91 bc 08 	lds	r24, 0x08BC
    6806:	e0 91 bd 08 	lds	r30, 0x08BD
    680a:	f0 91 be 08 	lds	r31, 0x08BE
    680e:	90 81       	ld	r25, Z
    6810:	89 27       	eor	r24, r25
    6812:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
    6814:	80 91 bf 08 	lds	r24, 0x08BF
    6818:	90 91 c0 08 	lds	r25, 0x08C0
    681c:	a0 91 c1 08 	lds	r26, 0x08C1
    6820:	b0 91 c2 08 	lds	r27, 0x08C2
    6824:	18 16       	cp	r1, r24
    6826:	19 06       	cpc	r1, r25
    6828:	1a 06       	cpc	r1, r26
    682a:	1b 06       	cpc	r1, r27
    682c:	bc f4       	brge	.+46     	; 0x685c <__vector_13+0x98>
      timer2_toggle_count--;
    682e:	80 91 bf 08 	lds	r24, 0x08BF
    6832:	90 91 c0 08 	lds	r25, 0x08C0
    6836:	a0 91 c1 08 	lds	r26, 0x08C1
    683a:	b0 91 c2 08 	lds	r27, 0x08C2
    683e:	01 97       	sbiw	r24, 0x01	; 1
    6840:	a1 09       	sbc	r26, r1
    6842:	b1 09       	sbc	r27, r1
    6844:	80 93 bf 08 	sts	0x08BF, r24
    6848:	90 93 c0 08 	sts	0x08C0, r25
    684c:	a0 93 c1 08 	sts	0x08C1, r26
    6850:	b0 93 c2 08 	sts	0x08C2, r27
    6854:	03 c0       	rjmp	.+6      	; 0x685c <__vector_13+0x98>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
    6856:	80 91 07 02 	lds	r24, 0x0207
    685a:	9f df       	rcall	.-194    	; 0x679a <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    685c:	ff 91       	pop	r31
    685e:	ef 91       	pop	r30
    6860:	bf 91       	pop	r27
    6862:	af 91       	pop	r26
    6864:	9f 91       	pop	r25
    6866:	8f 91       	pop	r24
    6868:	7f 91       	pop	r23
    686a:	6f 91       	pop	r22
    686c:	5f 91       	pop	r21
    686e:	4f 91       	pop	r20
    6870:	3f 91       	pop	r19
    6872:	2f 91       	pop	r18
    6874:	0f 90       	pop	r0
    6876:	0b be       	out	0x3b, r0	; 59
    6878:	0f 90       	pop	r0
    687a:	0f be       	out	0x3f, r0	; 63
    687c:	0f 90       	pop	r0
    687e:	1f 90       	pop	r1
    6880:	18 95       	reti

00006882 <__vector_1>:
		intFunc[EXTERNAL_INT_4]();
}

#elif defined(EICRA) && defined(EICRB)

ISR(INT0_vect) {
    6882:	1f 92       	push	r1
    6884:	0f 92       	push	r0
    6886:	0f b6       	in	r0, 0x3f	; 63
    6888:	0f 92       	push	r0
    688a:	11 24       	eor	r1, r1
    688c:	0b b6       	in	r0, 0x3b	; 59
    688e:	0f 92       	push	r0
    6890:	2f 93       	push	r18
    6892:	3f 93       	push	r19
    6894:	4f 93       	push	r20
    6896:	5f 93       	push	r21
    6898:	6f 93       	push	r22
    689a:	7f 93       	push	r23
    689c:	8f 93       	push	r24
    689e:	9f 93       	push	r25
    68a0:	af 93       	push	r26
    68a2:	bf 93       	push	r27
    68a4:	ef 93       	push	r30
    68a6:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_2])
    68a8:	80 91 c7 08 	lds	r24, 0x08C7
    68ac:	90 91 c8 08 	lds	r25, 0x08C8
    68b0:	89 2b       	or	r24, r25
    68b2:	29 f0       	breq	.+10     	; 0x68be <__vector_1+0x3c>
    intFunc[EXTERNAL_INT_2]();
    68b4:	e0 91 c7 08 	lds	r30, 0x08C7
    68b8:	f0 91 c8 08 	lds	r31, 0x08C8
    68bc:	19 95       	eicall
}
    68be:	ff 91       	pop	r31
    68c0:	ef 91       	pop	r30
    68c2:	bf 91       	pop	r27
    68c4:	af 91       	pop	r26
    68c6:	9f 91       	pop	r25
    68c8:	8f 91       	pop	r24
    68ca:	7f 91       	pop	r23
    68cc:	6f 91       	pop	r22
    68ce:	5f 91       	pop	r21
    68d0:	4f 91       	pop	r20
    68d2:	3f 91       	pop	r19
    68d4:	2f 91       	pop	r18
    68d6:	0f 90       	pop	r0
    68d8:	0b be       	out	0x3b, r0	; 59
    68da:	0f 90       	pop	r0
    68dc:	0f be       	out	0x3f, r0	; 63
    68de:	0f 90       	pop	r0
    68e0:	1f 90       	pop	r1
    68e2:	18 95       	reti

000068e4 <__vector_2>:

ISR(INT1_vect) {
    68e4:	1f 92       	push	r1
    68e6:	0f 92       	push	r0
    68e8:	0f b6       	in	r0, 0x3f	; 63
    68ea:	0f 92       	push	r0
    68ec:	11 24       	eor	r1, r1
    68ee:	0b b6       	in	r0, 0x3b	; 59
    68f0:	0f 92       	push	r0
    68f2:	2f 93       	push	r18
    68f4:	3f 93       	push	r19
    68f6:	4f 93       	push	r20
    68f8:	5f 93       	push	r21
    68fa:	6f 93       	push	r22
    68fc:	7f 93       	push	r23
    68fe:	8f 93       	push	r24
    6900:	9f 93       	push	r25
    6902:	af 93       	push	r26
    6904:	bf 93       	push	r27
    6906:	ef 93       	push	r30
    6908:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_3])
    690a:	80 91 c9 08 	lds	r24, 0x08C9
    690e:	90 91 ca 08 	lds	r25, 0x08CA
    6912:	89 2b       	or	r24, r25
    6914:	29 f0       	breq	.+10     	; 0x6920 <__vector_2+0x3c>
    intFunc[EXTERNAL_INT_3]();
    6916:	e0 91 c9 08 	lds	r30, 0x08C9
    691a:	f0 91 ca 08 	lds	r31, 0x08CA
    691e:	19 95       	eicall
}
    6920:	ff 91       	pop	r31
    6922:	ef 91       	pop	r30
    6924:	bf 91       	pop	r27
    6926:	af 91       	pop	r26
    6928:	9f 91       	pop	r25
    692a:	8f 91       	pop	r24
    692c:	7f 91       	pop	r23
    692e:	6f 91       	pop	r22
    6930:	5f 91       	pop	r21
    6932:	4f 91       	pop	r20
    6934:	3f 91       	pop	r19
    6936:	2f 91       	pop	r18
    6938:	0f 90       	pop	r0
    693a:	0b be       	out	0x3b, r0	; 59
    693c:	0f 90       	pop	r0
    693e:	0f be       	out	0x3f, r0	; 63
    6940:	0f 90       	pop	r0
    6942:	1f 90       	pop	r1
    6944:	18 95       	reti

00006946 <__vector_3>:

ISR(INT2_vect) {
    6946:	1f 92       	push	r1
    6948:	0f 92       	push	r0
    694a:	0f b6       	in	r0, 0x3f	; 63
    694c:	0f 92       	push	r0
    694e:	11 24       	eor	r1, r1
    6950:	0b b6       	in	r0, 0x3b	; 59
    6952:	0f 92       	push	r0
    6954:	2f 93       	push	r18
    6956:	3f 93       	push	r19
    6958:	4f 93       	push	r20
    695a:	5f 93       	push	r21
    695c:	6f 93       	push	r22
    695e:	7f 93       	push	r23
    6960:	8f 93       	push	r24
    6962:	9f 93       	push	r25
    6964:	af 93       	push	r26
    6966:	bf 93       	push	r27
    6968:	ef 93       	push	r30
    696a:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_4])
    696c:	80 91 cb 08 	lds	r24, 0x08CB
    6970:	90 91 cc 08 	lds	r25, 0x08CC
    6974:	89 2b       	or	r24, r25
    6976:	29 f0       	breq	.+10     	; 0x6982 <__vector_3+0x3c>
    intFunc[EXTERNAL_INT_4]();
    6978:	e0 91 cb 08 	lds	r30, 0x08CB
    697c:	f0 91 cc 08 	lds	r31, 0x08CC
    6980:	19 95       	eicall
}
    6982:	ff 91       	pop	r31
    6984:	ef 91       	pop	r30
    6986:	bf 91       	pop	r27
    6988:	af 91       	pop	r26
    698a:	9f 91       	pop	r25
    698c:	8f 91       	pop	r24
    698e:	7f 91       	pop	r23
    6990:	6f 91       	pop	r22
    6992:	5f 91       	pop	r21
    6994:	4f 91       	pop	r20
    6996:	3f 91       	pop	r19
    6998:	2f 91       	pop	r18
    699a:	0f 90       	pop	r0
    699c:	0b be       	out	0x3b, r0	; 59
    699e:	0f 90       	pop	r0
    69a0:	0f be       	out	0x3f, r0	; 63
    69a2:	0f 90       	pop	r0
    69a4:	1f 90       	pop	r1
    69a6:	18 95       	reti

000069a8 <__vector_4>:

ISR(INT3_vect) {
    69a8:	1f 92       	push	r1
    69aa:	0f 92       	push	r0
    69ac:	0f b6       	in	r0, 0x3f	; 63
    69ae:	0f 92       	push	r0
    69b0:	11 24       	eor	r1, r1
    69b2:	0b b6       	in	r0, 0x3b	; 59
    69b4:	0f 92       	push	r0
    69b6:	2f 93       	push	r18
    69b8:	3f 93       	push	r19
    69ba:	4f 93       	push	r20
    69bc:	5f 93       	push	r21
    69be:	6f 93       	push	r22
    69c0:	7f 93       	push	r23
    69c2:	8f 93       	push	r24
    69c4:	9f 93       	push	r25
    69c6:	af 93       	push	r26
    69c8:	bf 93       	push	r27
    69ca:	ef 93       	push	r30
    69cc:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_5])
    69ce:	80 91 cd 08 	lds	r24, 0x08CD
    69d2:	90 91 ce 08 	lds	r25, 0x08CE
    69d6:	89 2b       	or	r24, r25
    69d8:	29 f0       	breq	.+10     	; 0x69e4 <__vector_4+0x3c>
    intFunc[EXTERNAL_INT_5]();
    69da:	e0 91 cd 08 	lds	r30, 0x08CD
    69de:	f0 91 ce 08 	lds	r31, 0x08CE
    69e2:	19 95       	eicall
}
    69e4:	ff 91       	pop	r31
    69e6:	ef 91       	pop	r30
    69e8:	bf 91       	pop	r27
    69ea:	af 91       	pop	r26
    69ec:	9f 91       	pop	r25
    69ee:	8f 91       	pop	r24
    69f0:	7f 91       	pop	r23
    69f2:	6f 91       	pop	r22
    69f4:	5f 91       	pop	r21
    69f6:	4f 91       	pop	r20
    69f8:	3f 91       	pop	r19
    69fa:	2f 91       	pop	r18
    69fc:	0f 90       	pop	r0
    69fe:	0b be       	out	0x3b, r0	; 59
    6a00:	0f 90       	pop	r0
    6a02:	0f be       	out	0x3f, r0	; 63
    6a04:	0f 90       	pop	r0
    6a06:	1f 90       	pop	r1
    6a08:	18 95       	reti

00006a0a <__vector_5>:

ISR(INT4_vect) {
    6a0a:	1f 92       	push	r1
    6a0c:	0f 92       	push	r0
    6a0e:	0f b6       	in	r0, 0x3f	; 63
    6a10:	0f 92       	push	r0
    6a12:	11 24       	eor	r1, r1
    6a14:	0b b6       	in	r0, 0x3b	; 59
    6a16:	0f 92       	push	r0
    6a18:	2f 93       	push	r18
    6a1a:	3f 93       	push	r19
    6a1c:	4f 93       	push	r20
    6a1e:	5f 93       	push	r21
    6a20:	6f 93       	push	r22
    6a22:	7f 93       	push	r23
    6a24:	8f 93       	push	r24
    6a26:	9f 93       	push	r25
    6a28:	af 93       	push	r26
    6a2a:	bf 93       	push	r27
    6a2c:	ef 93       	push	r30
    6a2e:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
    6a30:	80 91 c3 08 	lds	r24, 0x08C3
    6a34:	90 91 c4 08 	lds	r25, 0x08C4
    6a38:	89 2b       	or	r24, r25
    6a3a:	29 f0       	breq	.+10     	; 0x6a46 <__vector_5+0x3c>
    intFunc[EXTERNAL_INT_0]();
    6a3c:	e0 91 c3 08 	lds	r30, 0x08C3
    6a40:	f0 91 c4 08 	lds	r31, 0x08C4
    6a44:	19 95       	eicall
}
    6a46:	ff 91       	pop	r31
    6a48:	ef 91       	pop	r30
    6a4a:	bf 91       	pop	r27
    6a4c:	af 91       	pop	r26
    6a4e:	9f 91       	pop	r25
    6a50:	8f 91       	pop	r24
    6a52:	7f 91       	pop	r23
    6a54:	6f 91       	pop	r22
    6a56:	5f 91       	pop	r21
    6a58:	4f 91       	pop	r20
    6a5a:	3f 91       	pop	r19
    6a5c:	2f 91       	pop	r18
    6a5e:	0f 90       	pop	r0
    6a60:	0b be       	out	0x3b, r0	; 59
    6a62:	0f 90       	pop	r0
    6a64:	0f be       	out	0x3f, r0	; 63
    6a66:	0f 90       	pop	r0
    6a68:	1f 90       	pop	r1
    6a6a:	18 95       	reti

00006a6c <__vector_6>:

ISR(INT5_vect) {
    6a6c:	1f 92       	push	r1
    6a6e:	0f 92       	push	r0
    6a70:	0f b6       	in	r0, 0x3f	; 63
    6a72:	0f 92       	push	r0
    6a74:	11 24       	eor	r1, r1
    6a76:	0b b6       	in	r0, 0x3b	; 59
    6a78:	0f 92       	push	r0
    6a7a:	2f 93       	push	r18
    6a7c:	3f 93       	push	r19
    6a7e:	4f 93       	push	r20
    6a80:	5f 93       	push	r21
    6a82:	6f 93       	push	r22
    6a84:	7f 93       	push	r23
    6a86:	8f 93       	push	r24
    6a88:	9f 93       	push	r25
    6a8a:	af 93       	push	r26
    6a8c:	bf 93       	push	r27
    6a8e:	ef 93       	push	r30
    6a90:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
    6a92:	80 91 c5 08 	lds	r24, 0x08C5
    6a96:	90 91 c6 08 	lds	r25, 0x08C6
    6a9a:	89 2b       	or	r24, r25
    6a9c:	29 f0       	breq	.+10     	; 0x6aa8 <__vector_6+0x3c>
    intFunc[EXTERNAL_INT_1]();
    6a9e:	e0 91 c5 08 	lds	r30, 0x08C5
    6aa2:	f0 91 c6 08 	lds	r31, 0x08C6
    6aa6:	19 95       	eicall
}
    6aa8:	ff 91       	pop	r31
    6aaa:	ef 91       	pop	r30
    6aac:	bf 91       	pop	r27
    6aae:	af 91       	pop	r26
    6ab0:	9f 91       	pop	r25
    6ab2:	8f 91       	pop	r24
    6ab4:	7f 91       	pop	r23
    6ab6:	6f 91       	pop	r22
    6ab8:	5f 91       	pop	r21
    6aba:	4f 91       	pop	r20
    6abc:	3f 91       	pop	r19
    6abe:	2f 91       	pop	r18
    6ac0:	0f 90       	pop	r0
    6ac2:	0b be       	out	0x3b, r0	; 59
    6ac4:	0f 90       	pop	r0
    6ac6:	0f be       	out	0x3f, r0	; 63
    6ac8:	0f 90       	pop	r0
    6aca:	1f 90       	pop	r1
    6acc:	18 95       	reti

00006ace <__vector_7>:

ISR(INT6_vect) {
    6ace:	1f 92       	push	r1
    6ad0:	0f 92       	push	r0
    6ad2:	0f b6       	in	r0, 0x3f	; 63
    6ad4:	0f 92       	push	r0
    6ad6:	11 24       	eor	r1, r1
    6ad8:	0b b6       	in	r0, 0x3b	; 59
    6ada:	0f 92       	push	r0
    6adc:	2f 93       	push	r18
    6ade:	3f 93       	push	r19
    6ae0:	4f 93       	push	r20
    6ae2:	5f 93       	push	r21
    6ae4:	6f 93       	push	r22
    6ae6:	7f 93       	push	r23
    6ae8:	8f 93       	push	r24
    6aea:	9f 93       	push	r25
    6aec:	af 93       	push	r26
    6aee:	bf 93       	push	r27
    6af0:	ef 93       	push	r30
    6af2:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_6])
    6af4:	80 91 cf 08 	lds	r24, 0x08CF
    6af8:	90 91 d0 08 	lds	r25, 0x08D0
    6afc:	89 2b       	or	r24, r25
    6afe:	29 f0       	breq	.+10     	; 0x6b0a <__vector_7+0x3c>
    intFunc[EXTERNAL_INT_6]();
    6b00:	e0 91 cf 08 	lds	r30, 0x08CF
    6b04:	f0 91 d0 08 	lds	r31, 0x08D0
    6b08:	19 95       	eicall
}
    6b0a:	ff 91       	pop	r31
    6b0c:	ef 91       	pop	r30
    6b0e:	bf 91       	pop	r27
    6b10:	af 91       	pop	r26
    6b12:	9f 91       	pop	r25
    6b14:	8f 91       	pop	r24
    6b16:	7f 91       	pop	r23
    6b18:	6f 91       	pop	r22
    6b1a:	5f 91       	pop	r21
    6b1c:	4f 91       	pop	r20
    6b1e:	3f 91       	pop	r19
    6b20:	2f 91       	pop	r18
    6b22:	0f 90       	pop	r0
    6b24:	0b be       	out	0x3b, r0	; 59
    6b26:	0f 90       	pop	r0
    6b28:	0f be       	out	0x3f, r0	; 63
    6b2a:	0f 90       	pop	r0
    6b2c:	1f 90       	pop	r1
    6b2e:	18 95       	reti

00006b30 <__vector_8>:

ISR(INT7_vect) {
    6b30:	1f 92       	push	r1
    6b32:	0f 92       	push	r0
    6b34:	0f b6       	in	r0, 0x3f	; 63
    6b36:	0f 92       	push	r0
    6b38:	11 24       	eor	r1, r1
    6b3a:	0b b6       	in	r0, 0x3b	; 59
    6b3c:	0f 92       	push	r0
    6b3e:	2f 93       	push	r18
    6b40:	3f 93       	push	r19
    6b42:	4f 93       	push	r20
    6b44:	5f 93       	push	r21
    6b46:	6f 93       	push	r22
    6b48:	7f 93       	push	r23
    6b4a:	8f 93       	push	r24
    6b4c:	9f 93       	push	r25
    6b4e:	af 93       	push	r26
    6b50:	bf 93       	push	r27
    6b52:	ef 93       	push	r30
    6b54:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_7])
    6b56:	80 91 d1 08 	lds	r24, 0x08D1
    6b5a:	90 91 d2 08 	lds	r25, 0x08D2
    6b5e:	89 2b       	or	r24, r25
    6b60:	29 f0       	breq	.+10     	; 0x6b6c <__vector_8+0x3c>
    intFunc[EXTERNAL_INT_7]();
    6b62:	e0 91 d1 08 	lds	r30, 0x08D1
    6b66:	f0 91 d2 08 	lds	r31, 0x08D2
    6b6a:	19 95       	eicall
}
    6b6c:	ff 91       	pop	r31
    6b6e:	ef 91       	pop	r30
    6b70:	bf 91       	pop	r27
    6b72:	af 91       	pop	r26
    6b74:	9f 91       	pop	r25
    6b76:	8f 91       	pop	r24
    6b78:	7f 91       	pop	r23
    6b7a:	6f 91       	pop	r22
    6b7c:	5f 91       	pop	r21
    6b7e:	4f 91       	pop	r20
    6b80:	3f 91       	pop	r19
    6b82:	2f 91       	pop	r18
    6b84:	0f 90       	pop	r0
    6b86:	0b be       	out	0x3b, r0	; 59
    6b88:	0f 90       	pop	r0
    6b8a:	0f be       	out	0x3f, r0	; 63
    6b8c:	0f 90       	pop	r0
    6b8e:	1f 90       	pop	r1
    6b90:	18 95       	reti

00006b92 <__vector_23>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    6b92:	1f 92       	push	r1
    6b94:	0f 92       	push	r0
    6b96:	0f b6       	in	r0, 0x3f	; 63
    6b98:	0f 92       	push	r0
    6b9a:	11 24       	eor	r1, r1
    6b9c:	2f 93       	push	r18
    6b9e:	3f 93       	push	r19
    6ba0:	8f 93       	push	r24
    6ba2:	9f 93       	push	r25
    6ba4:	af 93       	push	r26
    6ba6:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    6ba8:	80 91 d4 08 	lds	r24, 0x08D4
    6bac:	90 91 d5 08 	lds	r25, 0x08D5
    6bb0:	a0 91 d6 08 	lds	r26, 0x08D6
    6bb4:	b0 91 d7 08 	lds	r27, 0x08D7
	unsigned char f = timer0_fract;
    6bb8:	30 91 d3 08 	lds	r19, 0x08D3

	m += MILLIS_INC;
	f += FRACT_INC;
    6bbc:	23 e0       	ldi	r18, 0x03	; 3
    6bbe:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    6bc0:	2d 37       	cpi	r18, 0x7D	; 125
    6bc2:	20 f4       	brcc	.+8      	; 0x6bcc <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    6bc4:	01 96       	adiw	r24, 0x01	; 1
    6bc6:	a1 1d       	adc	r26, r1
    6bc8:	b1 1d       	adc	r27, r1
    6bca:	05 c0       	rjmp	.+10     	; 0x6bd6 <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    6bcc:	26 e8       	ldi	r18, 0x86	; 134
    6bce:	23 0f       	add	r18, r19
		m += 1;
    6bd0:	02 96       	adiw	r24, 0x02	; 2
    6bd2:	a1 1d       	adc	r26, r1
    6bd4:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    6bd6:	20 93 d3 08 	sts	0x08D3, r18
	timer0_millis = m;
    6bda:	80 93 d4 08 	sts	0x08D4, r24
    6bde:	90 93 d5 08 	sts	0x08D5, r25
    6be2:	a0 93 d6 08 	sts	0x08D6, r26
    6be6:	b0 93 d7 08 	sts	0x08D7, r27
	timer0_overflow_count++;
    6bea:	80 91 d8 08 	lds	r24, 0x08D8
    6bee:	90 91 d9 08 	lds	r25, 0x08D9
    6bf2:	a0 91 da 08 	lds	r26, 0x08DA
    6bf6:	b0 91 db 08 	lds	r27, 0x08DB
    6bfa:	01 96       	adiw	r24, 0x01	; 1
    6bfc:	a1 1d       	adc	r26, r1
    6bfe:	b1 1d       	adc	r27, r1
    6c00:	80 93 d8 08 	sts	0x08D8, r24
    6c04:	90 93 d9 08 	sts	0x08D9, r25
    6c08:	a0 93 da 08 	sts	0x08DA, r26
    6c0c:	b0 93 db 08 	sts	0x08DB, r27
}
    6c10:	bf 91       	pop	r27
    6c12:	af 91       	pop	r26
    6c14:	9f 91       	pop	r25
    6c16:	8f 91       	pop	r24
    6c18:	3f 91       	pop	r19
    6c1a:	2f 91       	pop	r18
    6c1c:	0f 90       	pop	r0
    6c1e:	0f be       	out	0x3f, r0	; 63
    6c20:	0f 90       	pop	r0
    6c22:	1f 90       	pop	r1
    6c24:	18 95       	reti

00006c26 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    6c26:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    6c28:	f8 94       	cli
	m = timer0_millis;
    6c2a:	60 91 d4 08 	lds	r22, 0x08D4
    6c2e:	70 91 d5 08 	lds	r23, 0x08D5
    6c32:	80 91 d6 08 	lds	r24, 0x08D6
    6c36:	90 91 d7 08 	lds	r25, 0x08D7
	SREG = oldSREG;
    6c3a:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    6c3c:	08 95       	ret

00006c3e <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    6c3e:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    6c40:	f8 94       	cli
	m = timer0_overflow_count;
    6c42:	80 91 d8 08 	lds	r24, 0x08D8
    6c46:	90 91 d9 08 	lds	r25, 0x08D9
    6c4a:	a0 91 da 08 	lds	r26, 0x08DA
    6c4e:	b0 91 db 08 	lds	r27, 0x08DB
#if defined(TCNT0)
	t = TCNT0;
    6c52:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    6c54:	a8 9b       	sbis	0x15, 0	; 21
    6c56:	05 c0       	rjmp	.+10     	; 0x6c62 <micros+0x24>
    6c58:	2f 3f       	cpi	r18, 0xFF	; 255
    6c5a:	19 f0       	breq	.+6      	; 0x6c62 <micros+0x24>
		m++;
    6c5c:	01 96       	adiw	r24, 0x01	; 1
    6c5e:	a1 1d       	adc	r26, r1
    6c60:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    6c62:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    6c64:	ba 2f       	mov	r27, r26
    6c66:	a9 2f       	mov	r26, r25
    6c68:	98 2f       	mov	r25, r24
    6c6a:	88 27       	eor	r24, r24
    6c6c:	82 0f       	add	r24, r18
    6c6e:	91 1d       	adc	r25, r1
    6c70:	a1 1d       	adc	r26, r1
    6c72:	b1 1d       	adc	r27, r1
    6c74:	bc 01       	movw	r22, r24
    6c76:	cd 01       	movw	r24, r26
    6c78:	66 0f       	add	r22, r22
    6c7a:	77 1f       	adc	r23, r23
    6c7c:	88 1f       	adc	r24, r24
    6c7e:	99 1f       	adc	r25, r25
    6c80:	66 0f       	add	r22, r22
    6c82:	77 1f       	adc	r23, r23
    6c84:	88 1f       	adc	r24, r24
    6c86:	99 1f       	adc	r25, r25
}
    6c88:	08 95       	ret

00006c8a <delay>:

void delay(unsigned long ms)
{
    6c8a:	cf 92       	push	r12
    6c8c:	df 92       	push	r13
    6c8e:	ef 92       	push	r14
    6c90:	ff 92       	push	r15
    6c92:	cf 93       	push	r28
    6c94:	df 93       	push	r29
    6c96:	6b 01       	movw	r12, r22
    6c98:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
    6c9a:	d1 df       	rcall	.-94     	; 0x6c3e <micros>
    6c9c:	eb 01       	movw	r28, r22

	while (ms > 0) {
    6c9e:	c1 14       	cp	r12, r1
    6ca0:	d1 04       	cpc	r13, r1
    6ca2:	e1 04       	cpc	r14, r1
    6ca4:	f1 04       	cpc	r15, r1
    6ca6:	99 f0       	breq	.+38     	; 0x6cce <delay+0x44>
		yield();
    6ca8:	8b da       	rcall	.-2794   	; 0x61c0 <yield>
		if (((uint16_t)micros() - start) >= 1000) {
    6caa:	c9 df       	rcall	.-110    	; 0x6c3e <micros>
    6cac:	6c 1b       	sub	r22, r28
    6cae:	7d 0b       	sbc	r23, r29
    6cb0:	68 3e       	cpi	r22, 0xE8	; 232
    6cb2:	73 40       	sbci	r23, 0x03	; 3
    6cb4:	38 f0       	brcs	.+14     	; 0x6cc4 <delay+0x3a>
			ms--;
    6cb6:	81 e0       	ldi	r24, 0x01	; 1
    6cb8:	c8 1a       	sub	r12, r24
    6cba:	d1 08       	sbc	r13, r1
    6cbc:	e1 08       	sbc	r14, r1
    6cbe:	f1 08       	sbc	r15, r1
			start += 1000;
    6cc0:	c8 51       	subi	r28, 0x18	; 24
    6cc2:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    6cc4:	c1 14       	cp	r12, r1
    6cc6:	d1 04       	cpc	r13, r1
    6cc8:	e1 04       	cpc	r14, r1
    6cca:	f1 04       	cpc	r15, r1
    6ccc:	69 f7       	brne	.-38     	; 0x6ca8 <delay+0x1e>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    6cce:	df 91       	pop	r29
    6cd0:	cf 91       	pop	r28
    6cd2:	ff 90       	pop	r15
    6cd4:	ef 90       	pop	r14
    6cd6:	df 90       	pop	r13
    6cd8:	cf 90       	pop	r12
    6cda:	08 95       	ret

00006cdc <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    6cdc:	82 30       	cpi	r24, 0x02	; 2
    6cde:	91 05       	cpc	r25, r1
    6ce0:	38 f0       	brcs	.+14     	; 0x6cf0 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    6ce2:	88 0f       	add	r24, r24
    6ce4:	99 1f       	adc	r25, r25
    6ce6:	88 0f       	add	r24, r24
    6ce8:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    6cea:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    6cec:	01 97       	sbiw	r24, 0x01	; 1
    6cee:	f1 f7       	brne	.-4      	; 0x6cec <delayMicroseconds+0x10>
    6cf0:	08 95       	ret

00006cf2 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    6cf2:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    6cf4:	84 b5       	in	r24, 0x24	; 36
    6cf6:	82 60       	ori	r24, 0x02	; 2
    6cf8:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    6cfa:	84 b5       	in	r24, 0x24	; 36
    6cfc:	81 60       	ori	r24, 0x01	; 1
    6cfe:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    6d00:	85 b5       	in	r24, 0x25	; 37
    6d02:	82 60       	ori	r24, 0x02	; 2
    6d04:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    6d06:	85 b5       	in	r24, 0x25	; 37
    6d08:	81 60       	ori	r24, 0x01	; 1
    6d0a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    6d0c:	ee e6       	ldi	r30, 0x6E	; 110
    6d0e:	f0 e0       	ldi	r31, 0x00	; 0
    6d10:	80 81       	ld	r24, Z
    6d12:	81 60       	ori	r24, 0x01	; 1
    6d14:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    6d16:	e1 e8       	ldi	r30, 0x81	; 129
    6d18:	f0 e0       	ldi	r31, 0x00	; 0
    6d1a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    6d1c:	80 81       	ld	r24, Z
    6d1e:	82 60       	ori	r24, 0x02	; 2
    6d20:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    6d22:	80 81       	ld	r24, Z
    6d24:	81 60       	ori	r24, 0x01	; 1
    6d26:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    6d28:	e0 e8       	ldi	r30, 0x80	; 128
    6d2a:	f0 e0       	ldi	r31, 0x00	; 0
    6d2c:	80 81       	ld	r24, Z
    6d2e:	81 60       	ori	r24, 0x01	; 1
    6d30:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    6d32:	e1 eb       	ldi	r30, 0xB1	; 177
    6d34:	f0 e0       	ldi	r31, 0x00	; 0
    6d36:	80 81       	ld	r24, Z
    6d38:	84 60       	ori	r24, 0x04	; 4
    6d3a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    6d3c:	e0 eb       	ldi	r30, 0xB0	; 176
    6d3e:	f0 e0       	ldi	r31, 0x00	; 0
    6d40:	80 81       	ld	r24, Z
    6d42:	81 60       	ori	r24, 0x01	; 1
    6d44:	80 83       	st	Z, r24
#else
	#warning Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    6d46:	e1 e9       	ldi	r30, 0x91	; 145
    6d48:	f0 e0       	ldi	r31, 0x00	; 0
    6d4a:	80 81       	ld	r24, Z
    6d4c:	82 60       	ori	r24, 0x02	; 2
    6d4e:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    6d50:	80 81       	ld	r24, Z
    6d52:	81 60       	ori	r24, 0x01	; 1
    6d54:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    6d56:	e0 e9       	ldi	r30, 0x90	; 144
    6d58:	f0 e0       	ldi	r31, 0x00	; 0
    6d5a:	80 81       	ld	r24, Z
    6d5c:	81 60       	ori	r24, 0x01	; 1
    6d5e:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    6d60:	e1 ea       	ldi	r30, 0xA1	; 161
    6d62:	f0 e0       	ldi	r31, 0x00	; 0
    6d64:	80 81       	ld	r24, Z
    6d66:	82 60       	ori	r24, 0x02	; 2
    6d68:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    6d6a:	80 81       	ld	r24, Z
    6d6c:	81 60       	ori	r24, 0x01	; 1
    6d6e:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    6d70:	e0 ea       	ldi	r30, 0xA0	; 160
    6d72:	f0 e0       	ldi	r31, 0x00	; 0
    6d74:	80 81       	ld	r24, Z
    6d76:	81 60       	ori	r24, 0x01	; 1
    6d78:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    6d7a:	e1 e2       	ldi	r30, 0x21	; 33
    6d7c:	f1 e0       	ldi	r31, 0x01	; 1
    6d7e:	80 81       	ld	r24, Z
    6d80:	82 60       	ori	r24, 0x02	; 2
    6d82:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    6d84:	80 81       	ld	r24, Z
    6d86:	81 60       	ori	r24, 0x01	; 1
    6d88:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    6d8a:	e0 e2       	ldi	r30, 0x20	; 32
    6d8c:	f1 e0       	ldi	r31, 0x01	; 1
    6d8e:	80 81       	ld	r24, Z
    6d90:	81 60       	ori	r24, 0x01	; 1
    6d92:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    6d94:	ea e7       	ldi	r30, 0x7A	; 122
    6d96:	f0 e0       	ldi	r31, 0x00	; 0
    6d98:	80 81       	ld	r24, Z
    6d9a:	84 60       	ori	r24, 0x04	; 4
    6d9c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    6d9e:	80 81       	ld	r24, Z
    6da0:	82 60       	ori	r24, 0x02	; 2
    6da2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    6da4:	80 81       	ld	r24, Z
    6da6:	81 60       	ori	r24, 0x01	; 1
    6da8:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    6daa:	80 81       	ld	r24, Z
    6dac:	80 68       	ori	r24, 0x80	; 128
    6dae:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    6db0:	10 92 c1 00 	sts	0x00C1, r1
    6db4:	08 95       	ret

00006db6 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    6db6:	90 e0       	ldi	r25, 0x00	; 0
    6db8:	fc 01       	movw	r30, r24
    6dba:	31 97       	sbiw	r30, 0x01	; 1
    6dbc:	e2 31       	cpi	r30, 0x12	; 18
    6dbe:	f1 05       	cpc	r31, r1
    6dc0:	08 f0       	brcs	.+2      	; 0x6dc4 <turnOffPWM+0xe>
    6dc2:	60 c0       	rjmp	.+192    	; 0x6e84 <turnOffPWM+0xce>
    6dc4:	88 27       	eor	r24, r24
    6dc6:	e5 5b       	subi	r30, 0xB5	; 181
    6dc8:	fe 4f       	sbci	r31, 0xFE	; 254
    6dca:	8f 4f       	sbci	r24, 0xFF	; 255
    6dcc:	81 c4       	rjmp	.+2306   	; 0x76d0 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    6dce:	e0 e8       	ldi	r30, 0x80	; 128
    6dd0:	f0 e0       	ldi	r31, 0x00	; 0
    6dd2:	80 81       	ld	r24, Z
    6dd4:	8f 77       	andi	r24, 0x7F	; 127
    6dd6:	80 83       	st	Z, r24
    6dd8:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    6dda:	e0 e8       	ldi	r30, 0x80	; 128
    6ddc:	f0 e0       	ldi	r31, 0x00	; 0
    6dde:	80 81       	ld	r24, Z
    6de0:	8f 7d       	andi	r24, 0xDF	; 223
    6de2:	80 83       	st	Z, r24
    6de4:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    6de6:	e0 e8       	ldi	r30, 0x80	; 128
    6de8:	f0 e0       	ldi	r31, 0x00	; 0
    6dea:	80 81       	ld	r24, Z
    6dec:	87 7f       	andi	r24, 0xF7	; 247
    6dee:	80 83       	st	Z, r24
    6df0:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    6df2:	84 b5       	in	r24, 0x24	; 36
    6df4:	8f 77       	andi	r24, 0x7F	; 127
    6df6:	84 bd       	out	0x24, r24	; 36
    6df8:	08 95       	ret
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    6dfa:	84 b5       	in	r24, 0x24	; 36
    6dfc:	8f 7d       	andi	r24, 0xDF	; 223
    6dfe:	84 bd       	out	0x24, r24	; 36
    6e00:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    6e02:	e0 eb       	ldi	r30, 0xB0	; 176
    6e04:	f0 e0       	ldi	r31, 0x00	; 0
    6e06:	80 81       	ld	r24, Z
    6e08:	8f 77       	andi	r24, 0x7F	; 127
    6e0a:	80 83       	st	Z, r24
    6e0c:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    6e0e:	e0 eb       	ldi	r30, 0xB0	; 176
    6e10:	f0 e0       	ldi	r31, 0x00	; 0
    6e12:	80 81       	ld	r24, Z
    6e14:	8f 7d       	andi	r24, 0xDF	; 223
    6e16:	80 83       	st	Z, r24
    6e18:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    6e1a:	e0 e9       	ldi	r30, 0x90	; 144
    6e1c:	f0 e0       	ldi	r31, 0x00	; 0
    6e1e:	80 81       	ld	r24, Z
    6e20:	8f 77       	andi	r24, 0x7F	; 127
    6e22:	80 83       	st	Z, r24
    6e24:	08 95       	ret
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    6e26:	e0 e9       	ldi	r30, 0x90	; 144
    6e28:	f0 e0       	ldi	r31, 0x00	; 0
    6e2a:	80 81       	ld	r24, Z
    6e2c:	8f 7d       	andi	r24, 0xDF	; 223
    6e2e:	80 83       	st	Z, r24
    6e30:	08 95       	ret
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    6e32:	e0 e9       	ldi	r30, 0x90	; 144
    6e34:	f0 e0       	ldi	r31, 0x00	; 0
    6e36:	80 81       	ld	r24, Z
    6e38:	87 7f       	andi	r24, 0xF7	; 247
    6e3a:	80 83       	st	Z, r24
    6e3c:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    6e3e:	e0 ea       	ldi	r30, 0xA0	; 160
    6e40:	f0 e0       	ldi	r31, 0x00	; 0
    6e42:	80 81       	ld	r24, Z
    6e44:	8f 77       	andi	r24, 0x7F	; 127
    6e46:	80 83       	st	Z, r24
    6e48:	08 95       	ret
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    6e4a:	e0 ea       	ldi	r30, 0xA0	; 160
    6e4c:	f0 e0       	ldi	r31, 0x00	; 0
    6e4e:	80 81       	ld	r24, Z
    6e50:	8f 7d       	andi	r24, 0xDF	; 223
    6e52:	80 83       	st	Z, r24
    6e54:	08 95       	ret
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    6e56:	e0 ea       	ldi	r30, 0xA0	; 160
    6e58:	f0 e0       	ldi	r31, 0x00	; 0
    6e5a:	80 81       	ld	r24, Z
    6e5c:	87 7f       	andi	r24, 0xF7	; 247
    6e5e:	80 83       	st	Z, r24
    6e60:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    6e62:	e0 e2       	ldi	r30, 0x20	; 32
    6e64:	f1 e0       	ldi	r31, 0x01	; 1
    6e66:	80 81       	ld	r24, Z
    6e68:	8f 77       	andi	r24, 0x7F	; 127
    6e6a:	80 83       	st	Z, r24
    6e6c:	08 95       	ret
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    6e6e:	e0 e2       	ldi	r30, 0x20	; 32
    6e70:	f1 e0       	ldi	r31, 0x01	; 1
    6e72:	80 81       	ld	r24, Z
    6e74:	8f 7d       	andi	r24, 0xDF	; 223
    6e76:	80 83       	st	Z, r24
    6e78:	08 95       	ret
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    6e7a:	e0 e2       	ldi	r30, 0x20	; 32
    6e7c:	f1 e0       	ldi	r31, 0x01	; 1
    6e7e:	80 81       	ld	r24, Z
    6e80:	87 7f       	andi	r24, 0xF7	; 247
    6e82:	80 83       	st	Z, r24
    6e84:	08 95       	ret

00006e86 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    6e86:	cf 93       	push	r28
    6e88:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    6e8a:	90 e0       	ldi	r25, 0x00	; 0
    6e8c:	fc 01       	movw	r30, r24
    6e8e:	ef 5f       	subi	r30, 0xFF	; 255
    6e90:	fc 4f       	sbci	r31, 0xFC	; 252
    6e92:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    6e94:	fc 01       	movw	r30, r24
    6e96:	e9 5b       	subi	r30, 0xB9	; 185
    6e98:	fc 4f       	sbci	r31, 0xFC	; 252
    6e9a:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    6e9c:	88 23       	and	r24, r24
    6e9e:	79 f1       	breq	.+94     	; 0x6efe <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    6ea0:	90 e0       	ldi	r25, 0x00	; 0
    6ea2:	88 0f       	add	r24, r24
    6ea4:	99 1f       	adc	r25, r25
    6ea6:	fc 01       	movw	r30, r24
    6ea8:	ef 53       	subi	r30, 0x3F	; 63
    6eaa:	fc 4f       	sbci	r31, 0xFC	; 252
    6eac:	a5 91       	lpm	r26, Z+
    6eae:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    6eb0:	fc 01       	movw	r30, r24
    6eb2:	e9 55       	subi	r30, 0x59	; 89
    6eb4:	fc 4f       	sbci	r31, 0xFC	; 252
    6eb6:	c5 91       	lpm	r28, Z+
    6eb8:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
    6eba:	61 11       	cpse	r22, r1
    6ebc:	0c c0       	rjmp	.+24     	; 0x6ed6 <pinMode+0x50>
		uint8_t oldSREG = SREG;
    6ebe:	9f b7       	in	r25, 0x3f	; 63
                cli();
    6ec0:	f8 94       	cli
		*reg &= ~bit;
    6ec2:	8c 91       	ld	r24, X
    6ec4:	e2 2f       	mov	r30, r18
    6ec6:	e0 95       	com	r30
    6ec8:	8e 23       	and	r24, r30
    6eca:	8c 93       	st	X, r24
		*out &= ~bit;
    6ecc:	28 81       	ld	r18, Y
    6ece:	e2 23       	and	r30, r18
    6ed0:	e8 83       	st	Y, r30
		SREG = oldSREG;
    6ed2:	9f bf       	out	0x3f, r25	; 63
    6ed4:	14 c0       	rjmp	.+40     	; 0x6efe <pinMode+0x78>
	} else if (mode == INPUT_PULLUP) {
    6ed6:	62 30       	cpi	r22, 0x02	; 2
    6ed8:	61 f4       	brne	.+24     	; 0x6ef2 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    6eda:	9f b7       	in	r25, 0x3f	; 63
                cli();
    6edc:	f8 94       	cli
		*reg &= ~bit;
    6ede:	3c 91       	ld	r19, X
    6ee0:	82 2f       	mov	r24, r18
    6ee2:	80 95       	com	r24
    6ee4:	83 23       	and	r24, r19
    6ee6:	8c 93       	st	X, r24
		*out |= bit;
    6ee8:	e8 81       	ld	r30, Y
    6eea:	e2 2b       	or	r30, r18
    6eec:	e8 83       	st	Y, r30
		SREG = oldSREG;
    6eee:	9f bf       	out	0x3f, r25	; 63
    6ef0:	06 c0       	rjmp	.+12     	; 0x6efe <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    6ef2:	8f b7       	in	r24, 0x3f	; 63
                cli();
    6ef4:	f8 94       	cli
		*reg |= bit;
    6ef6:	ec 91       	ld	r30, X
    6ef8:	e2 2b       	or	r30, r18
    6efa:	ec 93       	st	X, r30
		SREG = oldSREG;
    6efc:	8f bf       	out	0x3f, r24	; 63
	}
}
    6efe:	df 91       	pop	r29
    6f00:	cf 91       	pop	r28
    6f02:	08 95       	ret

00006f04 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    6f04:	1f 93       	push	r17
    6f06:	cf 93       	push	r28
    6f08:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    6f0a:	28 2f       	mov	r18, r24
    6f0c:	30 e0       	ldi	r19, 0x00	; 0
    6f0e:	f9 01       	movw	r30, r18
    6f10:	e5 54       	subi	r30, 0x45	; 69
    6f12:	fd 4f       	sbci	r31, 0xFD	; 253
    6f14:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    6f16:	f9 01       	movw	r30, r18
    6f18:	ef 5f       	subi	r30, 0xFF	; 255
    6f1a:	fc 4f       	sbci	r31, 0xFC	; 252
    6f1c:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
    6f1e:	f9 01       	movw	r30, r18
    6f20:	e9 5b       	subi	r30, 0xB9	; 185
    6f22:	fc 4f       	sbci	r31, 0xFC	; 252
    6f24:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    6f26:	cc 23       	and	r28, r28
    6f28:	c9 f0       	breq	.+50     	; 0x6f5c <digitalWrite+0x58>
    6f2a:	d6 2f       	mov	r29, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    6f2c:	81 11       	cpse	r24, r1
    6f2e:	43 df       	rcall	.-378    	; 0x6db6 <turnOffPWM>

	out = portOutputRegister(port);
    6f30:	ec 2f       	mov	r30, r28
    6f32:	f0 e0       	ldi	r31, 0x00	; 0
    6f34:	ee 0f       	add	r30, r30
    6f36:	ff 1f       	adc	r31, r31
    6f38:	e9 55       	subi	r30, 0x59	; 89
    6f3a:	fc 4f       	sbci	r31, 0xFC	; 252
    6f3c:	a5 91       	lpm	r26, Z+
    6f3e:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    6f40:	8f b7       	in	r24, 0x3f	; 63
	cli();
    6f42:	f8 94       	cli

	if (val == LOW) {
    6f44:	d1 11       	cpse	r29, r1
    6f46:	06 c0       	rjmp	.+12     	; 0x6f54 <digitalWrite+0x50>
		*out &= ~bit;
    6f48:	9c 91       	ld	r25, X
    6f4a:	e1 2f       	mov	r30, r17
    6f4c:	e0 95       	com	r30
    6f4e:	e9 23       	and	r30, r25
    6f50:	ec 93       	st	X, r30
    6f52:	03 c0       	rjmp	.+6      	; 0x6f5a <digitalWrite+0x56>
	} else {
		*out |= bit;
    6f54:	ec 91       	ld	r30, X
    6f56:	e1 2b       	or	r30, r17
    6f58:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    6f5a:	8f bf       	out	0x3f, r24	; 63
}
    6f5c:	df 91       	pop	r29
    6f5e:	cf 91       	pop	r28
    6f60:	1f 91       	pop	r17
    6f62:	08 95       	ret

00006f64 <digitalRead>:

int digitalRead(uint8_t pin)
{
    6f64:	cf 93       	push	r28
    6f66:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    6f68:	28 2f       	mov	r18, r24
    6f6a:	30 e0       	ldi	r19, 0x00	; 0
    6f6c:	f9 01       	movw	r30, r18
    6f6e:	e5 54       	subi	r30, 0x45	; 69
    6f70:	fd 4f       	sbci	r31, 0xFD	; 253
    6f72:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    6f74:	f9 01       	movw	r30, r18
    6f76:	ef 5f       	subi	r30, 0xFF	; 255
    6f78:	fc 4f       	sbci	r31, 0xFC	; 252
    6f7a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    6f7c:	f9 01       	movw	r30, r18
    6f7e:	e9 5b       	subi	r30, 0xB9	; 185
    6f80:	fc 4f       	sbci	r31, 0xFC	; 252
    6f82:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    6f84:	cc 23       	and	r28, r28
    6f86:	89 f0       	breq	.+34     	; 0x6faa <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    6f88:	81 11       	cpse	r24, r1
    6f8a:	15 df       	rcall	.-470    	; 0x6db6 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    6f8c:	ec 2f       	mov	r30, r28
    6f8e:	f0 e0       	ldi	r31, 0x00	; 0
    6f90:	ee 0f       	add	r30, r30
    6f92:	ff 1f       	adc	r31, r31
    6f94:	e3 57       	subi	r30, 0x73	; 115
    6f96:	fc 4f       	sbci	r31, 0xFC	; 252
    6f98:	a5 91       	lpm	r26, Z+
    6f9a:	b4 91       	lpm	r27, Z
    6f9c:	ec 91       	ld	r30, X
    6f9e:	ed 23       	and	r30, r29
    6fa0:	81 e0       	ldi	r24, 0x01	; 1
    6fa2:	90 e0       	ldi	r25, 0x00	; 0
    6fa4:	21 f4       	brne	.+8      	; 0x6fae <digitalRead+0x4a>
    6fa6:	80 e0       	ldi	r24, 0x00	; 0
    6fa8:	02 c0       	rjmp	.+4      	; 0x6fae <digitalRead+0x4a>
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    6faa:	80 e0       	ldi	r24, 0x00	; 0
    6fac:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    6fae:	df 91       	pop	r29
    6fb0:	cf 91       	pop	r28
    6fb2:	08 95       	ret

00006fb4 <_ZN6StringD1Ev>:
StringSumHelper & operator + (const StringSumHelper &lhs, const __FlashStringHelper *rhs)
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs))	a.invalidate();
	return a;
}
    6fb4:	fc 01       	movw	r30, r24
    6fb6:	80 81       	ld	r24, Z
    6fb8:	91 81       	ldd	r25, Z+1	; 0x01
    6fba:	3b c4       	rjmp	.+2166   	; 0x7832 <free>
    6fbc:	08 95       	ret

00006fbe <_ZN6String10invalidateEv>:
    6fbe:	cf 93       	push	r28
    6fc0:	df 93       	push	r29
    6fc2:	ec 01       	movw	r28, r24
    6fc4:	88 81       	ld	r24, Y
    6fc6:	99 81       	ldd	r25, Y+1	; 0x01
    6fc8:	00 97       	sbiw	r24, 0x00	; 0
    6fca:	09 f0       	breq	.+2      	; 0x6fce <_ZN6String10invalidateEv+0x10>
    6fcc:	32 d4       	rcall	.+2148   	; 0x7832 <free>
    6fce:	19 82       	std	Y+1, r1	; 0x01
    6fd0:	18 82       	st	Y, r1
    6fd2:	1d 82       	std	Y+5, r1	; 0x05
    6fd4:	1c 82       	std	Y+4, r1	; 0x04
    6fd6:	1b 82       	std	Y+3, r1	; 0x03
    6fd8:	1a 82       	std	Y+2, r1	; 0x02
    6fda:	df 91       	pop	r29
    6fdc:	cf 91       	pop	r28
    6fde:	08 95       	ret

00006fe0 <_ZN6String12changeBufferEj>:
    6fe0:	0f 93       	push	r16
    6fe2:	1f 93       	push	r17
    6fe4:	cf 93       	push	r28
    6fe6:	df 93       	push	r29
    6fe8:	ec 01       	movw	r28, r24
    6fea:	8b 01       	movw	r16, r22
    6fec:	6f 5f       	subi	r22, 0xFF	; 255
    6fee:	7f 4f       	sbci	r23, 0xFF	; 255
    6ff0:	88 81       	ld	r24, Y
    6ff2:	99 81       	ldd	r25, Y+1	; 0x01
    6ff4:	b6 d4       	rcall	.+2412   	; 0x7962 <realloc>
    6ff6:	00 97       	sbiw	r24, 0x00	; 0
    6ff8:	31 f0       	breq	.+12     	; 0x7006 <_ZN6String12changeBufferEj+0x26>
    6ffa:	99 83       	std	Y+1, r25	; 0x01
    6ffc:	88 83       	st	Y, r24
    6ffe:	1b 83       	std	Y+3, r17	; 0x03
    7000:	0a 83       	std	Y+2, r16	; 0x02
    7002:	81 e0       	ldi	r24, 0x01	; 1
    7004:	01 c0       	rjmp	.+2      	; 0x7008 <_ZN6String12changeBufferEj+0x28>
    7006:	80 e0       	ldi	r24, 0x00	; 0
    7008:	df 91       	pop	r29
    700a:	cf 91       	pop	r28
    700c:	1f 91       	pop	r17
    700e:	0f 91       	pop	r16
    7010:	08 95       	ret

00007012 <_ZN6String7reserveEj>:
    7012:	cf 93       	push	r28
    7014:	df 93       	push	r29
    7016:	fc 01       	movw	r30, r24
    7018:	20 81       	ld	r18, Z
    701a:	31 81       	ldd	r19, Z+1	; 0x01
    701c:	23 2b       	or	r18, r19
    701e:	29 f0       	breq	.+10     	; 0x702a <_ZN6String7reserveEj+0x18>
    7020:	22 81       	ldd	r18, Z+2	; 0x02
    7022:	33 81       	ldd	r19, Z+3	; 0x03
    7024:	26 17       	cp	r18, r22
    7026:	37 07       	cpc	r19, r23
    7028:	68 f4       	brcc	.+26     	; 0x7044 <_ZN6String7reserveEj+0x32>
    702a:	ec 01       	movw	r28, r24
    702c:	d9 df       	rcall	.-78     	; 0x6fe0 <_ZN6String12changeBufferEj>
    702e:	88 23       	and	r24, r24
    7030:	61 f0       	breq	.+24     	; 0x704a <_ZN6String7reserveEj+0x38>
    7032:	8c 81       	ldd	r24, Y+4	; 0x04
    7034:	9d 81       	ldd	r25, Y+5	; 0x05
    7036:	89 2b       	or	r24, r25
    7038:	39 f4       	brne	.+14     	; 0x7048 <_ZN6String7reserveEj+0x36>
    703a:	e8 81       	ld	r30, Y
    703c:	f9 81       	ldd	r31, Y+1	; 0x01
    703e:	10 82       	st	Z, r1
    7040:	81 e0       	ldi	r24, 0x01	; 1
    7042:	03 c0       	rjmp	.+6      	; 0x704a <_ZN6String7reserveEj+0x38>
    7044:	81 e0       	ldi	r24, 0x01	; 1
    7046:	01 c0       	rjmp	.+2      	; 0x704a <_ZN6String7reserveEj+0x38>
    7048:	81 e0       	ldi	r24, 0x01	; 1
    704a:	df 91       	pop	r29
    704c:	cf 91       	pop	r28
    704e:	08 95       	ret

00007050 <_ZN6String4copyEPKcj>:
    7050:	ef 92       	push	r14
    7052:	ff 92       	push	r15
    7054:	0f 93       	push	r16
    7056:	1f 93       	push	r17
    7058:	cf 93       	push	r28
    705a:	df 93       	push	r29
    705c:	ec 01       	movw	r28, r24
    705e:	7b 01       	movw	r14, r22
    7060:	8a 01       	movw	r16, r20
    7062:	ba 01       	movw	r22, r20
    7064:	d6 df       	rcall	.-84     	; 0x7012 <_ZN6String7reserveEj>
    7066:	81 11       	cpse	r24, r1
    7068:	03 c0       	rjmp	.+6      	; 0x7070 <_ZN6String4copyEPKcj+0x20>
    706a:	ce 01       	movw	r24, r28
    706c:	a8 df       	rcall	.-176    	; 0x6fbe <_ZN6String10invalidateEv>
    706e:	06 c0       	rjmp	.+12     	; 0x707c <_ZN6String4copyEPKcj+0x2c>
    7070:	1d 83       	std	Y+5, r17	; 0x05
    7072:	0c 83       	std	Y+4, r16	; 0x04
    7074:	b7 01       	movw	r22, r14
    7076:	88 81       	ld	r24, Y
    7078:	99 81       	ldd	r25, Y+1	; 0x01
    707a:	6d d5       	rcall	.+2778   	; 0x7b56 <strcpy>
    707c:	ce 01       	movw	r24, r28
    707e:	df 91       	pop	r29
    7080:	cf 91       	pop	r28
    7082:	1f 91       	pop	r17
    7084:	0f 91       	pop	r16
    7086:	ff 90       	pop	r15
    7088:	ef 90       	pop	r14
    708a:	08 95       	ret

0000708c <_ZN6StringC1EPKc>:
    708c:	fc 01       	movw	r30, r24
    708e:	11 82       	std	Z+1, r1	; 0x01
    7090:	10 82       	st	Z, r1
    7092:	13 82       	std	Z+3, r1	; 0x03
    7094:	12 82       	std	Z+2, r1	; 0x02
    7096:	15 82       	std	Z+5, r1	; 0x05
    7098:	14 82       	std	Z+4, r1	; 0x04
    709a:	61 15       	cp	r22, r1
    709c:	71 05       	cpc	r23, r1
    709e:	49 f0       	breq	.+18     	; 0x70b2 <_ZN6StringC1EPKc+0x26>
    70a0:	fb 01       	movw	r30, r22
    70a2:	01 90       	ld	r0, Z+
    70a4:	00 20       	and	r0, r0
    70a6:	e9 f7       	brne	.-6      	; 0x70a2 <_ZN6StringC1EPKc+0x16>
    70a8:	31 97       	sbiw	r30, 0x01	; 1
    70aa:	af 01       	movw	r20, r30
    70ac:	46 1b       	sub	r20, r22
    70ae:	57 0b       	sbc	r21, r23
    70b0:	cf cf       	rjmp	.-98     	; 0x7050 <_ZN6String4copyEPKcj>
    70b2:	08 95       	ret

000070b4 <_ZN6StringaSERKS_>:
    70b4:	cf 93       	push	r28
    70b6:	df 93       	push	r29
    70b8:	ec 01       	movw	r28, r24
    70ba:	fb 01       	movw	r30, r22
    70bc:	86 17       	cp	r24, r22
    70be:	97 07       	cpc	r25, r23
    70c0:	51 f0       	breq	.+20     	; 0x70d6 <_ZN6StringaSERKS_+0x22>
    70c2:	60 81       	ld	r22, Z
    70c4:	71 81       	ldd	r23, Z+1	; 0x01
    70c6:	61 15       	cp	r22, r1
    70c8:	71 05       	cpc	r23, r1
    70ca:	21 f0       	breq	.+8      	; 0x70d4 <_ZN6StringaSERKS_+0x20>
    70cc:	44 81       	ldd	r20, Z+4	; 0x04
    70ce:	55 81       	ldd	r21, Z+5	; 0x05
    70d0:	bf df       	rcall	.-130    	; 0x7050 <_ZN6String4copyEPKcj>
    70d2:	01 c0       	rjmp	.+2      	; 0x70d6 <_ZN6StringaSERKS_+0x22>
    70d4:	74 df       	rcall	.-280    	; 0x6fbe <_ZN6String10invalidateEv>
    70d6:	ce 01       	movw	r24, r28
    70d8:	df 91       	pop	r29
    70da:	cf 91       	pop	r28
    70dc:	08 95       	ret

000070de <_ZN6StringC1ERKS_>:
    70de:	fc 01       	movw	r30, r24
    70e0:	11 82       	std	Z+1, r1	; 0x01
    70e2:	10 82       	st	Z, r1
    70e4:	13 82       	std	Z+3, r1	; 0x03
    70e6:	12 82       	std	Z+2, r1	; 0x02
    70e8:	15 82       	std	Z+5, r1	; 0x05
    70ea:	14 82       	std	Z+4, r1	; 0x04
    70ec:	e3 cf       	rjmp	.-58     	; 0x70b4 <_ZN6StringaSERKS_>
    70ee:	08 95       	ret

000070f0 <_ZN6String6concatEPKcj>:
    70f0:	ef 92       	push	r14
    70f2:	ff 92       	push	r15
    70f4:	0f 93       	push	r16
    70f6:	1f 93       	push	r17
    70f8:	cf 93       	push	r28
    70fa:	df 93       	push	r29
    70fc:	fc 01       	movw	r30, r24
    70fe:	24 81       	ldd	r18, Z+4	; 0x04
    7100:	35 81       	ldd	r19, Z+5	; 0x05
    7102:	61 15       	cp	r22, r1
    7104:	71 05       	cpc	r23, r1
    7106:	c1 f0       	breq	.+48     	; 0x7138 <_ZN6String6concatEPKcj+0x48>
    7108:	41 15       	cp	r20, r1
    710a:	51 05       	cpc	r21, r1
    710c:	b9 f0       	breq	.+46     	; 0x713c <_ZN6String6concatEPKcj+0x4c>
    710e:	8b 01       	movw	r16, r22
    7110:	ec 01       	movw	r28, r24
    7112:	7a 01       	movw	r14, r20
    7114:	e2 0e       	add	r14, r18
    7116:	f3 1e       	adc	r15, r19
    7118:	b7 01       	movw	r22, r14
    711a:	7b df       	rcall	.-266    	; 0x7012 <_ZN6String7reserveEj>
    711c:	88 23       	and	r24, r24
    711e:	79 f0       	breq	.+30     	; 0x713e <_ZN6String6concatEPKcj+0x4e>
    7120:	28 81       	ld	r18, Y
    7122:	39 81       	ldd	r19, Y+1	; 0x01
    7124:	8c 81       	ldd	r24, Y+4	; 0x04
    7126:	9d 81       	ldd	r25, Y+5	; 0x05
    7128:	b8 01       	movw	r22, r16
    712a:	82 0f       	add	r24, r18
    712c:	93 1f       	adc	r25, r19
    712e:	13 d5       	rcall	.+2598   	; 0x7b56 <strcpy>
    7130:	fd 82       	std	Y+5, r15	; 0x05
    7132:	ec 82       	std	Y+4, r14	; 0x04
    7134:	81 e0       	ldi	r24, 0x01	; 1
    7136:	03 c0       	rjmp	.+6      	; 0x713e <_ZN6String6concatEPKcj+0x4e>
    7138:	80 e0       	ldi	r24, 0x00	; 0
    713a:	01 c0       	rjmp	.+2      	; 0x713e <_ZN6String6concatEPKcj+0x4e>
    713c:	81 e0       	ldi	r24, 0x01	; 1
    713e:	df 91       	pop	r29
    7140:	cf 91       	pop	r28
    7142:	1f 91       	pop	r17
    7144:	0f 91       	pop	r16
    7146:	ff 90       	pop	r15
    7148:	ef 90       	pop	r14
    714a:	08 95       	ret

0000714c <_ZplRK15StringSumHelperRK6String>:
    714c:	cf 93       	push	r28
    714e:	df 93       	push	r29
    7150:	ec 01       	movw	r28, r24
    7152:	fb 01       	movw	r30, r22
    7154:	44 81       	ldd	r20, Z+4	; 0x04
    7156:	55 81       	ldd	r21, Z+5	; 0x05
    7158:	60 81       	ld	r22, Z
    715a:	71 81       	ldd	r23, Z+1	; 0x01
    715c:	c9 df       	rcall	.-110    	; 0x70f0 <_ZN6String6concatEPKcj>
    715e:	81 11       	cpse	r24, r1
    7160:	02 c0       	rjmp	.+4      	; 0x7166 <_ZplRK15StringSumHelperRK6String+0x1a>
    7162:	ce 01       	movw	r24, r28
    7164:	2c df       	rcall	.-424    	; 0x6fbe <_ZN6String10invalidateEv>
    7166:	ce 01       	movw	r24, r28
    7168:	df 91       	pop	r29
    716a:	cf 91       	pop	r28
    716c:	08 95       	ret

0000716e <_ZplRK15StringSumHelperPKc>:
    716e:	cf 93       	push	r28
    7170:	df 93       	push	r29
    7172:	ec 01       	movw	r28, r24
    7174:	61 15       	cp	r22, r1
    7176:	71 05       	cpc	r23, r1
    7178:	59 f0       	breq	.+22     	; 0x7190 <_ZplRK15StringSumHelperPKc+0x22>
    717a:	fb 01       	movw	r30, r22
    717c:	01 90       	ld	r0, Z+
    717e:	00 20       	and	r0, r0
    7180:	e9 f7       	brne	.-6      	; 0x717c <_ZplRK15StringSumHelperPKc+0xe>
    7182:	31 97       	sbiw	r30, 0x01	; 1
    7184:	af 01       	movw	r20, r30
    7186:	46 1b       	sub	r20, r22
    7188:	57 0b       	sbc	r21, r23
    718a:	b2 df       	rcall	.-156    	; 0x70f0 <_ZN6String6concatEPKcj>
    718c:	81 11       	cpse	r24, r1
    718e:	02 c0       	rjmp	.+4      	; 0x7194 <_ZplRK15StringSumHelperPKc+0x26>
    7190:	ce 01       	movw	r24, r28
    7192:	15 df       	rcall	.-470    	; 0x6fbe <_ZN6String10invalidateEv>
    7194:	ce 01       	movw	r24, r28
    7196:	df 91       	pop	r29
    7198:	cf 91       	pop	r28
    719a:	08 95       	ret

0000719c <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
    719c:	dc 01       	movw	r26, r24
    719e:	ed 91       	ld	r30, X+
    71a0:	fc 91       	ld	r31, X
    71a2:	30 97       	sbiw	r30, 0x00	; 0
    71a4:	39 f1       	breq	.+78     	; 0x71f4 <_ZNK6String9compareToERKS_+0x58>
    71a6:	db 01       	movw	r26, r22
    71a8:	6d 91       	ld	r22, X+
    71aa:	7c 91       	ld	r23, X
    71ac:	61 15       	cp	r22, r1
    71ae:	71 05       	cpc	r23, r1
    71b0:	c1 f4       	brne	.+48     	; 0x71e2 <_ZNK6String9compareToERKS_+0x46>
    71b2:	0d c0       	rjmp	.+26     	; 0x71ce <_ZNK6String9compareToERKS_+0x32>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
    71b4:	db 01       	movw	r26, r22
    71b6:	14 96       	adiw	r26, 0x04	; 4
    71b8:	8d 91       	ld	r24, X+
    71ba:	9c 91       	ld	r25, X
    71bc:	15 97       	sbiw	r26, 0x05	; 5
    71be:	89 2b       	or	r24, r25
    71c0:	99 f0       	breq	.+38     	; 0x71e8 <_ZNK6String9compareToERKS_+0x4c>
    71c2:	80 81       	ld	r24, Z
    71c4:	90 e0       	ldi	r25, 0x00	; 0
    71c6:	91 95       	neg	r25
    71c8:	81 95       	neg	r24
    71ca:	91 09       	sbc	r25, r1
    71cc:	08 95       	ret
		if (buffer && len > 0) return *(unsigned char *)buffer;
    71ce:	dc 01       	movw	r26, r24
    71d0:	14 96       	adiw	r26, 0x04	; 4
    71d2:	8d 91       	ld	r24, X+
    71d4:	9c 91       	ld	r25, X
    71d6:	15 97       	sbiw	r26, 0x05	; 5
    71d8:	89 2b       	or	r24, r25
    71da:	49 f0       	breq	.+18     	; 0x71ee <_ZNK6String9compareToERKS_+0x52>
    71dc:	80 81       	ld	r24, Z
    71de:	90 e0       	ldi	r25, 0x00	; 0
    71e0:	08 95       	ret
		return 0;
	}
	return strcmp(buffer, s.buffer);
    71e2:	cf 01       	movw	r24, r30
    71e4:	af c4       	rjmp	.+2398   	; 0x7b44 <strcmp>
    71e6:	08 95       	ret
int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
		return 0;
    71e8:	80 e0       	ldi	r24, 0x00	; 0
    71ea:	90 e0       	ldi	r25, 0x00	; 0
    71ec:	08 95       	ret
    71ee:	80 e0       	ldi	r24, 0x00	; 0
    71f0:	90 e0       	ldi	r25, 0x00	; 0
    71f2:	08 95       	ret
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
    71f4:	db 01       	movw	r26, r22
    71f6:	ed 91       	ld	r30, X+
    71f8:	fc 91       	ld	r31, X
    71fa:	30 97       	sbiw	r30, 0x00	; 0
    71fc:	d9 f6       	brne	.-74     	; 0x71b4 <_ZNK6String9compareToERKS_+0x18>
		if (buffer && len > 0) return *(unsigned char *)buffer;
		return 0;
    71fe:	80 e0       	ldi	r24, 0x00	; 0
    7200:	90 e0       	ldi	r25, 0x00	; 0
	}
	return strcmp(buffer, s.buffer);
}
    7202:	08 95       	ret

00007204 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
    7204:	fc 01       	movw	r30, r24
    7206:	44 81       	ldd	r20, Z+4	; 0x04
    7208:	55 81       	ldd	r21, Z+5	; 0x05
    720a:	fb 01       	movw	r30, r22
    720c:	24 81       	ldd	r18, Z+4	; 0x04
    720e:	35 81       	ldd	r19, Z+5	; 0x05
    7210:	42 17       	cp	r20, r18
    7212:	53 07       	cpc	r21, r19
    7214:	31 f4       	brne	.+12     	; 0x7222 <_ZNK6String6equalsERKS_+0x1e>
    7216:	c2 df       	rcall	.-124    	; 0x719c <_ZNK6String9compareToERKS_>
    7218:	21 e0       	ldi	r18, 0x01	; 1
    721a:	89 2b       	or	r24, r25
    721c:	19 f0       	breq	.+6      	; 0x7224 <_ZNK6String6equalsERKS_+0x20>
    721e:	20 e0       	ldi	r18, 0x00	; 0
    7220:	01 c0       	rjmp	.+2      	; 0x7224 <_ZNK6String6equalsERKS_+0x20>
    7222:	20 e0       	ldi	r18, 0x00	; 0
}
    7224:	82 2f       	mov	r24, r18
    7226:	08 95       	ret

00007228 <__subsf3>:
    7228:	50 58       	subi	r21, 0x80	; 128

0000722a <__addsf3>:
    722a:	bb 27       	eor	r27, r27
    722c:	aa 27       	eor	r26, r26
    722e:	0e d0       	rcall	.+28     	; 0x724c <__addsf3x>
    7230:	75 c1       	rjmp	.+746    	; 0x751c <__fp_round>
    7232:	66 d1       	rcall	.+716    	; 0x7500 <__fp_pscA>
    7234:	30 f0       	brcs	.+12     	; 0x7242 <__addsf3+0x18>
    7236:	6b d1       	rcall	.+726    	; 0x750e <__fp_pscB>
    7238:	20 f0       	brcs	.+8      	; 0x7242 <__addsf3+0x18>
    723a:	31 f4       	brne	.+12     	; 0x7248 <__addsf3+0x1e>
    723c:	9f 3f       	cpi	r25, 0xFF	; 255
    723e:	11 f4       	brne	.+4      	; 0x7244 <__addsf3+0x1a>
    7240:	1e f4       	brtc	.+6      	; 0x7248 <__addsf3+0x1e>
    7242:	5b c1       	rjmp	.+694    	; 0x74fa <__fp_nan>
    7244:	0e f4       	brtc	.+2      	; 0x7248 <__addsf3+0x1e>
    7246:	e0 95       	com	r30
    7248:	e7 fb       	bst	r30, 7
    724a:	51 c1       	rjmp	.+674    	; 0x74ee <__fp_inf>

0000724c <__addsf3x>:
    724c:	e9 2f       	mov	r30, r25
    724e:	77 d1       	rcall	.+750    	; 0x753e <__fp_split3>
    7250:	80 f3       	brcs	.-32     	; 0x7232 <__addsf3+0x8>
    7252:	ba 17       	cp	r27, r26
    7254:	62 07       	cpc	r22, r18
    7256:	73 07       	cpc	r23, r19
    7258:	84 07       	cpc	r24, r20
    725a:	95 07       	cpc	r25, r21
    725c:	18 f0       	brcs	.+6      	; 0x7264 <__addsf3x+0x18>
    725e:	71 f4       	brne	.+28     	; 0x727c <__addsf3x+0x30>
    7260:	9e f5       	brtc	.+102    	; 0x72c8 <__addsf3x+0x7c>
    7262:	8f c1       	rjmp	.+798    	; 0x7582 <__fp_zero>
    7264:	0e f4       	brtc	.+2      	; 0x7268 <__addsf3x+0x1c>
    7266:	e0 95       	com	r30
    7268:	0b 2e       	mov	r0, r27
    726a:	ba 2f       	mov	r27, r26
    726c:	a0 2d       	mov	r26, r0
    726e:	0b 01       	movw	r0, r22
    7270:	b9 01       	movw	r22, r18
    7272:	90 01       	movw	r18, r0
    7274:	0c 01       	movw	r0, r24
    7276:	ca 01       	movw	r24, r20
    7278:	a0 01       	movw	r20, r0
    727a:	11 24       	eor	r1, r1
    727c:	ff 27       	eor	r31, r31
    727e:	59 1b       	sub	r21, r25
    7280:	99 f0       	breq	.+38     	; 0x72a8 <__addsf3x+0x5c>
    7282:	59 3f       	cpi	r21, 0xF9	; 249
    7284:	50 f4       	brcc	.+20     	; 0x729a <__addsf3x+0x4e>
    7286:	50 3e       	cpi	r21, 0xE0	; 224
    7288:	68 f1       	brcs	.+90     	; 0x72e4 <__addsf3x+0x98>
    728a:	1a 16       	cp	r1, r26
    728c:	f0 40       	sbci	r31, 0x00	; 0
    728e:	a2 2f       	mov	r26, r18
    7290:	23 2f       	mov	r18, r19
    7292:	34 2f       	mov	r19, r20
    7294:	44 27       	eor	r20, r20
    7296:	58 5f       	subi	r21, 0xF8	; 248
    7298:	f3 cf       	rjmp	.-26     	; 0x7280 <__addsf3x+0x34>
    729a:	46 95       	lsr	r20
    729c:	37 95       	ror	r19
    729e:	27 95       	ror	r18
    72a0:	a7 95       	ror	r26
    72a2:	f0 40       	sbci	r31, 0x00	; 0
    72a4:	53 95       	inc	r21
    72a6:	c9 f7       	brne	.-14     	; 0x729a <__addsf3x+0x4e>
    72a8:	7e f4       	brtc	.+30     	; 0x72c8 <__addsf3x+0x7c>
    72aa:	1f 16       	cp	r1, r31
    72ac:	ba 0b       	sbc	r27, r26
    72ae:	62 0b       	sbc	r22, r18
    72b0:	73 0b       	sbc	r23, r19
    72b2:	84 0b       	sbc	r24, r20
    72b4:	ba f0       	brmi	.+46     	; 0x72e4 <__addsf3x+0x98>
    72b6:	91 50       	subi	r25, 0x01	; 1
    72b8:	a1 f0       	breq	.+40     	; 0x72e2 <__addsf3x+0x96>
    72ba:	ff 0f       	add	r31, r31
    72bc:	bb 1f       	adc	r27, r27
    72be:	66 1f       	adc	r22, r22
    72c0:	77 1f       	adc	r23, r23
    72c2:	88 1f       	adc	r24, r24
    72c4:	c2 f7       	brpl	.-16     	; 0x72b6 <__addsf3x+0x6a>
    72c6:	0e c0       	rjmp	.+28     	; 0x72e4 <__addsf3x+0x98>
    72c8:	ba 0f       	add	r27, r26
    72ca:	62 1f       	adc	r22, r18
    72cc:	73 1f       	adc	r23, r19
    72ce:	84 1f       	adc	r24, r20
    72d0:	48 f4       	brcc	.+18     	; 0x72e4 <__addsf3x+0x98>
    72d2:	87 95       	ror	r24
    72d4:	77 95       	ror	r23
    72d6:	67 95       	ror	r22
    72d8:	b7 95       	ror	r27
    72da:	f7 95       	ror	r31
    72dc:	9e 3f       	cpi	r25, 0xFE	; 254
    72de:	08 f0       	brcs	.+2      	; 0x72e2 <__addsf3x+0x96>
    72e0:	b3 cf       	rjmp	.-154    	; 0x7248 <__addsf3+0x1e>
    72e2:	93 95       	inc	r25
    72e4:	88 0f       	add	r24, r24
    72e6:	08 f0       	brcs	.+2      	; 0x72ea <__addsf3x+0x9e>
    72e8:	99 27       	eor	r25, r25
    72ea:	ee 0f       	add	r30, r30
    72ec:	97 95       	ror	r25
    72ee:	87 95       	ror	r24
    72f0:	08 95       	ret

000072f2 <__cmpsf2>:
    72f2:	d9 d0       	rcall	.+434    	; 0x74a6 <__fp_cmp>
    72f4:	08 f4       	brcc	.+2      	; 0x72f8 <__cmpsf2+0x6>
    72f6:	81 e0       	ldi	r24, 0x01	; 1
    72f8:	08 95       	ret

000072fa <__divsf3>:
    72fa:	0c d0       	rcall	.+24     	; 0x7314 <__divsf3x>
    72fc:	0f c1       	rjmp	.+542    	; 0x751c <__fp_round>
    72fe:	07 d1       	rcall	.+526    	; 0x750e <__fp_pscB>
    7300:	40 f0       	brcs	.+16     	; 0x7312 <__divsf3+0x18>
    7302:	fe d0       	rcall	.+508    	; 0x7500 <__fp_pscA>
    7304:	30 f0       	brcs	.+12     	; 0x7312 <__divsf3+0x18>
    7306:	21 f4       	brne	.+8      	; 0x7310 <__divsf3+0x16>
    7308:	5f 3f       	cpi	r21, 0xFF	; 255
    730a:	19 f0       	breq	.+6      	; 0x7312 <__divsf3+0x18>
    730c:	f0 c0       	rjmp	.+480    	; 0x74ee <__fp_inf>
    730e:	51 11       	cpse	r21, r1
    7310:	39 c1       	rjmp	.+626    	; 0x7584 <__fp_szero>
    7312:	f3 c0       	rjmp	.+486    	; 0x74fa <__fp_nan>

00007314 <__divsf3x>:
    7314:	14 d1       	rcall	.+552    	; 0x753e <__fp_split3>
    7316:	98 f3       	brcs	.-26     	; 0x72fe <__divsf3+0x4>

00007318 <__divsf3_pse>:
    7318:	99 23       	and	r25, r25
    731a:	c9 f3       	breq	.-14     	; 0x730e <__divsf3+0x14>
    731c:	55 23       	and	r21, r21
    731e:	b1 f3       	breq	.-20     	; 0x730c <__divsf3+0x12>
    7320:	95 1b       	sub	r25, r21
    7322:	55 0b       	sbc	r21, r21
    7324:	bb 27       	eor	r27, r27
    7326:	aa 27       	eor	r26, r26
    7328:	62 17       	cp	r22, r18
    732a:	73 07       	cpc	r23, r19
    732c:	84 07       	cpc	r24, r20
    732e:	38 f0       	brcs	.+14     	; 0x733e <__divsf3_pse+0x26>
    7330:	9f 5f       	subi	r25, 0xFF	; 255
    7332:	5f 4f       	sbci	r21, 0xFF	; 255
    7334:	22 0f       	add	r18, r18
    7336:	33 1f       	adc	r19, r19
    7338:	44 1f       	adc	r20, r20
    733a:	aa 1f       	adc	r26, r26
    733c:	a9 f3       	breq	.-22     	; 0x7328 <__divsf3_pse+0x10>
    733e:	33 d0       	rcall	.+102    	; 0x73a6 <__divsf3_pse+0x8e>
    7340:	0e 2e       	mov	r0, r30
    7342:	3a f0       	brmi	.+14     	; 0x7352 <__divsf3_pse+0x3a>
    7344:	e0 e8       	ldi	r30, 0x80	; 128
    7346:	30 d0       	rcall	.+96     	; 0x73a8 <__divsf3_pse+0x90>
    7348:	91 50       	subi	r25, 0x01	; 1
    734a:	50 40       	sbci	r21, 0x00	; 0
    734c:	e6 95       	lsr	r30
    734e:	00 1c       	adc	r0, r0
    7350:	ca f7       	brpl	.-14     	; 0x7344 <__divsf3_pse+0x2c>
    7352:	29 d0       	rcall	.+82     	; 0x73a6 <__divsf3_pse+0x8e>
    7354:	fe 2f       	mov	r31, r30
    7356:	27 d0       	rcall	.+78     	; 0x73a6 <__divsf3_pse+0x8e>
    7358:	66 0f       	add	r22, r22
    735a:	77 1f       	adc	r23, r23
    735c:	88 1f       	adc	r24, r24
    735e:	bb 1f       	adc	r27, r27
    7360:	26 17       	cp	r18, r22
    7362:	37 07       	cpc	r19, r23
    7364:	48 07       	cpc	r20, r24
    7366:	ab 07       	cpc	r26, r27
    7368:	b0 e8       	ldi	r27, 0x80	; 128
    736a:	09 f0       	breq	.+2      	; 0x736e <__divsf3_pse+0x56>
    736c:	bb 0b       	sbc	r27, r27
    736e:	80 2d       	mov	r24, r0
    7370:	bf 01       	movw	r22, r30
    7372:	ff 27       	eor	r31, r31
    7374:	93 58       	subi	r25, 0x83	; 131
    7376:	5f 4f       	sbci	r21, 0xFF	; 255
    7378:	2a f0       	brmi	.+10     	; 0x7384 <__divsf3_pse+0x6c>
    737a:	9e 3f       	cpi	r25, 0xFE	; 254
    737c:	51 05       	cpc	r21, r1
    737e:	68 f0       	brcs	.+26     	; 0x739a <__divsf3_pse+0x82>
    7380:	b6 c0       	rjmp	.+364    	; 0x74ee <__fp_inf>
    7382:	00 c1       	rjmp	.+512    	; 0x7584 <__fp_szero>
    7384:	5f 3f       	cpi	r21, 0xFF	; 255
    7386:	ec f3       	brlt	.-6      	; 0x7382 <__divsf3_pse+0x6a>
    7388:	98 3e       	cpi	r25, 0xE8	; 232
    738a:	dc f3       	brlt	.-10     	; 0x7382 <__divsf3_pse+0x6a>
    738c:	86 95       	lsr	r24
    738e:	77 95       	ror	r23
    7390:	67 95       	ror	r22
    7392:	b7 95       	ror	r27
    7394:	f7 95       	ror	r31
    7396:	9f 5f       	subi	r25, 0xFF	; 255
    7398:	c9 f7       	brne	.-14     	; 0x738c <__divsf3_pse+0x74>
    739a:	88 0f       	add	r24, r24
    739c:	91 1d       	adc	r25, r1
    739e:	96 95       	lsr	r25
    73a0:	87 95       	ror	r24
    73a2:	97 f9       	bld	r25, 7
    73a4:	08 95       	ret
    73a6:	e1 e0       	ldi	r30, 0x01	; 1
    73a8:	66 0f       	add	r22, r22
    73aa:	77 1f       	adc	r23, r23
    73ac:	88 1f       	adc	r24, r24
    73ae:	bb 1f       	adc	r27, r27
    73b0:	62 17       	cp	r22, r18
    73b2:	73 07       	cpc	r23, r19
    73b4:	84 07       	cpc	r24, r20
    73b6:	ba 07       	cpc	r27, r26
    73b8:	20 f0       	brcs	.+8      	; 0x73c2 <__divsf3_pse+0xaa>
    73ba:	62 1b       	sub	r22, r18
    73bc:	73 0b       	sbc	r23, r19
    73be:	84 0b       	sbc	r24, r20
    73c0:	ba 0b       	sbc	r27, r26
    73c2:	ee 1f       	adc	r30, r30
    73c4:	88 f7       	brcc	.-30     	; 0x73a8 <__divsf3_pse+0x90>
    73c6:	e0 95       	com	r30
    73c8:	08 95       	ret

000073ca <__fixsfsi>:
    73ca:	04 d0       	rcall	.+8      	; 0x73d4 <__fixunssfsi>
    73cc:	68 94       	set
    73ce:	b1 11       	cpse	r27, r1
    73d0:	d9 c0       	rjmp	.+434    	; 0x7584 <__fp_szero>
    73d2:	08 95       	ret

000073d4 <__fixunssfsi>:
    73d4:	bc d0       	rcall	.+376    	; 0x754e <__fp_splitA>
    73d6:	88 f0       	brcs	.+34     	; 0x73fa <__fixunssfsi+0x26>
    73d8:	9f 57       	subi	r25, 0x7F	; 127
    73da:	90 f0       	brcs	.+36     	; 0x7400 <__fixunssfsi+0x2c>
    73dc:	b9 2f       	mov	r27, r25
    73de:	99 27       	eor	r25, r25
    73e0:	b7 51       	subi	r27, 0x17	; 23
    73e2:	a0 f0       	brcs	.+40     	; 0x740c <__fixunssfsi+0x38>
    73e4:	d1 f0       	breq	.+52     	; 0x741a <__fixunssfsi+0x46>
    73e6:	66 0f       	add	r22, r22
    73e8:	77 1f       	adc	r23, r23
    73ea:	88 1f       	adc	r24, r24
    73ec:	99 1f       	adc	r25, r25
    73ee:	1a f0       	brmi	.+6      	; 0x73f6 <__fixunssfsi+0x22>
    73f0:	ba 95       	dec	r27
    73f2:	c9 f7       	brne	.-14     	; 0x73e6 <__fixunssfsi+0x12>
    73f4:	12 c0       	rjmp	.+36     	; 0x741a <__fixunssfsi+0x46>
    73f6:	b1 30       	cpi	r27, 0x01	; 1
    73f8:	81 f0       	breq	.+32     	; 0x741a <__fixunssfsi+0x46>
    73fa:	c3 d0       	rcall	.+390    	; 0x7582 <__fp_zero>
    73fc:	b1 e0       	ldi	r27, 0x01	; 1
    73fe:	08 95       	ret
    7400:	c0 c0       	rjmp	.+384    	; 0x7582 <__fp_zero>
    7402:	67 2f       	mov	r22, r23
    7404:	78 2f       	mov	r23, r24
    7406:	88 27       	eor	r24, r24
    7408:	b8 5f       	subi	r27, 0xF8	; 248
    740a:	39 f0       	breq	.+14     	; 0x741a <__fixunssfsi+0x46>
    740c:	b9 3f       	cpi	r27, 0xF9	; 249
    740e:	cc f3       	brlt	.-14     	; 0x7402 <__fixunssfsi+0x2e>
    7410:	86 95       	lsr	r24
    7412:	77 95       	ror	r23
    7414:	67 95       	ror	r22
    7416:	b3 95       	inc	r27
    7418:	d9 f7       	brne	.-10     	; 0x7410 <__fixunssfsi+0x3c>
    741a:	3e f4       	brtc	.+14     	; 0x742a <__fixunssfsi+0x56>
    741c:	90 95       	com	r25
    741e:	80 95       	com	r24
    7420:	70 95       	com	r23
    7422:	61 95       	neg	r22
    7424:	7f 4f       	sbci	r23, 0xFF	; 255
    7426:	8f 4f       	sbci	r24, 0xFF	; 255
    7428:	9f 4f       	sbci	r25, 0xFF	; 255
    742a:	08 95       	ret

0000742c <__floatunsisf>:
    742c:	e8 94       	clt
    742e:	09 c0       	rjmp	.+18     	; 0x7442 <__floatsisf+0x12>

00007430 <__floatsisf>:
    7430:	97 fb       	bst	r25, 7
    7432:	3e f4       	brtc	.+14     	; 0x7442 <__floatsisf+0x12>
    7434:	90 95       	com	r25
    7436:	80 95       	com	r24
    7438:	70 95       	com	r23
    743a:	61 95       	neg	r22
    743c:	7f 4f       	sbci	r23, 0xFF	; 255
    743e:	8f 4f       	sbci	r24, 0xFF	; 255
    7440:	9f 4f       	sbci	r25, 0xFF	; 255
    7442:	99 23       	and	r25, r25
    7444:	a9 f0       	breq	.+42     	; 0x7470 <__floatsisf+0x40>
    7446:	f9 2f       	mov	r31, r25
    7448:	96 e9       	ldi	r25, 0x96	; 150
    744a:	bb 27       	eor	r27, r27
    744c:	93 95       	inc	r25
    744e:	f6 95       	lsr	r31
    7450:	87 95       	ror	r24
    7452:	77 95       	ror	r23
    7454:	67 95       	ror	r22
    7456:	b7 95       	ror	r27
    7458:	f1 11       	cpse	r31, r1
    745a:	f8 cf       	rjmp	.-16     	; 0x744c <__floatsisf+0x1c>
    745c:	fa f4       	brpl	.+62     	; 0x749c <__floatsisf+0x6c>
    745e:	bb 0f       	add	r27, r27
    7460:	11 f4       	brne	.+4      	; 0x7466 <__floatsisf+0x36>
    7462:	60 ff       	sbrs	r22, 0
    7464:	1b c0       	rjmp	.+54     	; 0x749c <__floatsisf+0x6c>
    7466:	6f 5f       	subi	r22, 0xFF	; 255
    7468:	7f 4f       	sbci	r23, 0xFF	; 255
    746a:	8f 4f       	sbci	r24, 0xFF	; 255
    746c:	9f 4f       	sbci	r25, 0xFF	; 255
    746e:	16 c0       	rjmp	.+44     	; 0x749c <__floatsisf+0x6c>
    7470:	88 23       	and	r24, r24
    7472:	11 f0       	breq	.+4      	; 0x7478 <__floatsisf+0x48>
    7474:	96 e9       	ldi	r25, 0x96	; 150
    7476:	11 c0       	rjmp	.+34     	; 0x749a <__floatsisf+0x6a>
    7478:	77 23       	and	r23, r23
    747a:	21 f0       	breq	.+8      	; 0x7484 <__floatsisf+0x54>
    747c:	9e e8       	ldi	r25, 0x8E	; 142
    747e:	87 2f       	mov	r24, r23
    7480:	76 2f       	mov	r23, r22
    7482:	05 c0       	rjmp	.+10     	; 0x748e <__floatsisf+0x5e>
    7484:	66 23       	and	r22, r22
    7486:	71 f0       	breq	.+28     	; 0x74a4 <__floatsisf+0x74>
    7488:	96 e8       	ldi	r25, 0x86	; 134
    748a:	86 2f       	mov	r24, r22
    748c:	70 e0       	ldi	r23, 0x00	; 0
    748e:	60 e0       	ldi	r22, 0x00	; 0
    7490:	2a f0       	brmi	.+10     	; 0x749c <__floatsisf+0x6c>
    7492:	9a 95       	dec	r25
    7494:	66 0f       	add	r22, r22
    7496:	77 1f       	adc	r23, r23
    7498:	88 1f       	adc	r24, r24
    749a:	da f7       	brpl	.-10     	; 0x7492 <__floatsisf+0x62>
    749c:	88 0f       	add	r24, r24
    749e:	96 95       	lsr	r25
    74a0:	87 95       	ror	r24
    74a2:	97 f9       	bld	r25, 7
    74a4:	08 95       	ret

000074a6 <__fp_cmp>:
    74a6:	99 0f       	add	r25, r25
    74a8:	00 08       	sbc	r0, r0
    74aa:	55 0f       	add	r21, r21
    74ac:	aa 0b       	sbc	r26, r26
    74ae:	e0 e8       	ldi	r30, 0x80	; 128
    74b0:	fe ef       	ldi	r31, 0xFE	; 254
    74b2:	16 16       	cp	r1, r22
    74b4:	17 06       	cpc	r1, r23
    74b6:	e8 07       	cpc	r30, r24
    74b8:	f9 07       	cpc	r31, r25
    74ba:	c0 f0       	brcs	.+48     	; 0x74ec <__fp_cmp+0x46>
    74bc:	12 16       	cp	r1, r18
    74be:	13 06       	cpc	r1, r19
    74c0:	e4 07       	cpc	r30, r20
    74c2:	f5 07       	cpc	r31, r21
    74c4:	98 f0       	brcs	.+38     	; 0x74ec <__fp_cmp+0x46>
    74c6:	62 1b       	sub	r22, r18
    74c8:	73 0b       	sbc	r23, r19
    74ca:	84 0b       	sbc	r24, r20
    74cc:	95 0b       	sbc	r25, r21
    74ce:	39 f4       	brne	.+14     	; 0x74de <__fp_cmp+0x38>
    74d0:	0a 26       	eor	r0, r26
    74d2:	61 f0       	breq	.+24     	; 0x74ec <__fp_cmp+0x46>
    74d4:	23 2b       	or	r18, r19
    74d6:	24 2b       	or	r18, r20
    74d8:	25 2b       	or	r18, r21
    74da:	21 f4       	brne	.+8      	; 0x74e4 <__fp_cmp+0x3e>
    74dc:	08 95       	ret
    74de:	0a 26       	eor	r0, r26
    74e0:	09 f4       	brne	.+2      	; 0x74e4 <__fp_cmp+0x3e>
    74e2:	a1 40       	sbci	r26, 0x01	; 1
    74e4:	a6 95       	lsr	r26
    74e6:	8f ef       	ldi	r24, 0xFF	; 255
    74e8:	81 1d       	adc	r24, r1
    74ea:	81 1d       	adc	r24, r1
    74ec:	08 95       	ret

000074ee <__fp_inf>:
    74ee:	97 f9       	bld	r25, 7
    74f0:	9f 67       	ori	r25, 0x7F	; 127
    74f2:	80 e8       	ldi	r24, 0x80	; 128
    74f4:	70 e0       	ldi	r23, 0x00	; 0
    74f6:	60 e0       	ldi	r22, 0x00	; 0
    74f8:	08 95       	ret

000074fa <__fp_nan>:
    74fa:	9f ef       	ldi	r25, 0xFF	; 255
    74fc:	80 ec       	ldi	r24, 0xC0	; 192
    74fe:	08 95       	ret

00007500 <__fp_pscA>:
    7500:	00 24       	eor	r0, r0
    7502:	0a 94       	dec	r0
    7504:	16 16       	cp	r1, r22
    7506:	17 06       	cpc	r1, r23
    7508:	18 06       	cpc	r1, r24
    750a:	09 06       	cpc	r0, r25
    750c:	08 95       	ret

0000750e <__fp_pscB>:
    750e:	00 24       	eor	r0, r0
    7510:	0a 94       	dec	r0
    7512:	12 16       	cp	r1, r18
    7514:	13 06       	cpc	r1, r19
    7516:	14 06       	cpc	r1, r20
    7518:	05 06       	cpc	r0, r21
    751a:	08 95       	ret

0000751c <__fp_round>:
    751c:	09 2e       	mov	r0, r25
    751e:	03 94       	inc	r0
    7520:	00 0c       	add	r0, r0
    7522:	11 f4       	brne	.+4      	; 0x7528 <__fp_round+0xc>
    7524:	88 23       	and	r24, r24
    7526:	52 f0       	brmi	.+20     	; 0x753c <__fp_round+0x20>
    7528:	bb 0f       	add	r27, r27
    752a:	40 f4       	brcc	.+16     	; 0x753c <__fp_round+0x20>
    752c:	bf 2b       	or	r27, r31
    752e:	11 f4       	brne	.+4      	; 0x7534 <__fp_round+0x18>
    7530:	60 ff       	sbrs	r22, 0
    7532:	04 c0       	rjmp	.+8      	; 0x753c <__fp_round+0x20>
    7534:	6f 5f       	subi	r22, 0xFF	; 255
    7536:	7f 4f       	sbci	r23, 0xFF	; 255
    7538:	8f 4f       	sbci	r24, 0xFF	; 255
    753a:	9f 4f       	sbci	r25, 0xFF	; 255
    753c:	08 95       	ret

0000753e <__fp_split3>:
    753e:	57 fd       	sbrc	r21, 7
    7540:	90 58       	subi	r25, 0x80	; 128
    7542:	44 0f       	add	r20, r20
    7544:	55 1f       	adc	r21, r21
    7546:	59 f0       	breq	.+22     	; 0x755e <__fp_splitA+0x10>
    7548:	5f 3f       	cpi	r21, 0xFF	; 255
    754a:	71 f0       	breq	.+28     	; 0x7568 <__fp_splitA+0x1a>
    754c:	47 95       	ror	r20

0000754e <__fp_splitA>:
    754e:	88 0f       	add	r24, r24
    7550:	97 fb       	bst	r25, 7
    7552:	99 1f       	adc	r25, r25
    7554:	61 f0       	breq	.+24     	; 0x756e <__fp_splitA+0x20>
    7556:	9f 3f       	cpi	r25, 0xFF	; 255
    7558:	79 f0       	breq	.+30     	; 0x7578 <__fp_splitA+0x2a>
    755a:	87 95       	ror	r24
    755c:	08 95       	ret
    755e:	12 16       	cp	r1, r18
    7560:	13 06       	cpc	r1, r19
    7562:	14 06       	cpc	r1, r20
    7564:	55 1f       	adc	r21, r21
    7566:	f2 cf       	rjmp	.-28     	; 0x754c <__fp_split3+0xe>
    7568:	46 95       	lsr	r20
    756a:	f1 df       	rcall	.-30     	; 0x754e <__fp_splitA>
    756c:	08 c0       	rjmp	.+16     	; 0x757e <__fp_splitA+0x30>
    756e:	16 16       	cp	r1, r22
    7570:	17 06       	cpc	r1, r23
    7572:	18 06       	cpc	r1, r24
    7574:	99 1f       	adc	r25, r25
    7576:	f1 cf       	rjmp	.-30     	; 0x755a <__fp_splitA+0xc>
    7578:	86 95       	lsr	r24
    757a:	71 05       	cpc	r23, r1
    757c:	61 05       	cpc	r22, r1
    757e:	08 94       	sec
    7580:	08 95       	ret

00007582 <__fp_zero>:
    7582:	e8 94       	clt

00007584 <__fp_szero>:
    7584:	bb 27       	eor	r27, r27
    7586:	66 27       	eor	r22, r22
    7588:	77 27       	eor	r23, r23
    758a:	cb 01       	movw	r24, r22
    758c:	97 f9       	bld	r25, 7
    758e:	08 95       	ret

00007590 <__gesf2>:
    7590:	8a df       	rcall	.-236    	; 0x74a6 <__fp_cmp>
    7592:	08 f4       	brcc	.+2      	; 0x7596 <__gesf2+0x6>
    7594:	8f ef       	ldi	r24, 0xFF	; 255
    7596:	08 95       	ret

00007598 <__mulsf3>:
    7598:	0b d0       	rcall	.+22     	; 0x75b0 <__mulsf3x>
    759a:	c0 cf       	rjmp	.-128    	; 0x751c <__fp_round>
    759c:	b1 df       	rcall	.-158    	; 0x7500 <__fp_pscA>
    759e:	28 f0       	brcs	.+10     	; 0x75aa <__mulsf3+0x12>
    75a0:	b6 df       	rcall	.-148    	; 0x750e <__fp_pscB>
    75a2:	18 f0       	brcs	.+6      	; 0x75aa <__mulsf3+0x12>
    75a4:	95 23       	and	r25, r21
    75a6:	09 f0       	breq	.+2      	; 0x75aa <__mulsf3+0x12>
    75a8:	a2 cf       	rjmp	.-188    	; 0x74ee <__fp_inf>
    75aa:	a7 cf       	rjmp	.-178    	; 0x74fa <__fp_nan>
    75ac:	11 24       	eor	r1, r1
    75ae:	ea cf       	rjmp	.-44     	; 0x7584 <__fp_szero>

000075b0 <__mulsf3x>:
    75b0:	c6 df       	rcall	.-116    	; 0x753e <__fp_split3>
    75b2:	a0 f3       	brcs	.-24     	; 0x759c <__mulsf3+0x4>

000075b4 <__mulsf3_pse>:
    75b4:	95 9f       	mul	r25, r21
    75b6:	d1 f3       	breq	.-12     	; 0x75ac <__mulsf3+0x14>
    75b8:	95 0f       	add	r25, r21
    75ba:	50 e0       	ldi	r21, 0x00	; 0
    75bc:	55 1f       	adc	r21, r21
    75be:	62 9f       	mul	r22, r18
    75c0:	f0 01       	movw	r30, r0
    75c2:	72 9f       	mul	r23, r18
    75c4:	bb 27       	eor	r27, r27
    75c6:	f0 0d       	add	r31, r0
    75c8:	b1 1d       	adc	r27, r1
    75ca:	63 9f       	mul	r22, r19
    75cc:	aa 27       	eor	r26, r26
    75ce:	f0 0d       	add	r31, r0
    75d0:	b1 1d       	adc	r27, r1
    75d2:	aa 1f       	adc	r26, r26
    75d4:	64 9f       	mul	r22, r20
    75d6:	66 27       	eor	r22, r22
    75d8:	b0 0d       	add	r27, r0
    75da:	a1 1d       	adc	r26, r1
    75dc:	66 1f       	adc	r22, r22
    75de:	82 9f       	mul	r24, r18
    75e0:	22 27       	eor	r18, r18
    75e2:	b0 0d       	add	r27, r0
    75e4:	a1 1d       	adc	r26, r1
    75e6:	62 1f       	adc	r22, r18
    75e8:	73 9f       	mul	r23, r19
    75ea:	b0 0d       	add	r27, r0
    75ec:	a1 1d       	adc	r26, r1
    75ee:	62 1f       	adc	r22, r18
    75f0:	83 9f       	mul	r24, r19
    75f2:	a0 0d       	add	r26, r0
    75f4:	61 1d       	adc	r22, r1
    75f6:	22 1f       	adc	r18, r18
    75f8:	74 9f       	mul	r23, r20
    75fa:	33 27       	eor	r19, r19
    75fc:	a0 0d       	add	r26, r0
    75fe:	61 1d       	adc	r22, r1
    7600:	23 1f       	adc	r18, r19
    7602:	84 9f       	mul	r24, r20
    7604:	60 0d       	add	r22, r0
    7606:	21 1d       	adc	r18, r1
    7608:	82 2f       	mov	r24, r18
    760a:	76 2f       	mov	r23, r22
    760c:	6a 2f       	mov	r22, r26
    760e:	11 24       	eor	r1, r1
    7610:	9f 57       	subi	r25, 0x7F	; 127
    7612:	50 40       	sbci	r21, 0x00	; 0
    7614:	8a f0       	brmi	.+34     	; 0x7638 <__mulsf3_pse+0x84>
    7616:	e1 f0       	breq	.+56     	; 0x7650 <__mulsf3_pse+0x9c>
    7618:	88 23       	and	r24, r24
    761a:	4a f0       	brmi	.+18     	; 0x762e <__mulsf3_pse+0x7a>
    761c:	ee 0f       	add	r30, r30
    761e:	ff 1f       	adc	r31, r31
    7620:	bb 1f       	adc	r27, r27
    7622:	66 1f       	adc	r22, r22
    7624:	77 1f       	adc	r23, r23
    7626:	88 1f       	adc	r24, r24
    7628:	91 50       	subi	r25, 0x01	; 1
    762a:	50 40       	sbci	r21, 0x00	; 0
    762c:	a9 f7       	brne	.-22     	; 0x7618 <__mulsf3_pse+0x64>
    762e:	9e 3f       	cpi	r25, 0xFE	; 254
    7630:	51 05       	cpc	r21, r1
    7632:	70 f0       	brcs	.+28     	; 0x7650 <__mulsf3_pse+0x9c>
    7634:	5c cf       	rjmp	.-328    	; 0x74ee <__fp_inf>
    7636:	a6 cf       	rjmp	.-180    	; 0x7584 <__fp_szero>
    7638:	5f 3f       	cpi	r21, 0xFF	; 255
    763a:	ec f3       	brlt	.-6      	; 0x7636 <__mulsf3_pse+0x82>
    763c:	98 3e       	cpi	r25, 0xE8	; 232
    763e:	dc f3       	brlt	.-10     	; 0x7636 <__mulsf3_pse+0x82>
    7640:	86 95       	lsr	r24
    7642:	77 95       	ror	r23
    7644:	67 95       	ror	r22
    7646:	b7 95       	ror	r27
    7648:	f7 95       	ror	r31
    764a:	e7 95       	ror	r30
    764c:	9f 5f       	subi	r25, 0xFF	; 255
    764e:	c1 f7       	brne	.-16     	; 0x7640 <__mulsf3_pse+0x8c>
    7650:	fe 2b       	or	r31, r30
    7652:	88 0f       	add	r24, r24
    7654:	91 1d       	adc	r25, r1
    7656:	96 95       	lsr	r25
    7658:	87 95       	ror	r24
    765a:	97 f9       	bld	r25, 7
    765c:	08 95       	ret

0000765e <__unordsf2>:
    765e:	23 df       	rcall	.-442    	; 0x74a6 <__fp_cmp>
    7660:	88 0b       	sbc	r24, r24
    7662:	99 0b       	sbc	r25, r25
    7664:	08 95       	ret

00007666 <__divmodhi4>:
    7666:	97 fb       	bst	r25, 7
    7668:	07 2e       	mov	r0, r23
    766a:	16 f4       	brtc	.+4      	; 0x7670 <__divmodhi4+0xa>
    766c:	00 94       	com	r0
    766e:	06 d0       	rcall	.+12     	; 0x767c <__divmodhi4_neg1>
    7670:	77 fd       	sbrc	r23, 7
    7672:	08 d0       	rcall	.+16     	; 0x7684 <__divmodhi4_neg2>
    7674:	35 d0       	rcall	.+106    	; 0x76e0 <__udivmodhi4>
    7676:	07 fc       	sbrc	r0, 7
    7678:	05 d0       	rcall	.+10     	; 0x7684 <__divmodhi4_neg2>
    767a:	3e f4       	brtc	.+14     	; 0x768a <__divmodhi4_exit>

0000767c <__divmodhi4_neg1>:
    767c:	90 95       	com	r25
    767e:	81 95       	neg	r24
    7680:	9f 4f       	sbci	r25, 0xFF	; 255
    7682:	08 95       	ret

00007684 <__divmodhi4_neg2>:
    7684:	70 95       	com	r23
    7686:	61 95       	neg	r22
    7688:	7f 4f       	sbci	r23, 0xFF	; 255

0000768a <__divmodhi4_exit>:
    768a:	08 95       	ret

0000768c <__udivmodsi4>:
    768c:	a1 e2       	ldi	r26, 0x21	; 33
    768e:	1a 2e       	mov	r1, r26
    7690:	aa 1b       	sub	r26, r26
    7692:	bb 1b       	sub	r27, r27
    7694:	fd 01       	movw	r30, r26
    7696:	0d c0       	rjmp	.+26     	; 0x76b2 <__udivmodsi4_ep>

00007698 <__udivmodsi4_loop>:
    7698:	aa 1f       	adc	r26, r26
    769a:	bb 1f       	adc	r27, r27
    769c:	ee 1f       	adc	r30, r30
    769e:	ff 1f       	adc	r31, r31
    76a0:	a2 17       	cp	r26, r18
    76a2:	b3 07       	cpc	r27, r19
    76a4:	e4 07       	cpc	r30, r20
    76a6:	f5 07       	cpc	r31, r21
    76a8:	20 f0       	brcs	.+8      	; 0x76b2 <__udivmodsi4_ep>
    76aa:	a2 1b       	sub	r26, r18
    76ac:	b3 0b       	sbc	r27, r19
    76ae:	e4 0b       	sbc	r30, r20
    76b0:	f5 0b       	sbc	r31, r21

000076b2 <__udivmodsi4_ep>:
    76b2:	66 1f       	adc	r22, r22
    76b4:	77 1f       	adc	r23, r23
    76b6:	88 1f       	adc	r24, r24
    76b8:	99 1f       	adc	r25, r25
    76ba:	1a 94       	dec	r1
    76bc:	69 f7       	brne	.-38     	; 0x7698 <__udivmodsi4_loop>
    76be:	60 95       	com	r22
    76c0:	70 95       	com	r23
    76c2:	80 95       	com	r24
    76c4:	90 95       	com	r25
    76c6:	9b 01       	movw	r18, r22
    76c8:	ac 01       	movw	r20, r24
    76ca:	bd 01       	movw	r22, r26
    76cc:	cf 01       	movw	r24, r30
    76ce:	08 95       	ret

000076d0 <__tablejump2__>:
    76d0:	ee 0f       	add	r30, r30
    76d2:	ff 1f       	adc	r31, r31
    76d4:	88 1f       	adc	r24, r24
    76d6:	8b bf       	out	0x3b, r24	; 59
    76d8:	07 90       	elpm	r0, Z+
    76da:	f6 91       	elpm	r31, Z
    76dc:	e0 2d       	mov	r30, r0
    76de:	19 94       	eijmp

000076e0 <__udivmodhi4>:
    76e0:	aa 1b       	sub	r26, r26
    76e2:	bb 1b       	sub	r27, r27
    76e4:	51 e1       	ldi	r21, 0x11	; 17
    76e6:	07 c0       	rjmp	.+14     	; 0x76f6 <__udivmodhi4_ep>

000076e8 <__udivmodhi4_loop>:
    76e8:	aa 1f       	adc	r26, r26
    76ea:	bb 1f       	adc	r27, r27
    76ec:	a6 17       	cp	r26, r22
    76ee:	b7 07       	cpc	r27, r23
    76f0:	10 f0       	brcs	.+4      	; 0x76f6 <__udivmodhi4_ep>
    76f2:	a6 1b       	sub	r26, r22
    76f4:	b7 0b       	sbc	r27, r23

000076f6 <__udivmodhi4_ep>:
    76f6:	88 1f       	adc	r24, r24
    76f8:	99 1f       	adc	r25, r25
    76fa:	5a 95       	dec	r21
    76fc:	a9 f7       	brne	.-22     	; 0x76e8 <__udivmodhi4_loop>
    76fe:	80 95       	com	r24
    7700:	90 95       	com	r25
    7702:	bc 01       	movw	r22, r24
    7704:	cd 01       	movw	r24, r26
    7706:	08 95       	ret

00007708 <malloc>:
    7708:	cf 93       	push	r28
    770a:	df 93       	push	r29
    770c:	82 30       	cpi	r24, 0x02	; 2
    770e:	91 05       	cpc	r25, r1
    7710:	10 f4       	brcc	.+4      	; 0x7716 <malloc+0xe>
    7712:	82 e0       	ldi	r24, 0x02	; 2
    7714:	90 e0       	ldi	r25, 0x00	; 0
    7716:	e0 91 de 08 	lds	r30, 0x08DE
    771a:	f0 91 df 08 	lds	r31, 0x08DF
    771e:	20 e0       	ldi	r18, 0x00	; 0
    7720:	30 e0       	ldi	r19, 0x00	; 0
    7722:	c0 e0       	ldi	r28, 0x00	; 0
    7724:	d0 e0       	ldi	r29, 0x00	; 0
    7726:	30 97       	sbiw	r30, 0x00	; 0
    7728:	11 f1       	breq	.+68     	; 0x776e <malloc+0x66>
    772a:	40 81       	ld	r20, Z
    772c:	51 81       	ldd	r21, Z+1	; 0x01
    772e:	48 17       	cp	r20, r24
    7730:	59 07       	cpc	r21, r25
    7732:	c0 f0       	brcs	.+48     	; 0x7764 <malloc+0x5c>
    7734:	48 17       	cp	r20, r24
    7736:	59 07       	cpc	r21, r25
    7738:	61 f4       	brne	.+24     	; 0x7752 <malloc+0x4a>
    773a:	82 81       	ldd	r24, Z+2	; 0x02
    773c:	93 81       	ldd	r25, Z+3	; 0x03
    773e:	20 97       	sbiw	r28, 0x00	; 0
    7740:	19 f0       	breq	.+6      	; 0x7748 <malloc+0x40>
    7742:	9b 83       	std	Y+3, r25	; 0x03
    7744:	8a 83       	std	Y+2, r24	; 0x02
    7746:	2b c0       	rjmp	.+86     	; 0x779e <malloc+0x96>
    7748:	90 93 df 08 	sts	0x08DF, r25
    774c:	80 93 de 08 	sts	0x08DE, r24
    7750:	26 c0       	rjmp	.+76     	; 0x779e <malloc+0x96>
    7752:	21 15       	cp	r18, r1
    7754:	31 05       	cpc	r19, r1
    7756:	19 f0       	breq	.+6      	; 0x775e <malloc+0x56>
    7758:	42 17       	cp	r20, r18
    775a:	53 07       	cpc	r21, r19
    775c:	18 f4       	brcc	.+6      	; 0x7764 <malloc+0x5c>
    775e:	9a 01       	movw	r18, r20
    7760:	be 01       	movw	r22, r28
    7762:	df 01       	movw	r26, r30
    7764:	ef 01       	movw	r28, r30
    7766:	02 80       	ldd	r0, Z+2	; 0x02
    7768:	f3 81       	ldd	r31, Z+3	; 0x03
    776a:	e0 2d       	mov	r30, r0
    776c:	dc cf       	rjmp	.-72     	; 0x7726 <malloc+0x1e>
    776e:	21 15       	cp	r18, r1
    7770:	31 05       	cpc	r19, r1
    7772:	09 f1       	breq	.+66     	; 0x77b6 <malloc+0xae>
    7774:	28 1b       	sub	r18, r24
    7776:	39 0b       	sbc	r19, r25
    7778:	24 30       	cpi	r18, 0x04	; 4
    777a:	31 05       	cpc	r19, r1
    777c:	90 f4       	brcc	.+36     	; 0x77a2 <malloc+0x9a>
    777e:	12 96       	adiw	r26, 0x02	; 2
    7780:	8d 91       	ld	r24, X+
    7782:	9c 91       	ld	r25, X
    7784:	13 97       	sbiw	r26, 0x03	; 3
    7786:	61 15       	cp	r22, r1
    7788:	71 05       	cpc	r23, r1
    778a:	21 f0       	breq	.+8      	; 0x7794 <malloc+0x8c>
    778c:	fb 01       	movw	r30, r22
    778e:	93 83       	std	Z+3, r25	; 0x03
    7790:	82 83       	std	Z+2, r24	; 0x02
    7792:	04 c0       	rjmp	.+8      	; 0x779c <malloc+0x94>
    7794:	90 93 df 08 	sts	0x08DF, r25
    7798:	80 93 de 08 	sts	0x08DE, r24
    779c:	fd 01       	movw	r30, r26
    779e:	32 96       	adiw	r30, 0x02	; 2
    77a0:	44 c0       	rjmp	.+136    	; 0x782a <malloc+0x122>
    77a2:	fd 01       	movw	r30, r26
    77a4:	e2 0f       	add	r30, r18
    77a6:	f3 1f       	adc	r31, r19
    77a8:	81 93       	st	Z+, r24
    77aa:	91 93       	st	Z+, r25
    77ac:	22 50       	subi	r18, 0x02	; 2
    77ae:	31 09       	sbc	r19, r1
    77b0:	2d 93       	st	X+, r18
    77b2:	3c 93       	st	X, r19
    77b4:	3a c0       	rjmp	.+116    	; 0x782a <malloc+0x122>
    77b6:	20 91 dc 08 	lds	r18, 0x08DC
    77ba:	30 91 dd 08 	lds	r19, 0x08DD
    77be:	23 2b       	or	r18, r19
    77c0:	41 f4       	brne	.+16     	; 0x77d2 <malloc+0xca>
    77c2:	20 91 02 02 	lds	r18, 0x0202
    77c6:	30 91 03 02 	lds	r19, 0x0203
    77ca:	30 93 dd 08 	sts	0x08DD, r19
    77ce:	20 93 dc 08 	sts	0x08DC, r18
    77d2:	20 91 00 02 	lds	r18, 0x0200
    77d6:	30 91 01 02 	lds	r19, 0x0201
    77da:	21 15       	cp	r18, r1
    77dc:	31 05       	cpc	r19, r1
    77de:	41 f4       	brne	.+16     	; 0x77f0 <malloc+0xe8>
    77e0:	2d b7       	in	r18, 0x3d	; 61
    77e2:	3e b7       	in	r19, 0x3e	; 62
    77e4:	40 91 04 02 	lds	r20, 0x0204
    77e8:	50 91 05 02 	lds	r21, 0x0205
    77ec:	24 1b       	sub	r18, r20
    77ee:	35 0b       	sbc	r19, r21
    77f0:	e0 91 dc 08 	lds	r30, 0x08DC
    77f4:	f0 91 dd 08 	lds	r31, 0x08DD
    77f8:	e2 17       	cp	r30, r18
    77fa:	f3 07       	cpc	r31, r19
    77fc:	a0 f4       	brcc	.+40     	; 0x7826 <malloc+0x11e>
    77fe:	2e 1b       	sub	r18, r30
    7800:	3f 0b       	sbc	r19, r31
    7802:	28 17       	cp	r18, r24
    7804:	39 07       	cpc	r19, r25
    7806:	78 f0       	brcs	.+30     	; 0x7826 <malloc+0x11e>
    7808:	ac 01       	movw	r20, r24
    780a:	4e 5f       	subi	r20, 0xFE	; 254
    780c:	5f 4f       	sbci	r21, 0xFF	; 255
    780e:	24 17       	cp	r18, r20
    7810:	35 07       	cpc	r19, r21
    7812:	48 f0       	brcs	.+18     	; 0x7826 <malloc+0x11e>
    7814:	4e 0f       	add	r20, r30
    7816:	5f 1f       	adc	r21, r31
    7818:	50 93 dd 08 	sts	0x08DD, r21
    781c:	40 93 dc 08 	sts	0x08DC, r20
    7820:	81 93       	st	Z+, r24
    7822:	91 93       	st	Z+, r25
    7824:	02 c0       	rjmp	.+4      	; 0x782a <malloc+0x122>
    7826:	e0 e0       	ldi	r30, 0x00	; 0
    7828:	f0 e0       	ldi	r31, 0x00	; 0
    782a:	cf 01       	movw	r24, r30
    782c:	df 91       	pop	r29
    782e:	cf 91       	pop	r28
    7830:	08 95       	ret

00007832 <free>:
    7832:	0f 93       	push	r16
    7834:	1f 93       	push	r17
    7836:	cf 93       	push	r28
    7838:	df 93       	push	r29
    783a:	00 97       	sbiw	r24, 0x00	; 0
    783c:	09 f4       	brne	.+2      	; 0x7840 <free+0xe>
    783e:	8c c0       	rjmp	.+280    	; 0x7958 <free+0x126>
    7840:	fc 01       	movw	r30, r24
    7842:	32 97       	sbiw	r30, 0x02	; 2
    7844:	13 82       	std	Z+3, r1	; 0x03
    7846:	12 82       	std	Z+2, r1	; 0x02
    7848:	00 91 de 08 	lds	r16, 0x08DE
    784c:	10 91 df 08 	lds	r17, 0x08DF
    7850:	01 15       	cp	r16, r1
    7852:	11 05       	cpc	r17, r1
    7854:	81 f4       	brne	.+32     	; 0x7876 <free+0x44>
    7856:	20 81       	ld	r18, Z
    7858:	31 81       	ldd	r19, Z+1	; 0x01
    785a:	82 0f       	add	r24, r18
    785c:	93 1f       	adc	r25, r19
    785e:	20 91 dc 08 	lds	r18, 0x08DC
    7862:	30 91 dd 08 	lds	r19, 0x08DD
    7866:	28 17       	cp	r18, r24
    7868:	39 07       	cpc	r19, r25
    786a:	79 f5       	brne	.+94     	; 0x78ca <free+0x98>
    786c:	f0 93 dd 08 	sts	0x08DD, r31
    7870:	e0 93 dc 08 	sts	0x08DC, r30
    7874:	71 c0       	rjmp	.+226    	; 0x7958 <free+0x126>
    7876:	d8 01       	movw	r26, r16
    7878:	40 e0       	ldi	r20, 0x00	; 0
    787a:	50 e0       	ldi	r21, 0x00	; 0
    787c:	ae 17       	cp	r26, r30
    787e:	bf 07       	cpc	r27, r31
    7880:	50 f4       	brcc	.+20     	; 0x7896 <free+0x64>
    7882:	12 96       	adiw	r26, 0x02	; 2
    7884:	2d 91       	ld	r18, X+
    7886:	3c 91       	ld	r19, X
    7888:	13 97       	sbiw	r26, 0x03	; 3
    788a:	ad 01       	movw	r20, r26
    788c:	21 15       	cp	r18, r1
    788e:	31 05       	cpc	r19, r1
    7890:	09 f1       	breq	.+66     	; 0x78d4 <free+0xa2>
    7892:	d9 01       	movw	r26, r18
    7894:	f3 cf       	rjmp	.-26     	; 0x787c <free+0x4a>
    7896:	9d 01       	movw	r18, r26
    7898:	da 01       	movw	r26, r20
    789a:	33 83       	std	Z+3, r19	; 0x03
    789c:	22 83       	std	Z+2, r18	; 0x02
    789e:	60 81       	ld	r22, Z
    78a0:	71 81       	ldd	r23, Z+1	; 0x01
    78a2:	86 0f       	add	r24, r22
    78a4:	97 1f       	adc	r25, r23
    78a6:	82 17       	cp	r24, r18
    78a8:	93 07       	cpc	r25, r19
    78aa:	69 f4       	brne	.+26     	; 0x78c6 <free+0x94>
    78ac:	ec 01       	movw	r28, r24
    78ae:	28 81       	ld	r18, Y
    78b0:	39 81       	ldd	r19, Y+1	; 0x01
    78b2:	26 0f       	add	r18, r22
    78b4:	37 1f       	adc	r19, r23
    78b6:	2e 5f       	subi	r18, 0xFE	; 254
    78b8:	3f 4f       	sbci	r19, 0xFF	; 255
    78ba:	31 83       	std	Z+1, r19	; 0x01
    78bc:	20 83       	st	Z, r18
    78be:	8a 81       	ldd	r24, Y+2	; 0x02
    78c0:	9b 81       	ldd	r25, Y+3	; 0x03
    78c2:	93 83       	std	Z+3, r25	; 0x03
    78c4:	82 83       	std	Z+2, r24	; 0x02
    78c6:	45 2b       	or	r20, r21
    78c8:	29 f4       	brne	.+10     	; 0x78d4 <free+0xa2>
    78ca:	f0 93 df 08 	sts	0x08DF, r31
    78ce:	e0 93 de 08 	sts	0x08DE, r30
    78d2:	42 c0       	rjmp	.+132    	; 0x7958 <free+0x126>
    78d4:	13 96       	adiw	r26, 0x03	; 3
    78d6:	fc 93       	st	X, r31
    78d8:	ee 93       	st	-X, r30
    78da:	12 97       	sbiw	r26, 0x02	; 2
    78dc:	ed 01       	movw	r28, r26
    78de:	49 91       	ld	r20, Y+
    78e0:	59 91       	ld	r21, Y+
    78e2:	9e 01       	movw	r18, r28
    78e4:	24 0f       	add	r18, r20
    78e6:	35 1f       	adc	r19, r21
    78e8:	e2 17       	cp	r30, r18
    78ea:	f3 07       	cpc	r31, r19
    78ec:	71 f4       	brne	.+28     	; 0x790a <free+0xd8>
    78ee:	80 81       	ld	r24, Z
    78f0:	91 81       	ldd	r25, Z+1	; 0x01
    78f2:	84 0f       	add	r24, r20
    78f4:	95 1f       	adc	r25, r21
    78f6:	02 96       	adiw	r24, 0x02	; 2
    78f8:	11 96       	adiw	r26, 0x01	; 1
    78fa:	9c 93       	st	X, r25
    78fc:	8e 93       	st	-X, r24
    78fe:	82 81       	ldd	r24, Z+2	; 0x02
    7900:	93 81       	ldd	r25, Z+3	; 0x03
    7902:	13 96       	adiw	r26, 0x03	; 3
    7904:	9c 93       	st	X, r25
    7906:	8e 93       	st	-X, r24
    7908:	12 97       	sbiw	r26, 0x02	; 2
    790a:	e0 e0       	ldi	r30, 0x00	; 0
    790c:	f0 e0       	ldi	r31, 0x00	; 0
    790e:	d8 01       	movw	r26, r16
    7910:	12 96       	adiw	r26, 0x02	; 2
    7912:	8d 91       	ld	r24, X+
    7914:	9c 91       	ld	r25, X
    7916:	13 97       	sbiw	r26, 0x03	; 3
    7918:	00 97       	sbiw	r24, 0x00	; 0
    791a:	19 f0       	breq	.+6      	; 0x7922 <free+0xf0>
    791c:	f8 01       	movw	r30, r16
    791e:	8c 01       	movw	r16, r24
    7920:	f6 cf       	rjmp	.-20     	; 0x790e <free+0xdc>
    7922:	8d 91       	ld	r24, X+
    7924:	9c 91       	ld	r25, X
    7926:	98 01       	movw	r18, r16
    7928:	2e 5f       	subi	r18, 0xFE	; 254
    792a:	3f 4f       	sbci	r19, 0xFF	; 255
    792c:	82 0f       	add	r24, r18
    792e:	93 1f       	adc	r25, r19
    7930:	20 91 dc 08 	lds	r18, 0x08DC
    7934:	30 91 dd 08 	lds	r19, 0x08DD
    7938:	28 17       	cp	r18, r24
    793a:	39 07       	cpc	r19, r25
    793c:	69 f4       	brne	.+26     	; 0x7958 <free+0x126>
    793e:	30 97       	sbiw	r30, 0x00	; 0
    7940:	29 f4       	brne	.+10     	; 0x794c <free+0x11a>
    7942:	10 92 df 08 	sts	0x08DF, r1
    7946:	10 92 de 08 	sts	0x08DE, r1
    794a:	02 c0       	rjmp	.+4      	; 0x7950 <free+0x11e>
    794c:	13 82       	std	Z+3, r1	; 0x03
    794e:	12 82       	std	Z+2, r1	; 0x02
    7950:	10 93 dd 08 	sts	0x08DD, r17
    7954:	00 93 dc 08 	sts	0x08DC, r16
    7958:	df 91       	pop	r29
    795a:	cf 91       	pop	r28
    795c:	1f 91       	pop	r17
    795e:	0f 91       	pop	r16
    7960:	08 95       	ret

00007962 <realloc>:
    7962:	6f 92       	push	r6
    7964:	7f 92       	push	r7
    7966:	8f 92       	push	r8
    7968:	9f 92       	push	r9
    796a:	af 92       	push	r10
    796c:	bf 92       	push	r11
    796e:	cf 92       	push	r12
    7970:	df 92       	push	r13
    7972:	ef 92       	push	r14
    7974:	ff 92       	push	r15
    7976:	0f 93       	push	r16
    7978:	1f 93       	push	r17
    797a:	cf 93       	push	r28
    797c:	df 93       	push	r29
    797e:	ec 01       	movw	r28, r24
    7980:	00 97       	sbiw	r24, 0x00	; 0
    7982:	81 f4       	brne	.+32     	; 0x79a4 <realloc+0x42>
    7984:	cb 01       	movw	r24, r22
    7986:	df 91       	pop	r29
    7988:	cf 91       	pop	r28
    798a:	1f 91       	pop	r17
    798c:	0f 91       	pop	r16
    798e:	ff 90       	pop	r15
    7990:	ef 90       	pop	r14
    7992:	df 90       	pop	r13
    7994:	cf 90       	pop	r12
    7996:	bf 90       	pop	r11
    7998:	af 90       	pop	r10
    799a:	9f 90       	pop	r9
    799c:	8f 90       	pop	r8
    799e:	7f 90       	pop	r7
    79a0:	6f 90       	pop	r6
    79a2:	b2 ce       	rjmp	.-668    	; 0x7708 <malloc>
    79a4:	fc 01       	movw	r30, r24
    79a6:	e6 0f       	add	r30, r22
    79a8:	f7 1f       	adc	r31, r23
    79aa:	9c 01       	movw	r18, r24
    79ac:	22 50       	subi	r18, 0x02	; 2
    79ae:	31 09       	sbc	r19, r1
    79b0:	e2 17       	cp	r30, r18
    79b2:	f3 07       	cpc	r31, r19
    79b4:	08 f4       	brcc	.+2      	; 0x79b8 <realloc+0x56>
    79b6:	a8 c0       	rjmp	.+336    	; 0x7b08 <realloc+0x1a6>
    79b8:	d9 01       	movw	r26, r18
    79ba:	0d 91       	ld	r16, X+
    79bc:	1c 91       	ld	r17, X
    79be:	11 97       	sbiw	r26, 0x01	; 1
    79c0:	06 17       	cp	r16, r22
    79c2:	17 07       	cpc	r17, r23
    79c4:	a8 f0       	brcs	.+42     	; 0x79f0 <realloc+0x8e>
    79c6:	05 30       	cpi	r16, 0x05	; 5
    79c8:	11 05       	cpc	r17, r1
    79ca:	08 f4       	brcc	.+2      	; 0x79ce <realloc+0x6c>
    79cc:	9b c0       	rjmp	.+310    	; 0x7b04 <realloc+0x1a2>
    79ce:	c8 01       	movw	r24, r16
    79d0:	04 97       	sbiw	r24, 0x04	; 4
    79d2:	86 17       	cp	r24, r22
    79d4:	97 07       	cpc	r25, r23
    79d6:	08 f4       	brcc	.+2      	; 0x79da <realloc+0x78>
    79d8:	95 c0       	rjmp	.+298    	; 0x7b04 <realloc+0x1a2>
    79da:	02 50       	subi	r16, 0x02	; 2
    79dc:	11 09       	sbc	r17, r1
    79de:	06 1b       	sub	r16, r22
    79e0:	17 0b       	sbc	r17, r23
    79e2:	01 93       	st	Z+, r16
    79e4:	11 93       	st	Z+, r17
    79e6:	6d 93       	st	X+, r22
    79e8:	7c 93       	st	X, r23
    79ea:	cf 01       	movw	r24, r30
    79ec:	22 df       	rcall	.-444    	; 0x7832 <free>
    79ee:	8a c0       	rjmp	.+276    	; 0x7b04 <realloc+0x1a2>
    79f0:	5b 01       	movw	r10, r22
    79f2:	a0 1a       	sub	r10, r16
    79f4:	b1 0a       	sbc	r11, r17
    79f6:	4c 01       	movw	r8, r24
    79f8:	80 0e       	add	r8, r16
    79fa:	91 1e       	adc	r9, r17
    79fc:	a0 91 de 08 	lds	r26, 0x08DE
    7a00:	b0 91 df 08 	lds	r27, 0x08DF
    7a04:	40 e0       	ldi	r20, 0x00	; 0
    7a06:	50 e0       	ldi	r21, 0x00	; 0
    7a08:	e1 2c       	mov	r14, r1
    7a0a:	f1 2c       	mov	r15, r1
    7a0c:	10 97       	sbiw	r26, 0x00	; 0
    7a0e:	09 f4       	brne	.+2      	; 0x7a12 <realloc+0xb0>
    7a10:	4a c0       	rjmp	.+148    	; 0x7aa6 <realloc+0x144>
    7a12:	a8 15       	cp	r26, r8
    7a14:	b9 05       	cpc	r27, r9
    7a16:	d1 f5       	brne	.+116    	; 0x7a8c <realloc+0x12a>
    7a18:	6d 90       	ld	r6, X+
    7a1a:	7c 90       	ld	r7, X
    7a1c:	11 97       	sbiw	r26, 0x01	; 1
    7a1e:	63 01       	movw	r12, r6
    7a20:	82 e0       	ldi	r24, 0x02	; 2
    7a22:	c8 0e       	add	r12, r24
    7a24:	d1 1c       	adc	r13, r1
    7a26:	ca 14       	cp	r12, r10
    7a28:	db 04       	cpc	r13, r11
    7a2a:	80 f1       	brcs	.+96     	; 0x7a8c <realloc+0x12a>
    7a2c:	a3 01       	movw	r20, r6
    7a2e:	4a 19       	sub	r20, r10
    7a30:	5b 09       	sbc	r21, r11
    7a32:	6a 01       	movw	r12, r20
    7a34:	82 e0       	ldi	r24, 0x02	; 2
    7a36:	c8 0e       	add	r12, r24
    7a38:	d1 1c       	adc	r13, r1
    7a3a:	12 96       	adiw	r26, 0x02	; 2
    7a3c:	bc 90       	ld	r11, X
    7a3e:	12 97       	sbiw	r26, 0x02	; 2
    7a40:	13 96       	adiw	r26, 0x03	; 3
    7a42:	ac 91       	ld	r26, X
    7a44:	b5 e0       	ldi	r27, 0x05	; 5
    7a46:	cb 16       	cp	r12, r27
    7a48:	d1 04       	cpc	r13, r1
    7a4a:	40 f0       	brcs	.+16     	; 0x7a5c <realloc+0xfa>
    7a4c:	b2 82       	std	Z+2, r11	; 0x02
    7a4e:	a3 83       	std	Z+3, r26	; 0x03
    7a50:	51 83       	std	Z+1, r21	; 0x01
    7a52:	40 83       	st	Z, r20
    7a54:	d9 01       	movw	r26, r18
    7a56:	6d 93       	st	X+, r22
    7a58:	7c 93       	st	X, r23
    7a5a:	0a c0       	rjmp	.+20     	; 0x7a70 <realloc+0x10e>
    7a5c:	0e 5f       	subi	r16, 0xFE	; 254
    7a5e:	1f 4f       	sbci	r17, 0xFF	; 255
    7a60:	c3 01       	movw	r24, r6
    7a62:	80 0f       	add	r24, r16
    7a64:	91 1f       	adc	r25, r17
    7a66:	f9 01       	movw	r30, r18
    7a68:	91 83       	std	Z+1, r25	; 0x01
    7a6a:	80 83       	st	Z, r24
    7a6c:	eb 2d       	mov	r30, r11
    7a6e:	fa 2f       	mov	r31, r26
    7a70:	e1 14       	cp	r14, r1
    7a72:	f1 04       	cpc	r15, r1
    7a74:	31 f0       	breq	.+12     	; 0x7a82 <realloc+0x120>
    7a76:	d7 01       	movw	r26, r14
    7a78:	13 96       	adiw	r26, 0x03	; 3
    7a7a:	fc 93       	st	X, r31
    7a7c:	ee 93       	st	-X, r30
    7a7e:	12 97       	sbiw	r26, 0x02	; 2
    7a80:	41 c0       	rjmp	.+130    	; 0x7b04 <realloc+0x1a2>
    7a82:	f0 93 df 08 	sts	0x08DF, r31
    7a86:	e0 93 de 08 	sts	0x08DE, r30
    7a8a:	3c c0       	rjmp	.+120    	; 0x7b04 <realloc+0x1a2>
    7a8c:	8d 91       	ld	r24, X+
    7a8e:	9c 91       	ld	r25, X
    7a90:	11 97       	sbiw	r26, 0x01	; 1
    7a92:	48 17       	cp	r20, r24
    7a94:	59 07       	cpc	r21, r25
    7a96:	08 f4       	brcc	.+2      	; 0x7a9a <realloc+0x138>
    7a98:	ac 01       	movw	r20, r24
    7a9a:	7d 01       	movw	r14, r26
    7a9c:	12 96       	adiw	r26, 0x02	; 2
    7a9e:	0d 90       	ld	r0, X+
    7aa0:	bc 91       	ld	r27, X
    7aa2:	a0 2d       	mov	r26, r0
    7aa4:	b3 cf       	rjmp	.-154    	; 0x7a0c <realloc+0xaa>
    7aa6:	80 91 dc 08 	lds	r24, 0x08DC
    7aaa:	90 91 dd 08 	lds	r25, 0x08DD
    7aae:	88 15       	cp	r24, r8
    7ab0:	99 05       	cpc	r25, r9
    7ab2:	e1 f4       	brne	.+56     	; 0x7aec <realloc+0x18a>
    7ab4:	46 17       	cp	r20, r22
    7ab6:	57 07       	cpc	r21, r23
    7ab8:	c8 f4       	brcc	.+50     	; 0x7aec <realloc+0x18a>
    7aba:	80 91 00 02 	lds	r24, 0x0200
    7abe:	90 91 01 02 	lds	r25, 0x0201
    7ac2:	00 97       	sbiw	r24, 0x00	; 0
    7ac4:	41 f4       	brne	.+16     	; 0x7ad6 <realloc+0x174>
    7ac6:	8d b7       	in	r24, 0x3d	; 61
    7ac8:	9e b7       	in	r25, 0x3e	; 62
    7aca:	40 91 04 02 	lds	r20, 0x0204
    7ace:	50 91 05 02 	lds	r21, 0x0205
    7ad2:	84 1b       	sub	r24, r20
    7ad4:	95 0b       	sbc	r25, r21
    7ad6:	e8 17       	cp	r30, r24
    7ad8:	f9 07       	cpc	r31, r25
    7ada:	b0 f4       	brcc	.+44     	; 0x7b08 <realloc+0x1a6>
    7adc:	f0 93 dd 08 	sts	0x08DD, r31
    7ae0:	e0 93 dc 08 	sts	0x08DC, r30
    7ae4:	f9 01       	movw	r30, r18
    7ae6:	71 83       	std	Z+1, r23	; 0x01
    7ae8:	60 83       	st	Z, r22
    7aea:	0c c0       	rjmp	.+24     	; 0x7b04 <realloc+0x1a2>
    7aec:	cb 01       	movw	r24, r22
    7aee:	0c de       	rcall	.-1000   	; 0x7708 <malloc>
    7af0:	7c 01       	movw	r14, r24
    7af2:	00 97       	sbiw	r24, 0x00	; 0
    7af4:	49 f0       	breq	.+18     	; 0x7b08 <realloc+0x1a6>
    7af6:	a8 01       	movw	r20, r16
    7af8:	be 01       	movw	r22, r28
    7afa:	1b d0       	rcall	.+54     	; 0x7b32 <memcpy>
    7afc:	ce 01       	movw	r24, r28
    7afe:	99 de       	rcall	.-718    	; 0x7832 <free>
    7b00:	c7 01       	movw	r24, r14
    7b02:	04 c0       	rjmp	.+8      	; 0x7b0c <realloc+0x1aa>
    7b04:	ce 01       	movw	r24, r28
    7b06:	02 c0       	rjmp	.+4      	; 0x7b0c <realloc+0x1aa>
    7b08:	80 e0       	ldi	r24, 0x00	; 0
    7b0a:	90 e0       	ldi	r25, 0x00	; 0
    7b0c:	df 91       	pop	r29
    7b0e:	cf 91       	pop	r28
    7b10:	1f 91       	pop	r17
    7b12:	0f 91       	pop	r16
    7b14:	ff 90       	pop	r15
    7b16:	ef 90       	pop	r14
    7b18:	df 90       	pop	r13
    7b1a:	cf 90       	pop	r12
    7b1c:	bf 90       	pop	r11
    7b1e:	af 90       	pop	r10
    7b20:	9f 90       	pop	r9
    7b22:	8f 90       	pop	r8
    7b24:	7f 90       	pop	r7
    7b26:	6f 90       	pop	r6
    7b28:	08 95       	ret

00007b2a <abort>:
    7b2a:	81 e0       	ldi	r24, 0x01	; 1
    7b2c:	90 e0       	ldi	r25, 0x00	; 0
    7b2e:	f8 94       	cli
    7b30:	19 c0       	rjmp	.+50     	; 0x7b64 <_exit>

00007b32 <memcpy>:
    7b32:	fb 01       	movw	r30, r22
    7b34:	dc 01       	movw	r26, r24
    7b36:	02 c0       	rjmp	.+4      	; 0x7b3c <memcpy+0xa>
    7b38:	01 90       	ld	r0, Z+
    7b3a:	0d 92       	st	X+, r0
    7b3c:	41 50       	subi	r20, 0x01	; 1
    7b3e:	50 40       	sbci	r21, 0x00	; 0
    7b40:	d8 f7       	brcc	.-10     	; 0x7b38 <memcpy+0x6>
    7b42:	08 95       	ret

00007b44 <strcmp>:
    7b44:	fb 01       	movw	r30, r22
    7b46:	dc 01       	movw	r26, r24
    7b48:	8d 91       	ld	r24, X+
    7b4a:	01 90       	ld	r0, Z+
    7b4c:	80 19       	sub	r24, r0
    7b4e:	01 10       	cpse	r0, r1
    7b50:	d9 f3       	breq	.-10     	; 0x7b48 <strcmp+0x4>
    7b52:	99 0b       	sbc	r25, r25
    7b54:	08 95       	ret

00007b56 <strcpy>:
    7b56:	fb 01       	movw	r30, r22
    7b58:	dc 01       	movw	r26, r24
    7b5a:	01 90       	ld	r0, Z+
    7b5c:	0d 92       	st	X+, r0
    7b5e:	00 20       	and	r0, r0
    7b60:	e1 f7       	brne	.-8      	; 0x7b5a <strcpy+0x4>
    7b62:	08 95       	ret

00007b64 <_exit>:
    7b64:	f8 94       	cli

00007b66 <__stop_program>:
    7b66:	ff cf       	rjmp	.-2      	; 0x7b66 <__stop_program>
